<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook MathML Module V1.1b1//EN"
              "http://www.oasis-open.org/docbook/xml/mathml/1.1CR1/dbmathml.dtd">
<refentry id="glDrawArrays">
    <refmeta>
        <refmetainfo>
            <copyright>
                <year>1991-2006</year>
                <holder>Silicon Graphics, Inc.</holder>
            </copyright>
        </refmetainfo>
        <refentrytitle>glDrawArrays</refentrytitle>
        <manvolnum>3G</manvolnum>
    </refmeta>
    <refnamediv>
        <refname>glDrawArrays</refname>
        <refpurpose>render primitives from array data</refpurpose>
    </refnamediv>
    <refsynopsisdiv><title>C Specification</title>
        <funcsynopsis>
            <funcprototype>
                <funcdef>void <function>glDrawArrays</function></funcdef>
                <paramdef>GLenum <parameter>mode</parameter></paramdef>
                <paramdef>GLint <parameter>first</parameter></paramdef>
                <paramdef>GLsizei <parameter>count</parameter></paramdef>
            </funcprototype>
        </funcsynopsis>
    </refsynopsisdiv>
    <!-- eqn: ignoring delim $$ -->
    <refsect1 id="parameters"><title>Parameters</title>
        <variablelist>
        <varlistentry>
            <term><parameter>mode</parameter></term>
            <listitem>
                <para>
                    Specifies what kind of primitives to render.
                    Symbolic constants
                    <constant>GL_POINTS</constant>,
                    <constant>GL_LINE_STRIP</constant>,
                    <constant>GL_LINE_LOOP</constant>,
                    <constant>GL_LINES</constant>,
                    <constant>GL_TRIANGLE_STRIP</constant>,
                    <constant>GL_TRIANGLE_FAN</constant>, and
                    <constant>GL_TRIANGLES</constant> are accepted.
                </para>
            </listitem>
        </varlistentry>
        <varlistentry>
            <term><parameter>first</parameter></term>
            <listitem>
                <para>
                    Specifies the starting index in the enabled arrays.
                </para>
            </listitem>
        </varlistentry>
        <varlistentry>
            <term><parameter>count</parameter></term>
            <listitem>
                <para>
                    Specifies the number of indices to be rendered.
                </para>
            </listitem>
        </varlistentry>
        </variablelist>
    </refsect1>
    <refsect1 id="description"><title>Description</title>
        <para>
            <function>glDrawArrays</function> specifies multiple geometric primitives
            with very few subroutine calls. Instead of calling a GL procedure
            to pass each individual vertex attribute, you can use 
            <citerefentry><refentrytitle>glVertexAttribPointer</refentrytitle></citerefentry> 
            to prespecify separate arrays of vertices, normals, and colors and use them to
            construct a sequence of primitives with a single
            call to <function>glDrawArrays</function>.
        </para>
        <para>
            When <function>glDrawArrays</function> is called, it uses <parameter>count</parameter> sequential elements from each
            enabled array to construct a sequence of geometric primitives,
            beginning with element <parameter>first</parameter>. <parameter>mode</parameter> specifies what kind of
            primitives are constructed and how the array elements
            construct those primitives.
        </para>
        <para>
            To enable and disable a generic vertex attribute array, call
            <citerefentry><refentrytitle>glEnableVertexAttribArray</refentrytitle></citerefentry>
            and
            <citerefentry><refentrytitle>glDisableVertexAttribArray</refentrytitle></citerefentry>.
        </para>
    </refsect1>
    <refsect1 id="notes"><title>Notes</title>
        <para>
            If the current program object, as set by 
            <citerefentry><refentrytitle>glUseProgram</refentrytitle></citerefentry>,
            is invalid, rendering results are undefined. However, no error is generated
            for this case.
        </para>
    </refsect1>
    <refsect1 id="errors"><title>Errors</title>
        <para>
            <constant>GL_INVALID_ENUM</constant> is generated if <parameter>mode</parameter> is not an accepted value.
        </para>
        <para>
            <constant>GL_INVALID_VALUE</constant> is generated if <parameter>count</parameter> is negative.
        </para>
        <para>
            <constant>GL_INVALID_FRAMEBUFFER_OPERATION</constant> is generated if 
            the currently bound framebuffer is not framebuffer complete (i.e. the 
            return value from <citerefentry><refentrytitle>glCheckFramebufferStatus</refentrytitle></citerefentry>
            is not <constant>GL_FRAMEBUFFER_COMPLETE</constant>).
        </para>
    </refsect1>
    <refsect1 id="seealso"><title>See Also</title>
        <para>
            <citerefentry><refentrytitle>glCheckFramebufferStatus</refentrytitle></citerefentry>,
            <citerefentry><refentrytitle>glDisableVertexAttribArray</refentrytitle></citerefentry>,
            <citerefentry><refentrytitle>glDrawElements</refentrytitle></citerefentry>,
            <citerefentry><refentrytitle>glEnableVertexAttribArray</refentrytitle></citerefentry>,
            <citerefentry><refentrytitle>glUseProgram</refentrytitle></citerefentry>,
            <citerefentry><refentrytitle>glVertexAttribPointer</refentrytitle></citerefentry>
        </para>
    </refsect1>
    <refsect1 id="copyright"><title>Copyright</title>
        <para>
            Copyright <trademark class="copyright"></trademark> 1991-2006
            Silicon Graphics, Inc. This document is licensed under the SGI
            Free Software B License. For details, see
            <ulink url="http://oss.sgi.com/projects/FreeB/">http://oss.sgi.com/projects/FreeB/</ulink>.
        </para>
    </refsect1>
</refentry>
