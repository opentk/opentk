<!DOCTYPE refentry [ <!ENTITY % mathent SYSTEM "math.ent"> %mathent; ]>

<!-- Converted by db4-upgrade version 1.1 -->

<refentry xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="glUseProgram">
    <info>
        <copyright>
            <year>2003-2005</year>
            <holder>3Dlabs Inc. Ltd.</holder>
        </copyright>
        <copyright>
            <year>2010-2014</year>
            <holder>Khronos Group</holder>
        </copyright>
    </info>
    <refmeta>
        <refentrytitle>glUseProgram</refentrytitle>
        <manvolnum>3G</manvolnum>
    </refmeta>
    <refnamediv>
        <refname>glUseProgram</refname>
        <refpurpose>Installs a program object as part of current rendering state</refpurpose>
    </refnamediv>
    <refsynopsisdiv><title>C Specification</title>
        <funcsynopsis>
            <funcprototype>
                <funcdef>void <function>glUseProgram</function></funcdef>
                <paramdef>GLuint <parameter>program</parameter></paramdef>
            </funcprototype>
        </funcsynopsis>
    </refsynopsisdiv>
    <refsect1 xml:id="parameters"><title>Parameters</title>
        <variablelist>
            <varlistentry>
                <term><parameter>program</parameter></term>
                <listitem>
                    <para>Specifies the handle of the program object
                    whose executables are to be used as part of current
                    rendering state.</para>
                </listitem>
            </varlistentry>
        </variablelist>
    </refsect1>
    <refsect1 xml:id="description"><title>Description</title>
        <para><function>glUseProgram</function> installs the program
        object specified by <parameter>program</parameter> as part of
        current rendering state. One or more executables are created in
        a program object by successfully attaching shader objects to it
        with
        <citerefentry><refentrytitle>glAttachShader</refentrytitle></citerefentry>,
        successfully compiling the shader objects with
        <citerefentry><refentrytitle>glCompileShader</refentrytitle></citerefentry>,
        and successfully linking the program object with
        <citerefentry><refentrytitle>glLinkProgram</refentrytitle></citerefentry>.
        </para>

        <para>A program object will contain an executable that will run
        on the vertex processor if it contains a shader
        object of type <constant>GL_VERTEX_SHADER</constant> that has
        been successfully compiled and linked.
        Similarly, a program object will contain an executable that will run on the
        fragment processor if it contains a shader object of type
        <constant>GL_FRAGMENT_SHADER</constant> that has been
        successfully compiled and linked.</para>

        <para>While a program object is in use, applications are free to
        modify attached shader objects, compile attached shader objects,
        attach additional shader objects, and detach or delete shader
        objects. None of these operations will affect the executables
        that are part of the current state. However, relinking the
        program object that is currently in use will install the program
        object as part of the current rendering state if the link
        operation was successful (see
        <citerefentry><refentrytitle>glLinkProgram</refentrytitle></citerefentry>
        ). If the program object currently in use is relinked
        unsuccessfully, its link status will be set to
        <constant>GL_FALSE</constant>, but the executables and
        associated state will remain part of the current state until a
        subsequent call to <function>glUseProgram</function> removes it
        from use. After it is removed from use, it cannot be made part
        of current state until it has been successfully relinked.</para>

        <para>If <parameter>program</parameter> is zero, then the current rendering
        state refers to an <emphasis>invalid</emphasis> program object and the
        results of shader execution are undefined. However, this is not an error.</para>
        
    </refsect1>
    <refsect1 xml:id="notes"><title>Notes</title>
        <para>Like buffer and texture objects, the name space for
        program objects may be shared across a set of contexts, as long
        as the server sides of the contexts share the same address
        space. If the name space is shared across contexts, any attached
        objects and the data associated with those attached objects are
        shared as well.</para>

        <para>Applications are responsible for providing the
        synchronization across API calls when objects are accessed from
        different execution threads.</para>

    </refsect1>
    <refsect1 xml:id="errors"><title>Errors</title>
        <para><constant>GL_INVALID_VALUE</constant> is generated if
        <parameter>program</parameter> is neither 0 nor a value
        generated by OpenGL.</para>

        <para><constant>GL_INVALID_OPERATION</constant> is generated if
        <parameter>program</parameter> is not a program object.</para>

        <para><constant>GL_INVALID_OPERATION</constant> is generated if
        <parameter>program</parameter> could not be made part of current
        state.</para>
        
        <para><constant>GL_INVALID_OPERATION</constant> is generated if
        transform feedback mode is active and not paused.</para>

    </refsect1>
    <refsect1 xml:id="associatedgets"><title>Associated Gets</title>
        <para><citerefentry><refentrytitle>glGet</refentrytitle></citerefentry>
        with the argument <constant>GL_CURRENT_PROGRAM</constant></para>

        <para><citerefentry><refentrytitle>glGetActiveAttrib</refentrytitle></citerefentry>
        with a valid program object and the index of an active attribute
        variable</para>

        <para><citerefentry><refentrytitle>glGetActiveUniform</refentrytitle></citerefentry>
        with a valid program object and the index of an active uniform
        variable</para>

        <para><citerefentry><refentrytitle>glGetAttachedShaders</refentrytitle></citerefentry>
        with a valid program object</para>

        <para><citerefentry><refentrytitle>glGetAttribLocation</refentrytitle></citerefentry>
        with a valid program object and the name of an attribute
        variable</para>

        <para><citerefentry><refentrytitle>glGetProgramiv</refentrytitle></citerefentry>
        with a valid program object and the parameter to be queried</para>

        <para><citerefentry><refentrytitle>glGetProgramInfoLog</refentrytitle></citerefentry>
        with a valid program object</para>

        <para><citerefentry><refentrytitle>glGetUniform</refentrytitle></citerefentry>
        with a valid program object and the location of a uniform
        variable</para>

        <para><citerefentry><refentrytitle>glGetUniformLocation</refentrytitle></citerefentry>
        with a valid program object and the name of a uniform
        variable</para>

        <para><citerefentry><refentrytitle>glIsProgram</refentrytitle></citerefentry></para>
    </refsect1>
    <refsect1 xml:id="versions">
        <title>API Version Support</title>
        <informaltable>
            <tgroup cols="3" align="left">
                <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="apifunchead.xml" xpointer="xpointer(/*/*)"/>
                <tbody>
                    <row>
                        <entry>glUseProgram</entry>
                        <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="apiversion.xml" xpointer="xpointer(/*/*[@role='es20']/*)"/>
                    </row>
                </tbody>
            </tgroup>
        </informaltable>
    </refsect1>
    <refsect1 xml:id="seealso"><title>See Also</title>
        <para><citerefentry><refentrytitle>glAttachShader</refentrytitle></citerefentry>,
        <citerefentry><refentrytitle>glBindAttribLocation</refentrytitle></citerefentry>,
        <citerefentry><refentrytitle>glCompileShader</refentrytitle></citerefentry>,
        <citerefentry><refentrytitle>glCreateProgram</refentrytitle></citerefentry>,
        <citerefentry><refentrytitle>glDeleteProgram</refentrytitle></citerefentry>,
        <citerefentry><refentrytitle>glDetachShader</refentrytitle></citerefentry>,
        <citerefentry><refentrytitle>glLinkProgram</refentrytitle></citerefentry>,
        <citerefentry><refentrytitle>glUniform</refentrytitle></citerefentry>,
        <citerefentry><refentrytitle>glValidateProgram</refentrytitle></citerefentry>,
        <citerefentry><refentrytitle>glVertexAttrib</refentrytitle></citerefentry></para>
    </refsect1>
    <refsect1 xml:id="Copyright"><title>Copyright</title>
        <para>
            Copyright <trademark class="copyright"/> 2003-2005 3Dlabs Inc. Ltd.
            Copyright <trademark class="copyright"/> 2010-2014 Khronos Group.
            This material may be distributed subject to the terms and conditions set forth in
            the Open Publication License, v 1.0, 8 June 1999.
            <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://opencontent.org/openpub/">http://opencontent.org/openpub/</link>.
        </para>
    </refsect1>
</refentry>
