<!DOCTYPE refentry [ <!ENTITY % mathent SYSTEM "math.ent"> %mathent; ]>

<!-- Converted by db4-upgrade version 1.1 -->

<refentry xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="glDrawRangeElements">
    <info>
        <copyright>
            <year>1991-2006</year>
            <holder>Silicon Graphics, Inc.</holder>
        </copyright>
        <copyright>
            <year>2010-2014</year>
            <holder>Khronos Group</holder>
        </copyright>
    </info>
    <refmeta>
        <refentrytitle>glDrawRangeElements</refentrytitle>
        <manvolnum>3G</manvolnum>
    </refmeta>
    <refnamediv>
        <refname>glDrawRangeElements</refname>
        <refpurpose>render primitives from array data</refpurpose>
    </refnamediv>
    <refsynopsisdiv><title>C Specification</title>
        <funcsynopsis>
            <funcprototype>
                <funcdef>void <function>glDrawRangeElements</function></funcdef>
                <paramdef>GLenum <parameter>mode</parameter></paramdef>
                <paramdef>GLuint <parameter>start</parameter></paramdef>
                <paramdef>GLuint <parameter>end</parameter></paramdef>
                <paramdef>GLsizei <parameter>count</parameter></paramdef>
                <paramdef>GLenum <parameter>type</parameter></paramdef>
                <paramdef>const GLvoid * <parameter>indices</parameter></paramdef>
            </funcprototype>
        </funcsynopsis>
    </refsynopsisdiv>
    <refsect1 xml:id="parameters"><title>Parameters</title>
        <variablelist>
        <varlistentry>
            <term><parameter>mode</parameter></term>
            <listitem>
                <para>
                    Specifies what kind of primitives to render.
                    Symbolic constants
                    <constant>GL_POINTS</constant>,
                    <constant>GL_LINE_STRIP</constant>,
                    <constant>GL_LINE_LOOP</constant>,
                    <constant>GL_LINES</constant>,
                    <constant>GL_TRIANGLE_STRIP</constant>,
                    <constant>GL_TRIANGLE_FAN</constant> and
                    <constant>GL_TRIANGLES</constant>
                    are accepted.
                </para>
            </listitem>
        </varlistentry>
        <varlistentry>
            <term><parameter>start</parameter></term>
            <listitem>
                <para>
                    Specifies the minimum array index contained in <parameter>indices</parameter>.
                </para>
            </listitem>
        </varlistentry>
        <varlistentry>
            <term><parameter>end</parameter></term>
            <listitem>
                <para>
                    Specifies the maximum array index contained in <parameter>indices</parameter>.
                </para>
            </listitem>
        </varlistentry>
        <varlistentry>
            <term><parameter>count</parameter></term>
            <listitem>
                <para>
                    Specifies the number of elements to be rendered.
                </para>
            </listitem>
        </varlistentry>
        <varlistentry>
            <term><parameter>type</parameter></term>
            <listitem>
                <para>
                    Specifies the type of the values in <parameter>indices</parameter>. Must be one of
                    <constant>GL_UNSIGNED_BYTE</constant>, <constant>GL_UNSIGNED_SHORT</constant>, or
                    <constant>GL_UNSIGNED_INT</constant>.
                </para>
            </listitem>
        </varlistentry>
        <varlistentry>
            <term><parameter>indices</parameter></term>
            <listitem>
                <para>
                    Specifies a pointer to the location where the indices are stored.
                </para>
            </listitem>
        </varlistentry>
        </variablelist>
    </refsect1>
    <refsect1 xml:id="description"><title>Description</title>
        <para>
            <function>glDrawRangeElements</function> is a restricted form of <citerefentry><refentrytitle>glDrawElements</refentrytitle></citerefentry>. <parameter>mode</parameter>, <parameter>count</parameter>,
            and <parameter>type</parameter> match the corresponding arguments to <citerefentry><refentrytitle>glDrawElements</refentrytitle></citerefentry>, with
            the additional constraint that all values in the arrays <parameter>count</parameter> must lie
            between <parameter>start</parameter> and <parameter>end</parameter>, inclusive.
        </para>
        <para>
            Implementations denote recommended maximum amounts of vertex and
            index data,
            which may be queried by calling <citerefentry><refentrytitle>glGet</refentrytitle></citerefentry> with argument
            <constant>GL_MAX_ELEMENTS_VERTICES</constant> and <constant>GL_MAX_ELEMENTS_INDICES</constant>.
            If
            <inlineequation><mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll">
                <!-- eqn: end  -  start  +  1: -->
                <mml:mrow>
                    <mml:mi mathvariant="italic">end</mml:mi>
                    <mml:mo>-</mml:mo>
                    <mml:mi mathvariant="italic">start</mml:mi>
                    <mml:mo>+</mml:mo>
                    <mml:mn>1</mml:mn>
                </mml:mrow>
            </mml:math></inlineequation>
            is greater than the value of
            <constant>GL_MAX_ELEMENTS_VERTICES</constant>, or if <parameter>count</parameter> is greater than the value of
            <constant>GL_MAX_ELEMENTS_INDICES</constant>, then the call may operate at reduced
            performance.  There is no requirement that all vertices in the range
            <inlineequation><mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll">
                <!-- eqn: [start, end]: -->
                <mml:mfenced open="[" close="]">
                    <mml:mi mathvariant="italic">start</mml:mi>
                    <mml:mi mathvariant="italic">end</mml:mi>
                </mml:mfenced>
            </mml:math></inlineequation>
            be referenced.  However, the implementation may
            partially process unused vertices, reducing performance from what could
            be achieved with an optimal index set.
        </para>
        <para>
            When <function>glDrawRangeElements</function> is called, it uses <parameter>count</parameter> sequential elements from an
            enabled array, starting at <parameter>start</parameter> to construct a sequence of
            geometric primitives. <parameter>mode</parameter> specifies what kind of primitives are
            constructed, and how the array elements construct these primitives. If
            more than one array is enabled, each is used.
        </para>
        <para>
            To enable and disable a generic vertex attribute array, call
            <citerefentry><refentrytitle>glEnableVertexAttribArray</refentrytitle></citerefentry> and
            <citerefentry><refentrytitle>glDisableVertexAttribArray</refentrytitle></citerefentry>.
        </para>
        <para>
            If an array corresponding to a generic attribute required by a vertex shader
            is not enabled, then the corresponding element is taken from the current generic
            attribute state.
        </para>
    </refsect1>
    <refsect1 xml:id="errors"><title>Errors</title>
        <para>
            It is an error for indices to lie outside the range
            <inlineequation><mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll">
                <!-- eqn: [start, end]: -->
                <mml:mfenced open="[" close="]">
                    <mml:mi mathvariant="italic">start</mml:mi>
                    <mml:mi mathvariant="italic">end</mml:mi>
                </mml:mfenced>
            </mml:math></inlineequation>,
            but implementations may not check for this situation. Such indices
            cause implementation-dependent behavior.
        </para>
        <para>
            <constant>GL_INVALID_ENUM</constant> is generated if <parameter>mode</parameter> is not an accepted value.
        </para>
        <para>
            <constant>GL_INVALID_VALUE</constant> is generated if <parameter>count</parameter> is negative.
        </para>
        <para>
            <constant>GL_INVALID_VALUE</constant> is generated if
            <inlineequation><mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll">
                <!-- eqn: end < start: -->
                <mml:mrow>
                    <mml:mi mathvariant="italic">end</mml:mi>
                    <mml:mo>&lt;</mml:mo>
                    <mml:mi mathvariant="italic">start</mml:mi>
                </mml:mrow>
            </mml:math></inlineequation>.
        </para>
        <para>
            <constant>GL_INVALID_OPERATION</constant> is generated if a non-zero buffer object name is bound to an
            enabled array or the element array and the buffer object's data store is currently mapped.
        </para>
        <para>
            <constant>GL_INVALID_FRAMEBUFFER_OPERATION</constant> is generated if the currently bound framebuffer is not
            framebuffer complete (i.e. the return value from
            <citerefentry><refentrytitle>glCheckFramebufferStatus</refentrytitle></citerefentry> is not <constant>GL_FRAMEBUFFER_COMPLETE</constant>).
        </para>
        <para>
            <constant>GL_INVALID_OPERATION</constant> is generated if transform feedback is active and not paused.
        </para>
    </refsect1>
    <refsect1 xml:id="associatedgets"><title>Associated Gets</title>
        <para>
            <citerefentry><refentrytitle>glGet</refentrytitle></citerefentry> with argument <constant>GL_MAX_ELEMENTS_VERTICES</constant>
        </para>
        <para>
            <citerefentry><refentrytitle>glGet</refentrytitle></citerefentry> with argument <constant>GL_MAX_ELEMENTS_INDICES</constant>
        </para>
    </refsect1>
    <refsect1 xml:id="versions">
        <title>API Version Support</title>
        <informaltable>
            <tgroup cols="3" align="left">
                <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="apifunchead.xml" xpointer="xpointer(/*/*)"/>
                <tbody>
                    <row>
                        <entry>glDrawRangeElements</entry>
                        <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="apiversion.xml" xpointer="xpointer(/*/*[@role='es30']/*)"/>
                    </row>
                </tbody>
            </tgroup>
        </informaltable>
    </refsect1>
    <refsect1 xml:id="seealso"><title>See Also</title>
        <para>
            <citerefentry><refentrytitle>glCheckFramebufferStatus</refentrytitle></citerefentry>,
            <citerefentry><refentrytitle>glDisableVertexAttribArray</refentrytitle></citerefentry>,
            <citerefentry><refentrytitle>glDrawArrays</refentrytitle></citerefentry>,
            <citerefentry><refentrytitle>glDrawElements</refentrytitle></citerefentry>,
            <citerefentry><refentrytitle>glDrawArraysInstanced</refentrytitle></citerefentry>,
            <citerefentry><refentrytitle>glDrawElementsInstanced</refentrytitle></citerefentry>,
            <citerefentry><refentrytitle>glEnableVertexAttribArray</refentrytitle></citerefentry>,
        </para>
    </refsect1>
    <refsect1 xml:id="Copyright"><title>Copyright</title>
        <para>
            Copyright <trademark class="copyright"/> 1991-2006 Silicon Graphics, Inc.
            Copyright <trademark class="copyright"/> 2010-2014 Khronos Group.
            This document is licensed under the SGI Free Software B License.
            For details, see
            <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://oss.sgi.com/projects/FreeB/">http://oss.sgi.com/projects/FreeB/</link>.
        </para>
    </refsect1>
</refentry>
