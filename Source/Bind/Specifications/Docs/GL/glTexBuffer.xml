<!DOCTYPE refentry [ <!ENTITY % mathent SYSTEM "math.ent"> %mathent; ]>

<!-- Converted by db4-upgrade version 1.1 -->

<refentry xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="glTexBuffer">
    <info>
        <copyright>
            <year>2010-2013</year>
            <holder>Khronos Group</holder>
        </copyright>
    </info>
    <refmeta>
        <refentrytitle>glTexBuffer</refentrytitle>
        <manvolnum>3G</manvolnum>
    </refmeta>
    <refnamediv>
        <refname>glTexBuffer</refname>
        <refpurpose>attach the storage for a buffer object to the active buffer texture</refpurpose>
    </refnamediv>
    <refsynopsisdiv><title>C Specification</title>
        <funcsynopsis>
            <funcprototype>
                <funcdef>void <function>glTexBuffer</function></funcdef>
                <paramdef>GLenum <parameter>target</parameter></paramdef>
                <paramdef>GLenum <parameter>internalFormat</parameter></paramdef>
                <paramdef>GLuint <parameter>buffer</parameter></paramdef>
            </funcprototype>
        </funcsynopsis>
    </refsynopsisdiv>
    <refsect1 xml:id="parameters"><title>Parameters</title>
        <variablelist>
        <varlistentry>
            <term><parameter>target</parameter></term>
            <listitem>
                <para>
                    Specifies the target of the operation and must be <constant>GL_TEXTURE_BUFFER</constant>.
                </para>
            </listitem>
        </varlistentry>
        <varlistentry>
            <term><parameter>internalFormat</parameter></term>
            <listitem>
                <para>
                    Specifies the internal format of the data in the store belonging to <parameter>buffer</parameter>.
                </para>
            </listitem>
        </varlistentry>
        <varlistentry>
            <term><parameter>buffer</parameter></term>
            <listitem>
                <para>
                    Specifies the name of the buffer object whose storage to attach to the active buffer texture.
                </para>
            </listitem>
        </varlistentry>
        </variablelist>
    </refsect1>
    <refsect1 xml:id="description"><title>Description</title>
        <para>
            <function>glTexBuffer</function> attaches the storage for the buffer object named <parameter>buffer</parameter> to the active
            buffer texture, and specifies the internal format for the texel array found in the attached buffer object. If <parameter>buffer</parameter>
            is zero, any buffer object attached to the buffer texture is detached and no new buffer object is attached. If <parameter>buffer</parameter>
            is non-zero, it must be the name of an existing buffer object. <parameter>target</parameter> must be <constant>GL_TEXTURE_BUFFER</constant>.
            <parameter>internalformat</parameter> specifies the storage format, and must be one of the following sized internal formats:
        </para>
        <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="texboformattable.xml"/>
        <para>
            When a buffer object is attached to a buffer texture, the buffer object's data store
            is taken as the texture's texel array.  The number of texels in the buffer texture's
            texel array is given by
        </para>
        <para>
            <inlineequation>
                <mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll">
                    <mml:mfenced open="&lfloor;" close="&rfloor;">
                        <mml:mfrac>
                            <mml:mrow>
                                <mml:mi>buffer_size</mml:mi>
                            </mml:mrow>
                            <mml:mrow>
                                <mml:mi>components</mml:mi>
                                <mml:mo>&times;</mml:mo>
                                <mml:mi>sizeof</mml:mi>
                                <mml:mo>(</mml:mo>
                                <mml:mi>base_type</mml:mi>
                                <mml:mo>)</mml:mo>
                            </mml:mrow>
                        </mml:mfrac>
                    </mml:mfenced>
                </mml:math>
            </inlineequation>
        </para>
        <para>
            where <emphasis>buffer_size</emphasis> is the size of the buffer object, in basic machine units and
            components and base type are the element count and base data type for elements, as specified in the table above.
            The number of texels in the texel array is then clamped to the implementation-dependent limit <constant>GL_MAX_TEXTURE_BUFFER_SIZE</constant>.
            When a buffer texture is accessed in a shader, the results of a texel fetch are undefined if the specified texel coordinate is negative, or
            greater than or equal to the clamped number of texels in the texel array.
        </para>
    </refsect1>
    <refsect1 xml:id="errors"><title>Errors</title>
        <para>
            <constant>GL_INVALID_ENUM</constant> is generated if <parameter>target</parameter> is not <constant>GL_TEXTURE_BUFFER</constant>.
        </para>
        <para>
            <constant>GL_INVALID_ENUM</constant> is generated if <parameter>internalFormat</parameter> is not one of the accepted tokens.
        </para>
        <para>
            <constant>GL_INVALID_OPERATION</constant> is generated if <parameter>buffer</parameter> is not zero or the name of an existing buffer object.
        </para>
    </refsect1>
    <refsect1 xml:id="notes"><title>Notes</title>
        <para>
            <function>glTexBuffer</function> is available only if the GL version is 3.1 or greater.
        </para>
    </refsect1>
    <refsect1 xml:id="associatedgets"><title>Associated Gets</title>
    <para><citerefentry><refentrytitle>glGet</refentrytitle></citerefentry>
    with argument <constant>GL_MAX_TEXTURE_BUFFER_SIZE</constant></para>
    <para><citerefentry><refentrytitle>glGet</refentrytitle></citerefentry>
    with argument <constant>GL_TEXTURE_BINDING_BUFFER</constant></para>
    <para><citerefentry><refentrytitle>glGetTexLevelParameter</refentrytitle></citerefentry>
    with argument <constant>GL_TEXTURE_BUFFER_DATA_STORE_BINDING</constant></para>
    </refsect1>
    <refsect1 xml:id="seealso"><title>See Also</title>
        <para>
            <citerefentry><refentrytitle>glGenBuffers</refentrytitle></citerefentry>,
            <citerefentry><refentrytitle>glBindBuffer</refentrytitle></citerefentry>,
            <citerefentry><refentrytitle>glBufferData</refentrytitle></citerefentry>,
            <citerefentry><refentrytitle>glDeleteBuffers</refentrytitle></citerefentry>,
            <citerefentry><refentrytitle>glGenTextures</refentrytitle></citerefentry>,
            <citerefentry><refentrytitle>glBindTexture</refentrytitle></citerefentry>,
            <citerefentry><refentrytitle>glDeleteTextures</refentrytitle></citerefentry>
        </para>
    </refsect1>
    <refsect1 xml:id="Copyright"><title>Copyright</title>
        <para>
            Copyright <trademark class="copyright"/> 2010-2013 Khronos Group.
            This material may be distributed subject to the terms and conditions set forth in
            the Open Publication License, v 1.0, 8 June 1999.
            <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://opencontent.org/openpub/">http://opencontent.org/openpub/</link>.
        </para>
    </refsect1>
</refentry>
