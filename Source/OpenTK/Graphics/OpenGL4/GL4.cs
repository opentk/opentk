//
// The Open Toolkit Library License
//
// Copyright (c) 2006 - 2013 Stefanos Apostolopoulos for the Open Toolkit Library
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights to 
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do
// so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.
//



namespace OpenTK.Graphics.OpenGL4
{
    using System;
    using System.Text;
    using System.Runtime.InteropServices;
    #pragma warning disable 3019
    #pragma warning disable 1591
    #pragma warning disable 1572
    #pragma warning disable 1573
    #pragma warning disable 626

    partial class GL
    {
        static GL()
        {
            EntryPointNames = new string[]
            {
                "glActiveShaderProgram",
                "glActiveTexture",
                "glAttachShader",
                "glBeginConditionalRender",
                "glBeginQuery",
                "glBeginQueryIndexed",
                "glBeginTransformFeedback",
                "glBindAttribLocation",
                "glBindBuffer",
                "glBindBufferBase",
                "glBindBufferRange",
                "glBindBuffersBase",
                "glBindBuffersRange",
                "glBindFragDataLocation",
                "glBindFragDataLocationIndexed",
                "glBindFramebuffer",
                "glBindImageTexture",
                "glBindImageTextures",
                "glBindProgramPipeline",
                "glBindRenderbuffer",
                "glBindSampler",
                "glBindSamplers",
                "glBindTexture",
                "glBindTextures",
                "glBindTransformFeedback",
                "glBindVertexArray",
                "glBindVertexBuffer",
                "glBindVertexBuffers",
                "glBlendColor",
                "glBlendEquation",
                "glBlendEquationi",
                "glBlendEquationiARB",
                "glBlendEquationSeparate",
                "glBlendEquationSeparatei",
                "glBlendEquationSeparateiARB",
                "glBlendFunc",
                "glBlendFunci",
                "glBlendFunciARB",
                "glBlendFuncSeparate",
                "glBlendFuncSeparatei",
                "glBlendFuncSeparateiARB",
                "glBlitFramebuffer",
                "glBufferData",
                "glBufferStorage",
                "glBufferSubData",
                "glCheckFramebufferStatus",
                "glClampColor",
                "glClear",
                "glClearBufferData",
                "glClearBufferfi",
                "glClearBufferfv",
                "glClearBufferiv",
                "glClearBufferSubData",
                "glClearBufferuiv",
                "glClearColor",
                "glClearDepth",
                "glClearDepthf",
                "glClearStencil",
                "glClearTexImage",
                "glClearTexSubImage",
                "glClientWaitSync",
                "glColorMask",
                "glColorMaski",
                "glColorP3ui",
                "glColorP3uiv",
                "glColorP4ui",
                "glColorP4uiv",
                "glColorSubTable",
                "glColorTable",
                "glColorTableParameterfv",
                "glColorTableParameteriv",
                "glCompileShader",
                "glCompileShaderIncludeARB",
                "glCompressedTexImage1D",
                "glCompressedTexImage2D",
                "glCompressedTexImage3D",
                "glCompressedTexSubImage1D",
                "glCompressedTexSubImage2D",
                "glCompressedTexSubImage3D",
                "glConvolutionFilter1D",
                "glConvolutionFilter2D",
                "glConvolutionParameterf",
                "glConvolutionParameterfv",
                "glConvolutionParameteri",
                "glConvolutionParameteriv",
                "glCopyBufferSubData",
                "glCopyColorSubTable",
                "glCopyColorTable",
                "glCopyConvolutionFilter1D",
                "glCopyConvolutionFilter2D",
                "glCopyImageSubData",
                "glCopyTexImage1D",
                "glCopyTexImage2D",
                "glCopyTexSubImage1D",
                "glCopyTexSubImage2D",
                "glCopyTexSubImage3D",
                "glCreateProgram",
                "glCreateShader",
                "glCreateShaderProgramv",
                "glCreateSyncFromCLeventARB",
                "glCullFace",
                "glDebugMessageCallback",
                "glDebugMessageCallbackARB",
                "glDebugMessageCallbackKHR",
                "glDebugMessageControl",
                "glDebugMessageControlARB",
                "glDebugMessageControlKHR",
                "glDebugMessageInsert",
                "glDebugMessageInsertARB",
                "glDebugMessageInsertKHR",
                "glDeleteBuffers",
                "glDeleteFramebuffers",
                "glDeleteNamedStringARB",
                "glDeleteProgram",
                "glDeleteProgramPipelines",
                "glDeleteQueries",
                "glDeleteRenderbuffers",
                "glDeleteSamplers",
                "glDeleteShader",
                "glDeleteSync",
                "glDeleteTextures",
                "glDeleteTransformFeedbacks",
                "glDeleteVertexArrays",
                "glDepthFunc",
                "glDepthMask",
                "glDepthRange",
                "glDepthRangeArrayv",
                "glDepthRangef",
                "glDepthRangeIndexed",
                "glDetachShader",
                "glDisable",
                "glDisablei",
                "glDisableVertexAttribArray",
                "glDispatchCompute",
                "glDispatchComputeGroupSizeARB",
                "glDispatchComputeIndirect",
                "glDrawArrays",
                "glDrawArraysIndirect",
                "glDrawArraysInstanced",
                "glDrawArraysInstancedBaseInstance",
                "glDrawBuffer",
                "glDrawBuffers",
                "glDrawElements",
                "glDrawElementsBaseVertex",
                "glDrawElementsIndirect",
                "glDrawElementsInstanced",
                "glDrawElementsInstancedBaseInstance",
                "glDrawElementsInstancedBaseVertex",
                "glDrawElementsInstancedBaseVertexBaseInstance",
                "glDrawRangeElements",
                "glDrawRangeElementsBaseVertex",
                "glDrawTransformFeedback",
                "glDrawTransformFeedbackInstanced",
                "glDrawTransformFeedbackStream",
                "glDrawTransformFeedbackStreamInstanced",
                "glEnable",
                "glEnablei",
                "glEnableVertexAttribArray",
                "glEndConditionalRender",
                "glEndQuery",
                "glEndQueryIndexed",
                "glEndTransformFeedback",
                "glFenceSync",
                "glFinish",
                "glFlush",
                "glFlushMappedBufferRange",
                "glFramebufferParameteri",
                "glFramebufferRenderbuffer",
                "glFramebufferTexture",
                "glFramebufferTexture1D",
                "glFramebufferTexture2D",
                "glFramebufferTexture3D",
                "glFramebufferTextureLayer",
                "glFrontFace",
                "glGenBuffers",
                "glGenerateMipmap",
                "glGenFramebuffers",
                "glGenProgramPipelines",
                "glGenQueries",
                "glGenRenderbuffers",
                "glGenSamplers",
                "glGenTextures",
                "glGenTransformFeedbacks",
                "glGenVertexArrays",
                "glGetActiveAtomicCounterBufferiv",
                "glGetActiveAttrib",
                "glGetActiveSubroutineName",
                "glGetActiveSubroutineUniformiv",
                "glGetActiveSubroutineUniformName",
                "glGetActiveUniform",
                "glGetActiveUniformBlockiv",
                "glGetActiveUniformBlockName",
                "glGetActiveUniformName",
                "glGetActiveUniformsiv",
                "glGetAttachedShaders",
                "glGetAttribLocation",
                "glGetBooleani_v",
                "glGetBooleanv",
                "glGetBufferParameteri64v",
                "glGetBufferParameteriv",
                "glGetBufferPointerv",
                "glGetBufferSubData",
                "glGetColorTable",
                "glGetColorTableParameterfv",
                "glGetColorTableParameteriv",
                "glGetCompressedTexImage",
                "glGetConvolutionFilter",
                "glGetConvolutionParameterfv",
                "glGetConvolutionParameteriv",
                "glGetDebugMessageLog",
                "glGetDebugMessageLogARB",
                "glGetDebugMessageLogKHR",
                "glGetDoublei_v",
                "glGetDoublev",
                "glGetError",
                "glGetFloati_v",
                "glGetFloatv",
                "glGetFragDataIndex",
                "glGetFragDataLocation",
                "glGetFramebufferAttachmentParameteriv",
                "glGetFramebufferParameteriv",
                "glGetGraphicsResetStatusARB",
                "glGetHistogram",
                "glGetHistogramParameterfv",
                "glGetHistogramParameteriv",
                "glGetImageHandleARB",
                "glGetInteger64i_v",
                "glGetInteger64v",
                "glGetIntegeri_v",
                "glGetIntegerv",
                "glGetInternalformati64v",
                "glGetInternalformativ",
                "glGetMinmax",
                "glGetMinmaxParameterfv",
                "glGetMinmaxParameteriv",
                "glGetMultisamplefv",
                "glGetNamedStringARB",
                "glGetNamedStringivARB",
                "glGetnColorTableARB",
                "glGetnCompressedTexImageARB",
                "glGetnConvolutionFilterARB",
                "glGetnHistogramARB",
                "glGetnMapdvARB",
                "glGetnMapfvARB",
                "glGetnMapivARB",
                "glGetnMinmaxARB",
                "glGetnPixelMapfvARB",
                "glGetnPixelMapuivARB",
                "glGetnPixelMapusvARB",
                "glGetnPolygonStippleARB",
                "glGetnSeparableFilterARB",
                "glGetnTexImageARB",
                "glGetnUniformdvARB",
                "glGetnUniformfvARB",
                "glGetnUniformivARB",
                "glGetnUniformuivARB",
                "glGetObjectLabel",
                "glGetObjectLabelKHR",
                "glGetObjectPtrLabel",
                "glGetObjectPtrLabelKHR",
                "glGetPointerv",
                "glGetPointervKHR",
                "glGetProgramBinary",
                "glGetProgramInfoLog",
                "glGetProgramInterfaceiv",
                "glGetProgramiv",
                "glGetProgramPipelineInfoLog",
                "glGetProgramPipelineiv",
                "glGetProgramResourceIndex",
                "glGetProgramResourceiv",
                "glGetProgramResourceLocation",
                "glGetProgramResourceLocationIndex",
                "glGetProgramResourceName",
                "glGetProgramStageiv",
                "glGetQueryIndexediv",
                "glGetQueryiv",
                "glGetQueryObjecti64v",
                "glGetQueryObjectiv",
                "glGetQueryObjectui64v",
                "glGetQueryObjectuiv",
                "glGetRenderbufferParameteriv",
                "glGetSamplerParameterfv",
                "glGetSamplerParameterIiv",
                "glGetSamplerParameterIuiv",
                "glGetSamplerParameteriv",
                "glGetSeparableFilter",
                "glGetShaderInfoLog",
                "glGetShaderiv",
                "glGetShaderPrecisionFormat",
                "glGetShaderSource",
                "glGetString",
                "glGetStringi",
                "glGetSubroutineIndex",
                "glGetSubroutineUniformLocation",
                "glGetSynciv",
                "glGetTexImage",
                "glGetTexLevelParameterfv",
                "glGetTexLevelParameteriv",
                "glGetTexParameterfv",
                "glGetTexParameterIiv",
                "glGetTexParameterIuiv",
                "glGetTexParameteriv",
                "glGetTextureHandleARB",
                "glGetTextureSamplerHandleARB",
                "glGetTransformFeedbackVarying",
                "glGetUniformBlockIndex",
                "glGetUniformdv",
                "glGetUniformfv",
                "glGetUniformIndices",
                "glGetUniformiv",
                "glGetUniformLocation",
                "glGetUniformSubroutineuiv",
                "glGetUniformuiv",
                "glGetVertexAttribdv",
                "glGetVertexAttribfv",
                "glGetVertexAttribIiv",
                "glGetVertexAttribIuiv",
                "glGetVertexAttribiv",
                "glGetVertexAttribLdv",
                "glGetVertexAttribLui64vARB",
                "glGetVertexAttribPointerv",
                "glHint",
                "glHistogram",
                "glInvalidateBufferData",
                "glInvalidateBufferSubData",
                "glInvalidateFramebuffer",
                "glInvalidateSubFramebuffer",
                "glInvalidateTexImage",
                "glInvalidateTexSubImage",
                "glIsBuffer",
                "glIsEnabled",
                "glIsEnabledi",
                "glIsFramebuffer",
                "glIsImageHandleResidentARB",
                "glIsNamedStringARB",
                "glIsProgram",
                "glIsProgramPipeline",
                "glIsQuery",
                "glIsRenderbuffer",
                "glIsSampler",
                "glIsShader",
                "glIsSync",
                "glIsTexture",
                "glIsTextureHandleResidentARB",
                "glIsTransformFeedback",
                "glIsVertexArray",
                "glLineWidth",
                "glLinkProgram",
                "glLogicOp",
                "glMakeImageHandleNonResidentARB",
                "glMakeImageHandleResidentARB",
                "glMakeTextureHandleNonResidentARB",
                "glMakeTextureHandleResidentARB",
                "glMapBuffer",
                "glMapBufferRange",
                "glMemoryBarrier",
                "glMinmax",
                "glMinSampleShading",
                "glMinSampleShadingARB",
                "glMultiDrawArrays",
                "glMultiDrawArraysIndirect",
                "glMultiDrawArraysIndirectCountARB",
                "glMultiDrawElements",
                "glMultiDrawElementsBaseVertex",
                "glMultiDrawElementsIndirect",
                "glMultiDrawElementsIndirectCountARB",
                "glMultiTexCoordP1ui",
                "glMultiTexCoordP1uiv",
                "glMultiTexCoordP2ui",
                "glMultiTexCoordP2uiv",
                "glMultiTexCoordP3ui",
                "glMultiTexCoordP3uiv",
                "glMultiTexCoordP4ui",
                "glMultiTexCoordP4uiv",
                "glNamedStringARB",
                "glNormalP3ui",
                "glNormalP3uiv",
                "glObjectLabel",
                "glObjectLabelKHR",
                "glObjectPtrLabel",
                "glObjectPtrLabelKHR",
                "glPatchParameterfv",
                "glPatchParameteri",
                "glPauseTransformFeedback",
                "glPixelStoref",
                "glPixelStorei",
                "glPointParameterf",
                "glPointParameterfv",
                "glPointParameteri",
                "glPointParameteriv",
                "glPointSize",
                "glPolygonMode",
                "glPolygonOffset",
                "glPopDebugGroup",
                "glPopDebugGroupKHR",
                "glPrimitiveRestartIndex",
                "glProgramBinary",
                "glProgramParameteri",
                "glProgramUniform1d",
                "glProgramUniform1dv",
                "glProgramUniform1f",
                "glProgramUniform1fv",
                "glProgramUniform1i",
                "glProgramUniform1iv",
                "glProgramUniform1ui",
                "glProgramUniform1uiv",
                "glProgramUniform2d",
                "glProgramUniform2dv",
                "glProgramUniform2f",
                "glProgramUniform2fv",
                "glProgramUniform2i",
                "glProgramUniform2iv",
                "glProgramUniform2ui",
                "glProgramUniform2uiv",
                "glProgramUniform3d",
                "glProgramUniform3dv",
                "glProgramUniform3f",
                "glProgramUniform3fv",
                "glProgramUniform3i",
                "glProgramUniform3iv",
                "glProgramUniform3ui",
                "glProgramUniform3uiv",
                "glProgramUniform4d",
                "glProgramUniform4dv",
                "glProgramUniform4f",
                "glProgramUniform4fv",
                "glProgramUniform4i",
                "glProgramUniform4iv",
                "glProgramUniform4ui",
                "glProgramUniform4uiv",
                "glProgramUniformHandleui64ARB",
                "glProgramUniformHandleui64vARB",
                "glProgramUniformMatrix2dv",
                "glProgramUniformMatrix2fv",
                "glProgramUniformMatrix2x3dv",
                "glProgramUniformMatrix2x3fv",
                "glProgramUniformMatrix2x4dv",
                "glProgramUniformMatrix2x4fv",
                "glProgramUniformMatrix3dv",
                "glProgramUniformMatrix3fv",
                "glProgramUniformMatrix3x2dv",
                "glProgramUniformMatrix3x2fv",
                "glProgramUniformMatrix3x4dv",
                "glProgramUniformMatrix3x4fv",
                "glProgramUniformMatrix4dv",
                "glProgramUniformMatrix4fv",
                "glProgramUniformMatrix4x2dv",
                "glProgramUniformMatrix4x2fv",
                "glProgramUniformMatrix4x3dv",
                "glProgramUniformMatrix4x3fv",
                "glProvokingVertex",
                "glPushDebugGroup",
                "glPushDebugGroupKHR",
                "glQueryCounter",
                "glReadBuffer",
                "glReadnPixelsARB",
                "glReadPixels",
                "glReleaseShaderCompiler",
                "glRenderbufferStorage",
                "glRenderbufferStorageMultisample",
                "glResetHistogram",
                "glResetMinmax",
                "glResumeTransformFeedback",
                "glSampleCoverage",
                "glSampleMaski",
                "glSamplerParameterf",
                "glSamplerParameterfv",
                "glSamplerParameteri",
                "glSamplerParameterIiv",
                "glSamplerParameterIuiv",
                "glSamplerParameteriv",
                "glScissor",
                "glScissorArrayv",
                "glScissorIndexed",
                "glScissorIndexedv",
                "glSecondaryColorP3ui",
                "glSecondaryColorP3uiv",
                "glSeparableFilter2D",
                "glShaderBinary",
                "glShaderSource",
                "glShaderStorageBlockBinding",
                "glStencilFunc",
                "glStencilFuncSeparate",
                "glStencilMask",
                "glStencilMaskSeparate",
                "glStencilOp",
                "glStencilOpSeparate",
                "glTexBuffer",
                "glTexBufferRange",
                "glTexCoordP1ui",
                "glTexCoordP1uiv",
                "glTexCoordP2ui",
                "glTexCoordP2uiv",
                "glTexCoordP3ui",
                "glTexCoordP3uiv",
                "glTexCoordP4ui",
                "glTexCoordP4uiv",
                "glTexImage1D",
                "glTexImage2D",
                "glTexImage2DMultisample",
                "glTexImage3D",
                "glTexImage3DMultisample",
                "glTexPageCommitmentARB",
                "glTexParameterf",
                "glTexParameterfv",
                "glTexParameteri",
                "glTexParameterIiv",
                "glTexParameterIuiv",
                "glTexParameteriv",
                "glTexStorage1D",
                "glTexStorage2D",
                "glTexStorage2DMultisample",
                "glTexStorage3D",
                "glTexStorage3DMultisample",
                "glTexSubImage1D",
                "glTexSubImage2D",
                "glTexSubImage3D",
                "glTextureView",
                "glTransformFeedbackVaryings",
                "glUniform1d",
                "glUniform1dv",
                "glUniform1f",
                "glUniform1fv",
                "glUniform1i",
                "glUniform1iv",
                "glUniform1ui",
                "glUniform1uiv",
                "glUniform2d",
                "glUniform2dv",
                "glUniform2f",
                "glUniform2fv",
                "glUniform2i",
                "glUniform2iv",
                "glUniform2ui",
                "glUniform2uiv",
                "glUniform3d",
                "glUniform3dv",
                "glUniform3f",
                "glUniform3fv",
                "glUniform3i",
                "glUniform3iv",
                "glUniform3ui",
                "glUniform3uiv",
                "glUniform4d",
                "glUniform4dv",
                "glUniform4f",
                "glUniform4fv",
                "glUniform4i",
                "glUniform4iv",
                "glUniform4ui",
                "glUniform4uiv",
                "glUniformBlockBinding",
                "glUniformHandleui64ARB",
                "glUniformHandleui64vARB",
                "glUniformMatrix2dv",
                "glUniformMatrix2fv",
                "glUniformMatrix2x3dv",
                "glUniformMatrix2x3fv",
                "glUniformMatrix2x4dv",
                "glUniformMatrix2x4fv",
                "glUniformMatrix3dv",
                "glUniformMatrix3fv",
                "glUniformMatrix3x2dv",
                "glUniformMatrix3x2fv",
                "glUniformMatrix3x4dv",
                "glUniformMatrix3x4fv",
                "glUniformMatrix4dv",
                "glUniformMatrix4fv",
                "glUniformMatrix4x2dv",
                "glUniformMatrix4x2fv",
                "glUniformMatrix4x3dv",
                "glUniformMatrix4x3fv",
                "glUniformSubroutinesuiv",
                "glUnmapBuffer",
                "glUseProgram",
                "glUseProgramStages",
                "glValidateProgram",
                "glValidateProgramPipeline",
                "glVertexAttrib1d",
                "glVertexAttrib1dv",
                "glVertexAttrib1f",
                "glVertexAttrib1fv",
                "glVertexAttrib1s",
                "glVertexAttrib1sv",
                "glVertexAttrib2d",
                "glVertexAttrib2dv",
                "glVertexAttrib2f",
                "glVertexAttrib2fv",
                "glVertexAttrib2s",
                "glVertexAttrib2sv",
                "glVertexAttrib3d",
                "glVertexAttrib3dv",
                "glVertexAttrib3f",
                "glVertexAttrib3fv",
                "glVertexAttrib3s",
                "glVertexAttrib3sv",
                "glVertexAttrib4bv",
                "glVertexAttrib4d",
                "glVertexAttrib4dv",
                "glVertexAttrib4f",
                "glVertexAttrib4fv",
                "glVertexAttrib4iv",
                "glVertexAttrib4Nbv",
                "glVertexAttrib4Niv",
                "glVertexAttrib4Nsv",
                "glVertexAttrib4Nub",
                "glVertexAttrib4Nubv",
                "glVertexAttrib4Nuiv",
                "glVertexAttrib4Nusv",
                "glVertexAttrib4s",
                "glVertexAttrib4sv",
                "glVertexAttrib4ubv",
                "glVertexAttrib4uiv",
                "glVertexAttrib4usv",
                "glVertexAttribBinding",
                "glVertexAttribDivisor",
                "glVertexAttribFormat",
                "glVertexAttribI1i",
                "glVertexAttribI1iv",
                "glVertexAttribI1ui",
                "glVertexAttribI1uiv",
                "glVertexAttribI2i",
                "glVertexAttribI2iv",
                "glVertexAttribI2ui",
                "glVertexAttribI2uiv",
                "glVertexAttribI3i",
                "glVertexAttribI3iv",
                "glVertexAttribI3ui",
                "glVertexAttribI3uiv",
                "glVertexAttribI4bv",
                "glVertexAttribI4i",
                "glVertexAttribI4iv",
                "glVertexAttribI4sv",
                "glVertexAttribI4ubv",
                "glVertexAttribI4ui",
                "glVertexAttribI4uiv",
                "glVertexAttribI4usv",
                "glVertexAttribIFormat",
                "glVertexAttribIPointer",
                "glVertexAttribL1d",
                "glVertexAttribL1dv",
                "glVertexAttribL1ui64ARB",
                "glVertexAttribL1ui64vARB",
                "glVertexAttribL2d",
                "glVertexAttribL2dv",
                "glVertexAttribL3d",
                "glVertexAttribL3dv",
                "glVertexAttribL4d",
                "glVertexAttribL4dv",
                "glVertexAttribLFormat",
                "glVertexAttribLPointer",
                "glVertexAttribP1ui",
                "glVertexAttribP1uiv",
                "glVertexAttribP2ui",
                "glVertexAttribP2uiv",
                "glVertexAttribP3ui",
                "glVertexAttribP3uiv",
                "glVertexAttribP4ui",
                "glVertexAttribP4uiv",
                "glVertexAttribPointer",
                "glVertexBindingDivisor",
                "glVertexP2ui",
                "glVertexP2uiv",
                "glVertexP3ui",
                "glVertexP3uiv",
                "glVertexP4ui",
                "glVertexP4uiv",
                "glViewport",
                "glViewportArrayv",
                "glViewportIndexedf",
                "glViewportIndexedfv",
                "glWaitSync",
            };
            EntryPoints = new IntPtr[EntryPointNames.Length];
        }

        public static partial class Arb
        {
            /// <summary>[requires: ARB_draw_buffers_blend]
            /// Specify the equation used for both the RGB blend equation and the Alpha blend equation
            /// </summary>
            /// <param name="buf">
            /// <para>
            /// for glBlendEquationi, specifies the index of the draw buffer for which to set the blend equation.
            /// </para>
            /// </param>
            /// <param name="mode">
            /// <para>
            /// specifies how source and destination colors are combined. It must be GL_FUNC_ADD, GL_FUNC_SUBTRACT, GL_FUNC_REVERSE_SUBTRACT, GL_MIN, GL_MAX.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "ARB_draw_buffers_blend", Version = "", EntryPoint = "glBlendEquationiARB")]
            public static extern void BlendEquation(Int32 buf, OpenTK.Graphics.OpenGL4.BlendEquationMode mode);

            /// <summary>[requires: ARB_draw_buffers_blend]
            /// Specify the equation used for both the RGB blend equation and the Alpha blend equation
            /// </summary>
            /// <param name="buf">
            /// <para>
            /// for glBlendEquationi, specifies the index of the draw buffer for which to set the blend equation.
            /// </para>
            /// </param>
            /// <param name="mode">
            /// <para>
            /// specifies how source and destination colors are combined. It must be GL_FUNC_ADD, GL_FUNC_SUBTRACT, GL_FUNC_REVERSE_SUBTRACT, GL_MIN, GL_MAX.
            /// </para>
            /// </param>
            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_draw_buffers_blend", Version = "", EntryPoint = "glBlendEquationiARB")]
            public static extern void BlendEquation(UInt32 buf, OpenTK.Graphics.OpenGL4.BlendEquationMode mode);

            /// <summary>[requires: ARB_draw_buffers_blend]
            /// Set the RGB blend equation and the alpha blend equation separately
            /// </summary>
            /// <param name="buf">
            /// <para>
            /// for glBlendEquationSeparatei, specifies the index of the draw buffer for which to set the blend equations.
            /// </para>
            /// </param>
            /// <param name="modeRGB">
            /// <para>
            /// specifies the RGB blend equation, how the red, green, and blue components of the source and destination colors are combined. It must be GL_FUNC_ADD, GL_FUNC_SUBTRACT, GL_FUNC_REVERSE_SUBTRACT, GL_MIN, GL_MAX.
            /// </para>
            /// </param>
            /// <param name="modeAlpha">
            /// <para>
            /// specifies the alpha blend equation, how the alpha component of the source and destination colors are combined. It must be GL_FUNC_ADD, GL_FUNC_SUBTRACT, GL_FUNC_REVERSE_SUBTRACT, GL_MIN, GL_MAX.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "ARB_draw_buffers_blend", Version = "", EntryPoint = "glBlendEquationSeparateiARB")]
            public static extern void BlendEquationSeparate(Int32 buf, OpenTK.Graphics.OpenGL4.All modeRGB, OpenTK.Graphics.OpenGL4.All modeAlpha);

            /// <summary>[requires: ARB_draw_buffers_blend]
            /// Set the RGB blend equation and the alpha blend equation separately
            /// </summary>
            /// <param name="buf">
            /// <para>
            /// for glBlendEquationSeparatei, specifies the index of the draw buffer for which to set the blend equations.
            /// </para>
            /// </param>
            /// <param name="modeRGB">
            /// <para>
            /// specifies the RGB blend equation, how the red, green, and blue components of the source and destination colors are combined. It must be GL_FUNC_ADD, GL_FUNC_SUBTRACT, GL_FUNC_REVERSE_SUBTRACT, GL_MIN, GL_MAX.
            /// </para>
            /// </param>
            /// <param name="modeAlpha">
            /// <para>
            /// specifies the alpha blend equation, how the alpha component of the source and destination colors are combined. It must be GL_FUNC_ADD, GL_FUNC_SUBTRACT, GL_FUNC_REVERSE_SUBTRACT, GL_MIN, GL_MAX.
            /// </para>
            /// </param>
            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_draw_buffers_blend", Version = "", EntryPoint = "glBlendEquationSeparateiARB")]
            public static extern void BlendEquationSeparate(UInt32 buf, OpenTK.Graphics.OpenGL4.All modeRGB, OpenTK.Graphics.OpenGL4.All modeAlpha);

            /// <summary>[requires: ARB_draw_buffers_blend]
            /// Specify pixel arithmetic
            /// </summary>
            /// <param name="buf">
            /// <para>
            /// For glBlendFunci, specifies the index of the draw buffer for which to set the blend function.
            /// </para>
            /// </param>
            /// <param name="sfactor">
            /// <para>
            /// Specifies how the red, green, blue, and alpha source blending factors are computed. The initial value is GL_ONE.
            /// </para>
            /// </param>
            /// <param name="dfactor">
            /// <para>
            /// Specifies how the red, green, blue, and alpha destination blending factors are computed. The following symbolic constants are accepted: GL_ZERO, GL_ONE, GL_SRC_COLOR, GL_ONE_MINUS_SRC_COLOR, GL_DST_COLOR, GL_ONE_MINUS_DST_COLOR, GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA, GL_DST_ALPHA, GL_ONE_MINUS_DST_ALPHA. GL_CONSTANT_COLOR, GL_ONE_MINUS_CONSTANT_COLOR, GL_CONSTANT_ALPHA, and GL_ONE_MINUS_CONSTANT_ALPHA. The initial value is GL_ZERO.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "ARB_draw_buffers_blend", Version = "", EntryPoint = "glBlendFunciARB")]
            public static extern void BlendFunc(Int32 buf, OpenTK.Graphics.OpenGL4.All src, OpenTK.Graphics.OpenGL4.All dst);

            /// <summary>[requires: ARB_draw_buffers_blend]
            /// Specify pixel arithmetic
            /// </summary>
            /// <param name="buf">
            /// <para>
            /// For glBlendFunci, specifies the index of the draw buffer for which to set the blend function.
            /// </para>
            /// </param>
            /// <param name="sfactor">
            /// <para>
            /// Specifies how the red, green, blue, and alpha source blending factors are computed. The initial value is GL_ONE.
            /// </para>
            /// </param>
            /// <param name="dfactor">
            /// <para>
            /// Specifies how the red, green, blue, and alpha destination blending factors are computed. The following symbolic constants are accepted: GL_ZERO, GL_ONE, GL_SRC_COLOR, GL_ONE_MINUS_SRC_COLOR, GL_DST_COLOR, GL_ONE_MINUS_DST_COLOR, GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA, GL_DST_ALPHA, GL_ONE_MINUS_DST_ALPHA. GL_CONSTANT_COLOR, GL_ONE_MINUS_CONSTANT_COLOR, GL_CONSTANT_ALPHA, and GL_ONE_MINUS_CONSTANT_ALPHA. The initial value is GL_ZERO.
            /// </para>
            /// </param>
            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_draw_buffers_blend", Version = "", EntryPoint = "glBlendFunciARB")]
            public static extern void BlendFunc(UInt32 buf, OpenTK.Graphics.OpenGL4.All src, OpenTK.Graphics.OpenGL4.All dst);

            /// <summary>[requires: ARB_draw_buffers_blend]
            /// Specify pixel arithmetic for RGB and alpha components separately
            /// </summary>
            /// <param name="buf">
            /// <para>
            /// For glBlendFuncSeparatei, specifies the index of the draw buffer for which to set the blend functions.
            /// </para>
            /// </param>
            /// <param name="srcRGB">
            /// <para>
            /// Specifies how the red, green, and blue blending factors are computed. The initial value is GL_ONE.
            /// </para>
            /// </param>
            /// <param name="dstRGB">
            /// <para>
            /// Specifies how the red, green, and blue destination blending factors are computed. The initial value is GL_ZERO.
            /// </para>
            /// </param>
            /// <param name="srcAlpha">
            /// <para>
            /// Specified how the alpha source blending factor is computed. The initial value is GL_ONE.
            /// </para>
            /// </param>
            /// <param name="dstAlpha">
            /// <para>
            /// Specified how the alpha destination blending factor is computed. The initial value is GL_ZERO.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "ARB_draw_buffers_blend", Version = "", EntryPoint = "glBlendFuncSeparateiARB")]
            public static extern void BlendFuncSeparate(Int32 buf, OpenTK.Graphics.OpenGL4.All srcRGB, OpenTK.Graphics.OpenGL4.All dstRGB, OpenTK.Graphics.OpenGL4.All srcAlpha, OpenTK.Graphics.OpenGL4.All dstAlpha);

            /// <summary>[requires: ARB_draw_buffers_blend]
            /// Specify pixel arithmetic for RGB and alpha components separately
            /// </summary>
            /// <param name="buf">
            /// <para>
            /// For glBlendFuncSeparatei, specifies the index of the draw buffer for which to set the blend functions.
            /// </para>
            /// </param>
            /// <param name="srcRGB">
            /// <para>
            /// Specifies how the red, green, and blue blending factors are computed. The initial value is GL_ONE.
            /// </para>
            /// </param>
            /// <param name="dstRGB">
            /// <para>
            /// Specifies how the red, green, and blue destination blending factors are computed. The initial value is GL_ZERO.
            /// </para>
            /// </param>
            /// <param name="srcAlpha">
            /// <para>
            /// Specified how the alpha source blending factor is computed. The initial value is GL_ONE.
            /// </para>
            /// </param>
            /// <param name="dstAlpha">
            /// <para>
            /// Specified how the alpha destination blending factor is computed. The initial value is GL_ZERO.
            /// </para>
            /// </param>
            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_draw_buffers_blend", Version = "", EntryPoint = "glBlendFuncSeparateiARB")]
            public static extern void BlendFuncSeparate(UInt32 buf, OpenTK.Graphics.OpenGL4.All srcRGB, OpenTK.Graphics.OpenGL4.All dstRGB, OpenTK.Graphics.OpenGL4.All srcAlpha, OpenTK.Graphics.OpenGL4.All dstAlpha);

            /// <summary>[requires: ARB_shading_language_include]</summary>
            [AutoGenerated(Category = "ARB_shading_language_include", Version = "", EntryPoint = "glCompileShaderIncludeARB")]
            public static extern void CompileShaderInclude(Int32 shader, Int32 count, String[] path, Int32[] length);

            /// <summary>[requires: ARB_shading_language_include]</summary>
            [AutoGenerated(Category = "ARB_shading_language_include", Version = "", EntryPoint = "glCompileShaderIncludeARB")]
            public static extern void CompileShaderInclude(Int32 shader, Int32 count, String[] path, ref Int32 length);

            /// <summary>[requires: ARB_shading_language_include]</summary>
            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_shading_language_include", Version = "", EntryPoint = "glCompileShaderIncludeARB")]
            public static extern unsafe void CompileShaderInclude(Int32 shader, Int32 count, String[] path, Int32* length);

            /// <summary>[requires: ARB_shading_language_include]</summary>
            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_shading_language_include", Version = "", EntryPoint = "glCompileShaderIncludeARB")]
            public static extern void CompileShaderInclude(UInt32 shader, Int32 count, String[] path, Int32[] length);

            /// <summary>[requires: ARB_shading_language_include]</summary>
            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_shading_language_include", Version = "", EntryPoint = "glCompileShaderIncludeARB")]
            public static extern void CompileShaderInclude(UInt32 shader, Int32 count, String[] path, ref Int32 length);

            /// <summary>[requires: ARB_shading_language_include]</summary>
            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_shading_language_include", Version = "", EntryPoint = "glCompileShaderIncludeARB")]
            public static extern unsafe void CompileShaderInclude(UInt32 shader, Int32 count, String[] path, Int32* length);

            /// <summary>[requires: ARB_cl_event]</summary>
            [AutoGenerated(Category = "ARB_cl_event", Version = "", EntryPoint = "glCreateSyncFromCLeventARB")]
            public static extern IntPtr CreateSyncFromCLevent([OutAttribute] IntPtr[] context, [OutAttribute] IntPtr[] @event, Int32 flags);

            /// <summary>[requires: ARB_cl_event]</summary>
            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_cl_event", Version = "", EntryPoint = "glCreateSyncFromCLeventARB")]
            public static extern IntPtr CreateSyncFromCLevent([OutAttribute] IntPtr[] context, [OutAttribute] IntPtr[] @event, UInt32 flags);

            /// <summary>[requires: ARB_cl_event]</summary>
            [AutoGenerated(Category = "ARB_cl_event", Version = "", EntryPoint = "glCreateSyncFromCLeventARB")]
            public static extern IntPtr CreateSyncFromCLevent([OutAttribute] out IntPtr context, [OutAttribute] out IntPtr @event, Int32 flags);

            /// <summary>[requires: ARB_cl_event]</summary>
            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_cl_event", Version = "", EntryPoint = "glCreateSyncFromCLeventARB")]
            public static extern IntPtr CreateSyncFromCLevent([OutAttribute] out IntPtr context, [OutAttribute] out IntPtr @event, UInt32 flags);

            /// <summary>[requires: ARB_cl_event]</summary>
            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_cl_event", Version = "", EntryPoint = "glCreateSyncFromCLeventARB")]
            public static extern unsafe IntPtr CreateSyncFromCLevent([OutAttribute] IntPtr* context, [OutAttribute] IntPtr* @event, Int32 flags);

            /// <summary>[requires: ARB_cl_event]</summary>
            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_cl_event", Version = "", EntryPoint = "glCreateSyncFromCLeventARB")]
            public static extern unsafe IntPtr CreateSyncFromCLevent([OutAttribute] IntPtr* context, [OutAttribute] IntPtr* @event, UInt32 flags);

            /// <summary>[requires: ARB_debug_output]
            /// Specify a callback to receive debugging messages from the GL
            /// </summary>
            /// <param name="callback">
            /// <para>
            /// The address of a callback function that will be called when a debug message is generated.
            /// </para>
            /// </param>
            /// <param name="userParam">
            /// <para>
            /// A user supplied pointer that will be passed on each invocation of callback.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "ARB_debug_output", Version = "", EntryPoint = "glDebugMessageCallbackARB")]
            public static extern void DebugMessageCallback(DebugProcArb callback, IntPtr userParam);

            /// <summary>[requires: ARB_debug_output]
            /// Specify a callback to receive debugging messages from the GL
            /// </summary>
            /// <param name="callback">
            /// <para>
            /// The address of a callback function that will be called when a debug message is generated.
            /// </para>
            /// </param>
            /// <param name="userParam">
            /// <para>
            /// A user supplied pointer that will be passed on each invocation of callback.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "ARB_debug_output", Version = "", EntryPoint = "glDebugMessageCallbackARB")]
            public static extern void DebugMessageCallback<T1>(DebugProcArb callback, [InAttribute, OutAttribute] T1[] userParam)
                where T1 : struct
            ;

            /// <summary>[requires: ARB_debug_output]
            /// Specify a callback to receive debugging messages from the GL
            /// </summary>
            /// <param name="callback">
            /// <para>
            /// The address of a callback function that will be called when a debug message is generated.
            /// </para>
            /// </param>
            /// <param name="userParam">
            /// <para>
            /// A user supplied pointer that will be passed on each invocation of callback.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "ARB_debug_output", Version = "", EntryPoint = "glDebugMessageCallbackARB")]
            public static extern void DebugMessageCallback<T1>(DebugProcArb callback, [InAttribute, OutAttribute] T1[,] userParam)
                where T1 : struct
            ;

            /// <summary>[requires: ARB_debug_output]
            /// Specify a callback to receive debugging messages from the GL
            /// </summary>
            /// <param name="callback">
            /// <para>
            /// The address of a callback function that will be called when a debug message is generated.
            /// </para>
            /// </param>
            /// <param name="userParam">
            /// <para>
            /// A user supplied pointer that will be passed on each invocation of callback.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "ARB_debug_output", Version = "", EntryPoint = "glDebugMessageCallbackARB")]
            public static extern void DebugMessageCallback<T1>(DebugProcArb callback, [InAttribute, OutAttribute] T1[,,] userParam)
                where T1 : struct
            ;

            /// <summary>[requires: ARB_debug_output]
            /// Specify a callback to receive debugging messages from the GL
            /// </summary>
            /// <param name="callback">
            /// <para>
            /// The address of a callback function that will be called when a debug message is generated.
            /// </para>
            /// </param>
            /// <param name="userParam">
            /// <para>
            /// A user supplied pointer that will be passed on each invocation of callback.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "ARB_debug_output", Version = "", EntryPoint = "glDebugMessageCallbackARB")]
            public static extern void DebugMessageCallback<T1>(DebugProcArb callback, [InAttribute, OutAttribute] ref T1 userParam)
                where T1 : struct
            ;

            /// <summary>[requires: ARB_debug_output]
            /// Control the reporting of debug messages in a debug context
            /// </summary>
            /// <param name="source">
            /// <para>
            /// The source of debug messages to enable or disable.
            /// </para>
            /// </param>
            /// <param name="type">
            /// <para>
            /// The type of debug messages to enable or disable.
            /// </para>
            /// </param>
            /// <param name="severity">
            /// <para>
            /// The severity of debug messages to enable or disable.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// The length of the array ids.
            /// </para>
            /// </param>
            /// <param name="ids">
            /// <para>
            /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
            /// </para>
            /// </param>
            /// <param name="enabled">
            /// <para>
            /// A Boolean flag determining whether the selected messages should be enabled or disabled.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "ARB_debug_output", Version = "", EntryPoint = "glDebugMessageControlARB")]
            public static extern void DebugMessageControl(OpenTK.Graphics.OpenGL4.All source, OpenTK.Graphics.OpenGL4.All type, OpenTK.Graphics.OpenGL4.All severity, Int32 count, Int32[] ids, bool enabled);

            /// <summary>[requires: ARB_debug_output]
            /// Control the reporting of debug messages in a debug context
            /// </summary>
            /// <param name="source">
            /// <para>
            /// The source of debug messages to enable or disable.
            /// </para>
            /// </param>
            /// <param name="type">
            /// <para>
            /// The type of debug messages to enable or disable.
            /// </para>
            /// </param>
            /// <param name="severity">
            /// <para>
            /// The severity of debug messages to enable or disable.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// The length of the array ids.
            /// </para>
            /// </param>
            /// <param name="ids">
            /// <para>
            /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
            /// </para>
            /// </param>
            /// <param name="enabled">
            /// <para>
            /// A Boolean flag determining whether the selected messages should be enabled or disabled.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "ARB_debug_output", Version = "", EntryPoint = "glDebugMessageControlARB")]
            public static extern void DebugMessageControl(OpenTK.Graphics.OpenGL4.All source, OpenTK.Graphics.OpenGL4.All type, OpenTK.Graphics.OpenGL4.All severity, Int32 count, ref Int32 ids, bool enabled);

            /// <summary>[requires: ARB_debug_output]
            /// Control the reporting of debug messages in a debug context
            /// </summary>
            /// <param name="source">
            /// <para>
            /// The source of debug messages to enable or disable.
            /// </para>
            /// </param>
            /// <param name="type">
            /// <para>
            /// The type of debug messages to enable or disable.
            /// </para>
            /// </param>
            /// <param name="severity">
            /// <para>
            /// The severity of debug messages to enable or disable.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// The length of the array ids.
            /// </para>
            /// </param>
            /// <param name="ids">
            /// <para>
            /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
            /// </para>
            /// </param>
            /// <param name="enabled">
            /// <para>
            /// A Boolean flag determining whether the selected messages should be enabled or disabled.
            /// </para>
            /// </param>
            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_debug_output", Version = "", EntryPoint = "glDebugMessageControlARB")]
            public static extern unsafe void DebugMessageControl(OpenTK.Graphics.OpenGL4.All source, OpenTK.Graphics.OpenGL4.All type, OpenTK.Graphics.OpenGL4.All severity, Int32 count, Int32* ids, bool enabled);

            /// <summary>[requires: ARB_debug_output]
            /// Control the reporting of debug messages in a debug context
            /// </summary>
            /// <param name="source">
            /// <para>
            /// The source of debug messages to enable or disable.
            /// </para>
            /// </param>
            /// <param name="type">
            /// <para>
            /// The type of debug messages to enable or disable.
            /// </para>
            /// </param>
            /// <param name="severity">
            /// <para>
            /// The severity of debug messages to enable or disable.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// The length of the array ids.
            /// </para>
            /// </param>
            /// <param name="ids">
            /// <para>
            /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
            /// </para>
            /// </param>
            /// <param name="enabled">
            /// <para>
            /// A Boolean flag determining whether the selected messages should be enabled or disabled.
            /// </para>
            /// </param>
            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_debug_output", Version = "", EntryPoint = "glDebugMessageControlARB")]
            public static extern void DebugMessageControl(OpenTK.Graphics.OpenGL4.All source, OpenTK.Graphics.OpenGL4.All type, OpenTK.Graphics.OpenGL4.All severity, Int32 count, UInt32[] ids, bool enabled);

            /// <summary>[requires: ARB_debug_output]
            /// Control the reporting of debug messages in a debug context
            /// </summary>
            /// <param name="source">
            /// <para>
            /// The source of debug messages to enable or disable.
            /// </para>
            /// </param>
            /// <param name="type">
            /// <para>
            /// The type of debug messages to enable or disable.
            /// </para>
            /// </param>
            /// <param name="severity">
            /// <para>
            /// The severity of debug messages to enable or disable.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// The length of the array ids.
            /// </para>
            /// </param>
            /// <param name="ids">
            /// <para>
            /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
            /// </para>
            /// </param>
            /// <param name="enabled">
            /// <para>
            /// A Boolean flag determining whether the selected messages should be enabled or disabled.
            /// </para>
            /// </param>
            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_debug_output", Version = "", EntryPoint = "glDebugMessageControlARB")]
            public static extern void DebugMessageControl(OpenTK.Graphics.OpenGL4.All source, OpenTK.Graphics.OpenGL4.All type, OpenTK.Graphics.OpenGL4.All severity, Int32 count, ref UInt32 ids, bool enabled);

            /// <summary>[requires: ARB_debug_output]
            /// Control the reporting of debug messages in a debug context
            /// </summary>
            /// <param name="source">
            /// <para>
            /// The source of debug messages to enable or disable.
            /// </para>
            /// </param>
            /// <param name="type">
            /// <para>
            /// The type of debug messages to enable or disable.
            /// </para>
            /// </param>
            /// <param name="severity">
            /// <para>
            /// The severity of debug messages to enable or disable.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// The length of the array ids.
            /// </para>
            /// </param>
            /// <param name="ids">
            /// <para>
            /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
            /// </para>
            /// </param>
            /// <param name="enabled">
            /// <para>
            /// A Boolean flag determining whether the selected messages should be enabled or disabled.
            /// </para>
            /// </param>
            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_debug_output", Version = "", EntryPoint = "glDebugMessageControlARB")]
            public static extern unsafe void DebugMessageControl(OpenTK.Graphics.OpenGL4.All source, OpenTK.Graphics.OpenGL4.All type, OpenTK.Graphics.OpenGL4.All severity, Int32 count, UInt32* ids, bool enabled);

            /// <summary>[requires: ARB_debug_output]
            /// Inject an application-supplied message into the debug message queue
            /// </summary>
            /// <param name="source">
            /// <para>
            /// The source of the debug message to insert.
            /// </para>
            /// </param>
            /// <param name="type">
            /// <para>
            /// The type of the debug message insert.
            /// </para>
            /// </param>
            /// <param name="id">
            /// <para>
            /// The user-supplied identifier of the message to insert.
            /// </para>
            /// </param>
            /// <param name="severity">
            /// <para>
            /// The severity of the debug messages to insert.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// The length string contained in the character array whose address is given by message.
            /// </para>
            /// </param>
            /// <param name="message">
            /// <para>
            /// The address of a character array containing the message to insert.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "ARB_debug_output", Version = "", EntryPoint = "glDebugMessageInsertARB")]
            public static extern void DebugMessageInsert(OpenTK.Graphics.OpenGL4.All source, OpenTK.Graphics.OpenGL4.All type, Int32 id, OpenTK.Graphics.OpenGL4.All severity, Int32 length, String buf);

            /// <summary>[requires: ARB_debug_output]
            /// Inject an application-supplied message into the debug message queue
            /// </summary>
            /// <param name="source">
            /// <para>
            /// The source of the debug message to insert.
            /// </para>
            /// </param>
            /// <param name="type">
            /// <para>
            /// The type of the debug message insert.
            /// </para>
            /// </param>
            /// <param name="id">
            /// <para>
            /// The user-supplied identifier of the message to insert.
            /// </para>
            /// </param>
            /// <param name="severity">
            /// <para>
            /// The severity of the debug messages to insert.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// The length string contained in the character array whose address is given by message.
            /// </para>
            /// </param>
            /// <param name="message">
            /// <para>
            /// The address of a character array containing the message to insert.
            /// </para>
            /// </param>
            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_debug_output", Version = "", EntryPoint = "glDebugMessageInsertARB")]
            public static extern void DebugMessageInsert(OpenTK.Graphics.OpenGL4.All source, OpenTK.Graphics.OpenGL4.All type, UInt32 id, OpenTK.Graphics.OpenGL4.All severity, Int32 length, String buf);

            /// <summary>[requires: ARB_shading_language_include]</summary>
            [AutoGenerated(Category = "ARB_shading_language_include", Version = "", EntryPoint = "glDeleteNamedStringARB")]
            public static extern void DeleteNamedString(Int32 namelen, String name);

            /// <summary>[requires: ARB_compute_variable_group_size]</summary>
            [AutoGenerated(Category = "ARB_compute_variable_group_size", Version = "", EntryPoint = "glDispatchComputeGroupSizeARB")]
            public static extern void DispatchComputeGroupSize(Int32 num_groups_x, Int32 num_groups_y, Int32 num_groups_z, Int32 group_size_x, Int32 group_size_y, Int32 group_size_z);

            /// <summary>[requires: ARB_compute_variable_group_size]</summary>
            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_compute_variable_group_size", Version = "", EntryPoint = "glDispatchComputeGroupSizeARB")]
            public static extern void DispatchComputeGroupSize(UInt32 num_groups_x, UInt32 num_groups_y, UInt32 num_groups_z, UInt32 group_size_x, UInt32 group_size_y, UInt32 group_size_z);

            /// <summary>[requires: ARB_debug_output]
            /// Retrieve messages from the debug message log
            /// </summary>
            /// <param name="count">
            /// <para>
            /// The number of debug messages to retrieve from the log.
            /// </para>
            /// </param>
            /// <param name="bufSize">
            /// <para>
            /// The size of the buffer whose address is given by messageLog.
            /// </para>
            /// </param>
            /// <param name="sources">
            /// <para>
            /// The address of an array of variables to receive the sources of the retrieved messages.
            /// </para>
            /// </param>
            /// <param name="types">
            /// <para>
            /// The address of an array of variables to receive the types of the retrieved messages.
            /// </para>
            /// </param>
            /// <param name="ids">
            /// <para>
            /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
            /// </para>
            /// </param>
            /// <param name="severities">
            /// <para>
            /// The address of an array of variables to receive the severites of the retrieved messages.
            /// </para>
            /// </param>
            /// <param name="lengths">
            /// <para>
            /// The address of an array of variables to receive the lengths of the received messages.
            /// </para>
            /// </param>
            /// <param name="messageLog">
            /// <para>
            /// The address of an array of characters that will receive the messages.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "ARB_debug_output", Version = "", EntryPoint = "glGetDebugMessageLogARB")]
            public static extern Int32 GetDebugMessageLog(Int32 count, Int32 bufSize, [OutAttribute] OpenTK.Graphics.OpenGL4.All[] sources, [OutAttribute] OpenTK.Graphics.OpenGL4.All[] types, [OutAttribute] Int32[] ids, [OutAttribute] OpenTK.Graphics.OpenGL4.All[] severities, [OutAttribute] Int32[] lengths, [OutAttribute] StringBuilder messageLog);

            /// <summary>[requires: ARB_debug_output]
            /// Retrieve messages from the debug message log
            /// </summary>
            /// <param name="count">
            /// <para>
            /// The number of debug messages to retrieve from the log.
            /// </para>
            /// </param>
            /// <param name="bufSize">
            /// <para>
            /// The size of the buffer whose address is given by messageLog.
            /// </para>
            /// </param>
            /// <param name="sources">
            /// <para>
            /// The address of an array of variables to receive the sources of the retrieved messages.
            /// </para>
            /// </param>
            /// <param name="types">
            /// <para>
            /// The address of an array of variables to receive the types of the retrieved messages.
            /// </para>
            /// </param>
            /// <param name="ids">
            /// <para>
            /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
            /// </para>
            /// </param>
            /// <param name="severities">
            /// <para>
            /// The address of an array of variables to receive the severites of the retrieved messages.
            /// </para>
            /// </param>
            /// <param name="lengths">
            /// <para>
            /// The address of an array of variables to receive the lengths of the received messages.
            /// </para>
            /// </param>
            /// <param name="messageLog">
            /// <para>
            /// The address of an array of characters that will receive the messages.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "ARB_debug_output", Version = "", EntryPoint = "glGetDebugMessageLogARB")]
            public static extern Int32 GetDebugMessageLog(Int32 count, Int32 bufSize, [OutAttribute] out OpenTK.Graphics.OpenGL4.All sources, [OutAttribute] out OpenTK.Graphics.OpenGL4.All types, [OutAttribute] out Int32 ids, [OutAttribute] out OpenTK.Graphics.OpenGL4.All severities, [OutAttribute] out Int32 lengths, [OutAttribute] StringBuilder messageLog);

            /// <summary>[requires: ARB_debug_output]
            /// Retrieve messages from the debug message log
            /// </summary>
            /// <param name="count">
            /// <para>
            /// The number of debug messages to retrieve from the log.
            /// </para>
            /// </param>
            /// <param name="bufSize">
            /// <para>
            /// The size of the buffer whose address is given by messageLog.
            /// </para>
            /// </param>
            /// <param name="sources">
            /// <para>
            /// The address of an array of variables to receive the sources of the retrieved messages.
            /// </para>
            /// </param>
            /// <param name="types">
            /// <para>
            /// The address of an array of variables to receive the types of the retrieved messages.
            /// </para>
            /// </param>
            /// <param name="ids">
            /// <para>
            /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
            /// </para>
            /// </param>
            /// <param name="severities">
            /// <para>
            /// The address of an array of variables to receive the severites of the retrieved messages.
            /// </para>
            /// </param>
            /// <param name="lengths">
            /// <para>
            /// The address of an array of variables to receive the lengths of the received messages.
            /// </para>
            /// </param>
            /// <param name="messageLog">
            /// <para>
            /// The address of an array of characters that will receive the messages.
            /// </para>
            /// </param>
            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_debug_output", Version = "", EntryPoint = "glGetDebugMessageLogARB")]
            public static extern unsafe Int32 GetDebugMessageLog(Int32 count, Int32 bufSize, [OutAttribute] OpenTK.Graphics.OpenGL4.All* sources, [OutAttribute] OpenTK.Graphics.OpenGL4.All* types, [OutAttribute] Int32* ids, [OutAttribute] OpenTK.Graphics.OpenGL4.All* severities, [OutAttribute] Int32* lengths, [OutAttribute] StringBuilder messageLog);

            /// <summary>[requires: ARB_debug_output]
            /// Retrieve messages from the debug message log
            /// </summary>
            /// <param name="count">
            /// <para>
            /// The number of debug messages to retrieve from the log.
            /// </para>
            /// </param>
            /// <param name="bufSize">
            /// <para>
            /// The size of the buffer whose address is given by messageLog.
            /// </para>
            /// </param>
            /// <param name="sources">
            /// <para>
            /// The address of an array of variables to receive the sources of the retrieved messages.
            /// </para>
            /// </param>
            /// <param name="types">
            /// <para>
            /// The address of an array of variables to receive the types of the retrieved messages.
            /// </para>
            /// </param>
            /// <param name="ids">
            /// <para>
            /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
            /// </para>
            /// </param>
            /// <param name="severities">
            /// <para>
            /// The address of an array of variables to receive the severites of the retrieved messages.
            /// </para>
            /// </param>
            /// <param name="lengths">
            /// <para>
            /// The address of an array of variables to receive the lengths of the received messages.
            /// </para>
            /// </param>
            /// <param name="messageLog">
            /// <para>
            /// The address of an array of characters that will receive the messages.
            /// </para>
            /// </param>
            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_debug_output", Version = "", EntryPoint = "glGetDebugMessageLogARB")]
            public static extern Int32 GetDebugMessageLog(UInt32 count, Int32 bufSize, [OutAttribute] OpenTK.Graphics.OpenGL4.All[] sources, [OutAttribute] OpenTK.Graphics.OpenGL4.All[] types, [OutAttribute] UInt32[] ids, [OutAttribute] OpenTK.Graphics.OpenGL4.All[] severities, [OutAttribute] Int32[] lengths, [OutAttribute] StringBuilder messageLog);

            /// <summary>[requires: ARB_debug_output]
            /// Retrieve messages from the debug message log
            /// </summary>
            /// <param name="count">
            /// <para>
            /// The number of debug messages to retrieve from the log.
            /// </para>
            /// </param>
            /// <param name="bufSize">
            /// <para>
            /// The size of the buffer whose address is given by messageLog.
            /// </para>
            /// </param>
            /// <param name="sources">
            /// <para>
            /// The address of an array of variables to receive the sources of the retrieved messages.
            /// </para>
            /// </param>
            /// <param name="types">
            /// <para>
            /// The address of an array of variables to receive the types of the retrieved messages.
            /// </para>
            /// </param>
            /// <param name="ids">
            /// <para>
            /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
            /// </para>
            /// </param>
            /// <param name="severities">
            /// <para>
            /// The address of an array of variables to receive the severites of the retrieved messages.
            /// </para>
            /// </param>
            /// <param name="lengths">
            /// <para>
            /// The address of an array of variables to receive the lengths of the received messages.
            /// </para>
            /// </param>
            /// <param name="messageLog">
            /// <para>
            /// The address of an array of characters that will receive the messages.
            /// </para>
            /// </param>
            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_debug_output", Version = "", EntryPoint = "glGetDebugMessageLogARB")]
            public static extern Int32 GetDebugMessageLog(UInt32 count, Int32 bufSize, [OutAttribute] out OpenTK.Graphics.OpenGL4.All sources, [OutAttribute] out OpenTK.Graphics.OpenGL4.All types, [OutAttribute] out UInt32 ids, [OutAttribute] out OpenTK.Graphics.OpenGL4.All severities, [OutAttribute] out Int32 lengths, [OutAttribute] StringBuilder messageLog);

            /// <summary>[requires: ARB_debug_output]
            /// Retrieve messages from the debug message log
            /// </summary>
            /// <param name="count">
            /// <para>
            /// The number of debug messages to retrieve from the log.
            /// </para>
            /// </param>
            /// <param name="bufSize">
            /// <para>
            /// The size of the buffer whose address is given by messageLog.
            /// </para>
            /// </param>
            /// <param name="sources">
            /// <para>
            /// The address of an array of variables to receive the sources of the retrieved messages.
            /// </para>
            /// </param>
            /// <param name="types">
            /// <para>
            /// The address of an array of variables to receive the types of the retrieved messages.
            /// </para>
            /// </param>
            /// <param name="ids">
            /// <para>
            /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
            /// </para>
            /// </param>
            /// <param name="severities">
            /// <para>
            /// The address of an array of variables to receive the severites of the retrieved messages.
            /// </para>
            /// </param>
            /// <param name="lengths">
            /// <para>
            /// The address of an array of variables to receive the lengths of the received messages.
            /// </para>
            /// </param>
            /// <param name="messageLog">
            /// <para>
            /// The address of an array of characters that will receive the messages.
            /// </para>
            /// </param>
            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_debug_output", Version = "", EntryPoint = "glGetDebugMessageLogARB")]
            public static extern unsafe Int32 GetDebugMessageLog(UInt32 count, Int32 bufSize, [OutAttribute] OpenTK.Graphics.OpenGL4.All* sources, [OutAttribute] OpenTK.Graphics.OpenGL4.All* types, [OutAttribute] UInt32* ids, [OutAttribute] OpenTK.Graphics.OpenGL4.All* severities, [OutAttribute] Int32* lengths, [OutAttribute] StringBuilder messageLog);

            /// <summary>[requires: ARB_robustness]</summary>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetGraphicsResetStatusARB")]
            public static extern OpenTK.Graphics.OpenGL4.All GetGraphicsResetStatus();

            /// <summary>[requires: ARB_bindless_texture]</summary>
            [AutoGenerated(Category = "ARB_bindless_texture", Version = "", EntryPoint = "glGetImageHandleARB")]
            public static extern Int64 GetImageHandle(Int32 texture, Int32 level, bool layered, Int32 layer, OpenTK.Graphics.OpenGL4.All format);

            /// <summary>[requires: ARB_bindless_texture]</summary>
            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_bindless_texture", Version = "", EntryPoint = "glGetImageHandleARB")]
            public static extern Int64 GetImageHandle(UInt32 texture, Int32 level, bool layered, Int32 layer, OpenTK.Graphics.OpenGL4.All format);

            /// <summary>[requires: ARB_shading_language_include]</summary>
            [AutoGenerated(Category = "ARB_shading_language_include", Version = "", EntryPoint = "glGetNamedStringARB")]
            public static extern void GetNamedString(Int32 namelen, String name, Int32 bufSize, [OutAttribute] out Int32 stringlen, [OutAttribute] StringBuilder @string);

            /// <summary>[requires: ARB_shading_language_include]</summary>
            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_shading_language_include", Version = "", EntryPoint = "glGetNamedStringARB")]
            public static extern unsafe void GetNamedString(Int32 namelen, String name, Int32 bufSize, [OutAttribute] Int32* stringlen, [OutAttribute] StringBuilder @string);

            /// <summary>[requires: ARB_shading_language_include]</summary>
            [AutoGenerated(Category = "ARB_shading_language_include", Version = "", EntryPoint = "glGetNamedStringivARB")]
            public static extern void GetNamedString(Int32 namelen, String name, OpenTK.Graphics.OpenGL4.All pname, [OutAttribute] Int32[] @params);

            /// <summary>[requires: ARB_shading_language_include]</summary>
            [AutoGenerated(Category = "ARB_shading_language_include", Version = "", EntryPoint = "glGetNamedStringivARB")]
            public static extern void GetNamedString(Int32 namelen, String name, OpenTK.Graphics.OpenGL4.All pname, [OutAttribute] out Int32 @params);

            /// <summary>[requires: ARB_shading_language_include]</summary>
            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_shading_language_include", Version = "", EntryPoint = "glGetNamedStringivARB")]
            public static extern unsafe void GetNamedString(Int32 namelen, String name, OpenTK.Graphics.OpenGL4.All pname, [OutAttribute] Int32* @params);

            /// <summary>[requires: ARB_robustness]</summary>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnColorTableARB")]
            public static extern void GetnColorTable(OpenTK.Graphics.OpenGL4.All target, OpenTK.Graphics.OpenGL4.All format, OpenTK.Graphics.OpenGL4.All type, Int32 bufSize, [OutAttribute] IntPtr table);

            /// <summary>[requires: ARB_robustness]</summary>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnColorTableARB")]
            public static extern void GetnColorTable<T4>(OpenTK.Graphics.OpenGL4.All target, OpenTK.Graphics.OpenGL4.All format, OpenTK.Graphics.OpenGL4.All type, Int32 bufSize, [InAttribute, OutAttribute] T4[] table)
                where T4 : struct
            ;

            /// <summary>[requires: ARB_robustness]</summary>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnColorTableARB")]
            public static extern void GetnColorTable<T4>(OpenTK.Graphics.OpenGL4.All target, OpenTK.Graphics.OpenGL4.All format, OpenTK.Graphics.OpenGL4.All type, Int32 bufSize, [InAttribute, OutAttribute] T4[,] table)
                where T4 : struct
            ;

            /// <summary>[requires: ARB_robustness]</summary>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnColorTableARB")]
            public static extern void GetnColorTable<T4>(OpenTK.Graphics.OpenGL4.All target, OpenTK.Graphics.OpenGL4.All format, OpenTK.Graphics.OpenGL4.All type, Int32 bufSize, [InAttribute, OutAttribute] T4[,,] table)
                where T4 : struct
            ;

            /// <summary>[requires: ARB_robustness]</summary>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnColorTableARB")]
            public static extern void GetnColorTable<T4>(OpenTK.Graphics.OpenGL4.All target, OpenTK.Graphics.OpenGL4.All format, OpenTK.Graphics.OpenGL4.All type, Int32 bufSize, [InAttribute, OutAttribute] ref T4 table)
                where T4 : struct
            ;

            /// <summary>[requires: ARB_robustness]</summary>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnCompressedTexImageARB")]
            public static extern void GetnCompressedTexImage(OpenTK.Graphics.OpenGL4.All target, Int32 lod, Int32 bufSize, [OutAttribute] IntPtr img);

            /// <summary>[requires: ARB_robustness]</summary>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnCompressedTexImageARB")]
            public static extern void GetnCompressedTexImage<T3>(OpenTK.Graphics.OpenGL4.All target, Int32 lod, Int32 bufSize, [InAttribute, OutAttribute] T3[] img)
                where T3 : struct
            ;

            /// <summary>[requires: ARB_robustness]</summary>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnCompressedTexImageARB")]
            public static extern void GetnCompressedTexImage<T3>(OpenTK.Graphics.OpenGL4.All target, Int32 lod, Int32 bufSize, [InAttribute, OutAttribute] T3[,] img)
                where T3 : struct
            ;

            /// <summary>[requires: ARB_robustness]</summary>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnCompressedTexImageARB")]
            public static extern void GetnCompressedTexImage<T3>(OpenTK.Graphics.OpenGL4.All target, Int32 lod, Int32 bufSize, [InAttribute, OutAttribute] T3[,,] img)
                where T3 : struct
            ;

            /// <summary>[requires: ARB_robustness]</summary>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnCompressedTexImageARB")]
            public static extern void GetnCompressedTexImage<T3>(OpenTK.Graphics.OpenGL4.All target, Int32 lod, Int32 bufSize, [InAttribute, OutAttribute] ref T3 img)
                where T3 : struct
            ;

            /// <summary>[requires: ARB_robustness]</summary>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnConvolutionFilterARB")]
            public static extern void GetnConvolutionFilter(OpenTK.Graphics.OpenGL4.All target, OpenTK.Graphics.OpenGL4.All format, OpenTK.Graphics.OpenGL4.All type, Int32 bufSize, [OutAttribute] IntPtr image);

            /// <summary>[requires: ARB_robustness]</summary>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnConvolutionFilterARB")]
            public static extern void GetnConvolutionFilter<T4>(OpenTK.Graphics.OpenGL4.All target, OpenTK.Graphics.OpenGL4.All format, OpenTK.Graphics.OpenGL4.All type, Int32 bufSize, [InAttribute, OutAttribute] T4[] image)
                where T4 : struct
            ;

            /// <summary>[requires: ARB_robustness]</summary>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnConvolutionFilterARB")]
            public static extern void GetnConvolutionFilter<T4>(OpenTK.Graphics.OpenGL4.All target, OpenTK.Graphics.OpenGL4.All format, OpenTK.Graphics.OpenGL4.All type, Int32 bufSize, [InAttribute, OutAttribute] T4[,] image)
                where T4 : struct
            ;

            /// <summary>[requires: ARB_robustness]</summary>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnConvolutionFilterARB")]
            public static extern void GetnConvolutionFilter<T4>(OpenTK.Graphics.OpenGL4.All target, OpenTK.Graphics.OpenGL4.All format, OpenTK.Graphics.OpenGL4.All type, Int32 bufSize, [InAttribute, OutAttribute] T4[,,] image)
                where T4 : struct
            ;

            /// <summary>[requires: ARB_robustness]</summary>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnConvolutionFilterARB")]
            public static extern void GetnConvolutionFilter<T4>(OpenTK.Graphics.OpenGL4.All target, OpenTK.Graphics.OpenGL4.All format, OpenTK.Graphics.OpenGL4.All type, Int32 bufSize, [InAttribute, OutAttribute] ref T4 image)
                where T4 : struct
            ;

            /// <summary>[requires: ARB_robustness]</summary>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnHistogramARB")]
            public static extern void GetnHistogram(OpenTK.Graphics.OpenGL4.All target, bool reset, OpenTK.Graphics.OpenGL4.All format, OpenTK.Graphics.OpenGL4.All type, Int32 bufSize, [OutAttribute] IntPtr values);

            /// <summary>[requires: ARB_robustness]</summary>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnHistogramARB")]
            public static extern void GetnHistogram<T5>(OpenTK.Graphics.OpenGL4.All target, bool reset, OpenTK.Graphics.OpenGL4.All format, OpenTK.Graphics.OpenGL4.All type, Int32 bufSize, [InAttribute, OutAttribute] T5[] values)
                where T5 : struct
            ;

            /// <summary>[requires: ARB_robustness]</summary>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnHistogramARB")]
            public static extern void GetnHistogram<T5>(OpenTK.Graphics.OpenGL4.All target, bool reset, OpenTK.Graphics.OpenGL4.All format, OpenTK.Graphics.OpenGL4.All type, Int32 bufSize, [InAttribute, OutAttribute] T5[,] values)
                where T5 : struct
            ;

            /// <summary>[requires: ARB_robustness]</summary>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnHistogramARB")]
            public static extern void GetnHistogram<T5>(OpenTK.Graphics.OpenGL4.All target, bool reset, OpenTK.Graphics.OpenGL4.All format, OpenTK.Graphics.OpenGL4.All type, Int32 bufSize, [InAttribute, OutAttribute] T5[,,] values)
                where T5 : struct
            ;

            /// <summary>[requires: ARB_robustness]</summary>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnHistogramARB")]
            public static extern void GetnHistogram<T5>(OpenTK.Graphics.OpenGL4.All target, bool reset, OpenTK.Graphics.OpenGL4.All format, OpenTK.Graphics.OpenGL4.All type, Int32 bufSize, [InAttribute, OutAttribute] ref T5 values)
                where T5 : struct
            ;

            /// <summary>[requires: ARB_robustness]</summary>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnMapdvARB")]
            public static extern void GetnMap(OpenTK.Graphics.OpenGL4.All target, OpenTK.Graphics.OpenGL4.All query, Int32 bufSize, [OutAttribute] Double[] v);

            /// <summary>[requires: ARB_robustness]</summary>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnMapdvARB")]
            public static extern void GetnMap(OpenTK.Graphics.OpenGL4.All target, OpenTK.Graphics.OpenGL4.All query, Int32 bufSize, [OutAttribute] out Double v);

            /// <summary>[requires: ARB_robustness]</summary>
            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnMapdvARB")]
            public static extern unsafe void GetnMap(OpenTK.Graphics.OpenGL4.All target, OpenTK.Graphics.OpenGL4.All query, Int32 bufSize, [OutAttribute] Double* v);

            /// <summary>[requires: ARB_robustness]</summary>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnMapfvARB")]
            public static extern void GetnMap(OpenTK.Graphics.OpenGL4.All target, OpenTK.Graphics.OpenGL4.All query, Int32 bufSize, [OutAttribute] Single[] v);

            /// <summary>[requires: ARB_robustness]</summary>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnMapfvARB")]
            public static extern void GetnMap(OpenTK.Graphics.OpenGL4.All target, OpenTK.Graphics.OpenGL4.All query, Int32 bufSize, [OutAttribute] out Single v);

            /// <summary>[requires: ARB_robustness]</summary>
            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnMapfvARB")]
            public static extern unsafe void GetnMap(OpenTK.Graphics.OpenGL4.All target, OpenTK.Graphics.OpenGL4.All query, Int32 bufSize, [OutAttribute] Single* v);

            /// <summary>[requires: ARB_robustness]</summary>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnMapivARB")]
            public static extern void GetnMap(OpenTK.Graphics.OpenGL4.All target, OpenTK.Graphics.OpenGL4.All query, Int32 bufSize, [OutAttribute] Int32[] v);

            /// <summary>[requires: ARB_robustness]</summary>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnMapivARB")]
            public static extern void GetnMap(OpenTK.Graphics.OpenGL4.All target, OpenTK.Graphics.OpenGL4.All query, Int32 bufSize, [OutAttribute] out Int32 v);

            /// <summary>[requires: ARB_robustness]</summary>
            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnMapivARB")]
            public static extern unsafe void GetnMap(OpenTK.Graphics.OpenGL4.All target, OpenTK.Graphics.OpenGL4.All query, Int32 bufSize, [OutAttribute] Int32* v);

            /// <summary>[requires: ARB_robustness]</summary>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnMinmaxARB")]
            public static extern void GetnMinmax(OpenTK.Graphics.OpenGL4.All target, bool reset, OpenTK.Graphics.OpenGL4.All format, OpenTK.Graphics.OpenGL4.All type, Int32 bufSize, [OutAttribute] IntPtr values);

            /// <summary>[requires: ARB_robustness]</summary>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnMinmaxARB")]
            public static extern void GetnMinmax<T5>(OpenTK.Graphics.OpenGL4.All target, bool reset, OpenTK.Graphics.OpenGL4.All format, OpenTK.Graphics.OpenGL4.All type, Int32 bufSize, [InAttribute, OutAttribute] T5[] values)
                where T5 : struct
            ;

            /// <summary>[requires: ARB_robustness]</summary>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnMinmaxARB")]
            public static extern void GetnMinmax<T5>(OpenTK.Graphics.OpenGL4.All target, bool reset, OpenTK.Graphics.OpenGL4.All format, OpenTK.Graphics.OpenGL4.All type, Int32 bufSize, [InAttribute, OutAttribute] T5[,] values)
                where T5 : struct
            ;

            /// <summary>[requires: ARB_robustness]</summary>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnMinmaxARB")]
            public static extern void GetnMinmax<T5>(OpenTK.Graphics.OpenGL4.All target, bool reset, OpenTK.Graphics.OpenGL4.All format, OpenTK.Graphics.OpenGL4.All type, Int32 bufSize, [InAttribute, OutAttribute] T5[,,] values)
                where T5 : struct
            ;

            /// <summary>[requires: ARB_robustness]</summary>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnMinmaxARB")]
            public static extern void GetnMinmax<T5>(OpenTK.Graphics.OpenGL4.All target, bool reset, OpenTK.Graphics.OpenGL4.All format, OpenTK.Graphics.OpenGL4.All type, Int32 bufSize, [InAttribute, OutAttribute] ref T5 values)
                where T5 : struct
            ;

            /// <summary>[requires: ARB_robustness]</summary>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnPixelMapfvARB")]
            public static extern void GetnPixelMap(OpenTK.Graphics.OpenGL4.All map, Int32 bufSize, [OutAttribute] Single[] values);

            /// <summary>[requires: ARB_robustness]</summary>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnPixelMapfvARB")]
            public static extern void GetnPixelMap(OpenTK.Graphics.OpenGL4.All map, Int32 bufSize, [OutAttribute] out Single values);

            /// <summary>[requires: ARB_robustness]</summary>
            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnPixelMapfvARB")]
            public static extern unsafe void GetnPixelMap(OpenTK.Graphics.OpenGL4.All map, Int32 bufSize, [OutAttribute] Single* values);

            /// <summary>[requires: ARB_robustness]</summary>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnPixelMapuivARB")]
            public static extern void GetnPixelMap(OpenTK.Graphics.OpenGL4.All map, Int32 bufSize, [OutAttribute] Int32[] values);

            /// <summary>[requires: ARB_robustness]</summary>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnPixelMapuivARB")]
            public static extern void GetnPixelMap(OpenTK.Graphics.OpenGL4.All map, Int32 bufSize, [OutAttribute] out Int32 values);

            /// <summary>[requires: ARB_robustness]</summary>
            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnPixelMapuivARB")]
            public static extern unsafe void GetnPixelMap(OpenTK.Graphics.OpenGL4.All map, Int32 bufSize, [OutAttribute] Int32* values);

            /// <summary>[requires: ARB_robustness]</summary>
            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnPixelMapuivARB")]
            public static extern void GetnPixelMap(OpenTK.Graphics.OpenGL4.All map, Int32 bufSize, [OutAttribute] UInt32[] values);

            /// <summary>[requires: ARB_robustness]</summary>
            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnPixelMapuivARB")]
            public static extern void GetnPixelMap(OpenTK.Graphics.OpenGL4.All map, Int32 bufSize, [OutAttribute] out UInt32 values);

            /// <summary>[requires: ARB_robustness]</summary>
            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnPixelMapuivARB")]
            public static extern unsafe void GetnPixelMap(OpenTK.Graphics.OpenGL4.All map, Int32 bufSize, [OutAttribute] UInt32* values);

            /// <summary>[requires: ARB_robustness]</summary>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnPixelMapusvARB")]
            public static extern void GetnPixelMap(OpenTK.Graphics.OpenGL4.All map, Int32 bufSize, [OutAttribute] Int16[] values);

            /// <summary>[requires: ARB_robustness]</summary>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnPixelMapusvARB")]
            public static extern void GetnPixelMap(OpenTK.Graphics.OpenGL4.All map, Int32 bufSize, [OutAttribute] out Int16 values);

            /// <summary>[requires: ARB_robustness]</summary>
            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnPixelMapusvARB")]
            public static extern unsafe void GetnPixelMap(OpenTK.Graphics.OpenGL4.All map, Int32 bufSize, [OutAttribute] Int16* values);

            /// <summary>[requires: ARB_robustness]</summary>
            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnPixelMapusvARB")]
            public static extern void GetnPixelMap(OpenTK.Graphics.OpenGL4.All map, Int32 bufSize, [OutAttribute] UInt16[] values);

            /// <summary>[requires: ARB_robustness]</summary>
            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnPixelMapusvARB")]
            public static extern void GetnPixelMap(OpenTK.Graphics.OpenGL4.All map, Int32 bufSize, [OutAttribute] out UInt16 values);

            /// <summary>[requires: ARB_robustness]</summary>
            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnPixelMapusvARB")]
            public static extern unsafe void GetnPixelMap(OpenTK.Graphics.OpenGL4.All map, Int32 bufSize, [OutAttribute] UInt16* values);

            /// <summary>[requires: ARB_robustness]</summary>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnPolygonStippleARB")]
            public static extern Byte GetnPolygonStipple();

            /// <summary>[requires: ARB_robustness]</summary>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnPolygonStippleARB")]
            public static extern void GetnPolygonStipple(Int32 bufSize, [OutAttribute] Byte[] pattern);

            /// <summary>[requires: ARB_robustness]</summary>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnPolygonStippleARB")]
            public static extern void GetnPolygonStipple(Int32 bufSize, [OutAttribute] out Byte pattern);

            /// <summary>[requires: ARB_robustness]</summary>
            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnPolygonStippleARB")]
            public static extern unsafe void GetnPolygonStipple(Int32 bufSize, [OutAttribute] Byte* pattern);

            /// <summary>[requires: ARB_robustness]</summary>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnSeparableFilterARB")]
            public static extern void GetnSeparableFilter(OpenTK.Graphics.OpenGL4.All target, OpenTK.Graphics.OpenGL4.All format, OpenTK.Graphics.OpenGL4.All type, Int32 rowBufSize, [OutAttribute] IntPtr row, Int32 columnBufSize, [OutAttribute] IntPtr column, [OutAttribute] IntPtr span);

            /// <summary>[requires: ARB_robustness]</summary>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnSeparableFilterARB")]
            public static extern void GetnSeparableFilter<T4,T6,T7>(OpenTK.Graphics.OpenGL4.All target, OpenTK.Graphics.OpenGL4.All format, OpenTK.Graphics.OpenGL4.All type, Int32 rowBufSize, [InAttribute, OutAttribute] T4[] row, Int32 columnBufSize, [InAttribute, OutAttribute] T6[] column, [InAttribute, OutAttribute] T7[] span)
                where T4 : struct
                where T6 : struct
                where T7 : struct
            ;

            /// <summary>[requires: ARB_robustness]</summary>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnSeparableFilterARB")]
            public static extern void GetnSeparableFilter<T4,T6,T7>(OpenTK.Graphics.OpenGL4.All target, OpenTK.Graphics.OpenGL4.All format, OpenTK.Graphics.OpenGL4.All type, Int32 rowBufSize, [InAttribute, OutAttribute] T4[,] row, Int32 columnBufSize, [InAttribute, OutAttribute] T6[,] column, [InAttribute, OutAttribute] T7[,] span)
                where T4 : struct
                where T6 : struct
                where T7 : struct
            ;

            /// <summary>[requires: ARB_robustness]</summary>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnSeparableFilterARB")]
            public static extern void GetnSeparableFilter<T4,T6,T7>(OpenTK.Graphics.OpenGL4.All target, OpenTK.Graphics.OpenGL4.All format, OpenTK.Graphics.OpenGL4.All type, Int32 rowBufSize, [InAttribute, OutAttribute] T4[,,] row, Int32 columnBufSize, [InAttribute, OutAttribute] T6[,,] column, [InAttribute, OutAttribute] T7[,,] span)
                where T4 : struct
                where T6 : struct
                where T7 : struct
            ;

            /// <summary>[requires: ARB_robustness]</summary>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnSeparableFilterARB")]
            public static extern void GetnSeparableFilter<T4,T6,T7>(OpenTK.Graphics.OpenGL4.All target, OpenTK.Graphics.OpenGL4.All format, OpenTK.Graphics.OpenGL4.All type, Int32 rowBufSize, [InAttribute, OutAttribute] ref T4 row, Int32 columnBufSize, [InAttribute, OutAttribute] ref T6 column, [InAttribute, OutAttribute] ref T7 span)
                where T4 : struct
                where T6 : struct
                where T7 : struct
            ;

            /// <summary>[requires: ARB_robustness]</summary>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnTexImageARB")]
            public static extern void GetnTexImage(OpenTK.Graphics.OpenGL4.All target, Int32 level, OpenTK.Graphics.OpenGL4.All format, OpenTK.Graphics.OpenGL4.All type, Int32 bufSize, [OutAttribute] IntPtr img);

            /// <summary>[requires: ARB_robustness]</summary>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnTexImageARB")]
            public static extern void GetnTexImage<T5>(OpenTK.Graphics.OpenGL4.All target, Int32 level, OpenTK.Graphics.OpenGL4.All format, OpenTK.Graphics.OpenGL4.All type, Int32 bufSize, [InAttribute, OutAttribute] T5[] img)
                where T5 : struct
            ;

            /// <summary>[requires: ARB_robustness]</summary>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnTexImageARB")]
            public static extern void GetnTexImage<T5>(OpenTK.Graphics.OpenGL4.All target, Int32 level, OpenTK.Graphics.OpenGL4.All format, OpenTK.Graphics.OpenGL4.All type, Int32 bufSize, [InAttribute, OutAttribute] T5[,] img)
                where T5 : struct
            ;

            /// <summary>[requires: ARB_robustness]</summary>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnTexImageARB")]
            public static extern void GetnTexImage<T5>(OpenTK.Graphics.OpenGL4.All target, Int32 level, OpenTK.Graphics.OpenGL4.All format, OpenTK.Graphics.OpenGL4.All type, Int32 bufSize, [InAttribute, OutAttribute] T5[,,] img)
                where T5 : struct
            ;

            /// <summary>[requires: ARB_robustness]</summary>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnTexImageARB")]
            public static extern void GetnTexImage<T5>(OpenTK.Graphics.OpenGL4.All target, Int32 level, OpenTK.Graphics.OpenGL4.All format, OpenTK.Graphics.OpenGL4.All type, Int32 bufSize, [InAttribute, OutAttribute] ref T5 img)
                where T5 : struct
            ;

            /// <summary>[requires: ARB_robustness]</summary>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnUniformdvARB")]
            public static extern void GetnUniform(Int32 program, Int32 location, Int32 bufSize, [OutAttribute] Double[] @params);

            /// <summary>[requires: ARB_robustness]</summary>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnUniformdvARB")]
            public static extern void GetnUniform(Int32 program, Int32 location, Int32 bufSize, [OutAttribute] out Double @params);

            /// <summary>[requires: ARB_robustness]</summary>
            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnUniformdvARB")]
            public static extern unsafe void GetnUniform(Int32 program, Int32 location, Int32 bufSize, [OutAttribute] Double* @params);

            /// <summary>[requires: ARB_robustness]</summary>
            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnUniformdvARB")]
            public static extern void GetnUniform(UInt32 program, Int32 location, Int32 bufSize, [OutAttribute] Double[] @params);

            /// <summary>[requires: ARB_robustness]</summary>
            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnUniformdvARB")]
            public static extern void GetnUniform(UInt32 program, Int32 location, Int32 bufSize, [OutAttribute] out Double @params);

            /// <summary>[requires: ARB_robustness]</summary>
            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnUniformdvARB")]
            public static extern unsafe void GetnUniform(UInt32 program, Int32 location, Int32 bufSize, [OutAttribute] Double* @params);

            /// <summary>[requires: ARB_robustness]</summary>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnUniformfvARB")]
            public static extern void GetnUniform(Int32 program, Int32 location, Int32 bufSize, [OutAttribute] Single[] @params);

            /// <summary>[requires: ARB_robustness]</summary>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnUniformfvARB")]
            public static extern void GetnUniform(Int32 program, Int32 location, Int32 bufSize, [OutAttribute] out Single @params);

            /// <summary>[requires: ARB_robustness]</summary>
            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnUniformfvARB")]
            public static extern unsafe void GetnUniform(Int32 program, Int32 location, Int32 bufSize, [OutAttribute] Single* @params);

            /// <summary>[requires: ARB_robustness]</summary>
            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnUniformfvARB")]
            public static extern void GetnUniform(UInt32 program, Int32 location, Int32 bufSize, [OutAttribute] Single[] @params);

            /// <summary>[requires: ARB_robustness]</summary>
            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnUniformfvARB")]
            public static extern void GetnUniform(UInt32 program, Int32 location, Int32 bufSize, [OutAttribute] out Single @params);

            /// <summary>[requires: ARB_robustness]</summary>
            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnUniformfvARB")]
            public static extern unsafe void GetnUniform(UInt32 program, Int32 location, Int32 bufSize, [OutAttribute] Single* @params);

            /// <summary>[requires: ARB_robustness]</summary>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnUniformivARB")]
            public static extern void GetnUniform(Int32 program, Int32 location, Int32 bufSize, [OutAttribute] Int32[] @params);

            /// <summary>[requires: ARB_robustness]</summary>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnUniformivARB")]
            public static extern void GetnUniform(Int32 program, Int32 location, Int32 bufSize, [OutAttribute] out Int32 @params);

            /// <summary>[requires: ARB_robustness]</summary>
            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnUniformivARB")]
            public static extern unsafe void GetnUniform(Int32 program, Int32 location, Int32 bufSize, [OutAttribute] Int32* @params);

            /// <summary>[requires: ARB_robustness]</summary>
            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnUniformivARB")]
            public static extern void GetnUniform(UInt32 program, Int32 location, Int32 bufSize, [OutAttribute] Int32[] @params);

            /// <summary>[requires: ARB_robustness]</summary>
            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnUniformivARB")]
            public static extern void GetnUniform(UInt32 program, Int32 location, Int32 bufSize, [OutAttribute] out Int32 @params);

            /// <summary>[requires: ARB_robustness]</summary>
            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnUniformivARB")]
            public static extern unsafe void GetnUniform(UInt32 program, Int32 location, Int32 bufSize, [OutAttribute] Int32* @params);

            /// <summary>[requires: ARB_robustness]</summary>
            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnUniformuivARB")]
            public static extern void GetnUniform(UInt32 program, Int32 location, Int32 bufSize, [OutAttribute] UInt32[] @params);

            /// <summary>[requires: ARB_robustness]</summary>
            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnUniformuivARB")]
            public static extern void GetnUniform(UInt32 program, Int32 location, Int32 bufSize, [OutAttribute] out UInt32 @params);

            /// <summary>[requires: ARB_robustness]</summary>
            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glGetnUniformuivARB")]
            public static extern unsafe void GetnUniform(UInt32 program, Int32 location, Int32 bufSize, [OutAttribute] UInt32* @params);

            /// <summary>[requires: ARB_bindless_texture]</summary>
            [AutoGenerated(Category = "ARB_bindless_texture", Version = "", EntryPoint = "glGetTextureHandleARB")]
            public static extern Int64 GetTextureHandle(Int32 texture);

            /// <summary>[requires: ARB_bindless_texture]</summary>
            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_bindless_texture", Version = "", EntryPoint = "glGetTextureHandleARB")]
            public static extern Int64 GetTextureHandle(UInt32 texture);

            /// <summary>[requires: ARB_bindless_texture]</summary>
            [AutoGenerated(Category = "ARB_bindless_texture", Version = "", EntryPoint = "glGetTextureSamplerHandleARB")]
            public static extern Int64 GetTextureSamplerHandle(Int32 texture, Int32 sampler);

            /// <summary>[requires: ARB_bindless_texture]</summary>
            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_bindless_texture", Version = "", EntryPoint = "glGetTextureSamplerHandleARB")]
            public static extern Int64 GetTextureSamplerHandle(UInt32 texture, UInt32 sampler);

            /// <summary>[requires: ARB_bindless_texture]</summary>
            [AutoGenerated(Category = "ARB_bindless_texture", Version = "", EntryPoint = "glGetVertexAttribLui64vARB")]
            public static extern void GetVertexAttribL(Int32 index, OpenTK.Graphics.OpenGL4.VertexAttribParameterArb pname, [OutAttribute] Int64[] @params);

            /// <summary>[requires: ARB_bindless_texture]</summary>
            [AutoGenerated(Category = "ARB_bindless_texture", Version = "", EntryPoint = "glGetVertexAttribLui64vARB")]
            public static extern void GetVertexAttribL(Int32 index, OpenTK.Graphics.OpenGL4.VertexAttribParameterArb pname, [OutAttribute] out Int64 @params);

            /// <summary>[requires: ARB_bindless_texture]</summary>
            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_bindless_texture", Version = "", EntryPoint = "glGetVertexAttribLui64vARB")]
            public static extern unsafe void GetVertexAttribL(Int32 index, OpenTK.Graphics.OpenGL4.VertexAttribParameterArb pname, [OutAttribute] Int64* @params);

            /// <summary>[requires: ARB_bindless_texture]</summary>
            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_bindless_texture", Version = "", EntryPoint = "glGetVertexAttribLui64vARB")]
            public static extern void GetVertexAttribL(UInt32 index, OpenTK.Graphics.OpenGL4.VertexAttribParameterArb pname, [OutAttribute] UInt64[] @params);

            /// <summary>[requires: ARB_bindless_texture]</summary>
            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_bindless_texture", Version = "", EntryPoint = "glGetVertexAttribLui64vARB")]
            public static extern void GetVertexAttribL(UInt32 index, OpenTK.Graphics.OpenGL4.VertexAttribParameterArb pname, [OutAttribute] out UInt64 @params);

            /// <summary>[requires: ARB_bindless_texture]</summary>
            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_bindless_texture", Version = "", EntryPoint = "glGetVertexAttribLui64vARB")]
            public static extern unsafe void GetVertexAttribL(UInt32 index, OpenTK.Graphics.OpenGL4.VertexAttribParameterArb pname, [OutAttribute] UInt64* @params);

            /// <summary>[requires: ARB_bindless_texture]</summary>
            [AutoGenerated(Category = "ARB_bindless_texture", Version = "", EntryPoint = "glIsImageHandleResidentARB")]
            public static extern bool IsImageHandleResident(Int64 handle);

            /// <summary>[requires: ARB_bindless_texture]</summary>
            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_bindless_texture", Version = "", EntryPoint = "glIsImageHandleResidentARB")]
            public static extern bool IsImageHandleResident(UInt64 handle);

            /// <summary>[requires: ARB_shading_language_include]</summary>
            [AutoGenerated(Category = "ARB_shading_language_include", Version = "", EntryPoint = "glIsNamedStringARB")]
            public static extern bool IsNamedString(Int32 namelen, String name);

            /// <summary>[requires: ARB_bindless_texture]</summary>
            [AutoGenerated(Category = "ARB_bindless_texture", Version = "", EntryPoint = "glIsTextureHandleResidentARB")]
            public static extern bool IsTextureHandleResident(Int64 handle);

            /// <summary>[requires: ARB_bindless_texture]</summary>
            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_bindless_texture", Version = "", EntryPoint = "glIsTextureHandleResidentARB")]
            public static extern bool IsTextureHandleResident(UInt64 handle);

            /// <summary>[requires: ARB_bindless_texture]</summary>
            [AutoGenerated(Category = "ARB_bindless_texture", Version = "", EntryPoint = "glMakeImageHandleNonResidentARB")]
            public static extern void MakeImageHandleNonResident(Int64 handle);

            /// <summary>[requires: ARB_bindless_texture]</summary>
            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_bindless_texture", Version = "", EntryPoint = "glMakeImageHandleNonResidentARB")]
            public static extern void MakeImageHandleNonResident(UInt64 handle);

            /// <summary>[requires: ARB_bindless_texture]</summary>
            [AutoGenerated(Category = "ARB_bindless_texture", Version = "", EntryPoint = "glMakeImageHandleResidentARB")]
            public static extern void MakeImageHandleResident(Int64 handle, OpenTK.Graphics.OpenGL4.All access);

            /// <summary>[requires: ARB_bindless_texture]</summary>
            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_bindless_texture", Version = "", EntryPoint = "glMakeImageHandleResidentARB")]
            public static extern void MakeImageHandleResident(UInt64 handle, OpenTK.Graphics.OpenGL4.All access);

            /// <summary>[requires: ARB_bindless_texture]</summary>
            [AutoGenerated(Category = "ARB_bindless_texture", Version = "", EntryPoint = "glMakeTextureHandleNonResidentARB")]
            public static extern void MakeTextureHandleNonResident(Int64 handle);

            /// <summary>[requires: ARB_bindless_texture]</summary>
            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_bindless_texture", Version = "", EntryPoint = "glMakeTextureHandleNonResidentARB")]
            public static extern void MakeTextureHandleNonResident(UInt64 handle);

            /// <summary>[requires: ARB_bindless_texture]</summary>
            [AutoGenerated(Category = "ARB_bindless_texture", Version = "", EntryPoint = "glMakeTextureHandleResidentARB")]
            public static extern void MakeTextureHandleResident(Int64 handle);

            /// <summary>[requires: ARB_bindless_texture]</summary>
            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_bindless_texture", Version = "", EntryPoint = "glMakeTextureHandleResidentARB")]
            public static extern void MakeTextureHandleResident(UInt64 handle);

            /// <summary>[requires: ARB_sample_shading]
            /// Specifies minimum rate at which sample shaing takes place
            /// </summary>
            /// <param name="value">
            /// <para>
            /// Specifies the rate at which samples are shaded within each covered pixel.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "ARB_sample_shading", Version = "", EntryPoint = "glMinSampleShadingARB")]
            public static extern void MinSampleShading(Single value);

            /// <summary>[requires: ARB_indirect_parameters]</summary>
            [AutoGenerated(Category = "ARB_indirect_parameters", Version = "", EntryPoint = "glMultiDrawArraysIndirectCountARB")]
            public static extern void MultiDrawArraysIndirectCount(OpenTK.Graphics.OpenGL4.All mode, IntPtr indirect, IntPtr drawcount, Int32 maxdrawcount, Int32 stride);

            /// <summary>[requires: ARB_indirect_parameters]</summary>
            [AutoGenerated(Category = "ARB_indirect_parameters", Version = "", EntryPoint = "glMultiDrawElementsIndirectCountARB")]
            public static extern void MultiDrawElementsIndirectCount(OpenTK.Graphics.OpenGL4.All mode, OpenTK.Graphics.OpenGL4.All type, IntPtr indirect, IntPtr drawcount, Int32 maxdrawcount, Int32 stride);

            /// <summary>[requires: ARB_shading_language_include]</summary>
            [AutoGenerated(Category = "ARB_shading_language_include", Version = "", EntryPoint = "glNamedStringARB")]
            public static extern void NamedString(OpenTK.Graphics.OpenGL4.All type, Int32 namelen, String name, Int32 stringlen, String @string);

            /// <summary>[requires: ARB_bindless_texture]</summary>
            [AutoGenerated(Category = "ARB_bindless_texture", Version = "", EntryPoint = "glProgramUniformHandleui64ARB")]
            public static extern void ProgramUniformHandle(Int32 program, Int32 location, Int64 value);

            /// <summary>[requires: ARB_bindless_texture]</summary>
            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_bindless_texture", Version = "", EntryPoint = "glProgramUniformHandleui64ARB")]
            public static extern void ProgramUniformHandle(UInt32 program, Int32 location, UInt64 value);

            /// <summary>[requires: ARB_bindless_texture]</summary>
            [AutoGenerated(Category = "ARB_bindless_texture", Version = "", EntryPoint = "glProgramUniformHandleui64vARB")]
            public static extern void ProgramUniformHandle(Int32 program, Int32 location, Int32 count, Int64[] values);

            /// <summary>[requires: ARB_bindless_texture]</summary>
            [AutoGenerated(Category = "ARB_bindless_texture", Version = "", EntryPoint = "glProgramUniformHandleui64vARB")]
            public static extern void ProgramUniformHandle(Int32 program, Int32 location, Int32 count, ref Int64 values);

            /// <summary>[requires: ARB_bindless_texture]</summary>
            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_bindless_texture", Version = "", EntryPoint = "glProgramUniformHandleui64vARB")]
            public static extern unsafe void ProgramUniformHandle(Int32 program, Int32 location, Int32 count, Int64* values);

            /// <summary>[requires: ARB_bindless_texture]</summary>
            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_bindless_texture", Version = "", EntryPoint = "glProgramUniformHandleui64vARB")]
            public static extern void ProgramUniformHandle(UInt32 program, Int32 location, Int32 count, UInt64[] values);

            /// <summary>[requires: ARB_bindless_texture]</summary>
            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_bindless_texture", Version = "", EntryPoint = "glProgramUniformHandleui64vARB")]
            public static extern void ProgramUniformHandle(UInt32 program, Int32 location, Int32 count, ref UInt64 values);

            /// <summary>[requires: ARB_bindless_texture]</summary>
            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_bindless_texture", Version = "", EntryPoint = "glProgramUniformHandleui64vARB")]
            public static extern unsafe void ProgramUniformHandle(UInt32 program, Int32 location, Int32 count, UInt64* values);

            /// <summary>[requires: ARB_robustness]</summary>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glReadnPixelsARB")]
            public static extern void ReadnPixels(Int32 x, Int32 y, Int32 width, Int32 height, OpenTK.Graphics.OpenGL4.All format, OpenTK.Graphics.OpenGL4.All type, Int32 bufSize, [OutAttribute] IntPtr data);

            /// <summary>[requires: ARB_robustness]</summary>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glReadnPixelsARB")]
            public static extern void ReadnPixels<T7>(Int32 x, Int32 y, Int32 width, Int32 height, OpenTK.Graphics.OpenGL4.All format, OpenTK.Graphics.OpenGL4.All type, Int32 bufSize, [InAttribute, OutAttribute] T7[] data)
                where T7 : struct
            ;

            /// <summary>[requires: ARB_robustness]</summary>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glReadnPixelsARB")]
            public static extern void ReadnPixels<T7>(Int32 x, Int32 y, Int32 width, Int32 height, OpenTK.Graphics.OpenGL4.All format, OpenTK.Graphics.OpenGL4.All type, Int32 bufSize, [InAttribute, OutAttribute] T7[,] data)
                where T7 : struct
            ;

            /// <summary>[requires: ARB_robustness]</summary>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glReadnPixelsARB")]
            public static extern void ReadnPixels<T7>(Int32 x, Int32 y, Int32 width, Int32 height, OpenTK.Graphics.OpenGL4.All format, OpenTK.Graphics.OpenGL4.All type, Int32 bufSize, [InAttribute, OutAttribute] T7[,,] data)
                where T7 : struct
            ;

            /// <summary>[requires: ARB_robustness]</summary>
            [AutoGenerated(Category = "ARB_robustness", Version = "", EntryPoint = "glReadnPixelsARB")]
            public static extern void ReadnPixels<T7>(Int32 x, Int32 y, Int32 width, Int32 height, OpenTK.Graphics.OpenGL4.All format, OpenTK.Graphics.OpenGL4.All type, Int32 bufSize, [InAttribute, OutAttribute] ref T7 data)
                where T7 : struct
            ;

            /// <summary>[requires: ARB_sparse_texture]</summary>
            [AutoGenerated(Category = "ARB_sparse_texture", Version = "", EntryPoint = "glTexPageCommitmentARB")]
            public static extern void TexPageCommitment(OpenTK.Graphics.OpenGL4.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, bool resident);

            /// <summary>[requires: ARB_bindless_texture]</summary>
            [AutoGenerated(Category = "ARB_bindless_texture", Version = "", EntryPoint = "glUniformHandleui64ARB")]
            public static extern void UniformHandle(Int32 location, Int64 value);

            /// <summary>[requires: ARB_bindless_texture]</summary>
            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_bindless_texture", Version = "", EntryPoint = "glUniformHandleui64ARB")]
            public static extern void UniformHandle(Int32 location, UInt64 value);

            /// <summary>[requires: ARB_bindless_texture]</summary>
            [AutoGenerated(Category = "ARB_bindless_texture", Version = "", EntryPoint = "glUniformHandleui64vARB")]
            public static extern void UniformHandle(Int32 location, Int32 count, Int64[] value);

            /// <summary>[requires: ARB_bindless_texture]</summary>
            [AutoGenerated(Category = "ARB_bindless_texture", Version = "", EntryPoint = "glUniformHandleui64vARB")]
            public static extern void UniformHandle(Int32 location, Int32 count, ref Int64 value);

            /// <summary>[requires: ARB_bindless_texture]</summary>
            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_bindless_texture", Version = "", EntryPoint = "glUniformHandleui64vARB")]
            public static extern unsafe void UniformHandle(Int32 location, Int32 count, Int64* value);

            /// <summary>[requires: ARB_bindless_texture]</summary>
            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_bindless_texture", Version = "", EntryPoint = "glUniformHandleui64vARB")]
            public static extern void UniformHandle(Int32 location, Int32 count, UInt64[] value);

            /// <summary>[requires: ARB_bindless_texture]</summary>
            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_bindless_texture", Version = "", EntryPoint = "glUniformHandleui64vARB")]
            public static extern void UniformHandle(Int32 location, Int32 count, ref UInt64 value);

            /// <summary>[requires: ARB_bindless_texture]</summary>
            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_bindless_texture", Version = "", EntryPoint = "glUniformHandleui64vARB")]
            public static extern unsafe void UniformHandle(Int32 location, Int32 count, UInt64* value);

            /// <summary>[requires: ARB_bindless_texture]</summary>
            [AutoGenerated(Category = "ARB_bindless_texture", Version = "", EntryPoint = "glVertexAttribL1ui64ARB")]
            public static extern void VertexAttribL1(Int32 index, Int64 x);

            /// <summary>[requires: ARB_bindless_texture]</summary>
            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_bindless_texture", Version = "", EntryPoint = "glVertexAttribL1ui64ARB")]
            public static extern void VertexAttribL1(UInt32 index, UInt64 x);

            /// <summary>[requires: ARB_bindless_texture]</summary>
            [AutoGenerated(Category = "ARB_bindless_texture", Version = "", EntryPoint = "glVertexAttribL1ui64vARB")]
            public static extern void VertexAttribL1(Int32 index, Int64[] v);

            /// <summary>[requires: ARB_bindless_texture]</summary>
            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_bindless_texture", Version = "", EntryPoint = "glVertexAttribL1ui64vARB")]
            public static extern unsafe void VertexAttribL1(Int32 index, Int64* v);

            /// <summary>[requires: ARB_bindless_texture]</summary>
            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_bindless_texture", Version = "", EntryPoint = "glVertexAttribL1ui64vARB")]
            public static extern void VertexAttribL1(UInt32 index, UInt64[] v);

            /// <summary>[requires: ARB_bindless_texture]</summary>
            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ARB_bindless_texture", Version = "", EntryPoint = "glVertexAttribL1ui64vARB")]
            public static extern unsafe void VertexAttribL1(UInt32 index, UInt64* v);

        }

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Set the active program object for a program pipeline object
        /// </summary>
        /// <param name="pipeline">
        /// <para>
        /// Specifies the program pipeline object to set the active program object for.
        /// </para>
        /// </param>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to set as the active program pipeline object pipeline.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glActiveShaderProgram")]
        public static extern void ActiveShaderProgram(Int32 pipeline, Int32 program);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Set the active program object for a program pipeline object
        /// </summary>
        /// <param name="pipeline">
        /// <para>
        /// Specifies the program pipeline object to set the active program object for.
        /// </para>
        /// </param>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to set as the active program pipeline object pipeline.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glActiveShaderProgram")]
        public static extern void ActiveShaderProgram(UInt32 pipeline, UInt32 program);

        /// <summary>[requires: v1.3]
        /// Select active texture unit
        /// </summary>
        /// <param name="texture">
        /// <para>
        /// Specifies which texture unit to make active. The number of texture units is implementation dependent, but must be at least 80. texture must be one of GL_TEXTUREi, where i ranges from 0 (GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS - 1). The initial value is GL_TEXTURE0.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glActiveTexture")]
        public static extern void ActiveTexture(OpenTK.Graphics.OpenGL4.TextureUnit texture);

        /// <summary>[requires: v2.0]
        /// Attaches a shader object to a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to which a shader object will be attached.
        /// </para>
        /// </param>
        /// <param name="shader">
        /// <para>
        /// Specifies the shader object that is to be attached.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glAttachShader")]
        public static extern void AttachShader(Int32 program, Int32 shader);

        /// <summary>[requires: v2.0]
        /// Attaches a shader object to a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to which a shader object will be attached.
        /// </para>
        /// </param>
        /// <param name="shader">
        /// <para>
        /// Specifies the shader object that is to be attached.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glAttachShader")]
        public static extern void AttachShader(UInt32 program, UInt32 shader);

        /// <summary>[requires: v3.0]
        /// Start conditional rendering
        /// </summary>
        /// <param name="id">
        /// <para>
        /// Specifies the name of an occlusion query object whose results are used to determine if the rendering commands are discarded.
        /// </para>
        /// </param>
        /// <param name="mode">
        /// <para>
        /// Specifies how glBeginConditionalRender interprets the results of the occlusion query.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glBeginConditionalRender")]
        public static extern void BeginConditionalRender(Int32 id, OpenTK.Graphics.OpenGL4.ConditionalRenderType mode);

        /// <summary>[requires: v3.0]
        /// Start conditional rendering
        /// </summary>
        /// <param name="id">
        /// <para>
        /// Specifies the name of an occlusion query object whose results are used to determine if the rendering commands are discarded.
        /// </para>
        /// </param>
        /// <param name="mode">
        /// <para>
        /// Specifies how glBeginConditionalRender interprets the results of the occlusion query.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glBeginConditionalRender")]
        public static extern void BeginConditionalRender(UInt32 id, OpenTK.Graphics.OpenGL4.ConditionalRenderType mode);

        /// <summary>[requires: v1.5]
        /// Delimit the boundaries of a query object
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target type of query object established between glBeginQuery and the subsequent glEndQuery. The symbolic constant must be one of GL_SAMPLES_PASSED, GL_ANY_SAMPLES_PASSED, GL_ANY_SAMPLES_PASSED_CONSERVATIVE, GL_PRIMITIVES_GENERATED, GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN, or GL_TIME_ELAPSED.
        /// </para>
        /// </param>
        /// <param name="id">
        /// <para>
        /// Specifies the name of a query object.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glBeginQuery")]
        public static extern void BeginQuery(OpenTK.Graphics.OpenGL4.QueryTarget target, Int32 id);

        /// <summary>[requires: v1.5]
        /// Delimit the boundaries of a query object
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target type of query object established between glBeginQuery and the subsequent glEndQuery. The symbolic constant must be one of GL_SAMPLES_PASSED, GL_ANY_SAMPLES_PASSED, GL_ANY_SAMPLES_PASSED_CONSERVATIVE, GL_PRIMITIVES_GENERATED, GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN, or GL_TIME_ELAPSED.
        /// </para>
        /// </param>
        /// <param name="id">
        /// <para>
        /// Specifies the name of a query object.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glBeginQuery")]
        public static extern void BeginQuery(OpenTK.Graphics.OpenGL4.QueryTarget target, UInt32 id);

        /// <summary>[requires: v4.0 and ARB_transform_feedback3|VERSION_4_0]
        /// Delimit the boundaries of a query object on an indexed target
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target type of query object established between glBeginQueryIndexed and the subsequent glEndQueryIndexed. The symbolic constant must be one of GL_SAMPLES_PASSED, GL_ANY_SAMPLES_PASSED, GL_PRIMITIVES_GENERATED, GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN, or GL_TIME_ELAPSED.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the query target upon which to begin the query.
        /// </para>
        /// </param>
        /// <param name="id">
        /// <para>
        /// Specifies the name of a query object.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_transform_feedback3|VERSION_4_0", Version = "4.0", EntryPoint = "glBeginQueryIndexed")]
        public static extern void BeginQueryIndexed(OpenTK.Graphics.OpenGL4.QueryTarget target, Int32 index, Int32 id);

        /// <summary>[requires: v4.0 and ARB_transform_feedback3|VERSION_4_0]
        /// Delimit the boundaries of a query object on an indexed target
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target type of query object established between glBeginQueryIndexed and the subsequent glEndQueryIndexed. The symbolic constant must be one of GL_SAMPLES_PASSED, GL_ANY_SAMPLES_PASSED, GL_PRIMITIVES_GENERATED, GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN, or GL_TIME_ELAPSED.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the query target upon which to begin the query.
        /// </para>
        /// </param>
        /// <param name="id">
        /// <para>
        /// Specifies the name of a query object.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_transform_feedback3|VERSION_4_0", Version = "4.0", EntryPoint = "glBeginQueryIndexed")]
        public static extern void BeginQueryIndexed(OpenTK.Graphics.OpenGL4.QueryTarget target, UInt32 index, UInt32 id);

        /// <summary>[requires: v3.0]
        /// Start transform feedback operation
        /// </summary>
        /// <param name="primitiveMode">
        /// <para>
        /// Specify the output type of the primitives that will be recorded into the buffer objects that are bound for transform feedback.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glBeginTransformFeedback")]
        public static extern void BeginTransformFeedback(OpenTK.Graphics.OpenGL4.TransformFeedbackPrimitiveType primitiveMode);

        /// <summary>[requires: v2.0]
        /// Associates a generic vertex attribute index with a named attribute variable
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program object in which the association is to be made.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be bound.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// Specifies a null terminated string containing the name of the vertex shader attribute variable to which index is to be bound.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glBindAttribLocation")]
        public static extern void BindAttribLocation(Int32 program, Int32 index, String name);

        /// <summary>[requires: v2.0]
        /// Associates a generic vertex attribute index with a named attribute variable
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program object in which the association is to be made.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be bound.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// Specifies a null terminated string containing the name of the vertex shader attribute variable to which index is to be bound.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glBindAttribLocation")]
        public static extern void BindAttribLocation(UInt32 program, UInt32 index, String name);

        /// <summary>[requires: v1.5]
        /// Bind a named buffer object
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target to which the buffer object is bound. The symbolic constant must be GL_ARRAY_BUFFER, GL_ATOMIC_COUNTER_BUFFER, GL_COPY_READ_BUFFER, GL_COPY_WRITE_BUFFER, GL_DRAW_INDIRECT_BUFFER, GL_DISPATCH_INDIRECT_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, GL_PIXEL_UNPACK_BUFFER, GL_QUERY_BUFFER, GL_SHADER_STORAGE_BUFFER, GL_TEXTURE_BUFFER, GL_TRANSFORM_FEEDBACK_BUFFER, or GL_UNIFORM_BUFFER.
        /// </para>
        /// </param>
        /// <param name="buffer">
        /// <para>
        /// Specifies the name of a buffer object.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glBindBuffer")]
        public static extern void BindBuffer(OpenTK.Graphics.OpenGL4.BufferTarget target, Int32 buffer);

        /// <summary>[requires: v1.5]
        /// Bind a named buffer object
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target to which the buffer object is bound. The symbolic constant must be GL_ARRAY_BUFFER, GL_ATOMIC_COUNTER_BUFFER, GL_COPY_READ_BUFFER, GL_COPY_WRITE_BUFFER, GL_DRAW_INDIRECT_BUFFER, GL_DISPATCH_INDIRECT_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, GL_PIXEL_UNPACK_BUFFER, GL_QUERY_BUFFER, GL_SHADER_STORAGE_BUFFER, GL_TEXTURE_BUFFER, GL_TRANSFORM_FEEDBACK_BUFFER, or GL_UNIFORM_BUFFER.
        /// </para>
        /// </param>
        /// <param name="buffer">
        /// <para>
        /// Specifies the name of a buffer object.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glBindBuffer")]
        public static extern void BindBuffer(OpenTK.Graphics.OpenGL4.BufferTarget target, UInt32 buffer);

        /// <summary>[requires: v3.0]
        /// Bind a buffer object to an indexed buffer target
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specify the target of the bind operation. target must be one of GL_ATOMIC_COUNTER_BUFFER, GL_TRANSFORM_FEEDBACK_BUFFER, GL_UNIFORM_BUFFER or GL_SHADER_STORAGE_BUFFER.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// Specify the index of the binding point within the array specified by target.
        /// </para>
        /// </param>
        /// <param name="buffer">
        /// <para>
        /// The name of a buffer object to bind to the specified binding point.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glBindBufferBase")]
        public static extern void BindBufferBase(OpenTK.Graphics.OpenGL4.BufferRangeTarget target, Int32 index, Int32 buffer);

        /// <summary>[requires: v3.0]
        /// Bind a buffer object to an indexed buffer target
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specify the target of the bind operation. target must be one of GL_ATOMIC_COUNTER_BUFFER, GL_TRANSFORM_FEEDBACK_BUFFER, GL_UNIFORM_BUFFER or GL_SHADER_STORAGE_BUFFER.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// Specify the index of the binding point within the array specified by target.
        /// </para>
        /// </param>
        /// <param name="buffer">
        /// <para>
        /// The name of a buffer object to bind to the specified binding point.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glBindBufferBase")]
        public static extern void BindBufferBase(OpenTK.Graphics.OpenGL4.BufferRangeTarget target, UInt32 index, UInt32 buffer);

        /// <summary>[requires: v3.0]
        /// Bind a range within a buffer object to an indexed buffer target
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specify the target of the bind operation. target must be one of GL_ATOMIC_COUNTER_BUFFER, GL_TRANSFORM_FEEDBACK_BUFFER, GL_UNIFORM_BUFFER, or GL_SHADER_STORAGE_BUFFER.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// Specify the index of the binding point within the array specified by target.
        /// </para>
        /// </param>
        /// <param name="buffer">
        /// <para>
        /// The name of a buffer object to bind to the specified binding point.
        /// </para>
        /// </param>
        /// <param name="offset">
        /// <para>
        /// The starting offset in basic machine units into the buffer object buffer.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// The amount of data in machine units that can be read from the buffet object while used as an indexed target.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glBindBufferRange")]
        public static extern void BindBufferRange(OpenTK.Graphics.OpenGL4.BufferRangeTarget target, Int32 index, Int32 buffer, IntPtr offset, IntPtr size);

        /// <summary>[requires: v3.0]
        /// Bind a range within a buffer object to an indexed buffer target
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specify the target of the bind operation. target must be one of GL_ATOMIC_COUNTER_BUFFER, GL_TRANSFORM_FEEDBACK_BUFFER, GL_UNIFORM_BUFFER, or GL_SHADER_STORAGE_BUFFER.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// Specify the index of the binding point within the array specified by target.
        /// </para>
        /// </param>
        /// <param name="buffer">
        /// <para>
        /// The name of a buffer object to bind to the specified binding point.
        /// </para>
        /// </param>
        /// <param name="offset">
        /// <para>
        /// The starting offset in basic machine units into the buffer object buffer.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// The amount of data in machine units that can be read from the buffet object while used as an indexed target.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glBindBufferRange")]
        public static extern void BindBufferRange(OpenTK.Graphics.OpenGL4.BufferRangeTarget target, UInt32 index, UInt32 buffer, IntPtr offset, IntPtr size);

        /// <summary>[requires: v4.4 and ARB_multi_bind|VERSION_4_4]
        /// Bind one or more buffer objects to a sequence of indexed buffer targets
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specify the target of the bind operation. target must be one of GL_ATOMIC_COUNTER_BUFFER, GL_TRANSFORM_FEEDBACK_BUFFER, GL_UNIFORM_BUFFER or GL_SHADER_STORAGE_BUFFER.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// Specify the index of the first binding point within the array specified by target.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specify the number of contiguous binding points to which to bind buffers.
        /// </para>
        /// </param>
        /// <param name="buffers">
        /// <para>
        /// A pointer to an array of names of buffer objects to bind to the targets on the specified binding point, or NULL.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_multi_bind|VERSION_4_4", Version = "4.4", EntryPoint = "glBindBuffersBase")]
        public static extern void BindBuffersBase(OpenTK.Graphics.OpenGL4.BufferRangeTarget target, Int32 first, Int32 count, Int32[] buffers);

        /// <summary>[requires: v4.4 and ARB_multi_bind|VERSION_4_4]
        /// Bind one or more buffer objects to a sequence of indexed buffer targets
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specify the target of the bind operation. target must be one of GL_ATOMIC_COUNTER_BUFFER, GL_TRANSFORM_FEEDBACK_BUFFER, GL_UNIFORM_BUFFER or GL_SHADER_STORAGE_BUFFER.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// Specify the index of the first binding point within the array specified by target.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specify the number of contiguous binding points to which to bind buffers.
        /// </para>
        /// </param>
        /// <param name="buffers">
        /// <para>
        /// A pointer to an array of names of buffer objects to bind to the targets on the specified binding point, or NULL.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_multi_bind|VERSION_4_4", Version = "4.4", EntryPoint = "glBindBuffersBase")]
        public static extern void BindBuffersBase(OpenTK.Graphics.OpenGL4.BufferRangeTarget target, Int32 first, Int32 count, ref Int32 buffers);

        /// <summary>[requires: v4.4 and ARB_multi_bind|VERSION_4_4]
        /// Bind one or more buffer objects to a sequence of indexed buffer targets
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specify the target of the bind operation. target must be one of GL_ATOMIC_COUNTER_BUFFER, GL_TRANSFORM_FEEDBACK_BUFFER, GL_UNIFORM_BUFFER or GL_SHADER_STORAGE_BUFFER.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// Specify the index of the first binding point within the array specified by target.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specify the number of contiguous binding points to which to bind buffers.
        /// </para>
        /// </param>
        /// <param name="buffers">
        /// <para>
        /// A pointer to an array of names of buffer objects to bind to the targets on the specified binding point, or NULL.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_multi_bind|VERSION_4_4", Version = "4.4", EntryPoint = "glBindBuffersBase")]
        public static extern unsafe void BindBuffersBase(OpenTK.Graphics.OpenGL4.BufferRangeTarget target, Int32 first, Int32 count, Int32* buffers);

        /// <summary>[requires: v4.4 and ARB_multi_bind|VERSION_4_4]
        /// Bind one or more buffer objects to a sequence of indexed buffer targets
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specify the target of the bind operation. target must be one of GL_ATOMIC_COUNTER_BUFFER, GL_TRANSFORM_FEEDBACK_BUFFER, GL_UNIFORM_BUFFER or GL_SHADER_STORAGE_BUFFER.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// Specify the index of the first binding point within the array specified by target.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specify the number of contiguous binding points to which to bind buffers.
        /// </para>
        /// </param>
        /// <param name="buffers">
        /// <para>
        /// A pointer to an array of names of buffer objects to bind to the targets on the specified binding point, or NULL.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_multi_bind|VERSION_4_4", Version = "4.4", EntryPoint = "glBindBuffersBase")]
        public static extern void BindBuffersBase(OpenTK.Graphics.OpenGL4.BufferRangeTarget target, UInt32 first, Int32 count, UInt32[] buffers);

        /// <summary>[requires: v4.4 and ARB_multi_bind|VERSION_4_4]
        /// Bind one or more buffer objects to a sequence of indexed buffer targets
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specify the target of the bind operation. target must be one of GL_ATOMIC_COUNTER_BUFFER, GL_TRANSFORM_FEEDBACK_BUFFER, GL_UNIFORM_BUFFER or GL_SHADER_STORAGE_BUFFER.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// Specify the index of the first binding point within the array specified by target.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specify the number of contiguous binding points to which to bind buffers.
        /// </para>
        /// </param>
        /// <param name="buffers">
        /// <para>
        /// A pointer to an array of names of buffer objects to bind to the targets on the specified binding point, or NULL.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_multi_bind|VERSION_4_4", Version = "4.4", EntryPoint = "glBindBuffersBase")]
        public static extern void BindBuffersBase(OpenTK.Graphics.OpenGL4.BufferRangeTarget target, UInt32 first, Int32 count, ref UInt32 buffers);

        /// <summary>[requires: v4.4 and ARB_multi_bind|VERSION_4_4]
        /// Bind one or more buffer objects to a sequence of indexed buffer targets
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specify the target of the bind operation. target must be one of GL_ATOMIC_COUNTER_BUFFER, GL_TRANSFORM_FEEDBACK_BUFFER, GL_UNIFORM_BUFFER or GL_SHADER_STORAGE_BUFFER.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// Specify the index of the first binding point within the array specified by target.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specify the number of contiguous binding points to which to bind buffers.
        /// </para>
        /// </param>
        /// <param name="buffers">
        /// <para>
        /// A pointer to an array of names of buffer objects to bind to the targets on the specified binding point, or NULL.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_multi_bind|VERSION_4_4", Version = "4.4", EntryPoint = "glBindBuffersBase")]
        public static extern unsafe void BindBuffersBase(OpenTK.Graphics.OpenGL4.BufferRangeTarget target, UInt32 first, Int32 count, UInt32* buffers);

        /// <summary>[requires: v4.4 and ARB_multi_bind|VERSION_4_4]
        /// Bind ranges of one or more buffer objects to a sequence of indexed buffer targets
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specify the target of the bind operation. target must be one of GL_ATOMIC_COUNTER_BUFFER, GL_TRANSFORM_FEEDBACK_BUFFER, GL_UNIFORM_BUFFER or GL_SHADER_STORAGE_BUFFER.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// Specify the index of the first binding point within the array specified by target.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specify the number of contiguous binding points to which to bind buffers.
        /// </para>
        /// </param>
        /// <param name="buffers">
        /// <para>
        /// A pointer to an array of names of buffer objects to bind to the targets on the specified binding point, or NULL.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_multi_bind|VERSION_4_4", Version = "4.4", EntryPoint = "glBindBuffersRange")]
        public static extern void BindBuffersRange(OpenTK.Graphics.OpenGL4.BufferRangeTarget target, Int32 first, Int32 count, Int32[] buffers, IntPtr[] offsets, IntPtr[] sizes);

        /// <summary>[requires: v4.4 and ARB_multi_bind|VERSION_4_4]
        /// Bind ranges of one or more buffer objects to a sequence of indexed buffer targets
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specify the target of the bind operation. target must be one of GL_ATOMIC_COUNTER_BUFFER, GL_TRANSFORM_FEEDBACK_BUFFER, GL_UNIFORM_BUFFER or GL_SHADER_STORAGE_BUFFER.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// Specify the index of the first binding point within the array specified by target.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specify the number of contiguous binding points to which to bind buffers.
        /// </para>
        /// </param>
        /// <param name="buffers">
        /// <para>
        /// A pointer to an array of names of buffer objects to bind to the targets on the specified binding point, or NULL.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_multi_bind|VERSION_4_4", Version = "4.4", EntryPoint = "glBindBuffersRange")]
        public static extern void BindBuffersRange(OpenTK.Graphics.OpenGL4.BufferRangeTarget target, Int32 first, Int32 count, ref Int32 buffers, ref IntPtr offsets, ref IntPtr sizes);

        /// <summary>[requires: v4.4 and ARB_multi_bind|VERSION_4_4]
        /// Bind ranges of one or more buffer objects to a sequence of indexed buffer targets
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specify the target of the bind operation. target must be one of GL_ATOMIC_COUNTER_BUFFER, GL_TRANSFORM_FEEDBACK_BUFFER, GL_UNIFORM_BUFFER or GL_SHADER_STORAGE_BUFFER.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// Specify the index of the first binding point within the array specified by target.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specify the number of contiguous binding points to which to bind buffers.
        /// </para>
        /// </param>
        /// <param name="buffers">
        /// <para>
        /// A pointer to an array of names of buffer objects to bind to the targets on the specified binding point, or NULL.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_multi_bind|VERSION_4_4", Version = "4.4", EntryPoint = "glBindBuffersRange")]
        public static extern unsafe void BindBuffersRange(OpenTK.Graphics.OpenGL4.BufferRangeTarget target, Int32 first, Int32 count, Int32* buffers, IntPtr* offsets, IntPtr* sizes);

        /// <summary>[requires: v4.4 and ARB_multi_bind|VERSION_4_4]
        /// Bind ranges of one or more buffer objects to a sequence of indexed buffer targets
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specify the target of the bind operation. target must be one of GL_ATOMIC_COUNTER_BUFFER, GL_TRANSFORM_FEEDBACK_BUFFER, GL_UNIFORM_BUFFER or GL_SHADER_STORAGE_BUFFER.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// Specify the index of the first binding point within the array specified by target.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specify the number of contiguous binding points to which to bind buffers.
        /// </para>
        /// </param>
        /// <param name="buffers">
        /// <para>
        /// A pointer to an array of names of buffer objects to bind to the targets on the specified binding point, or NULL.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_multi_bind|VERSION_4_4", Version = "4.4", EntryPoint = "glBindBuffersRange")]
        public static extern void BindBuffersRange(OpenTK.Graphics.OpenGL4.BufferRangeTarget target, UInt32 first, Int32 count, UInt32[] buffers, IntPtr[] offsets, IntPtr[] sizes);

        /// <summary>[requires: v4.4 and ARB_multi_bind|VERSION_4_4]
        /// Bind ranges of one or more buffer objects to a sequence of indexed buffer targets
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specify the target of the bind operation. target must be one of GL_ATOMIC_COUNTER_BUFFER, GL_TRANSFORM_FEEDBACK_BUFFER, GL_UNIFORM_BUFFER or GL_SHADER_STORAGE_BUFFER.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// Specify the index of the first binding point within the array specified by target.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specify the number of contiguous binding points to which to bind buffers.
        /// </para>
        /// </param>
        /// <param name="buffers">
        /// <para>
        /// A pointer to an array of names of buffer objects to bind to the targets on the specified binding point, or NULL.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_multi_bind|VERSION_4_4", Version = "4.4", EntryPoint = "glBindBuffersRange")]
        public static extern void BindBuffersRange(OpenTK.Graphics.OpenGL4.BufferRangeTarget target, UInt32 first, Int32 count, ref UInt32 buffers, ref IntPtr offsets, ref IntPtr sizes);

        /// <summary>[requires: v4.4 and ARB_multi_bind|VERSION_4_4]
        /// Bind ranges of one or more buffer objects to a sequence of indexed buffer targets
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specify the target of the bind operation. target must be one of GL_ATOMIC_COUNTER_BUFFER, GL_TRANSFORM_FEEDBACK_BUFFER, GL_UNIFORM_BUFFER or GL_SHADER_STORAGE_BUFFER.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// Specify the index of the first binding point within the array specified by target.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specify the number of contiguous binding points to which to bind buffers.
        /// </para>
        /// </param>
        /// <param name="buffers">
        /// <para>
        /// A pointer to an array of names of buffer objects to bind to the targets on the specified binding point, or NULL.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_multi_bind|VERSION_4_4", Version = "4.4", EntryPoint = "glBindBuffersRange")]
        public static extern unsafe void BindBuffersRange(OpenTK.Graphics.OpenGL4.BufferRangeTarget target, UInt32 first, Int32 count, UInt32* buffers, IntPtr* offsets, IntPtr* sizes);

        /// <summary>[requires: v3.0]
        /// Bind a user-defined varying out variable to a fragment shader color number
        /// </summary>
        /// <param name="program">
        /// <para>
        /// The name of the program containing varying out variable whose binding to modify
        /// </para>
        /// </param>
        /// <param name="colorNumber">
        /// <para>
        /// The color number to bind the user-defined varying out variable to
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// The name of the user-defined varying out variable whose binding to modify
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glBindFragDataLocation")]
        public static extern void BindFragDataLocation(Int32 program, Int32 color, String name);

        /// <summary>[requires: v3.0]
        /// Bind a user-defined varying out variable to a fragment shader color number
        /// </summary>
        /// <param name="program">
        /// <para>
        /// The name of the program containing varying out variable whose binding to modify
        /// </para>
        /// </param>
        /// <param name="colorNumber">
        /// <para>
        /// The color number to bind the user-defined varying out variable to
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// The name of the user-defined varying out variable whose binding to modify
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glBindFragDataLocation")]
        public static extern void BindFragDataLocation(UInt32 program, UInt32 color, String name);

        /// <summary>[requires: v3.3 and ARB_blend_func_extended|VERSION_3_3]
        /// Bind a user-defined varying out variable to a fragment shader color number and index
        /// </summary>
        /// <param name="program">
        /// <para>
        /// The name of the program containing varying out variable whose binding to modify
        /// </para>
        /// </param>
        /// <param name="colorNumber">
        /// <para>
        /// The color number to bind the user-defined varying out variable to
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// The index of the color input to bind the user-defined varying out variable to
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// The name of the user-defined varying out variable whose binding to modify
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_blend_func_extended|VERSION_3_3", Version = "3.3", EntryPoint = "glBindFragDataLocationIndexed")]
        public static extern void BindFragDataLocationIndexed(Int32 program, Int32 colorNumber, Int32 index, String name);

        /// <summary>[requires: v3.3 and ARB_blend_func_extended|VERSION_3_3]
        /// Bind a user-defined varying out variable to a fragment shader color number and index
        /// </summary>
        /// <param name="program">
        /// <para>
        /// The name of the program containing varying out variable whose binding to modify
        /// </para>
        /// </param>
        /// <param name="colorNumber">
        /// <para>
        /// The color number to bind the user-defined varying out variable to
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// The index of the color input to bind the user-defined varying out variable to
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// The name of the user-defined varying out variable whose binding to modify
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_blend_func_extended|VERSION_3_3", Version = "3.3", EntryPoint = "glBindFragDataLocationIndexed")]
        public static extern void BindFragDataLocationIndexed(UInt32 program, UInt32 colorNumber, UInt32 index, String name);

        /// <summary>[requires: v3.0 and ARB_framebuffer_object|VERSION_3_0]
        /// Bind a framebuffer to a framebuffer target
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the framebuffer target of the binding operation.
        /// </para>
        /// </param>
        /// <param name="framebuffer">
        /// <para>
        /// Specifies the name of the framebuffer object to bind.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glBindFramebuffer")]
        public static extern void BindFramebuffer(OpenTK.Graphics.OpenGL4.FramebufferTarget target, Int32 framebuffer);

        /// <summary>[requires: v3.0 and ARB_framebuffer_object|VERSION_3_0]
        /// Bind a framebuffer to a framebuffer target
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the framebuffer target of the binding operation.
        /// </para>
        /// </param>
        /// <param name="framebuffer">
        /// <para>
        /// Specifies the name of the framebuffer object to bind.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glBindFramebuffer")]
        public static extern void BindFramebuffer(OpenTK.Graphics.OpenGL4.FramebufferTarget target, UInt32 framebuffer);

        /// <summary>[requires: v4.2 and ARB_shader_image_load_store|VERSION_4_2]
        /// Bind a level of a texture to an image unit
        /// </summary>
        /// <param name="unit">
        /// <para>
        /// Specifies the index of the image unit to which to bind the texture
        /// </para>
        /// </param>
        /// <param name="texture">
        /// <para>
        /// Specifies the name of the texture to bind to the image unit.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level of the texture that is to be bound.
        /// </para>
        /// </param>
        /// <param name="layered">
        /// <para>
        /// Specifies whether a layered texture binding is to be established.
        /// </para>
        /// </param>
        /// <param name="layer">
        /// <para>
        /// If layered is GL_FALSE, specifies the layer of texture to be bound to the image unit. Ignored otherwise.
        /// </para>
        /// </param>
        /// <param name="access">
        /// <para>
        /// Specifies a token indicating the type of access that will be performed on the image.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format that the elements of the image will be treated as for the purposes of formatted stores.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_shader_image_load_store|VERSION_4_2", Version = "4.2", EntryPoint = "glBindImageTexture")]
        public static extern void BindImageTexture(Int32 unit, Int32 texture, Int32 level, bool layered, Int32 layer, OpenTK.Graphics.OpenGL4.TextureAccess access, OpenTK.Graphics.OpenGL4.SizedInternalFormat format);

        /// <summary>[requires: v4.2 and ARB_shader_image_load_store|VERSION_4_2]
        /// Bind a level of a texture to an image unit
        /// </summary>
        /// <param name="unit">
        /// <para>
        /// Specifies the index of the image unit to which to bind the texture
        /// </para>
        /// </param>
        /// <param name="texture">
        /// <para>
        /// Specifies the name of the texture to bind to the image unit.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level of the texture that is to be bound.
        /// </para>
        /// </param>
        /// <param name="layered">
        /// <para>
        /// Specifies whether a layered texture binding is to be established.
        /// </para>
        /// </param>
        /// <param name="layer">
        /// <para>
        /// If layered is GL_FALSE, specifies the layer of texture to be bound to the image unit. Ignored otherwise.
        /// </para>
        /// </param>
        /// <param name="access">
        /// <para>
        /// Specifies a token indicating the type of access that will be performed on the image.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format that the elements of the image will be treated as for the purposes of formatted stores.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_shader_image_load_store|VERSION_4_2", Version = "4.2", EntryPoint = "glBindImageTexture")]
        public static extern void BindImageTexture(UInt32 unit, UInt32 texture, Int32 level, bool layered, Int32 layer, OpenTK.Graphics.OpenGL4.TextureAccess access, OpenTK.Graphics.OpenGL4.SizedInternalFormat format);

        /// <summary>[requires: v4.4 and ARB_multi_bind|VERSION_4_4]
        /// Bind one or more named texture images to a sequence of consecutive image units
        /// </summary>
        /// <param name="first">
        /// <para>
        /// Specifies the first image unit to which a texture is to be bound.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of textures to bind.
        /// </para>
        /// </param>
        /// <param name="textures">
        /// <para>
        /// Specifies the address of an array of names of existing texture objects.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_multi_bind|VERSION_4_4", Version = "4.4", EntryPoint = "glBindImageTextures")]
        public static extern void BindImageTextures(Int32 first, Int32 count, Int32[] textures);

        /// <summary>[requires: v4.4 and ARB_multi_bind|VERSION_4_4]
        /// Bind one or more named texture images to a sequence of consecutive image units
        /// </summary>
        /// <param name="first">
        /// <para>
        /// Specifies the first image unit to which a texture is to be bound.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of textures to bind.
        /// </para>
        /// </param>
        /// <param name="textures">
        /// <para>
        /// Specifies the address of an array of names of existing texture objects.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_multi_bind|VERSION_4_4", Version = "4.4", EntryPoint = "glBindImageTextures")]
        public static extern void BindImageTextures(Int32 first, Int32 count, ref Int32 textures);

        /// <summary>[requires: v4.4 and ARB_multi_bind|VERSION_4_4]
        /// Bind one or more named texture images to a sequence of consecutive image units
        /// </summary>
        /// <param name="first">
        /// <para>
        /// Specifies the first image unit to which a texture is to be bound.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of textures to bind.
        /// </para>
        /// </param>
        /// <param name="textures">
        /// <para>
        /// Specifies the address of an array of names of existing texture objects.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_multi_bind|VERSION_4_4", Version = "4.4", EntryPoint = "glBindImageTextures")]
        public static extern unsafe void BindImageTextures(Int32 first, Int32 count, Int32* textures);

        /// <summary>[requires: v4.4 and ARB_multi_bind|VERSION_4_4]
        /// Bind one or more named texture images to a sequence of consecutive image units
        /// </summary>
        /// <param name="first">
        /// <para>
        /// Specifies the first image unit to which a texture is to be bound.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of textures to bind.
        /// </para>
        /// </param>
        /// <param name="textures">
        /// <para>
        /// Specifies the address of an array of names of existing texture objects.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_multi_bind|VERSION_4_4", Version = "4.4", EntryPoint = "glBindImageTextures")]
        public static extern void BindImageTextures(UInt32 first, Int32 count, UInt32[] textures);

        /// <summary>[requires: v4.4 and ARB_multi_bind|VERSION_4_4]
        /// Bind one or more named texture images to a sequence of consecutive image units
        /// </summary>
        /// <param name="first">
        /// <para>
        /// Specifies the first image unit to which a texture is to be bound.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of textures to bind.
        /// </para>
        /// </param>
        /// <param name="textures">
        /// <para>
        /// Specifies the address of an array of names of existing texture objects.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_multi_bind|VERSION_4_4", Version = "4.4", EntryPoint = "glBindImageTextures")]
        public static extern void BindImageTextures(UInt32 first, Int32 count, ref UInt32 textures);

        /// <summary>[requires: v4.4 and ARB_multi_bind|VERSION_4_4]
        /// Bind one or more named texture images to a sequence of consecutive image units
        /// </summary>
        /// <param name="first">
        /// <para>
        /// Specifies the first image unit to which a texture is to be bound.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of textures to bind.
        /// </para>
        /// </param>
        /// <param name="textures">
        /// <para>
        /// Specifies the address of an array of names of existing texture objects.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_multi_bind|VERSION_4_4", Version = "4.4", EntryPoint = "glBindImageTextures")]
        public static extern unsafe void BindImageTextures(UInt32 first, Int32 count, UInt32* textures);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Bind a program pipeline to the current context
        /// </summary>
        /// <param name="pipeline">
        /// <para>
        /// Specifies the name of the pipeline object to bind to the context.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glBindProgramPipeline")]
        public static extern void BindProgramPipeline(Int32 pipeline);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Bind a program pipeline to the current context
        /// </summary>
        /// <param name="pipeline">
        /// <para>
        /// Specifies the name of the pipeline object to bind to the context.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glBindProgramPipeline")]
        public static extern void BindProgramPipeline(UInt32 pipeline);

        /// <summary>[requires: v3.0 and ARB_framebuffer_object|VERSION_3_0]
        /// Bind a renderbuffer to a renderbuffer target
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the renderbuffer target of the binding operation. target must be GL_RENDERBUFFER.
        /// </para>
        /// </param>
        /// <param name="renderbuffer">
        /// <para>
        /// Specifies the name of the renderbuffer object to bind.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glBindRenderbuffer")]
        public static extern void BindRenderbuffer(OpenTK.Graphics.OpenGL4.RenderbufferTarget target, Int32 renderbuffer);

        /// <summary>[requires: v3.0 and ARB_framebuffer_object|VERSION_3_0]
        /// Bind a renderbuffer to a renderbuffer target
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the renderbuffer target of the binding operation. target must be GL_RENDERBUFFER.
        /// </para>
        /// </param>
        /// <param name="renderbuffer">
        /// <para>
        /// Specifies the name of the renderbuffer object to bind.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glBindRenderbuffer")]
        public static extern void BindRenderbuffer(OpenTK.Graphics.OpenGL4.RenderbufferTarget target, UInt32 renderbuffer);

        /// <summary>[requires: v3.3 and ARB_sampler_objects|VERSION_3_3]
        /// Bind a named sampler to a texturing target
        /// </summary>
        /// <param name="unit">
        /// <para>
        /// Specifies the index of the texture unit to which the sampler is bound.
        /// </para>
        /// </param>
        /// <param name="sampler">
        /// <para>
        /// Specifies the name of a sampler.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glBindSampler")]
        public static extern void BindSampler(Int32 unit, Int32 sampler);

        /// <summary>[requires: v3.3 and ARB_sampler_objects|VERSION_3_3]
        /// Bind a named sampler to a texturing target
        /// </summary>
        /// <param name="unit">
        /// <para>
        /// Specifies the index of the texture unit to which the sampler is bound.
        /// </para>
        /// </param>
        /// <param name="sampler">
        /// <para>
        /// Specifies the name of a sampler.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glBindSampler")]
        public static extern void BindSampler(UInt32 unit, UInt32 sampler);

        /// <summary>[requires: v4.4 and ARB_multi_bind|VERSION_4_4]
        /// Bind one or more named sampler objects to a sequence of consecutive sampler units
        /// </summary>
        /// <param name="first">
        /// <para>
        /// Specifies the first sampler unit to which a sampler object is to be bound.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of samplers to bind.
        /// </para>
        /// </param>
        /// <param name="samplers">
        /// <para>
        /// Specifies the address of an array of names of existing sampler objects.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_multi_bind|VERSION_4_4", Version = "4.4", EntryPoint = "glBindSamplers")]
        public static extern void BindSamplers(Int32 first, Int32 count, Int32[] samplers);

        /// <summary>[requires: v4.4 and ARB_multi_bind|VERSION_4_4]
        /// Bind one or more named sampler objects to a sequence of consecutive sampler units
        /// </summary>
        /// <param name="first">
        /// <para>
        /// Specifies the first sampler unit to which a sampler object is to be bound.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of samplers to bind.
        /// </para>
        /// </param>
        /// <param name="samplers">
        /// <para>
        /// Specifies the address of an array of names of existing sampler objects.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_multi_bind|VERSION_4_4", Version = "4.4", EntryPoint = "glBindSamplers")]
        public static extern void BindSamplers(Int32 first, Int32 count, ref Int32 samplers);

        /// <summary>[requires: v4.4 and ARB_multi_bind|VERSION_4_4]
        /// Bind one or more named sampler objects to a sequence of consecutive sampler units
        /// </summary>
        /// <param name="first">
        /// <para>
        /// Specifies the first sampler unit to which a sampler object is to be bound.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of samplers to bind.
        /// </para>
        /// </param>
        /// <param name="samplers">
        /// <para>
        /// Specifies the address of an array of names of existing sampler objects.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_multi_bind|VERSION_4_4", Version = "4.4", EntryPoint = "glBindSamplers")]
        public static extern unsafe void BindSamplers(Int32 first, Int32 count, Int32* samplers);

        /// <summary>[requires: v4.4 and ARB_multi_bind|VERSION_4_4]
        /// Bind one or more named sampler objects to a sequence of consecutive sampler units
        /// </summary>
        /// <param name="first">
        /// <para>
        /// Specifies the first sampler unit to which a sampler object is to be bound.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of samplers to bind.
        /// </para>
        /// </param>
        /// <param name="samplers">
        /// <para>
        /// Specifies the address of an array of names of existing sampler objects.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_multi_bind|VERSION_4_4", Version = "4.4", EntryPoint = "glBindSamplers")]
        public static extern void BindSamplers(UInt32 first, Int32 count, UInt32[] samplers);

        /// <summary>[requires: v4.4 and ARB_multi_bind|VERSION_4_4]
        /// Bind one or more named sampler objects to a sequence of consecutive sampler units
        /// </summary>
        /// <param name="first">
        /// <para>
        /// Specifies the first sampler unit to which a sampler object is to be bound.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of samplers to bind.
        /// </para>
        /// </param>
        /// <param name="samplers">
        /// <para>
        /// Specifies the address of an array of names of existing sampler objects.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_multi_bind|VERSION_4_4", Version = "4.4", EntryPoint = "glBindSamplers")]
        public static extern void BindSamplers(UInt32 first, Int32 count, ref UInt32 samplers);

        /// <summary>[requires: v4.4 and ARB_multi_bind|VERSION_4_4]
        /// Bind one or more named sampler objects to a sequence of consecutive sampler units
        /// </summary>
        /// <param name="first">
        /// <para>
        /// Specifies the first sampler unit to which a sampler object is to be bound.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of samplers to bind.
        /// </para>
        /// </param>
        /// <param name="samplers">
        /// <para>
        /// Specifies the address of an array of names of existing sampler objects.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_multi_bind|VERSION_4_4", Version = "4.4", EntryPoint = "glBindSamplers")]
        public static extern unsafe void BindSamplers(UInt32 first, Int32 count, UInt32* samplers);

        /// <summary>[requires: v1.1]
        /// Bind a named texture to a texturing target
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target to which the texture is bound. Must be one of GL_TEXTURE_1D, GL_TEXTURE_2D, GL_TEXTURE_3D, GL_TEXTURE_1D_ARRAY, GL_TEXTURE_2D_ARRAY, GL_TEXTURE_RECTANGLE, GL_TEXTURE_CUBE_MAP, GL_TEXTURE_CUBE_MAP_ARRAY, GL_TEXTURE_BUFFER, GL_TEXTURE_2D_MULTISAMPLE or GL_TEXTURE_2D_MULTISAMPLE_ARRAY.
        /// </para>
        /// </param>
        /// <param name="texture">
        /// <para>
        /// Specifies the name of a texture.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glBindTexture")]
        public static extern void BindTexture(OpenTK.Graphics.OpenGL4.TextureTarget target, Int32 texture);

        /// <summary>[requires: v1.1]
        /// Bind a named texture to a texturing target
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target to which the texture is bound. Must be one of GL_TEXTURE_1D, GL_TEXTURE_2D, GL_TEXTURE_3D, GL_TEXTURE_1D_ARRAY, GL_TEXTURE_2D_ARRAY, GL_TEXTURE_RECTANGLE, GL_TEXTURE_CUBE_MAP, GL_TEXTURE_CUBE_MAP_ARRAY, GL_TEXTURE_BUFFER, GL_TEXTURE_2D_MULTISAMPLE or GL_TEXTURE_2D_MULTISAMPLE_ARRAY.
        /// </para>
        /// </param>
        /// <param name="texture">
        /// <para>
        /// Specifies the name of a texture.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glBindTexture")]
        public static extern void BindTexture(OpenTK.Graphics.OpenGL4.TextureTarget target, UInt32 texture);

        /// <summary>[requires: v4.4 and ARB_multi_bind|VERSION_4_4]
        /// Bind one or more named textures to a sequence of consecutive texture units
        /// </summary>
        /// <param name="first">
        /// <para>
        /// Specifies the first texture unit to which a texture is to be bound.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of textures to bind.
        /// </para>
        /// </param>
        /// <param name="textures">
        /// <para>
        /// Specifies the address of an array of names of existing texture objects.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_multi_bind|VERSION_4_4", Version = "4.4", EntryPoint = "glBindTextures")]
        public static extern void BindTextures(Int32 first, Int32 count, Int32[] textures);

        /// <summary>[requires: v4.4 and ARB_multi_bind|VERSION_4_4]
        /// Bind one or more named textures to a sequence of consecutive texture units
        /// </summary>
        /// <param name="first">
        /// <para>
        /// Specifies the first texture unit to which a texture is to be bound.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of textures to bind.
        /// </para>
        /// </param>
        /// <param name="textures">
        /// <para>
        /// Specifies the address of an array of names of existing texture objects.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_multi_bind|VERSION_4_4", Version = "4.4", EntryPoint = "glBindTextures")]
        public static extern void BindTextures(Int32 first, Int32 count, ref Int32 textures);

        /// <summary>[requires: v4.4 and ARB_multi_bind|VERSION_4_4]
        /// Bind one or more named textures to a sequence of consecutive texture units
        /// </summary>
        /// <param name="first">
        /// <para>
        /// Specifies the first texture unit to which a texture is to be bound.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of textures to bind.
        /// </para>
        /// </param>
        /// <param name="textures">
        /// <para>
        /// Specifies the address of an array of names of existing texture objects.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_multi_bind|VERSION_4_4", Version = "4.4", EntryPoint = "glBindTextures")]
        public static extern unsafe void BindTextures(Int32 first, Int32 count, Int32* textures);

        /// <summary>[requires: v4.4 and ARB_multi_bind|VERSION_4_4]
        /// Bind one or more named textures to a sequence of consecutive texture units
        /// </summary>
        /// <param name="first">
        /// <para>
        /// Specifies the first texture unit to which a texture is to be bound.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of textures to bind.
        /// </para>
        /// </param>
        /// <param name="textures">
        /// <para>
        /// Specifies the address of an array of names of existing texture objects.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_multi_bind|VERSION_4_4", Version = "4.4", EntryPoint = "glBindTextures")]
        public static extern void BindTextures(UInt32 first, Int32 count, UInt32[] textures);

        /// <summary>[requires: v4.4 and ARB_multi_bind|VERSION_4_4]
        /// Bind one or more named textures to a sequence of consecutive texture units
        /// </summary>
        /// <param name="first">
        /// <para>
        /// Specifies the first texture unit to which a texture is to be bound.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of textures to bind.
        /// </para>
        /// </param>
        /// <param name="textures">
        /// <para>
        /// Specifies the address of an array of names of existing texture objects.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_multi_bind|VERSION_4_4", Version = "4.4", EntryPoint = "glBindTextures")]
        public static extern void BindTextures(UInt32 first, Int32 count, ref UInt32 textures);

        /// <summary>[requires: v4.4 and ARB_multi_bind|VERSION_4_4]
        /// Bind one or more named textures to a sequence of consecutive texture units
        /// </summary>
        /// <param name="first">
        /// <para>
        /// Specifies the first texture unit to which a texture is to be bound.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of textures to bind.
        /// </para>
        /// </param>
        /// <param name="textures">
        /// <para>
        /// Specifies the address of an array of names of existing texture objects.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_multi_bind|VERSION_4_4", Version = "4.4", EntryPoint = "glBindTextures")]
        public static extern unsafe void BindTextures(UInt32 first, Int32 count, UInt32* textures);

        /// <summary>[requires: v4.0 and ARB_transform_feedback2|VERSION_4_0]
        /// Bind a transform feedback object
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target to which to bind the transform feedback object id. target must be GL_TRANSFORM_FEEDBACK.
        /// </para>
        /// </param>
        /// <param name="id">
        /// <para>
        /// Specifies the name of a transform feedback object reserved by glGenTransformFeedbacks.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_transform_feedback2|VERSION_4_0", Version = "4.0", EntryPoint = "glBindTransformFeedback")]
        public static extern void BindTransformFeedback(OpenTK.Graphics.OpenGL4.TransformFeedbackTarget target, Int32 id);

        /// <summary>[requires: v4.0 and ARB_transform_feedback2|VERSION_4_0]
        /// Bind a transform feedback object
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target to which to bind the transform feedback object id. target must be GL_TRANSFORM_FEEDBACK.
        /// </para>
        /// </param>
        /// <param name="id">
        /// <para>
        /// Specifies the name of a transform feedback object reserved by glGenTransformFeedbacks.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_transform_feedback2|VERSION_4_0", Version = "4.0", EntryPoint = "glBindTransformFeedback")]
        public static extern void BindTransformFeedback(OpenTK.Graphics.OpenGL4.TransformFeedbackTarget target, UInt32 id);

        /// <summary>[requires: v3.0 and ARB_vertex_array_object|VERSION_3_0]
        /// Bind a vertex array object
        /// </summary>
        /// <param name="array">
        /// <para>
        /// Specifies the name of the vertex array to bind.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_array_object|VERSION_3_0", Version = "3.0", EntryPoint = "glBindVertexArray")]
        public static extern void BindVertexArray(Int32 array);

        /// <summary>[requires: v3.0 and ARB_vertex_array_object|VERSION_3_0]
        /// Bind a vertex array object
        /// </summary>
        /// <param name="array">
        /// <para>
        /// Specifies the name of the vertex array to bind.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_vertex_array_object|VERSION_3_0", Version = "3.0", EntryPoint = "glBindVertexArray")]
        public static extern void BindVertexArray(UInt32 array);

        /// <summary>[requires: v4.3 and ARB_vertex_attrib_binding|VERSION_4_3]
        /// Bind a buffer to a vertex buffer bind point
        /// </summary>
        /// <param name="bindingindex">
        /// <para>
        /// The index of the vertex buffer binding point to which to bind the buffer.
        /// </para>
        /// </param>
        /// <param name="buffer">
        /// <para>
        /// The name of an existing buffer to bind to the vertex buffer binding point.
        /// </para>
        /// </param>
        /// <param name="offset">
        /// <para>
        /// The offset of the first element of the buffer.
        /// </para>
        /// </param>
        /// <param name="stride">
        /// <para>
        /// The distance between elements within the buffer.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_attrib_binding|VERSION_4_3", Version = "4.3", EntryPoint = "glBindVertexBuffer")]
        public static extern void BindVertexBuffer(Int32 bindingindex, Int32 buffer, IntPtr offset, Int32 stride);

        /// <summary>[requires: v4.3 and ARB_vertex_attrib_binding|VERSION_4_3]
        /// Bind a buffer to a vertex buffer bind point
        /// </summary>
        /// <param name="bindingindex">
        /// <para>
        /// The index of the vertex buffer binding point to which to bind the buffer.
        /// </para>
        /// </param>
        /// <param name="buffer">
        /// <para>
        /// The name of an existing buffer to bind to the vertex buffer binding point.
        /// </para>
        /// </param>
        /// <param name="offset">
        /// <para>
        /// The offset of the first element of the buffer.
        /// </para>
        /// </param>
        /// <param name="stride">
        /// <para>
        /// The distance between elements within the buffer.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_vertex_attrib_binding|VERSION_4_3", Version = "4.3", EntryPoint = "glBindVertexBuffer")]
        public static extern void BindVertexBuffer(UInt32 bindingindex, UInt32 buffer, IntPtr offset, Int32 stride);

        /// <summary>[requires: v4.4 and ARB_multi_bind|VERSION_4_4]
        /// Bind one or more named buffer objects to a sequence of consecutive vertex buffer binding points
        /// </summary>
        /// <param name="first">
        /// <para>
        /// Specifies the first vertex buffer binding point to which a buffer object is to be bound.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of buffers to bind.
        /// </para>
        /// </param>
        /// <param name="buffers">
        /// <para>
        /// Specifies the address of an array of names of existing buffer objects.
        /// </para>
        /// </param>
        /// <param name="offsets">
        /// <para>
        /// Specifies the address of an array of offsets to associate with the binding points.
        /// </para>
        /// </param>
        /// <param name="buffers">
        /// <para>
        /// Specifies the address of an array of strides to associate with the binding points.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_multi_bind|VERSION_4_4", Version = "4.4", EntryPoint = "glBindVertexBuffers")]
        public static extern void BindVertexBuffers(Int32 first, Int32 count, Int32[] buffers, IntPtr[] offsets, Int32[] strides);

        /// <summary>[requires: v4.4 and ARB_multi_bind|VERSION_4_4]
        /// Bind one or more named buffer objects to a sequence of consecutive vertex buffer binding points
        /// </summary>
        /// <param name="first">
        /// <para>
        /// Specifies the first vertex buffer binding point to which a buffer object is to be bound.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of buffers to bind.
        /// </para>
        /// </param>
        /// <param name="buffers">
        /// <para>
        /// Specifies the address of an array of names of existing buffer objects.
        /// </para>
        /// </param>
        /// <param name="offsets">
        /// <para>
        /// Specifies the address of an array of offsets to associate with the binding points.
        /// </para>
        /// </param>
        /// <param name="buffers">
        /// <para>
        /// Specifies the address of an array of strides to associate with the binding points.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_multi_bind|VERSION_4_4", Version = "4.4", EntryPoint = "glBindVertexBuffers")]
        public static extern void BindVertexBuffers(Int32 first, Int32 count, ref Int32 buffers, ref IntPtr offsets, ref Int32 strides);

        /// <summary>[requires: v4.4 and ARB_multi_bind|VERSION_4_4]
        /// Bind one or more named buffer objects to a sequence of consecutive vertex buffer binding points
        /// </summary>
        /// <param name="first">
        /// <para>
        /// Specifies the first vertex buffer binding point to which a buffer object is to be bound.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of buffers to bind.
        /// </para>
        /// </param>
        /// <param name="buffers">
        /// <para>
        /// Specifies the address of an array of names of existing buffer objects.
        /// </para>
        /// </param>
        /// <param name="offsets">
        /// <para>
        /// Specifies the address of an array of offsets to associate with the binding points.
        /// </para>
        /// </param>
        /// <param name="buffers">
        /// <para>
        /// Specifies the address of an array of strides to associate with the binding points.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_multi_bind|VERSION_4_4", Version = "4.4", EntryPoint = "glBindVertexBuffers")]
        public static extern unsafe void BindVertexBuffers(Int32 first, Int32 count, Int32* buffers, IntPtr* offsets, Int32* strides);

        /// <summary>[requires: v4.4 and ARB_multi_bind|VERSION_4_4]
        /// Bind one or more named buffer objects to a sequence of consecutive vertex buffer binding points
        /// </summary>
        /// <param name="first">
        /// <para>
        /// Specifies the first vertex buffer binding point to which a buffer object is to be bound.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of buffers to bind.
        /// </para>
        /// </param>
        /// <param name="buffers">
        /// <para>
        /// Specifies the address of an array of names of existing buffer objects.
        /// </para>
        /// </param>
        /// <param name="offsets">
        /// <para>
        /// Specifies the address of an array of offsets to associate with the binding points.
        /// </para>
        /// </param>
        /// <param name="buffers">
        /// <para>
        /// Specifies the address of an array of strides to associate with the binding points.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_multi_bind|VERSION_4_4", Version = "4.4", EntryPoint = "glBindVertexBuffers")]
        public static extern void BindVertexBuffers(UInt32 first, Int32 count, UInt32[] buffers, IntPtr[] offsets, Int32[] strides);

        /// <summary>[requires: v4.4 and ARB_multi_bind|VERSION_4_4]
        /// Bind one or more named buffer objects to a sequence of consecutive vertex buffer binding points
        /// </summary>
        /// <param name="first">
        /// <para>
        /// Specifies the first vertex buffer binding point to which a buffer object is to be bound.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of buffers to bind.
        /// </para>
        /// </param>
        /// <param name="buffers">
        /// <para>
        /// Specifies the address of an array of names of existing buffer objects.
        /// </para>
        /// </param>
        /// <param name="offsets">
        /// <para>
        /// Specifies the address of an array of offsets to associate with the binding points.
        /// </para>
        /// </param>
        /// <param name="buffers">
        /// <para>
        /// Specifies the address of an array of strides to associate with the binding points.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_multi_bind|VERSION_4_4", Version = "4.4", EntryPoint = "glBindVertexBuffers")]
        public static extern void BindVertexBuffers(UInt32 first, Int32 count, ref UInt32 buffers, ref IntPtr offsets, ref Int32 strides);

        /// <summary>[requires: v4.4 and ARB_multi_bind|VERSION_4_4]
        /// Bind one or more named buffer objects to a sequence of consecutive vertex buffer binding points
        /// </summary>
        /// <param name="first">
        /// <para>
        /// Specifies the first vertex buffer binding point to which a buffer object is to be bound.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of buffers to bind.
        /// </para>
        /// </param>
        /// <param name="buffers">
        /// <para>
        /// Specifies the address of an array of names of existing buffer objects.
        /// </para>
        /// </param>
        /// <param name="offsets">
        /// <para>
        /// Specifies the address of an array of offsets to associate with the binding points.
        /// </para>
        /// </param>
        /// <param name="buffers">
        /// <para>
        /// Specifies the address of an array of strides to associate with the binding points.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_multi_bind|VERSION_4_4", Version = "4.4", EntryPoint = "glBindVertexBuffers")]
        public static extern unsafe void BindVertexBuffers(UInt32 first, Int32 count, UInt32* buffers, IntPtr* offsets, Int32* strides);

        /// <summary>[requires: v1.4 and ARB_imaging|VERSION_1_4]
        /// Set the blend color
        /// </summary>
        /// <param name="red">
        /// <para>
        /// specify the components of GL_BLEND_COLOR
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_imaging|VERSION_1_4", Version = "1.4", EntryPoint = "glBlendColor")]
        public static extern void BlendColor(Single red, Single green, Single blue, Single alpha);

        /// <summary>[requires: v1.4 and ARB_imaging|VERSION_1_4]
        /// Specify the equation used for both the RGB blend equation and the Alpha blend equation
        /// </summary>
        /// <param name="buf">
        /// <para>
        /// for glBlendEquationi, specifies the index of the draw buffer for which to set the blend equation.
        /// </para>
        /// </param>
        /// <param name="mode">
        /// <para>
        /// specifies how source and destination colors are combined. It must be GL_FUNC_ADD, GL_FUNC_SUBTRACT, GL_FUNC_REVERSE_SUBTRACT, GL_MIN, GL_MAX.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_imaging|VERSION_1_4", Version = "1.4", EntryPoint = "glBlendEquation")]
        public static extern void BlendEquation(OpenTK.Graphics.OpenGL4.BlendEquationMode mode);

        /// <summary>[requires: v4.0]
        /// Specify the equation used for both the RGB blend equation and the Alpha blend equation
        /// </summary>
        /// <param name="buf">
        /// <para>
        /// for glBlendEquationi, specifies the index of the draw buffer for which to set the blend equation.
        /// </para>
        /// </param>
        /// <param name="mode">
        /// <para>
        /// specifies how source and destination colors are combined. It must be GL_FUNC_ADD, GL_FUNC_SUBTRACT, GL_FUNC_REVERSE_SUBTRACT, GL_MIN, GL_MAX.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_4_0", Version = "4.0", EntryPoint = "glBlendEquationi")]
        public static extern void BlendEquation(Int32 buf, OpenTK.Graphics.OpenGL4.BlendEquationMode mode);

        /// <summary>[requires: v4.0]
        /// Specify the equation used for both the RGB blend equation and the Alpha blend equation
        /// </summary>
        /// <param name="buf">
        /// <para>
        /// for glBlendEquationi, specifies the index of the draw buffer for which to set the blend equation.
        /// </para>
        /// </param>
        /// <param name="mode">
        /// <para>
        /// specifies how source and destination colors are combined. It must be GL_FUNC_ADD, GL_FUNC_SUBTRACT, GL_FUNC_REVERSE_SUBTRACT, GL_MIN, GL_MAX.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_4_0", Version = "4.0", EntryPoint = "glBlendEquationi")]
        public static extern void BlendEquation(UInt32 buf, OpenTK.Graphics.OpenGL4.BlendEquationMode mode);

        /// <summary>[requires: v2.0]
        /// Set the RGB blend equation and the alpha blend equation separately
        /// </summary>
        /// <param name="buf">
        /// <para>
        /// for glBlendEquationSeparatei, specifies the index of the draw buffer for which to set the blend equations.
        /// </para>
        /// </param>
        /// <param name="modeRGB">
        /// <para>
        /// specifies the RGB blend equation, how the red, green, and blue components of the source and destination colors are combined. It must be GL_FUNC_ADD, GL_FUNC_SUBTRACT, GL_FUNC_REVERSE_SUBTRACT, GL_MIN, GL_MAX.
        /// </para>
        /// </param>
        /// <param name="modeAlpha">
        /// <para>
        /// specifies the alpha blend equation, how the alpha component of the source and destination colors are combined. It must be GL_FUNC_ADD, GL_FUNC_SUBTRACT, GL_FUNC_REVERSE_SUBTRACT, GL_MIN, GL_MAX.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glBlendEquationSeparate")]
        public static extern void BlendEquationSeparate(OpenTK.Graphics.OpenGL4.BlendEquationMode modeRGB, OpenTK.Graphics.OpenGL4.BlendEquationMode modeAlpha);

        /// <summary>[requires: v4.0]
        /// Set the RGB blend equation and the alpha blend equation separately
        /// </summary>
        /// <param name="buf">
        /// <para>
        /// for glBlendEquationSeparatei, specifies the index of the draw buffer for which to set the blend equations.
        /// </para>
        /// </param>
        /// <param name="modeRGB">
        /// <para>
        /// specifies the RGB blend equation, how the red, green, and blue components of the source and destination colors are combined. It must be GL_FUNC_ADD, GL_FUNC_SUBTRACT, GL_FUNC_REVERSE_SUBTRACT, GL_MIN, GL_MAX.
        /// </para>
        /// </param>
        /// <param name="modeAlpha">
        /// <para>
        /// specifies the alpha blend equation, how the alpha component of the source and destination colors are combined. It must be GL_FUNC_ADD, GL_FUNC_SUBTRACT, GL_FUNC_REVERSE_SUBTRACT, GL_MIN, GL_MAX.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_4_0", Version = "4.0", EntryPoint = "glBlendEquationSeparatei")]
        public static extern void BlendEquationSeparate(Int32 buf, OpenTK.Graphics.OpenGL4.BlendEquationMode modeRGB, OpenTK.Graphics.OpenGL4.BlendEquationMode modeAlpha);

        /// <summary>[requires: v4.0]
        /// Set the RGB blend equation and the alpha blend equation separately
        /// </summary>
        /// <param name="buf">
        /// <para>
        /// for glBlendEquationSeparatei, specifies the index of the draw buffer for which to set the blend equations.
        /// </para>
        /// </param>
        /// <param name="modeRGB">
        /// <para>
        /// specifies the RGB blend equation, how the red, green, and blue components of the source and destination colors are combined. It must be GL_FUNC_ADD, GL_FUNC_SUBTRACT, GL_FUNC_REVERSE_SUBTRACT, GL_MIN, GL_MAX.
        /// </para>
        /// </param>
        /// <param name="modeAlpha">
        /// <para>
        /// specifies the alpha blend equation, how the alpha component of the source and destination colors are combined. It must be GL_FUNC_ADD, GL_FUNC_SUBTRACT, GL_FUNC_REVERSE_SUBTRACT, GL_MIN, GL_MAX.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_4_0", Version = "4.0", EntryPoint = "glBlendEquationSeparatei")]
        public static extern void BlendEquationSeparate(UInt32 buf, OpenTK.Graphics.OpenGL4.BlendEquationMode modeRGB, OpenTK.Graphics.OpenGL4.BlendEquationMode modeAlpha);

        /// <summary>[requires: v1.0]
        /// Specify pixel arithmetic
        /// </summary>
        /// <param name="buf">
        /// <para>
        /// For glBlendFunci, specifies the index of the draw buffer for which to set the blend function.
        /// </para>
        /// </param>
        /// <param name="sfactor">
        /// <para>
        /// Specifies how the red, green, blue, and alpha source blending factors are computed. The initial value is GL_ONE.
        /// </para>
        /// </param>
        /// <param name="dfactor">
        /// <para>
        /// Specifies how the red, green, blue, and alpha destination blending factors are computed. The following symbolic constants are accepted: GL_ZERO, GL_ONE, GL_SRC_COLOR, GL_ONE_MINUS_SRC_COLOR, GL_DST_COLOR, GL_ONE_MINUS_DST_COLOR, GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA, GL_DST_ALPHA, GL_ONE_MINUS_DST_ALPHA. GL_CONSTANT_COLOR, GL_ONE_MINUS_CONSTANT_COLOR, GL_CONSTANT_ALPHA, and GL_ONE_MINUS_CONSTANT_ALPHA. The initial value is GL_ZERO.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glBlendFunc")]
        public static extern void BlendFunc(OpenTK.Graphics.OpenGL4.BlendingFactorSrc sfactor, OpenTK.Graphics.OpenGL4.BlendingFactorDest dfactor);

        /// <summary>[requires: v4.0]
        /// Specify pixel arithmetic
        /// </summary>
        /// <param name="buf">
        /// <para>
        /// For glBlendFunci, specifies the index of the draw buffer for which to set the blend function.
        /// </para>
        /// </param>
        /// <param name="sfactor">
        /// <para>
        /// Specifies how the red, green, blue, and alpha source blending factors are computed. The initial value is GL_ONE.
        /// </para>
        /// </param>
        /// <param name="dfactor">
        /// <para>
        /// Specifies how the red, green, blue, and alpha destination blending factors are computed. The following symbolic constants are accepted: GL_ZERO, GL_ONE, GL_SRC_COLOR, GL_ONE_MINUS_SRC_COLOR, GL_DST_COLOR, GL_ONE_MINUS_DST_COLOR, GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA, GL_DST_ALPHA, GL_ONE_MINUS_DST_ALPHA. GL_CONSTANT_COLOR, GL_ONE_MINUS_CONSTANT_COLOR, GL_CONSTANT_ALPHA, and GL_ONE_MINUS_CONSTANT_ALPHA. The initial value is GL_ZERO.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_4_0", Version = "4.0", EntryPoint = "glBlendFunci")]
        public static extern void BlendFunc(Int32 buf, OpenTK.Graphics.OpenGL4.BlendingFactorSrc src, OpenTK.Graphics.OpenGL4.BlendingFactorDest dst);

        /// <summary>[requires: v4.0]
        /// Specify pixel arithmetic
        /// </summary>
        /// <param name="buf">
        /// <para>
        /// For glBlendFunci, specifies the index of the draw buffer for which to set the blend function.
        /// </para>
        /// </param>
        /// <param name="sfactor">
        /// <para>
        /// Specifies how the red, green, blue, and alpha source blending factors are computed. The initial value is GL_ONE.
        /// </para>
        /// </param>
        /// <param name="dfactor">
        /// <para>
        /// Specifies how the red, green, blue, and alpha destination blending factors are computed. The following symbolic constants are accepted: GL_ZERO, GL_ONE, GL_SRC_COLOR, GL_ONE_MINUS_SRC_COLOR, GL_DST_COLOR, GL_ONE_MINUS_DST_COLOR, GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA, GL_DST_ALPHA, GL_ONE_MINUS_DST_ALPHA. GL_CONSTANT_COLOR, GL_ONE_MINUS_CONSTANT_COLOR, GL_CONSTANT_ALPHA, and GL_ONE_MINUS_CONSTANT_ALPHA. The initial value is GL_ZERO.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_4_0", Version = "4.0", EntryPoint = "glBlendFunci")]
        public static extern void BlendFunc(UInt32 buf, OpenTK.Graphics.OpenGL4.BlendingFactorSrc src, OpenTK.Graphics.OpenGL4.BlendingFactorDest dst);

        /// <summary>[requires: v1.4]
        /// Specify pixel arithmetic for RGB and alpha components separately
        /// </summary>
        /// <param name="buf">
        /// <para>
        /// For glBlendFuncSeparatei, specifies the index of the draw buffer for which to set the blend functions.
        /// </para>
        /// </param>
        /// <param name="srcRGB">
        /// <para>
        /// Specifies how the red, green, and blue blending factors are computed. The initial value is GL_ONE.
        /// </para>
        /// </param>
        /// <param name="dstRGB">
        /// <para>
        /// Specifies how the red, green, and blue destination blending factors are computed. The initial value is GL_ZERO.
        /// </para>
        /// </param>
        /// <param name="srcAlpha">
        /// <para>
        /// Specified how the alpha source blending factor is computed. The initial value is GL_ONE.
        /// </para>
        /// </param>
        /// <param name="dstAlpha">
        /// <para>
        /// Specified how the alpha destination blending factor is computed. The initial value is GL_ZERO.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glBlendFuncSeparate")]
        public static extern void BlendFuncSeparate(OpenTK.Graphics.OpenGL4.BlendingFactorSrc sfactorRGB, OpenTK.Graphics.OpenGL4.BlendingFactorDest dfactorRGB, OpenTK.Graphics.OpenGL4.BlendingFactorSrc sfactorAlpha, OpenTK.Graphics.OpenGL4.BlendingFactorDest dfactorAlpha);

        /// <summary>[requires: v4.0]
        /// Specify pixel arithmetic for RGB and alpha components separately
        /// </summary>
        /// <param name="buf">
        /// <para>
        /// For glBlendFuncSeparatei, specifies the index of the draw buffer for which to set the blend functions.
        /// </para>
        /// </param>
        /// <param name="srcRGB">
        /// <para>
        /// Specifies how the red, green, and blue blending factors are computed. The initial value is GL_ONE.
        /// </para>
        /// </param>
        /// <param name="dstRGB">
        /// <para>
        /// Specifies how the red, green, and blue destination blending factors are computed. The initial value is GL_ZERO.
        /// </para>
        /// </param>
        /// <param name="srcAlpha">
        /// <para>
        /// Specified how the alpha source blending factor is computed. The initial value is GL_ONE.
        /// </para>
        /// </param>
        /// <param name="dstAlpha">
        /// <para>
        /// Specified how the alpha destination blending factor is computed. The initial value is GL_ZERO.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_4_0", Version = "4.0", EntryPoint = "glBlendFuncSeparatei")]
        public static extern void BlendFuncSeparate(Int32 buf, OpenTK.Graphics.OpenGL4.BlendingFactorSrc srcRGB, OpenTK.Graphics.OpenGL4.BlendingFactorDest dstRGB, OpenTK.Graphics.OpenGL4.BlendingFactorSrc srcAlpha, OpenTK.Graphics.OpenGL4.BlendingFactorDest dstAlpha);

        /// <summary>[requires: v4.0]
        /// Specify pixel arithmetic for RGB and alpha components separately
        /// </summary>
        /// <param name="buf">
        /// <para>
        /// For glBlendFuncSeparatei, specifies the index of the draw buffer for which to set the blend functions.
        /// </para>
        /// </param>
        /// <param name="srcRGB">
        /// <para>
        /// Specifies how the red, green, and blue blending factors are computed. The initial value is GL_ONE.
        /// </para>
        /// </param>
        /// <param name="dstRGB">
        /// <para>
        /// Specifies how the red, green, and blue destination blending factors are computed. The initial value is GL_ZERO.
        /// </para>
        /// </param>
        /// <param name="srcAlpha">
        /// <para>
        /// Specified how the alpha source blending factor is computed. The initial value is GL_ONE.
        /// </para>
        /// </param>
        /// <param name="dstAlpha">
        /// <para>
        /// Specified how the alpha destination blending factor is computed. The initial value is GL_ZERO.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_4_0", Version = "4.0", EntryPoint = "glBlendFuncSeparatei")]
        public static extern void BlendFuncSeparate(UInt32 buf, OpenTK.Graphics.OpenGL4.BlendingFactorSrc srcRGB, OpenTK.Graphics.OpenGL4.BlendingFactorDest dstRGB, OpenTK.Graphics.OpenGL4.BlendingFactorSrc srcAlpha, OpenTK.Graphics.OpenGL4.BlendingFactorDest dstAlpha);

        /// <summary>[requires: v3.0 and ARB_framebuffer_object|VERSION_3_0]
        /// Copy a block of pixels from the read framebuffer to the draw framebuffer
        /// </summary>
        /// <param name="srcX0">
        /// <para>
        /// Specify the bounds of the source rectangle within the read buffer of the read framebuffer.
        /// </para>
        /// </param>
        /// <param name="dstX0">
        /// <para>
        /// Specify the bounds of the destination rectangle within the write buffer of the write framebuffer.
        /// </para>
        /// </param>
        /// <param name="mask">
        /// <para>
        /// The bitwise OR of the flags indicating which buffers are to be copied. The allowed flags are GL_COLOR_BUFFER_BIT, GL_DEPTH_BUFFER_BIT and GL_STENCIL_BUFFER_BIT.
        /// </para>
        /// </param>
        /// <param name="filter">
        /// <para>
        /// Specifies the interpolation to be applied if the image is stretched. Must be GL_NEAREST or GL_LINEAR.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glBlitFramebuffer")]
        public static extern void BlitFramebuffer(Int32 srcX0, Int32 srcY0, Int32 srcX1, Int32 srcY1, Int32 dstX0, Int32 dstY0, Int32 dstX1, Int32 dstY1, OpenTK.Graphics.OpenGL4.ClearBufferMask mask, OpenTK.Graphics.OpenGL4.BlitFramebufferFilter filter);

        /// <summary>[requires: v1.5]
        /// Creates and initializes a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ATOMIC_COUNTER_BUFFER, GL_COPY_READ_BUFFER, GL_COPY_WRITE_BUFFER, GL_DRAW_INDIRECT_BUFFER, GL_DISPATCH_INDIRECT_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, GL_PIXEL_UNPACK_BUFFER, GL_QUERY_BUFFER, GL_SHADER_STORAGE_BUFFER, GL_TEXTURE_BUFFER, GL_TRANSFORM_FEEDBACK_BUFFER, or GL_UNIFORM_BUFFER.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to data that will be copied into the data store for initialization, or NULL if no data is to be copied.
        /// </para>
        /// </param>
        /// <param name="usage">
        /// <para>
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be GL_STREAM_DRAW, GL_STREAM_READ, GL_STREAM_COPY, GL_STATIC_DRAW, GL_STATIC_READ, GL_STATIC_COPY, GL_DYNAMIC_DRAW, GL_DYNAMIC_READ, or GL_DYNAMIC_COPY.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glBufferData")]
        public static extern void BufferData(OpenTK.Graphics.OpenGL4.BufferTarget target, IntPtr size, IntPtr data, OpenTK.Graphics.OpenGL4.BufferUsageHint usage);

        /// <summary>[requires: v1.5]
        /// Creates and initializes a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ATOMIC_COUNTER_BUFFER, GL_COPY_READ_BUFFER, GL_COPY_WRITE_BUFFER, GL_DRAW_INDIRECT_BUFFER, GL_DISPATCH_INDIRECT_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, GL_PIXEL_UNPACK_BUFFER, GL_QUERY_BUFFER, GL_SHADER_STORAGE_BUFFER, GL_TEXTURE_BUFFER, GL_TRANSFORM_FEEDBACK_BUFFER, or GL_UNIFORM_BUFFER.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to data that will be copied into the data store for initialization, or NULL if no data is to be copied.
        /// </para>
        /// </param>
        /// <param name="usage">
        /// <para>
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be GL_STREAM_DRAW, GL_STREAM_READ, GL_STREAM_COPY, GL_STATIC_DRAW, GL_STATIC_READ, GL_STATIC_COPY, GL_DYNAMIC_DRAW, GL_DYNAMIC_READ, or GL_DYNAMIC_COPY.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glBufferData")]
        public static extern void BufferData<T2>(OpenTK.Graphics.OpenGL4.BufferTarget target, IntPtr size, [InAttribute, OutAttribute] T2[] data, OpenTK.Graphics.OpenGL4.BufferUsageHint usage)
            where T2 : struct
        ;

        /// <summary>[requires: v1.5]
        /// Creates and initializes a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ATOMIC_COUNTER_BUFFER, GL_COPY_READ_BUFFER, GL_COPY_WRITE_BUFFER, GL_DRAW_INDIRECT_BUFFER, GL_DISPATCH_INDIRECT_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, GL_PIXEL_UNPACK_BUFFER, GL_QUERY_BUFFER, GL_SHADER_STORAGE_BUFFER, GL_TEXTURE_BUFFER, GL_TRANSFORM_FEEDBACK_BUFFER, or GL_UNIFORM_BUFFER.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to data that will be copied into the data store for initialization, or NULL if no data is to be copied.
        /// </para>
        /// </param>
        /// <param name="usage">
        /// <para>
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be GL_STREAM_DRAW, GL_STREAM_READ, GL_STREAM_COPY, GL_STATIC_DRAW, GL_STATIC_READ, GL_STATIC_COPY, GL_DYNAMIC_DRAW, GL_DYNAMIC_READ, or GL_DYNAMIC_COPY.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glBufferData")]
        public static extern void BufferData<T2>(OpenTK.Graphics.OpenGL4.BufferTarget target, IntPtr size, [InAttribute, OutAttribute] T2[,] data, OpenTK.Graphics.OpenGL4.BufferUsageHint usage)
            where T2 : struct
        ;

        /// <summary>[requires: v1.5]
        /// Creates and initializes a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ATOMIC_COUNTER_BUFFER, GL_COPY_READ_BUFFER, GL_COPY_WRITE_BUFFER, GL_DRAW_INDIRECT_BUFFER, GL_DISPATCH_INDIRECT_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, GL_PIXEL_UNPACK_BUFFER, GL_QUERY_BUFFER, GL_SHADER_STORAGE_BUFFER, GL_TEXTURE_BUFFER, GL_TRANSFORM_FEEDBACK_BUFFER, or GL_UNIFORM_BUFFER.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to data that will be copied into the data store for initialization, or NULL if no data is to be copied.
        /// </para>
        /// </param>
        /// <param name="usage">
        /// <para>
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be GL_STREAM_DRAW, GL_STREAM_READ, GL_STREAM_COPY, GL_STATIC_DRAW, GL_STATIC_READ, GL_STATIC_COPY, GL_DYNAMIC_DRAW, GL_DYNAMIC_READ, or GL_DYNAMIC_COPY.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glBufferData")]
        public static extern void BufferData<T2>(OpenTK.Graphics.OpenGL4.BufferTarget target, IntPtr size, [InAttribute, OutAttribute] T2[,,] data, OpenTK.Graphics.OpenGL4.BufferUsageHint usage)
            where T2 : struct
        ;

        /// <summary>[requires: v1.5]
        /// Creates and initializes a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ATOMIC_COUNTER_BUFFER, GL_COPY_READ_BUFFER, GL_COPY_WRITE_BUFFER, GL_DRAW_INDIRECT_BUFFER, GL_DISPATCH_INDIRECT_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, GL_PIXEL_UNPACK_BUFFER, GL_QUERY_BUFFER, GL_SHADER_STORAGE_BUFFER, GL_TEXTURE_BUFFER, GL_TRANSFORM_FEEDBACK_BUFFER, or GL_UNIFORM_BUFFER.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to data that will be copied into the data store for initialization, or NULL if no data is to be copied.
        /// </para>
        /// </param>
        /// <param name="usage">
        /// <para>
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be GL_STREAM_DRAW, GL_STREAM_READ, GL_STREAM_COPY, GL_STATIC_DRAW, GL_STATIC_READ, GL_STATIC_COPY, GL_DYNAMIC_DRAW, GL_DYNAMIC_READ, or GL_DYNAMIC_COPY.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glBufferData")]
        public static extern void BufferData<T2>(OpenTK.Graphics.OpenGL4.BufferTarget target, IntPtr size, [InAttribute, OutAttribute] ref T2 data, OpenTK.Graphics.OpenGL4.BufferUsageHint usage)
            where T2 : struct
        ;

        /// <summary>[requires: v4.4 and ARB_buffer_storage|VERSION_4_4]
        /// Creates and initializes a buffer object's immutable data store
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ATOMIC_COUNTER_BUFFER, GL_COPY_READ_BUFFER, GL_COPY_WRITE_BUFFER, GL_DRAW_INDIRECT_BUFFER, GL_DISPATCH_INDIRECT_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, GL_PIXEL_UNPACK_BUFFER, GL_QUERY_BUFFER, GL_SHADER_STORAGE_BUFFER, GL_TEXTURE_BUFFER, GL_TRANSFORM_FEEDBACK_BUFFER, or GL_UNIFORM_BUFFER.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to data that will be copied into the data store for initialization, or NULL if no data is to be copied.
        /// </para>
        /// </param>
        /// <param name="flags">
        /// <para>
        /// Specifies the intended usage of the buffer's data store. Must be a bitwise combination of the following flags. GL_DYNAMIC_STORAGE_BIT, GL_MAP_READ_BIT GL_MAP_WRITE_BIT, GL_MAP_PERSISTENT_BIT, GL_MAP_COHERENT_BIT, and GL_CLIENT_STORAGE_BIT.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_buffer_storage|VERSION_4_4", Version = "4.4", EntryPoint = "glBufferStorage")]
        public static extern void BufferStorage(OpenTK.Graphics.OpenGL4.BufferTarget target, IntPtr size, IntPtr data, OpenTK.Graphics.OpenGL4.BufferStorageFlags flags);

        /// <summary>[requires: v4.4 and ARB_buffer_storage|VERSION_4_4]
        /// Creates and initializes a buffer object's immutable data store
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ATOMIC_COUNTER_BUFFER, GL_COPY_READ_BUFFER, GL_COPY_WRITE_BUFFER, GL_DRAW_INDIRECT_BUFFER, GL_DISPATCH_INDIRECT_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, GL_PIXEL_UNPACK_BUFFER, GL_QUERY_BUFFER, GL_SHADER_STORAGE_BUFFER, GL_TEXTURE_BUFFER, GL_TRANSFORM_FEEDBACK_BUFFER, or GL_UNIFORM_BUFFER.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to data that will be copied into the data store for initialization, or NULL if no data is to be copied.
        /// </para>
        /// </param>
        /// <param name="flags">
        /// <para>
        /// Specifies the intended usage of the buffer's data store. Must be a bitwise combination of the following flags. GL_DYNAMIC_STORAGE_BIT, GL_MAP_READ_BIT GL_MAP_WRITE_BIT, GL_MAP_PERSISTENT_BIT, GL_MAP_COHERENT_BIT, and GL_CLIENT_STORAGE_BIT.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_buffer_storage|VERSION_4_4", Version = "4.4", EntryPoint = "glBufferStorage")]
        public static extern void BufferStorage<T2>(OpenTK.Graphics.OpenGL4.BufferTarget target, IntPtr size, [InAttribute, OutAttribute] T2[] data, OpenTK.Graphics.OpenGL4.BufferStorageFlags flags)
            where T2 : struct
        ;

        /// <summary>[requires: v4.4 and ARB_buffer_storage|VERSION_4_4]
        /// Creates and initializes a buffer object's immutable data store
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ATOMIC_COUNTER_BUFFER, GL_COPY_READ_BUFFER, GL_COPY_WRITE_BUFFER, GL_DRAW_INDIRECT_BUFFER, GL_DISPATCH_INDIRECT_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, GL_PIXEL_UNPACK_BUFFER, GL_QUERY_BUFFER, GL_SHADER_STORAGE_BUFFER, GL_TEXTURE_BUFFER, GL_TRANSFORM_FEEDBACK_BUFFER, or GL_UNIFORM_BUFFER.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to data that will be copied into the data store for initialization, or NULL if no data is to be copied.
        /// </para>
        /// </param>
        /// <param name="flags">
        /// <para>
        /// Specifies the intended usage of the buffer's data store. Must be a bitwise combination of the following flags. GL_DYNAMIC_STORAGE_BIT, GL_MAP_READ_BIT GL_MAP_WRITE_BIT, GL_MAP_PERSISTENT_BIT, GL_MAP_COHERENT_BIT, and GL_CLIENT_STORAGE_BIT.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_buffer_storage|VERSION_4_4", Version = "4.4", EntryPoint = "glBufferStorage")]
        public static extern void BufferStorage<T2>(OpenTK.Graphics.OpenGL4.BufferTarget target, IntPtr size, [InAttribute, OutAttribute] T2[,] data, OpenTK.Graphics.OpenGL4.BufferStorageFlags flags)
            where T2 : struct
        ;

        /// <summary>[requires: v4.4 and ARB_buffer_storage|VERSION_4_4]
        /// Creates and initializes a buffer object's immutable data store
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ATOMIC_COUNTER_BUFFER, GL_COPY_READ_BUFFER, GL_COPY_WRITE_BUFFER, GL_DRAW_INDIRECT_BUFFER, GL_DISPATCH_INDIRECT_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, GL_PIXEL_UNPACK_BUFFER, GL_QUERY_BUFFER, GL_SHADER_STORAGE_BUFFER, GL_TEXTURE_BUFFER, GL_TRANSFORM_FEEDBACK_BUFFER, or GL_UNIFORM_BUFFER.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to data that will be copied into the data store for initialization, or NULL if no data is to be copied.
        /// </para>
        /// </param>
        /// <param name="flags">
        /// <para>
        /// Specifies the intended usage of the buffer's data store. Must be a bitwise combination of the following flags. GL_DYNAMIC_STORAGE_BIT, GL_MAP_READ_BIT GL_MAP_WRITE_BIT, GL_MAP_PERSISTENT_BIT, GL_MAP_COHERENT_BIT, and GL_CLIENT_STORAGE_BIT.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_buffer_storage|VERSION_4_4", Version = "4.4", EntryPoint = "glBufferStorage")]
        public static extern void BufferStorage<T2>(OpenTK.Graphics.OpenGL4.BufferTarget target, IntPtr size, [InAttribute, OutAttribute] T2[,,] data, OpenTK.Graphics.OpenGL4.BufferStorageFlags flags)
            where T2 : struct
        ;

        /// <summary>[requires: v4.4 and ARB_buffer_storage|VERSION_4_4]
        /// Creates and initializes a buffer object's immutable data store
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ATOMIC_COUNTER_BUFFER, GL_COPY_READ_BUFFER, GL_COPY_WRITE_BUFFER, GL_DRAW_INDIRECT_BUFFER, GL_DISPATCH_INDIRECT_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, GL_PIXEL_UNPACK_BUFFER, GL_QUERY_BUFFER, GL_SHADER_STORAGE_BUFFER, GL_TEXTURE_BUFFER, GL_TRANSFORM_FEEDBACK_BUFFER, or GL_UNIFORM_BUFFER.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to data that will be copied into the data store for initialization, or NULL if no data is to be copied.
        /// </para>
        /// </param>
        /// <param name="flags">
        /// <para>
        /// Specifies the intended usage of the buffer's data store. Must be a bitwise combination of the following flags. GL_DYNAMIC_STORAGE_BIT, GL_MAP_READ_BIT GL_MAP_WRITE_BIT, GL_MAP_PERSISTENT_BIT, GL_MAP_COHERENT_BIT, and GL_CLIENT_STORAGE_BIT.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_buffer_storage|VERSION_4_4", Version = "4.4", EntryPoint = "glBufferStorage")]
        public static extern void BufferStorage<T2>(OpenTK.Graphics.OpenGL4.BufferTarget target, IntPtr size, [InAttribute, OutAttribute] ref T2 data, OpenTK.Graphics.OpenGL4.BufferStorageFlags flags)
            where T2 : struct
        ;

        /// <summary>[requires: v1.5]
        /// Updates a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ATOMIC_COUNTER_BUFFER, GL_COPY_READ_BUFFER, GL_COPY_WRITE_BUFFER, GL_DRAW_INDIRECT_BUFFER, GL_DISPATCH_INDIRECT_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, GL_PIXEL_UNPACK_BUFFER, GL_QUERY_BUFFER, GL_SHADER_STORAGE_BUFFER, GL_TEXTURE_BUFFER, GL_TRANSFORM_FEEDBACK_BUFFER, or GL_UNIFORM_BUFFER.
        /// </para>
        /// </param>
        /// <param name="offset">
        /// <para>
        /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Specifies the size in bytes of the data store region being replaced.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the new data that will be copied into the data store.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glBufferSubData")]
        public static extern void BufferSubData(OpenTK.Graphics.OpenGL4.BufferTarget target, IntPtr offset, IntPtr size, IntPtr data);

        /// <summary>[requires: v1.5]
        /// Updates a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ATOMIC_COUNTER_BUFFER, GL_COPY_READ_BUFFER, GL_COPY_WRITE_BUFFER, GL_DRAW_INDIRECT_BUFFER, GL_DISPATCH_INDIRECT_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, GL_PIXEL_UNPACK_BUFFER, GL_QUERY_BUFFER, GL_SHADER_STORAGE_BUFFER, GL_TEXTURE_BUFFER, GL_TRANSFORM_FEEDBACK_BUFFER, or GL_UNIFORM_BUFFER.
        /// </para>
        /// </param>
        /// <param name="offset">
        /// <para>
        /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Specifies the size in bytes of the data store region being replaced.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the new data that will be copied into the data store.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glBufferSubData")]
        public static extern void BufferSubData<T3>(OpenTK.Graphics.OpenGL4.BufferTarget target, IntPtr offset, IntPtr size, [InAttribute, OutAttribute] T3[] data)
            where T3 : struct
        ;

        /// <summary>[requires: v1.5]
        /// Updates a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ATOMIC_COUNTER_BUFFER, GL_COPY_READ_BUFFER, GL_COPY_WRITE_BUFFER, GL_DRAW_INDIRECT_BUFFER, GL_DISPATCH_INDIRECT_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, GL_PIXEL_UNPACK_BUFFER, GL_QUERY_BUFFER, GL_SHADER_STORAGE_BUFFER, GL_TEXTURE_BUFFER, GL_TRANSFORM_FEEDBACK_BUFFER, or GL_UNIFORM_BUFFER.
        /// </para>
        /// </param>
        /// <param name="offset">
        /// <para>
        /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Specifies the size in bytes of the data store region being replaced.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the new data that will be copied into the data store.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glBufferSubData")]
        public static extern void BufferSubData<T3>(OpenTK.Graphics.OpenGL4.BufferTarget target, IntPtr offset, IntPtr size, [InAttribute, OutAttribute] T3[,] data)
            where T3 : struct
        ;

        /// <summary>[requires: v1.5]
        /// Updates a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ATOMIC_COUNTER_BUFFER, GL_COPY_READ_BUFFER, GL_COPY_WRITE_BUFFER, GL_DRAW_INDIRECT_BUFFER, GL_DISPATCH_INDIRECT_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, GL_PIXEL_UNPACK_BUFFER, GL_QUERY_BUFFER, GL_SHADER_STORAGE_BUFFER, GL_TEXTURE_BUFFER, GL_TRANSFORM_FEEDBACK_BUFFER, or GL_UNIFORM_BUFFER.
        /// </para>
        /// </param>
        /// <param name="offset">
        /// <para>
        /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Specifies the size in bytes of the data store region being replaced.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the new data that will be copied into the data store.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glBufferSubData")]
        public static extern void BufferSubData<T3>(OpenTK.Graphics.OpenGL4.BufferTarget target, IntPtr offset, IntPtr size, [InAttribute, OutAttribute] T3[,,] data)
            where T3 : struct
        ;

        /// <summary>[requires: v1.5]
        /// Updates a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ATOMIC_COUNTER_BUFFER, GL_COPY_READ_BUFFER, GL_COPY_WRITE_BUFFER, GL_DRAW_INDIRECT_BUFFER, GL_DISPATCH_INDIRECT_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, GL_PIXEL_UNPACK_BUFFER, GL_QUERY_BUFFER, GL_SHADER_STORAGE_BUFFER, GL_TEXTURE_BUFFER, GL_TRANSFORM_FEEDBACK_BUFFER, or GL_UNIFORM_BUFFER.
        /// </para>
        /// </param>
        /// <param name="offset">
        /// <para>
        /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Specifies the size in bytes of the data store region being replaced.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the new data that will be copied into the data store.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glBufferSubData")]
        public static extern void BufferSubData<T3>(OpenTK.Graphics.OpenGL4.BufferTarget target, IntPtr offset, IntPtr size, [InAttribute, OutAttribute] ref T3 data)
            where T3 : struct
        ;

        /// <summary>[requires: v3.0 and ARB_framebuffer_object|VERSION_3_0]
        /// Check the completeness status of a framebuffer
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specify the target of the framebuffer completeness check.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glCheckFramebufferStatus")]
        public static extern OpenTK.Graphics.OpenGL4.FramebufferErrorCode CheckFramebufferStatus(OpenTK.Graphics.OpenGL4.FramebufferTarget target);

        /// <summary>[requires: v3.0]
        /// Specify whether data read via glReadPixels should be clamped
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Target for color clamping. target must be GL_CLAMP_READ_COLOR.
        /// </para>
        /// </param>
        /// <param name="clamp">
        /// <para>
        /// Specifies whether to apply color clamping. clamp must be GL_TRUE or GL_FALSE.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glClampColor")]
        public static extern void ClampColor(OpenTK.Graphics.OpenGL4.ClampColorTarget target, OpenTK.Graphics.OpenGL4.ClampColorMode clamp);

        /// <summary>[requires: v1.0]
        /// Clear buffers to preset values
        /// </summary>
        /// <param name="mask">
        /// <para>
        /// Bitwise OR of masks that indicate the buffers to be cleared. The three masks are GL_COLOR_BUFFER_BIT, GL_DEPTH_BUFFER_BIT, and GL_STENCIL_BUFFER_BIT.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glClear")]
        public static extern void Clear(OpenTK.Graphics.OpenGL4.ClearBufferMask mask);

        /// <summary>[requires: v4.3 and ARB_clear_buffer_object|VERSION_4_3]
        /// Fill a buffer object's data store with a fixed value
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specify the target of the operation. target must be one of the global buffer binding targets.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// The internal format with which the data will be stored in the buffer object.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// The size, in basic machine units of the range of the data store to fill.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// The format of the data in memory addressed by data.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// The type of the data in memory addressed by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// The address of a memory location storing the data to be replicated into the buffer's data store.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_clear_buffer_object|VERSION_4_3", Version = "4.3", EntryPoint = "glClearBufferData")]
        public static extern void ClearBufferData(OpenTK.Graphics.OpenGL4.BufferTarget target, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.All type, IntPtr data);

        /// <summary>[requires: v4.3 and ARB_clear_buffer_object|VERSION_4_3]
        /// Fill a buffer object's data store with a fixed value
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specify the target of the operation. target must be one of the global buffer binding targets.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// The internal format with which the data will be stored in the buffer object.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// The size, in basic machine units of the range of the data store to fill.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// The format of the data in memory addressed by data.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// The type of the data in memory addressed by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// The address of a memory location storing the data to be replicated into the buffer's data store.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_clear_buffer_object|VERSION_4_3", Version = "4.3", EntryPoint = "glClearBufferData")]
        public static extern void ClearBufferData<T4>(OpenTK.Graphics.OpenGL4.BufferTarget target, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.All type, [InAttribute, OutAttribute] T4[] data)
            where T4 : struct
        ;

        /// <summary>[requires: v4.3 and ARB_clear_buffer_object|VERSION_4_3]
        /// Fill a buffer object's data store with a fixed value
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specify the target of the operation. target must be one of the global buffer binding targets.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// The internal format with which the data will be stored in the buffer object.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// The size, in basic machine units of the range of the data store to fill.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// The format of the data in memory addressed by data.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// The type of the data in memory addressed by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// The address of a memory location storing the data to be replicated into the buffer's data store.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_clear_buffer_object|VERSION_4_3", Version = "4.3", EntryPoint = "glClearBufferData")]
        public static extern void ClearBufferData<T4>(OpenTK.Graphics.OpenGL4.BufferTarget target, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.All type, [InAttribute, OutAttribute] T4[,] data)
            where T4 : struct
        ;

        /// <summary>[requires: v4.3 and ARB_clear_buffer_object|VERSION_4_3]
        /// Fill a buffer object's data store with a fixed value
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specify the target of the operation. target must be one of the global buffer binding targets.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// The internal format with which the data will be stored in the buffer object.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// The size, in basic machine units of the range of the data store to fill.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// The format of the data in memory addressed by data.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// The type of the data in memory addressed by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// The address of a memory location storing the data to be replicated into the buffer's data store.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_clear_buffer_object|VERSION_4_3", Version = "4.3", EntryPoint = "glClearBufferData")]
        public static extern void ClearBufferData<T4>(OpenTK.Graphics.OpenGL4.BufferTarget target, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.All type, [InAttribute, OutAttribute] T4[,,] data)
            where T4 : struct
        ;

        /// <summary>[requires: v4.3 and ARB_clear_buffer_object|VERSION_4_3]
        /// Fill a buffer object's data store with a fixed value
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specify the target of the operation. target must be one of the global buffer binding targets.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// The internal format with which the data will be stored in the buffer object.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// The size, in basic machine units of the range of the data store to fill.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// The format of the data in memory addressed by data.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// The type of the data in memory addressed by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// The address of a memory location storing the data to be replicated into the buffer's data store.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_clear_buffer_object|VERSION_4_3", Version = "4.3", EntryPoint = "glClearBufferData")]
        public static extern void ClearBufferData<T4>(OpenTK.Graphics.OpenGL4.BufferTarget target, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.All type, [InAttribute, OutAttribute] ref T4 data)
            where T4 : struct
        ;

        /// <summary>[requires: v3.0]
        /// Clear individual buffers of the currently bound draw framebuffer
        /// </summary>
        /// <param name="buffer">
        /// <para>
        /// Specify the buffer to clear.
        /// </para>
        /// </param>
        /// <param name="drawBuffer">
        /// <para>
        /// Specify a particular draw buffer to clear.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For color buffers, a pointer to a four-element vector specifying R, G, B and A values to clear the buffer to. For depth buffers, a pointer to a single depth value to clear the buffer to. For stencil buffers, a pointer to a single stencil value to clear the buffer to.
        /// </para>
        /// </param>
        /// <param name="depth">
        /// <para>
        /// The value to clear a depth render buffer to.
        /// </para>
        /// </param>
        /// <param name="stencil">
        /// <para>
        /// The value to clear a stencil render buffer to.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glClearBufferfi")]
        public static extern void ClearBuffer(OpenTK.Graphics.OpenGL4.ClearBufferCombined buffer, Int32 drawbuffer, Single depth, Int32 stencil);

        /// <summary>[requires: v3.0]
        /// Clear individual buffers of the currently bound draw framebuffer
        /// </summary>
        /// <param name="buffer">
        /// <para>
        /// Specify the buffer to clear.
        /// </para>
        /// </param>
        /// <param name="drawBuffer">
        /// <para>
        /// Specify a particular draw buffer to clear.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For color buffers, a pointer to a four-element vector specifying R, G, B and A values to clear the buffer to. For depth buffers, a pointer to a single depth value to clear the buffer to. For stencil buffers, a pointer to a single stencil value to clear the buffer to.
        /// </para>
        /// </param>
        /// <param name="depth">
        /// <para>
        /// The value to clear a depth render buffer to.
        /// </para>
        /// </param>
        /// <param name="stencil">
        /// <para>
        /// The value to clear a stencil render buffer to.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glClearBufferfv")]
        public static extern void ClearBuffer(OpenTK.Graphics.OpenGL4.ClearBuffer buffer, Int32 drawbuffer, Single[] value);

        /// <summary>[requires: v3.0]
        /// Clear individual buffers of the currently bound draw framebuffer
        /// </summary>
        /// <param name="buffer">
        /// <para>
        /// Specify the buffer to clear.
        /// </para>
        /// </param>
        /// <param name="drawBuffer">
        /// <para>
        /// Specify a particular draw buffer to clear.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For color buffers, a pointer to a four-element vector specifying R, G, B and A values to clear the buffer to. For depth buffers, a pointer to a single depth value to clear the buffer to. For stencil buffers, a pointer to a single stencil value to clear the buffer to.
        /// </para>
        /// </param>
        /// <param name="depth">
        /// <para>
        /// The value to clear a depth render buffer to.
        /// </para>
        /// </param>
        /// <param name="stencil">
        /// <para>
        /// The value to clear a stencil render buffer to.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glClearBufferfv")]
        public static extern void ClearBuffer(OpenTK.Graphics.OpenGL4.ClearBuffer buffer, Int32 drawbuffer, ref Single value);

        /// <summary>[requires: v3.0]
        /// Clear individual buffers of the currently bound draw framebuffer
        /// </summary>
        /// <param name="buffer">
        /// <para>
        /// Specify the buffer to clear.
        /// </para>
        /// </param>
        /// <param name="drawBuffer">
        /// <para>
        /// Specify a particular draw buffer to clear.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For color buffers, a pointer to a four-element vector specifying R, G, B and A values to clear the buffer to. For depth buffers, a pointer to a single depth value to clear the buffer to. For stencil buffers, a pointer to a single stencil value to clear the buffer to.
        /// </para>
        /// </param>
        /// <param name="depth">
        /// <para>
        /// The value to clear a depth render buffer to.
        /// </para>
        /// </param>
        /// <param name="stencil">
        /// <para>
        /// The value to clear a stencil render buffer to.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glClearBufferfv")]
        public static extern unsafe void ClearBuffer(OpenTK.Graphics.OpenGL4.ClearBuffer buffer, Int32 drawbuffer, Single* value);

        /// <summary>[requires: v3.0]
        /// Clear individual buffers of the currently bound draw framebuffer
        /// </summary>
        /// <param name="buffer">
        /// <para>
        /// Specify the buffer to clear.
        /// </para>
        /// </param>
        /// <param name="drawBuffer">
        /// <para>
        /// Specify a particular draw buffer to clear.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For color buffers, a pointer to a four-element vector specifying R, G, B and A values to clear the buffer to. For depth buffers, a pointer to a single depth value to clear the buffer to. For stencil buffers, a pointer to a single stencil value to clear the buffer to.
        /// </para>
        /// </param>
        /// <param name="depth">
        /// <para>
        /// The value to clear a depth render buffer to.
        /// </para>
        /// </param>
        /// <param name="stencil">
        /// <para>
        /// The value to clear a stencil render buffer to.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glClearBufferiv")]
        public static extern void ClearBuffer(OpenTK.Graphics.OpenGL4.ClearBuffer buffer, Int32 drawbuffer, Int32[] value);

        /// <summary>[requires: v3.0]
        /// Clear individual buffers of the currently bound draw framebuffer
        /// </summary>
        /// <param name="buffer">
        /// <para>
        /// Specify the buffer to clear.
        /// </para>
        /// </param>
        /// <param name="drawBuffer">
        /// <para>
        /// Specify a particular draw buffer to clear.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For color buffers, a pointer to a four-element vector specifying R, G, B and A values to clear the buffer to. For depth buffers, a pointer to a single depth value to clear the buffer to. For stencil buffers, a pointer to a single stencil value to clear the buffer to.
        /// </para>
        /// </param>
        /// <param name="depth">
        /// <para>
        /// The value to clear a depth render buffer to.
        /// </para>
        /// </param>
        /// <param name="stencil">
        /// <para>
        /// The value to clear a stencil render buffer to.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glClearBufferiv")]
        public static extern void ClearBuffer(OpenTK.Graphics.OpenGL4.ClearBuffer buffer, Int32 drawbuffer, ref Int32 value);

        /// <summary>[requires: v3.0]
        /// Clear individual buffers of the currently bound draw framebuffer
        /// </summary>
        /// <param name="buffer">
        /// <para>
        /// Specify the buffer to clear.
        /// </para>
        /// </param>
        /// <param name="drawBuffer">
        /// <para>
        /// Specify a particular draw buffer to clear.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For color buffers, a pointer to a four-element vector specifying R, G, B and A values to clear the buffer to. For depth buffers, a pointer to a single depth value to clear the buffer to. For stencil buffers, a pointer to a single stencil value to clear the buffer to.
        /// </para>
        /// </param>
        /// <param name="depth">
        /// <para>
        /// The value to clear a depth render buffer to.
        /// </para>
        /// </param>
        /// <param name="stencil">
        /// <para>
        /// The value to clear a stencil render buffer to.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glClearBufferiv")]
        public static extern unsafe void ClearBuffer(OpenTK.Graphics.OpenGL4.ClearBuffer buffer, Int32 drawbuffer, Int32* value);

        /// <summary>[requires: v4.3 and ARB_clear_buffer_object|VERSION_4_3]
        /// Fill all or part of buffer object's data store with a fixed value
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specify the target of the operation. target must be one of the global buffer binding targets.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// The internal format with which the data will be stored in the buffer object.
        /// </para>
        /// </param>
        /// <param name="offset">
        /// <para>
        /// The offset, in basic machine units into the buffer object's data store at which to start filling.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// The size, in basic machine units of the range of the data store to fill.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// The format of the data in memory addressed by data.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// The type of the data in memory addressed by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// The address of a memory location storing the data to be replicated into the buffer's data store.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_clear_buffer_object|VERSION_4_3", Version = "4.3", EntryPoint = "glClearBufferSubData")]
        public static extern void ClearBufferSubData(OpenTK.Graphics.OpenGL4.BufferTarget target, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, IntPtr offset, IntPtr size, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.All type, IntPtr data);

        /// <summary>[requires: v4.3 and ARB_clear_buffer_object|VERSION_4_3]
        /// Fill all or part of buffer object's data store with a fixed value
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specify the target of the operation. target must be one of the global buffer binding targets.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// The internal format with which the data will be stored in the buffer object.
        /// </para>
        /// </param>
        /// <param name="offset">
        /// <para>
        /// The offset, in basic machine units into the buffer object's data store at which to start filling.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// The size, in basic machine units of the range of the data store to fill.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// The format of the data in memory addressed by data.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// The type of the data in memory addressed by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// The address of a memory location storing the data to be replicated into the buffer's data store.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_clear_buffer_object|VERSION_4_3", Version = "4.3", EntryPoint = "glClearBufferSubData")]
        public static extern void ClearBufferSubData<T6>(OpenTK.Graphics.OpenGL4.BufferTarget target, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, IntPtr offset, IntPtr size, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.All type, [InAttribute, OutAttribute] T6[] data)
            where T6 : struct
        ;

        /// <summary>[requires: v4.3 and ARB_clear_buffer_object|VERSION_4_3]
        /// Fill all or part of buffer object's data store with a fixed value
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specify the target of the operation. target must be one of the global buffer binding targets.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// The internal format with which the data will be stored in the buffer object.
        /// </para>
        /// </param>
        /// <param name="offset">
        /// <para>
        /// The offset, in basic machine units into the buffer object's data store at which to start filling.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// The size, in basic machine units of the range of the data store to fill.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// The format of the data in memory addressed by data.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// The type of the data in memory addressed by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// The address of a memory location storing the data to be replicated into the buffer's data store.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_clear_buffer_object|VERSION_4_3", Version = "4.3", EntryPoint = "glClearBufferSubData")]
        public static extern void ClearBufferSubData<T6>(OpenTK.Graphics.OpenGL4.BufferTarget target, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, IntPtr offset, IntPtr size, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.All type, [InAttribute, OutAttribute] T6[,] data)
            where T6 : struct
        ;

        /// <summary>[requires: v4.3 and ARB_clear_buffer_object|VERSION_4_3]
        /// Fill all or part of buffer object's data store with a fixed value
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specify the target of the operation. target must be one of the global buffer binding targets.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// The internal format with which the data will be stored in the buffer object.
        /// </para>
        /// </param>
        /// <param name="offset">
        /// <para>
        /// The offset, in basic machine units into the buffer object's data store at which to start filling.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// The size, in basic machine units of the range of the data store to fill.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// The format of the data in memory addressed by data.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// The type of the data in memory addressed by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// The address of a memory location storing the data to be replicated into the buffer's data store.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_clear_buffer_object|VERSION_4_3", Version = "4.3", EntryPoint = "glClearBufferSubData")]
        public static extern void ClearBufferSubData<T6>(OpenTK.Graphics.OpenGL4.BufferTarget target, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, IntPtr offset, IntPtr size, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.All type, [InAttribute, OutAttribute] T6[,,] data)
            where T6 : struct
        ;

        /// <summary>[requires: v4.3 and ARB_clear_buffer_object|VERSION_4_3]
        /// Fill all or part of buffer object's data store with a fixed value
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specify the target of the operation. target must be one of the global buffer binding targets.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// The internal format with which the data will be stored in the buffer object.
        /// </para>
        /// </param>
        /// <param name="offset">
        /// <para>
        /// The offset, in basic machine units into the buffer object's data store at which to start filling.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// The size, in basic machine units of the range of the data store to fill.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// The format of the data in memory addressed by data.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// The type of the data in memory addressed by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// The address of a memory location storing the data to be replicated into the buffer's data store.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_clear_buffer_object|VERSION_4_3", Version = "4.3", EntryPoint = "glClearBufferSubData")]
        public static extern void ClearBufferSubData<T6>(OpenTK.Graphics.OpenGL4.BufferTarget target, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, IntPtr offset, IntPtr size, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.All type, [InAttribute, OutAttribute] ref T6 data)
            where T6 : struct
        ;

        /// <summary>[requires: v3.0]
        /// Clear individual buffers of the currently bound draw framebuffer
        /// </summary>
        /// <param name="buffer">
        /// <para>
        /// Specify the buffer to clear.
        /// </para>
        /// </param>
        /// <param name="drawBuffer">
        /// <para>
        /// Specify a particular draw buffer to clear.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For color buffers, a pointer to a four-element vector specifying R, G, B and A values to clear the buffer to. For depth buffers, a pointer to a single depth value to clear the buffer to. For stencil buffers, a pointer to a single stencil value to clear the buffer to.
        /// </para>
        /// </param>
        /// <param name="depth">
        /// <para>
        /// The value to clear a depth render buffer to.
        /// </para>
        /// </param>
        /// <param name="stencil">
        /// <para>
        /// The value to clear a stencil render buffer to.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glClearBufferuiv")]
        public static extern void ClearBuffer(OpenTK.Graphics.OpenGL4.ClearBuffer buffer, Int32 drawbuffer, UInt32[] value);

        /// <summary>[requires: v3.0]
        /// Clear individual buffers of the currently bound draw framebuffer
        /// </summary>
        /// <param name="buffer">
        /// <para>
        /// Specify the buffer to clear.
        /// </para>
        /// </param>
        /// <param name="drawBuffer">
        /// <para>
        /// Specify a particular draw buffer to clear.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For color buffers, a pointer to a four-element vector specifying R, G, B and A values to clear the buffer to. For depth buffers, a pointer to a single depth value to clear the buffer to. For stencil buffers, a pointer to a single stencil value to clear the buffer to.
        /// </para>
        /// </param>
        /// <param name="depth">
        /// <para>
        /// The value to clear a depth render buffer to.
        /// </para>
        /// </param>
        /// <param name="stencil">
        /// <para>
        /// The value to clear a stencil render buffer to.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glClearBufferuiv")]
        public static extern void ClearBuffer(OpenTK.Graphics.OpenGL4.ClearBuffer buffer, Int32 drawbuffer, ref UInt32 value);

        /// <summary>[requires: v3.0]
        /// Clear individual buffers of the currently bound draw framebuffer
        /// </summary>
        /// <param name="buffer">
        /// <para>
        /// Specify the buffer to clear.
        /// </para>
        /// </param>
        /// <param name="drawBuffer">
        /// <para>
        /// Specify a particular draw buffer to clear.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For color buffers, a pointer to a four-element vector specifying R, G, B and A values to clear the buffer to. For depth buffers, a pointer to a single depth value to clear the buffer to. For stencil buffers, a pointer to a single stencil value to clear the buffer to.
        /// </para>
        /// </param>
        /// <param name="depth">
        /// <para>
        /// The value to clear a depth render buffer to.
        /// </para>
        /// </param>
        /// <param name="stencil">
        /// <para>
        /// The value to clear a stencil render buffer to.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glClearBufferuiv")]
        public static extern unsafe void ClearBuffer(OpenTK.Graphics.OpenGL4.ClearBuffer buffer, Int32 drawbuffer, UInt32* value);

        /// <summary>[requires: v1.0]
        /// Specify clear values for the color buffers
        /// </summary>
        /// <param name="red">
        /// <para>
        /// Specify the red, green, blue, and alpha values used when the color buffers are cleared. The initial values are all 0.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glClearColor")]
        public static extern void ClearColor(Single red, Single green, Single blue, Single alpha);

        /// <summary>[requires: v1.0]
        /// Specify the clear value for the depth buffer
        /// </summary>
        /// <param name="depth">
        /// <para>
        /// Specifies the depth value used when the depth buffer is cleared. The initial value is 1.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glClearDepth")]
        public static extern void ClearDepth(Double depth);

        /// <summary>[requires: v4.1 and ARB_ES2_compatibility|VERSION_4_1]
        /// Specify the clear value for the depth buffer
        /// </summary>
        /// <param name="depth">
        /// <para>
        /// Specifies the depth value used when the depth buffer is cleared. The initial value is 1.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_ES2_compatibility|VERSION_4_1", Version = "4.1", EntryPoint = "glClearDepthf")]
        public static extern void ClearDepth(Single d);

        /// <summary>[requires: v1.0]
        /// Specify the clear value for the stencil buffer
        /// </summary>
        /// <param name="s">
        /// <para>
        /// Specifies the index used when the stencil buffer is cleared. The initial value is 0.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glClearStencil")]
        public static extern void ClearStencil(Int32 s);

        /// <summary>[requires: v4.4 and ARB_clear_texture|VERSION_4_4]
        /// Fills all a texture image with a constant value
        /// </summary>
        /// <param name="texture">
        /// <para>
        /// The name of an existing texture object containing the image to be cleared.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// The level of texture containing the region to be cleared.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// The format of the data whose address in memory is given by data.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// The type of the data whose address in memory is given by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// The address in memory of the data to be used to clear the specified region.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_clear_texture|VERSION_4_4", Version = "4.4", EntryPoint = "glClearTexImage")]
        public static extern void ClearTexImage(Int32 texture, Int32 level, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, IntPtr data);

        /// <summary>[requires: v4.4 and ARB_clear_texture|VERSION_4_4]
        /// Fills all a texture image with a constant value
        /// </summary>
        /// <param name="texture">
        /// <para>
        /// The name of an existing texture object containing the image to be cleared.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// The level of texture containing the region to be cleared.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// The format of the data whose address in memory is given by data.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// The type of the data whose address in memory is given by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// The address in memory of the data to be used to clear the specified region.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_clear_texture|VERSION_4_4", Version = "4.4", EntryPoint = "glClearTexImage")]
        public static extern void ClearTexImage<T4>(Int32 texture, Int32 level, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute] T4[] data)
            where T4 : struct
        ;

        /// <summary>[requires: v4.4 and ARB_clear_texture|VERSION_4_4]
        /// Fills all a texture image with a constant value
        /// </summary>
        /// <param name="texture">
        /// <para>
        /// The name of an existing texture object containing the image to be cleared.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// The level of texture containing the region to be cleared.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// The format of the data whose address in memory is given by data.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// The type of the data whose address in memory is given by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// The address in memory of the data to be used to clear the specified region.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_clear_texture|VERSION_4_4", Version = "4.4", EntryPoint = "glClearTexImage")]
        public static extern void ClearTexImage<T4>(Int32 texture, Int32 level, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute] T4[,] data)
            where T4 : struct
        ;

        /// <summary>[requires: v4.4 and ARB_clear_texture|VERSION_4_4]
        /// Fills all a texture image with a constant value
        /// </summary>
        /// <param name="texture">
        /// <para>
        /// The name of an existing texture object containing the image to be cleared.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// The level of texture containing the region to be cleared.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// The format of the data whose address in memory is given by data.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// The type of the data whose address in memory is given by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// The address in memory of the data to be used to clear the specified region.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_clear_texture|VERSION_4_4", Version = "4.4", EntryPoint = "glClearTexImage")]
        public static extern void ClearTexImage<T4>(Int32 texture, Int32 level, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute] T4[,,] data)
            where T4 : struct
        ;

        /// <summary>[requires: v4.4 and ARB_clear_texture|VERSION_4_4]
        /// Fills all a texture image with a constant value
        /// </summary>
        /// <param name="texture">
        /// <para>
        /// The name of an existing texture object containing the image to be cleared.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// The level of texture containing the region to be cleared.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// The format of the data whose address in memory is given by data.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// The type of the data whose address in memory is given by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// The address in memory of the data to be used to clear the specified region.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_clear_texture|VERSION_4_4", Version = "4.4", EntryPoint = "glClearTexImage")]
        public static extern void ClearTexImage<T4>(Int32 texture, Int32 level, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute] ref T4 data)
            where T4 : struct
        ;

        /// <summary>[requires: v4.4 and ARB_clear_texture|VERSION_4_4]
        /// Fills all a texture image with a constant value
        /// </summary>
        /// <param name="texture">
        /// <para>
        /// The name of an existing texture object containing the image to be cleared.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// The level of texture containing the region to be cleared.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// The format of the data whose address in memory is given by data.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// The type of the data whose address in memory is given by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// The address in memory of the data to be used to clear the specified region.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_clear_texture|VERSION_4_4", Version = "4.4", EntryPoint = "glClearTexImage")]
        public static extern void ClearTexImage(UInt32 texture, Int32 level, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, IntPtr data);

        /// <summary>[requires: v4.4 and ARB_clear_texture|VERSION_4_4]
        /// Fills all a texture image with a constant value
        /// </summary>
        /// <param name="texture">
        /// <para>
        /// The name of an existing texture object containing the image to be cleared.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// The level of texture containing the region to be cleared.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// The format of the data whose address in memory is given by data.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// The type of the data whose address in memory is given by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// The address in memory of the data to be used to clear the specified region.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_clear_texture|VERSION_4_4", Version = "4.4", EntryPoint = "glClearTexImage")]
        public static extern void ClearTexImage<T4>(UInt32 texture, Int32 level, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute] T4[] data)
            where T4 : struct
        ;

        /// <summary>[requires: v4.4 and ARB_clear_texture|VERSION_4_4]
        /// Fills all a texture image with a constant value
        /// </summary>
        /// <param name="texture">
        /// <para>
        /// The name of an existing texture object containing the image to be cleared.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// The level of texture containing the region to be cleared.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// The format of the data whose address in memory is given by data.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// The type of the data whose address in memory is given by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// The address in memory of the data to be used to clear the specified region.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_clear_texture|VERSION_4_4", Version = "4.4", EntryPoint = "glClearTexImage")]
        public static extern void ClearTexImage<T4>(UInt32 texture, Int32 level, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute] T4[,] data)
            where T4 : struct
        ;

        /// <summary>[requires: v4.4 and ARB_clear_texture|VERSION_4_4]
        /// Fills all a texture image with a constant value
        /// </summary>
        /// <param name="texture">
        /// <para>
        /// The name of an existing texture object containing the image to be cleared.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// The level of texture containing the region to be cleared.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// The format of the data whose address in memory is given by data.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// The type of the data whose address in memory is given by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// The address in memory of the data to be used to clear the specified region.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_clear_texture|VERSION_4_4", Version = "4.4", EntryPoint = "glClearTexImage")]
        public static extern void ClearTexImage<T4>(UInt32 texture, Int32 level, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute] T4[,,] data)
            where T4 : struct
        ;

        /// <summary>[requires: v4.4 and ARB_clear_texture|VERSION_4_4]
        /// Fills all a texture image with a constant value
        /// </summary>
        /// <param name="texture">
        /// <para>
        /// The name of an existing texture object containing the image to be cleared.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// The level of texture containing the region to be cleared.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// The format of the data whose address in memory is given by data.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// The type of the data whose address in memory is given by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// The address in memory of the data to be used to clear the specified region.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_clear_texture|VERSION_4_4", Version = "4.4", EntryPoint = "glClearTexImage")]
        public static extern void ClearTexImage<T4>(UInt32 texture, Int32 level, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute] ref T4 data)
            where T4 : struct
        ;

        /// <summary>[requires: v4.4 and ARB_clear_texture|VERSION_4_4]
        /// Fills all or part of a texture image with a constant value
        /// </summary>
        /// <param name="texture">
        /// <para>
        /// The name of an existing texture object containing the image to be cleared.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// The level of texture containing the region to be cleared.
        /// </para>
        /// </param>
        /// <param name="xoffset">
        /// <para>
        /// The coordinate of the left edge of the region to be cleared.
        /// </para>
        /// </param>
        /// <param name="yoffset">
        /// <para>
        /// The coordinate of the lower edge of the region to be cleared.
        /// </para>
        /// </param>
        /// <param name="zoffset">
        /// <para>
        /// The coordinate of the front of the region to be cleared.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// The width of the region to be cleared.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// The height of the region to be cleared.
        /// </para>
        /// </param>
        /// <param name="depth">
        /// <para>
        /// The depth of the region to be cleared.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// The format of the data whose address in memory is given by data.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// The type of the data whose address in memory is given by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// The address in memory of the data to be used to clear the specified region.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_clear_texture|VERSION_4_4", Version = "4.4", EntryPoint = "glClearTexSubImage")]
        public static extern void ClearTexSubImage(Int32 texture, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, IntPtr data);

        /// <summary>[requires: v4.4 and ARB_clear_texture|VERSION_4_4]
        /// Fills all or part of a texture image with a constant value
        /// </summary>
        /// <param name="texture">
        /// <para>
        /// The name of an existing texture object containing the image to be cleared.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// The level of texture containing the region to be cleared.
        /// </para>
        /// </param>
        /// <param name="xoffset">
        /// <para>
        /// The coordinate of the left edge of the region to be cleared.
        /// </para>
        /// </param>
        /// <param name="yoffset">
        /// <para>
        /// The coordinate of the lower edge of the region to be cleared.
        /// </para>
        /// </param>
        /// <param name="zoffset">
        /// <para>
        /// The coordinate of the front of the region to be cleared.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// The width of the region to be cleared.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// The height of the region to be cleared.
        /// </para>
        /// </param>
        /// <param name="depth">
        /// <para>
        /// The depth of the region to be cleared.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// The format of the data whose address in memory is given by data.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// The type of the data whose address in memory is given by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// The address in memory of the data to be used to clear the specified region.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_clear_texture|VERSION_4_4", Version = "4.4", EntryPoint = "glClearTexSubImage")]
        public static extern void ClearTexSubImage<T10>(Int32 texture, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute] T10[] data)
            where T10 : struct
        ;

        /// <summary>[requires: v4.4 and ARB_clear_texture|VERSION_4_4]
        /// Fills all or part of a texture image with a constant value
        /// </summary>
        /// <param name="texture">
        /// <para>
        /// The name of an existing texture object containing the image to be cleared.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// The level of texture containing the region to be cleared.
        /// </para>
        /// </param>
        /// <param name="xoffset">
        /// <para>
        /// The coordinate of the left edge of the region to be cleared.
        /// </para>
        /// </param>
        /// <param name="yoffset">
        /// <para>
        /// The coordinate of the lower edge of the region to be cleared.
        /// </para>
        /// </param>
        /// <param name="zoffset">
        /// <para>
        /// The coordinate of the front of the region to be cleared.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// The width of the region to be cleared.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// The height of the region to be cleared.
        /// </para>
        /// </param>
        /// <param name="depth">
        /// <para>
        /// The depth of the region to be cleared.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// The format of the data whose address in memory is given by data.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// The type of the data whose address in memory is given by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// The address in memory of the data to be used to clear the specified region.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_clear_texture|VERSION_4_4", Version = "4.4", EntryPoint = "glClearTexSubImage")]
        public static extern void ClearTexSubImage<T10>(Int32 texture, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute] T10[,] data)
            where T10 : struct
        ;

        /// <summary>[requires: v4.4 and ARB_clear_texture|VERSION_4_4]
        /// Fills all or part of a texture image with a constant value
        /// </summary>
        /// <param name="texture">
        /// <para>
        /// The name of an existing texture object containing the image to be cleared.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// The level of texture containing the region to be cleared.
        /// </para>
        /// </param>
        /// <param name="xoffset">
        /// <para>
        /// The coordinate of the left edge of the region to be cleared.
        /// </para>
        /// </param>
        /// <param name="yoffset">
        /// <para>
        /// The coordinate of the lower edge of the region to be cleared.
        /// </para>
        /// </param>
        /// <param name="zoffset">
        /// <para>
        /// The coordinate of the front of the region to be cleared.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// The width of the region to be cleared.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// The height of the region to be cleared.
        /// </para>
        /// </param>
        /// <param name="depth">
        /// <para>
        /// The depth of the region to be cleared.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// The format of the data whose address in memory is given by data.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// The type of the data whose address in memory is given by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// The address in memory of the data to be used to clear the specified region.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_clear_texture|VERSION_4_4", Version = "4.4", EntryPoint = "glClearTexSubImage")]
        public static extern void ClearTexSubImage<T10>(Int32 texture, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute] T10[,,] data)
            where T10 : struct
        ;

        /// <summary>[requires: v4.4 and ARB_clear_texture|VERSION_4_4]
        /// Fills all or part of a texture image with a constant value
        /// </summary>
        /// <param name="texture">
        /// <para>
        /// The name of an existing texture object containing the image to be cleared.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// The level of texture containing the region to be cleared.
        /// </para>
        /// </param>
        /// <param name="xoffset">
        /// <para>
        /// The coordinate of the left edge of the region to be cleared.
        /// </para>
        /// </param>
        /// <param name="yoffset">
        /// <para>
        /// The coordinate of the lower edge of the region to be cleared.
        /// </para>
        /// </param>
        /// <param name="zoffset">
        /// <para>
        /// The coordinate of the front of the region to be cleared.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// The width of the region to be cleared.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// The height of the region to be cleared.
        /// </para>
        /// </param>
        /// <param name="depth">
        /// <para>
        /// The depth of the region to be cleared.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// The format of the data whose address in memory is given by data.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// The type of the data whose address in memory is given by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// The address in memory of the data to be used to clear the specified region.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_clear_texture|VERSION_4_4", Version = "4.4", EntryPoint = "glClearTexSubImage")]
        public static extern void ClearTexSubImage<T10>(Int32 texture, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute] ref T10 data)
            where T10 : struct
        ;

        /// <summary>[requires: v4.4 and ARB_clear_texture|VERSION_4_4]
        /// Fills all or part of a texture image with a constant value
        /// </summary>
        /// <param name="texture">
        /// <para>
        /// The name of an existing texture object containing the image to be cleared.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// The level of texture containing the region to be cleared.
        /// </para>
        /// </param>
        /// <param name="xoffset">
        /// <para>
        /// The coordinate of the left edge of the region to be cleared.
        /// </para>
        /// </param>
        /// <param name="yoffset">
        /// <para>
        /// The coordinate of the lower edge of the region to be cleared.
        /// </para>
        /// </param>
        /// <param name="zoffset">
        /// <para>
        /// The coordinate of the front of the region to be cleared.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// The width of the region to be cleared.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// The height of the region to be cleared.
        /// </para>
        /// </param>
        /// <param name="depth">
        /// <para>
        /// The depth of the region to be cleared.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// The format of the data whose address in memory is given by data.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// The type of the data whose address in memory is given by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// The address in memory of the data to be used to clear the specified region.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_clear_texture|VERSION_4_4", Version = "4.4", EntryPoint = "glClearTexSubImage")]
        public static extern void ClearTexSubImage(UInt32 texture, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, IntPtr data);

        /// <summary>[requires: v4.4 and ARB_clear_texture|VERSION_4_4]
        /// Fills all or part of a texture image with a constant value
        /// </summary>
        /// <param name="texture">
        /// <para>
        /// The name of an existing texture object containing the image to be cleared.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// The level of texture containing the region to be cleared.
        /// </para>
        /// </param>
        /// <param name="xoffset">
        /// <para>
        /// The coordinate of the left edge of the region to be cleared.
        /// </para>
        /// </param>
        /// <param name="yoffset">
        /// <para>
        /// The coordinate of the lower edge of the region to be cleared.
        /// </para>
        /// </param>
        /// <param name="zoffset">
        /// <para>
        /// The coordinate of the front of the region to be cleared.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// The width of the region to be cleared.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// The height of the region to be cleared.
        /// </para>
        /// </param>
        /// <param name="depth">
        /// <para>
        /// The depth of the region to be cleared.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// The format of the data whose address in memory is given by data.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// The type of the data whose address in memory is given by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// The address in memory of the data to be used to clear the specified region.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_clear_texture|VERSION_4_4", Version = "4.4", EntryPoint = "glClearTexSubImage")]
        public static extern void ClearTexSubImage<T10>(UInt32 texture, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute] T10[] data)
            where T10 : struct
        ;

        /// <summary>[requires: v4.4 and ARB_clear_texture|VERSION_4_4]
        /// Fills all or part of a texture image with a constant value
        /// </summary>
        /// <param name="texture">
        /// <para>
        /// The name of an existing texture object containing the image to be cleared.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// The level of texture containing the region to be cleared.
        /// </para>
        /// </param>
        /// <param name="xoffset">
        /// <para>
        /// The coordinate of the left edge of the region to be cleared.
        /// </para>
        /// </param>
        /// <param name="yoffset">
        /// <para>
        /// The coordinate of the lower edge of the region to be cleared.
        /// </para>
        /// </param>
        /// <param name="zoffset">
        /// <para>
        /// The coordinate of the front of the region to be cleared.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// The width of the region to be cleared.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// The height of the region to be cleared.
        /// </para>
        /// </param>
        /// <param name="depth">
        /// <para>
        /// The depth of the region to be cleared.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// The format of the data whose address in memory is given by data.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// The type of the data whose address in memory is given by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// The address in memory of the data to be used to clear the specified region.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_clear_texture|VERSION_4_4", Version = "4.4", EntryPoint = "glClearTexSubImage")]
        public static extern void ClearTexSubImage<T10>(UInt32 texture, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute] T10[,] data)
            where T10 : struct
        ;

        /// <summary>[requires: v4.4 and ARB_clear_texture|VERSION_4_4]
        /// Fills all or part of a texture image with a constant value
        /// </summary>
        /// <param name="texture">
        /// <para>
        /// The name of an existing texture object containing the image to be cleared.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// The level of texture containing the region to be cleared.
        /// </para>
        /// </param>
        /// <param name="xoffset">
        /// <para>
        /// The coordinate of the left edge of the region to be cleared.
        /// </para>
        /// </param>
        /// <param name="yoffset">
        /// <para>
        /// The coordinate of the lower edge of the region to be cleared.
        /// </para>
        /// </param>
        /// <param name="zoffset">
        /// <para>
        /// The coordinate of the front of the region to be cleared.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// The width of the region to be cleared.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// The height of the region to be cleared.
        /// </para>
        /// </param>
        /// <param name="depth">
        /// <para>
        /// The depth of the region to be cleared.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// The format of the data whose address in memory is given by data.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// The type of the data whose address in memory is given by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// The address in memory of the data to be used to clear the specified region.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_clear_texture|VERSION_4_4", Version = "4.4", EntryPoint = "glClearTexSubImage")]
        public static extern void ClearTexSubImage<T10>(UInt32 texture, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute] T10[,,] data)
            where T10 : struct
        ;

        /// <summary>[requires: v4.4 and ARB_clear_texture|VERSION_4_4]
        /// Fills all or part of a texture image with a constant value
        /// </summary>
        /// <param name="texture">
        /// <para>
        /// The name of an existing texture object containing the image to be cleared.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// The level of texture containing the region to be cleared.
        /// </para>
        /// </param>
        /// <param name="xoffset">
        /// <para>
        /// The coordinate of the left edge of the region to be cleared.
        /// </para>
        /// </param>
        /// <param name="yoffset">
        /// <para>
        /// The coordinate of the lower edge of the region to be cleared.
        /// </para>
        /// </param>
        /// <param name="zoffset">
        /// <para>
        /// The coordinate of the front of the region to be cleared.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// The width of the region to be cleared.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// The height of the region to be cleared.
        /// </para>
        /// </param>
        /// <param name="depth">
        /// <para>
        /// The depth of the region to be cleared.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// The format of the data whose address in memory is given by data.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// The type of the data whose address in memory is given by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// The address in memory of the data to be used to clear the specified region.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_clear_texture|VERSION_4_4", Version = "4.4", EntryPoint = "glClearTexSubImage")]
        public static extern void ClearTexSubImage<T10>(UInt32 texture, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute] ref T10 data)
            where T10 : struct
        ;

        /// <summary>[requires: v3.2 and ARB_sync|VERSION_3_2]
        /// Block and wait for a sync object to become signaled
        /// </summary>
        /// <param name="sync">
        /// <para>
        /// The sync object whose status to wait on.
        /// </para>
        /// </param>
        /// <param name="flags">
        /// <para>
        /// A bitfield controlling the command flushing behavior. flags may be GL_SYNC_FLUSH_COMMANDS_BIT.
        /// </para>
        /// </param>
        /// <param name="timeout">
        /// <para>
        /// The timeout, specified in nanoseconds, for which the implementation should wait for sync to become signaled.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_sync|VERSION_3_2", Version = "3.2", EntryPoint = "glClientWaitSync")]
        public static extern OpenTK.Graphics.OpenGL4.WaitSyncStatus ClientWaitSync(IntPtr sync, OpenTK.Graphics.OpenGL4.ClientWaitSyncFlags flags, Int64 timeout);

        /// <summary>[requires: v3.2 and ARB_sync|VERSION_3_2]
        /// Block and wait for a sync object to become signaled
        /// </summary>
        /// <param name="sync">
        /// <para>
        /// The sync object whose status to wait on.
        /// </para>
        /// </param>
        /// <param name="flags">
        /// <para>
        /// A bitfield controlling the command flushing behavior. flags may be GL_SYNC_FLUSH_COMMANDS_BIT.
        /// </para>
        /// </param>
        /// <param name="timeout">
        /// <para>
        /// The timeout, specified in nanoseconds, for which the implementation should wait for sync to become signaled.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_sync|VERSION_3_2", Version = "3.2", EntryPoint = "glClientWaitSync")]
        public static extern OpenTK.Graphics.OpenGL4.WaitSyncStatus ClientWaitSync(IntPtr sync, OpenTK.Graphics.OpenGL4.ClientWaitSyncFlags flags, UInt64 timeout);

        /// <summary>[requires: v1.0]
        /// Enable and disable writing of frame buffer color components
        /// </summary>
        /// <param name="buf">
        /// <para>
        /// For glColorMaski, specifies the index of the draw buffer whose color mask to set.
        /// </para>
        /// </param>
        /// <param name="red">
        /// <para>
        /// Specify whether red, green, blue, and alpha are to be written into the frame buffer. The initial values are all GL_TRUE, indicating that the color components are written.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glColorMask")]
        public static extern void ColorMask(bool red, bool green, bool blue, bool alpha);

        /// <summary>[requires: v3.0]
        /// Enable and disable writing of frame buffer color components
        /// </summary>
        /// <param name="buf">
        /// <para>
        /// For glColorMaski, specifies the index of the draw buffer whose color mask to set.
        /// </para>
        /// </param>
        /// <param name="red">
        /// <para>
        /// Specify whether red, green, blue, and alpha are to be written into the frame buffer. The initial values are all GL_TRUE, indicating that the color components are written.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glColorMaski")]
        public static extern void ColorMask(Int32 index, bool r, bool g, bool b, bool a);

        /// <summary>[requires: v3.0]
        /// Enable and disable writing of frame buffer color components
        /// </summary>
        /// <param name="buf">
        /// <para>
        /// For glColorMaski, specifies the index of the draw buffer whose color mask to set.
        /// </para>
        /// </param>
        /// <param name="red">
        /// <para>
        /// Specify whether red, green, blue, and alpha are to be written into the frame buffer. The initial values are all GL_TRUE, indicating that the color components are written.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glColorMaski")]
        public static extern void ColorMask(UInt32 index, bool r, bool g, bool b, bool a);

        /// <summary>[requires: v3.3 and ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glColorP3ui")]
        public static extern void ColorP3(OpenTK.Graphics.OpenGL4.PackedPointerType type, Int32 color);

        /// <summary>[requires: v3.3 and ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glColorP3ui")]
        public static extern void ColorP3(OpenTK.Graphics.OpenGL4.PackedPointerType type, UInt32 color);

        /// <summary>[requires: v3.3 and ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glColorP3uiv")]
        public static extern unsafe void ColorP3(OpenTK.Graphics.OpenGL4.PackedPointerType type, Int32* color);

        /// <summary>[requires: v3.3 and ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glColorP3uiv")]
        public static extern unsafe void ColorP3(OpenTK.Graphics.OpenGL4.PackedPointerType type, UInt32* color);

        /// <summary>[requires: v3.3 and ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glColorP4ui")]
        public static extern void ColorP4(OpenTK.Graphics.OpenGL4.PackedPointerType type, Int32 color);

        /// <summary>[requires: v3.3 and ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glColorP4ui")]
        public static extern void ColorP4(OpenTK.Graphics.OpenGL4.PackedPointerType type, UInt32 color);

        /// <summary>[requires: v3.3 and ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glColorP4uiv")]
        public static extern unsafe void ColorP4(OpenTK.Graphics.OpenGL4.PackedPointerType type, Int32* color);

        /// <summary>[requires: v3.3 and ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glColorP4uiv")]
        public static extern unsafe void ColorP4(OpenTK.Graphics.OpenGL4.PackedPointerType type, UInt32* color);

        /// <summary>
        /// Respecify a portion of a color table
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Must be one of GL_COLOR_TABLE, GL_POST_CONVOLUTION_COLOR_TABLE, or GL_POST_COLOR_MATRIX_COLOR_TABLE.
        /// </para>
        /// </param>
        /// <param name="start">
        /// <para>
        /// The starting index of the portion of the color table to be replaced.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// The number of table entries to replace.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// The format of the pixel data in data. The allowable values are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_LUMINANCE, GL_LUMINANCE_ALPHA, GL_RGB, GL_BGR, GL_RGBA, and GL_BGRA.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// The type of the pixel data in data. The allowable values are GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Pointer to a one-dimensional array of pixel data that is processed to replace the specified region of the color table.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glColorSubTable")]
        public static extern void ColorSubTable(OpenTK.Graphics.OpenGL4.ColorTableTarget target, Int32 start, Int32 count, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, IntPtr data);

        /// <summary>
        /// Respecify a portion of a color table
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Must be one of GL_COLOR_TABLE, GL_POST_CONVOLUTION_COLOR_TABLE, or GL_POST_COLOR_MATRIX_COLOR_TABLE.
        /// </para>
        /// </param>
        /// <param name="start">
        /// <para>
        /// The starting index of the portion of the color table to be replaced.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// The number of table entries to replace.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// The format of the pixel data in data. The allowable values are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_LUMINANCE, GL_LUMINANCE_ALPHA, GL_RGB, GL_BGR, GL_RGBA, and GL_BGRA.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// The type of the pixel data in data. The allowable values are GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Pointer to a one-dimensional array of pixel data that is processed to replace the specified region of the color table.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glColorSubTable")]
        public static extern void ColorSubTable<T5>(OpenTK.Graphics.OpenGL4.ColorTableTarget target, Int32 start, Int32 count, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute] T5[] data)
            where T5 : struct
        ;

        /// <summary>
        /// Respecify a portion of a color table
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Must be one of GL_COLOR_TABLE, GL_POST_CONVOLUTION_COLOR_TABLE, or GL_POST_COLOR_MATRIX_COLOR_TABLE.
        /// </para>
        /// </param>
        /// <param name="start">
        /// <para>
        /// The starting index of the portion of the color table to be replaced.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// The number of table entries to replace.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// The format of the pixel data in data. The allowable values are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_LUMINANCE, GL_LUMINANCE_ALPHA, GL_RGB, GL_BGR, GL_RGBA, and GL_BGRA.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// The type of the pixel data in data. The allowable values are GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Pointer to a one-dimensional array of pixel data that is processed to replace the specified region of the color table.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glColorSubTable")]
        public static extern void ColorSubTable<T5>(OpenTK.Graphics.OpenGL4.ColorTableTarget target, Int32 start, Int32 count, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute] T5[,] data)
            where T5 : struct
        ;

        /// <summary>
        /// Respecify a portion of a color table
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Must be one of GL_COLOR_TABLE, GL_POST_CONVOLUTION_COLOR_TABLE, or GL_POST_COLOR_MATRIX_COLOR_TABLE.
        /// </para>
        /// </param>
        /// <param name="start">
        /// <para>
        /// The starting index of the portion of the color table to be replaced.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// The number of table entries to replace.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// The format of the pixel data in data. The allowable values are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_LUMINANCE, GL_LUMINANCE_ALPHA, GL_RGB, GL_BGR, GL_RGBA, and GL_BGRA.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// The type of the pixel data in data. The allowable values are GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Pointer to a one-dimensional array of pixel data that is processed to replace the specified region of the color table.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glColorSubTable")]
        public static extern void ColorSubTable<T5>(OpenTK.Graphics.OpenGL4.ColorTableTarget target, Int32 start, Int32 count, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute] T5[,,] data)
            where T5 : struct
        ;

        /// <summary>
        /// Respecify a portion of a color table
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Must be one of GL_COLOR_TABLE, GL_POST_CONVOLUTION_COLOR_TABLE, or GL_POST_COLOR_MATRIX_COLOR_TABLE.
        /// </para>
        /// </param>
        /// <param name="start">
        /// <para>
        /// The starting index of the portion of the color table to be replaced.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// The number of table entries to replace.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// The format of the pixel data in data. The allowable values are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_LUMINANCE, GL_LUMINANCE_ALPHA, GL_RGB, GL_BGR, GL_RGBA, and GL_BGRA.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// The type of the pixel data in data. The allowable values are GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Pointer to a one-dimensional array of pixel data that is processed to replace the specified region of the color table.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glColorSubTable")]
        public static extern void ColorSubTable<T5>(OpenTK.Graphics.OpenGL4.ColorTableTarget target, Int32 start, Int32 count, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute] ref T5 data)
            where T5 : struct
        ;

        /// <summary>
        /// Define a color lookup table
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Must be one of GL_COLOR_TABLE, GL_POST_CONVOLUTION_COLOR_TABLE, GL_POST_COLOR_MATRIX_COLOR_TABLE, GL_PROXY_COLOR_TABLE, GL_PROXY_POST_CONVOLUTION_COLOR_TABLE, or GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// The internal format of the color table. The allowable values are GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, and GL_RGBA16.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// The number of entries in the color lookup table specified by data.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// The format of the pixel data in data. The allowable values are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_LUMINANCE, GL_LUMINANCE_ALPHA, GL_RGB, GL_BGR, GL_RGBA, and GL_BGRA.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// The type of the pixel data in data. The allowable values are GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Pointer to a one-dimensional array of pixel data that is processed to build the color table.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glColorTable")]
        public static extern void ColorTable(OpenTK.Graphics.OpenGL4.ColorTableTarget target, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, Int32 width, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, IntPtr table);

        /// <summary>
        /// Define a color lookup table
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Must be one of GL_COLOR_TABLE, GL_POST_CONVOLUTION_COLOR_TABLE, GL_POST_COLOR_MATRIX_COLOR_TABLE, GL_PROXY_COLOR_TABLE, GL_PROXY_POST_CONVOLUTION_COLOR_TABLE, or GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// The internal format of the color table. The allowable values are GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, and GL_RGBA16.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// The number of entries in the color lookup table specified by data.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// The format of the pixel data in data. The allowable values are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_LUMINANCE, GL_LUMINANCE_ALPHA, GL_RGB, GL_BGR, GL_RGBA, and GL_BGRA.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// The type of the pixel data in data. The allowable values are GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Pointer to a one-dimensional array of pixel data that is processed to build the color table.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glColorTable")]
        public static extern void ColorTable<T5>(OpenTK.Graphics.OpenGL4.ColorTableTarget target, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, Int32 width, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute] T5[] table)
            where T5 : struct
        ;

        /// <summary>
        /// Define a color lookup table
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Must be one of GL_COLOR_TABLE, GL_POST_CONVOLUTION_COLOR_TABLE, GL_POST_COLOR_MATRIX_COLOR_TABLE, GL_PROXY_COLOR_TABLE, GL_PROXY_POST_CONVOLUTION_COLOR_TABLE, or GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// The internal format of the color table. The allowable values are GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, and GL_RGBA16.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// The number of entries in the color lookup table specified by data.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// The format of the pixel data in data. The allowable values are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_LUMINANCE, GL_LUMINANCE_ALPHA, GL_RGB, GL_BGR, GL_RGBA, and GL_BGRA.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// The type of the pixel data in data. The allowable values are GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Pointer to a one-dimensional array of pixel data that is processed to build the color table.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glColorTable")]
        public static extern void ColorTable<T5>(OpenTK.Graphics.OpenGL4.ColorTableTarget target, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, Int32 width, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute] T5[,] table)
            where T5 : struct
        ;

        /// <summary>
        /// Define a color lookup table
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Must be one of GL_COLOR_TABLE, GL_POST_CONVOLUTION_COLOR_TABLE, GL_POST_COLOR_MATRIX_COLOR_TABLE, GL_PROXY_COLOR_TABLE, GL_PROXY_POST_CONVOLUTION_COLOR_TABLE, or GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// The internal format of the color table. The allowable values are GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, and GL_RGBA16.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// The number of entries in the color lookup table specified by data.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// The format of the pixel data in data. The allowable values are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_LUMINANCE, GL_LUMINANCE_ALPHA, GL_RGB, GL_BGR, GL_RGBA, and GL_BGRA.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// The type of the pixel data in data. The allowable values are GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Pointer to a one-dimensional array of pixel data that is processed to build the color table.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glColorTable")]
        public static extern void ColorTable<T5>(OpenTK.Graphics.OpenGL4.ColorTableTarget target, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, Int32 width, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute] T5[,,] table)
            where T5 : struct
        ;

        /// <summary>
        /// Define a color lookup table
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Must be one of GL_COLOR_TABLE, GL_POST_CONVOLUTION_COLOR_TABLE, GL_POST_COLOR_MATRIX_COLOR_TABLE, GL_PROXY_COLOR_TABLE, GL_PROXY_POST_CONVOLUTION_COLOR_TABLE, or GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// The internal format of the color table. The allowable values are GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, and GL_RGBA16.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// The number of entries in the color lookup table specified by data.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// The format of the pixel data in data. The allowable values are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_LUMINANCE, GL_LUMINANCE_ALPHA, GL_RGB, GL_BGR, GL_RGBA, and GL_BGRA.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// The type of the pixel data in data. The allowable values are GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Pointer to a one-dimensional array of pixel data that is processed to build the color table.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glColorTable")]
        public static extern void ColorTable<T5>(OpenTK.Graphics.OpenGL4.ColorTableTarget target, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, Int32 width, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute] ref T5 table)
            where T5 : struct
        ;

        /// <summary>
        /// Set color lookup table parameters
        /// </summary>
        /// <param name="target">
        /// <para>
        /// The target color table. Must be GL_COLOR_TABLE, GL_POST_CONVOLUTION_COLOR_TABLE, or GL_POST_COLOR_MATRIX_COLOR_TABLE.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// The symbolic name of a texture color lookup table parameter. Must be one of GL_COLOR_TABLE_SCALE or GL_COLOR_TABLE_BIAS.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// A pointer to an array where the values of the parameters are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glColorTableParameterfv")]
        public static extern void ColorTableParameter(OpenTK.Graphics.OpenGL4.ColorTableTarget target, OpenTK.Graphics.OpenGL4.ColorTableParameterPName pname, Single[] @params);

        /// <summary>
        /// Set color lookup table parameters
        /// </summary>
        /// <param name="target">
        /// <para>
        /// The target color table. Must be GL_COLOR_TABLE, GL_POST_CONVOLUTION_COLOR_TABLE, or GL_POST_COLOR_MATRIX_COLOR_TABLE.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// The symbolic name of a texture color lookup table parameter. Must be one of GL_COLOR_TABLE_SCALE or GL_COLOR_TABLE_BIAS.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// A pointer to an array where the values of the parameters are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glColorTableParameterfv")]
        public static extern void ColorTableParameter(OpenTK.Graphics.OpenGL4.ColorTableTarget target, OpenTK.Graphics.OpenGL4.ColorTableParameterPName pname, ref Single @params);

        /// <summary>
        /// Set color lookup table parameters
        /// </summary>
        /// <param name="target">
        /// <para>
        /// The target color table. Must be GL_COLOR_TABLE, GL_POST_CONVOLUTION_COLOR_TABLE, or GL_POST_COLOR_MATRIX_COLOR_TABLE.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// The symbolic name of a texture color lookup table parameter. Must be one of GL_COLOR_TABLE_SCALE or GL_COLOR_TABLE_BIAS.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// A pointer to an array where the values of the parameters are stored.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glColorTableParameterfv")]
        public static extern unsafe void ColorTableParameter(OpenTK.Graphics.OpenGL4.ColorTableTarget target, OpenTK.Graphics.OpenGL4.ColorTableParameterPName pname, Single* @params);

        /// <summary>
        /// Set color lookup table parameters
        /// </summary>
        /// <param name="target">
        /// <para>
        /// The target color table. Must be GL_COLOR_TABLE, GL_POST_CONVOLUTION_COLOR_TABLE, or GL_POST_COLOR_MATRIX_COLOR_TABLE.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// The symbolic name of a texture color lookup table parameter. Must be one of GL_COLOR_TABLE_SCALE or GL_COLOR_TABLE_BIAS.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// A pointer to an array where the values of the parameters are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glColorTableParameteriv")]
        public static extern void ColorTableParameter(OpenTK.Graphics.OpenGL4.ColorTableTarget target, OpenTK.Graphics.OpenGL4.ColorTableParameterPName pname, Int32[] @params);

        /// <summary>
        /// Set color lookup table parameters
        /// </summary>
        /// <param name="target">
        /// <para>
        /// The target color table. Must be GL_COLOR_TABLE, GL_POST_CONVOLUTION_COLOR_TABLE, or GL_POST_COLOR_MATRIX_COLOR_TABLE.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// The symbolic name of a texture color lookup table parameter. Must be one of GL_COLOR_TABLE_SCALE or GL_COLOR_TABLE_BIAS.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// A pointer to an array where the values of the parameters are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glColorTableParameteriv")]
        public static extern void ColorTableParameter(OpenTK.Graphics.OpenGL4.ColorTableTarget target, OpenTK.Graphics.OpenGL4.ColorTableParameterPName pname, ref Int32 @params);

        /// <summary>
        /// Set color lookup table parameters
        /// </summary>
        /// <param name="target">
        /// <para>
        /// The target color table. Must be GL_COLOR_TABLE, GL_POST_CONVOLUTION_COLOR_TABLE, or GL_POST_COLOR_MATRIX_COLOR_TABLE.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// The symbolic name of a texture color lookup table parameter. Must be one of GL_COLOR_TABLE_SCALE or GL_COLOR_TABLE_BIAS.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// A pointer to an array where the values of the parameters are stored.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glColorTableParameteriv")]
        public static extern unsafe void ColorTableParameter(OpenTK.Graphics.OpenGL4.ColorTableTarget target, OpenTK.Graphics.OpenGL4.ColorTableParameterPName pname, Int32* @params);

        /// <summary>[requires: v2.0]
        /// Compiles a shader object
        /// </summary>
        /// <param name="shader">
        /// <para>
        /// Specifies the shader object to be compiled.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glCompileShader")]
        public static extern void CompileShader(Int32 shader);

        /// <summary>[requires: v2.0]
        /// Compiles a shader object
        /// </summary>
        /// <param name="shader">
        /// <para>
        /// Specifies the shader object to be compiled.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glCompileShader")]
        public static extern void CompileShader(UInt32 shader);

        /// <summary>[requires: v1.3]
        /// Specify a one-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_1D or GL_PROXY_TEXTURE_1D.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// Specifies the format of the compressed image data stored at address data.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture image. All implementations support texture images that are at least 64 texels wide. The height of the 1D texture image is 1.
        /// </para>
        /// </param>
        /// <param name="border">
        /// <para>
        /// This value must be 0.
        /// </para>
        /// </param>
        /// <param name="imageSize">
        /// <para>
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the compressed image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexImage1D")]
        public static extern void CompressedTexImage1D(OpenTK.Graphics.OpenGL4.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, Int32 width, Int32 border, Int32 imageSize, IntPtr data);

        /// <summary>[requires: v1.3]
        /// Specify a one-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_1D or GL_PROXY_TEXTURE_1D.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// Specifies the format of the compressed image data stored at address data.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture image. All implementations support texture images that are at least 64 texels wide. The height of the 1D texture image is 1.
        /// </para>
        /// </param>
        /// <param name="border">
        /// <para>
        /// This value must be 0.
        /// </para>
        /// </param>
        /// <param name="imageSize">
        /// <para>
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the compressed image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexImage1D")]
        public static extern void CompressedTexImage1D<T6>(OpenTK.Graphics.OpenGL4.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, Int32 width, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T6[] data)
            where T6 : struct
        ;

        /// <summary>[requires: v1.3]
        /// Specify a one-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_1D or GL_PROXY_TEXTURE_1D.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// Specifies the format of the compressed image data stored at address data.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture image. All implementations support texture images that are at least 64 texels wide. The height of the 1D texture image is 1.
        /// </para>
        /// </param>
        /// <param name="border">
        /// <para>
        /// This value must be 0.
        /// </para>
        /// </param>
        /// <param name="imageSize">
        /// <para>
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the compressed image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexImage1D")]
        public static extern void CompressedTexImage1D<T6>(OpenTK.Graphics.OpenGL4.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, Int32 width, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T6[,] data)
            where T6 : struct
        ;

        /// <summary>[requires: v1.3]
        /// Specify a one-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_1D or GL_PROXY_TEXTURE_1D.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// Specifies the format of the compressed image data stored at address data.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture image. All implementations support texture images that are at least 64 texels wide. The height of the 1D texture image is 1.
        /// </para>
        /// </param>
        /// <param name="border">
        /// <para>
        /// This value must be 0.
        /// </para>
        /// </param>
        /// <param name="imageSize">
        /// <para>
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the compressed image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexImage1D")]
        public static extern void CompressedTexImage1D<T6>(OpenTK.Graphics.OpenGL4.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, Int32 width, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T6[,,] data)
            where T6 : struct
        ;

        /// <summary>[requires: v1.3]
        /// Specify a one-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_1D or GL_PROXY_TEXTURE_1D.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// Specifies the format of the compressed image data stored at address data.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture image. All implementations support texture images that are at least 64 texels wide. The height of the 1D texture image is 1.
        /// </para>
        /// </param>
        /// <param name="border">
        /// <para>
        /// This value must be 0.
        /// </para>
        /// </param>
        /// <param name="imageSize">
        /// <para>
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the compressed image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexImage1D")]
        public static extern void CompressedTexImage1D<T6>(OpenTK.Graphics.OpenGL4.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, Int32 width, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] ref T6 data)
            where T6 : struct
        ;

        /// <summary>[requires: v1.3]
        /// Specify a two-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_2D, GL_PROXY_TEXTURE_2D, GL_TEXTURE_1D_ARRAY, GL_PROXY_TEXTURE_1D_ARRAY, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, GL_TEXTURE_CUBE_MAP_NEGATIVE_Z, or GL_PROXY_TEXTURE_CUBE_MAP.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// Specifies the format of the compressed image data stored at address data.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture image. All implementations support 2D texture and cube map texture images that are at least 16384 texels wide.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture image. All implementations support 2D texture and cube map texture images that are at least 16384 texels high.
        /// </para>
        /// </param>
        /// <param name="border">
        /// <para>
        /// This value must be 0.
        /// </para>
        /// </param>
        /// <param name="imageSize">
        /// <para>
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the compressed image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexImage2D")]
        public static extern void CompressedTexImage2D(OpenTK.Graphics.OpenGL4.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, IntPtr data);

        /// <summary>[requires: v1.3]
        /// Specify a two-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_2D, GL_PROXY_TEXTURE_2D, GL_TEXTURE_1D_ARRAY, GL_PROXY_TEXTURE_1D_ARRAY, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, GL_TEXTURE_CUBE_MAP_NEGATIVE_Z, or GL_PROXY_TEXTURE_CUBE_MAP.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// Specifies the format of the compressed image data stored at address data.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture image. All implementations support 2D texture and cube map texture images that are at least 16384 texels wide.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture image. All implementations support 2D texture and cube map texture images that are at least 16384 texels high.
        /// </para>
        /// </param>
        /// <param name="border">
        /// <para>
        /// This value must be 0.
        /// </para>
        /// </param>
        /// <param name="imageSize">
        /// <para>
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the compressed image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexImage2D")]
        public static extern void CompressedTexImage2D<T7>(OpenTK.Graphics.OpenGL4.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T7[] data)
            where T7 : struct
        ;

        /// <summary>[requires: v1.3]
        /// Specify a two-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_2D, GL_PROXY_TEXTURE_2D, GL_TEXTURE_1D_ARRAY, GL_PROXY_TEXTURE_1D_ARRAY, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, GL_TEXTURE_CUBE_MAP_NEGATIVE_Z, or GL_PROXY_TEXTURE_CUBE_MAP.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// Specifies the format of the compressed image data stored at address data.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture image. All implementations support 2D texture and cube map texture images that are at least 16384 texels wide.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture image. All implementations support 2D texture and cube map texture images that are at least 16384 texels high.
        /// </para>
        /// </param>
        /// <param name="border">
        /// <para>
        /// This value must be 0.
        /// </para>
        /// </param>
        /// <param name="imageSize">
        /// <para>
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the compressed image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexImage2D")]
        public static extern void CompressedTexImage2D<T7>(OpenTK.Graphics.OpenGL4.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T7[,] data)
            where T7 : struct
        ;

        /// <summary>[requires: v1.3]
        /// Specify a two-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_2D, GL_PROXY_TEXTURE_2D, GL_TEXTURE_1D_ARRAY, GL_PROXY_TEXTURE_1D_ARRAY, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, GL_TEXTURE_CUBE_MAP_NEGATIVE_Z, or GL_PROXY_TEXTURE_CUBE_MAP.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// Specifies the format of the compressed image data stored at address data.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture image. All implementations support 2D texture and cube map texture images that are at least 16384 texels wide.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture image. All implementations support 2D texture and cube map texture images that are at least 16384 texels high.
        /// </para>
        /// </param>
        /// <param name="border">
        /// <para>
        /// This value must be 0.
        /// </para>
        /// </param>
        /// <param name="imageSize">
        /// <para>
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the compressed image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexImage2D")]
        public static extern void CompressedTexImage2D<T7>(OpenTK.Graphics.OpenGL4.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T7[,,] data)
            where T7 : struct
        ;

        /// <summary>[requires: v1.3]
        /// Specify a two-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_2D, GL_PROXY_TEXTURE_2D, GL_TEXTURE_1D_ARRAY, GL_PROXY_TEXTURE_1D_ARRAY, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, GL_TEXTURE_CUBE_MAP_NEGATIVE_Z, or GL_PROXY_TEXTURE_CUBE_MAP.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// Specifies the format of the compressed image data stored at address data.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture image. All implementations support 2D texture and cube map texture images that are at least 16384 texels wide.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture image. All implementations support 2D texture and cube map texture images that are at least 16384 texels high.
        /// </para>
        /// </param>
        /// <param name="border">
        /// <para>
        /// This value must be 0.
        /// </para>
        /// </param>
        /// <param name="imageSize">
        /// <para>
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the compressed image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexImage2D")]
        public static extern void CompressedTexImage2D<T7>(OpenTK.Graphics.OpenGL4.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] ref T7 data)
            where T7 : struct
        ;

        /// <summary>[requires: v1.3]
        /// Specify a three-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_3D, GL_PROXY_TEXTURE_3D, GL_TEXTURE_2D_ARRAY or GL_PROXY_TEXTURE_2D_ARRAY.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// Specifies the format of the compressed image data stored at address data.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture image. All implementations support 3D texture images that are at least 16 texels wide.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture image. All implementations support 3D texture images that are at least 16 texels high.
        /// </para>
        /// </param>
        /// <param name="depth">
        /// <para>
        /// Specifies the depth of the texture image. All implementations support 3D texture images that are at least 16 texels deep.
        /// </para>
        /// </param>
        /// <param name="border">
        /// <para>
        /// This value must be 0.
        /// </para>
        /// </param>
        /// <param name="imageSize">
        /// <para>
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the compressed image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexImage3D")]
        public static extern void CompressedTexImage3D(OpenTK.Graphics.OpenGL4.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, IntPtr data);

        /// <summary>[requires: v1.3]
        /// Specify a three-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_3D, GL_PROXY_TEXTURE_3D, GL_TEXTURE_2D_ARRAY or GL_PROXY_TEXTURE_2D_ARRAY.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// Specifies the format of the compressed image data stored at address data.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture image. All implementations support 3D texture images that are at least 16 texels wide.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture image. All implementations support 3D texture images that are at least 16 texels high.
        /// </para>
        /// </param>
        /// <param name="depth">
        /// <para>
        /// Specifies the depth of the texture image. All implementations support 3D texture images that are at least 16 texels deep.
        /// </para>
        /// </param>
        /// <param name="border">
        /// <para>
        /// This value must be 0.
        /// </para>
        /// </param>
        /// <param name="imageSize">
        /// <para>
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the compressed image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexImage3D")]
        public static extern void CompressedTexImage3D<T8>(OpenTK.Graphics.OpenGL4.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T8[] data)
            where T8 : struct
        ;

        /// <summary>[requires: v1.3]
        /// Specify a three-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_3D, GL_PROXY_TEXTURE_3D, GL_TEXTURE_2D_ARRAY or GL_PROXY_TEXTURE_2D_ARRAY.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// Specifies the format of the compressed image data stored at address data.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture image. All implementations support 3D texture images that are at least 16 texels wide.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture image. All implementations support 3D texture images that are at least 16 texels high.
        /// </para>
        /// </param>
        /// <param name="depth">
        /// <para>
        /// Specifies the depth of the texture image. All implementations support 3D texture images that are at least 16 texels deep.
        /// </para>
        /// </param>
        /// <param name="border">
        /// <para>
        /// This value must be 0.
        /// </para>
        /// </param>
        /// <param name="imageSize">
        /// <para>
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the compressed image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexImage3D")]
        public static extern void CompressedTexImage3D<T8>(OpenTK.Graphics.OpenGL4.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T8[,] data)
            where T8 : struct
        ;

        /// <summary>[requires: v1.3]
        /// Specify a three-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_3D, GL_PROXY_TEXTURE_3D, GL_TEXTURE_2D_ARRAY or GL_PROXY_TEXTURE_2D_ARRAY.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// Specifies the format of the compressed image data stored at address data.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture image. All implementations support 3D texture images that are at least 16 texels wide.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture image. All implementations support 3D texture images that are at least 16 texels high.
        /// </para>
        /// </param>
        /// <param name="depth">
        /// <para>
        /// Specifies the depth of the texture image. All implementations support 3D texture images that are at least 16 texels deep.
        /// </para>
        /// </param>
        /// <param name="border">
        /// <para>
        /// This value must be 0.
        /// </para>
        /// </param>
        /// <param name="imageSize">
        /// <para>
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the compressed image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexImage3D")]
        public static extern void CompressedTexImage3D<T8>(OpenTK.Graphics.OpenGL4.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T8[,,] data)
            where T8 : struct
        ;

        /// <summary>[requires: v1.3]
        /// Specify a three-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_3D, GL_PROXY_TEXTURE_3D, GL_TEXTURE_2D_ARRAY or GL_PROXY_TEXTURE_2D_ARRAY.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// Specifies the format of the compressed image data stored at address data.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture image. All implementations support 3D texture images that are at least 16 texels wide.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture image. All implementations support 3D texture images that are at least 16 texels high.
        /// </para>
        /// </param>
        /// <param name="depth">
        /// <para>
        /// Specifies the depth of the texture image. All implementations support 3D texture images that are at least 16 texels deep.
        /// </para>
        /// </param>
        /// <param name="border">
        /// <para>
        /// This value must be 0.
        /// </para>
        /// </param>
        /// <param name="imageSize">
        /// <para>
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the compressed image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexImage3D")]
        public static extern void CompressedTexImage3D<T8>(OpenTK.Graphics.OpenGL4.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] ref T8 data)
            where T8 : struct
        ;

        /// <summary>[requires: v1.3]
        /// Specify a one-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_1D.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="xoffset">
        /// <para>
        /// Specifies a texel offset in the x direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the compressed image data stored at address data.
        /// </para>
        /// </param>
        /// <param name="imageSize">
        /// <para>
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the compressed image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexSubImage1D")]
        public static extern void CompressedTexSubImage1D(OpenTK.Graphics.OpenGL4.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, OpenTK.Graphics.OpenGL4.PixelFormat format, Int32 imageSize, IntPtr data);

        /// <summary>[requires: v1.3]
        /// Specify a one-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_1D.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="xoffset">
        /// <para>
        /// Specifies a texel offset in the x direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the compressed image data stored at address data.
        /// </para>
        /// </param>
        /// <param name="imageSize">
        /// <para>
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the compressed image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexSubImage1D")]
        public static extern void CompressedTexSubImage1D<T6>(OpenTK.Graphics.OpenGL4.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, OpenTK.Graphics.OpenGL4.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] T6[] data)
            where T6 : struct
        ;

        /// <summary>[requires: v1.3]
        /// Specify a one-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_1D.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="xoffset">
        /// <para>
        /// Specifies a texel offset in the x direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the compressed image data stored at address data.
        /// </para>
        /// </param>
        /// <param name="imageSize">
        /// <para>
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the compressed image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexSubImage1D")]
        public static extern void CompressedTexSubImage1D<T6>(OpenTK.Graphics.OpenGL4.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, OpenTK.Graphics.OpenGL4.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] T6[,] data)
            where T6 : struct
        ;

        /// <summary>[requires: v1.3]
        /// Specify a one-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_1D.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="xoffset">
        /// <para>
        /// Specifies a texel offset in the x direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the compressed image data stored at address data.
        /// </para>
        /// </param>
        /// <param name="imageSize">
        /// <para>
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the compressed image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexSubImage1D")]
        public static extern void CompressedTexSubImage1D<T6>(OpenTK.Graphics.OpenGL4.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, OpenTK.Graphics.OpenGL4.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] T6[,,] data)
            where T6 : struct
        ;

        /// <summary>[requires: v1.3]
        /// Specify a one-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_1D.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="xoffset">
        /// <para>
        /// Specifies a texel offset in the x direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the compressed image data stored at address data.
        /// </para>
        /// </param>
        /// <param name="imageSize">
        /// <para>
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the compressed image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexSubImage1D")]
        public static extern void CompressedTexSubImage1D<T6>(OpenTK.Graphics.OpenGL4.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, OpenTK.Graphics.OpenGL4.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] ref T6 data)
            where T6 : struct
        ;

        /// <summary>[requires: v1.3]
        /// Specify a two-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_2D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, or GL_TEXTURE_CUBE_MAP_NEGATIVE_Z.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="xoffset">
        /// <para>
        /// Specifies a texel offset in the x direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="yoffset">
        /// <para>
        /// Specifies a texel offset in the y direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the compressed image data stored at address data.
        /// </para>
        /// </param>
        /// <param name="imageSize">
        /// <para>
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the compressed image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexSubImage2D")]
        public static extern void CompressedTexSubImage2D(OpenTK.Graphics.OpenGL4.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.OpenGL4.PixelFormat format, Int32 imageSize, IntPtr data);

        /// <summary>[requires: v1.3]
        /// Specify a two-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_2D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, or GL_TEXTURE_CUBE_MAP_NEGATIVE_Z.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="xoffset">
        /// <para>
        /// Specifies a texel offset in the x direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="yoffset">
        /// <para>
        /// Specifies a texel offset in the y direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the compressed image data stored at address data.
        /// </para>
        /// </param>
        /// <param name="imageSize">
        /// <para>
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the compressed image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexSubImage2D")]
        public static extern void CompressedTexSubImage2D<T8>(OpenTK.Graphics.OpenGL4.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.OpenGL4.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] T8[] data)
            where T8 : struct
        ;

        /// <summary>[requires: v1.3]
        /// Specify a two-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_2D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, or GL_TEXTURE_CUBE_MAP_NEGATIVE_Z.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="xoffset">
        /// <para>
        /// Specifies a texel offset in the x direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="yoffset">
        /// <para>
        /// Specifies a texel offset in the y direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the compressed image data stored at address data.
        /// </para>
        /// </param>
        /// <param name="imageSize">
        /// <para>
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the compressed image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexSubImage2D")]
        public static extern void CompressedTexSubImage2D<T8>(OpenTK.Graphics.OpenGL4.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.OpenGL4.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] T8[,] data)
            where T8 : struct
        ;

        /// <summary>[requires: v1.3]
        /// Specify a two-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_2D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, or GL_TEXTURE_CUBE_MAP_NEGATIVE_Z.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="xoffset">
        /// <para>
        /// Specifies a texel offset in the x direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="yoffset">
        /// <para>
        /// Specifies a texel offset in the y direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the compressed image data stored at address data.
        /// </para>
        /// </param>
        /// <param name="imageSize">
        /// <para>
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the compressed image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexSubImage2D")]
        public static extern void CompressedTexSubImage2D<T8>(OpenTK.Graphics.OpenGL4.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.OpenGL4.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] T8[,,] data)
            where T8 : struct
        ;

        /// <summary>[requires: v1.3]
        /// Specify a two-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_2D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, or GL_TEXTURE_CUBE_MAP_NEGATIVE_Z.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="xoffset">
        /// <para>
        /// Specifies a texel offset in the x direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="yoffset">
        /// <para>
        /// Specifies a texel offset in the y direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the compressed image data stored at address data.
        /// </para>
        /// </param>
        /// <param name="imageSize">
        /// <para>
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the compressed image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexSubImage2D")]
        public static extern void CompressedTexSubImage2D<T8>(OpenTK.Graphics.OpenGL4.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.OpenGL4.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] ref T8 data)
            where T8 : struct
        ;

        /// <summary>[requires: v1.3]
        /// Specify a three-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_3D.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="xoffset">
        /// <para>
        /// Specifies a texel offset in the x direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="yoffset">
        /// <para>
        /// Specifies a texel offset in the y direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="depth">
        /// <para>
        /// Specifies the depth of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the compressed image data stored at address data.
        /// </para>
        /// </param>
        /// <param name="imageSize">
        /// <para>
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the compressed image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexSubImage3D")]
        public static extern void CompressedTexSubImage3D(OpenTK.Graphics.OpenGL4.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.OpenGL4.PixelFormat format, Int32 imageSize, IntPtr data);

        /// <summary>[requires: v1.3]
        /// Specify a three-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_3D.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="xoffset">
        /// <para>
        /// Specifies a texel offset in the x direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="yoffset">
        /// <para>
        /// Specifies a texel offset in the y direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="depth">
        /// <para>
        /// Specifies the depth of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the compressed image data stored at address data.
        /// </para>
        /// </param>
        /// <param name="imageSize">
        /// <para>
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the compressed image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexSubImage3D")]
        public static extern void CompressedTexSubImage3D<T10>(OpenTK.Graphics.OpenGL4.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.OpenGL4.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] T10[] data)
            where T10 : struct
        ;

        /// <summary>[requires: v1.3]
        /// Specify a three-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_3D.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="xoffset">
        /// <para>
        /// Specifies a texel offset in the x direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="yoffset">
        /// <para>
        /// Specifies a texel offset in the y direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="depth">
        /// <para>
        /// Specifies the depth of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the compressed image data stored at address data.
        /// </para>
        /// </param>
        /// <param name="imageSize">
        /// <para>
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the compressed image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexSubImage3D")]
        public static extern void CompressedTexSubImage3D<T10>(OpenTK.Graphics.OpenGL4.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.OpenGL4.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] T10[,] data)
            where T10 : struct
        ;

        /// <summary>[requires: v1.3]
        /// Specify a three-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_3D.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="xoffset">
        /// <para>
        /// Specifies a texel offset in the x direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="yoffset">
        /// <para>
        /// Specifies a texel offset in the y direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="depth">
        /// <para>
        /// Specifies the depth of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the compressed image data stored at address data.
        /// </para>
        /// </param>
        /// <param name="imageSize">
        /// <para>
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the compressed image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexSubImage3D")]
        public static extern void CompressedTexSubImage3D<T10>(OpenTK.Graphics.OpenGL4.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.OpenGL4.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] T10[,,] data)
            where T10 : struct
        ;

        /// <summary>[requires: v1.3]
        /// Specify a three-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_3D.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="xoffset">
        /// <para>
        /// Specifies a texel offset in the x direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="yoffset">
        /// <para>
        /// Specifies a texel offset in the y direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="depth">
        /// <para>
        /// Specifies the depth of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the compressed image data stored at address data.
        /// </para>
        /// </param>
        /// <param name="imageSize">
        /// <para>
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the compressed image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexSubImage3D")]
        public static extern void CompressedTexSubImage3D<T10>(OpenTK.Graphics.OpenGL4.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.OpenGL4.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] ref T10 data)
            where T10 : struct
        ;

        /// <summary>
        /// Define a one-dimensional convolution filter
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Must be GL_CONVOLUTION_1D.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// The internal format of the convolution filter kernel. The allowable values are GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, or GL_RGBA16.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// The width of the pixel array referenced by data.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// The format of the pixel data in data. The allowable values are GL_ALPHA, GL_LUMINANCE, GL_LUMINANCE_ALPHA, GL_INTENSITY, GL_RGB, and GL_RGBA.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// The type of the pixel data in data. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Pointer to a one-dimensional array of pixel data that is processed to build the convolution filter kernel.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glConvolutionFilter1D")]
        public static extern void ConvolutionFilter1D(OpenTK.Graphics.OpenGL4.ConvolutionTarget target, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, Int32 width, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, IntPtr image);

        /// <summary>
        /// Define a one-dimensional convolution filter
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Must be GL_CONVOLUTION_1D.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// The internal format of the convolution filter kernel. The allowable values are GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, or GL_RGBA16.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// The width of the pixel array referenced by data.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// The format of the pixel data in data. The allowable values are GL_ALPHA, GL_LUMINANCE, GL_LUMINANCE_ALPHA, GL_INTENSITY, GL_RGB, and GL_RGBA.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// The type of the pixel data in data. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Pointer to a one-dimensional array of pixel data that is processed to build the convolution filter kernel.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glConvolutionFilter1D")]
        public static extern void ConvolutionFilter1D<T5>(OpenTK.Graphics.OpenGL4.ConvolutionTarget target, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, Int32 width, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute] T5[] image)
            where T5 : struct
        ;

        /// <summary>
        /// Define a one-dimensional convolution filter
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Must be GL_CONVOLUTION_1D.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// The internal format of the convolution filter kernel. The allowable values are GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, or GL_RGBA16.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// The width of the pixel array referenced by data.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// The format of the pixel data in data. The allowable values are GL_ALPHA, GL_LUMINANCE, GL_LUMINANCE_ALPHA, GL_INTENSITY, GL_RGB, and GL_RGBA.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// The type of the pixel data in data. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Pointer to a one-dimensional array of pixel data that is processed to build the convolution filter kernel.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glConvolutionFilter1D")]
        public static extern void ConvolutionFilter1D<T5>(OpenTK.Graphics.OpenGL4.ConvolutionTarget target, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, Int32 width, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute] T5[,] image)
            where T5 : struct
        ;

        /// <summary>
        /// Define a one-dimensional convolution filter
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Must be GL_CONVOLUTION_1D.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// The internal format of the convolution filter kernel. The allowable values are GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, or GL_RGBA16.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// The width of the pixel array referenced by data.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// The format of the pixel data in data. The allowable values are GL_ALPHA, GL_LUMINANCE, GL_LUMINANCE_ALPHA, GL_INTENSITY, GL_RGB, and GL_RGBA.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// The type of the pixel data in data. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Pointer to a one-dimensional array of pixel data that is processed to build the convolution filter kernel.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glConvolutionFilter1D")]
        public static extern void ConvolutionFilter1D<T5>(OpenTK.Graphics.OpenGL4.ConvolutionTarget target, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, Int32 width, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute] T5[,,] image)
            where T5 : struct
        ;

        /// <summary>
        /// Define a one-dimensional convolution filter
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Must be GL_CONVOLUTION_1D.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// The internal format of the convolution filter kernel. The allowable values are GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, or GL_RGBA16.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// The width of the pixel array referenced by data.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// The format of the pixel data in data. The allowable values are GL_ALPHA, GL_LUMINANCE, GL_LUMINANCE_ALPHA, GL_INTENSITY, GL_RGB, and GL_RGBA.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// The type of the pixel data in data. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Pointer to a one-dimensional array of pixel data that is processed to build the convolution filter kernel.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glConvolutionFilter1D")]
        public static extern void ConvolutionFilter1D<T5>(OpenTK.Graphics.OpenGL4.ConvolutionTarget target, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, Int32 width, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute] ref T5 image)
            where T5 : struct
        ;

        /// <summary>
        /// Define a two-dimensional convolution filter
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Must be GL_CONVOLUTION_2D.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// The internal format of the convolution filter kernel. The allowable values are GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, or GL_RGBA16.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// The width of the pixel array referenced by data.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// The height of the pixel array referenced by data.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// The format of the pixel data in data. The allowable values are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// The type of the pixel data in data. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Pointer to a two-dimensional array of pixel data that is processed to build the convolution filter kernel.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glConvolutionFilter2D")]
        public static extern void ConvolutionFilter2D(OpenTK.Graphics.OpenGL4.ConvolutionTarget target, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, Int32 width, Int32 height, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, IntPtr image);

        /// <summary>
        /// Define a two-dimensional convolution filter
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Must be GL_CONVOLUTION_2D.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// The internal format of the convolution filter kernel. The allowable values are GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, or GL_RGBA16.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// The width of the pixel array referenced by data.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// The height of the pixel array referenced by data.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// The format of the pixel data in data. The allowable values are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// The type of the pixel data in data. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Pointer to a two-dimensional array of pixel data that is processed to build the convolution filter kernel.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glConvolutionFilter2D")]
        public static extern void ConvolutionFilter2D<T6>(OpenTK.Graphics.OpenGL4.ConvolutionTarget target, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, Int32 width, Int32 height, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute] T6[] image)
            where T6 : struct
        ;

        /// <summary>
        /// Define a two-dimensional convolution filter
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Must be GL_CONVOLUTION_2D.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// The internal format of the convolution filter kernel. The allowable values are GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, or GL_RGBA16.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// The width of the pixel array referenced by data.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// The height of the pixel array referenced by data.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// The format of the pixel data in data. The allowable values are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// The type of the pixel data in data. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Pointer to a two-dimensional array of pixel data that is processed to build the convolution filter kernel.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glConvolutionFilter2D")]
        public static extern void ConvolutionFilter2D<T6>(OpenTK.Graphics.OpenGL4.ConvolutionTarget target, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, Int32 width, Int32 height, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute] T6[,] image)
            where T6 : struct
        ;

        /// <summary>
        /// Define a two-dimensional convolution filter
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Must be GL_CONVOLUTION_2D.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// The internal format of the convolution filter kernel. The allowable values are GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, or GL_RGBA16.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// The width of the pixel array referenced by data.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// The height of the pixel array referenced by data.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// The format of the pixel data in data. The allowable values are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// The type of the pixel data in data. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Pointer to a two-dimensional array of pixel data that is processed to build the convolution filter kernel.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glConvolutionFilter2D")]
        public static extern void ConvolutionFilter2D<T6>(OpenTK.Graphics.OpenGL4.ConvolutionTarget target, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, Int32 width, Int32 height, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute] T6[,,] image)
            where T6 : struct
        ;

        /// <summary>
        /// Define a two-dimensional convolution filter
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Must be GL_CONVOLUTION_2D.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// The internal format of the convolution filter kernel. The allowable values are GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, or GL_RGBA16.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// The width of the pixel array referenced by data.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// The height of the pixel array referenced by data.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// The format of the pixel data in data. The allowable values are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// The type of the pixel data in data. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Pointer to a two-dimensional array of pixel data that is processed to build the convolution filter kernel.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glConvolutionFilter2D")]
        public static extern void ConvolutionFilter2D<T6>(OpenTK.Graphics.OpenGL4.ConvolutionTarget target, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, Int32 width, Int32 height, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute] ref T6 image)
            where T6 : struct
        ;

        /// <summary>
        /// Set convolution parameters
        /// </summary>
        /// <param name="target">
        /// <para>
        /// The target for the convolution parameter. Must be one of GL_CONVOLUTION_1D, GL_CONVOLUTION_2D, or GL_SEPARABLE_2D.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// The parameter to be set. Must be GL_CONVOLUTION_BORDER_MODE.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// The parameter value. Must be one of GL_REDUCE, GL_CONSTANT_BORDER, GL_REPLICATE_BORDER.
        /// </para>
        /// <para>
        ///
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glConvolutionParameterf")]
        public static extern void ConvolutionParameter(OpenTK.Graphics.OpenGL4.ConvolutionTarget target, OpenTK.Graphics.OpenGL4.ConvolutionParameter pname, Single @params);

        /// <summary>
        /// Set convolution parameters
        /// </summary>
        /// <param name="target">
        /// <para>
        /// The target for the convolution parameter. Must be one of GL_CONVOLUTION_1D, GL_CONVOLUTION_2D, or GL_SEPARABLE_2D.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// The parameter to be set. Must be GL_CONVOLUTION_BORDER_MODE.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// The parameter value. Must be one of GL_REDUCE, GL_CONSTANT_BORDER, GL_REPLICATE_BORDER.
        /// </para>
        /// <para>
        ///
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glConvolutionParameterfv")]
        public static extern void ConvolutionParameter(OpenTK.Graphics.OpenGL4.ConvolutionTarget target, OpenTK.Graphics.OpenGL4.ConvolutionParameter pname, Single[] @params);

        /// <summary>
        /// Set convolution parameters
        /// </summary>
        /// <param name="target">
        /// <para>
        /// The target for the convolution parameter. Must be one of GL_CONVOLUTION_1D, GL_CONVOLUTION_2D, or GL_SEPARABLE_2D.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// The parameter to be set. Must be GL_CONVOLUTION_BORDER_MODE.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// The parameter value. Must be one of GL_REDUCE, GL_CONSTANT_BORDER, GL_REPLICATE_BORDER.
        /// </para>
        /// <para>
        ///
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glConvolutionParameterfv")]
        public static extern unsafe void ConvolutionParameter(OpenTK.Graphics.OpenGL4.ConvolutionTarget target, OpenTK.Graphics.OpenGL4.ConvolutionParameter pname, Single* @params);

        /// <summary>
        /// Set convolution parameters
        /// </summary>
        /// <param name="target">
        /// <para>
        /// The target for the convolution parameter. Must be one of GL_CONVOLUTION_1D, GL_CONVOLUTION_2D, or GL_SEPARABLE_2D.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// The parameter to be set. Must be GL_CONVOLUTION_BORDER_MODE.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// The parameter value. Must be one of GL_REDUCE, GL_CONSTANT_BORDER, GL_REPLICATE_BORDER.
        /// </para>
        /// <para>
        ///
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glConvolutionParameteri")]
        public static extern void ConvolutionParameter(OpenTK.Graphics.OpenGL4.ConvolutionTarget target, OpenTK.Graphics.OpenGL4.ConvolutionParameter pname, Int32 @params);

        /// <summary>
        /// Set convolution parameters
        /// </summary>
        /// <param name="target">
        /// <para>
        /// The target for the convolution parameter. Must be one of GL_CONVOLUTION_1D, GL_CONVOLUTION_2D, or GL_SEPARABLE_2D.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// The parameter to be set. Must be GL_CONVOLUTION_BORDER_MODE.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// The parameter value. Must be one of GL_REDUCE, GL_CONSTANT_BORDER, GL_REPLICATE_BORDER.
        /// </para>
        /// <para>
        ///
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glConvolutionParameteriv")]
        public static extern void ConvolutionParameter(OpenTK.Graphics.OpenGL4.ConvolutionTarget target, OpenTK.Graphics.OpenGL4.ConvolutionParameter pname, Int32[] @params);

        /// <summary>
        /// Set convolution parameters
        /// </summary>
        /// <param name="target">
        /// <para>
        /// The target for the convolution parameter. Must be one of GL_CONVOLUTION_1D, GL_CONVOLUTION_2D, or GL_SEPARABLE_2D.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// The parameter to be set. Must be GL_CONVOLUTION_BORDER_MODE.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// The parameter value. Must be one of GL_REDUCE, GL_CONSTANT_BORDER, GL_REPLICATE_BORDER.
        /// </para>
        /// <para>
        ///
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glConvolutionParameteriv")]
        public static extern unsafe void ConvolutionParameter(OpenTK.Graphics.OpenGL4.ConvolutionTarget target, OpenTK.Graphics.OpenGL4.ConvolutionParameter pname, Int32* @params);

        /// <summary>[requires: v3.1 and ARB_copy_buffer|VERSION_3_1]
        /// Copy part of the data store of a buffer object to the data store of another buffer object
        /// </summary>
        /// <param name="readtarget">
        /// <para>
        /// Specifies the target from whose data store data should be read.
        /// </para>
        /// </param>
        /// <param name="writetarget">
        /// <para>
        /// Specifies the target to whose data store data should be written.
        /// </para>
        /// </param>
        /// <param name="readoffset">
        /// <para>
        /// Specifies the offset, in basic machine units, within the data store of readtarget from which data should be read.
        /// </para>
        /// </param>
        /// <param name="writeoffset">
        /// <para>
        /// Specifies the offset, in basic machine units, within the data store of writetarget to which data should be written.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Specifies the size, in basic machine units, of the data to be copied from readtarget to writetarget.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_copy_buffer|VERSION_3_1", Version = "3.1", EntryPoint = "glCopyBufferSubData")]
        public static extern void CopyBufferSubData(OpenTK.Graphics.OpenGL4.BufferTarget readTarget, OpenTK.Graphics.OpenGL4.BufferTarget writeTarget, IntPtr readOffset, IntPtr writeOffset, IntPtr size);

        /// <summary>
        /// Respecify a portion of a color table
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Must be one of GL_COLOR_TABLE, GL_POST_CONVOLUTION_COLOR_TABLE, or GL_POST_COLOR_MATRIX_COLOR_TABLE.
        /// </para>
        /// </param>
        /// <param name="start">
        /// <para>
        /// The starting index of the portion of the color table to be replaced.
        /// </para>
        /// </param>
        /// <param name="x">
        /// <para>
        /// The window coordinates of the left corner of the row of pixels to be copied.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// The number of table entries to replace.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glCopyColorSubTable")]
        public static extern void CopyColorSubTable(OpenTK.Graphics.OpenGL4.ColorTableTarget target, Int32 start, Int32 x, Int32 y, Int32 width);

        /// <summary>
        /// Copy pixels into a color table
        /// </summary>
        /// <param name="target">
        /// <para>
        /// The color table target. Must be GL_COLOR_TABLE, GL_POST_CONVOLUTION_COLOR_TABLE, or GL_POST_COLOR_MATRIX_COLOR_TABLE.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// The internal storage format of the texture image. Must be one of the following symbolic constants: GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, or GL_RGBA16.
        /// </para>
        /// </param>
        /// <param name="x">
        /// <para>
        /// The x coordinate of the lower-left corner of the pixel rectangle to be transferred to the color table.
        /// </para>
        /// </param>
        /// <param name="y">
        /// <para>
        /// The y coordinate of the lower-left corner of the pixel rectangle to be transferred to the color table.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// The width of the pixel rectangle.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glCopyColorTable")]
        public static extern void CopyColorTable(OpenTK.Graphics.OpenGL4.ColorTableTarget target, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, Int32 x, Int32 y, Int32 width);

        /// <summary>
        /// Copy pixels into a one-dimensional convolution filter
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Must be GL_CONVOLUTION_1D.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// The internal format of the convolution filter kernel. The allowable values are GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, or GL_RGBA16.
        /// </para>
        /// </param>
        /// <param name="x">
        /// <para>
        /// The window space coordinates of the lower-left coordinate of the pixel array to copy.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// The width of the pixel array to copy.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glCopyConvolutionFilter1D")]
        public static extern void CopyConvolutionFilter1D(OpenTK.Graphics.OpenGL4.ConvolutionTarget target, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, Int32 x, Int32 y, Int32 width);

        /// <summary>
        /// Copy pixels into a two-dimensional convolution filter
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Must be GL_CONVOLUTION_2D.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// The internal format of the convolution filter kernel. The allowable values are GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, or GL_RGBA16.
        /// </para>
        /// </param>
        /// <param name="x">
        /// <para>
        /// The window space coordinates of the lower-left coordinate of the pixel array to copy.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// The width of the pixel array to copy.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// The height of the pixel array to copy.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glCopyConvolutionFilter2D")]
        public static extern void CopyConvolutionFilter2D(OpenTK.Graphics.OpenGL4.ConvolutionTarget target, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, Int32 x, Int32 y, Int32 width, Int32 height);

        /// <summary>[requires: v4.3 and ARB_copy_image|VERSION_4_3]
        /// Perform a raw data copy between two images
        /// </summary>
        /// <param name="srcName">
        /// <para>
        /// The name of a texture or renderbuffer object from which to copy.
        /// </para>
        /// </param>
        /// <param name="srcTarget">
        /// <para>
        /// The target representing the namespace of the source name srcName.
        /// </para>
        /// </param>
        /// <param name="srcLevel">
        /// <para>
        /// The mipmap level to read from the source.
        /// </para>
        /// </param>
        /// <param name="srcX">
        /// <para>
        /// The X coordinate of the left edge of the souce region to copy.
        /// </para>
        /// </param>
        /// <param name="srcY">
        /// <para>
        /// The Y coordinate of the top edge of the souce region to copy.
        /// </para>
        /// </param>
        /// <param name="srcZ">
        /// <para>
        /// The Z coordinate of the near edge of the souce region to copy.
        /// </para>
        /// </param>
        /// <param name="dstName">
        /// <para>
        /// The name of a texture or renderbuffer object to which to copy.
        /// </para>
        /// </param>
        /// <param name="dstTarget">
        /// <para>
        /// The target representing the namespace of the destination name dstName.
        /// </para>
        /// </param>
        /// <param name="dstX">
        /// <para>
        /// The X coordinate of the left edge of the destination region.
        /// </para>
        /// </param>
        /// <param name="dstY">
        /// <para>
        /// The Y coordinate of the top edge of the destination region.
        /// </para>
        /// </param>
        /// <param name="dstZ">
        /// <para>
        /// The Z coordinate of the near edge of the destination region.
        /// </para>
        /// </param>
        /// <param name="srcWidth">
        /// <para>
        /// The width of the region to be copied.
        /// </para>
        /// </param>
        /// <param name="srcHeight">
        /// <para>
        /// The height of the region to be copied.
        /// </para>
        /// </param>
        /// <param name="srcDepth">
        /// <para>
        /// The depth of the region to be copied.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_copy_image|VERSION_4_3", Version = "4.3", EntryPoint = "glCopyImageSubData")]
        public static extern void CopyImageSubData(Int32 srcName, OpenTK.Graphics.OpenGL4.ImageTarget srcTarget, Int32 srcLevel, Int32 srcX, Int32 srcY, Int32 srcZ, Int32 dstName, OpenTK.Graphics.OpenGL4.ImageTarget dstTarget, Int32 dstLevel, Int32 dstX, Int32 dstY, Int32 dstZ, Int32 srcWidth, Int32 srcHeight, Int32 srcDepth);

        /// <summary>[requires: v4.3 and ARB_copy_image|VERSION_4_3]
        /// Perform a raw data copy between two images
        /// </summary>
        /// <param name="srcName">
        /// <para>
        /// The name of a texture or renderbuffer object from which to copy.
        /// </para>
        /// </param>
        /// <param name="srcTarget">
        /// <para>
        /// The target representing the namespace of the source name srcName.
        /// </para>
        /// </param>
        /// <param name="srcLevel">
        /// <para>
        /// The mipmap level to read from the source.
        /// </para>
        /// </param>
        /// <param name="srcX">
        /// <para>
        /// The X coordinate of the left edge of the souce region to copy.
        /// </para>
        /// </param>
        /// <param name="srcY">
        /// <para>
        /// The Y coordinate of the top edge of the souce region to copy.
        /// </para>
        /// </param>
        /// <param name="srcZ">
        /// <para>
        /// The Z coordinate of the near edge of the souce region to copy.
        /// </para>
        /// </param>
        /// <param name="dstName">
        /// <para>
        /// The name of a texture or renderbuffer object to which to copy.
        /// </para>
        /// </param>
        /// <param name="dstTarget">
        /// <para>
        /// The target representing the namespace of the destination name dstName.
        /// </para>
        /// </param>
        /// <param name="dstX">
        /// <para>
        /// The X coordinate of the left edge of the destination region.
        /// </para>
        /// </param>
        /// <param name="dstY">
        /// <para>
        /// The Y coordinate of the top edge of the destination region.
        /// </para>
        /// </param>
        /// <param name="dstZ">
        /// <para>
        /// The Z coordinate of the near edge of the destination region.
        /// </para>
        /// </param>
        /// <param name="srcWidth">
        /// <para>
        /// The width of the region to be copied.
        /// </para>
        /// </param>
        /// <param name="srcHeight">
        /// <para>
        /// The height of the region to be copied.
        /// </para>
        /// </param>
        /// <param name="srcDepth">
        /// <para>
        /// The depth of the region to be copied.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_copy_image|VERSION_4_3", Version = "4.3", EntryPoint = "glCopyImageSubData")]
        public static extern void CopyImageSubData(UInt32 srcName, OpenTK.Graphics.OpenGL4.ImageTarget srcTarget, Int32 srcLevel, Int32 srcX, Int32 srcY, Int32 srcZ, UInt32 dstName, OpenTK.Graphics.OpenGL4.ImageTarget dstTarget, Int32 dstLevel, Int32 dstX, Int32 dstY, Int32 dstZ, Int32 srcWidth, Int32 srcHeight, Int32 srcDepth);

        /// <summary>[requires: v1.1]
        /// Copy pixels into a 1D texture image
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_1D.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// Specifies the internal format of the texture. Must be one of the following symbolic constants: GL_COMPRESSED_RED, GL_COMPRESSED_RG, GL_COMPRESSED_RGB, GL_COMPRESSED_RGBA. GL_COMPRESSED_SRGB, GL_COMPRESSED_SRGB_ALPHA. GL_DEPTH_COMPONENT, GL_DEPTH_COMPONENT16, GL_DEPTH_COMPONENT24, GL_DEPTH_COMPONENT32, GL_STENCIL_INDEX8, GL_RED, GL_RG, GL_RGB, GL_R3_G3_B2, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, GL_RGBA16, GL_SRGB, GL_SRGB8, GL_SRGB_ALPHA, or GL_SRGB8_ALPHA8.
        /// </para>
        /// </param>
        /// <param name="x">
        /// <para>
        /// Specify the window coordinates of the left corner of the row of pixels to be copied.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture image. The height of the texture image is 1.
        /// </para>
        /// </param>
        /// <param name="border">
        /// <para>
        /// Must be 0.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glCopyTexImage1D")]
        public static extern void CopyTexImage1D(OpenTK.Graphics.OpenGL4.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, Int32 x, Int32 y, Int32 width, Int32 border);

        /// <summary>[requires: v1.1]
        /// Copy pixels into a 2D texture image
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_2D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, or GL_TEXTURE_CUBE_MAP_NEGATIVE_Z.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// Specifies the internal format of the texture. Must be one of the following symbolic constants: GL_COMPRESSED_RED, GL_COMPRESSED_RG, GL_COMPRESSED_RGB, GL_COMPRESSED_RGBA. GL_COMPRESSED_SRGB, GL_COMPRESSED_SRGB_ALPHA. GL_DEPTH_COMPONENT, GL_DEPTH_COMPONENT16, GL_DEPTH_COMPONENT24, GL_DEPTH_COMPONENT32, GL_STENCIL_INDEX8, GL_RED, GL_RG, GL_RGB, GL_R3_G3_B2, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, GL_RGBA16, GL_SRGB, GL_SRGB8, GL_SRGB_ALPHA, or GL_SRGB8_ALPHA8.
        /// </para>
        /// </param>
        /// <param name="x">
        /// <para>
        /// Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture image.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture image.
        /// </para>
        /// </param>
        /// <param name="border">
        /// <para>
        /// Must be 0.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glCopyTexImage2D")]
        public static extern void CopyTexImage2D(OpenTK.Graphics.OpenGL4.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, Int32 x, Int32 y, Int32 width, Int32 height, Int32 border);

        /// <summary>[requires: v1.1]
        /// Copy a one-dimensional texture subimage
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_1D.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="xoffset">
        /// <para>
        /// Specifies the texel offset within the texture array.
        /// </para>
        /// </param>
        /// <param name="x">
        /// <para>
        /// Specify the window coordinates of the left corner of the row of pixels to be copied.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture subimage.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glCopyTexSubImage1D")]
        public static extern void CopyTexSubImage1D(OpenTK.Graphics.OpenGL4.TextureTarget target, Int32 level, Int32 xoffset, Int32 x, Int32 y, Int32 width);

        /// <summary>[requires: v1.1]
        /// Copy a two-dimensional texture subimage
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_2D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, GL_TEXTURE_CUBE_MAP_NEGATIVE_Z, or GL_TEXTURE_1D_ARRAY.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="xoffset">
        /// <para>
        /// Specifies a texel offset in the x direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="yoffset">
        /// <para>
        /// Specifies a texel offset in the y direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="x">
        /// <para>
        /// Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture subimage.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glCopyTexSubImage2D")]
        public static extern void CopyTexSubImage2D(OpenTK.Graphics.OpenGL4.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 x, Int32 y, Int32 width, Int32 height);

        /// <summary>[requires: v1.2]
        /// Copy a three-dimensional texture subimage
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_3D or GL_TEXTURE_2D_ARRAY.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="xoffset">
        /// <para>
        /// Specifies a texel offset in the x direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="yoffset">
        /// <para>
        /// Specifies a texel offset in the y direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="zoffset">
        /// <para>
        /// Specifies a texel offset in the z direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="x">
        /// <para>
        /// Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture subimage.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_2", Version = "1.2", EntryPoint = "glCopyTexSubImage3D")]
        public static extern void CopyTexSubImage3D(OpenTK.Graphics.OpenGL4.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 x, Int32 y, Int32 width, Int32 height);

        /// <summary>[requires: v2.0]
        /// Creates a program object
        /// </summary>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glCreateProgram")]
        public static extern Int32 CreateProgram();

        /// <summary>[requires: v2.0]
        /// Creates a shader object
        /// </summary>
        /// <param name="shaderType">
        /// <para>
        /// Specifies the type of shader to be created. Must be one of GL_COMPUTE_SHADER, GL_VERTEX_SHADER, GL_TESS_CONTROL_SHADER, GL_TESS_EVALUATION_SHADER, GL_GEOMETRY_SHADER, or GL_FRAGMENT_SHADER.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glCreateShader")]
        public static extern Int32 CreateShader(OpenTK.Graphics.OpenGL4.ShaderType type);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Create a stand-alone program from an array of null-terminated source code strings
        /// </summary>
        /// <param name="type">
        /// <para>
        /// Specifies the type of shader to create.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of source code strings in the array strings.
        /// </para>
        /// </param>
        /// <param name="strings">
        /// <para>
        /// Specifies the address of an array of pointers to source code strings from which to create the program object.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glCreateShaderProgramv")]
        public static extern Int32 CreateShaderProgram(OpenTK.Graphics.OpenGL4.ShaderType type, Int32 count, String[] strings);

        /// <summary>[requires: v1.0]
        /// Specify whether front- or back-facing facets can be culled
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies whether front- or back-facing facets are candidates for culling. Symbolic constants GL_FRONT, GL_BACK, and GL_FRONT_AND_BACK are accepted. The initial value is GL_BACK.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glCullFace")]
        public static extern void CullFace(OpenTK.Graphics.OpenGL4.CullFaceMode mode);

        /// <summary>[requires: v4.3 and KHR_debug|VERSION_4_3]
        /// Specify a callback to receive debugging messages from the GL
        /// </summary>
        /// <param name="callback">
        /// <para>
        /// The address of a callback function that will be called when a debug message is generated.
        /// </para>
        /// </param>
        /// <param name="userParam">
        /// <para>
        /// A user supplied pointer that will be passed on each invocation of callback.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glDebugMessageCallback")]
        public static extern void DebugMessageCallback(DebugProc callback, IntPtr userParam);

        /// <summary>[requires: v4.3 and KHR_debug|VERSION_4_3]
        /// Specify a callback to receive debugging messages from the GL
        /// </summary>
        /// <param name="callback">
        /// <para>
        /// The address of a callback function that will be called when a debug message is generated.
        /// </para>
        /// </param>
        /// <param name="userParam">
        /// <para>
        /// A user supplied pointer that will be passed on each invocation of callback.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glDebugMessageCallback")]
        public static extern void DebugMessageCallback<T1>(DebugProc callback, [InAttribute, OutAttribute] T1[] userParam)
            where T1 : struct
        ;

        /// <summary>[requires: v4.3 and KHR_debug|VERSION_4_3]
        /// Specify a callback to receive debugging messages from the GL
        /// </summary>
        /// <param name="callback">
        /// <para>
        /// The address of a callback function that will be called when a debug message is generated.
        /// </para>
        /// </param>
        /// <param name="userParam">
        /// <para>
        /// A user supplied pointer that will be passed on each invocation of callback.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glDebugMessageCallback")]
        public static extern void DebugMessageCallback<T1>(DebugProc callback, [InAttribute, OutAttribute] T1[,] userParam)
            where T1 : struct
        ;

        /// <summary>[requires: v4.3 and KHR_debug|VERSION_4_3]
        /// Specify a callback to receive debugging messages from the GL
        /// </summary>
        /// <param name="callback">
        /// <para>
        /// The address of a callback function that will be called when a debug message is generated.
        /// </para>
        /// </param>
        /// <param name="userParam">
        /// <para>
        /// A user supplied pointer that will be passed on each invocation of callback.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glDebugMessageCallback")]
        public static extern void DebugMessageCallback<T1>(DebugProc callback, [InAttribute, OutAttribute] T1[,,] userParam)
            where T1 : struct
        ;

        /// <summary>[requires: v4.3 and KHR_debug|VERSION_4_3]
        /// Specify a callback to receive debugging messages from the GL
        /// </summary>
        /// <param name="callback">
        /// <para>
        /// The address of a callback function that will be called when a debug message is generated.
        /// </para>
        /// </param>
        /// <param name="userParam">
        /// <para>
        /// A user supplied pointer that will be passed on each invocation of callback.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glDebugMessageCallback")]
        public static extern void DebugMessageCallback<T1>(DebugProc callback, [InAttribute, OutAttribute] ref T1 userParam)
            where T1 : struct
        ;

        /// <summary>[requires: v4.3 and KHR_debug|VERSION_4_3]
        /// Control the reporting of debug messages in a debug context
        /// </summary>
        /// <param name="source">
        /// <para>
        /// The source of debug messages to enable or disable.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// The type of debug messages to enable or disable.
        /// </para>
        /// </param>
        /// <param name="severity">
        /// <para>
        /// The severity of debug messages to enable or disable.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// The length of the array ids.
        /// </para>
        /// </param>
        /// <param name="ids">
        /// <para>
        /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
        /// </para>
        /// </param>
        /// <param name="enabled">
        /// <para>
        /// A Boolean flag determining whether the selected messages should be enabled or disabled.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glDebugMessageControl")]
        public static extern void DebugMessageControl(OpenTK.Graphics.OpenGL4.DebugSourceControl source, OpenTK.Graphics.OpenGL4.DebugTypeControl type, OpenTK.Graphics.OpenGL4.DebugSeverityControl severity, Int32 count, Int32[] ids, bool enabled);

        /// <summary>[requires: v4.3 and KHR_debug|VERSION_4_3]
        /// Control the reporting of debug messages in a debug context
        /// </summary>
        /// <param name="source">
        /// <para>
        /// The source of debug messages to enable or disable.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// The type of debug messages to enable or disable.
        /// </para>
        /// </param>
        /// <param name="severity">
        /// <para>
        /// The severity of debug messages to enable or disable.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// The length of the array ids.
        /// </para>
        /// </param>
        /// <param name="ids">
        /// <para>
        /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
        /// </para>
        /// </param>
        /// <param name="enabled">
        /// <para>
        /// A Boolean flag determining whether the selected messages should be enabled or disabled.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glDebugMessageControl")]
        public static extern void DebugMessageControl(OpenTK.Graphics.OpenGL4.DebugSourceControl source, OpenTK.Graphics.OpenGL4.DebugTypeControl type, OpenTK.Graphics.OpenGL4.DebugSeverityControl severity, Int32 count, ref Int32 ids, bool enabled);

        /// <summary>[requires: v4.3 and KHR_debug|VERSION_4_3]
        /// Control the reporting of debug messages in a debug context
        /// </summary>
        /// <param name="source">
        /// <para>
        /// The source of debug messages to enable or disable.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// The type of debug messages to enable or disable.
        /// </para>
        /// </param>
        /// <param name="severity">
        /// <para>
        /// The severity of debug messages to enable or disable.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// The length of the array ids.
        /// </para>
        /// </param>
        /// <param name="ids">
        /// <para>
        /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
        /// </para>
        /// </param>
        /// <param name="enabled">
        /// <para>
        /// A Boolean flag determining whether the selected messages should be enabled or disabled.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glDebugMessageControl")]
        public static extern unsafe void DebugMessageControl(OpenTK.Graphics.OpenGL4.DebugSourceControl source, OpenTK.Graphics.OpenGL4.DebugTypeControl type, OpenTK.Graphics.OpenGL4.DebugSeverityControl severity, Int32 count, Int32* ids, bool enabled);

        /// <summary>[requires: v4.3 and KHR_debug|VERSION_4_3]
        /// Control the reporting of debug messages in a debug context
        /// </summary>
        /// <param name="source">
        /// <para>
        /// The source of debug messages to enable or disable.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// The type of debug messages to enable or disable.
        /// </para>
        /// </param>
        /// <param name="severity">
        /// <para>
        /// The severity of debug messages to enable or disable.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// The length of the array ids.
        /// </para>
        /// </param>
        /// <param name="ids">
        /// <para>
        /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
        /// </para>
        /// </param>
        /// <param name="enabled">
        /// <para>
        /// A Boolean flag determining whether the selected messages should be enabled or disabled.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glDebugMessageControl")]
        public static extern void DebugMessageControl(OpenTK.Graphics.OpenGL4.DebugSourceControl source, OpenTK.Graphics.OpenGL4.DebugTypeControl type, OpenTK.Graphics.OpenGL4.DebugSeverityControl severity, Int32 count, UInt32[] ids, bool enabled);

        /// <summary>[requires: v4.3 and KHR_debug|VERSION_4_3]
        /// Control the reporting of debug messages in a debug context
        /// </summary>
        /// <param name="source">
        /// <para>
        /// The source of debug messages to enable or disable.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// The type of debug messages to enable or disable.
        /// </para>
        /// </param>
        /// <param name="severity">
        /// <para>
        /// The severity of debug messages to enable or disable.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// The length of the array ids.
        /// </para>
        /// </param>
        /// <param name="ids">
        /// <para>
        /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
        /// </para>
        /// </param>
        /// <param name="enabled">
        /// <para>
        /// A Boolean flag determining whether the selected messages should be enabled or disabled.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glDebugMessageControl")]
        public static extern void DebugMessageControl(OpenTK.Graphics.OpenGL4.DebugSourceControl source, OpenTK.Graphics.OpenGL4.DebugTypeControl type, OpenTK.Graphics.OpenGL4.DebugSeverityControl severity, Int32 count, ref UInt32 ids, bool enabled);

        /// <summary>[requires: v4.3 and KHR_debug|VERSION_4_3]
        /// Control the reporting of debug messages in a debug context
        /// </summary>
        /// <param name="source">
        /// <para>
        /// The source of debug messages to enable or disable.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// The type of debug messages to enable or disable.
        /// </para>
        /// </param>
        /// <param name="severity">
        /// <para>
        /// The severity of debug messages to enable or disable.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// The length of the array ids.
        /// </para>
        /// </param>
        /// <param name="ids">
        /// <para>
        /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
        /// </para>
        /// </param>
        /// <param name="enabled">
        /// <para>
        /// A Boolean flag determining whether the selected messages should be enabled or disabled.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glDebugMessageControl")]
        public static extern unsafe void DebugMessageControl(OpenTK.Graphics.OpenGL4.DebugSourceControl source, OpenTK.Graphics.OpenGL4.DebugTypeControl type, OpenTK.Graphics.OpenGL4.DebugSeverityControl severity, Int32 count, UInt32* ids, bool enabled);

        /// <summary>[requires: v4.3 and KHR_debug|VERSION_4_3]
        /// Inject an application-supplied message into the debug message queue
        /// </summary>
        /// <param name="source">
        /// <para>
        /// The source of the debug message to insert.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// The type of the debug message insert.
        /// </para>
        /// </param>
        /// <param name="id">
        /// <para>
        /// The user-supplied identifier of the message to insert.
        /// </para>
        /// </param>
        /// <param name="severity">
        /// <para>
        /// The severity of the debug messages to insert.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// The length string contained in the character array whose address is given by message.
        /// </para>
        /// </param>
        /// <param name="message">
        /// <para>
        /// The address of a character array containing the message to insert.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glDebugMessageInsert")]
        public static extern void DebugMessageInsert(OpenTK.Graphics.OpenGL4.DebugSourceExternal source, OpenTK.Graphics.OpenGL4.DebugType type, Int32 id, OpenTK.Graphics.OpenGL4.DebugSeverity severity, Int32 length, String buf);

        /// <summary>[requires: v4.3 and KHR_debug|VERSION_4_3]
        /// Inject an application-supplied message into the debug message queue
        /// </summary>
        /// <param name="source">
        /// <para>
        /// The source of the debug message to insert.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// The type of the debug message insert.
        /// </para>
        /// </param>
        /// <param name="id">
        /// <para>
        /// The user-supplied identifier of the message to insert.
        /// </para>
        /// </param>
        /// <param name="severity">
        /// <para>
        /// The severity of the debug messages to insert.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// The length string contained in the character array whose address is given by message.
        /// </para>
        /// </param>
        /// <param name="message">
        /// <para>
        /// The address of a character array containing the message to insert.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glDebugMessageInsert")]
        public static extern void DebugMessageInsert(OpenTK.Graphics.OpenGL4.DebugSourceExternal source, OpenTK.Graphics.OpenGL4.DebugType type, UInt32 id, OpenTK.Graphics.OpenGL4.DebugSeverity severity, Int32 length, String buf);

        /// <summary>[requires: v1.5]
        /// Delete named buffer objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of buffer objects to be deleted.
        /// </para>
        /// </param>
        /// <param name="buffers">
        /// <para>
        /// Specifies an array of buffer objects to be deleted.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glDeleteBuffers")]
        public static extern void DeleteBuffer(Int32 buffers);

        /// <summary>[requires: v1.5]
        /// Delete named buffer objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of buffer objects to be deleted.
        /// </para>
        /// </param>
        /// <param name="buffers">
        /// <para>
        /// Specifies an array of buffer objects to be deleted.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glDeleteBuffers")]
        public static extern void DeleteBuffer(UInt32 buffers);

        /// <summary>[requires: v1.5]
        /// Delete named buffer objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of buffer objects to be deleted.
        /// </para>
        /// </param>
        /// <param name="buffers">
        /// <para>
        /// Specifies an array of buffer objects to be deleted.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glDeleteBuffers")]
        public static extern void DeleteBuffers(Int32 n, Int32[] buffers);

        /// <summary>[requires: v1.5]
        /// Delete named buffer objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of buffer objects to be deleted.
        /// </para>
        /// </param>
        /// <param name="buffers">
        /// <para>
        /// Specifies an array of buffer objects to be deleted.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glDeleteBuffers")]
        public static extern void DeleteBuffers(Int32 n, ref Int32 buffers);

        /// <summary>[requires: v1.5]
        /// Delete named buffer objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of buffer objects to be deleted.
        /// </para>
        /// </param>
        /// <param name="buffers">
        /// <para>
        /// Specifies an array of buffer objects to be deleted.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glDeleteBuffers")]
        public static extern unsafe void DeleteBuffers(Int32 n, Int32* buffers);

        /// <summary>[requires: v1.5]
        /// Delete named buffer objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of buffer objects to be deleted.
        /// </para>
        /// </param>
        /// <param name="buffers">
        /// <para>
        /// Specifies an array of buffer objects to be deleted.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glDeleteBuffers")]
        public static extern void DeleteBuffers(Int32 n, UInt32[] buffers);

        /// <summary>[requires: v1.5]
        /// Delete named buffer objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of buffer objects to be deleted.
        /// </para>
        /// </param>
        /// <param name="buffers">
        /// <para>
        /// Specifies an array of buffer objects to be deleted.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glDeleteBuffers")]
        public static extern void DeleteBuffers(Int32 n, ref UInt32 buffers);

        /// <summary>[requires: v1.5]
        /// Delete named buffer objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of buffer objects to be deleted.
        /// </para>
        /// </param>
        /// <param name="buffers">
        /// <para>
        /// Specifies an array of buffer objects to be deleted.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glDeleteBuffers")]
        public static extern unsafe void DeleteBuffers(Int32 n, UInt32* buffers);

        /// <summary>[requires: v3.0 and ARB_framebuffer_object|VERSION_3_0]
        /// Delete framebuffer objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of framebuffer objects to be deleted.
        /// </para>
        /// </param>
        /// <param name="framebuffers">
        /// <para>
        /// A pointer to an array containing n framebuffer objects to be deleted.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glDeleteFramebuffers")]
        public static extern void DeleteFramebuffer(Int32 framebuffers);

        /// <summary>[requires: v3.0 and ARB_framebuffer_object|VERSION_3_0]
        /// Delete framebuffer objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of framebuffer objects to be deleted.
        /// </para>
        /// </param>
        /// <param name="framebuffers">
        /// <para>
        /// A pointer to an array containing n framebuffer objects to be deleted.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glDeleteFramebuffers")]
        public static extern void DeleteFramebuffer(UInt32 framebuffers);

        /// <summary>[requires: v3.0 and ARB_framebuffer_object|VERSION_3_0]
        /// Delete framebuffer objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of framebuffer objects to be deleted.
        /// </para>
        /// </param>
        /// <param name="framebuffers">
        /// <para>
        /// A pointer to an array containing n framebuffer objects to be deleted.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glDeleteFramebuffers")]
        public static extern void DeleteFramebuffers(Int32 n, Int32[] framebuffers);

        /// <summary>[requires: v3.0 and ARB_framebuffer_object|VERSION_3_0]
        /// Delete framebuffer objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of framebuffer objects to be deleted.
        /// </para>
        /// </param>
        /// <param name="framebuffers">
        /// <para>
        /// A pointer to an array containing n framebuffer objects to be deleted.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glDeleteFramebuffers")]
        public static extern void DeleteFramebuffers(Int32 n, ref Int32 framebuffers);

        /// <summary>[requires: v3.0 and ARB_framebuffer_object|VERSION_3_0]
        /// Delete framebuffer objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of framebuffer objects to be deleted.
        /// </para>
        /// </param>
        /// <param name="framebuffers">
        /// <para>
        /// A pointer to an array containing n framebuffer objects to be deleted.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glDeleteFramebuffers")]
        public static extern unsafe void DeleteFramebuffers(Int32 n, Int32* framebuffers);

        /// <summary>[requires: v3.0 and ARB_framebuffer_object|VERSION_3_0]
        /// Delete framebuffer objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of framebuffer objects to be deleted.
        /// </para>
        /// </param>
        /// <param name="framebuffers">
        /// <para>
        /// A pointer to an array containing n framebuffer objects to be deleted.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glDeleteFramebuffers")]
        public static extern void DeleteFramebuffers(Int32 n, UInt32[] framebuffers);

        /// <summary>[requires: v3.0 and ARB_framebuffer_object|VERSION_3_0]
        /// Delete framebuffer objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of framebuffer objects to be deleted.
        /// </para>
        /// </param>
        /// <param name="framebuffers">
        /// <para>
        /// A pointer to an array containing n framebuffer objects to be deleted.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glDeleteFramebuffers")]
        public static extern void DeleteFramebuffers(Int32 n, ref UInt32 framebuffers);

        /// <summary>[requires: v3.0 and ARB_framebuffer_object|VERSION_3_0]
        /// Delete framebuffer objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of framebuffer objects to be deleted.
        /// </para>
        /// </param>
        /// <param name="framebuffers">
        /// <para>
        /// A pointer to an array containing n framebuffer objects to be deleted.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glDeleteFramebuffers")]
        public static extern unsafe void DeleteFramebuffers(Int32 n, UInt32* framebuffers);

        /// <summary>[requires: v2.0]
        /// Deletes a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be deleted.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glDeleteProgram")]
        public static extern void DeleteProgram(Int32 program);

        /// <summary>[requires: v2.0]
        /// Deletes a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be deleted.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glDeleteProgram")]
        public static extern void DeleteProgram(UInt32 program);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Delete program pipeline objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of program pipeline objects to delete.
        /// </para>
        /// </param>
        /// <param name="pipelines">
        /// <para>
        /// Specifies an array of names of program pipeline objects to delete.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glDeleteProgramPipelines")]
        public static extern void DeleteProgramPipeline(Int32 pipelines);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Delete program pipeline objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of program pipeline objects to delete.
        /// </para>
        /// </param>
        /// <param name="pipelines">
        /// <para>
        /// Specifies an array of names of program pipeline objects to delete.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glDeleteProgramPipelines")]
        public static extern void DeleteProgramPipeline(UInt32 pipelines);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Delete program pipeline objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of program pipeline objects to delete.
        /// </para>
        /// </param>
        /// <param name="pipelines">
        /// <para>
        /// Specifies an array of names of program pipeline objects to delete.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glDeleteProgramPipelines")]
        public static extern void DeleteProgramPipelines(Int32 n, Int32[] pipelines);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Delete program pipeline objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of program pipeline objects to delete.
        /// </para>
        /// </param>
        /// <param name="pipelines">
        /// <para>
        /// Specifies an array of names of program pipeline objects to delete.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glDeleteProgramPipelines")]
        public static extern void DeleteProgramPipelines(Int32 n, ref Int32 pipelines);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Delete program pipeline objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of program pipeline objects to delete.
        /// </para>
        /// </param>
        /// <param name="pipelines">
        /// <para>
        /// Specifies an array of names of program pipeline objects to delete.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glDeleteProgramPipelines")]
        public static extern unsafe void DeleteProgramPipelines(Int32 n, Int32* pipelines);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Delete program pipeline objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of program pipeline objects to delete.
        /// </para>
        /// </param>
        /// <param name="pipelines">
        /// <para>
        /// Specifies an array of names of program pipeline objects to delete.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glDeleteProgramPipelines")]
        public static extern void DeleteProgramPipelines(Int32 n, UInt32[] pipelines);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Delete program pipeline objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of program pipeline objects to delete.
        /// </para>
        /// </param>
        /// <param name="pipelines">
        /// <para>
        /// Specifies an array of names of program pipeline objects to delete.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glDeleteProgramPipelines")]
        public static extern void DeleteProgramPipelines(Int32 n, ref UInt32 pipelines);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Delete program pipeline objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of program pipeline objects to delete.
        /// </para>
        /// </param>
        /// <param name="pipelines">
        /// <para>
        /// Specifies an array of names of program pipeline objects to delete.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glDeleteProgramPipelines")]
        public static extern unsafe void DeleteProgramPipelines(Int32 n, UInt32* pipelines);

        /// <summary>[requires: v1.5]
        /// Delete named query objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of query objects to be deleted.
        /// </para>
        /// </param>
        /// <param name="ids">
        /// <para>
        /// Specifies an array of query objects to be deleted.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glDeleteQueries")]
        public static extern void DeleteQuery(Int32 ids);

        /// <summary>[requires: v1.5]
        /// Delete named query objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of query objects to be deleted.
        /// </para>
        /// </param>
        /// <param name="ids">
        /// <para>
        /// Specifies an array of query objects to be deleted.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glDeleteQueries")]
        public static extern void DeleteQuery(UInt32 ids);

        /// <summary>[requires: v1.5]
        /// Delete named query objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of query objects to be deleted.
        /// </para>
        /// </param>
        /// <param name="ids">
        /// <para>
        /// Specifies an array of query objects to be deleted.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glDeleteQueries")]
        public static extern void DeleteQueries(Int32 n, Int32[] ids);

        /// <summary>[requires: v1.5]
        /// Delete named query objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of query objects to be deleted.
        /// </para>
        /// </param>
        /// <param name="ids">
        /// <para>
        /// Specifies an array of query objects to be deleted.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glDeleteQueries")]
        public static extern void DeleteQueries(Int32 n, ref Int32 ids);

        /// <summary>[requires: v1.5]
        /// Delete named query objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of query objects to be deleted.
        /// </para>
        /// </param>
        /// <param name="ids">
        /// <para>
        /// Specifies an array of query objects to be deleted.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glDeleteQueries")]
        public static extern unsafe void DeleteQueries(Int32 n, Int32* ids);

        /// <summary>[requires: v1.5]
        /// Delete named query objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of query objects to be deleted.
        /// </para>
        /// </param>
        /// <param name="ids">
        /// <para>
        /// Specifies an array of query objects to be deleted.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glDeleteQueries")]
        public static extern void DeleteQueries(Int32 n, UInt32[] ids);

        /// <summary>[requires: v1.5]
        /// Delete named query objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of query objects to be deleted.
        /// </para>
        /// </param>
        /// <param name="ids">
        /// <para>
        /// Specifies an array of query objects to be deleted.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glDeleteQueries")]
        public static extern void DeleteQueries(Int32 n, ref UInt32 ids);

        /// <summary>[requires: v1.5]
        /// Delete named query objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of query objects to be deleted.
        /// </para>
        /// </param>
        /// <param name="ids">
        /// <para>
        /// Specifies an array of query objects to be deleted.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glDeleteQueries")]
        public static extern unsafe void DeleteQueries(Int32 n, UInt32* ids);

        /// <summary>[requires: v3.0 and ARB_framebuffer_object|VERSION_3_0]
        /// Delete renderbuffer objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of renderbuffer objects to be deleted.
        /// </para>
        /// </param>
        /// <param name="renderbuffers">
        /// <para>
        /// A pointer to an array containing n renderbuffer objects to be deleted.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glDeleteRenderbuffers")]
        public static extern void DeleteRenderbuffer(Int32 renderbuffers);

        /// <summary>[requires: v3.0 and ARB_framebuffer_object|VERSION_3_0]
        /// Delete renderbuffer objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of renderbuffer objects to be deleted.
        /// </para>
        /// </param>
        /// <param name="renderbuffers">
        /// <para>
        /// A pointer to an array containing n renderbuffer objects to be deleted.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glDeleteRenderbuffers")]
        public static extern void DeleteRenderbuffer(UInt32 renderbuffers);

        /// <summary>[requires: v3.0 and ARB_framebuffer_object|VERSION_3_0]
        /// Delete renderbuffer objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of renderbuffer objects to be deleted.
        /// </para>
        /// </param>
        /// <param name="renderbuffers">
        /// <para>
        /// A pointer to an array containing n renderbuffer objects to be deleted.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glDeleteRenderbuffers")]
        public static extern void DeleteRenderbuffers(Int32 n, Int32[] renderbuffers);

        /// <summary>[requires: v3.0 and ARB_framebuffer_object|VERSION_3_0]
        /// Delete renderbuffer objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of renderbuffer objects to be deleted.
        /// </para>
        /// </param>
        /// <param name="renderbuffers">
        /// <para>
        /// A pointer to an array containing n renderbuffer objects to be deleted.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glDeleteRenderbuffers")]
        public static extern void DeleteRenderbuffers(Int32 n, ref Int32 renderbuffers);

        /// <summary>[requires: v3.0 and ARB_framebuffer_object|VERSION_3_0]
        /// Delete renderbuffer objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of renderbuffer objects to be deleted.
        /// </para>
        /// </param>
        /// <param name="renderbuffers">
        /// <para>
        /// A pointer to an array containing n renderbuffer objects to be deleted.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glDeleteRenderbuffers")]
        public static extern unsafe void DeleteRenderbuffers(Int32 n, Int32* renderbuffers);

        /// <summary>[requires: v3.0 and ARB_framebuffer_object|VERSION_3_0]
        /// Delete renderbuffer objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of renderbuffer objects to be deleted.
        /// </para>
        /// </param>
        /// <param name="renderbuffers">
        /// <para>
        /// A pointer to an array containing n renderbuffer objects to be deleted.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glDeleteRenderbuffers")]
        public static extern void DeleteRenderbuffers(Int32 n, UInt32[] renderbuffers);

        /// <summary>[requires: v3.0 and ARB_framebuffer_object|VERSION_3_0]
        /// Delete renderbuffer objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of renderbuffer objects to be deleted.
        /// </para>
        /// </param>
        /// <param name="renderbuffers">
        /// <para>
        /// A pointer to an array containing n renderbuffer objects to be deleted.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glDeleteRenderbuffers")]
        public static extern void DeleteRenderbuffers(Int32 n, ref UInt32 renderbuffers);

        /// <summary>[requires: v3.0 and ARB_framebuffer_object|VERSION_3_0]
        /// Delete renderbuffer objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of renderbuffer objects to be deleted.
        /// </para>
        /// </param>
        /// <param name="renderbuffers">
        /// <para>
        /// A pointer to an array containing n renderbuffer objects to be deleted.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glDeleteRenderbuffers")]
        public static extern unsafe void DeleteRenderbuffers(Int32 n, UInt32* renderbuffers);

        /// <summary>[requires: v3.3 and ARB_sampler_objects|VERSION_3_3]
        /// Delete named sampler objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of sampler objects to be deleted.
        /// </para>
        /// </param>
        /// <param name="samplers">
        /// <para>
        /// Specifies an array of sampler objects to be deleted.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glDeleteSamplers")]
        public static extern void DeleteSampler(Int32 samplers);

        /// <summary>[requires: v3.3 and ARB_sampler_objects|VERSION_3_3]
        /// Delete named sampler objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of sampler objects to be deleted.
        /// </para>
        /// </param>
        /// <param name="samplers">
        /// <para>
        /// Specifies an array of sampler objects to be deleted.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glDeleteSamplers")]
        public static extern void DeleteSampler(UInt32 samplers);

        /// <summary>[requires: v3.3 and ARB_sampler_objects|VERSION_3_3]
        /// Delete named sampler objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of sampler objects to be deleted.
        /// </para>
        /// </param>
        /// <param name="samplers">
        /// <para>
        /// Specifies an array of sampler objects to be deleted.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glDeleteSamplers")]
        public static extern void DeleteSamplers(Int32 count, Int32[] samplers);

        /// <summary>[requires: v3.3 and ARB_sampler_objects|VERSION_3_3]
        /// Delete named sampler objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of sampler objects to be deleted.
        /// </para>
        /// </param>
        /// <param name="samplers">
        /// <para>
        /// Specifies an array of sampler objects to be deleted.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glDeleteSamplers")]
        public static extern void DeleteSamplers(Int32 count, ref Int32 samplers);

        /// <summary>[requires: v3.3 and ARB_sampler_objects|VERSION_3_3]
        /// Delete named sampler objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of sampler objects to be deleted.
        /// </para>
        /// </param>
        /// <param name="samplers">
        /// <para>
        /// Specifies an array of sampler objects to be deleted.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glDeleteSamplers")]
        public static extern unsafe void DeleteSamplers(Int32 count, Int32* samplers);

        /// <summary>[requires: v3.3 and ARB_sampler_objects|VERSION_3_3]
        /// Delete named sampler objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of sampler objects to be deleted.
        /// </para>
        /// </param>
        /// <param name="samplers">
        /// <para>
        /// Specifies an array of sampler objects to be deleted.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glDeleteSamplers")]
        public static extern void DeleteSamplers(Int32 count, UInt32[] samplers);

        /// <summary>[requires: v3.3 and ARB_sampler_objects|VERSION_3_3]
        /// Delete named sampler objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of sampler objects to be deleted.
        /// </para>
        /// </param>
        /// <param name="samplers">
        /// <para>
        /// Specifies an array of sampler objects to be deleted.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glDeleteSamplers")]
        public static extern void DeleteSamplers(Int32 count, ref UInt32 samplers);

        /// <summary>[requires: v3.3 and ARB_sampler_objects|VERSION_3_3]
        /// Delete named sampler objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of sampler objects to be deleted.
        /// </para>
        /// </param>
        /// <param name="samplers">
        /// <para>
        /// Specifies an array of sampler objects to be deleted.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glDeleteSamplers")]
        public static extern unsafe void DeleteSamplers(Int32 count, UInt32* samplers);

        /// <summary>[requires: v2.0]
        /// Deletes a shader object
        /// </summary>
        /// <param name="shader">
        /// <para>
        /// Specifies the shader object to be deleted.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glDeleteShader")]
        public static extern void DeleteShader(Int32 shader);

        /// <summary>[requires: v2.0]
        /// Deletes a shader object
        /// </summary>
        /// <param name="shader">
        /// <para>
        /// Specifies the shader object to be deleted.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glDeleteShader")]
        public static extern void DeleteShader(UInt32 shader);

        /// <summary>[requires: v3.2 and ARB_sync|VERSION_3_2]
        /// Delete a sync object
        /// </summary>
        /// <param name="sync">
        /// <para>
        /// The sync object to be deleted.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_sync|VERSION_3_2", Version = "3.2", EntryPoint = "glDeleteSync")]
        public static extern void DeleteSync(IntPtr sync);

        /// <summary>[requires: v1.1]
        /// Delete named textures
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of textures to be deleted.
        /// </para>
        /// </param>
        /// <param name="textures">
        /// <para>
        /// Specifies an array of textures to be deleted.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glDeleteTextures")]
        public static extern void DeleteTexture(Int32 textures);

        /// <summary>[requires: v1.1]
        /// Delete named textures
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of textures to be deleted.
        /// </para>
        /// </param>
        /// <param name="textures">
        /// <para>
        /// Specifies an array of textures to be deleted.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glDeleteTextures")]
        public static extern void DeleteTexture(UInt32 textures);

        /// <summary>[requires: v1.1]
        /// Delete named textures
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of textures to be deleted.
        /// </para>
        /// </param>
        /// <param name="textures">
        /// <para>
        /// Specifies an array of textures to be deleted.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glDeleteTextures")]
        public static extern void DeleteTextures(Int32 n, Int32[] textures);

        /// <summary>[requires: v1.1]
        /// Delete named textures
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of textures to be deleted.
        /// </para>
        /// </param>
        /// <param name="textures">
        /// <para>
        /// Specifies an array of textures to be deleted.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glDeleteTextures")]
        public static extern void DeleteTextures(Int32 n, ref Int32 textures);

        /// <summary>[requires: v1.1]
        /// Delete named textures
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of textures to be deleted.
        /// </para>
        /// </param>
        /// <param name="textures">
        /// <para>
        /// Specifies an array of textures to be deleted.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glDeleteTextures")]
        public static extern unsafe void DeleteTextures(Int32 n, Int32* textures);

        /// <summary>[requires: v1.1]
        /// Delete named textures
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of textures to be deleted.
        /// </para>
        /// </param>
        /// <param name="textures">
        /// <para>
        /// Specifies an array of textures to be deleted.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glDeleteTextures")]
        public static extern void DeleteTextures(Int32 n, UInt32[] textures);

        /// <summary>[requires: v1.1]
        /// Delete named textures
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of textures to be deleted.
        /// </para>
        /// </param>
        /// <param name="textures">
        /// <para>
        /// Specifies an array of textures to be deleted.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glDeleteTextures")]
        public static extern void DeleteTextures(Int32 n, ref UInt32 textures);

        /// <summary>[requires: v1.1]
        /// Delete named textures
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of textures to be deleted.
        /// </para>
        /// </param>
        /// <param name="textures">
        /// <para>
        /// Specifies an array of textures to be deleted.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glDeleteTextures")]
        public static extern unsafe void DeleteTextures(Int32 n, UInt32* textures);

        /// <summary>[requires: v4.0 and ARB_transform_feedback2|VERSION_4_0]
        /// Delete transform feedback objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of transform feedback objects to delete.
        /// </para>
        /// </param>
        /// <param name="ids">
        /// <para>
        /// Specifies an array of names of transform feedback objects to delete.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_transform_feedback2|VERSION_4_0", Version = "4.0", EntryPoint = "glDeleteTransformFeedbacks")]
        public static extern void DeleteTransformFeedback(Int32 ids);

        /// <summary>[requires: v4.0 and ARB_transform_feedback2|VERSION_4_0]
        /// Delete transform feedback objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of transform feedback objects to delete.
        /// </para>
        /// </param>
        /// <param name="ids">
        /// <para>
        /// Specifies an array of names of transform feedback objects to delete.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_transform_feedback2|VERSION_4_0", Version = "4.0", EntryPoint = "glDeleteTransformFeedbacks")]
        public static extern void DeleteTransformFeedback(UInt32 ids);

        /// <summary>[requires: v4.0 and ARB_transform_feedback2|VERSION_4_0]
        /// Delete transform feedback objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of transform feedback objects to delete.
        /// </para>
        /// </param>
        /// <param name="ids">
        /// <para>
        /// Specifies an array of names of transform feedback objects to delete.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_transform_feedback2|VERSION_4_0", Version = "4.0", EntryPoint = "glDeleteTransformFeedbacks")]
        public static extern void DeleteTransformFeedbacks(Int32 n, Int32[] ids);

        /// <summary>[requires: v4.0 and ARB_transform_feedback2|VERSION_4_0]
        /// Delete transform feedback objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of transform feedback objects to delete.
        /// </para>
        /// </param>
        /// <param name="ids">
        /// <para>
        /// Specifies an array of names of transform feedback objects to delete.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_transform_feedback2|VERSION_4_0", Version = "4.0", EntryPoint = "glDeleteTransformFeedbacks")]
        public static extern void DeleteTransformFeedbacks(Int32 n, ref Int32 ids);

        /// <summary>[requires: v4.0 and ARB_transform_feedback2|VERSION_4_0]
        /// Delete transform feedback objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of transform feedback objects to delete.
        /// </para>
        /// </param>
        /// <param name="ids">
        /// <para>
        /// Specifies an array of names of transform feedback objects to delete.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_transform_feedback2|VERSION_4_0", Version = "4.0", EntryPoint = "glDeleteTransformFeedbacks")]
        public static extern unsafe void DeleteTransformFeedbacks(Int32 n, Int32* ids);

        /// <summary>[requires: v4.0 and ARB_transform_feedback2|VERSION_4_0]
        /// Delete transform feedback objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of transform feedback objects to delete.
        /// </para>
        /// </param>
        /// <param name="ids">
        /// <para>
        /// Specifies an array of names of transform feedback objects to delete.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_transform_feedback2|VERSION_4_0", Version = "4.0", EntryPoint = "glDeleteTransformFeedbacks")]
        public static extern void DeleteTransformFeedbacks(Int32 n, UInt32[] ids);

        /// <summary>[requires: v4.0 and ARB_transform_feedback2|VERSION_4_0]
        /// Delete transform feedback objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of transform feedback objects to delete.
        /// </para>
        /// </param>
        /// <param name="ids">
        /// <para>
        /// Specifies an array of names of transform feedback objects to delete.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_transform_feedback2|VERSION_4_0", Version = "4.0", EntryPoint = "glDeleteTransformFeedbacks")]
        public static extern void DeleteTransformFeedbacks(Int32 n, ref UInt32 ids);

        /// <summary>[requires: v4.0 and ARB_transform_feedback2|VERSION_4_0]
        /// Delete transform feedback objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of transform feedback objects to delete.
        /// </para>
        /// </param>
        /// <param name="ids">
        /// <para>
        /// Specifies an array of names of transform feedback objects to delete.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_transform_feedback2|VERSION_4_0", Version = "4.0", EntryPoint = "glDeleteTransformFeedbacks")]
        public static extern unsafe void DeleteTransformFeedbacks(Int32 n, UInt32* ids);

        /// <summary>[requires: v3.0 and ARB_vertex_array_object|VERSION_3_0]
        /// Delete vertex array objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of vertex array objects to be deleted.
        /// </para>
        /// </param>
        /// <param name="arrays">
        /// <para>
        /// Specifies the address of an array containing the n names of the objects to be deleted.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_array_object|VERSION_3_0", Version = "3.0", EntryPoint = "glDeleteVertexArrays")]
        public static extern void DeleteVertexArray(Int32 arrays);

        /// <summary>[requires: v3.0 and ARB_vertex_array_object|VERSION_3_0]
        /// Delete vertex array objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of vertex array objects to be deleted.
        /// </para>
        /// </param>
        /// <param name="arrays">
        /// <para>
        /// Specifies the address of an array containing the n names of the objects to be deleted.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_vertex_array_object|VERSION_3_0", Version = "3.0", EntryPoint = "glDeleteVertexArrays")]
        public static extern void DeleteVertexArray(UInt32 arrays);

        /// <summary>[requires: v3.0 and ARB_vertex_array_object|VERSION_3_0]
        /// Delete vertex array objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of vertex array objects to be deleted.
        /// </para>
        /// </param>
        /// <param name="arrays">
        /// <para>
        /// Specifies the address of an array containing the n names of the objects to be deleted.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_array_object|VERSION_3_0", Version = "3.0", EntryPoint = "glDeleteVertexArrays")]
        public static extern void DeleteVertexArrays(Int32 n, Int32[] arrays);

        /// <summary>[requires: v3.0 and ARB_vertex_array_object|VERSION_3_0]
        /// Delete vertex array objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of vertex array objects to be deleted.
        /// </para>
        /// </param>
        /// <param name="arrays">
        /// <para>
        /// Specifies the address of an array containing the n names of the objects to be deleted.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_array_object|VERSION_3_0", Version = "3.0", EntryPoint = "glDeleteVertexArrays")]
        public static extern void DeleteVertexArrays(Int32 n, ref Int32 arrays);

        /// <summary>[requires: v3.0 and ARB_vertex_array_object|VERSION_3_0]
        /// Delete vertex array objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of vertex array objects to be deleted.
        /// </para>
        /// </param>
        /// <param name="arrays">
        /// <para>
        /// Specifies the address of an array containing the n names of the objects to be deleted.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_vertex_array_object|VERSION_3_0", Version = "3.0", EntryPoint = "glDeleteVertexArrays")]
        public static extern unsafe void DeleteVertexArrays(Int32 n, Int32* arrays);

        /// <summary>[requires: v3.0 and ARB_vertex_array_object|VERSION_3_0]
        /// Delete vertex array objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of vertex array objects to be deleted.
        /// </para>
        /// </param>
        /// <param name="arrays">
        /// <para>
        /// Specifies the address of an array containing the n names of the objects to be deleted.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_vertex_array_object|VERSION_3_0", Version = "3.0", EntryPoint = "glDeleteVertexArrays")]
        public static extern void DeleteVertexArrays(Int32 n, UInt32[] arrays);

        /// <summary>[requires: v3.0 and ARB_vertex_array_object|VERSION_3_0]
        /// Delete vertex array objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of vertex array objects to be deleted.
        /// </para>
        /// </param>
        /// <param name="arrays">
        /// <para>
        /// Specifies the address of an array containing the n names of the objects to be deleted.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_vertex_array_object|VERSION_3_0", Version = "3.0", EntryPoint = "glDeleteVertexArrays")]
        public static extern void DeleteVertexArrays(Int32 n, ref UInt32 arrays);

        /// <summary>[requires: v3.0 and ARB_vertex_array_object|VERSION_3_0]
        /// Delete vertex array objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of vertex array objects to be deleted.
        /// </para>
        /// </param>
        /// <param name="arrays">
        /// <para>
        /// Specifies the address of an array containing the n names of the objects to be deleted.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_vertex_array_object|VERSION_3_0", Version = "3.0", EntryPoint = "glDeleteVertexArrays")]
        public static extern unsafe void DeleteVertexArrays(Int32 n, UInt32* arrays);

        /// <summary>[requires: v1.0]
        /// Specify the value used for depth buffer comparisons
        /// </summary>
        /// <param name="func">
        /// <para>
        /// Specifies the depth comparison function. Symbolic constants GL_NEVER, GL_LESS, GL_EQUAL, GL_LEQUAL, GL_GREATER, GL_NOTEQUAL, GL_GEQUAL, and GL_ALWAYS are accepted. The initial value is GL_LESS.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glDepthFunc")]
        public static extern void DepthFunc(OpenTK.Graphics.OpenGL4.DepthFunction func);

        /// <summary>[requires: v1.0]
        /// Enable or disable writing into the depth buffer
        /// </summary>
        /// <param name="flag">
        /// <para>
        /// Specifies whether the depth buffer is enabled for writing. If flag is GL_FALSE, depth buffer writing is disabled. Otherwise, it is enabled. Initially, depth buffer writing is enabled.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glDepthMask")]
        public static extern void DepthMask(bool flag);

        /// <summary>[requires: v1.0]
        /// Specify mapping of depth values from normalized device coordinates to window coordinates
        /// </summary>
        /// <param name="nearVal">
        /// <para>
        /// Specifies the mapping of the near clipping plane to window coordinates. The initial value is 0.
        /// </para>
        /// </param>
        /// <param name="farVal">
        /// <para>
        /// Specifies the mapping of the far clipping plane to window coordinates. The initial value is 1.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glDepthRange")]
        public static extern void DepthRange(Double near, Double far);

        /// <summary>[requires: v4.1 and ARB_viewport_array|VERSION_4_1]
        /// Specify mapping of depth values from normalized device coordinates to window coordinates for a specified set of viewports
        /// </summary>
        /// <param name="first">
        /// <para>
        /// Specifies the index of the first viewport whose depth range to update.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of viewports whose depth range to update.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// Specifies the address of an array containing the near and far values for the depth range of each modified viewport.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glDepthRangeArrayv")]
        public static extern void DepthRangeArray(Int32 first, Int32 count, Double[] v);

        /// <summary>[requires: v4.1 and ARB_viewport_array|VERSION_4_1]
        /// Specify mapping of depth values from normalized device coordinates to window coordinates for a specified set of viewports
        /// </summary>
        /// <param name="first">
        /// <para>
        /// Specifies the index of the first viewport whose depth range to update.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of viewports whose depth range to update.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// Specifies the address of an array containing the near and far values for the depth range of each modified viewport.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glDepthRangeArrayv")]
        public static extern void DepthRangeArray(Int32 first, Int32 count, ref Double v);

        /// <summary>[requires: v4.1 and ARB_viewport_array|VERSION_4_1]
        /// Specify mapping of depth values from normalized device coordinates to window coordinates for a specified set of viewports
        /// </summary>
        /// <param name="first">
        /// <para>
        /// Specifies the index of the first viewport whose depth range to update.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of viewports whose depth range to update.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// Specifies the address of an array containing the near and far values for the depth range of each modified viewport.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glDepthRangeArrayv")]
        public static extern unsafe void DepthRangeArray(Int32 first, Int32 count, Double* v);

        /// <summary>[requires: v4.1 and ARB_viewport_array|VERSION_4_1]
        /// Specify mapping of depth values from normalized device coordinates to window coordinates for a specified set of viewports
        /// </summary>
        /// <param name="first">
        /// <para>
        /// Specifies the index of the first viewport whose depth range to update.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of viewports whose depth range to update.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// Specifies the address of an array containing the near and far values for the depth range of each modified viewport.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glDepthRangeArrayv")]
        public static extern void DepthRangeArray(UInt32 first, Int32 count, Double[] v);

        /// <summary>[requires: v4.1 and ARB_viewport_array|VERSION_4_1]
        /// Specify mapping of depth values from normalized device coordinates to window coordinates for a specified set of viewports
        /// </summary>
        /// <param name="first">
        /// <para>
        /// Specifies the index of the first viewport whose depth range to update.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of viewports whose depth range to update.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// Specifies the address of an array containing the near and far values for the depth range of each modified viewport.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glDepthRangeArrayv")]
        public static extern void DepthRangeArray(UInt32 first, Int32 count, ref Double v);

        /// <summary>[requires: v4.1 and ARB_viewport_array|VERSION_4_1]
        /// Specify mapping of depth values from normalized device coordinates to window coordinates for a specified set of viewports
        /// </summary>
        /// <param name="first">
        /// <para>
        /// Specifies the index of the first viewport whose depth range to update.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of viewports whose depth range to update.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// Specifies the address of an array containing the near and far values for the depth range of each modified viewport.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glDepthRangeArrayv")]
        public static extern unsafe void DepthRangeArray(UInt32 first, Int32 count, Double* v);

        /// <summary>[requires: v4.1 and ARB_ES2_compatibility|VERSION_4_1]
        /// Specify mapping of depth values from normalized device coordinates to window coordinates
        /// </summary>
        /// <param name="nearVal">
        /// <para>
        /// Specifies the mapping of the near clipping plane to window coordinates. The initial value is 0.
        /// </para>
        /// </param>
        /// <param name="farVal">
        /// <para>
        /// Specifies the mapping of the far clipping plane to window coordinates. The initial value is 1.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_ES2_compatibility|VERSION_4_1", Version = "4.1", EntryPoint = "glDepthRangef")]
        public static extern void DepthRange(Single n, Single f);

        /// <summary>[requires: v4.1 and ARB_viewport_array|VERSION_4_1]
        /// Specify mapping of depth values from normalized device coordinates to window coordinates for a specified viewport
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the viewport whose depth range to update.
        /// </para>
        /// </param>
        /// <param name="nearVal">
        /// <para>
        /// Specifies the mapping of the near clipping plane to window coordinates. The initial value is 0.
        /// </para>
        /// </param>
        /// <param name="farVal">
        /// <para>
        /// Specifies the mapping of the far clipping plane to window coordinates. The initial value is 1.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glDepthRangeIndexed")]
        public static extern void DepthRangeIndexed(Int32 index, Double n, Double f);

        /// <summary>[requires: v4.1 and ARB_viewport_array|VERSION_4_1]
        /// Specify mapping of depth values from normalized device coordinates to window coordinates for a specified viewport
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the viewport whose depth range to update.
        /// </para>
        /// </param>
        /// <param name="nearVal">
        /// <para>
        /// Specifies the mapping of the near clipping plane to window coordinates. The initial value is 0.
        /// </para>
        /// </param>
        /// <param name="farVal">
        /// <para>
        /// Specifies the mapping of the far clipping plane to window coordinates. The initial value is 1.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glDepthRangeIndexed")]
        public static extern void DepthRangeIndexed(UInt32 index, Double n, Double f);

        /// <summary>[requires: v2.0]
        /// Detaches a shader object from a program object to which it is attached
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object from which to detach the shader object.
        /// </para>
        /// </param>
        /// <param name="shader">
        /// <para>
        /// Specifies the shader object to be detached.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glDetachShader")]
        public static extern void DetachShader(Int32 program, Int32 shader);

        /// <summary>[requires: v2.0]
        /// Detaches a shader object from a program object to which it is attached
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object from which to detach the shader object.
        /// </para>
        /// </param>
        /// <param name="shader">
        /// <para>
        /// Specifies the shader object to be detached.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glDetachShader")]
        public static extern void DetachShader(UInt32 program, UInt32 shader);

        /// <summary>[requires: v1.0]</summary>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glDisable")]
        public static extern void Disable(OpenTK.Graphics.OpenGL4.EnableCap cap);

        /// <summary>[requires: v3.0]</summary>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glDisablei")]
        public static extern void Disable(OpenTK.Graphics.OpenGL4.IndexedEnableCap target, Int32 index);

        /// <summary>[requires: v3.0]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glDisablei")]
        public static extern void Disable(OpenTK.Graphics.OpenGL4.IndexedEnableCap target, UInt32 index);

        /// <summary>[requires: v2.0]</summary>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glDisableVertexAttribArray")]
        public static extern void DisableVertexAttribArray(Int32 index);

        /// <summary>[requires: v2.0]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glDisableVertexAttribArray")]
        public static extern void DisableVertexAttribArray(UInt32 index);

        /// <summary>[requires: v4.3 and ARB_compute_shader|VERSION_4_3]
        /// Launch one or more compute work groups
        /// </summary>
        /// <param name="num_groups_x">
        /// <para>
        /// The number of work groups to be launched in the X dimension.
        /// </para>
        /// </param>
        /// <param name="num_groups_y">
        /// <para>
        /// The number of work groups to be launched in the Y dimension.
        /// </para>
        /// </param>
        /// <param name="num_groups_z">
        /// <para>
        /// The number of work groups to be launched in the Z dimension.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_compute_shader|VERSION_4_3", Version = "4.3", EntryPoint = "glDispatchCompute")]
        public static extern void DispatchCompute(Int32 num_groups_x, Int32 num_groups_y, Int32 num_groups_z);

        /// <summary>[requires: v4.3 and ARB_compute_shader|VERSION_4_3]
        /// Launch one or more compute work groups
        /// </summary>
        /// <param name="num_groups_x">
        /// <para>
        /// The number of work groups to be launched in the X dimension.
        /// </para>
        /// </param>
        /// <param name="num_groups_y">
        /// <para>
        /// The number of work groups to be launched in the Y dimension.
        /// </para>
        /// </param>
        /// <param name="num_groups_z">
        /// <para>
        /// The number of work groups to be launched in the Z dimension.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_compute_shader|VERSION_4_3", Version = "4.3", EntryPoint = "glDispatchCompute")]
        public static extern void DispatchCompute(UInt32 num_groups_x, UInt32 num_groups_y, UInt32 num_groups_z);

        /// <summary>[requires: v4.3 and ARB_compute_shader|VERSION_4_3]
        /// Launch one or more compute work groups using parameters stored in a buffer
        /// </summary>
        /// <param name="indirect">
        /// <para>
        /// The offset into the buffer object currently bound to the GL_DISPATCH_INDIRECT_BUFFER buffer target at which the dispatch parameters are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_compute_shader|VERSION_4_3", Version = "4.3", EntryPoint = "glDispatchComputeIndirect")]
        public static extern void DispatchComputeIndirect(IntPtr indirect);

        /// <summary>[requires: v1.1]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="first">
        /// <para>
        /// Specifies the starting index in the enabled arrays.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of indices to be rendered.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glDrawArrays")]
        public static extern void DrawArrays(OpenTK.Graphics.OpenGL4.PrimitiveType mode, Int32 first, Int32 count);

        /// <summary>[requires: v4.0 and ARB_draw_indirect|VERSION_4_0]
        /// Render primitives from array data, taking parameters from memory
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY, and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="indirect">
        /// <para>
        /// Specifies the address of a structure containing the draw parameters.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_draw_indirect|VERSION_4_0", Version = "4.0", EntryPoint = "glDrawArraysIndirect")]
        public static extern void DrawArraysIndirect(OpenTK.Graphics.OpenGL4.PrimitiveType mode, IntPtr indirect);

        /// <summary>[requires: v4.0 and ARB_draw_indirect|VERSION_4_0]
        /// Render primitives from array data, taking parameters from memory
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY, and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="indirect">
        /// <para>
        /// Specifies the address of a structure containing the draw parameters.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_draw_indirect|VERSION_4_0", Version = "4.0", EntryPoint = "glDrawArraysIndirect")]
        public static extern void DrawArraysIndirect<T1>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, [InAttribute, OutAttribute] T1[] indirect)
            where T1 : struct
        ;

        /// <summary>[requires: v4.0 and ARB_draw_indirect|VERSION_4_0]
        /// Render primitives from array data, taking parameters from memory
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY, and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="indirect">
        /// <para>
        /// Specifies the address of a structure containing the draw parameters.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_draw_indirect|VERSION_4_0", Version = "4.0", EntryPoint = "glDrawArraysIndirect")]
        public static extern void DrawArraysIndirect<T1>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, [InAttribute, OutAttribute] T1[,] indirect)
            where T1 : struct
        ;

        /// <summary>[requires: v4.0 and ARB_draw_indirect|VERSION_4_0]
        /// Render primitives from array data, taking parameters from memory
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY, and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="indirect">
        /// <para>
        /// Specifies the address of a structure containing the draw parameters.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_draw_indirect|VERSION_4_0", Version = "4.0", EntryPoint = "glDrawArraysIndirect")]
        public static extern void DrawArraysIndirect<T1>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, [InAttribute, OutAttribute] T1[,,] indirect)
            where T1 : struct
        ;

        /// <summary>[requires: v4.0 and ARB_draw_indirect|VERSION_4_0]
        /// Render primitives from array data, taking parameters from memory
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY, and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="indirect">
        /// <para>
        /// Specifies the address of a structure containing the draw parameters.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_draw_indirect|VERSION_4_0", Version = "4.0", EntryPoint = "glDrawArraysIndirect")]
        public static extern void DrawArraysIndirect<T1>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, [InAttribute, OutAttribute] ref T1 indirect)
            where T1 : struct
        ;

        /// <summary>[requires: v3.1]
        /// Draw multiple instances of a range of elements
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES GL_LINES_ADJACENCY, GL_LINE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY, GL_TRIANGLE_STRIP_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="first">
        /// <para>
        /// Specifies the starting index in the enabled arrays.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of indices to be rendered.
        /// </para>
        /// </param>
        /// <param name="primcount">
        /// <para>
        /// Specifies the number of instances of the specified range of indices to be rendered.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_3_1", Version = "3.1", EntryPoint = "glDrawArraysInstanced")]
        public static extern void DrawArraysInstanced(OpenTK.Graphics.OpenGL4.PrimitiveType mode, Int32 first, Int32 count, Int32 instancecount);

        /// <summary>[requires: v4.2 and ARB_base_instance|VERSION_4_2]
        /// Draw multiple instances of a range of elements with offset applied to instanced attributes
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES GL_LINES_ADJACENCY, GL_LINE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY, GL_TRIANGLE_STRIP_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="first">
        /// <para>
        /// Specifies the starting index in the enabled arrays.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of indices to be rendered.
        /// </para>
        /// </param>
        /// <param name="primcount">
        /// <para>
        /// Specifies the number of instances of the specified range of indices to be rendered.
        /// </para>
        /// </param>
        /// <param name="baseinstance">
        /// <para>
        /// Specifies the base instance for use in fetching instanced vertex attributes.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_base_instance|VERSION_4_2", Version = "4.2", EntryPoint = "glDrawArraysInstancedBaseInstance")]
        public static extern void DrawArraysInstancedBaseInstance(OpenTK.Graphics.OpenGL4.PrimitiveType mode, Int32 first, Int32 count, Int32 instancecount, Int32 baseinstance);

        /// <summary>[requires: v4.2 and ARB_base_instance|VERSION_4_2]
        /// Draw multiple instances of a range of elements with offset applied to instanced attributes
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES GL_LINES_ADJACENCY, GL_LINE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY, GL_TRIANGLE_STRIP_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="first">
        /// <para>
        /// Specifies the starting index in the enabled arrays.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of indices to be rendered.
        /// </para>
        /// </param>
        /// <param name="primcount">
        /// <para>
        /// Specifies the number of instances of the specified range of indices to be rendered.
        /// </para>
        /// </param>
        /// <param name="baseinstance">
        /// <para>
        /// Specifies the base instance for use in fetching instanced vertex attributes.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_base_instance|VERSION_4_2", Version = "4.2", EntryPoint = "glDrawArraysInstancedBaseInstance")]
        public static extern void DrawArraysInstancedBaseInstance(OpenTK.Graphics.OpenGL4.PrimitiveType mode, Int32 first, Int32 count, Int32 instancecount, UInt32 baseinstance);

        /// <summary>[requires: v1.0]
        /// Specify which color buffers are to be drawn into
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies up to four color buffers to be drawn into. Symbolic constants GL_NONE, GL_FRONT_LEFT, GL_FRONT_RIGHT, GL_BACK_LEFT, GL_BACK_RIGHT, GL_FRONT, GL_BACK, GL_LEFT, GL_RIGHT, and GL_FRONT_AND_BACK are accepted. The initial value is GL_FRONT for single-buffered contexts, and GL_BACK for double-buffered contexts.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glDrawBuffer")]
        public static extern void DrawBuffer(OpenTK.Graphics.OpenGL4.DrawBufferMode mode);

        /// <summary>[requires: v2.0]
        /// Specifies a list of color buffers to be drawn into
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of buffers in bufs.
        /// </para>
        /// </param>
        /// <param name="bufs">
        /// <para>
        /// Points to an array of symbolic constants specifying the buffers into which fragment colors or data values will be written.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glDrawBuffers")]
        public static extern void DrawBuffers(Int32 n, OpenTK.Graphics.OpenGL4.DrawBuffersEnum[] bufs);

        /// <summary>[requires: v2.0]
        /// Specifies a list of color buffers to be drawn into
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of buffers in bufs.
        /// </para>
        /// </param>
        /// <param name="bufs">
        /// <para>
        /// Points to an array of symbolic constants specifying the buffers into which fragment colors or data values will be written.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glDrawBuffers")]
        public static extern void DrawBuffers(Int32 n, ref OpenTK.Graphics.OpenGL4.DrawBuffersEnum bufs);

        /// <summary>[requires: v2.0]
        /// Specifies a list of color buffers to be drawn into
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of buffers in bufs.
        /// </para>
        /// </param>
        /// <param name="bufs">
        /// <para>
        /// Points to an array of symbolic constants specifying the buffers into which fragment colors or data values will be written.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glDrawBuffers")]
        public static extern unsafe void DrawBuffers(Int32 n, OpenTK.Graphics.OpenGL4.DrawBuffersEnum* bufs);

        /// <summary>[requires: v1.1]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements to be rendered.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glDrawElements")]
        public static extern void DrawElements(OpenTK.Graphics.OpenGL4.PrimitiveType mode, Int32 count, OpenTK.Graphics.OpenGL4.DrawElementsType type, IntPtr indices);

        /// <summary>[requires: v1.1]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements to be rendered.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glDrawElements")]
        public static extern void DrawElements<T3>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, Int32 count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute] T3[] indices)
            where T3 : struct
        ;

        /// <summary>[requires: v1.1]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements to be rendered.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glDrawElements")]
        public static extern void DrawElements<T3>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, Int32 count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute] T3[,] indices)
            where T3 : struct
        ;

        /// <summary>[requires: v1.1]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements to be rendered.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glDrawElements")]
        public static extern void DrawElements<T3>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, Int32 count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute] T3[,,] indices)
            where T3 : struct
        ;

        /// <summary>[requires: v1.1]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements to be rendered.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glDrawElements")]
        public static extern void DrawElements<T3>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, Int32 count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute] ref T3 indices)
            where T3 : struct
        ;

        /// <summary>[requires: v3.2 and ARB_draw_elements_base_vertex|VERSION_3_2]
        /// Render primitives from array data with a per-element offset
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_LINES_ADJACENCY, GL_LINE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY, GL_TRIANGLE_STRIP_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements to be rendered.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        /// <param name="basevertex">
        /// <para>
        /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glDrawElementsBaseVertex")]
        public static extern void DrawElementsBaseVertex(OpenTK.Graphics.OpenGL4.PrimitiveType mode, Int32 count, OpenTK.Graphics.OpenGL4.DrawElementsType type, IntPtr indices, Int32 basevertex);

        /// <summary>[requires: v3.2 and ARB_draw_elements_base_vertex|VERSION_3_2]
        /// Render primitives from array data with a per-element offset
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_LINES_ADJACENCY, GL_LINE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY, GL_TRIANGLE_STRIP_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements to be rendered.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        /// <param name="basevertex">
        /// <para>
        /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glDrawElementsBaseVertex")]
        public static extern void DrawElementsBaseVertex<T3>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, Int32 count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute] T3[] indices, Int32 basevertex)
            where T3 : struct
        ;

        /// <summary>[requires: v3.2 and ARB_draw_elements_base_vertex|VERSION_3_2]
        /// Render primitives from array data with a per-element offset
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_LINES_ADJACENCY, GL_LINE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY, GL_TRIANGLE_STRIP_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements to be rendered.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        /// <param name="basevertex">
        /// <para>
        /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glDrawElementsBaseVertex")]
        public static extern void DrawElementsBaseVertex<T3>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, Int32 count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute] T3[,] indices, Int32 basevertex)
            where T3 : struct
        ;

        /// <summary>[requires: v3.2 and ARB_draw_elements_base_vertex|VERSION_3_2]
        /// Render primitives from array data with a per-element offset
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_LINES_ADJACENCY, GL_LINE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY, GL_TRIANGLE_STRIP_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements to be rendered.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        /// <param name="basevertex">
        /// <para>
        /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glDrawElementsBaseVertex")]
        public static extern void DrawElementsBaseVertex<T3>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, Int32 count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute] T3[,,] indices, Int32 basevertex)
            where T3 : struct
        ;

        /// <summary>[requires: v3.2 and ARB_draw_elements_base_vertex|VERSION_3_2]
        /// Render primitives from array data with a per-element offset
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_LINES_ADJACENCY, GL_LINE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY, GL_TRIANGLE_STRIP_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements to be rendered.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        /// <param name="basevertex">
        /// <para>
        /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glDrawElementsBaseVertex")]
        public static extern void DrawElementsBaseVertex<T3>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, Int32 count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute] ref T3 indices, Int32 basevertex)
            where T3 : struct
        ;

        /// <summary>[requires: v4.0 and ARB_draw_indirect|VERSION_4_0]
        /// Render indexed primitives from array data, taking parameters from memory
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY, and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of data in the buffer bound to the GL_ELEMENT_ARRAY_BUFFER binding.
        /// </para>
        /// </param>
        /// <param name="indirect">
        /// <para>
        /// Specifies the address of a structure containing the draw parameters.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_draw_indirect|VERSION_4_0", Version = "4.0", EntryPoint = "glDrawElementsIndirect")]
        public static extern void DrawElementsIndirect(OpenTK.Graphics.OpenGL4.PrimitiveType mode, OpenTK.Graphics.OpenGL4.All type, IntPtr indirect);

        /// <summary>[requires: v4.0 and ARB_draw_indirect|VERSION_4_0]
        /// Render indexed primitives from array data, taking parameters from memory
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY, and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of data in the buffer bound to the GL_ELEMENT_ARRAY_BUFFER binding.
        /// </para>
        /// </param>
        /// <param name="indirect">
        /// <para>
        /// Specifies the address of a structure containing the draw parameters.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_draw_indirect|VERSION_4_0", Version = "4.0", EntryPoint = "glDrawElementsIndirect")]
        public static extern void DrawElementsIndirect<T2>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, OpenTK.Graphics.OpenGL4.All type, [InAttribute, OutAttribute] T2[] indirect)
            where T2 : struct
        ;

        /// <summary>[requires: v4.0 and ARB_draw_indirect|VERSION_4_0]
        /// Render indexed primitives from array data, taking parameters from memory
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY, and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of data in the buffer bound to the GL_ELEMENT_ARRAY_BUFFER binding.
        /// </para>
        /// </param>
        /// <param name="indirect">
        /// <para>
        /// Specifies the address of a structure containing the draw parameters.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_draw_indirect|VERSION_4_0", Version = "4.0", EntryPoint = "glDrawElementsIndirect")]
        public static extern void DrawElementsIndirect<T2>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, OpenTK.Graphics.OpenGL4.All type, [InAttribute, OutAttribute] T2[,] indirect)
            where T2 : struct
        ;

        /// <summary>[requires: v4.0 and ARB_draw_indirect|VERSION_4_0]
        /// Render indexed primitives from array data, taking parameters from memory
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY, and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of data in the buffer bound to the GL_ELEMENT_ARRAY_BUFFER binding.
        /// </para>
        /// </param>
        /// <param name="indirect">
        /// <para>
        /// Specifies the address of a structure containing the draw parameters.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_draw_indirect|VERSION_4_0", Version = "4.0", EntryPoint = "glDrawElementsIndirect")]
        public static extern void DrawElementsIndirect<T2>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, OpenTK.Graphics.OpenGL4.All type, [InAttribute, OutAttribute] T2[,,] indirect)
            where T2 : struct
        ;

        /// <summary>[requires: v4.0 and ARB_draw_indirect|VERSION_4_0]
        /// Render indexed primitives from array data, taking parameters from memory
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY, and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of data in the buffer bound to the GL_ELEMENT_ARRAY_BUFFER binding.
        /// </para>
        /// </param>
        /// <param name="indirect">
        /// <para>
        /// Specifies the address of a structure containing the draw parameters.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_draw_indirect|VERSION_4_0", Version = "4.0", EntryPoint = "glDrawElementsIndirect")]
        public static extern void DrawElementsIndirect<T2>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, OpenTK.Graphics.OpenGL4.All type, [InAttribute, OutAttribute] ref T2 indirect)
            where T2 : struct
        ;

        /// <summary>[requires: v3.1]
        /// Draw multiple instances of a set of elements
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements to be rendered.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        /// <param name="primcount">
        /// <para>
        /// Specifies the number of instances of the specified range of indices to be rendered.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_3_1", Version = "3.1", EntryPoint = "glDrawElementsInstanced")]
        public static extern void DrawElementsInstanced(OpenTK.Graphics.OpenGL4.PrimitiveType mode, Int32 count, OpenTK.Graphics.OpenGL4.DrawElementsType type, IntPtr indices, Int32 instancecount);

        /// <summary>[requires: v3.1]
        /// Draw multiple instances of a set of elements
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements to be rendered.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        /// <param name="primcount">
        /// <para>
        /// Specifies the number of instances of the specified range of indices to be rendered.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_3_1", Version = "3.1", EntryPoint = "glDrawElementsInstanced")]
        public static extern void DrawElementsInstanced<T3>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, Int32 count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute] T3[] indices, Int32 instancecount)
            where T3 : struct
        ;

        /// <summary>[requires: v3.1]
        /// Draw multiple instances of a set of elements
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements to be rendered.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        /// <param name="primcount">
        /// <para>
        /// Specifies the number of instances of the specified range of indices to be rendered.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_3_1", Version = "3.1", EntryPoint = "glDrawElementsInstanced")]
        public static extern void DrawElementsInstanced<T3>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, Int32 count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute] T3[,] indices, Int32 instancecount)
            where T3 : struct
        ;

        /// <summary>[requires: v3.1]
        /// Draw multiple instances of a set of elements
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements to be rendered.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        /// <param name="primcount">
        /// <para>
        /// Specifies the number of instances of the specified range of indices to be rendered.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_3_1", Version = "3.1", EntryPoint = "glDrawElementsInstanced")]
        public static extern void DrawElementsInstanced<T3>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, Int32 count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute] T3[,,] indices, Int32 instancecount)
            where T3 : struct
        ;

        /// <summary>[requires: v3.1]
        /// Draw multiple instances of a set of elements
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements to be rendered.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        /// <param name="primcount">
        /// <para>
        /// Specifies the number of instances of the specified range of indices to be rendered.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_3_1", Version = "3.1", EntryPoint = "glDrawElementsInstanced")]
        public static extern void DrawElementsInstanced<T3>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, Int32 count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute] ref T3 indices, Int32 instancecount)
            where T3 : struct
        ;

        /// <summary>[requires: v4.2 and ARB_base_instance|VERSION_4_2]
        /// Draw multiple instances of a set of elements with offset applied to instanced attributes
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements to be rendered.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        /// <param name="primcount">
        /// <para>
        /// Specifies the number of instances of the specified range of indices to be rendered.
        /// </para>
        /// </param>
        /// <param name="baseinstance">
        /// <para>
        /// Specifies the base instance for use in fetching instanced vertex attributes.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_base_instance|VERSION_4_2", Version = "4.2", EntryPoint = "glDrawElementsInstancedBaseInstance")]
        public static extern void DrawElementsInstancedBaseInstance(OpenTK.Graphics.OpenGL4.PrimitiveType mode, Int32 count, OpenTK.Graphics.OpenGL4.DrawElementsType type, IntPtr indices, Int32 instancecount, Int32 baseinstance);

        /// <summary>[requires: v4.2 and ARB_base_instance|VERSION_4_2]
        /// Draw multiple instances of a set of elements with offset applied to instanced attributes
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements to be rendered.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        /// <param name="primcount">
        /// <para>
        /// Specifies the number of instances of the specified range of indices to be rendered.
        /// </para>
        /// </param>
        /// <param name="baseinstance">
        /// <para>
        /// Specifies the base instance for use in fetching instanced vertex attributes.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_base_instance|VERSION_4_2", Version = "4.2", EntryPoint = "glDrawElementsInstancedBaseInstance")]
        public static extern void DrawElementsInstancedBaseInstance(OpenTK.Graphics.OpenGL4.PrimitiveType mode, Int32 count, OpenTK.Graphics.OpenGL4.DrawElementsType type, IntPtr indices, Int32 instancecount, UInt32 baseinstance);

        /// <summary>[requires: v4.2 and ARB_base_instance|VERSION_4_2]
        /// Draw multiple instances of a set of elements with offset applied to instanced attributes
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements to be rendered.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        /// <param name="primcount">
        /// <para>
        /// Specifies the number of instances of the specified range of indices to be rendered.
        /// </para>
        /// </param>
        /// <param name="baseinstance">
        /// <para>
        /// Specifies the base instance for use in fetching instanced vertex attributes.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_base_instance|VERSION_4_2", Version = "4.2", EntryPoint = "glDrawElementsInstancedBaseInstance")]
        public static extern void DrawElementsInstancedBaseInstance<T3>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, Int32 count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute] T3[] indices, Int32 instancecount, Int32 baseinstance)
            where T3 : struct
        ;

        /// <summary>[requires: v4.2 and ARB_base_instance|VERSION_4_2]
        /// Draw multiple instances of a set of elements with offset applied to instanced attributes
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements to be rendered.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        /// <param name="primcount">
        /// <para>
        /// Specifies the number of instances of the specified range of indices to be rendered.
        /// </para>
        /// </param>
        /// <param name="baseinstance">
        /// <para>
        /// Specifies the base instance for use in fetching instanced vertex attributes.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_base_instance|VERSION_4_2", Version = "4.2", EntryPoint = "glDrawElementsInstancedBaseInstance")]
        public static extern void DrawElementsInstancedBaseInstance<T3>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, Int32 count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute] T3[] indices, Int32 instancecount, UInt32 baseinstance)
            where T3 : struct
        ;

        /// <summary>[requires: v4.2 and ARB_base_instance|VERSION_4_2]
        /// Draw multiple instances of a set of elements with offset applied to instanced attributes
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements to be rendered.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        /// <param name="primcount">
        /// <para>
        /// Specifies the number of instances of the specified range of indices to be rendered.
        /// </para>
        /// </param>
        /// <param name="baseinstance">
        /// <para>
        /// Specifies the base instance for use in fetching instanced vertex attributes.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_base_instance|VERSION_4_2", Version = "4.2", EntryPoint = "glDrawElementsInstancedBaseInstance")]
        public static extern void DrawElementsInstancedBaseInstance<T3>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, Int32 count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute] T3[,] indices, Int32 instancecount, Int32 baseinstance)
            where T3 : struct
        ;

        /// <summary>[requires: v4.2 and ARB_base_instance|VERSION_4_2]
        /// Draw multiple instances of a set of elements with offset applied to instanced attributes
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements to be rendered.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        /// <param name="primcount">
        /// <para>
        /// Specifies the number of instances of the specified range of indices to be rendered.
        /// </para>
        /// </param>
        /// <param name="baseinstance">
        /// <para>
        /// Specifies the base instance for use in fetching instanced vertex attributes.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_base_instance|VERSION_4_2", Version = "4.2", EntryPoint = "glDrawElementsInstancedBaseInstance")]
        public static extern void DrawElementsInstancedBaseInstance<T3>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, Int32 count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute] T3[,] indices, Int32 instancecount, UInt32 baseinstance)
            where T3 : struct
        ;

        /// <summary>[requires: v4.2 and ARB_base_instance|VERSION_4_2]
        /// Draw multiple instances of a set of elements with offset applied to instanced attributes
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements to be rendered.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        /// <param name="primcount">
        /// <para>
        /// Specifies the number of instances of the specified range of indices to be rendered.
        /// </para>
        /// </param>
        /// <param name="baseinstance">
        /// <para>
        /// Specifies the base instance for use in fetching instanced vertex attributes.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_base_instance|VERSION_4_2", Version = "4.2", EntryPoint = "glDrawElementsInstancedBaseInstance")]
        public static extern void DrawElementsInstancedBaseInstance<T3>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, Int32 count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute] T3[,,] indices, Int32 instancecount, Int32 baseinstance)
            where T3 : struct
        ;

        /// <summary>[requires: v4.2 and ARB_base_instance|VERSION_4_2]
        /// Draw multiple instances of a set of elements with offset applied to instanced attributes
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements to be rendered.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        /// <param name="primcount">
        /// <para>
        /// Specifies the number of instances of the specified range of indices to be rendered.
        /// </para>
        /// </param>
        /// <param name="baseinstance">
        /// <para>
        /// Specifies the base instance for use in fetching instanced vertex attributes.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_base_instance|VERSION_4_2", Version = "4.2", EntryPoint = "glDrawElementsInstancedBaseInstance")]
        public static extern void DrawElementsInstancedBaseInstance<T3>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, Int32 count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute] T3[,,] indices, Int32 instancecount, UInt32 baseinstance)
            where T3 : struct
        ;

        /// <summary>[requires: v4.2 and ARB_base_instance|VERSION_4_2]
        /// Draw multiple instances of a set of elements with offset applied to instanced attributes
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements to be rendered.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        /// <param name="primcount">
        /// <para>
        /// Specifies the number of instances of the specified range of indices to be rendered.
        /// </para>
        /// </param>
        /// <param name="baseinstance">
        /// <para>
        /// Specifies the base instance for use in fetching instanced vertex attributes.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_base_instance|VERSION_4_2", Version = "4.2", EntryPoint = "glDrawElementsInstancedBaseInstance")]
        public static extern void DrawElementsInstancedBaseInstance<T3>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, Int32 count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute] ref T3 indices, Int32 instancecount, Int32 baseinstance)
            where T3 : struct
        ;

        /// <summary>[requires: v4.2 and ARB_base_instance|VERSION_4_2]
        /// Draw multiple instances of a set of elements with offset applied to instanced attributes
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements to be rendered.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        /// <param name="primcount">
        /// <para>
        /// Specifies the number of instances of the specified range of indices to be rendered.
        /// </para>
        /// </param>
        /// <param name="baseinstance">
        /// <para>
        /// Specifies the base instance for use in fetching instanced vertex attributes.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_base_instance|VERSION_4_2", Version = "4.2", EntryPoint = "glDrawElementsInstancedBaseInstance")]
        public static extern void DrawElementsInstancedBaseInstance<T3>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, Int32 count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute] ref T3 indices, Int32 instancecount, UInt32 baseinstance)
            where T3 : struct
        ;

        /// <summary>[requires: v3.2 and ARB_draw_elements_base_vertex|VERSION_3_2]
        /// Render multiple instances of a set of primitives from array data with a per-element offset
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_LINES_ADJACENCY, GL_LINE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY, GL_TRIANGLE_STRIP_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements to be rendered.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        /// <param name="primcount">
        /// <para>
        /// Specifies the number of instances of the indexed geometry that should be drawn.
        /// </para>
        /// </param>
        /// <param name="basevertex">
        /// <para>
        /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glDrawElementsInstancedBaseVertex")]
        public static extern void DrawElementsInstancedBaseVertex(OpenTK.Graphics.OpenGL4.PrimitiveType mode, Int32 count, OpenTK.Graphics.OpenGL4.DrawElementsType type, IntPtr indices, Int32 instancecount, Int32 basevertex);

        /// <summary>[requires: v3.2 and ARB_draw_elements_base_vertex|VERSION_3_2]
        /// Render multiple instances of a set of primitives from array data with a per-element offset
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_LINES_ADJACENCY, GL_LINE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY, GL_TRIANGLE_STRIP_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements to be rendered.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        /// <param name="primcount">
        /// <para>
        /// Specifies the number of instances of the indexed geometry that should be drawn.
        /// </para>
        /// </param>
        /// <param name="basevertex">
        /// <para>
        /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glDrawElementsInstancedBaseVertex")]
        public static extern void DrawElementsInstancedBaseVertex<T3>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, Int32 count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute] T3[] indices, Int32 instancecount, Int32 basevertex)
            where T3 : struct
        ;

        /// <summary>[requires: v3.2 and ARB_draw_elements_base_vertex|VERSION_3_2]
        /// Render multiple instances of a set of primitives from array data with a per-element offset
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_LINES_ADJACENCY, GL_LINE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY, GL_TRIANGLE_STRIP_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements to be rendered.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        /// <param name="primcount">
        /// <para>
        /// Specifies the number of instances of the indexed geometry that should be drawn.
        /// </para>
        /// </param>
        /// <param name="basevertex">
        /// <para>
        /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glDrawElementsInstancedBaseVertex")]
        public static extern void DrawElementsInstancedBaseVertex<T3>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, Int32 count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute] T3[,] indices, Int32 instancecount, Int32 basevertex)
            where T3 : struct
        ;

        /// <summary>[requires: v3.2 and ARB_draw_elements_base_vertex|VERSION_3_2]
        /// Render multiple instances of a set of primitives from array data with a per-element offset
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_LINES_ADJACENCY, GL_LINE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY, GL_TRIANGLE_STRIP_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements to be rendered.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        /// <param name="primcount">
        /// <para>
        /// Specifies the number of instances of the indexed geometry that should be drawn.
        /// </para>
        /// </param>
        /// <param name="basevertex">
        /// <para>
        /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glDrawElementsInstancedBaseVertex")]
        public static extern void DrawElementsInstancedBaseVertex<T3>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, Int32 count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute] T3[,,] indices, Int32 instancecount, Int32 basevertex)
            where T3 : struct
        ;

        /// <summary>[requires: v3.2 and ARB_draw_elements_base_vertex|VERSION_3_2]
        /// Render multiple instances of a set of primitives from array data with a per-element offset
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_LINES_ADJACENCY, GL_LINE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY, GL_TRIANGLE_STRIP_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements to be rendered.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        /// <param name="primcount">
        /// <para>
        /// Specifies the number of instances of the indexed geometry that should be drawn.
        /// </para>
        /// </param>
        /// <param name="basevertex">
        /// <para>
        /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glDrawElementsInstancedBaseVertex")]
        public static extern void DrawElementsInstancedBaseVertex<T3>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, Int32 count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute] ref T3 indices, Int32 instancecount, Int32 basevertex)
            where T3 : struct
        ;

        /// <summary>[requires: v4.2 and ARB_base_instance|VERSION_4_2]
        /// Render multiple instances of a set of primitives from array data with a per-element offset
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_LINES_ADJACENCY, GL_LINE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY, GL_TRIANGLE_STRIP_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements to be rendered.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        /// <param name="primcount">
        /// <para>
        /// Specifies the number of instances of the indexed geometry that should be drawn.
        /// </para>
        /// </param>
        /// <param name="basevertex">
        /// <para>
        /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
        /// </para>
        /// </param>
        /// <param name="baseinstance">
        /// <para>
        /// Specifies the base instance for use in fetching instanced vertex attributes.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_base_instance|VERSION_4_2", Version = "4.2", EntryPoint = "glDrawElementsInstancedBaseVertexBaseInstance")]
        public static extern void DrawElementsInstancedBaseVertexBaseInstance(OpenTK.Graphics.OpenGL4.PrimitiveType mode, Int32 count, OpenTK.Graphics.OpenGL4.DrawElementsType type, IntPtr indices, Int32 instancecount, Int32 basevertex, Int32 baseinstance);

        /// <summary>[requires: v4.2 and ARB_base_instance|VERSION_4_2]
        /// Render multiple instances of a set of primitives from array data with a per-element offset
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_LINES_ADJACENCY, GL_LINE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY, GL_TRIANGLE_STRIP_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements to be rendered.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        /// <param name="primcount">
        /// <para>
        /// Specifies the number of instances of the indexed geometry that should be drawn.
        /// </para>
        /// </param>
        /// <param name="basevertex">
        /// <para>
        /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
        /// </para>
        /// </param>
        /// <param name="baseinstance">
        /// <para>
        /// Specifies the base instance for use in fetching instanced vertex attributes.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_base_instance|VERSION_4_2", Version = "4.2", EntryPoint = "glDrawElementsInstancedBaseVertexBaseInstance")]
        public static extern void DrawElementsInstancedBaseVertexBaseInstance(OpenTK.Graphics.OpenGL4.PrimitiveType mode, Int32 count, OpenTK.Graphics.OpenGL4.DrawElementsType type, IntPtr indices, Int32 instancecount, Int32 basevertex, UInt32 baseinstance);

        /// <summary>[requires: v4.2 and ARB_base_instance|VERSION_4_2]
        /// Render multiple instances of a set of primitives from array data with a per-element offset
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_LINES_ADJACENCY, GL_LINE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY, GL_TRIANGLE_STRIP_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements to be rendered.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        /// <param name="primcount">
        /// <para>
        /// Specifies the number of instances of the indexed geometry that should be drawn.
        /// </para>
        /// </param>
        /// <param name="basevertex">
        /// <para>
        /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
        /// </para>
        /// </param>
        /// <param name="baseinstance">
        /// <para>
        /// Specifies the base instance for use in fetching instanced vertex attributes.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_base_instance|VERSION_4_2", Version = "4.2", EntryPoint = "glDrawElementsInstancedBaseVertexBaseInstance")]
        public static extern void DrawElementsInstancedBaseVertexBaseInstance<T3>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, Int32 count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute] T3[] indices, Int32 instancecount, Int32 basevertex, Int32 baseinstance)
            where T3 : struct
        ;

        /// <summary>[requires: v4.2 and ARB_base_instance|VERSION_4_2]
        /// Render multiple instances of a set of primitives from array data with a per-element offset
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_LINES_ADJACENCY, GL_LINE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY, GL_TRIANGLE_STRIP_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements to be rendered.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        /// <param name="primcount">
        /// <para>
        /// Specifies the number of instances of the indexed geometry that should be drawn.
        /// </para>
        /// </param>
        /// <param name="basevertex">
        /// <para>
        /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
        /// </para>
        /// </param>
        /// <param name="baseinstance">
        /// <para>
        /// Specifies the base instance for use in fetching instanced vertex attributes.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_base_instance|VERSION_4_2", Version = "4.2", EntryPoint = "glDrawElementsInstancedBaseVertexBaseInstance")]
        public static extern void DrawElementsInstancedBaseVertexBaseInstance<T3>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, Int32 count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute] T3[] indices, Int32 instancecount, Int32 basevertex, UInt32 baseinstance)
            where T3 : struct
        ;

        /// <summary>[requires: v4.2 and ARB_base_instance|VERSION_4_2]
        /// Render multiple instances of a set of primitives from array data with a per-element offset
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_LINES_ADJACENCY, GL_LINE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY, GL_TRIANGLE_STRIP_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements to be rendered.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        /// <param name="primcount">
        /// <para>
        /// Specifies the number of instances of the indexed geometry that should be drawn.
        /// </para>
        /// </param>
        /// <param name="basevertex">
        /// <para>
        /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
        /// </para>
        /// </param>
        /// <param name="baseinstance">
        /// <para>
        /// Specifies the base instance for use in fetching instanced vertex attributes.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_base_instance|VERSION_4_2", Version = "4.2", EntryPoint = "glDrawElementsInstancedBaseVertexBaseInstance")]
        public static extern void DrawElementsInstancedBaseVertexBaseInstance<T3>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, Int32 count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute] T3[,] indices, Int32 instancecount, Int32 basevertex, Int32 baseinstance)
            where T3 : struct
        ;

        /// <summary>[requires: v4.2 and ARB_base_instance|VERSION_4_2]
        /// Render multiple instances of a set of primitives from array data with a per-element offset
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_LINES_ADJACENCY, GL_LINE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY, GL_TRIANGLE_STRIP_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements to be rendered.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        /// <param name="primcount">
        /// <para>
        /// Specifies the number of instances of the indexed geometry that should be drawn.
        /// </para>
        /// </param>
        /// <param name="basevertex">
        /// <para>
        /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
        /// </para>
        /// </param>
        /// <param name="baseinstance">
        /// <para>
        /// Specifies the base instance for use in fetching instanced vertex attributes.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_base_instance|VERSION_4_2", Version = "4.2", EntryPoint = "glDrawElementsInstancedBaseVertexBaseInstance")]
        public static extern void DrawElementsInstancedBaseVertexBaseInstance<T3>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, Int32 count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute] T3[,] indices, Int32 instancecount, Int32 basevertex, UInt32 baseinstance)
            where T3 : struct
        ;

        /// <summary>[requires: v4.2 and ARB_base_instance|VERSION_4_2]
        /// Render multiple instances of a set of primitives from array data with a per-element offset
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_LINES_ADJACENCY, GL_LINE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY, GL_TRIANGLE_STRIP_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements to be rendered.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        /// <param name="primcount">
        /// <para>
        /// Specifies the number of instances of the indexed geometry that should be drawn.
        /// </para>
        /// </param>
        /// <param name="basevertex">
        /// <para>
        /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
        /// </para>
        /// </param>
        /// <param name="baseinstance">
        /// <para>
        /// Specifies the base instance for use in fetching instanced vertex attributes.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_base_instance|VERSION_4_2", Version = "4.2", EntryPoint = "glDrawElementsInstancedBaseVertexBaseInstance")]
        public static extern void DrawElementsInstancedBaseVertexBaseInstance<T3>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, Int32 count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute] T3[,,] indices, Int32 instancecount, Int32 basevertex, Int32 baseinstance)
            where T3 : struct
        ;

        /// <summary>[requires: v4.2 and ARB_base_instance|VERSION_4_2]
        /// Render multiple instances of a set of primitives from array data with a per-element offset
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_LINES_ADJACENCY, GL_LINE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY, GL_TRIANGLE_STRIP_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements to be rendered.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        /// <param name="primcount">
        /// <para>
        /// Specifies the number of instances of the indexed geometry that should be drawn.
        /// </para>
        /// </param>
        /// <param name="basevertex">
        /// <para>
        /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
        /// </para>
        /// </param>
        /// <param name="baseinstance">
        /// <para>
        /// Specifies the base instance for use in fetching instanced vertex attributes.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_base_instance|VERSION_4_2", Version = "4.2", EntryPoint = "glDrawElementsInstancedBaseVertexBaseInstance")]
        public static extern void DrawElementsInstancedBaseVertexBaseInstance<T3>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, Int32 count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute] T3[,,] indices, Int32 instancecount, Int32 basevertex, UInt32 baseinstance)
            where T3 : struct
        ;

        /// <summary>[requires: v4.2 and ARB_base_instance|VERSION_4_2]
        /// Render multiple instances of a set of primitives from array data with a per-element offset
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_LINES_ADJACENCY, GL_LINE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY, GL_TRIANGLE_STRIP_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements to be rendered.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        /// <param name="primcount">
        /// <para>
        /// Specifies the number of instances of the indexed geometry that should be drawn.
        /// </para>
        /// </param>
        /// <param name="basevertex">
        /// <para>
        /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
        /// </para>
        /// </param>
        /// <param name="baseinstance">
        /// <para>
        /// Specifies the base instance for use in fetching instanced vertex attributes.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_base_instance|VERSION_4_2", Version = "4.2", EntryPoint = "glDrawElementsInstancedBaseVertexBaseInstance")]
        public static extern void DrawElementsInstancedBaseVertexBaseInstance<T3>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, Int32 count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute] ref T3 indices, Int32 instancecount, Int32 basevertex, Int32 baseinstance)
            where T3 : struct
        ;

        /// <summary>[requires: v4.2 and ARB_base_instance|VERSION_4_2]
        /// Render multiple instances of a set of primitives from array data with a per-element offset
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_LINES_ADJACENCY, GL_LINE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY, GL_TRIANGLE_STRIP_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements to be rendered.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        /// <param name="primcount">
        /// <para>
        /// Specifies the number of instances of the indexed geometry that should be drawn.
        /// </para>
        /// </param>
        /// <param name="basevertex">
        /// <para>
        /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
        /// </para>
        /// </param>
        /// <param name="baseinstance">
        /// <para>
        /// Specifies the base instance for use in fetching instanced vertex attributes.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_base_instance|VERSION_4_2", Version = "4.2", EntryPoint = "glDrawElementsInstancedBaseVertexBaseInstance")]
        public static extern void DrawElementsInstancedBaseVertexBaseInstance<T3>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, Int32 count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute] ref T3 indices, Int32 instancecount, Int32 basevertex, UInt32 baseinstance)
            where T3 : struct
        ;

        /// <summary>[requires: v1.2]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="start">
        /// <para>
        /// Specifies the minimum array index contained in indices.
        /// </para>
        /// </param>
        /// <param name="end">
        /// <para>
        /// Specifies the maximum array index contained in indices.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements to be rendered.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_2", Version = "1.2", EntryPoint = "glDrawRangeElements")]
        public static extern void DrawRangeElements(OpenTK.Graphics.OpenGL4.PrimitiveType mode, Int32 start, Int32 end, Int32 count, OpenTK.Graphics.OpenGL4.DrawElementsType type, IntPtr indices);

        /// <summary>[requires: v1.2]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="start">
        /// <para>
        /// Specifies the minimum array index contained in indices.
        /// </para>
        /// </param>
        /// <param name="end">
        /// <para>
        /// Specifies the maximum array index contained in indices.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements to be rendered.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_2", Version = "1.2", EntryPoint = "glDrawRangeElements")]
        public static extern void DrawRangeElements<T5>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, Int32 start, Int32 end, Int32 count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute] T5[] indices)
            where T5 : struct
        ;

        /// <summary>[requires: v1.2]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="start">
        /// <para>
        /// Specifies the minimum array index contained in indices.
        /// </para>
        /// </param>
        /// <param name="end">
        /// <para>
        /// Specifies the maximum array index contained in indices.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements to be rendered.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_2", Version = "1.2", EntryPoint = "glDrawRangeElements")]
        public static extern void DrawRangeElements<T5>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, Int32 start, Int32 end, Int32 count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute] T5[,] indices)
            where T5 : struct
        ;

        /// <summary>[requires: v1.2]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="start">
        /// <para>
        /// Specifies the minimum array index contained in indices.
        /// </para>
        /// </param>
        /// <param name="end">
        /// <para>
        /// Specifies the maximum array index contained in indices.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements to be rendered.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_2", Version = "1.2", EntryPoint = "glDrawRangeElements")]
        public static extern void DrawRangeElements<T5>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, Int32 start, Int32 end, Int32 count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute] T5[,,] indices)
            where T5 : struct
        ;

        /// <summary>[requires: v1.2]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="start">
        /// <para>
        /// Specifies the minimum array index contained in indices.
        /// </para>
        /// </param>
        /// <param name="end">
        /// <para>
        /// Specifies the maximum array index contained in indices.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements to be rendered.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_2", Version = "1.2", EntryPoint = "glDrawRangeElements")]
        public static extern void DrawRangeElements<T5>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, Int32 start, Int32 end, Int32 count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute] ref T5 indices)
            where T5 : struct
        ;

        /// <summary>[requires: v1.2]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="start">
        /// <para>
        /// Specifies the minimum array index contained in indices.
        /// </para>
        /// </param>
        /// <param name="end">
        /// <para>
        /// Specifies the maximum array index contained in indices.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements to be rendered.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_2", Version = "1.2", EntryPoint = "glDrawRangeElements")]
        public static extern void DrawRangeElements(OpenTK.Graphics.OpenGL4.PrimitiveType mode, UInt32 start, UInt32 end, Int32 count, OpenTK.Graphics.OpenGL4.DrawElementsType type, IntPtr indices);

        /// <summary>[requires: v1.2]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="start">
        /// <para>
        /// Specifies the minimum array index contained in indices.
        /// </para>
        /// </param>
        /// <param name="end">
        /// <para>
        /// Specifies the maximum array index contained in indices.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements to be rendered.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_2", Version = "1.2", EntryPoint = "glDrawRangeElements")]
        public static extern void DrawRangeElements<T5>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, UInt32 start, UInt32 end, Int32 count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute] T5[] indices)
            where T5 : struct
        ;

        /// <summary>[requires: v1.2]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="start">
        /// <para>
        /// Specifies the minimum array index contained in indices.
        /// </para>
        /// </param>
        /// <param name="end">
        /// <para>
        /// Specifies the maximum array index contained in indices.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements to be rendered.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_2", Version = "1.2", EntryPoint = "glDrawRangeElements")]
        public static extern void DrawRangeElements<T5>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, UInt32 start, UInt32 end, Int32 count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute] T5[,] indices)
            where T5 : struct
        ;

        /// <summary>[requires: v1.2]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="start">
        /// <para>
        /// Specifies the minimum array index contained in indices.
        /// </para>
        /// </param>
        /// <param name="end">
        /// <para>
        /// Specifies the maximum array index contained in indices.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements to be rendered.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_2", Version = "1.2", EntryPoint = "glDrawRangeElements")]
        public static extern void DrawRangeElements<T5>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, UInt32 start, UInt32 end, Int32 count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute] T5[,,] indices)
            where T5 : struct
        ;

        /// <summary>[requires: v1.2]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="start">
        /// <para>
        /// Specifies the minimum array index contained in indices.
        /// </para>
        /// </param>
        /// <param name="end">
        /// <para>
        /// Specifies the maximum array index contained in indices.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements to be rendered.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_2", Version = "1.2", EntryPoint = "glDrawRangeElements")]
        public static extern void DrawRangeElements<T5>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, UInt32 start, UInt32 end, Int32 count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute] ref T5 indices)
            where T5 : struct
        ;

        /// <summary>[requires: v3.2 and ARB_draw_elements_base_vertex|VERSION_3_2]
        /// Render primitives from array data with a per-element offset
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_LINES_ADJACENCY, GL_LINE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY, GL_TRIANGLE_STRIP_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="start">
        /// <para>
        /// Specifies the minimum array index contained in indices.
        /// </para>
        /// </param>
        /// <param name="end">
        /// <para>
        /// Specifies the maximum array index contained in indices.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements to be rendered.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        /// <param name="basevertex">
        /// <para>
        /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glDrawRangeElementsBaseVertex")]
        public static extern void DrawRangeElementsBaseVertex(OpenTK.Graphics.OpenGL4.PrimitiveType mode, Int32 start, Int32 end, Int32 count, OpenTK.Graphics.OpenGL4.DrawElementsType type, IntPtr indices, Int32 basevertex);

        /// <summary>[requires: v3.2 and ARB_draw_elements_base_vertex|VERSION_3_2]
        /// Render primitives from array data with a per-element offset
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_LINES_ADJACENCY, GL_LINE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY, GL_TRIANGLE_STRIP_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="start">
        /// <para>
        /// Specifies the minimum array index contained in indices.
        /// </para>
        /// </param>
        /// <param name="end">
        /// <para>
        /// Specifies the maximum array index contained in indices.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements to be rendered.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        /// <param name="basevertex">
        /// <para>
        /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glDrawRangeElementsBaseVertex")]
        public static extern void DrawRangeElementsBaseVertex<T5>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, Int32 start, Int32 end, Int32 count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute] T5[] indices, Int32 basevertex)
            where T5 : struct
        ;

        /// <summary>[requires: v3.2 and ARB_draw_elements_base_vertex|VERSION_3_2]
        /// Render primitives from array data with a per-element offset
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_LINES_ADJACENCY, GL_LINE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY, GL_TRIANGLE_STRIP_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="start">
        /// <para>
        /// Specifies the minimum array index contained in indices.
        /// </para>
        /// </param>
        /// <param name="end">
        /// <para>
        /// Specifies the maximum array index contained in indices.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements to be rendered.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        /// <param name="basevertex">
        /// <para>
        /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glDrawRangeElementsBaseVertex")]
        public static extern void DrawRangeElementsBaseVertex<T5>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, Int32 start, Int32 end, Int32 count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute] T5[,] indices, Int32 basevertex)
            where T5 : struct
        ;

        /// <summary>[requires: v3.2 and ARB_draw_elements_base_vertex|VERSION_3_2]
        /// Render primitives from array data with a per-element offset
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_LINES_ADJACENCY, GL_LINE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY, GL_TRIANGLE_STRIP_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="start">
        /// <para>
        /// Specifies the minimum array index contained in indices.
        /// </para>
        /// </param>
        /// <param name="end">
        /// <para>
        /// Specifies the maximum array index contained in indices.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements to be rendered.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        /// <param name="basevertex">
        /// <para>
        /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glDrawRangeElementsBaseVertex")]
        public static extern void DrawRangeElementsBaseVertex<T5>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, Int32 start, Int32 end, Int32 count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute] T5[,,] indices, Int32 basevertex)
            where T5 : struct
        ;

        /// <summary>[requires: v3.2 and ARB_draw_elements_base_vertex|VERSION_3_2]
        /// Render primitives from array data with a per-element offset
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_LINES_ADJACENCY, GL_LINE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY, GL_TRIANGLE_STRIP_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="start">
        /// <para>
        /// Specifies the minimum array index contained in indices.
        /// </para>
        /// </param>
        /// <param name="end">
        /// <para>
        /// Specifies the maximum array index contained in indices.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements to be rendered.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        /// <param name="basevertex">
        /// <para>
        /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glDrawRangeElementsBaseVertex")]
        public static extern void DrawRangeElementsBaseVertex<T5>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, Int32 start, Int32 end, Int32 count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute] ref T5 indices, Int32 basevertex)
            where T5 : struct
        ;

        /// <summary>[requires: v3.2 and ARB_draw_elements_base_vertex|VERSION_3_2]
        /// Render primitives from array data with a per-element offset
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_LINES_ADJACENCY, GL_LINE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY, GL_TRIANGLE_STRIP_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="start">
        /// <para>
        /// Specifies the minimum array index contained in indices.
        /// </para>
        /// </param>
        /// <param name="end">
        /// <para>
        /// Specifies the maximum array index contained in indices.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements to be rendered.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        /// <param name="basevertex">
        /// <para>
        /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glDrawRangeElementsBaseVertex")]
        public static extern void DrawRangeElementsBaseVertex(OpenTK.Graphics.OpenGL4.PrimitiveType mode, UInt32 start, UInt32 end, Int32 count, OpenTK.Graphics.OpenGL4.DrawElementsType type, IntPtr indices, Int32 basevertex);

        /// <summary>[requires: v3.2 and ARB_draw_elements_base_vertex|VERSION_3_2]
        /// Render primitives from array data with a per-element offset
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_LINES_ADJACENCY, GL_LINE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY, GL_TRIANGLE_STRIP_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="start">
        /// <para>
        /// Specifies the minimum array index contained in indices.
        /// </para>
        /// </param>
        /// <param name="end">
        /// <para>
        /// Specifies the maximum array index contained in indices.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements to be rendered.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        /// <param name="basevertex">
        /// <para>
        /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glDrawRangeElementsBaseVertex")]
        public static extern void DrawRangeElementsBaseVertex<T5>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, UInt32 start, UInt32 end, Int32 count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute] T5[] indices, Int32 basevertex)
            where T5 : struct
        ;

        /// <summary>[requires: v3.2 and ARB_draw_elements_base_vertex|VERSION_3_2]
        /// Render primitives from array data with a per-element offset
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_LINES_ADJACENCY, GL_LINE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY, GL_TRIANGLE_STRIP_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="start">
        /// <para>
        /// Specifies the minimum array index contained in indices.
        /// </para>
        /// </param>
        /// <param name="end">
        /// <para>
        /// Specifies the maximum array index contained in indices.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements to be rendered.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        /// <param name="basevertex">
        /// <para>
        /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glDrawRangeElementsBaseVertex")]
        public static extern void DrawRangeElementsBaseVertex<T5>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, UInt32 start, UInt32 end, Int32 count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute] T5[,] indices, Int32 basevertex)
            where T5 : struct
        ;

        /// <summary>[requires: v3.2 and ARB_draw_elements_base_vertex|VERSION_3_2]
        /// Render primitives from array data with a per-element offset
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_LINES_ADJACENCY, GL_LINE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY, GL_TRIANGLE_STRIP_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="start">
        /// <para>
        /// Specifies the minimum array index contained in indices.
        /// </para>
        /// </param>
        /// <param name="end">
        /// <para>
        /// Specifies the maximum array index contained in indices.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements to be rendered.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        /// <param name="basevertex">
        /// <para>
        /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glDrawRangeElementsBaseVertex")]
        public static extern void DrawRangeElementsBaseVertex<T5>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, UInt32 start, UInt32 end, Int32 count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute] T5[,,] indices, Int32 basevertex)
            where T5 : struct
        ;

        /// <summary>[requires: v3.2 and ARB_draw_elements_base_vertex|VERSION_3_2]
        /// Render primitives from array data with a per-element offset
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_LINES_ADJACENCY, GL_LINE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY, GL_TRIANGLE_STRIP_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="start">
        /// <para>
        /// Specifies the minimum array index contained in indices.
        /// </para>
        /// </param>
        /// <param name="end">
        /// <para>
        /// Specifies the maximum array index contained in indices.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements to be rendered.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        /// <param name="basevertex">
        /// <para>
        /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glDrawRangeElementsBaseVertex")]
        public static extern void DrawRangeElementsBaseVertex<T5>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, UInt32 start, UInt32 end, Int32 count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute] ref T5 indices, Int32 basevertex)
            where T5 : struct
        ;

        /// <summary>[requires: v4.0 and ARB_transform_feedback2|VERSION_4_0]
        /// Render primitives using a count derived from a transform feedback object
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY, and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="id">
        /// <para>
        /// Specifies the name of a transform feedback object from which to retrieve a primitive count.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_transform_feedback2|VERSION_4_0", Version = "4.0", EntryPoint = "glDrawTransformFeedback")]
        public static extern void DrawTransformFeedback(OpenTK.Graphics.OpenGL4.PrimitiveType mode, Int32 id);

        /// <summary>[requires: v4.0 and ARB_transform_feedback2|VERSION_4_0]
        /// Render primitives using a count derived from a transform feedback object
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY, and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="id">
        /// <para>
        /// Specifies the name of a transform feedback object from which to retrieve a primitive count.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_transform_feedback2|VERSION_4_0", Version = "4.0", EntryPoint = "glDrawTransformFeedback")]
        public static extern void DrawTransformFeedback(OpenTK.Graphics.OpenGL4.PrimitiveType mode, UInt32 id);

        /// <summary>[requires: v4.2 and ARB_transform_feedback_instanced|VERSION_4_2]
        /// Render multiple instances of primitives using a count derived from a transform feedback object
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY, and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="id">
        /// <para>
        /// Specifies the name of a transform feedback object from which to retrieve a primitive count.
        /// </para>
        /// </param>
        /// <param name="primcount">
        /// <para>
        /// Specifies the number of instances of the geometry to render.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_transform_feedback_instanced|VERSION_4_2", Version = "4.2", EntryPoint = "glDrawTransformFeedbackInstanced")]
        public static extern void DrawTransformFeedbackInstanced(OpenTK.Graphics.OpenGL4.PrimitiveType mode, Int32 id, Int32 instancecount);

        /// <summary>[requires: v4.2 and ARB_transform_feedback_instanced|VERSION_4_2]
        /// Render multiple instances of primitives using a count derived from a transform feedback object
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY, and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="id">
        /// <para>
        /// Specifies the name of a transform feedback object from which to retrieve a primitive count.
        /// </para>
        /// </param>
        /// <param name="primcount">
        /// <para>
        /// Specifies the number of instances of the geometry to render.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_transform_feedback_instanced|VERSION_4_2", Version = "4.2", EntryPoint = "glDrawTransformFeedbackInstanced")]
        public static extern void DrawTransformFeedbackInstanced(OpenTK.Graphics.OpenGL4.PrimitiveType mode, UInt32 id, Int32 instancecount);

        /// <summary>[requires: v4.0 and ARB_transform_feedback3|VERSION_4_0]
        /// Render primitives using a count derived from a specifed stream of a transform feedback object
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY, and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="id">
        /// <para>
        /// Specifies the name of a transform feedback object from which to retrieve a primitive count.
        /// </para>
        /// </param>
        /// <param name="stream">
        /// <para>
        /// Specifies the index of the transform feedback stream from which to retrieve a primitive count.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_transform_feedback3|VERSION_4_0", Version = "4.0", EntryPoint = "glDrawTransformFeedbackStream")]
        public static extern void DrawTransformFeedbackStream(OpenTK.Graphics.OpenGL4.PrimitiveType mode, Int32 id, Int32 stream);

        /// <summary>[requires: v4.0 and ARB_transform_feedback3|VERSION_4_0]
        /// Render primitives using a count derived from a specifed stream of a transform feedback object
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY, and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="id">
        /// <para>
        /// Specifies the name of a transform feedback object from which to retrieve a primitive count.
        /// </para>
        /// </param>
        /// <param name="stream">
        /// <para>
        /// Specifies the index of the transform feedback stream from which to retrieve a primitive count.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_transform_feedback3|VERSION_4_0", Version = "4.0", EntryPoint = "glDrawTransformFeedbackStream")]
        public static extern void DrawTransformFeedbackStream(OpenTK.Graphics.OpenGL4.PrimitiveType mode, UInt32 id, UInt32 stream);

        /// <summary>[requires: v4.2 and ARB_transform_feedback_instanced|VERSION_4_2]
        /// Render multiple instances of primitives using a count derived from a specifed stream of a transform feedback object
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY, and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="id">
        /// <para>
        /// Specifies the name of a transform feedback object from which to retrieve a primitive count.
        /// </para>
        /// </param>
        /// <param name="stream">
        /// <para>
        /// Specifies the index of the transform feedback stream from which to retrieve a primitive count.
        /// </para>
        /// </param>
        /// <param name="primcount">
        /// <para>
        /// Specifies the number of instances of the geometry to render.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_transform_feedback_instanced|VERSION_4_2", Version = "4.2", EntryPoint = "glDrawTransformFeedbackStreamInstanced")]
        public static extern void DrawTransformFeedbackStreamInstanced(OpenTK.Graphics.OpenGL4.PrimitiveType mode, Int32 id, Int32 stream, Int32 instancecount);

        /// <summary>[requires: v4.2 and ARB_transform_feedback_instanced|VERSION_4_2]
        /// Render multiple instances of primitives using a count derived from a specifed stream of a transform feedback object
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY, and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="id">
        /// <para>
        /// Specifies the name of a transform feedback object from which to retrieve a primitive count.
        /// </para>
        /// </param>
        /// <param name="stream">
        /// <para>
        /// Specifies the index of the transform feedback stream from which to retrieve a primitive count.
        /// </para>
        /// </param>
        /// <param name="primcount">
        /// <para>
        /// Specifies the number of instances of the geometry to render.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_transform_feedback_instanced|VERSION_4_2", Version = "4.2", EntryPoint = "glDrawTransformFeedbackStreamInstanced")]
        public static extern void DrawTransformFeedbackStreamInstanced(OpenTK.Graphics.OpenGL4.PrimitiveType mode, UInt32 id, UInt32 stream, Int32 instancecount);

        /// <summary>[requires: v1.0]
        /// Enable or disable server-side GL capabilities
        /// </summary>
        /// <param name="cap">
        /// <para>
        /// Specifies a symbolic constant indicating a GL capability.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the switch to disable (for glEnablei and glDisablei only).
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glEnable")]
        public static extern void Enable(OpenTK.Graphics.OpenGL4.EnableCap cap);

        /// <summary>[requires: v3.0]
        /// Enable or disable server-side GL capabilities
        /// </summary>
        /// <param name="cap">
        /// <para>
        /// Specifies a symbolic constant indicating a GL capability.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the switch to disable (for glEnablei and glDisablei only).
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glEnablei")]
        public static extern void Enable(OpenTK.Graphics.OpenGL4.IndexedEnableCap target, Int32 index);

        /// <summary>[requires: v3.0]
        /// Enable or disable server-side GL capabilities
        /// </summary>
        /// <param name="cap">
        /// <para>
        /// Specifies a symbolic constant indicating a GL capability.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the switch to disable (for glEnablei and glDisablei only).
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glEnablei")]
        public static extern void Enable(OpenTK.Graphics.OpenGL4.IndexedEnableCap target, UInt32 index);

        /// <summary>[requires: v2.0]
        /// Enable or disable a generic vertex attribute array
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be enabled or disabled.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glEnableVertexAttribArray")]
        public static extern void EnableVertexAttribArray(Int32 index);

        /// <summary>[requires: v2.0]
        /// Enable or disable a generic vertex attribute array
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be enabled or disabled.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glEnableVertexAttribArray")]
        public static extern void EnableVertexAttribArray(UInt32 index);

        /// <summary>[requires: v3.0]</summary>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glEndConditionalRender")]
        public static extern void EndConditionalRender();

        /// <summary>[requires: v1.5]</summary>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glEndQuery")]
        public static extern void EndQuery(OpenTK.Graphics.OpenGL4.QueryTarget target);

        /// <summary>[requires: v4.0 and ARB_transform_feedback3|VERSION_4_0]</summary>
        [AutoGenerated(Category = "ARB_transform_feedback3|VERSION_4_0", Version = "4.0", EntryPoint = "glEndQueryIndexed")]
        public static extern void EndQueryIndexed(OpenTK.Graphics.OpenGL4.QueryTarget target, Int32 index);

        /// <summary>[requires: v4.0 and ARB_transform_feedback3|VERSION_4_0]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_transform_feedback3|VERSION_4_0", Version = "4.0", EntryPoint = "glEndQueryIndexed")]
        public static extern void EndQueryIndexed(OpenTK.Graphics.OpenGL4.QueryTarget target, UInt32 index);

        /// <summary>[requires: v3.0]</summary>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glEndTransformFeedback")]
        public static extern void EndTransformFeedback();

        /// <summary>[requires: v3.2 and ARB_sync|VERSION_3_2]
        /// Create a new sync object and insert it into the GL command stream
        /// </summary>
        /// <param name="condition">
        /// <para>
        /// Specifies the condition that must be met to set the sync object's state to signaled. condition must be GL_SYNC_GPU_COMMANDS_COMPLETE.
        /// </para>
        /// </param>
        /// <param name="flags">
        /// <para>
        /// Specifies a bitwise combination of flags controlling the behavior of the sync object. No flags are presently defined for this operation and flags must be zero. flags is a placeholder for anticipated future extensions of fence sync object capabilities.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_sync|VERSION_3_2", Version = "3.2", EntryPoint = "glFenceSync")]
        public static extern IntPtr FenceSync(OpenTK.Graphics.OpenGL4.SyncCondition condition, OpenTK.Graphics.OpenGL4.WaitSyncFlags flags);

        /// <summary>[requires: v1.0]
        /// Block until all GL execution is complete
        /// </summary>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glFinish")]
        public static extern void Finish();

        /// <summary>[requires: v1.0]
        /// Force execution of GL commands in finite time
        /// </summary>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glFlush")]
        public static extern void Flush();

        /// <summary>[requires: v3.0 and ARB_map_buffer_range|VERSION_3_0]
        /// Indicate modifications to a range of a mapped buffer
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target of the flush operation. target must be GL_ARRAY_BUFFER, GL_COPY_READ_BUFFER, GL_COPY_WRITE_BUFFER, GL_DISPATCH_INDIRECT_BUFFER, GL_DRAW_INDIRECT_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, GL_PIXEL_UNPACK_BUFFER, GL_QUERY_BUFFER, GL_SHADER_STORAGE_BUFFER, GL_TEXTURE_BUFFER, GL_TRANSFORM_FEEDBACK_BUFFER, or GL_UNIFORM_BUFFER.
        /// </para>
        /// </param>
        /// <param name="offset">
        /// <para>
        /// Specifies the start of the buffer subrange, in basic machine units.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the length of the buffer subrange, in basic machine units.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_map_buffer_range|VERSION_3_0", Version = "3.0", EntryPoint = "glFlushMappedBufferRange")]
        public static extern void FlushMappedBufferRange(OpenTK.Graphics.OpenGL4.BufferTarget target, IntPtr offset, IntPtr length);

        /// <summary>[requires: v4.3 and ARB_framebuffer_no_attachments|VERSION_4_3]
        /// Set a named parameter of a framebuffer
        /// </summary>
        /// <param name="target">
        /// <para>
        /// The target of the operation, which must be GL_READ_FRAMEBUFFER, GL_DRAW_FRAMEBUFFER or GL_FRAMEBUFFER.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// A token indicating the parameter to be modified.
        /// </para>
        /// </param>
        /// <param name="param">
        /// <para>
        /// The new value for the parameter named pname.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_framebuffer_no_attachments|VERSION_4_3", Version = "4.3", EntryPoint = "glFramebufferParameteri")]
        public static extern void FramebufferParameter(OpenTK.Graphics.OpenGL4.FramebufferTarget target, OpenTK.Graphics.OpenGL4.FramebufferDefaultParameter pname, Int32 param);

        /// <summary>[requires: v3.0 and ARB_framebuffer_object|VERSION_3_0]
        /// Attach a renderbuffer as a logical buffer to the currently bound framebuffer object
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the framebuffer target. target must be GL_DRAW_FRAMEBUFFER, GL_READ_FRAMEBUFFER, or GL_FRAMEBUFFER. GL_FRAMEBUFFER is equivalent to GL_DRAW_FRAMEBUFFER.
        /// </para>
        /// </param>
        /// <param name="attachment">
        /// <para>
        /// Specifies the attachment point of the framebuffer.
        /// </para>
        /// </param>
        /// <param name="renderbuffertarget">
        /// <para>
        /// Specifies the renderbuffer target and must be GL_RENDERBUFFER.
        /// </para>
        /// </param>
        /// <param name="renderbuffer">
        /// <para>
        /// Specifies the name of an existing renderbuffer object of type renderbuffertarget to attach.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glFramebufferRenderbuffer")]
        public static extern void FramebufferRenderbuffer(OpenTK.Graphics.OpenGL4.FramebufferTarget target, OpenTK.Graphics.OpenGL4.FramebufferAttachment attachment, OpenTK.Graphics.OpenGL4.RenderbufferTarget renderbuffertarget, Int32 renderbuffer);

        /// <summary>[requires: v3.0 and ARB_framebuffer_object|VERSION_3_0]
        /// Attach a renderbuffer as a logical buffer to the currently bound framebuffer object
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the framebuffer target. target must be GL_DRAW_FRAMEBUFFER, GL_READ_FRAMEBUFFER, or GL_FRAMEBUFFER. GL_FRAMEBUFFER is equivalent to GL_DRAW_FRAMEBUFFER.
        /// </para>
        /// </param>
        /// <param name="attachment">
        /// <para>
        /// Specifies the attachment point of the framebuffer.
        /// </para>
        /// </param>
        /// <param name="renderbuffertarget">
        /// <para>
        /// Specifies the renderbuffer target and must be GL_RENDERBUFFER.
        /// </para>
        /// </param>
        /// <param name="renderbuffer">
        /// <para>
        /// Specifies the name of an existing renderbuffer object of type renderbuffertarget to attach.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glFramebufferRenderbuffer")]
        public static extern void FramebufferRenderbuffer(OpenTK.Graphics.OpenGL4.FramebufferTarget target, OpenTK.Graphics.OpenGL4.FramebufferAttachment attachment, OpenTK.Graphics.OpenGL4.RenderbufferTarget renderbuffertarget, UInt32 renderbuffer);

        /// <summary>[requires: v3.2]
        /// Attach a level of a texture object as a logical buffer to the currently bound framebuffer object
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the framebuffer target. target must be GL_DRAW_FRAMEBUFFER, GL_READ_FRAMEBUFFER, or GL_FRAMEBUFFER. GL_FRAMEBUFFER is equivalent to GL_DRAW_FRAMEBUFFER.
        /// </para>
        /// </param>
        /// <param name="attachment">
        /// <para>
        /// Specifies the attachment point of the framebuffer. attachment must be GL_COLOR_ATTACHMENTi, GL_DEPTH_ATTACHMENT, GL_STENCIL_ATTACHMENT or GL_DEPTH_STENCIL_ATTACHMENT.
        /// </para>
        /// </param>
        /// <param name="textarget">
        /// <para>
        /// For glFramebufferTexture1D, glFramebufferTexture2D and glFramebufferTexture3D, specifies what type of texture is expected in the texture parameter, or for cube map textures, which face is to be attached.
        /// </para>
        /// </param>
        /// <param name="texture">
        /// <para>
        /// Specifies the texture object to attach to the framebuffer attachment point named by attachment.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the mipmap level of texture to attach.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_3_2", Version = "3.2", EntryPoint = "glFramebufferTexture")]
        public static extern void FramebufferTexture(OpenTK.Graphics.OpenGL4.FramebufferTarget target, OpenTK.Graphics.OpenGL4.FramebufferAttachment attachment, Int32 texture, Int32 level);

        /// <summary>[requires: v3.2]
        /// Attach a level of a texture object as a logical buffer to the currently bound framebuffer object
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the framebuffer target. target must be GL_DRAW_FRAMEBUFFER, GL_READ_FRAMEBUFFER, or GL_FRAMEBUFFER. GL_FRAMEBUFFER is equivalent to GL_DRAW_FRAMEBUFFER.
        /// </para>
        /// </param>
        /// <param name="attachment">
        /// <para>
        /// Specifies the attachment point of the framebuffer. attachment must be GL_COLOR_ATTACHMENTi, GL_DEPTH_ATTACHMENT, GL_STENCIL_ATTACHMENT or GL_DEPTH_STENCIL_ATTACHMENT.
        /// </para>
        /// </param>
        /// <param name="textarget">
        /// <para>
        /// For glFramebufferTexture1D, glFramebufferTexture2D and glFramebufferTexture3D, specifies what type of texture is expected in the texture parameter, or for cube map textures, which face is to be attached.
        /// </para>
        /// </param>
        /// <param name="texture">
        /// <para>
        /// Specifies the texture object to attach to the framebuffer attachment point named by attachment.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the mipmap level of texture to attach.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_2", Version = "3.2", EntryPoint = "glFramebufferTexture")]
        public static extern void FramebufferTexture(OpenTK.Graphics.OpenGL4.FramebufferTarget target, OpenTK.Graphics.OpenGL4.FramebufferAttachment attachment, UInt32 texture, Int32 level);

        /// <summary>[requires: v3.0 and ARB_framebuffer_object|VERSION_3_0]</summary>
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glFramebufferTexture1D")]
        public static extern void FramebufferTexture1D(OpenTK.Graphics.OpenGL4.FramebufferTarget target, OpenTK.Graphics.OpenGL4.FramebufferAttachment attachment, OpenTK.Graphics.OpenGL4.TextureTarget textarget, Int32 texture, Int32 level);

        /// <summary>[requires: v3.0 and ARB_framebuffer_object|VERSION_3_0]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glFramebufferTexture1D")]
        public static extern void FramebufferTexture1D(OpenTK.Graphics.OpenGL4.FramebufferTarget target, OpenTK.Graphics.OpenGL4.FramebufferAttachment attachment, OpenTK.Graphics.OpenGL4.TextureTarget textarget, UInt32 texture, Int32 level);

        /// <summary>[requires: v3.0 and ARB_framebuffer_object|VERSION_3_0]</summary>
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glFramebufferTexture2D")]
        public static extern void FramebufferTexture2D(OpenTK.Graphics.OpenGL4.FramebufferTarget target, OpenTK.Graphics.OpenGL4.FramebufferAttachment attachment, OpenTK.Graphics.OpenGL4.TextureTarget textarget, Int32 texture, Int32 level);

        /// <summary>[requires: v3.0 and ARB_framebuffer_object|VERSION_3_0]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glFramebufferTexture2D")]
        public static extern void FramebufferTexture2D(OpenTK.Graphics.OpenGL4.FramebufferTarget target, OpenTK.Graphics.OpenGL4.FramebufferAttachment attachment, OpenTK.Graphics.OpenGL4.TextureTarget textarget, UInt32 texture, Int32 level);

        /// <summary>[requires: v3.0 and ARB_framebuffer_object|VERSION_3_0]</summary>
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glFramebufferTexture3D")]
        public static extern void FramebufferTexture3D(OpenTK.Graphics.OpenGL4.FramebufferTarget target, OpenTK.Graphics.OpenGL4.FramebufferAttachment attachment, OpenTK.Graphics.OpenGL4.TextureTarget textarget, Int32 texture, Int32 level, Int32 zoffset);

        /// <summary>[requires: v3.0 and ARB_framebuffer_object|VERSION_3_0]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glFramebufferTexture3D")]
        public static extern void FramebufferTexture3D(OpenTK.Graphics.OpenGL4.FramebufferTarget target, OpenTK.Graphics.OpenGL4.FramebufferAttachment attachment, OpenTK.Graphics.OpenGL4.TextureTarget textarget, UInt32 texture, Int32 level, Int32 zoffset);

        /// <summary>[requires: v3.0 and ARB_framebuffer_object|VERSION_3_0]
        /// Attach a single layer of a texture to a framebuffer
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the framebuffer target. target must be GL_DRAW_FRAMEBUFFER, GL_READ_FRAMEBUFFER, or GL_FRAMEBUFFER. GL_FRAMEBUFFER is equivalent to GL_DRAW_FRAMEBUFFER.
        /// </para>
        /// </param>
        /// <param name="attachment">
        /// <para>
        /// Specifies the attachment point of the framebuffer. attachment must be GL_COLOR_ATTACHMENTi, GL_DEPTH_ATTACHMENT, GL_STENCIL_ATTACHMENT or GL_DEPTH_STENCIL_ATTACHMENT.
        /// </para>
        /// </param>
        /// <param name="texture">
        /// <para>
        /// Specifies the texture object to attach to the framebuffer attachment point named by attachment.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the mipmap level of texture to attach.
        /// </para>
        /// </param>
        /// <param name="layer">
        /// <para>
        /// Specifies the layer of texture to attach.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glFramebufferTextureLayer")]
        public static extern void FramebufferTextureLayer(OpenTK.Graphics.OpenGL4.FramebufferTarget target, OpenTK.Graphics.OpenGL4.FramebufferAttachment attachment, Int32 texture, Int32 level, Int32 layer);

        /// <summary>[requires: v3.0 and ARB_framebuffer_object|VERSION_3_0]
        /// Attach a single layer of a texture to a framebuffer
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the framebuffer target. target must be GL_DRAW_FRAMEBUFFER, GL_READ_FRAMEBUFFER, or GL_FRAMEBUFFER. GL_FRAMEBUFFER is equivalent to GL_DRAW_FRAMEBUFFER.
        /// </para>
        /// </param>
        /// <param name="attachment">
        /// <para>
        /// Specifies the attachment point of the framebuffer. attachment must be GL_COLOR_ATTACHMENTi, GL_DEPTH_ATTACHMENT, GL_STENCIL_ATTACHMENT or GL_DEPTH_STENCIL_ATTACHMENT.
        /// </para>
        /// </param>
        /// <param name="texture">
        /// <para>
        /// Specifies the texture object to attach to the framebuffer attachment point named by attachment.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the mipmap level of texture to attach.
        /// </para>
        /// </param>
        /// <param name="layer">
        /// <para>
        /// Specifies the layer of texture to attach.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glFramebufferTextureLayer")]
        public static extern void FramebufferTextureLayer(OpenTK.Graphics.OpenGL4.FramebufferTarget target, OpenTK.Graphics.OpenGL4.FramebufferAttachment attachment, UInt32 texture, Int32 level, Int32 layer);

        /// <summary>[requires: v1.0]
        /// Define front- and back-facing polygons
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies the orientation of front-facing polygons. GL_CW and GL_CCW are accepted. The initial value is GL_CCW.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glFrontFace")]
        public static extern void FrontFace(OpenTK.Graphics.OpenGL4.FrontFaceDirection mode);

        /// <summary>[requires: v1.5]
        /// Generate buffer object names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of buffer object names to be generated.
        /// </para>
        /// </param>
        /// <param name="buffers">
        /// <para>
        /// Specifies an array in which the generated buffer object names are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGenBuffers")]
        public static extern Int32 GenBuffer();

        /// <summary>[requires: v1.5]
        /// Generate buffer object names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of buffer object names to be generated.
        /// </para>
        /// </param>
        /// <param name="buffers">
        /// <para>
        /// Specifies an array in which the generated buffer object names are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGenBuffers")]
        public static extern void GenBuffers(Int32 n, [OutAttribute] Int32[] buffers);

        /// <summary>[requires: v1.5]
        /// Generate buffer object names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of buffer object names to be generated.
        /// </para>
        /// </param>
        /// <param name="buffers">
        /// <para>
        /// Specifies an array in which the generated buffer object names are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGenBuffers")]
        public static extern void GenBuffers(Int32 n, [OutAttribute] out Int32 buffers);

        /// <summary>[requires: v1.5]
        /// Generate buffer object names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of buffer object names to be generated.
        /// </para>
        /// </param>
        /// <param name="buffers">
        /// <para>
        /// Specifies an array in which the generated buffer object names are stored.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGenBuffers")]
        public static extern unsafe void GenBuffers(Int32 n, [OutAttribute] Int32* buffers);

        /// <summary>[requires: v1.5]
        /// Generate buffer object names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of buffer object names to be generated.
        /// </para>
        /// </param>
        /// <param name="buffers">
        /// <para>
        /// Specifies an array in which the generated buffer object names are stored.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGenBuffers")]
        public static extern void GenBuffers(Int32 n, [OutAttribute] UInt32[] buffers);

        /// <summary>[requires: v1.5]
        /// Generate buffer object names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of buffer object names to be generated.
        /// </para>
        /// </param>
        /// <param name="buffers">
        /// <para>
        /// Specifies an array in which the generated buffer object names are stored.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGenBuffers")]
        public static extern void GenBuffers(Int32 n, [OutAttribute] out UInt32 buffers);

        /// <summary>[requires: v1.5]
        /// Generate buffer object names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of buffer object names to be generated.
        /// </para>
        /// </param>
        /// <param name="buffers">
        /// <para>
        /// Specifies an array in which the generated buffer object names are stored.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGenBuffers")]
        public static extern unsafe void GenBuffers(Int32 n, [OutAttribute] UInt32* buffers);

        /// <summary>[requires: v3.0 and ARB_framebuffer_object|VERSION_3_0]
        /// Generate mipmaps for a specified texture target
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target to which the texture whose mimaps to generate is bound. target must be GL_TEXTURE_1D, GL_TEXTURE_2D, GL_TEXTURE_3D, GL_TEXTURE_1D_ARRAY, GL_TEXTURE_2D_ARRAY or GL_TEXTURE_CUBE_MAP.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glGenerateMipmap")]
        public static extern void GenerateMipmap(OpenTK.Graphics.OpenGL4.GenerateMipmapTarget target);

        /// <summary>[requires: v3.0 and ARB_framebuffer_object|VERSION_3_0]
        /// Generate framebuffer object names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of framebuffer object names to generate.
        /// </para>
        /// </param>
        /// <param name="ids">
        /// <para>
        /// Specifies an array in which the generated framebuffer object names are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glGenFramebuffers")]
        public static extern Int32 GenFramebuffer();

        /// <summary>[requires: v3.0 and ARB_framebuffer_object|VERSION_3_0]
        /// Generate framebuffer object names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of framebuffer object names to generate.
        /// </para>
        /// </param>
        /// <param name="ids">
        /// <para>
        /// Specifies an array in which the generated framebuffer object names are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glGenFramebuffers")]
        public static extern void GenFramebuffers(Int32 n, [OutAttribute] Int32[] framebuffers);

        /// <summary>[requires: v3.0 and ARB_framebuffer_object|VERSION_3_0]
        /// Generate framebuffer object names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of framebuffer object names to generate.
        /// </para>
        /// </param>
        /// <param name="ids">
        /// <para>
        /// Specifies an array in which the generated framebuffer object names are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glGenFramebuffers")]
        public static extern void GenFramebuffers(Int32 n, [OutAttribute] out Int32 framebuffers);

        /// <summary>[requires: v3.0 and ARB_framebuffer_object|VERSION_3_0]
        /// Generate framebuffer object names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of framebuffer object names to generate.
        /// </para>
        /// </param>
        /// <param name="ids">
        /// <para>
        /// Specifies an array in which the generated framebuffer object names are stored.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glGenFramebuffers")]
        public static extern unsafe void GenFramebuffers(Int32 n, [OutAttribute] Int32* framebuffers);

        /// <summary>[requires: v3.0 and ARB_framebuffer_object|VERSION_3_0]
        /// Generate framebuffer object names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of framebuffer object names to generate.
        /// </para>
        /// </param>
        /// <param name="ids">
        /// <para>
        /// Specifies an array in which the generated framebuffer object names are stored.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glGenFramebuffers")]
        public static extern void GenFramebuffers(Int32 n, [OutAttribute] UInt32[] framebuffers);

        /// <summary>[requires: v3.0 and ARB_framebuffer_object|VERSION_3_0]
        /// Generate framebuffer object names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of framebuffer object names to generate.
        /// </para>
        /// </param>
        /// <param name="ids">
        /// <para>
        /// Specifies an array in which the generated framebuffer object names are stored.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glGenFramebuffers")]
        public static extern void GenFramebuffers(Int32 n, [OutAttribute] out UInt32 framebuffers);

        /// <summary>[requires: v3.0 and ARB_framebuffer_object|VERSION_3_0]
        /// Generate framebuffer object names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of framebuffer object names to generate.
        /// </para>
        /// </param>
        /// <param name="ids">
        /// <para>
        /// Specifies an array in which the generated framebuffer object names are stored.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glGenFramebuffers")]
        public static extern unsafe void GenFramebuffers(Int32 n, [OutAttribute] UInt32* framebuffers);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Reserve program pipeline object names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of program pipeline object names to reserve.
        /// </para>
        /// </param>
        /// <param name="pipelines">
        /// <para>
        /// Specifies an array of into which the reserved names will be written.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glGenProgramPipelines")]
        public static extern Int32 GenProgramPipeline();

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Reserve program pipeline object names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of program pipeline object names to reserve.
        /// </para>
        /// </param>
        /// <param name="pipelines">
        /// <para>
        /// Specifies an array of into which the reserved names will be written.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glGenProgramPipelines")]
        public static extern void GenProgramPipelines(Int32 n, [OutAttribute] Int32[] pipelines);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Reserve program pipeline object names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of program pipeline object names to reserve.
        /// </para>
        /// </param>
        /// <param name="pipelines">
        /// <para>
        /// Specifies an array of into which the reserved names will be written.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glGenProgramPipelines")]
        public static extern void GenProgramPipelines(Int32 n, [OutAttribute] out Int32 pipelines);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Reserve program pipeline object names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of program pipeline object names to reserve.
        /// </para>
        /// </param>
        /// <param name="pipelines">
        /// <para>
        /// Specifies an array of into which the reserved names will be written.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glGenProgramPipelines")]
        public static extern unsafe void GenProgramPipelines(Int32 n, [OutAttribute] Int32* pipelines);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Reserve program pipeline object names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of program pipeline object names to reserve.
        /// </para>
        /// </param>
        /// <param name="pipelines">
        /// <para>
        /// Specifies an array of into which the reserved names will be written.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glGenProgramPipelines")]
        public static extern void GenProgramPipelines(Int32 n, [OutAttribute] UInt32[] pipelines);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Reserve program pipeline object names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of program pipeline object names to reserve.
        /// </para>
        /// </param>
        /// <param name="pipelines">
        /// <para>
        /// Specifies an array of into which the reserved names will be written.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glGenProgramPipelines")]
        public static extern void GenProgramPipelines(Int32 n, [OutAttribute] out UInt32 pipelines);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Reserve program pipeline object names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of program pipeline object names to reserve.
        /// </para>
        /// </param>
        /// <param name="pipelines">
        /// <para>
        /// Specifies an array of into which the reserved names will be written.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glGenProgramPipelines")]
        public static extern unsafe void GenProgramPipelines(Int32 n, [OutAttribute] UInt32* pipelines);

        /// <summary>[requires: v1.5]
        /// Generate query object names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of query object names to be generated.
        /// </para>
        /// </param>
        /// <param name="ids">
        /// <para>
        /// Specifies an array in which the generated query object names are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGenQueries")]
        public static extern Int32 GenQuery();

        /// <summary>[requires: v1.5]
        /// Generate query object names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of query object names to be generated.
        /// </para>
        /// </param>
        /// <param name="ids">
        /// <para>
        /// Specifies an array in which the generated query object names are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGenQueries")]
        public static extern void GenQueries(Int32 n, [OutAttribute] Int32[] ids);

        /// <summary>[requires: v1.5]
        /// Generate query object names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of query object names to be generated.
        /// </para>
        /// </param>
        /// <param name="ids">
        /// <para>
        /// Specifies an array in which the generated query object names are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGenQueries")]
        public static extern void GenQueries(Int32 n, [OutAttribute] out Int32 ids);

        /// <summary>[requires: v1.5]
        /// Generate query object names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of query object names to be generated.
        /// </para>
        /// </param>
        /// <param name="ids">
        /// <para>
        /// Specifies an array in which the generated query object names are stored.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGenQueries")]
        public static extern unsafe void GenQueries(Int32 n, [OutAttribute] Int32* ids);

        /// <summary>[requires: v1.5]
        /// Generate query object names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of query object names to be generated.
        /// </para>
        /// </param>
        /// <param name="ids">
        /// <para>
        /// Specifies an array in which the generated query object names are stored.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGenQueries")]
        public static extern void GenQueries(Int32 n, [OutAttribute] UInt32[] ids);

        /// <summary>[requires: v1.5]
        /// Generate query object names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of query object names to be generated.
        /// </para>
        /// </param>
        /// <param name="ids">
        /// <para>
        /// Specifies an array in which the generated query object names are stored.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGenQueries")]
        public static extern void GenQueries(Int32 n, [OutAttribute] out UInt32 ids);

        /// <summary>[requires: v1.5]
        /// Generate query object names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of query object names to be generated.
        /// </para>
        /// </param>
        /// <param name="ids">
        /// <para>
        /// Specifies an array in which the generated query object names are stored.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGenQueries")]
        public static extern unsafe void GenQueries(Int32 n, [OutAttribute] UInt32* ids);

        /// <summary>[requires: v3.0 and ARB_framebuffer_object|VERSION_3_0]
        /// Generate renderbuffer object names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of renderbuffer object names to generate.
        /// </para>
        /// </param>
        /// <param name="renderbuffers">
        /// <para>
        /// Specifies an array in which the generated renderbuffer object names are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glGenRenderbuffers")]
        public static extern Int32 GenRenderbuffer();

        /// <summary>[requires: v3.0 and ARB_framebuffer_object|VERSION_3_0]
        /// Generate renderbuffer object names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of renderbuffer object names to generate.
        /// </para>
        /// </param>
        /// <param name="renderbuffers">
        /// <para>
        /// Specifies an array in which the generated renderbuffer object names are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glGenRenderbuffers")]
        public static extern void GenRenderbuffers(Int32 n, [OutAttribute] Int32[] renderbuffers);

        /// <summary>[requires: v3.0 and ARB_framebuffer_object|VERSION_3_0]
        /// Generate renderbuffer object names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of renderbuffer object names to generate.
        /// </para>
        /// </param>
        /// <param name="renderbuffers">
        /// <para>
        /// Specifies an array in which the generated renderbuffer object names are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glGenRenderbuffers")]
        public static extern void GenRenderbuffers(Int32 n, [OutAttribute] out Int32 renderbuffers);

        /// <summary>[requires: v3.0 and ARB_framebuffer_object|VERSION_3_0]
        /// Generate renderbuffer object names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of renderbuffer object names to generate.
        /// </para>
        /// </param>
        /// <param name="renderbuffers">
        /// <para>
        /// Specifies an array in which the generated renderbuffer object names are stored.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glGenRenderbuffers")]
        public static extern unsafe void GenRenderbuffers(Int32 n, [OutAttribute] Int32* renderbuffers);

        /// <summary>[requires: v3.0 and ARB_framebuffer_object|VERSION_3_0]
        /// Generate renderbuffer object names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of renderbuffer object names to generate.
        /// </para>
        /// </param>
        /// <param name="renderbuffers">
        /// <para>
        /// Specifies an array in which the generated renderbuffer object names are stored.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glGenRenderbuffers")]
        public static extern void GenRenderbuffers(Int32 n, [OutAttribute] UInt32[] renderbuffers);

        /// <summary>[requires: v3.0 and ARB_framebuffer_object|VERSION_3_0]
        /// Generate renderbuffer object names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of renderbuffer object names to generate.
        /// </para>
        /// </param>
        /// <param name="renderbuffers">
        /// <para>
        /// Specifies an array in which the generated renderbuffer object names are stored.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glGenRenderbuffers")]
        public static extern void GenRenderbuffers(Int32 n, [OutAttribute] out UInt32 renderbuffers);

        /// <summary>[requires: v3.0 and ARB_framebuffer_object|VERSION_3_0]
        /// Generate renderbuffer object names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of renderbuffer object names to generate.
        /// </para>
        /// </param>
        /// <param name="renderbuffers">
        /// <para>
        /// Specifies an array in which the generated renderbuffer object names are stored.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glGenRenderbuffers")]
        public static extern unsafe void GenRenderbuffers(Int32 n, [OutAttribute] UInt32* renderbuffers);

        /// <summary>[requires: v3.3 and ARB_sampler_objects|VERSION_3_3]
        /// Generate sampler object names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of sampler object names to generate.
        /// </para>
        /// </param>
        /// <param name="samplers">
        /// <para>
        /// Specifies an array in which the generated sampler object names are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glGenSamplers")]
        public static extern Int32 GenSampler();

        /// <summary>[requires: v3.3 and ARB_sampler_objects|VERSION_3_3]
        /// Generate sampler object names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of sampler object names to generate.
        /// </para>
        /// </param>
        /// <param name="samplers">
        /// <para>
        /// Specifies an array in which the generated sampler object names are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glGenSamplers")]
        public static extern void GenSamplers(Int32 count, [OutAttribute] Int32[] samplers);

        /// <summary>[requires: v3.3 and ARB_sampler_objects|VERSION_3_3]
        /// Generate sampler object names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of sampler object names to generate.
        /// </para>
        /// </param>
        /// <param name="samplers">
        /// <para>
        /// Specifies an array in which the generated sampler object names are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glGenSamplers")]
        public static extern void GenSamplers(Int32 count, [OutAttribute] out Int32 samplers);

        /// <summary>[requires: v3.3 and ARB_sampler_objects|VERSION_3_3]
        /// Generate sampler object names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of sampler object names to generate.
        /// </para>
        /// </param>
        /// <param name="samplers">
        /// <para>
        /// Specifies an array in which the generated sampler object names are stored.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glGenSamplers")]
        public static extern unsafe void GenSamplers(Int32 count, [OutAttribute] Int32* samplers);

        /// <summary>[requires: v3.3 and ARB_sampler_objects|VERSION_3_3]
        /// Generate sampler object names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of sampler object names to generate.
        /// </para>
        /// </param>
        /// <param name="samplers">
        /// <para>
        /// Specifies an array in which the generated sampler object names are stored.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glGenSamplers")]
        public static extern void GenSamplers(Int32 count, [OutAttribute] UInt32[] samplers);

        /// <summary>[requires: v3.3 and ARB_sampler_objects|VERSION_3_3]
        /// Generate sampler object names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of sampler object names to generate.
        /// </para>
        /// </param>
        /// <param name="samplers">
        /// <para>
        /// Specifies an array in which the generated sampler object names are stored.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glGenSamplers")]
        public static extern void GenSamplers(Int32 count, [OutAttribute] out UInt32 samplers);

        /// <summary>[requires: v3.3 and ARB_sampler_objects|VERSION_3_3]
        /// Generate sampler object names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of sampler object names to generate.
        /// </para>
        /// </param>
        /// <param name="samplers">
        /// <para>
        /// Specifies an array in which the generated sampler object names are stored.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glGenSamplers")]
        public static extern unsafe void GenSamplers(Int32 count, [OutAttribute] UInt32* samplers);

        /// <summary>[requires: v1.1]
        /// Generate texture names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of texture names to be generated.
        /// </para>
        /// </param>
        /// <param name="textures">
        /// <para>
        /// Specifies an array in which the generated texture names are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glGenTextures")]
        public static extern Int32 GenTexture();

        /// <summary>[requires: v1.1]
        /// Generate texture names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of texture names to be generated.
        /// </para>
        /// </param>
        /// <param name="textures">
        /// <para>
        /// Specifies an array in which the generated texture names are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glGenTextures")]
        public static extern void GenTextures(Int32 n, [OutAttribute] Int32[] textures);

        /// <summary>[requires: v1.1]
        /// Generate texture names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of texture names to be generated.
        /// </para>
        /// </param>
        /// <param name="textures">
        /// <para>
        /// Specifies an array in which the generated texture names are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glGenTextures")]
        public static extern void GenTextures(Int32 n, [OutAttribute] out Int32 textures);

        /// <summary>[requires: v1.1]
        /// Generate texture names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of texture names to be generated.
        /// </para>
        /// </param>
        /// <param name="textures">
        /// <para>
        /// Specifies an array in which the generated texture names are stored.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glGenTextures")]
        public static extern unsafe void GenTextures(Int32 n, [OutAttribute] Int32* textures);

        /// <summary>[requires: v1.1]
        /// Generate texture names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of texture names to be generated.
        /// </para>
        /// </param>
        /// <param name="textures">
        /// <para>
        /// Specifies an array in which the generated texture names are stored.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glGenTextures")]
        public static extern void GenTextures(Int32 n, [OutAttribute] UInt32[] textures);

        /// <summary>[requires: v1.1]
        /// Generate texture names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of texture names to be generated.
        /// </para>
        /// </param>
        /// <param name="textures">
        /// <para>
        /// Specifies an array in which the generated texture names are stored.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glGenTextures")]
        public static extern void GenTextures(Int32 n, [OutAttribute] out UInt32 textures);

        /// <summary>[requires: v1.1]
        /// Generate texture names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of texture names to be generated.
        /// </para>
        /// </param>
        /// <param name="textures">
        /// <para>
        /// Specifies an array in which the generated texture names are stored.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glGenTextures")]
        public static extern unsafe void GenTextures(Int32 n, [OutAttribute] UInt32* textures);

        /// <summary>[requires: v4.0 and ARB_transform_feedback2|VERSION_4_0]
        /// Reserve transform feedback object names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of transform feedback object names to reserve.
        /// </para>
        /// </param>
        /// <param name="ids">
        /// <para>
        /// Specifies an array of into which the reserved names will be written.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_transform_feedback2|VERSION_4_0", Version = "4.0", EntryPoint = "glGenTransformFeedbacks")]
        public static extern Int32 GenTransformFeedback();

        /// <summary>[requires: v4.0 and ARB_transform_feedback2|VERSION_4_0]
        /// Reserve transform feedback object names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of transform feedback object names to reserve.
        /// </para>
        /// </param>
        /// <param name="ids">
        /// <para>
        /// Specifies an array of into which the reserved names will be written.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_transform_feedback2|VERSION_4_0", Version = "4.0", EntryPoint = "glGenTransformFeedbacks")]
        public static extern void GenTransformFeedbacks(Int32 n, [OutAttribute] Int32[] ids);

        /// <summary>[requires: v4.0 and ARB_transform_feedback2|VERSION_4_0]
        /// Reserve transform feedback object names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of transform feedback object names to reserve.
        /// </para>
        /// </param>
        /// <param name="ids">
        /// <para>
        /// Specifies an array of into which the reserved names will be written.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_transform_feedback2|VERSION_4_0", Version = "4.0", EntryPoint = "glGenTransformFeedbacks")]
        public static extern void GenTransformFeedbacks(Int32 n, [OutAttribute] out Int32 ids);

        /// <summary>[requires: v4.0 and ARB_transform_feedback2|VERSION_4_0]
        /// Reserve transform feedback object names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of transform feedback object names to reserve.
        /// </para>
        /// </param>
        /// <param name="ids">
        /// <para>
        /// Specifies an array of into which the reserved names will be written.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_transform_feedback2|VERSION_4_0", Version = "4.0", EntryPoint = "glGenTransformFeedbacks")]
        public static extern unsafe void GenTransformFeedbacks(Int32 n, [OutAttribute] Int32* ids);

        /// <summary>[requires: v4.0 and ARB_transform_feedback2|VERSION_4_0]
        /// Reserve transform feedback object names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of transform feedback object names to reserve.
        /// </para>
        /// </param>
        /// <param name="ids">
        /// <para>
        /// Specifies an array of into which the reserved names will be written.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_transform_feedback2|VERSION_4_0", Version = "4.0", EntryPoint = "glGenTransformFeedbacks")]
        public static extern void GenTransformFeedbacks(Int32 n, [OutAttribute] UInt32[] ids);

        /// <summary>[requires: v4.0 and ARB_transform_feedback2|VERSION_4_0]
        /// Reserve transform feedback object names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of transform feedback object names to reserve.
        /// </para>
        /// </param>
        /// <param name="ids">
        /// <para>
        /// Specifies an array of into which the reserved names will be written.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_transform_feedback2|VERSION_4_0", Version = "4.0", EntryPoint = "glGenTransformFeedbacks")]
        public static extern void GenTransformFeedbacks(Int32 n, [OutAttribute] out UInt32 ids);

        /// <summary>[requires: v4.0 and ARB_transform_feedback2|VERSION_4_0]
        /// Reserve transform feedback object names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of transform feedback object names to reserve.
        /// </para>
        /// </param>
        /// <param name="ids">
        /// <para>
        /// Specifies an array of into which the reserved names will be written.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_transform_feedback2|VERSION_4_0", Version = "4.0", EntryPoint = "glGenTransformFeedbacks")]
        public static extern unsafe void GenTransformFeedbacks(Int32 n, [OutAttribute] UInt32* ids);

        /// <summary>[requires: v3.0 and ARB_vertex_array_object|VERSION_3_0]
        /// Generate vertex array object names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of vertex array object names to generate.
        /// </para>
        /// </param>
        /// <param name="arrays">
        /// <para>
        /// Specifies an array in which the generated vertex array object names are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_array_object|VERSION_3_0", Version = "3.0", EntryPoint = "glGenVertexArrays")]
        public static extern Int32 GenVertexArray();

        /// <summary>[requires: v3.0 and ARB_vertex_array_object|VERSION_3_0]
        /// Generate vertex array object names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of vertex array object names to generate.
        /// </para>
        /// </param>
        /// <param name="arrays">
        /// <para>
        /// Specifies an array in which the generated vertex array object names are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_array_object|VERSION_3_0", Version = "3.0", EntryPoint = "glGenVertexArrays")]
        public static extern void GenVertexArrays(Int32 n, [OutAttribute] Int32[] arrays);

        /// <summary>[requires: v3.0 and ARB_vertex_array_object|VERSION_3_0]
        /// Generate vertex array object names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of vertex array object names to generate.
        /// </para>
        /// </param>
        /// <param name="arrays">
        /// <para>
        /// Specifies an array in which the generated vertex array object names are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_array_object|VERSION_3_0", Version = "3.0", EntryPoint = "glGenVertexArrays")]
        public static extern void GenVertexArrays(Int32 n, [OutAttribute] out Int32 arrays);

        /// <summary>[requires: v3.0 and ARB_vertex_array_object|VERSION_3_0]
        /// Generate vertex array object names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of vertex array object names to generate.
        /// </para>
        /// </param>
        /// <param name="arrays">
        /// <para>
        /// Specifies an array in which the generated vertex array object names are stored.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_vertex_array_object|VERSION_3_0", Version = "3.0", EntryPoint = "glGenVertexArrays")]
        public static extern unsafe void GenVertexArrays(Int32 n, [OutAttribute] Int32* arrays);

        /// <summary>[requires: v3.0 and ARB_vertex_array_object|VERSION_3_0]
        /// Generate vertex array object names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of vertex array object names to generate.
        /// </para>
        /// </param>
        /// <param name="arrays">
        /// <para>
        /// Specifies an array in which the generated vertex array object names are stored.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_vertex_array_object|VERSION_3_0", Version = "3.0", EntryPoint = "glGenVertexArrays")]
        public static extern void GenVertexArrays(Int32 n, [OutAttribute] UInt32[] arrays);

        /// <summary>[requires: v3.0 and ARB_vertex_array_object|VERSION_3_0]
        /// Generate vertex array object names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of vertex array object names to generate.
        /// </para>
        /// </param>
        /// <param name="arrays">
        /// <para>
        /// Specifies an array in which the generated vertex array object names are stored.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_vertex_array_object|VERSION_3_0", Version = "3.0", EntryPoint = "glGenVertexArrays")]
        public static extern void GenVertexArrays(Int32 n, [OutAttribute] out UInt32 arrays);

        /// <summary>[requires: v3.0 and ARB_vertex_array_object|VERSION_3_0]
        /// Generate vertex array object names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of vertex array object names to generate.
        /// </para>
        /// </param>
        /// <param name="arrays">
        /// <para>
        /// Specifies an array in which the generated vertex array object names are stored.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_vertex_array_object|VERSION_3_0", Version = "3.0", EntryPoint = "glGenVertexArrays")]
        public static extern unsafe void GenVertexArrays(Int32 n, [OutAttribute] UInt32* arrays);

        /// <summary>[requires: v4.2 and ARB_shader_atomic_counters|VERSION_4_2]
        /// Retrieve information about the set of active atomic counter buffers for a program
        /// </summary>
        /// <param name="program">
        /// <para>
        /// The name of a program object from which to retrieve information.
        /// </para>
        /// </param>
        /// <param name="bufferIndex">
        /// <para>
        /// Specifies index of an active atomic counter buffer.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies which parameter of the atomic counter buffer to retrieve.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Specifies the address of a variable into which to write the retrieved information.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_shader_atomic_counters|VERSION_4_2", Version = "4.2", EntryPoint = "glGetActiveAtomicCounterBufferiv")]
        public static extern void GetActiveAtomicCounterBuffer(Int32 program, Int32 bufferIndex, OpenTK.Graphics.OpenGL4.AtomicCounterBufferParameter pname, [OutAttribute] Int32[] @params);

        /// <summary>[requires: v4.2 and ARB_shader_atomic_counters|VERSION_4_2]
        /// Retrieve information about the set of active atomic counter buffers for a program
        /// </summary>
        /// <param name="program">
        /// <para>
        /// The name of a program object from which to retrieve information.
        /// </para>
        /// </param>
        /// <param name="bufferIndex">
        /// <para>
        /// Specifies index of an active atomic counter buffer.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies which parameter of the atomic counter buffer to retrieve.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Specifies the address of a variable into which to write the retrieved information.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_shader_atomic_counters|VERSION_4_2", Version = "4.2", EntryPoint = "glGetActiveAtomicCounterBufferiv")]
        public static extern void GetActiveAtomicCounterBuffer(Int32 program, Int32 bufferIndex, OpenTK.Graphics.OpenGL4.AtomicCounterBufferParameter pname, [OutAttribute] out Int32 @params);

        /// <summary>[requires: v4.2 and ARB_shader_atomic_counters|VERSION_4_2]
        /// Retrieve information about the set of active atomic counter buffers for a program
        /// </summary>
        /// <param name="program">
        /// <para>
        /// The name of a program object from which to retrieve information.
        /// </para>
        /// </param>
        /// <param name="bufferIndex">
        /// <para>
        /// Specifies index of an active atomic counter buffer.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies which parameter of the atomic counter buffer to retrieve.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Specifies the address of a variable into which to write the retrieved information.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_shader_atomic_counters|VERSION_4_2", Version = "4.2", EntryPoint = "glGetActiveAtomicCounterBufferiv")]
        public static extern unsafe void GetActiveAtomicCounterBuffer(Int32 program, Int32 bufferIndex, OpenTK.Graphics.OpenGL4.AtomicCounterBufferParameter pname, [OutAttribute] Int32* @params);

        /// <summary>[requires: v4.2 and ARB_shader_atomic_counters|VERSION_4_2]
        /// Retrieve information about the set of active atomic counter buffers for a program
        /// </summary>
        /// <param name="program">
        /// <para>
        /// The name of a program object from which to retrieve information.
        /// </para>
        /// </param>
        /// <param name="bufferIndex">
        /// <para>
        /// Specifies index of an active atomic counter buffer.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies which parameter of the atomic counter buffer to retrieve.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Specifies the address of a variable into which to write the retrieved information.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_shader_atomic_counters|VERSION_4_2", Version = "4.2", EntryPoint = "glGetActiveAtomicCounterBufferiv")]
        public static extern void GetActiveAtomicCounterBuffer(UInt32 program, UInt32 bufferIndex, OpenTK.Graphics.OpenGL4.AtomicCounterBufferParameter pname, [OutAttribute] Int32[] @params);

        /// <summary>[requires: v4.2 and ARB_shader_atomic_counters|VERSION_4_2]
        /// Retrieve information about the set of active atomic counter buffers for a program
        /// </summary>
        /// <param name="program">
        /// <para>
        /// The name of a program object from which to retrieve information.
        /// </para>
        /// </param>
        /// <param name="bufferIndex">
        /// <para>
        /// Specifies index of an active atomic counter buffer.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies which parameter of the atomic counter buffer to retrieve.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Specifies the address of a variable into which to write the retrieved information.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_shader_atomic_counters|VERSION_4_2", Version = "4.2", EntryPoint = "glGetActiveAtomicCounterBufferiv")]
        public static extern void GetActiveAtomicCounterBuffer(UInt32 program, UInt32 bufferIndex, OpenTK.Graphics.OpenGL4.AtomicCounterBufferParameter pname, [OutAttribute] out Int32 @params);

        /// <summary>[requires: v4.2 and ARB_shader_atomic_counters|VERSION_4_2]
        /// Retrieve information about the set of active atomic counter buffers for a program
        /// </summary>
        /// <param name="program">
        /// <para>
        /// The name of a program object from which to retrieve information.
        /// </para>
        /// </param>
        /// <param name="bufferIndex">
        /// <para>
        /// Specifies index of an active atomic counter buffer.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies which parameter of the atomic counter buffer to retrieve.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Specifies the address of a variable into which to write the retrieved information.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_shader_atomic_counters|VERSION_4_2", Version = "4.2", EntryPoint = "glGetActiveAtomicCounterBufferiv")]
        public static extern unsafe void GetActiveAtomicCounterBuffer(UInt32 program, UInt32 bufferIndex, OpenTK.Graphics.OpenGL4.AtomicCounterBufferParameter pname, [OutAttribute] Int32* @params);

        /// <summary>[requires: v2.0]
        /// Returns information about an active attribute variable for the specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the attribute variable to be queried.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than NULL is passed.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Returns the size of the attribute variable.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Returns the data type of the attribute variable.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// Returns a null terminated string containing the name of the attribute variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetActiveAttrib")]
        public static extern void GetActiveAttrib(Int32 program, Int32 index, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] out Int32 size, [OutAttribute] out OpenTK.Graphics.OpenGL4.ActiveAttribType type, [OutAttribute] StringBuilder name);

        /// <summary>[requires: v2.0]
        /// Returns information about an active attribute variable for the specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the attribute variable to be queried.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than NULL is passed.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Returns the size of the attribute variable.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Returns the data type of the attribute variable.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// Returns a null terminated string containing the name of the attribute variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetActiveAttrib")]
        public static extern unsafe void GetActiveAttrib(Int32 program, Int32 index, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] Int32* size, [OutAttribute] OpenTK.Graphics.OpenGL4.ActiveAttribType* type, [OutAttribute] StringBuilder name);

        /// <summary>[requires: v2.0]
        /// Returns information about an active attribute variable for the specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the attribute variable to be queried.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than NULL is passed.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Returns the size of the attribute variable.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Returns the data type of the attribute variable.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// Returns a null terminated string containing the name of the attribute variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetActiveAttrib")]
        public static extern void GetActiveAttrib(UInt32 program, UInt32 index, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] out Int32 size, [OutAttribute] out OpenTK.Graphics.OpenGL4.ActiveAttribType type, [OutAttribute] StringBuilder name);

        /// <summary>[requires: v2.0]
        /// Returns information about an active attribute variable for the specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the attribute variable to be queried.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than NULL is passed.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Returns the size of the attribute variable.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Returns the data type of the attribute variable.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// Returns a null terminated string containing the name of the attribute variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetActiveAttrib")]
        public static extern unsafe void GetActiveAttrib(UInt32 program, UInt32 index, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] Int32* size, [OutAttribute] OpenTK.Graphics.OpenGL4.ActiveAttribType* type, [OutAttribute] StringBuilder name);

        /// <summary>[requires: v4.0 and ARB_shader_subroutine|VERSION_4_0]
        /// Query the name of an active shader subroutine
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the name of the program containing the subroutine.
        /// </para>
        /// </param>
        /// <param name="shadertype">
        /// <para>
        /// Specifies the shader stage from which to query the subroutine name.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the shader subroutine uniform.
        /// </para>
        /// </param>
        /// <param name="bufsize">
        /// <para>
        /// Specifies the size of the buffer whose address is given in name.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the address of a variable which is to receive the length of the shader subroutine uniform name.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// Specifies the address of an array into which the name of the shader subroutine uniform will be written.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_shader_subroutine|VERSION_4_0", Version = "4.0", EntryPoint = "glGetActiveSubroutineName")]
        public static extern void GetActiveSubroutineName(Int32 program, OpenTK.Graphics.OpenGL4.ShaderType shadertype, Int32 index, Int32 bufsize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder name);

        /// <summary>[requires: v4.0 and ARB_shader_subroutine|VERSION_4_0]
        /// Query the name of an active shader subroutine
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the name of the program containing the subroutine.
        /// </para>
        /// </param>
        /// <param name="shadertype">
        /// <para>
        /// Specifies the shader stage from which to query the subroutine name.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the shader subroutine uniform.
        /// </para>
        /// </param>
        /// <param name="bufsize">
        /// <para>
        /// Specifies the size of the buffer whose address is given in name.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the address of a variable which is to receive the length of the shader subroutine uniform name.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// Specifies the address of an array into which the name of the shader subroutine uniform will be written.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_shader_subroutine|VERSION_4_0", Version = "4.0", EntryPoint = "glGetActiveSubroutineName")]
        public static extern unsafe void GetActiveSubroutineName(Int32 program, OpenTK.Graphics.OpenGL4.ShaderType shadertype, Int32 index, Int32 bufsize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder name);

        /// <summary>[requires: v4.0 and ARB_shader_subroutine|VERSION_4_0]
        /// Query the name of an active shader subroutine
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the name of the program containing the subroutine.
        /// </para>
        /// </param>
        /// <param name="shadertype">
        /// <para>
        /// Specifies the shader stage from which to query the subroutine name.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the shader subroutine uniform.
        /// </para>
        /// </param>
        /// <param name="bufsize">
        /// <para>
        /// Specifies the size of the buffer whose address is given in name.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the address of a variable which is to receive the length of the shader subroutine uniform name.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// Specifies the address of an array into which the name of the shader subroutine uniform will be written.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_shader_subroutine|VERSION_4_0", Version = "4.0", EntryPoint = "glGetActiveSubroutineName")]
        public static extern void GetActiveSubroutineName(UInt32 program, OpenTK.Graphics.OpenGL4.ShaderType shadertype, UInt32 index, Int32 bufsize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder name);

        /// <summary>[requires: v4.0 and ARB_shader_subroutine|VERSION_4_0]
        /// Query the name of an active shader subroutine
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the name of the program containing the subroutine.
        /// </para>
        /// </param>
        /// <param name="shadertype">
        /// <para>
        /// Specifies the shader stage from which to query the subroutine name.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the shader subroutine uniform.
        /// </para>
        /// </param>
        /// <param name="bufsize">
        /// <para>
        /// Specifies the size of the buffer whose address is given in name.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the address of a variable which is to receive the length of the shader subroutine uniform name.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// Specifies the address of an array into which the name of the shader subroutine uniform will be written.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_shader_subroutine|VERSION_4_0", Version = "4.0", EntryPoint = "glGetActiveSubroutineName")]
        public static extern unsafe void GetActiveSubroutineName(UInt32 program, OpenTK.Graphics.OpenGL4.ShaderType shadertype, UInt32 index, Int32 bufsize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder name);

        /// <summary>[requires: v4.0 and ARB_shader_subroutine|VERSION_4_0]
        /// Query a property of an active shader subroutine uniform
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the name of the program containing the subroutine.
        /// </para>
        /// </param>
        /// <param name="shadertype">
        /// <para>
        /// Specifies the shader stage from which to query for the subroutine parameter. shadertype must be one of GL_VERTEX_SHADER, GL_TESS_CONTROL_SHADER, GL_TESS_EVALUATION_SHADER, GL_GEOMETRY_SHADER or GL_FRAGMENT_SHADER.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the shader subroutine uniform.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the parameter of the shader subroutine uniform to query. pname must be GL_NUM_COMPATIBLE_SUBROUTINES, GL_COMPATIBLE_SUBROUTINES, GL_UNIFORM_SIZE or GL_UNIFORM_NAME_LENGTH.
        /// </para>
        /// </param>
        /// <param name="values">
        /// <para>
        /// Specifies the address of a into which the queried value or values will be placed.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_shader_subroutine|VERSION_4_0", Version = "4.0", EntryPoint = "glGetActiveSubroutineUniformiv")]
        public static extern void GetActiveSubroutineUniform(Int32 program, OpenTK.Graphics.OpenGL4.ShaderType shadertype, Int32 index, OpenTK.Graphics.OpenGL4.ActiveSubroutineUniformParameter pname, [OutAttribute] Int32[] values);

        /// <summary>[requires: v4.0 and ARB_shader_subroutine|VERSION_4_0]
        /// Query a property of an active shader subroutine uniform
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the name of the program containing the subroutine.
        /// </para>
        /// </param>
        /// <param name="shadertype">
        /// <para>
        /// Specifies the shader stage from which to query for the subroutine parameter. shadertype must be one of GL_VERTEX_SHADER, GL_TESS_CONTROL_SHADER, GL_TESS_EVALUATION_SHADER, GL_GEOMETRY_SHADER or GL_FRAGMENT_SHADER.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the shader subroutine uniform.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the parameter of the shader subroutine uniform to query. pname must be GL_NUM_COMPATIBLE_SUBROUTINES, GL_COMPATIBLE_SUBROUTINES, GL_UNIFORM_SIZE or GL_UNIFORM_NAME_LENGTH.
        /// </para>
        /// </param>
        /// <param name="values">
        /// <para>
        /// Specifies the address of a into which the queried value or values will be placed.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_shader_subroutine|VERSION_4_0", Version = "4.0", EntryPoint = "glGetActiveSubroutineUniformiv")]
        public static extern void GetActiveSubroutineUniform(Int32 program, OpenTK.Graphics.OpenGL4.ShaderType shadertype, Int32 index, OpenTK.Graphics.OpenGL4.ActiveSubroutineUniformParameter pname, [OutAttribute] out Int32 values);

        /// <summary>[requires: v4.0 and ARB_shader_subroutine|VERSION_4_0]
        /// Query a property of an active shader subroutine uniform
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the name of the program containing the subroutine.
        /// </para>
        /// </param>
        /// <param name="shadertype">
        /// <para>
        /// Specifies the shader stage from which to query for the subroutine parameter. shadertype must be one of GL_VERTEX_SHADER, GL_TESS_CONTROL_SHADER, GL_TESS_EVALUATION_SHADER, GL_GEOMETRY_SHADER or GL_FRAGMENT_SHADER.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the shader subroutine uniform.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the parameter of the shader subroutine uniform to query. pname must be GL_NUM_COMPATIBLE_SUBROUTINES, GL_COMPATIBLE_SUBROUTINES, GL_UNIFORM_SIZE or GL_UNIFORM_NAME_LENGTH.
        /// </para>
        /// </param>
        /// <param name="values">
        /// <para>
        /// Specifies the address of a into which the queried value or values will be placed.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_shader_subroutine|VERSION_4_0", Version = "4.0", EntryPoint = "glGetActiveSubroutineUniformiv")]
        public static extern unsafe void GetActiveSubroutineUniform(Int32 program, OpenTK.Graphics.OpenGL4.ShaderType shadertype, Int32 index, OpenTK.Graphics.OpenGL4.ActiveSubroutineUniformParameter pname, [OutAttribute] Int32* values);

        /// <summary>[requires: v4.0 and ARB_shader_subroutine|VERSION_4_0]
        /// Query a property of an active shader subroutine uniform
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the name of the program containing the subroutine.
        /// </para>
        /// </param>
        /// <param name="shadertype">
        /// <para>
        /// Specifies the shader stage from which to query for the subroutine parameter. shadertype must be one of GL_VERTEX_SHADER, GL_TESS_CONTROL_SHADER, GL_TESS_EVALUATION_SHADER, GL_GEOMETRY_SHADER or GL_FRAGMENT_SHADER.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the shader subroutine uniform.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the parameter of the shader subroutine uniform to query. pname must be GL_NUM_COMPATIBLE_SUBROUTINES, GL_COMPATIBLE_SUBROUTINES, GL_UNIFORM_SIZE or GL_UNIFORM_NAME_LENGTH.
        /// </para>
        /// </param>
        /// <param name="values">
        /// <para>
        /// Specifies the address of a into which the queried value or values will be placed.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_shader_subroutine|VERSION_4_0", Version = "4.0", EntryPoint = "glGetActiveSubroutineUniformiv")]
        public static extern void GetActiveSubroutineUniform(UInt32 program, OpenTK.Graphics.OpenGL4.ShaderType shadertype, UInt32 index, OpenTK.Graphics.OpenGL4.ActiveSubroutineUniformParameter pname, [OutAttribute] Int32[] values);

        /// <summary>[requires: v4.0 and ARB_shader_subroutine|VERSION_4_0]
        /// Query a property of an active shader subroutine uniform
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the name of the program containing the subroutine.
        /// </para>
        /// </param>
        /// <param name="shadertype">
        /// <para>
        /// Specifies the shader stage from which to query for the subroutine parameter. shadertype must be one of GL_VERTEX_SHADER, GL_TESS_CONTROL_SHADER, GL_TESS_EVALUATION_SHADER, GL_GEOMETRY_SHADER or GL_FRAGMENT_SHADER.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the shader subroutine uniform.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the parameter of the shader subroutine uniform to query. pname must be GL_NUM_COMPATIBLE_SUBROUTINES, GL_COMPATIBLE_SUBROUTINES, GL_UNIFORM_SIZE or GL_UNIFORM_NAME_LENGTH.
        /// </para>
        /// </param>
        /// <param name="values">
        /// <para>
        /// Specifies the address of a into which the queried value or values will be placed.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_shader_subroutine|VERSION_4_0", Version = "4.0", EntryPoint = "glGetActiveSubroutineUniformiv")]
        public static extern void GetActiveSubroutineUniform(UInt32 program, OpenTK.Graphics.OpenGL4.ShaderType shadertype, UInt32 index, OpenTK.Graphics.OpenGL4.ActiveSubroutineUniformParameter pname, [OutAttribute] out Int32 values);

        /// <summary>[requires: v4.0 and ARB_shader_subroutine|VERSION_4_0]
        /// Query a property of an active shader subroutine uniform
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the name of the program containing the subroutine.
        /// </para>
        /// </param>
        /// <param name="shadertype">
        /// <para>
        /// Specifies the shader stage from which to query for the subroutine parameter. shadertype must be one of GL_VERTEX_SHADER, GL_TESS_CONTROL_SHADER, GL_TESS_EVALUATION_SHADER, GL_GEOMETRY_SHADER or GL_FRAGMENT_SHADER.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the shader subroutine uniform.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the parameter of the shader subroutine uniform to query. pname must be GL_NUM_COMPATIBLE_SUBROUTINES, GL_COMPATIBLE_SUBROUTINES, GL_UNIFORM_SIZE or GL_UNIFORM_NAME_LENGTH.
        /// </para>
        /// </param>
        /// <param name="values">
        /// <para>
        /// Specifies the address of a into which the queried value or values will be placed.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_shader_subroutine|VERSION_4_0", Version = "4.0", EntryPoint = "glGetActiveSubroutineUniformiv")]
        public static extern unsafe void GetActiveSubroutineUniform(UInt32 program, OpenTK.Graphics.OpenGL4.ShaderType shadertype, UInt32 index, OpenTK.Graphics.OpenGL4.ActiveSubroutineUniformParameter pname, [OutAttribute] Int32* values);

        /// <summary>[requires: v4.0 and ARB_shader_subroutine|VERSION_4_0]
        /// Query the name of an active shader subroutine uniform
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the name of the program containing the subroutine.
        /// </para>
        /// </param>
        /// <param name="shadertype">
        /// <para>
        /// Specifies the shader stage from which to query for the subroutine parameter. shadertype must be one of GL_VERTEX_SHADER, GL_TESS_CONTROL_SHADER, GL_TESS_EVALUATION_SHADER, GL_GEOMETRY_SHADER or GL_FRAGMENT_SHADER.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the shader subroutine uniform.
        /// </para>
        /// </param>
        /// <param name="bufsize">
        /// <para>
        /// Specifies the size of the buffer whose address is given in name.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the address of a variable into which is written the number of characters copied into name.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// Specifies the address of a buffer that will receive the name of the specified shader subroutine uniform.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_shader_subroutine|VERSION_4_0", Version = "4.0", EntryPoint = "glGetActiveSubroutineUniformName")]
        public static extern void GetActiveSubroutineUniformName(Int32 program, OpenTK.Graphics.OpenGL4.ShaderType shadertype, Int32 index, Int32 bufsize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder name);

        /// <summary>[requires: v4.0 and ARB_shader_subroutine|VERSION_4_0]
        /// Query the name of an active shader subroutine uniform
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the name of the program containing the subroutine.
        /// </para>
        /// </param>
        /// <param name="shadertype">
        /// <para>
        /// Specifies the shader stage from which to query for the subroutine parameter. shadertype must be one of GL_VERTEX_SHADER, GL_TESS_CONTROL_SHADER, GL_TESS_EVALUATION_SHADER, GL_GEOMETRY_SHADER or GL_FRAGMENT_SHADER.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the shader subroutine uniform.
        /// </para>
        /// </param>
        /// <param name="bufsize">
        /// <para>
        /// Specifies the size of the buffer whose address is given in name.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the address of a variable into which is written the number of characters copied into name.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// Specifies the address of a buffer that will receive the name of the specified shader subroutine uniform.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_shader_subroutine|VERSION_4_0", Version = "4.0", EntryPoint = "glGetActiveSubroutineUniformName")]
        public static extern unsafe void GetActiveSubroutineUniformName(Int32 program, OpenTK.Graphics.OpenGL4.ShaderType shadertype, Int32 index, Int32 bufsize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder name);

        /// <summary>[requires: v4.0 and ARB_shader_subroutine|VERSION_4_0]
        /// Query the name of an active shader subroutine uniform
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the name of the program containing the subroutine.
        /// </para>
        /// </param>
        /// <param name="shadertype">
        /// <para>
        /// Specifies the shader stage from which to query for the subroutine parameter. shadertype must be one of GL_VERTEX_SHADER, GL_TESS_CONTROL_SHADER, GL_TESS_EVALUATION_SHADER, GL_GEOMETRY_SHADER or GL_FRAGMENT_SHADER.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the shader subroutine uniform.
        /// </para>
        /// </param>
        /// <param name="bufsize">
        /// <para>
        /// Specifies the size of the buffer whose address is given in name.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the address of a variable into which is written the number of characters copied into name.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// Specifies the address of a buffer that will receive the name of the specified shader subroutine uniform.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_shader_subroutine|VERSION_4_0", Version = "4.0", EntryPoint = "glGetActiveSubroutineUniformName")]
        public static extern void GetActiveSubroutineUniformName(UInt32 program, OpenTK.Graphics.OpenGL4.ShaderType shadertype, UInt32 index, Int32 bufsize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder name);

        /// <summary>[requires: v4.0 and ARB_shader_subroutine|VERSION_4_0]
        /// Query the name of an active shader subroutine uniform
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the name of the program containing the subroutine.
        /// </para>
        /// </param>
        /// <param name="shadertype">
        /// <para>
        /// Specifies the shader stage from which to query for the subroutine parameter. shadertype must be one of GL_VERTEX_SHADER, GL_TESS_CONTROL_SHADER, GL_TESS_EVALUATION_SHADER, GL_GEOMETRY_SHADER or GL_FRAGMENT_SHADER.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the shader subroutine uniform.
        /// </para>
        /// </param>
        /// <param name="bufsize">
        /// <para>
        /// Specifies the size of the buffer whose address is given in name.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the address of a variable into which is written the number of characters copied into name.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// Specifies the address of a buffer that will receive the name of the specified shader subroutine uniform.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_shader_subroutine|VERSION_4_0", Version = "4.0", EntryPoint = "glGetActiveSubroutineUniformName")]
        public static extern unsafe void GetActiveSubroutineUniformName(UInt32 program, OpenTK.Graphics.OpenGL4.ShaderType shadertype, UInt32 index, Int32 bufsize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder name);

        /// <summary>[requires: v2.0]
        /// Returns information about an active uniform variable for the specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the uniform variable to be queried.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than NULL is passed.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Returns the size of the uniform variable.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Returns the data type of the uniform variable.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// Returns a null terminated string containing the name of the uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetActiveUniform")]
        public static extern void GetActiveUniform(Int32 program, Int32 index, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] out Int32 size, [OutAttribute] out OpenTK.Graphics.OpenGL4.ActiveUniformType type, [OutAttribute] StringBuilder name);

        /// <summary>[requires: v2.0]
        /// Returns information about an active uniform variable for the specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the uniform variable to be queried.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than NULL is passed.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Returns the size of the uniform variable.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Returns the data type of the uniform variable.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// Returns a null terminated string containing the name of the uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetActiveUniform")]
        public static extern unsafe void GetActiveUniform(Int32 program, Int32 index, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] Int32* size, [OutAttribute] OpenTK.Graphics.OpenGL4.ActiveUniformType* type, [OutAttribute] StringBuilder name);

        /// <summary>[requires: v2.0]
        /// Returns information about an active uniform variable for the specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the uniform variable to be queried.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than NULL is passed.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Returns the size of the uniform variable.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Returns the data type of the uniform variable.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// Returns a null terminated string containing the name of the uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetActiveUniform")]
        public static extern void GetActiveUniform(UInt32 program, UInt32 index, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] out Int32 size, [OutAttribute] out OpenTK.Graphics.OpenGL4.ActiveUniformType type, [OutAttribute] StringBuilder name);

        /// <summary>[requires: v2.0]
        /// Returns information about an active uniform variable for the specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the uniform variable to be queried.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than NULL is passed.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Returns the size of the uniform variable.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Returns the data type of the uniform variable.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// Returns a null terminated string containing the name of the uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetActiveUniform")]
        public static extern unsafe void GetActiveUniform(UInt32 program, UInt32 index, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] Int32* size, [OutAttribute] OpenTK.Graphics.OpenGL4.ActiveUniformType* type, [OutAttribute] StringBuilder name);

        /// <summary>[requires: v3.1 and ARB_uniform_buffer_object|VERSION_3_1]
        /// Query information about an active uniform block
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the name of a program containing the uniform block.
        /// </para>
        /// </param>
        /// <param name="uniformBlockIndex">
        /// <para>
        /// Specifies the index of the uniform block within program.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the name of the parameter to query.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Specifies the address of a variable to receive the result of the query.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_uniform_buffer_object|VERSION_3_1", Version = "3.1", EntryPoint = "glGetActiveUniformBlockiv")]
        public static extern void GetActiveUniformBlock(Int32 program, Int32 uniformBlockIndex, OpenTK.Graphics.OpenGL4.ActiveUniformBlockParameter pname, [OutAttribute] Int32[] @params);

        /// <summary>[requires: v3.1 and ARB_uniform_buffer_object|VERSION_3_1]
        /// Query information about an active uniform block
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the name of a program containing the uniform block.
        /// </para>
        /// </param>
        /// <param name="uniformBlockIndex">
        /// <para>
        /// Specifies the index of the uniform block within program.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the name of the parameter to query.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Specifies the address of a variable to receive the result of the query.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_uniform_buffer_object|VERSION_3_1", Version = "3.1", EntryPoint = "glGetActiveUniformBlockiv")]
        public static extern void GetActiveUniformBlock(Int32 program, Int32 uniformBlockIndex, OpenTK.Graphics.OpenGL4.ActiveUniformBlockParameter pname, [OutAttribute] out Int32 @params);

        /// <summary>[requires: v3.1 and ARB_uniform_buffer_object|VERSION_3_1]
        /// Query information about an active uniform block
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the name of a program containing the uniform block.
        /// </para>
        /// </param>
        /// <param name="uniformBlockIndex">
        /// <para>
        /// Specifies the index of the uniform block within program.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the name of the parameter to query.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Specifies the address of a variable to receive the result of the query.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_uniform_buffer_object|VERSION_3_1", Version = "3.1", EntryPoint = "glGetActiveUniformBlockiv")]
        public static extern unsafe void GetActiveUniformBlock(Int32 program, Int32 uniformBlockIndex, OpenTK.Graphics.OpenGL4.ActiveUniformBlockParameter pname, [OutAttribute] Int32* @params);

        /// <summary>[requires: v3.1 and ARB_uniform_buffer_object|VERSION_3_1]
        /// Query information about an active uniform block
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the name of a program containing the uniform block.
        /// </para>
        /// </param>
        /// <param name="uniformBlockIndex">
        /// <para>
        /// Specifies the index of the uniform block within program.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the name of the parameter to query.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Specifies the address of a variable to receive the result of the query.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_uniform_buffer_object|VERSION_3_1", Version = "3.1", EntryPoint = "glGetActiveUniformBlockiv")]
        public static extern void GetActiveUniformBlock(UInt32 program, UInt32 uniformBlockIndex, OpenTK.Graphics.OpenGL4.ActiveUniformBlockParameter pname, [OutAttribute] Int32[] @params);

        /// <summary>[requires: v3.1 and ARB_uniform_buffer_object|VERSION_3_1]
        /// Query information about an active uniform block
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the name of a program containing the uniform block.
        /// </para>
        /// </param>
        /// <param name="uniformBlockIndex">
        /// <para>
        /// Specifies the index of the uniform block within program.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the name of the parameter to query.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Specifies the address of a variable to receive the result of the query.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_uniform_buffer_object|VERSION_3_1", Version = "3.1", EntryPoint = "glGetActiveUniformBlockiv")]
        public static extern void GetActiveUniformBlock(UInt32 program, UInt32 uniformBlockIndex, OpenTK.Graphics.OpenGL4.ActiveUniformBlockParameter pname, [OutAttribute] out Int32 @params);

        /// <summary>[requires: v3.1 and ARB_uniform_buffer_object|VERSION_3_1]
        /// Query information about an active uniform block
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the name of a program containing the uniform block.
        /// </para>
        /// </param>
        /// <param name="uniformBlockIndex">
        /// <para>
        /// Specifies the index of the uniform block within program.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the name of the parameter to query.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Specifies the address of a variable to receive the result of the query.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_uniform_buffer_object|VERSION_3_1", Version = "3.1", EntryPoint = "glGetActiveUniformBlockiv")]
        public static extern unsafe void GetActiveUniformBlock(UInt32 program, UInt32 uniformBlockIndex, OpenTK.Graphics.OpenGL4.ActiveUniformBlockParameter pname, [OutAttribute] Int32* @params);

        /// <summary>[requires: v3.1 and ARB_uniform_buffer_object|VERSION_3_1]
        /// Retrieve the name of an active uniform block
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the name of a program containing the uniform block.
        /// </para>
        /// </param>
        /// <param name="uniformBlockIndex">
        /// <para>
        /// Specifies the index of the uniform block within program.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the size of the buffer addressed by uniformBlockName.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the address of a variable to receive the number of characters that were written to uniformBlockName.
        /// </para>
        /// </param>
        /// <param name="uniformBlockName">
        /// <para>
        /// Specifies the address an array of characters to receive the name of the uniform block at uniformBlockIndex.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_uniform_buffer_object|VERSION_3_1", Version = "3.1", EntryPoint = "glGetActiveUniformBlockName")]
        public static extern void GetActiveUniformBlockName(Int32 program, Int32 uniformBlockIndex, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder uniformBlockName);

        /// <summary>[requires: v3.1 and ARB_uniform_buffer_object|VERSION_3_1]
        /// Retrieve the name of an active uniform block
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the name of a program containing the uniform block.
        /// </para>
        /// </param>
        /// <param name="uniformBlockIndex">
        /// <para>
        /// Specifies the index of the uniform block within program.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the size of the buffer addressed by uniformBlockName.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the address of a variable to receive the number of characters that were written to uniformBlockName.
        /// </para>
        /// </param>
        /// <param name="uniformBlockName">
        /// <para>
        /// Specifies the address an array of characters to receive the name of the uniform block at uniformBlockIndex.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_uniform_buffer_object|VERSION_3_1", Version = "3.1", EntryPoint = "glGetActiveUniformBlockName")]
        public static extern unsafe void GetActiveUniformBlockName(Int32 program, Int32 uniformBlockIndex, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder uniformBlockName);

        /// <summary>[requires: v3.1 and ARB_uniform_buffer_object|VERSION_3_1]
        /// Retrieve the name of an active uniform block
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the name of a program containing the uniform block.
        /// </para>
        /// </param>
        /// <param name="uniformBlockIndex">
        /// <para>
        /// Specifies the index of the uniform block within program.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the size of the buffer addressed by uniformBlockName.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the address of a variable to receive the number of characters that were written to uniformBlockName.
        /// </para>
        /// </param>
        /// <param name="uniformBlockName">
        /// <para>
        /// Specifies the address an array of characters to receive the name of the uniform block at uniformBlockIndex.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_uniform_buffer_object|VERSION_3_1", Version = "3.1", EntryPoint = "glGetActiveUniformBlockName")]
        public static extern void GetActiveUniformBlockName(UInt32 program, UInt32 uniformBlockIndex, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder uniformBlockName);

        /// <summary>[requires: v3.1 and ARB_uniform_buffer_object|VERSION_3_1]
        /// Retrieve the name of an active uniform block
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the name of a program containing the uniform block.
        /// </para>
        /// </param>
        /// <param name="uniformBlockIndex">
        /// <para>
        /// Specifies the index of the uniform block within program.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the size of the buffer addressed by uniformBlockName.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the address of a variable to receive the number of characters that were written to uniformBlockName.
        /// </para>
        /// </param>
        /// <param name="uniformBlockName">
        /// <para>
        /// Specifies the address an array of characters to receive the name of the uniform block at uniformBlockIndex.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_uniform_buffer_object|VERSION_3_1", Version = "3.1", EntryPoint = "glGetActiveUniformBlockName")]
        public static extern unsafe void GetActiveUniformBlockName(UInt32 program, UInt32 uniformBlockIndex, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder uniformBlockName);

        /// <summary>[requires: v3.1 and ARB_uniform_buffer_object|VERSION_3_1]
        /// Query the name of an active uniform
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program containing the active uniform index uniformIndex.
        /// </para>
        /// </param>
        /// <param name="uniformIndex">
        /// <para>
        /// Specifies the index of the active uniform whose name to query.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the size of the buffer, in units of GLchar, of the buffer whose address is specified in uniformName.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the address of a variable that will receive the number of characters that were or would have been written to the buffer addressed by uniformName.
        /// </para>
        /// </param>
        /// <param name="uniformName">
        /// <para>
        /// Specifies the address of a buffer into which the GL will place the name of the active uniform at uniformIndex within program.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_uniform_buffer_object|VERSION_3_1", Version = "3.1", EntryPoint = "glGetActiveUniformName")]
        public static extern void GetActiveUniformName(Int32 program, Int32 uniformIndex, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder uniformName);

        /// <summary>[requires: v3.1 and ARB_uniform_buffer_object|VERSION_3_1]
        /// Query the name of an active uniform
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program containing the active uniform index uniformIndex.
        /// </para>
        /// </param>
        /// <param name="uniformIndex">
        /// <para>
        /// Specifies the index of the active uniform whose name to query.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the size of the buffer, in units of GLchar, of the buffer whose address is specified in uniformName.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the address of a variable that will receive the number of characters that were or would have been written to the buffer addressed by uniformName.
        /// </para>
        /// </param>
        /// <param name="uniformName">
        /// <para>
        /// Specifies the address of a buffer into which the GL will place the name of the active uniform at uniformIndex within program.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_uniform_buffer_object|VERSION_3_1", Version = "3.1", EntryPoint = "glGetActiveUniformName")]
        public static extern unsafe void GetActiveUniformName(Int32 program, Int32 uniformIndex, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder uniformName);

        /// <summary>[requires: v3.1 and ARB_uniform_buffer_object|VERSION_3_1]
        /// Query the name of an active uniform
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program containing the active uniform index uniformIndex.
        /// </para>
        /// </param>
        /// <param name="uniformIndex">
        /// <para>
        /// Specifies the index of the active uniform whose name to query.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the size of the buffer, in units of GLchar, of the buffer whose address is specified in uniformName.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the address of a variable that will receive the number of characters that were or would have been written to the buffer addressed by uniformName.
        /// </para>
        /// </param>
        /// <param name="uniformName">
        /// <para>
        /// Specifies the address of a buffer into which the GL will place the name of the active uniform at uniformIndex within program.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_uniform_buffer_object|VERSION_3_1", Version = "3.1", EntryPoint = "glGetActiveUniformName")]
        public static extern void GetActiveUniformName(UInt32 program, UInt32 uniformIndex, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder uniformName);

        /// <summary>[requires: v3.1 and ARB_uniform_buffer_object|VERSION_3_1]
        /// Query the name of an active uniform
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program containing the active uniform index uniformIndex.
        /// </para>
        /// </param>
        /// <param name="uniformIndex">
        /// <para>
        /// Specifies the index of the active uniform whose name to query.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the size of the buffer, in units of GLchar, of the buffer whose address is specified in uniformName.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the address of a variable that will receive the number of characters that were or would have been written to the buffer addressed by uniformName.
        /// </para>
        /// </param>
        /// <param name="uniformName">
        /// <para>
        /// Specifies the address of a buffer into which the GL will place the name of the active uniform at uniformIndex within program.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_uniform_buffer_object|VERSION_3_1", Version = "3.1", EntryPoint = "glGetActiveUniformName")]
        public static extern unsafe void GetActiveUniformName(UInt32 program, UInt32 uniformIndex, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder uniformName);

        /// <summary>[requires: v3.1 and ARB_uniform_buffer_object|VERSION_3_1]
        /// Returns information about several active uniform variables for the specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="uniformCount">
        /// <para>
        /// Specifies both the number of elements in the array of indices uniformIndices and the number of parameters written to params upon successful return.
        /// </para>
        /// </param>
        /// <param name="uniformIndices">
        /// <para>
        /// Specifies the address of an array of uniformCount integers containing the indices of uniforms within program whose parameter pname should be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the property of each uniform in uniformIndices that should be written into the corresponding element of params.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Specifies the address of an array of uniformCount integers which are to receive the value of pname for each uniform in uniformIndices.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_uniform_buffer_object|VERSION_3_1", Version = "3.1", EntryPoint = "glGetActiveUniformsiv")]
        public static extern void GetActiveUniforms(Int32 program, Int32 uniformCount, Int32[] uniformIndices, OpenTK.Graphics.OpenGL4.ActiveUniformParameter pname, [OutAttribute] Int32[] @params);

        /// <summary>[requires: v3.1 and ARB_uniform_buffer_object|VERSION_3_1]
        /// Returns information about several active uniform variables for the specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="uniformCount">
        /// <para>
        /// Specifies both the number of elements in the array of indices uniformIndices and the number of parameters written to params upon successful return.
        /// </para>
        /// </param>
        /// <param name="uniformIndices">
        /// <para>
        /// Specifies the address of an array of uniformCount integers containing the indices of uniforms within program whose parameter pname should be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the property of each uniform in uniformIndices that should be written into the corresponding element of params.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Specifies the address of an array of uniformCount integers which are to receive the value of pname for each uniform in uniformIndices.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_uniform_buffer_object|VERSION_3_1", Version = "3.1", EntryPoint = "glGetActiveUniformsiv")]
        public static extern void GetActiveUniforms(Int32 program, Int32 uniformCount, ref Int32 uniformIndices, OpenTK.Graphics.OpenGL4.ActiveUniformParameter pname, [OutAttribute] out Int32 @params);

        /// <summary>[requires: v3.1 and ARB_uniform_buffer_object|VERSION_3_1]
        /// Returns information about several active uniform variables for the specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="uniformCount">
        /// <para>
        /// Specifies both the number of elements in the array of indices uniformIndices and the number of parameters written to params upon successful return.
        /// </para>
        /// </param>
        /// <param name="uniformIndices">
        /// <para>
        /// Specifies the address of an array of uniformCount integers containing the indices of uniforms within program whose parameter pname should be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the property of each uniform in uniformIndices that should be written into the corresponding element of params.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Specifies the address of an array of uniformCount integers which are to receive the value of pname for each uniform in uniformIndices.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_uniform_buffer_object|VERSION_3_1", Version = "3.1", EntryPoint = "glGetActiveUniformsiv")]
        public static extern unsafe void GetActiveUniforms(Int32 program, Int32 uniformCount, Int32* uniformIndices, OpenTK.Graphics.OpenGL4.ActiveUniformParameter pname, [OutAttribute] Int32* @params);

        /// <summary>[requires: v3.1 and ARB_uniform_buffer_object|VERSION_3_1]
        /// Returns information about several active uniform variables for the specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="uniformCount">
        /// <para>
        /// Specifies both the number of elements in the array of indices uniformIndices and the number of parameters written to params upon successful return.
        /// </para>
        /// </param>
        /// <param name="uniformIndices">
        /// <para>
        /// Specifies the address of an array of uniformCount integers containing the indices of uniforms within program whose parameter pname should be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the property of each uniform in uniformIndices that should be written into the corresponding element of params.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Specifies the address of an array of uniformCount integers which are to receive the value of pname for each uniform in uniformIndices.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_uniform_buffer_object|VERSION_3_1", Version = "3.1", EntryPoint = "glGetActiveUniformsiv")]
        public static extern void GetActiveUniforms(UInt32 program, Int32 uniformCount, UInt32[] uniformIndices, OpenTK.Graphics.OpenGL4.ActiveUniformParameter pname, [OutAttribute] Int32[] @params);

        /// <summary>[requires: v3.1 and ARB_uniform_buffer_object|VERSION_3_1]
        /// Returns information about several active uniform variables for the specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="uniformCount">
        /// <para>
        /// Specifies both the number of elements in the array of indices uniformIndices and the number of parameters written to params upon successful return.
        /// </para>
        /// </param>
        /// <param name="uniformIndices">
        /// <para>
        /// Specifies the address of an array of uniformCount integers containing the indices of uniforms within program whose parameter pname should be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the property of each uniform in uniformIndices that should be written into the corresponding element of params.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Specifies the address of an array of uniformCount integers which are to receive the value of pname for each uniform in uniformIndices.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_uniform_buffer_object|VERSION_3_1", Version = "3.1", EntryPoint = "glGetActiveUniformsiv")]
        public static extern void GetActiveUniforms(UInt32 program, Int32 uniformCount, ref UInt32 uniformIndices, OpenTK.Graphics.OpenGL4.ActiveUniformParameter pname, [OutAttribute] out Int32 @params);

        /// <summary>[requires: v3.1 and ARB_uniform_buffer_object|VERSION_3_1]
        /// Returns information about several active uniform variables for the specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="uniformCount">
        /// <para>
        /// Specifies both the number of elements in the array of indices uniformIndices and the number of parameters written to params upon successful return.
        /// </para>
        /// </param>
        /// <param name="uniformIndices">
        /// <para>
        /// Specifies the address of an array of uniformCount integers containing the indices of uniforms within program whose parameter pname should be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the property of each uniform in uniformIndices that should be written into the corresponding element of params.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Specifies the address of an array of uniformCount integers which are to receive the value of pname for each uniform in uniformIndices.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_uniform_buffer_object|VERSION_3_1", Version = "3.1", EntryPoint = "glGetActiveUniformsiv")]
        public static extern unsafe void GetActiveUniforms(UInt32 program, Int32 uniformCount, UInt32* uniformIndices, OpenTK.Graphics.OpenGL4.ActiveUniformParameter pname, [OutAttribute] Int32* @params);

        /// <summary>[requires: v2.0]
        /// Returns the handles of the shader objects attached to a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="maxCount">
        /// <para>
        /// Specifies the size of the array for storing the returned object names.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Returns the number of names actually returned in shaders.
        /// </para>
        /// </param>
        /// <param name="shaders">
        /// <para>
        /// Specifies an array that is used to return the names of attached shader objects.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetAttachedShaders")]
        public static extern void GetAttachedShaders(Int32 program, Int32 maxCount, [OutAttribute] out Int32 count, [OutAttribute] Int32[] shaders);

        /// <summary>[requires: v2.0]
        /// Returns the handles of the shader objects attached to a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="maxCount">
        /// <para>
        /// Specifies the size of the array for storing the returned object names.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Returns the number of names actually returned in shaders.
        /// </para>
        /// </param>
        /// <param name="shaders">
        /// <para>
        /// Specifies an array that is used to return the names of attached shader objects.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetAttachedShaders")]
        public static extern void GetAttachedShaders(Int32 program, Int32 maxCount, [OutAttribute] out Int32 count, [OutAttribute] out Int32 shaders);

        /// <summary>[requires: v2.0]
        /// Returns the handles of the shader objects attached to a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="maxCount">
        /// <para>
        /// Specifies the size of the array for storing the returned object names.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Returns the number of names actually returned in shaders.
        /// </para>
        /// </param>
        /// <param name="shaders">
        /// <para>
        /// Specifies an array that is used to return the names of attached shader objects.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetAttachedShaders")]
        public static extern unsafe void GetAttachedShaders(Int32 program, Int32 maxCount, [OutAttribute] Int32* count, [OutAttribute] Int32* shaders);

        /// <summary>[requires: v2.0]
        /// Returns the handles of the shader objects attached to a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="maxCount">
        /// <para>
        /// Specifies the size of the array for storing the returned object names.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Returns the number of names actually returned in shaders.
        /// </para>
        /// </param>
        /// <param name="shaders">
        /// <para>
        /// Specifies an array that is used to return the names of attached shader objects.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetAttachedShaders")]
        public static extern void GetAttachedShaders(UInt32 program, Int32 maxCount, [OutAttribute] out Int32 count, [OutAttribute] UInt32[] shaders);

        /// <summary>[requires: v2.0]
        /// Returns the handles of the shader objects attached to a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="maxCount">
        /// <para>
        /// Specifies the size of the array for storing the returned object names.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Returns the number of names actually returned in shaders.
        /// </para>
        /// </param>
        /// <param name="shaders">
        /// <para>
        /// Specifies an array that is used to return the names of attached shader objects.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetAttachedShaders")]
        public static extern void GetAttachedShaders(UInt32 program, Int32 maxCount, [OutAttribute] out Int32 count, [OutAttribute] out UInt32 shaders);

        /// <summary>[requires: v2.0]
        /// Returns the handles of the shader objects attached to a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="maxCount">
        /// <para>
        /// Specifies the size of the array for storing the returned object names.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Returns the number of names actually returned in shaders.
        /// </para>
        /// </param>
        /// <param name="shaders">
        /// <para>
        /// Specifies an array that is used to return the names of attached shader objects.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetAttachedShaders")]
        public static extern unsafe void GetAttachedShaders(UInt32 program, Int32 maxCount, [OutAttribute] Int32* count, [OutAttribute] UInt32* shaders);

        /// <summary>[requires: v2.0]
        /// Returns the location of an attribute variable
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// Points to a null terminated string containing the name of the attribute variable whose location is to be queried.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetAttribLocation")]
        public static extern Int32 GetAttribLocation(Int32 program, String name);

        /// <summary>[requires: v2.0]
        /// Returns the location of an attribute variable
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// Points to a null terminated string containing the name of the attribute variable whose location is to be queried.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetAttribLocation")]
        public static extern Int32 GetAttribLocation(UInt32 program, String name);

        /// <summary>[requires: v3.0]</summary>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetBooleani_v")]
        public static extern void GetBoolean(OpenTK.Graphics.OpenGL4.GetIndexedPName target, Int32 index, [OutAttribute] bool[] data);

        /// <summary>[requires: v3.0]</summary>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetBooleani_v")]
        public static extern void GetBoolean(OpenTK.Graphics.OpenGL4.GetIndexedPName target, Int32 index, [OutAttribute] out bool data);

        /// <summary>[requires: v3.0]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetBooleani_v")]
        public static extern unsafe void GetBoolean(OpenTK.Graphics.OpenGL4.GetIndexedPName target, Int32 index, [OutAttribute] bool* data);

        /// <summary>[requires: v3.0]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetBooleani_v")]
        public static extern void GetBoolean(OpenTK.Graphics.OpenGL4.GetIndexedPName target, UInt32 index, [OutAttribute] bool[] data);

        /// <summary>[requires: v3.0]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetBooleani_v")]
        public static extern void GetBoolean(OpenTK.Graphics.OpenGL4.GetIndexedPName target, UInt32 index, [OutAttribute] out bool data);

        /// <summary>[requires: v3.0]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetBooleani_v")]
        public static extern unsafe void GetBoolean(OpenTK.Graphics.OpenGL4.GetIndexedPName target, UInt32 index, [OutAttribute] bool* data);

        /// <summary>[requires: v1.0]</summary>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetBooleanv")]
        public static extern bool GetBoolean(OpenTK.Graphics.OpenGL4.GetPName pname);

        /// <summary>[requires: v1.0]</summary>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetBooleanv")]
        public static extern void GetBoolean(OpenTK.Graphics.OpenGL4.GetPName pname, [OutAttribute] bool[] data);

        /// <summary>[requires: v1.0]</summary>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetBooleanv")]
        public static extern void GetBoolean(OpenTK.Graphics.OpenGL4.GetPName pname, [OutAttribute] out bool data);

        /// <summary>[requires: v1.0]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetBooleanv")]
        public static extern unsafe void GetBoolean(OpenTK.Graphics.OpenGL4.GetPName pname, [OutAttribute] bool* data);

        /// <summary>[requires: v3.2]
        /// Return parameters of a buffer object
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ATOMIC_COUNTER_BUFFER, GL_COPY_READ_BUFFER, GL_COPY_WRITE_BUFFER, GL_DRAW_INDIRECT_BUFFER, GL_DISPATCH_INDIRECT_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, GL_PIXEL_UNPACK_BUFFER, GL_QUERY_BUFFER, GL_SHADER_STORAGE_BUFFER, GL_TEXTURE_BUFFER, GL_TRANSFORM_FEEDBACK_BUFFER, or GL_UNIFORM_BUFFER.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// Specifies the symbolic name of a buffer object parameter. Accepted values are GL_BUFFER_ACCESS, GL_BUFFER_MAPPED, GL_BUFFER_SIZE, or GL_BUFFER_USAGE.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Returns the requested parameter.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_3_2", Version = "3.2", EntryPoint = "glGetBufferParameteri64v")]
        public static extern void GetBufferParameter(OpenTK.Graphics.OpenGL4.BufferTarget target, OpenTK.Graphics.OpenGL4.BufferParameterName pname, [OutAttribute] Int64[] @params);

        /// <summary>[requires: v3.2]
        /// Return parameters of a buffer object
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ATOMIC_COUNTER_BUFFER, GL_COPY_READ_BUFFER, GL_COPY_WRITE_BUFFER, GL_DRAW_INDIRECT_BUFFER, GL_DISPATCH_INDIRECT_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, GL_PIXEL_UNPACK_BUFFER, GL_QUERY_BUFFER, GL_SHADER_STORAGE_BUFFER, GL_TEXTURE_BUFFER, GL_TRANSFORM_FEEDBACK_BUFFER, or GL_UNIFORM_BUFFER.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// Specifies the symbolic name of a buffer object parameter. Accepted values are GL_BUFFER_ACCESS, GL_BUFFER_MAPPED, GL_BUFFER_SIZE, or GL_BUFFER_USAGE.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Returns the requested parameter.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_3_2", Version = "3.2", EntryPoint = "glGetBufferParameteri64v")]
        public static extern void GetBufferParameter(OpenTK.Graphics.OpenGL4.BufferTarget target, OpenTK.Graphics.OpenGL4.BufferParameterName pname, [OutAttribute] out Int64 @params);

        /// <summary>[requires: v3.2]
        /// Return parameters of a buffer object
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ATOMIC_COUNTER_BUFFER, GL_COPY_READ_BUFFER, GL_COPY_WRITE_BUFFER, GL_DRAW_INDIRECT_BUFFER, GL_DISPATCH_INDIRECT_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, GL_PIXEL_UNPACK_BUFFER, GL_QUERY_BUFFER, GL_SHADER_STORAGE_BUFFER, GL_TEXTURE_BUFFER, GL_TRANSFORM_FEEDBACK_BUFFER, or GL_UNIFORM_BUFFER.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// Specifies the symbolic name of a buffer object parameter. Accepted values are GL_BUFFER_ACCESS, GL_BUFFER_MAPPED, GL_BUFFER_SIZE, or GL_BUFFER_USAGE.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Returns the requested parameter.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_2", Version = "3.2", EntryPoint = "glGetBufferParameteri64v")]
        public static extern unsafe void GetBufferParameter(OpenTK.Graphics.OpenGL4.BufferTarget target, OpenTK.Graphics.OpenGL4.BufferParameterName pname, [OutAttribute] Int64* @params);

        /// <summary>[requires: v1.5]
        /// Return parameters of a buffer object
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, or GL_PIXEL_UNPACK_BUFFER.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// Specifies the symbolic name of a buffer object parameter. Accepted values are GL_BUFFER_ACCESS, GL_BUFFER_MAPPED, GL_BUFFER_SIZE, or GL_BUFFER_USAGE.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Returns the requested parameter.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetBufferParameteriv")]
        public static extern void GetBufferParameter(OpenTK.Graphics.OpenGL4.BufferTarget target, OpenTK.Graphics.OpenGL4.BufferParameterName pname, [OutAttribute] Int32[] @params);

        /// <summary>[requires: v1.5]
        /// Return parameters of a buffer object
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, or GL_PIXEL_UNPACK_BUFFER.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// Specifies the symbolic name of a buffer object parameter. Accepted values are GL_BUFFER_ACCESS, GL_BUFFER_MAPPED, GL_BUFFER_SIZE, or GL_BUFFER_USAGE.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Returns the requested parameter.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetBufferParameteriv")]
        public static extern void GetBufferParameter(OpenTK.Graphics.OpenGL4.BufferTarget target, OpenTK.Graphics.OpenGL4.BufferParameterName pname, [OutAttribute] out Int32 @params);

        /// <summary>[requires: v1.5]
        /// Return parameters of a buffer object
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, or GL_PIXEL_UNPACK_BUFFER.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// Specifies the symbolic name of a buffer object parameter. Accepted values are GL_BUFFER_ACCESS, GL_BUFFER_MAPPED, GL_BUFFER_SIZE, or GL_BUFFER_USAGE.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Returns the requested parameter.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetBufferParameteriv")]
        public static extern unsafe void GetBufferParameter(OpenTK.Graphics.OpenGL4.BufferTarget target, OpenTK.Graphics.OpenGL4.BufferParameterName pname, [OutAttribute] Int32* @params);

        /// <summary>[requires: v1.5]
        /// Return the pointer to a mapped buffer object's data store
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ATOMIC_COUNTER_BUFFER, GL_COPY_READ_BUFFER, GL_COPY_WRITE_BUFFER, GL_DRAW_INDIRECT_BUFFER, GL_DISPATCH_INDIRECT_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, GL_PIXEL_UNPACK_BUFFER, GL_QUERY_BUFFER, GL_SHADER_STORAGE_BUFFER, GL_TEXTURE_BUFFER, GL_TRANSFORM_FEEDBACK_BUFFER, or GL_UNIFORM_BUFFER.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the pointer to be returned. The symbolic constant must be GL_BUFFER_MAP_POINTER.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the pointer value specified by pname.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetBufferPointerv")]
        public static extern void GetBufferPointer(OpenTK.Graphics.OpenGL4.BufferTarget target, OpenTK.Graphics.OpenGL4.BufferPointer pname, [OutAttribute] IntPtr @params);

        /// <summary>[requires: v1.5]
        /// Return the pointer to a mapped buffer object's data store
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ATOMIC_COUNTER_BUFFER, GL_COPY_READ_BUFFER, GL_COPY_WRITE_BUFFER, GL_DRAW_INDIRECT_BUFFER, GL_DISPATCH_INDIRECT_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, GL_PIXEL_UNPACK_BUFFER, GL_QUERY_BUFFER, GL_SHADER_STORAGE_BUFFER, GL_TEXTURE_BUFFER, GL_TRANSFORM_FEEDBACK_BUFFER, or GL_UNIFORM_BUFFER.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the pointer to be returned. The symbolic constant must be GL_BUFFER_MAP_POINTER.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the pointer value specified by pname.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetBufferPointerv")]
        public static extern void GetBufferPointer<T2>(OpenTK.Graphics.OpenGL4.BufferTarget target, OpenTK.Graphics.OpenGL4.BufferPointer pname, [InAttribute, OutAttribute] T2[] @params)
            where T2 : struct
        ;

        /// <summary>[requires: v1.5]
        /// Return the pointer to a mapped buffer object's data store
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ATOMIC_COUNTER_BUFFER, GL_COPY_READ_BUFFER, GL_COPY_WRITE_BUFFER, GL_DRAW_INDIRECT_BUFFER, GL_DISPATCH_INDIRECT_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, GL_PIXEL_UNPACK_BUFFER, GL_QUERY_BUFFER, GL_SHADER_STORAGE_BUFFER, GL_TEXTURE_BUFFER, GL_TRANSFORM_FEEDBACK_BUFFER, or GL_UNIFORM_BUFFER.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the pointer to be returned. The symbolic constant must be GL_BUFFER_MAP_POINTER.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the pointer value specified by pname.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetBufferPointerv")]
        public static extern void GetBufferPointer<T2>(OpenTK.Graphics.OpenGL4.BufferTarget target, OpenTK.Graphics.OpenGL4.BufferPointer pname, [InAttribute, OutAttribute] T2[,] @params)
            where T2 : struct
        ;

        /// <summary>[requires: v1.5]
        /// Return the pointer to a mapped buffer object's data store
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ATOMIC_COUNTER_BUFFER, GL_COPY_READ_BUFFER, GL_COPY_WRITE_BUFFER, GL_DRAW_INDIRECT_BUFFER, GL_DISPATCH_INDIRECT_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, GL_PIXEL_UNPACK_BUFFER, GL_QUERY_BUFFER, GL_SHADER_STORAGE_BUFFER, GL_TEXTURE_BUFFER, GL_TRANSFORM_FEEDBACK_BUFFER, or GL_UNIFORM_BUFFER.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the pointer to be returned. The symbolic constant must be GL_BUFFER_MAP_POINTER.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the pointer value specified by pname.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetBufferPointerv")]
        public static extern void GetBufferPointer<T2>(OpenTK.Graphics.OpenGL4.BufferTarget target, OpenTK.Graphics.OpenGL4.BufferPointer pname, [InAttribute, OutAttribute] T2[,,] @params)
            where T2 : struct
        ;

        /// <summary>[requires: v1.5]
        /// Return the pointer to a mapped buffer object's data store
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ATOMIC_COUNTER_BUFFER, GL_COPY_READ_BUFFER, GL_COPY_WRITE_BUFFER, GL_DRAW_INDIRECT_BUFFER, GL_DISPATCH_INDIRECT_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, GL_PIXEL_UNPACK_BUFFER, GL_QUERY_BUFFER, GL_SHADER_STORAGE_BUFFER, GL_TEXTURE_BUFFER, GL_TRANSFORM_FEEDBACK_BUFFER, or GL_UNIFORM_BUFFER.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the pointer to be returned. The symbolic constant must be GL_BUFFER_MAP_POINTER.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the pointer value specified by pname.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetBufferPointerv")]
        public static extern void GetBufferPointer<T2>(OpenTK.Graphics.OpenGL4.BufferTarget target, OpenTK.Graphics.OpenGL4.BufferPointer pname, [InAttribute, OutAttribute] ref T2 @params)
            where T2 : struct
        ;

        /// <summary>[requires: v1.5]
        /// Returns a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ATOMIC_COUNTER_BUFFER, GL_COPY_READ_BUFFER, GL_COPY_WRITE_BUFFER, GL_DRAW_INDIRECT_BUFFER, GL_DISPATCH_INDIRECT_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, GL_PIXEL_UNPACK_BUFFER, GL_QUERY_RESULT_BUFFER, GL_TEXTURE_BUFFER, GL_TRANSFORM_FEEDBACK_BUFFER, or GL_UNIFORM_BUFFER.
        /// </para>
        /// </param>
        /// <param name="offset">
        /// <para>
        /// Specifies the offset into the buffer object's data store from which data will be returned, measured in bytes.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Specifies the size in bytes of the data store region being returned.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the location where buffer object data is returned.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetBufferSubData")]
        public static extern void GetBufferSubData(OpenTK.Graphics.OpenGL4.BufferTarget target, IntPtr offset, IntPtr size, [OutAttribute] IntPtr data);

        /// <summary>[requires: v1.5]
        /// Returns a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ATOMIC_COUNTER_BUFFER, GL_COPY_READ_BUFFER, GL_COPY_WRITE_BUFFER, GL_DRAW_INDIRECT_BUFFER, GL_DISPATCH_INDIRECT_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, GL_PIXEL_UNPACK_BUFFER, GL_QUERY_RESULT_BUFFER, GL_TEXTURE_BUFFER, GL_TRANSFORM_FEEDBACK_BUFFER, or GL_UNIFORM_BUFFER.
        /// </para>
        /// </param>
        /// <param name="offset">
        /// <para>
        /// Specifies the offset into the buffer object's data store from which data will be returned, measured in bytes.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Specifies the size in bytes of the data store region being returned.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the location where buffer object data is returned.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetBufferSubData")]
        public static extern void GetBufferSubData<T3>(OpenTK.Graphics.OpenGL4.BufferTarget target, IntPtr offset, IntPtr size, [InAttribute, OutAttribute] T3[] data)
            where T3 : struct
        ;

        /// <summary>[requires: v1.5]
        /// Returns a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ATOMIC_COUNTER_BUFFER, GL_COPY_READ_BUFFER, GL_COPY_WRITE_BUFFER, GL_DRAW_INDIRECT_BUFFER, GL_DISPATCH_INDIRECT_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, GL_PIXEL_UNPACK_BUFFER, GL_QUERY_RESULT_BUFFER, GL_TEXTURE_BUFFER, GL_TRANSFORM_FEEDBACK_BUFFER, or GL_UNIFORM_BUFFER.
        /// </para>
        /// </param>
        /// <param name="offset">
        /// <para>
        /// Specifies the offset into the buffer object's data store from which data will be returned, measured in bytes.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Specifies the size in bytes of the data store region being returned.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the location where buffer object data is returned.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetBufferSubData")]
        public static extern void GetBufferSubData<T3>(OpenTK.Graphics.OpenGL4.BufferTarget target, IntPtr offset, IntPtr size, [InAttribute, OutAttribute] T3[,] data)
            where T3 : struct
        ;

        /// <summary>[requires: v1.5]
        /// Returns a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ATOMIC_COUNTER_BUFFER, GL_COPY_READ_BUFFER, GL_COPY_WRITE_BUFFER, GL_DRAW_INDIRECT_BUFFER, GL_DISPATCH_INDIRECT_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, GL_PIXEL_UNPACK_BUFFER, GL_QUERY_RESULT_BUFFER, GL_TEXTURE_BUFFER, GL_TRANSFORM_FEEDBACK_BUFFER, or GL_UNIFORM_BUFFER.
        /// </para>
        /// </param>
        /// <param name="offset">
        /// <para>
        /// Specifies the offset into the buffer object's data store from which data will be returned, measured in bytes.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Specifies the size in bytes of the data store region being returned.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the location where buffer object data is returned.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetBufferSubData")]
        public static extern void GetBufferSubData<T3>(OpenTK.Graphics.OpenGL4.BufferTarget target, IntPtr offset, IntPtr size, [InAttribute, OutAttribute] T3[,,] data)
            where T3 : struct
        ;

        /// <summary>[requires: v1.5]
        /// Returns a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ATOMIC_COUNTER_BUFFER, GL_COPY_READ_BUFFER, GL_COPY_WRITE_BUFFER, GL_DRAW_INDIRECT_BUFFER, GL_DISPATCH_INDIRECT_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, GL_PIXEL_UNPACK_BUFFER, GL_QUERY_RESULT_BUFFER, GL_TEXTURE_BUFFER, GL_TRANSFORM_FEEDBACK_BUFFER, or GL_UNIFORM_BUFFER.
        /// </para>
        /// </param>
        /// <param name="offset">
        /// <para>
        /// Specifies the offset into the buffer object's data store from which data will be returned, measured in bytes.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Specifies the size in bytes of the data store region being returned.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the location where buffer object data is returned.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetBufferSubData")]
        public static extern void GetBufferSubData<T3>(OpenTK.Graphics.OpenGL4.BufferTarget target, IntPtr offset, IntPtr size, [InAttribute, OutAttribute] ref T3 data)
            where T3 : struct
        ;

        /// <summary>
        /// Retrieve contents of a color lookup table
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Must be GL_COLOR_TABLE, GL_POST_CONVOLUTION_COLOR_TABLE, or GL_POST_COLOR_MATRIX_COLOR_TABLE.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// The format of the pixel data in table. The possible values are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_LUMINANCE, GL_LUMINANCE_ALPHA, GL_RGB, GL_BGR, GL_RGBA, and GL_BGRA.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// The type of the pixel data in table. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
        /// </para>
        /// </param>
        /// <param name="table">
        /// <para>
        /// Pointer to a one-dimensional array of pixel data containing the contents of the color table.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetColorTable")]
        public static extern void GetColorTable(OpenTK.Graphics.OpenGL4.ColorTableTarget target, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [OutAttribute] IntPtr table);

        /// <summary>
        /// Retrieve contents of a color lookup table
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Must be GL_COLOR_TABLE, GL_POST_CONVOLUTION_COLOR_TABLE, or GL_POST_COLOR_MATRIX_COLOR_TABLE.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// The format of the pixel data in table. The possible values are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_LUMINANCE, GL_LUMINANCE_ALPHA, GL_RGB, GL_BGR, GL_RGBA, and GL_BGRA.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// The type of the pixel data in table. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
        /// </para>
        /// </param>
        /// <param name="table">
        /// <para>
        /// Pointer to a one-dimensional array of pixel data containing the contents of the color table.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetColorTable")]
        public static extern void GetColorTable<T3>(OpenTK.Graphics.OpenGL4.ColorTableTarget target, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute] T3[] table)
            where T3 : struct
        ;

        /// <summary>
        /// Retrieve contents of a color lookup table
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Must be GL_COLOR_TABLE, GL_POST_CONVOLUTION_COLOR_TABLE, or GL_POST_COLOR_MATRIX_COLOR_TABLE.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// The format of the pixel data in table. The possible values are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_LUMINANCE, GL_LUMINANCE_ALPHA, GL_RGB, GL_BGR, GL_RGBA, and GL_BGRA.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// The type of the pixel data in table. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
        /// </para>
        /// </param>
        /// <param name="table">
        /// <para>
        /// Pointer to a one-dimensional array of pixel data containing the contents of the color table.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetColorTable")]
        public static extern void GetColorTable<T3>(OpenTK.Graphics.OpenGL4.ColorTableTarget target, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute] T3[,] table)
            where T3 : struct
        ;

        /// <summary>
        /// Retrieve contents of a color lookup table
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Must be GL_COLOR_TABLE, GL_POST_CONVOLUTION_COLOR_TABLE, or GL_POST_COLOR_MATRIX_COLOR_TABLE.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// The format of the pixel data in table. The possible values are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_LUMINANCE, GL_LUMINANCE_ALPHA, GL_RGB, GL_BGR, GL_RGBA, and GL_BGRA.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// The type of the pixel data in table. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
        /// </para>
        /// </param>
        /// <param name="table">
        /// <para>
        /// Pointer to a one-dimensional array of pixel data containing the contents of the color table.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetColorTable")]
        public static extern void GetColorTable<T3>(OpenTK.Graphics.OpenGL4.ColorTableTarget target, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute] T3[,,] table)
            where T3 : struct
        ;

        /// <summary>
        /// Retrieve contents of a color lookup table
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Must be GL_COLOR_TABLE, GL_POST_CONVOLUTION_COLOR_TABLE, or GL_POST_COLOR_MATRIX_COLOR_TABLE.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// The format of the pixel data in table. The possible values are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_LUMINANCE, GL_LUMINANCE_ALPHA, GL_RGB, GL_BGR, GL_RGBA, and GL_BGRA.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// The type of the pixel data in table. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
        /// </para>
        /// </param>
        /// <param name="table">
        /// <para>
        /// Pointer to a one-dimensional array of pixel data containing the contents of the color table.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetColorTable")]
        public static extern void GetColorTable<T3>(OpenTK.Graphics.OpenGL4.ColorTableTarget target, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute] ref T3 table)
            where T3 : struct
        ;

        /// <summary>
        /// Get color lookup table parameters
        /// </summary>
        /// <param name="target">
        /// <para>
        /// The target color table. Must be GL_COLOR_TABLE, GL_POST_CONVOLUTION_COLOR_TABLE, GL_POST_COLOR_MATRIX_COLOR_TABLE, GL_PROXY_COLOR_TABLE, GL_PROXY_POST_CONVOLUTION_COLOR_TABLE, or GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// The symbolic name of a color lookup table parameter. Must be one of GL_COLOR_TABLE_BIAS, GL_COLOR_TABLE_SCALE, GL_COLOR_TABLE_FORMAT, GL_COLOR_TABLE_WIDTH, GL_COLOR_TABLE_RED_SIZE, GL_COLOR_TABLE_GREEN_SIZE, GL_COLOR_TABLE_BLUE_SIZE, GL_COLOR_TABLE_ALPHA_SIZE, GL_COLOR_TABLE_LUMINANCE_SIZE, or GL_COLOR_TABLE_INTENSITY_SIZE.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// A pointer to an array where the values of the parameter will be stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetColorTableParameterfv")]
        public static extern void GetColorTableParameter(OpenTK.Graphics.OpenGL4.ColorTableTarget target, OpenTK.Graphics.OpenGL4.GetColorTableParameterPName pname, [OutAttribute] Single[] @params);

        /// <summary>
        /// Get color lookup table parameters
        /// </summary>
        /// <param name="target">
        /// <para>
        /// The target color table. Must be GL_COLOR_TABLE, GL_POST_CONVOLUTION_COLOR_TABLE, GL_POST_COLOR_MATRIX_COLOR_TABLE, GL_PROXY_COLOR_TABLE, GL_PROXY_POST_CONVOLUTION_COLOR_TABLE, or GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// The symbolic name of a color lookup table parameter. Must be one of GL_COLOR_TABLE_BIAS, GL_COLOR_TABLE_SCALE, GL_COLOR_TABLE_FORMAT, GL_COLOR_TABLE_WIDTH, GL_COLOR_TABLE_RED_SIZE, GL_COLOR_TABLE_GREEN_SIZE, GL_COLOR_TABLE_BLUE_SIZE, GL_COLOR_TABLE_ALPHA_SIZE, GL_COLOR_TABLE_LUMINANCE_SIZE, or GL_COLOR_TABLE_INTENSITY_SIZE.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// A pointer to an array where the values of the parameter will be stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetColorTableParameterfv")]
        public static extern void GetColorTableParameter(OpenTK.Graphics.OpenGL4.ColorTableTarget target, OpenTK.Graphics.OpenGL4.GetColorTableParameterPName pname, [OutAttribute] out Single @params);

        /// <summary>
        /// Get color lookup table parameters
        /// </summary>
        /// <param name="target">
        /// <para>
        /// The target color table. Must be GL_COLOR_TABLE, GL_POST_CONVOLUTION_COLOR_TABLE, GL_POST_COLOR_MATRIX_COLOR_TABLE, GL_PROXY_COLOR_TABLE, GL_PROXY_POST_CONVOLUTION_COLOR_TABLE, or GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// The symbolic name of a color lookup table parameter. Must be one of GL_COLOR_TABLE_BIAS, GL_COLOR_TABLE_SCALE, GL_COLOR_TABLE_FORMAT, GL_COLOR_TABLE_WIDTH, GL_COLOR_TABLE_RED_SIZE, GL_COLOR_TABLE_GREEN_SIZE, GL_COLOR_TABLE_BLUE_SIZE, GL_COLOR_TABLE_ALPHA_SIZE, GL_COLOR_TABLE_LUMINANCE_SIZE, or GL_COLOR_TABLE_INTENSITY_SIZE.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// A pointer to an array where the values of the parameter will be stored.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetColorTableParameterfv")]
        public static extern unsafe void GetColorTableParameter(OpenTK.Graphics.OpenGL4.ColorTableTarget target, OpenTK.Graphics.OpenGL4.GetColorTableParameterPName pname, [OutAttribute] Single* @params);

        /// <summary>
        /// Get color lookup table parameters
        /// </summary>
        /// <param name="target">
        /// <para>
        /// The target color table. Must be GL_COLOR_TABLE, GL_POST_CONVOLUTION_COLOR_TABLE, GL_POST_COLOR_MATRIX_COLOR_TABLE, GL_PROXY_COLOR_TABLE, GL_PROXY_POST_CONVOLUTION_COLOR_TABLE, or GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// The symbolic name of a color lookup table parameter. Must be one of GL_COLOR_TABLE_BIAS, GL_COLOR_TABLE_SCALE, GL_COLOR_TABLE_FORMAT, GL_COLOR_TABLE_WIDTH, GL_COLOR_TABLE_RED_SIZE, GL_COLOR_TABLE_GREEN_SIZE, GL_COLOR_TABLE_BLUE_SIZE, GL_COLOR_TABLE_ALPHA_SIZE, GL_COLOR_TABLE_LUMINANCE_SIZE, or GL_COLOR_TABLE_INTENSITY_SIZE.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// A pointer to an array where the values of the parameter will be stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetColorTableParameteriv")]
        public static extern void GetColorTableParameter(OpenTK.Graphics.OpenGL4.ColorTableTarget target, OpenTK.Graphics.OpenGL4.GetColorTableParameterPName pname, [OutAttribute] Int32[] @params);

        /// <summary>
        /// Get color lookup table parameters
        /// </summary>
        /// <param name="target">
        /// <para>
        /// The target color table. Must be GL_COLOR_TABLE, GL_POST_CONVOLUTION_COLOR_TABLE, GL_POST_COLOR_MATRIX_COLOR_TABLE, GL_PROXY_COLOR_TABLE, GL_PROXY_POST_CONVOLUTION_COLOR_TABLE, or GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// The symbolic name of a color lookup table parameter. Must be one of GL_COLOR_TABLE_BIAS, GL_COLOR_TABLE_SCALE, GL_COLOR_TABLE_FORMAT, GL_COLOR_TABLE_WIDTH, GL_COLOR_TABLE_RED_SIZE, GL_COLOR_TABLE_GREEN_SIZE, GL_COLOR_TABLE_BLUE_SIZE, GL_COLOR_TABLE_ALPHA_SIZE, GL_COLOR_TABLE_LUMINANCE_SIZE, or GL_COLOR_TABLE_INTENSITY_SIZE.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// A pointer to an array where the values of the parameter will be stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetColorTableParameteriv")]
        public static extern void GetColorTableParameter(OpenTK.Graphics.OpenGL4.ColorTableTarget target, OpenTK.Graphics.OpenGL4.GetColorTableParameterPName pname, [OutAttribute] out Int32 @params);

        /// <summary>
        /// Get color lookup table parameters
        /// </summary>
        /// <param name="target">
        /// <para>
        /// The target color table. Must be GL_COLOR_TABLE, GL_POST_CONVOLUTION_COLOR_TABLE, GL_POST_COLOR_MATRIX_COLOR_TABLE, GL_PROXY_COLOR_TABLE, GL_PROXY_POST_CONVOLUTION_COLOR_TABLE, or GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// The symbolic name of a color lookup table parameter. Must be one of GL_COLOR_TABLE_BIAS, GL_COLOR_TABLE_SCALE, GL_COLOR_TABLE_FORMAT, GL_COLOR_TABLE_WIDTH, GL_COLOR_TABLE_RED_SIZE, GL_COLOR_TABLE_GREEN_SIZE, GL_COLOR_TABLE_BLUE_SIZE, GL_COLOR_TABLE_ALPHA_SIZE, GL_COLOR_TABLE_LUMINANCE_SIZE, or GL_COLOR_TABLE_INTENSITY_SIZE.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// A pointer to an array where the values of the parameter will be stored.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetColorTableParameteriv")]
        public static extern unsafe void GetColorTableParameter(OpenTK.Graphics.OpenGL4.ColorTableTarget target, OpenTK.Graphics.OpenGL4.GetColorTableParameterPName pname, [OutAttribute] Int32* @params);

        /// <summary>[requires: v1.3]
        /// Return a compressed texture image
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies which texture is to be obtained. GL_TEXTURE_1D, GL_TEXTURE_2D, GL_TEXTURE_3D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, and GL_TEXTURE_CUBE_MAP_NEGATIVE_Z are accepted.
        /// </para>
        /// </param>
        /// <param name="lod">
        /// <para>
        /// Specifies the level-of-detail number of the desired image. Level 0 is the base image level. Level is the th mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="img">
        /// <para>
        /// Returns the compressed texture image.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glGetCompressedTexImage")]
        public static extern void GetCompressedTexImage(OpenTK.Graphics.OpenGL4.TextureTarget target, Int32 level, [OutAttribute] IntPtr img);

        /// <summary>[requires: v1.3]
        /// Return a compressed texture image
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies which texture is to be obtained. GL_TEXTURE_1D, GL_TEXTURE_2D, GL_TEXTURE_3D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, and GL_TEXTURE_CUBE_MAP_NEGATIVE_Z are accepted.
        /// </para>
        /// </param>
        /// <param name="lod">
        /// <para>
        /// Specifies the level-of-detail number of the desired image. Level 0 is the base image level. Level is the th mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="img">
        /// <para>
        /// Returns the compressed texture image.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glGetCompressedTexImage")]
        public static extern void GetCompressedTexImage<T2>(OpenTK.Graphics.OpenGL4.TextureTarget target, Int32 level, [InAttribute, OutAttribute] T2[] img)
            where T2 : struct
        ;

        /// <summary>[requires: v1.3]
        /// Return a compressed texture image
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies which texture is to be obtained. GL_TEXTURE_1D, GL_TEXTURE_2D, GL_TEXTURE_3D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, and GL_TEXTURE_CUBE_MAP_NEGATIVE_Z are accepted.
        /// </para>
        /// </param>
        /// <param name="lod">
        /// <para>
        /// Specifies the level-of-detail number of the desired image. Level 0 is the base image level. Level is the th mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="img">
        /// <para>
        /// Returns the compressed texture image.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glGetCompressedTexImage")]
        public static extern void GetCompressedTexImage<T2>(OpenTK.Graphics.OpenGL4.TextureTarget target, Int32 level, [InAttribute, OutAttribute] T2[,] img)
            where T2 : struct
        ;

        /// <summary>[requires: v1.3]
        /// Return a compressed texture image
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies which texture is to be obtained. GL_TEXTURE_1D, GL_TEXTURE_2D, GL_TEXTURE_3D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, and GL_TEXTURE_CUBE_MAP_NEGATIVE_Z are accepted.
        /// </para>
        /// </param>
        /// <param name="lod">
        /// <para>
        /// Specifies the level-of-detail number of the desired image. Level 0 is the base image level. Level is the th mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="img">
        /// <para>
        /// Returns the compressed texture image.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glGetCompressedTexImage")]
        public static extern void GetCompressedTexImage<T2>(OpenTK.Graphics.OpenGL4.TextureTarget target, Int32 level, [InAttribute, OutAttribute] T2[,,] img)
            where T2 : struct
        ;

        /// <summary>[requires: v1.3]
        /// Return a compressed texture image
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies which texture is to be obtained. GL_TEXTURE_1D, GL_TEXTURE_2D, GL_TEXTURE_3D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, and GL_TEXTURE_CUBE_MAP_NEGATIVE_Z are accepted.
        /// </para>
        /// </param>
        /// <param name="lod">
        /// <para>
        /// Specifies the level-of-detail number of the desired image. Level 0 is the base image level. Level is the th mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="img">
        /// <para>
        /// Returns the compressed texture image.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glGetCompressedTexImage")]
        public static extern void GetCompressedTexImage<T2>(OpenTK.Graphics.OpenGL4.TextureTarget target, Int32 level, [InAttribute, OutAttribute] ref T2 img)
            where T2 : struct
        ;

        /// <summary>
        /// Get current 1D or 2D convolution filter kernel
        /// </summary>
        /// <param name="target">
        /// <para>
        /// The filter to be retrieved. Must be one of GL_CONVOLUTION_1D or GL_CONVOLUTION_2D.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Format of the output image. Must be one of GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, or GL_LUMINANCE_ALPHA.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Data type of components in the output image. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
        /// </para>
        /// </param>
        /// <param name="image">
        /// <para>
        /// Pointer to storage for the output image.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetConvolutionFilter")]
        public static extern void GetConvolutionFilter(OpenTK.Graphics.OpenGL4.ConvolutionTarget target, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [OutAttribute] IntPtr image);

        /// <summary>
        /// Get current 1D or 2D convolution filter kernel
        /// </summary>
        /// <param name="target">
        /// <para>
        /// The filter to be retrieved. Must be one of GL_CONVOLUTION_1D or GL_CONVOLUTION_2D.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Format of the output image. Must be one of GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, or GL_LUMINANCE_ALPHA.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Data type of components in the output image. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
        /// </para>
        /// </param>
        /// <param name="image">
        /// <para>
        /// Pointer to storage for the output image.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetConvolutionFilter")]
        public static extern void GetConvolutionFilter<T3>(OpenTK.Graphics.OpenGL4.ConvolutionTarget target, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute] T3[] image)
            where T3 : struct
        ;

        /// <summary>
        /// Get current 1D or 2D convolution filter kernel
        /// </summary>
        /// <param name="target">
        /// <para>
        /// The filter to be retrieved. Must be one of GL_CONVOLUTION_1D or GL_CONVOLUTION_2D.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Format of the output image. Must be one of GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, or GL_LUMINANCE_ALPHA.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Data type of components in the output image. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
        /// </para>
        /// </param>
        /// <param name="image">
        /// <para>
        /// Pointer to storage for the output image.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetConvolutionFilter")]
        public static extern void GetConvolutionFilter<T3>(OpenTK.Graphics.OpenGL4.ConvolutionTarget target, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute] T3[,] image)
            where T3 : struct
        ;

        /// <summary>
        /// Get current 1D or 2D convolution filter kernel
        /// </summary>
        /// <param name="target">
        /// <para>
        /// The filter to be retrieved. Must be one of GL_CONVOLUTION_1D or GL_CONVOLUTION_2D.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Format of the output image. Must be one of GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, or GL_LUMINANCE_ALPHA.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Data type of components in the output image. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
        /// </para>
        /// </param>
        /// <param name="image">
        /// <para>
        /// Pointer to storage for the output image.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetConvolutionFilter")]
        public static extern void GetConvolutionFilter<T3>(OpenTK.Graphics.OpenGL4.ConvolutionTarget target, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute] T3[,,] image)
            where T3 : struct
        ;

        /// <summary>
        /// Get current 1D or 2D convolution filter kernel
        /// </summary>
        /// <param name="target">
        /// <para>
        /// The filter to be retrieved. Must be one of GL_CONVOLUTION_1D or GL_CONVOLUTION_2D.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Format of the output image. Must be one of GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, or GL_LUMINANCE_ALPHA.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Data type of components in the output image. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
        /// </para>
        /// </param>
        /// <param name="image">
        /// <para>
        /// Pointer to storage for the output image.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetConvolutionFilter")]
        public static extern void GetConvolutionFilter<T3>(OpenTK.Graphics.OpenGL4.ConvolutionTarget target, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute] ref T3 image)
            where T3 : struct
        ;

        /// <summary>
        /// Get convolution parameters
        /// </summary>
        /// <param name="target">
        /// <para>
        /// The filter whose parameters are to be retrieved. Must be one of GL_CONVOLUTION_1D, GL_CONVOLUTION_2D, or GL_SEPARABLE_2D.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// The parameter to be retrieved. Must be one of GL_CONVOLUTION_BORDER_MODE, GL_CONVOLUTION_BORDER_COLOR, GL_CONVOLUTION_FILTER_SCALE, GL_CONVOLUTION_FILTER_BIAS, GL_CONVOLUTION_FORMAT, GL_CONVOLUTION_WIDTH, GL_CONVOLUTION_HEIGHT, GL_MAX_CONVOLUTION_WIDTH, or GL_MAX_CONVOLUTION_HEIGHT.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Pointer to storage for the parameters to be retrieved.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetConvolutionParameterfv")]
        public static extern void GetConvolutionParameter(OpenTK.Graphics.OpenGL4.ConvolutionTarget target, OpenTK.Graphics.OpenGL4.GetConvolutionParameterPName pname, [OutAttribute] Single[] @params);

        /// <summary>
        /// Get convolution parameters
        /// </summary>
        /// <param name="target">
        /// <para>
        /// The filter whose parameters are to be retrieved. Must be one of GL_CONVOLUTION_1D, GL_CONVOLUTION_2D, or GL_SEPARABLE_2D.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// The parameter to be retrieved. Must be one of GL_CONVOLUTION_BORDER_MODE, GL_CONVOLUTION_BORDER_COLOR, GL_CONVOLUTION_FILTER_SCALE, GL_CONVOLUTION_FILTER_BIAS, GL_CONVOLUTION_FORMAT, GL_CONVOLUTION_WIDTH, GL_CONVOLUTION_HEIGHT, GL_MAX_CONVOLUTION_WIDTH, or GL_MAX_CONVOLUTION_HEIGHT.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Pointer to storage for the parameters to be retrieved.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetConvolutionParameterfv")]
        public static extern void GetConvolutionParameter(OpenTK.Graphics.OpenGL4.ConvolutionTarget target, OpenTK.Graphics.OpenGL4.GetConvolutionParameterPName pname, [OutAttribute] out Single @params);

        /// <summary>
        /// Get convolution parameters
        /// </summary>
        /// <param name="target">
        /// <para>
        /// The filter whose parameters are to be retrieved. Must be one of GL_CONVOLUTION_1D, GL_CONVOLUTION_2D, or GL_SEPARABLE_2D.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// The parameter to be retrieved. Must be one of GL_CONVOLUTION_BORDER_MODE, GL_CONVOLUTION_BORDER_COLOR, GL_CONVOLUTION_FILTER_SCALE, GL_CONVOLUTION_FILTER_BIAS, GL_CONVOLUTION_FORMAT, GL_CONVOLUTION_WIDTH, GL_CONVOLUTION_HEIGHT, GL_MAX_CONVOLUTION_WIDTH, or GL_MAX_CONVOLUTION_HEIGHT.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Pointer to storage for the parameters to be retrieved.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetConvolutionParameterfv")]
        public static extern unsafe void GetConvolutionParameter(OpenTK.Graphics.OpenGL4.ConvolutionTarget target, OpenTK.Graphics.OpenGL4.GetConvolutionParameterPName pname, [OutAttribute] Single* @params);

        /// <summary>
        /// Get convolution parameters
        /// </summary>
        /// <param name="target">
        /// <para>
        /// The filter whose parameters are to be retrieved. Must be one of GL_CONVOLUTION_1D, GL_CONVOLUTION_2D, or GL_SEPARABLE_2D.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// The parameter to be retrieved. Must be one of GL_CONVOLUTION_BORDER_MODE, GL_CONVOLUTION_BORDER_COLOR, GL_CONVOLUTION_FILTER_SCALE, GL_CONVOLUTION_FILTER_BIAS, GL_CONVOLUTION_FORMAT, GL_CONVOLUTION_WIDTH, GL_CONVOLUTION_HEIGHT, GL_MAX_CONVOLUTION_WIDTH, or GL_MAX_CONVOLUTION_HEIGHT.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Pointer to storage for the parameters to be retrieved.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetConvolutionParameteriv")]
        public static extern void GetConvolutionParameter(OpenTK.Graphics.OpenGL4.ConvolutionTarget target, OpenTK.Graphics.OpenGL4.GetConvolutionParameterPName pname, [OutAttribute] Int32[] @params);

        /// <summary>
        /// Get convolution parameters
        /// </summary>
        /// <param name="target">
        /// <para>
        /// The filter whose parameters are to be retrieved. Must be one of GL_CONVOLUTION_1D, GL_CONVOLUTION_2D, or GL_SEPARABLE_2D.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// The parameter to be retrieved. Must be one of GL_CONVOLUTION_BORDER_MODE, GL_CONVOLUTION_BORDER_COLOR, GL_CONVOLUTION_FILTER_SCALE, GL_CONVOLUTION_FILTER_BIAS, GL_CONVOLUTION_FORMAT, GL_CONVOLUTION_WIDTH, GL_CONVOLUTION_HEIGHT, GL_MAX_CONVOLUTION_WIDTH, or GL_MAX_CONVOLUTION_HEIGHT.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Pointer to storage for the parameters to be retrieved.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetConvolutionParameteriv")]
        public static extern void GetConvolutionParameter(OpenTK.Graphics.OpenGL4.ConvolutionTarget target, OpenTK.Graphics.OpenGL4.GetConvolutionParameterPName pname, [OutAttribute] out Int32 @params);

        /// <summary>
        /// Get convolution parameters
        /// </summary>
        /// <param name="target">
        /// <para>
        /// The filter whose parameters are to be retrieved. Must be one of GL_CONVOLUTION_1D, GL_CONVOLUTION_2D, or GL_SEPARABLE_2D.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// The parameter to be retrieved. Must be one of GL_CONVOLUTION_BORDER_MODE, GL_CONVOLUTION_BORDER_COLOR, GL_CONVOLUTION_FILTER_SCALE, GL_CONVOLUTION_FILTER_BIAS, GL_CONVOLUTION_FORMAT, GL_CONVOLUTION_WIDTH, GL_CONVOLUTION_HEIGHT, GL_MAX_CONVOLUTION_WIDTH, or GL_MAX_CONVOLUTION_HEIGHT.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Pointer to storage for the parameters to be retrieved.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetConvolutionParameteriv")]
        public static extern unsafe void GetConvolutionParameter(OpenTK.Graphics.OpenGL4.ConvolutionTarget target, OpenTK.Graphics.OpenGL4.GetConvolutionParameterPName pname, [OutAttribute] Int32* @params);

        /// <summary>[requires: v4.3 and KHR_debug|VERSION_4_3]
        /// Retrieve messages from the debug message log
        /// </summary>
        /// <param name="count">
        /// <para>
        /// The number of debug messages to retrieve from the log.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// The size of the buffer whose address is given by messageLog.
        /// </para>
        /// </param>
        /// <param name="sources">
        /// <para>
        /// The address of an array of variables to receive the sources of the retrieved messages.
        /// </para>
        /// </param>
        /// <param name="types">
        /// <para>
        /// The address of an array of variables to receive the types of the retrieved messages.
        /// </para>
        /// </param>
        /// <param name="ids">
        /// <para>
        /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
        /// </para>
        /// </param>
        /// <param name="severities">
        /// <para>
        /// The address of an array of variables to receive the severites of the retrieved messages.
        /// </para>
        /// </param>
        /// <param name="lengths">
        /// <para>
        /// The address of an array of variables to receive the lengths of the received messages.
        /// </para>
        /// </param>
        /// <param name="messageLog">
        /// <para>
        /// The address of an array of characters that will receive the messages.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glGetDebugMessageLog")]
        public static extern Int32 GetDebugMessageLog(Int32 count, Int32 bufSize, [OutAttribute] OpenTK.Graphics.OpenGL4.DebugSource[] sources, [OutAttribute] OpenTK.Graphics.OpenGL4.DebugType[] types, [OutAttribute] Int32[] ids, [OutAttribute] OpenTK.Graphics.OpenGL4.DebugSeverity[] severities, [OutAttribute] Int32[] lengths, [OutAttribute] StringBuilder messageLog);

        /// <summary>[requires: v4.3 and KHR_debug|VERSION_4_3]
        /// Retrieve messages from the debug message log
        /// </summary>
        /// <param name="count">
        /// <para>
        /// The number of debug messages to retrieve from the log.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// The size of the buffer whose address is given by messageLog.
        /// </para>
        /// </param>
        /// <param name="sources">
        /// <para>
        /// The address of an array of variables to receive the sources of the retrieved messages.
        /// </para>
        /// </param>
        /// <param name="types">
        /// <para>
        /// The address of an array of variables to receive the types of the retrieved messages.
        /// </para>
        /// </param>
        /// <param name="ids">
        /// <para>
        /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
        /// </para>
        /// </param>
        /// <param name="severities">
        /// <para>
        /// The address of an array of variables to receive the severites of the retrieved messages.
        /// </para>
        /// </param>
        /// <param name="lengths">
        /// <para>
        /// The address of an array of variables to receive the lengths of the received messages.
        /// </para>
        /// </param>
        /// <param name="messageLog">
        /// <para>
        /// The address of an array of characters that will receive the messages.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glGetDebugMessageLog")]
        public static extern Int32 GetDebugMessageLog(Int32 count, Int32 bufSize, [OutAttribute] out OpenTK.Graphics.OpenGL4.DebugSource sources, [OutAttribute] out OpenTK.Graphics.OpenGL4.DebugType types, [OutAttribute] out Int32 ids, [OutAttribute] out OpenTK.Graphics.OpenGL4.DebugSeverity severities, [OutAttribute] out Int32 lengths, [OutAttribute] StringBuilder messageLog);

        /// <summary>[requires: v4.3 and KHR_debug|VERSION_4_3]
        /// Retrieve messages from the debug message log
        /// </summary>
        /// <param name="count">
        /// <para>
        /// The number of debug messages to retrieve from the log.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// The size of the buffer whose address is given by messageLog.
        /// </para>
        /// </param>
        /// <param name="sources">
        /// <para>
        /// The address of an array of variables to receive the sources of the retrieved messages.
        /// </para>
        /// </param>
        /// <param name="types">
        /// <para>
        /// The address of an array of variables to receive the types of the retrieved messages.
        /// </para>
        /// </param>
        /// <param name="ids">
        /// <para>
        /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
        /// </para>
        /// </param>
        /// <param name="severities">
        /// <para>
        /// The address of an array of variables to receive the severites of the retrieved messages.
        /// </para>
        /// </param>
        /// <param name="lengths">
        /// <para>
        /// The address of an array of variables to receive the lengths of the received messages.
        /// </para>
        /// </param>
        /// <param name="messageLog">
        /// <para>
        /// The address of an array of characters that will receive the messages.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glGetDebugMessageLog")]
        public static extern unsafe Int32 GetDebugMessageLog(Int32 count, Int32 bufSize, [OutAttribute] OpenTK.Graphics.OpenGL4.DebugSource* sources, [OutAttribute] OpenTK.Graphics.OpenGL4.DebugType* types, [OutAttribute] Int32* ids, [OutAttribute] OpenTK.Graphics.OpenGL4.DebugSeverity* severities, [OutAttribute] Int32* lengths, [OutAttribute] StringBuilder messageLog);

        /// <summary>[requires: v4.3 and KHR_debug|VERSION_4_3]
        /// Retrieve messages from the debug message log
        /// </summary>
        /// <param name="count">
        /// <para>
        /// The number of debug messages to retrieve from the log.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// The size of the buffer whose address is given by messageLog.
        /// </para>
        /// </param>
        /// <param name="sources">
        /// <para>
        /// The address of an array of variables to receive the sources of the retrieved messages.
        /// </para>
        /// </param>
        /// <param name="types">
        /// <para>
        /// The address of an array of variables to receive the types of the retrieved messages.
        /// </para>
        /// </param>
        /// <param name="ids">
        /// <para>
        /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
        /// </para>
        /// </param>
        /// <param name="severities">
        /// <para>
        /// The address of an array of variables to receive the severites of the retrieved messages.
        /// </para>
        /// </param>
        /// <param name="lengths">
        /// <para>
        /// The address of an array of variables to receive the lengths of the received messages.
        /// </para>
        /// </param>
        /// <param name="messageLog">
        /// <para>
        /// The address of an array of characters that will receive the messages.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glGetDebugMessageLog")]
        public static extern Int32 GetDebugMessageLog(UInt32 count, Int32 bufSize, [OutAttribute] OpenTK.Graphics.OpenGL4.DebugSource[] sources, [OutAttribute] OpenTK.Graphics.OpenGL4.DebugType[] types, [OutAttribute] UInt32[] ids, [OutAttribute] OpenTK.Graphics.OpenGL4.DebugSeverity[] severities, [OutAttribute] Int32[] lengths, [OutAttribute] StringBuilder messageLog);

        /// <summary>[requires: v4.3 and KHR_debug|VERSION_4_3]
        /// Retrieve messages from the debug message log
        /// </summary>
        /// <param name="count">
        /// <para>
        /// The number of debug messages to retrieve from the log.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// The size of the buffer whose address is given by messageLog.
        /// </para>
        /// </param>
        /// <param name="sources">
        /// <para>
        /// The address of an array of variables to receive the sources of the retrieved messages.
        /// </para>
        /// </param>
        /// <param name="types">
        /// <para>
        /// The address of an array of variables to receive the types of the retrieved messages.
        /// </para>
        /// </param>
        /// <param name="ids">
        /// <para>
        /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
        /// </para>
        /// </param>
        /// <param name="severities">
        /// <para>
        /// The address of an array of variables to receive the severites of the retrieved messages.
        /// </para>
        /// </param>
        /// <param name="lengths">
        /// <para>
        /// The address of an array of variables to receive the lengths of the received messages.
        /// </para>
        /// </param>
        /// <param name="messageLog">
        /// <para>
        /// The address of an array of characters that will receive the messages.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glGetDebugMessageLog")]
        public static extern Int32 GetDebugMessageLog(UInt32 count, Int32 bufSize, [OutAttribute] out OpenTK.Graphics.OpenGL4.DebugSource sources, [OutAttribute] out OpenTK.Graphics.OpenGL4.DebugType types, [OutAttribute] out UInt32 ids, [OutAttribute] out OpenTK.Graphics.OpenGL4.DebugSeverity severities, [OutAttribute] out Int32 lengths, [OutAttribute] StringBuilder messageLog);

        /// <summary>[requires: v4.3 and KHR_debug|VERSION_4_3]
        /// Retrieve messages from the debug message log
        /// </summary>
        /// <param name="count">
        /// <para>
        /// The number of debug messages to retrieve from the log.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// The size of the buffer whose address is given by messageLog.
        /// </para>
        /// </param>
        /// <param name="sources">
        /// <para>
        /// The address of an array of variables to receive the sources of the retrieved messages.
        /// </para>
        /// </param>
        /// <param name="types">
        /// <para>
        /// The address of an array of variables to receive the types of the retrieved messages.
        /// </para>
        /// </param>
        /// <param name="ids">
        /// <para>
        /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
        /// </para>
        /// </param>
        /// <param name="severities">
        /// <para>
        /// The address of an array of variables to receive the severites of the retrieved messages.
        /// </para>
        /// </param>
        /// <param name="lengths">
        /// <para>
        /// The address of an array of variables to receive the lengths of the received messages.
        /// </para>
        /// </param>
        /// <param name="messageLog">
        /// <para>
        /// The address of an array of characters that will receive the messages.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glGetDebugMessageLog")]
        public static extern unsafe Int32 GetDebugMessageLog(UInt32 count, Int32 bufSize, [OutAttribute] OpenTK.Graphics.OpenGL4.DebugSource* sources, [OutAttribute] OpenTK.Graphics.OpenGL4.DebugType* types, [OutAttribute] UInt32* ids, [OutAttribute] OpenTK.Graphics.OpenGL4.DebugSeverity* severities, [OutAttribute] Int32* lengths, [OutAttribute] StringBuilder messageLog);

        /// <summary>[requires: v4.1 and ARB_viewport_array|VERSION_4_1]</summary>
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glGetDoublei_v")]
        public static extern void GetDouble(OpenTK.Graphics.OpenGL4.GetIndexedPName target, Int32 index, [OutAttribute] Double[] data);

        /// <summary>[requires: v4.1 and ARB_viewport_array|VERSION_4_1]</summary>
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glGetDoublei_v")]
        public static extern void GetDouble(OpenTK.Graphics.OpenGL4.GetIndexedPName target, Int32 index, [OutAttribute] out Double data);

        /// <summary>[requires: v4.1 and ARB_viewport_array|VERSION_4_1]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glGetDoublei_v")]
        public static extern unsafe void GetDouble(OpenTK.Graphics.OpenGL4.GetIndexedPName target, Int32 index, [OutAttribute] Double* data);

        /// <summary>[requires: v4.1 and ARB_viewport_array|VERSION_4_1]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glGetDoublei_v")]
        public static extern void GetDouble(OpenTK.Graphics.OpenGL4.GetIndexedPName target, UInt32 index, [OutAttribute] Double[] data);

        /// <summary>[requires: v4.1 and ARB_viewport_array|VERSION_4_1]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glGetDoublei_v")]
        public static extern void GetDouble(OpenTK.Graphics.OpenGL4.GetIndexedPName target, UInt32 index, [OutAttribute] out Double data);

        /// <summary>[requires: v4.1 and ARB_viewport_array|VERSION_4_1]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glGetDoublei_v")]
        public static extern unsafe void GetDouble(OpenTK.Graphics.OpenGL4.GetIndexedPName target, UInt32 index, [OutAttribute] Double* data);

        /// <summary>[requires: v1.0]</summary>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetDoublev")]
        public static extern Double GetDouble(OpenTK.Graphics.OpenGL4.GetPName pname);

        /// <summary>[requires: v1.0]</summary>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetDoublev")]
        public static extern void GetDouble(OpenTK.Graphics.OpenGL4.GetPName pname, [OutAttribute] Double[] data);

        /// <summary>[requires: v1.0]</summary>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetDoublev")]
        public static extern void GetDouble(OpenTK.Graphics.OpenGL4.GetPName pname, [OutAttribute] out Double data);

        /// <summary>[requires: v1.0]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetDoublev")]
        public static extern unsafe void GetDouble(OpenTK.Graphics.OpenGL4.GetPName pname, [OutAttribute] Double* data);

        /// <summary>[requires: v1.0]
        /// Return error information
        /// </summary>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetError")]
        public static extern OpenTK.Graphics.OpenGL4.ErrorCode GetError();

        /// <summary>[requires: v4.1 and ARB_viewport_array|VERSION_4_1]</summary>
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glGetFloati_v")]
        public static extern void GetFloat(OpenTK.Graphics.OpenGL4.GetIndexedPName target, Int32 index, [OutAttribute] Single[] data);

        /// <summary>[requires: v4.1 and ARB_viewport_array|VERSION_4_1]</summary>
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glGetFloati_v")]
        public static extern void GetFloat(OpenTK.Graphics.OpenGL4.GetIndexedPName target, Int32 index, [OutAttribute] out Single data);

        /// <summary>[requires: v4.1 and ARB_viewport_array|VERSION_4_1]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glGetFloati_v")]
        public static extern unsafe void GetFloat(OpenTK.Graphics.OpenGL4.GetIndexedPName target, Int32 index, [OutAttribute] Single* data);

        /// <summary>[requires: v4.1 and ARB_viewport_array|VERSION_4_1]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glGetFloati_v")]
        public static extern void GetFloat(OpenTK.Graphics.OpenGL4.GetIndexedPName target, UInt32 index, [OutAttribute] Single[] data);

        /// <summary>[requires: v4.1 and ARB_viewport_array|VERSION_4_1]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glGetFloati_v")]
        public static extern void GetFloat(OpenTK.Graphics.OpenGL4.GetIndexedPName target, UInt32 index, [OutAttribute] out Single data);

        /// <summary>[requires: v4.1 and ARB_viewport_array|VERSION_4_1]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glGetFloati_v")]
        public static extern unsafe void GetFloat(OpenTK.Graphics.OpenGL4.GetIndexedPName target, UInt32 index, [OutAttribute] Single* data);

        /// <summary>[requires: v1.0]</summary>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetFloatv")]
        public static extern Single GetFloat(OpenTK.Graphics.OpenGL4.GetPName pname);

        /// <summary>[requires: v1.0]</summary>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetFloatv")]
        public static extern void GetFloat(OpenTK.Graphics.OpenGL4.GetPName pname, [OutAttribute] Single[] data);

        /// <summary>[requires: v1.0]</summary>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetFloatv")]
        public static extern void GetFloat(OpenTK.Graphics.OpenGL4.GetPName pname, [OutAttribute] out Single data);

        /// <summary>[requires: v1.0]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetFloatv")]
        public static extern unsafe void GetFloat(OpenTK.Graphics.OpenGL4.GetPName pname, [OutAttribute] Single* data);

        /// <summary>[requires: v3.3 and ARB_blend_func_extended|VERSION_3_3]
        /// Query the bindings of color indices to user-defined varying out variables
        /// </summary>
        /// <param name="program">
        /// <para>
        /// The name of the program containing varying out variable whose binding to query
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// The name of the user-defined varying out variable whose index to query
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_blend_func_extended|VERSION_3_3", Version = "3.3", EntryPoint = "glGetFragDataIndex")]
        public static extern Int32 GetFragDataIndex(Int32 program, String name);

        /// <summary>[requires: v3.3 and ARB_blend_func_extended|VERSION_3_3]
        /// Query the bindings of color indices to user-defined varying out variables
        /// </summary>
        /// <param name="program">
        /// <para>
        /// The name of the program containing varying out variable whose binding to query
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// The name of the user-defined varying out variable whose index to query
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_blend_func_extended|VERSION_3_3", Version = "3.3", EntryPoint = "glGetFragDataIndex")]
        public static extern Int32 GetFragDataIndex(UInt32 program, String name);

        /// <summary>[requires: v3.0]
        /// Query the bindings of color numbers to user-defined varying out variables
        /// </summary>
        /// <param name="program">
        /// <para>
        /// The name of the program containing varying out variable whose binding to query
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// The name of the user-defined varying out variable whose binding to query
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetFragDataLocation")]
        public static extern Int32 GetFragDataLocation(Int32 program, String name);

        /// <summary>[requires: v3.0]
        /// Query the bindings of color numbers to user-defined varying out variables
        /// </summary>
        /// <param name="program">
        /// <para>
        /// The name of the program containing varying out variable whose binding to query
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// The name of the user-defined varying out variable whose binding to query
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetFragDataLocation")]
        public static extern Int32 GetFragDataLocation(UInt32 program, String name);

        /// <summary>[requires: v3.0 and ARB_framebuffer_object|VERSION_3_0]
        /// Retrieve information about attachments of a bound framebuffer object
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target of the query operation.
        /// </para>
        /// </param>
        /// <param name="attachment">
        /// <para>
        /// Specifies the attachment within target
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the parameter of attachment to query.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Specifies the address of a variable receive the value of pname for attachment.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glGetFramebufferAttachmentParameteriv")]
        public static extern void GetFramebufferAttachmentParameter(OpenTK.Graphics.OpenGL4.FramebufferTarget target, OpenTK.Graphics.OpenGL4.FramebufferAttachment attachment, OpenTK.Graphics.OpenGL4.FramebufferParameterName pname, [OutAttribute] Int32[] @params);

        /// <summary>[requires: v3.0 and ARB_framebuffer_object|VERSION_3_0]
        /// Retrieve information about attachments of a bound framebuffer object
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target of the query operation.
        /// </para>
        /// </param>
        /// <param name="attachment">
        /// <para>
        /// Specifies the attachment within target
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the parameter of attachment to query.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Specifies the address of a variable receive the value of pname for attachment.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glGetFramebufferAttachmentParameteriv")]
        public static extern void GetFramebufferAttachmentParameter(OpenTK.Graphics.OpenGL4.FramebufferTarget target, OpenTK.Graphics.OpenGL4.FramebufferAttachment attachment, OpenTK.Graphics.OpenGL4.FramebufferParameterName pname, [OutAttribute] out Int32 @params);

        /// <summary>[requires: v3.0 and ARB_framebuffer_object|VERSION_3_0]
        /// Retrieve information about attachments of a bound framebuffer object
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target of the query operation.
        /// </para>
        /// </param>
        /// <param name="attachment">
        /// <para>
        /// Specifies the attachment within target
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the parameter of attachment to query.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Specifies the address of a variable receive the value of pname for attachment.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glGetFramebufferAttachmentParameteriv")]
        public static extern unsafe void GetFramebufferAttachmentParameter(OpenTK.Graphics.OpenGL4.FramebufferTarget target, OpenTK.Graphics.OpenGL4.FramebufferAttachment attachment, OpenTK.Graphics.OpenGL4.FramebufferParameterName pname, [OutAttribute] Int32* @params);

        /// <summary>[requires: v4.3 and ARB_framebuffer_no_attachments|VERSION_4_3]
        /// Retrieve a named parameter from a framebuffer
        /// </summary>
        /// <param name="target">
        /// <para>
        /// The target of the operation, which must be GL_READ_FRAMEBUFFER, GL_DRAW_FRAMEBUFFER or GL_FRAMEBUFFER.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// A token indicating the parameter to be retrieved.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// The address of a variable to receive the value of the parameter named pname.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_framebuffer_no_attachments|VERSION_4_3", Version = "4.3", EntryPoint = "glGetFramebufferParameteriv")]
        public static extern void GetFramebufferParameter(OpenTK.Graphics.OpenGL4.FramebufferTarget target, OpenTK.Graphics.OpenGL4.FramebufferDefaultParameter pname, [OutAttribute] Int32[] @params);

        /// <summary>[requires: v4.3 and ARB_framebuffer_no_attachments|VERSION_4_3]
        /// Retrieve a named parameter from a framebuffer
        /// </summary>
        /// <param name="target">
        /// <para>
        /// The target of the operation, which must be GL_READ_FRAMEBUFFER, GL_DRAW_FRAMEBUFFER or GL_FRAMEBUFFER.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// A token indicating the parameter to be retrieved.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// The address of a variable to receive the value of the parameter named pname.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_framebuffer_no_attachments|VERSION_4_3", Version = "4.3", EntryPoint = "glGetFramebufferParameteriv")]
        public static extern void GetFramebufferParameter(OpenTK.Graphics.OpenGL4.FramebufferTarget target, OpenTK.Graphics.OpenGL4.FramebufferDefaultParameter pname, [OutAttribute] out Int32 @params);

        /// <summary>[requires: v4.3 and ARB_framebuffer_no_attachments|VERSION_4_3]
        /// Retrieve a named parameter from a framebuffer
        /// </summary>
        /// <param name="target">
        /// <para>
        /// The target of the operation, which must be GL_READ_FRAMEBUFFER, GL_DRAW_FRAMEBUFFER or GL_FRAMEBUFFER.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// A token indicating the parameter to be retrieved.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// The address of a variable to receive the value of the parameter named pname.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_framebuffer_no_attachments|VERSION_4_3", Version = "4.3", EntryPoint = "glGetFramebufferParameteriv")]
        public static extern unsafe void GetFramebufferParameter(OpenTK.Graphics.OpenGL4.FramebufferTarget target, OpenTK.Graphics.OpenGL4.FramebufferDefaultParameter pname, [OutAttribute] Int32* @params);

        /// <summary>
        /// Get histogram table
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Must be GL_HISTOGRAM.
        /// </para>
        /// </param>
        /// <param name="reset">
        /// <para>
        /// If GL_TRUE, each component counter that is actually returned is reset to zero. (Other counters are unaffected.) If GL_FALSE, none of the counters in the histogram table is modified.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// The format of values to be returned in values. Must be one of GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, or GL_LUMINANCE_ALPHA.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// The type of values to be returned in values. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
        /// </para>
        /// </param>
        /// <param name="values">
        /// <para>
        /// A pointer to storage for the returned histogram table.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetHistogram")]
        public static extern void GetHistogram(OpenTK.Graphics.OpenGL4.HistogramTarget target, bool reset, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [OutAttribute] IntPtr values);

        /// <summary>
        /// Get histogram table
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Must be GL_HISTOGRAM.
        /// </para>
        /// </param>
        /// <param name="reset">
        /// <para>
        /// If GL_TRUE, each component counter that is actually returned is reset to zero. (Other counters are unaffected.) If GL_FALSE, none of the counters in the histogram table is modified.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// The format of values to be returned in values. Must be one of GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, or GL_LUMINANCE_ALPHA.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// The type of values to be returned in values. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
        /// </para>
        /// </param>
        /// <param name="values">
        /// <para>
        /// A pointer to storage for the returned histogram table.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetHistogram")]
        public static extern void GetHistogram<T4>(OpenTK.Graphics.OpenGL4.HistogramTarget target, bool reset, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute] T4[] values)
            where T4 : struct
        ;

        /// <summary>
        /// Get histogram table
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Must be GL_HISTOGRAM.
        /// </para>
        /// </param>
        /// <param name="reset">
        /// <para>
        /// If GL_TRUE, each component counter that is actually returned is reset to zero. (Other counters are unaffected.) If GL_FALSE, none of the counters in the histogram table is modified.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// The format of values to be returned in values. Must be one of GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, or GL_LUMINANCE_ALPHA.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// The type of values to be returned in values. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
        /// </para>
        /// </param>
        /// <param name="values">
        /// <para>
        /// A pointer to storage for the returned histogram table.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetHistogram")]
        public static extern void GetHistogram<T4>(OpenTK.Graphics.OpenGL4.HistogramTarget target, bool reset, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute] T4[,] values)
            where T4 : struct
        ;

        /// <summary>
        /// Get histogram table
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Must be GL_HISTOGRAM.
        /// </para>
        /// </param>
        /// <param name="reset">
        /// <para>
        /// If GL_TRUE, each component counter that is actually returned is reset to zero. (Other counters are unaffected.) If GL_FALSE, none of the counters in the histogram table is modified.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// The format of values to be returned in values. Must be one of GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, or GL_LUMINANCE_ALPHA.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// The type of values to be returned in values. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
        /// </para>
        /// </param>
        /// <param name="values">
        /// <para>
        /// A pointer to storage for the returned histogram table.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetHistogram")]
        public static extern void GetHistogram<T4>(OpenTK.Graphics.OpenGL4.HistogramTarget target, bool reset, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute] T4[,,] values)
            where T4 : struct
        ;

        /// <summary>
        /// Get histogram table
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Must be GL_HISTOGRAM.
        /// </para>
        /// </param>
        /// <param name="reset">
        /// <para>
        /// If GL_TRUE, each component counter that is actually returned is reset to zero. (Other counters are unaffected.) If GL_FALSE, none of the counters in the histogram table is modified.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// The format of values to be returned in values. Must be one of GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, or GL_LUMINANCE_ALPHA.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// The type of values to be returned in values. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
        /// </para>
        /// </param>
        /// <param name="values">
        /// <para>
        /// A pointer to storage for the returned histogram table.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetHistogram")]
        public static extern void GetHistogram<T4>(OpenTK.Graphics.OpenGL4.HistogramTarget target, bool reset, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute] ref T4 values)
            where T4 : struct
        ;

        /// <summary>
        /// Get histogram parameters
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Must be one of GL_HISTOGRAM or GL_PROXY_HISTOGRAM.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// The name of the parameter to be retrieved. Must be one of GL_HISTOGRAM_WIDTH, GL_HISTOGRAM_FORMAT, GL_HISTOGRAM_RED_SIZE, GL_HISTOGRAM_GREEN_SIZE, GL_HISTOGRAM_BLUE_SIZE, GL_HISTOGRAM_ALPHA_SIZE, GL_HISTOGRAM_LUMINANCE_SIZE, or GL_HISTOGRAM_SINK.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Pointer to storage for the returned values.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetHistogramParameterfv")]
        public static extern void GetHistogramParameter(OpenTK.Graphics.OpenGL4.HistogramTarget target, OpenTK.Graphics.OpenGL4.GetHistogramParameterPName pname, [OutAttribute] Single[] @params);

        /// <summary>
        /// Get histogram parameters
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Must be one of GL_HISTOGRAM or GL_PROXY_HISTOGRAM.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// The name of the parameter to be retrieved. Must be one of GL_HISTOGRAM_WIDTH, GL_HISTOGRAM_FORMAT, GL_HISTOGRAM_RED_SIZE, GL_HISTOGRAM_GREEN_SIZE, GL_HISTOGRAM_BLUE_SIZE, GL_HISTOGRAM_ALPHA_SIZE, GL_HISTOGRAM_LUMINANCE_SIZE, or GL_HISTOGRAM_SINK.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Pointer to storage for the returned values.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetHistogramParameterfv")]
        public static extern void GetHistogramParameter(OpenTK.Graphics.OpenGL4.HistogramTarget target, OpenTK.Graphics.OpenGL4.GetHistogramParameterPName pname, [OutAttribute] out Single @params);

        /// <summary>
        /// Get histogram parameters
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Must be one of GL_HISTOGRAM or GL_PROXY_HISTOGRAM.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// The name of the parameter to be retrieved. Must be one of GL_HISTOGRAM_WIDTH, GL_HISTOGRAM_FORMAT, GL_HISTOGRAM_RED_SIZE, GL_HISTOGRAM_GREEN_SIZE, GL_HISTOGRAM_BLUE_SIZE, GL_HISTOGRAM_ALPHA_SIZE, GL_HISTOGRAM_LUMINANCE_SIZE, or GL_HISTOGRAM_SINK.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Pointer to storage for the returned values.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetHistogramParameterfv")]
        public static extern unsafe void GetHistogramParameter(OpenTK.Graphics.OpenGL4.HistogramTarget target, OpenTK.Graphics.OpenGL4.GetHistogramParameterPName pname, [OutAttribute] Single* @params);

        /// <summary>
        /// Get histogram parameters
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Must be one of GL_HISTOGRAM or GL_PROXY_HISTOGRAM.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// The name of the parameter to be retrieved. Must be one of GL_HISTOGRAM_WIDTH, GL_HISTOGRAM_FORMAT, GL_HISTOGRAM_RED_SIZE, GL_HISTOGRAM_GREEN_SIZE, GL_HISTOGRAM_BLUE_SIZE, GL_HISTOGRAM_ALPHA_SIZE, GL_HISTOGRAM_LUMINANCE_SIZE, or GL_HISTOGRAM_SINK.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Pointer to storage for the returned values.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetHistogramParameteriv")]
        public static extern void GetHistogramParameter(OpenTK.Graphics.OpenGL4.HistogramTarget target, OpenTK.Graphics.OpenGL4.GetHistogramParameterPName pname, [OutAttribute] Int32[] @params);

        /// <summary>
        /// Get histogram parameters
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Must be one of GL_HISTOGRAM or GL_PROXY_HISTOGRAM.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// The name of the parameter to be retrieved. Must be one of GL_HISTOGRAM_WIDTH, GL_HISTOGRAM_FORMAT, GL_HISTOGRAM_RED_SIZE, GL_HISTOGRAM_GREEN_SIZE, GL_HISTOGRAM_BLUE_SIZE, GL_HISTOGRAM_ALPHA_SIZE, GL_HISTOGRAM_LUMINANCE_SIZE, or GL_HISTOGRAM_SINK.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Pointer to storage for the returned values.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetHistogramParameteriv")]
        public static extern void GetHistogramParameter(OpenTK.Graphics.OpenGL4.HistogramTarget target, OpenTK.Graphics.OpenGL4.GetHistogramParameterPName pname, [OutAttribute] out Int32 @params);

        /// <summary>
        /// Get histogram parameters
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Must be one of GL_HISTOGRAM or GL_PROXY_HISTOGRAM.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// The name of the parameter to be retrieved. Must be one of GL_HISTOGRAM_WIDTH, GL_HISTOGRAM_FORMAT, GL_HISTOGRAM_RED_SIZE, GL_HISTOGRAM_GREEN_SIZE, GL_HISTOGRAM_BLUE_SIZE, GL_HISTOGRAM_ALPHA_SIZE, GL_HISTOGRAM_LUMINANCE_SIZE, or GL_HISTOGRAM_SINK.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Pointer to storage for the returned values.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetHistogramParameteriv")]
        public static extern unsafe void GetHistogramParameter(OpenTK.Graphics.OpenGL4.HistogramTarget target, OpenTK.Graphics.OpenGL4.GetHistogramParameterPName pname, [OutAttribute] Int32* @params);

        /// <summary>[requires: v3.2]</summary>
        [AutoGenerated(Category = "VERSION_3_2", Version = "3.2", EntryPoint = "glGetInteger64i_v")]
        public static extern void GetInteger64(OpenTK.Graphics.OpenGL4.GetIndexedPName target, Int32 index, [OutAttribute] Int64[] data);

        /// <summary>[requires: v3.2]</summary>
        [AutoGenerated(Category = "VERSION_3_2", Version = "3.2", EntryPoint = "glGetInteger64i_v")]
        public static extern void GetInteger64(OpenTK.Graphics.OpenGL4.GetIndexedPName target, Int32 index, [OutAttribute] out Int64 data);

        /// <summary>[requires: v3.2]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_2", Version = "3.2", EntryPoint = "glGetInteger64i_v")]
        public static extern unsafe void GetInteger64(OpenTK.Graphics.OpenGL4.GetIndexedPName target, Int32 index, [OutAttribute] Int64* data);

        /// <summary>[requires: v3.2]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_2", Version = "3.2", EntryPoint = "glGetInteger64i_v")]
        public static extern void GetInteger64(OpenTK.Graphics.OpenGL4.GetIndexedPName target, UInt32 index, [OutAttribute] Int64[] data);

        /// <summary>[requires: v3.2]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_2", Version = "3.2", EntryPoint = "glGetInteger64i_v")]
        public static extern void GetInteger64(OpenTK.Graphics.OpenGL4.GetIndexedPName target, UInt32 index, [OutAttribute] out Int64 data);

        /// <summary>[requires: v3.2]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_2", Version = "3.2", EntryPoint = "glGetInteger64i_v")]
        public static extern unsafe void GetInteger64(OpenTK.Graphics.OpenGL4.GetIndexedPName target, UInt32 index, [OutAttribute] Int64* data);

        /// <summary>[requires: v3.2 and ARB_sync|VERSION_3_2]</summary>
        [AutoGenerated(Category = "ARB_sync|VERSION_3_2", Version = "3.2", EntryPoint = "glGetInteger64v")]
        public static extern Int64 GetInteger64(OpenTK.Graphics.OpenGL4.GetPName pname);

        /// <summary>[requires: v3.2 and ARB_sync|VERSION_3_2]</summary>
        [AutoGenerated(Category = "ARB_sync|VERSION_3_2", Version = "3.2", EntryPoint = "glGetInteger64v")]
        public static extern void GetInteger64(OpenTK.Graphics.OpenGL4.GetPName pname, [OutAttribute] Int64[] data);

        /// <summary>[requires: v3.2 and ARB_sync|VERSION_3_2]</summary>
        [AutoGenerated(Category = "ARB_sync|VERSION_3_2", Version = "3.2", EntryPoint = "glGetInteger64v")]
        public static extern void GetInteger64(OpenTK.Graphics.OpenGL4.GetPName pname, [OutAttribute] out Int64 data);

        /// <summary>[requires: v3.2 and ARB_sync|VERSION_3_2]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_sync|VERSION_3_2", Version = "3.2", EntryPoint = "glGetInteger64v")]
        public static extern unsafe void GetInteger64(OpenTK.Graphics.OpenGL4.GetPName pname, [OutAttribute] Int64* data);

        /// <summary>[requires: v3.0]</summary>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetIntegeri_v")]
        public static extern void GetInteger(OpenTK.Graphics.OpenGL4.GetIndexedPName target, Int32 index, [OutAttribute] Int32[] data);

        /// <summary>[requires: v3.0]</summary>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetIntegeri_v")]
        public static extern void GetInteger(OpenTK.Graphics.OpenGL4.GetIndexedPName target, Int32 index, [OutAttribute] out Int32 data);

        /// <summary>[requires: v3.0]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetIntegeri_v")]
        public static extern unsafe void GetInteger(OpenTK.Graphics.OpenGL4.GetIndexedPName target, Int32 index, [OutAttribute] Int32* data);

        /// <summary>[requires: v3.0]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetIntegeri_v")]
        public static extern void GetInteger(OpenTK.Graphics.OpenGL4.GetIndexedPName target, UInt32 index, [OutAttribute] Int32[] data);

        /// <summary>[requires: v3.0]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetIntegeri_v")]
        public static extern void GetInteger(OpenTK.Graphics.OpenGL4.GetIndexedPName target, UInt32 index, [OutAttribute] out Int32 data);

        /// <summary>[requires: v3.0]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetIntegeri_v")]
        public static extern unsafe void GetInteger(OpenTK.Graphics.OpenGL4.GetIndexedPName target, UInt32 index, [OutAttribute] Int32* data);

        /// <summary>[requires: v1.0]</summary>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetIntegerv")]
        public static extern Int32 GetInteger(OpenTK.Graphics.OpenGL4.GetPName pname);

        /// <summary>[requires: v1.0]</summary>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetIntegerv")]
        public static extern void GetInteger(OpenTK.Graphics.OpenGL4.GetPName pname, [OutAttribute] Int32[] data);

        /// <summary>[requires: v1.0]</summary>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetIntegerv")]
        public static extern void GetInteger(OpenTK.Graphics.OpenGL4.GetPName pname, [OutAttribute] out Int32 data);

        /// <summary>[requires: v1.0]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetIntegerv")]
        public static extern unsafe void GetInteger(OpenTK.Graphics.OpenGL4.GetPName pname, [OutAttribute] Int32* data);

        /// <summary>[requires: v4.3 and ARB_internalformat_query2|VERSION_4_3]</summary>
        [AutoGenerated(Category = "ARB_internalformat_query2|VERSION_4_3", Version = "4.3", EntryPoint = "glGetInternalformati64v")]
        public static extern void GetInternalformat(OpenTK.Graphics.OpenGL4.ImageTarget target, OpenTK.Graphics.OpenGL4.SizedInternalFormat internalformat, OpenTK.Graphics.OpenGL4.InternalFormatParameter pname, Int32 bufSize, [OutAttribute] Int64[] @params);

        /// <summary>[requires: v4.3 and ARB_internalformat_query2|VERSION_4_3]</summary>
        [AutoGenerated(Category = "ARB_internalformat_query2|VERSION_4_3", Version = "4.3", EntryPoint = "glGetInternalformati64v")]
        public static extern void GetInternalformat(OpenTK.Graphics.OpenGL4.ImageTarget target, OpenTK.Graphics.OpenGL4.SizedInternalFormat internalformat, OpenTK.Graphics.OpenGL4.InternalFormatParameter pname, Int32 bufSize, [OutAttribute] out Int64 @params);

        /// <summary>[requires: v4.3 and ARB_internalformat_query2|VERSION_4_3]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_internalformat_query2|VERSION_4_3", Version = "4.3", EntryPoint = "glGetInternalformati64v")]
        public static extern unsafe void GetInternalformat(OpenTK.Graphics.OpenGL4.ImageTarget target, OpenTK.Graphics.OpenGL4.SizedInternalFormat internalformat, OpenTK.Graphics.OpenGL4.InternalFormatParameter pname, Int32 bufSize, [OutAttribute] Int64* @params);

        /// <summary>[requires: v4.2 and ARB_internalformat_query|VERSION_4_2]
        /// Retrieve information about implementation-dependent support for internal formats
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Indicates the usage of the internal format. target must be GL_TEXTURE_1D, GL_TEXTURE_1D_ARRAY, GL_TEXTURE_2D, GL_TEXTURE_2D_ARRAY, GL_TEXTURE_3D, GL_TEXTURE_CUBE_MAP, GL_TEXTURE_CUBE_MAP_ARRAY, GL_TEXTURE_RECTANGLE, GL_TEXTURE_BUFFER, GL_RENDERBUFFER, GL_TEXTURE_2D_MULTISAMPLE or GL_TEXTURE_2D_MULTISAMPLE_ARRAY.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// Specifies the internal format about which to retrieve information.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the type of information to query.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the maximum number of basic machine units that may be written to params by the function.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Specifies the address of a variable into which to write the retrieved information.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_internalformat_query|VERSION_4_2", Version = "4.2", EntryPoint = "glGetInternalformativ")]
        public static extern void GetInternalformat(OpenTK.Graphics.OpenGL4.ImageTarget target, OpenTK.Graphics.OpenGL4.SizedInternalFormat internalformat, OpenTK.Graphics.OpenGL4.InternalFormatParameter pname, Int32 bufSize, [OutAttribute] Int32[] @params);

        /// <summary>[requires: v4.2 and ARB_internalformat_query|VERSION_4_2]
        /// Retrieve information about implementation-dependent support for internal formats
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Indicates the usage of the internal format. target must be GL_TEXTURE_1D, GL_TEXTURE_1D_ARRAY, GL_TEXTURE_2D, GL_TEXTURE_2D_ARRAY, GL_TEXTURE_3D, GL_TEXTURE_CUBE_MAP, GL_TEXTURE_CUBE_MAP_ARRAY, GL_TEXTURE_RECTANGLE, GL_TEXTURE_BUFFER, GL_RENDERBUFFER, GL_TEXTURE_2D_MULTISAMPLE or GL_TEXTURE_2D_MULTISAMPLE_ARRAY.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// Specifies the internal format about which to retrieve information.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the type of information to query.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the maximum number of basic machine units that may be written to params by the function.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Specifies the address of a variable into which to write the retrieved information.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_internalformat_query|VERSION_4_2", Version = "4.2", EntryPoint = "glGetInternalformativ")]
        public static extern void GetInternalformat(OpenTK.Graphics.OpenGL4.ImageTarget target, OpenTK.Graphics.OpenGL4.SizedInternalFormat internalformat, OpenTK.Graphics.OpenGL4.InternalFormatParameter pname, Int32 bufSize, [OutAttribute] out Int32 @params);

        /// <summary>[requires: v4.2 and ARB_internalformat_query|VERSION_4_2]
        /// Retrieve information about implementation-dependent support for internal formats
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Indicates the usage of the internal format. target must be GL_TEXTURE_1D, GL_TEXTURE_1D_ARRAY, GL_TEXTURE_2D, GL_TEXTURE_2D_ARRAY, GL_TEXTURE_3D, GL_TEXTURE_CUBE_MAP, GL_TEXTURE_CUBE_MAP_ARRAY, GL_TEXTURE_RECTANGLE, GL_TEXTURE_BUFFER, GL_RENDERBUFFER, GL_TEXTURE_2D_MULTISAMPLE or GL_TEXTURE_2D_MULTISAMPLE_ARRAY.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// Specifies the internal format about which to retrieve information.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the type of information to query.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the maximum number of basic machine units that may be written to params by the function.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Specifies the address of a variable into which to write the retrieved information.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_internalformat_query|VERSION_4_2", Version = "4.2", EntryPoint = "glGetInternalformativ")]
        public static extern unsafe void GetInternalformat(OpenTK.Graphics.OpenGL4.ImageTarget target, OpenTK.Graphics.OpenGL4.SizedInternalFormat internalformat, OpenTK.Graphics.OpenGL4.InternalFormatParameter pname, Int32 bufSize, [OutAttribute] Int32* @params);

        /// <summary>
        /// Get minimum and maximum pixel values
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Must be GL_MINMAX.
        /// </para>
        /// </param>
        /// <param name="reset">
        /// <para>
        /// If GL_TRUE, all entries in the minmax table that are actually returned are reset to their initial values. (Other entries are unaltered.) If GL_FALSE, the minmax table is unaltered.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// The format of the data to be returned in values. Must be one of GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, or GL_LUMINANCE_ALPHA.
        /// </para>
        /// </param>
        /// <param name="types">
        /// <para>
        /// The type of the data to be returned in values. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
        /// </para>
        /// </param>
        /// <param name="values">
        /// <para>
        /// A pointer to storage for the returned values.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetMinmax")]
        public static extern void GetMinmax(OpenTK.Graphics.OpenGL4.MinmaxTarget target, bool reset, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [OutAttribute] IntPtr values);

        /// <summary>
        /// Get minimum and maximum pixel values
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Must be GL_MINMAX.
        /// </para>
        /// </param>
        /// <param name="reset">
        /// <para>
        /// If GL_TRUE, all entries in the minmax table that are actually returned are reset to their initial values. (Other entries are unaltered.) If GL_FALSE, the minmax table is unaltered.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// The format of the data to be returned in values. Must be one of GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, or GL_LUMINANCE_ALPHA.
        /// </para>
        /// </param>
        /// <param name="types">
        /// <para>
        /// The type of the data to be returned in values. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
        /// </para>
        /// </param>
        /// <param name="values">
        /// <para>
        /// A pointer to storage for the returned values.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetMinmax")]
        public static extern void GetMinmax<T4>(OpenTK.Graphics.OpenGL4.MinmaxTarget target, bool reset, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute] T4[] values)
            where T4 : struct
        ;

        /// <summary>
        /// Get minimum and maximum pixel values
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Must be GL_MINMAX.
        /// </para>
        /// </param>
        /// <param name="reset">
        /// <para>
        /// If GL_TRUE, all entries in the minmax table that are actually returned are reset to their initial values. (Other entries are unaltered.) If GL_FALSE, the minmax table is unaltered.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// The format of the data to be returned in values. Must be one of GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, or GL_LUMINANCE_ALPHA.
        /// </para>
        /// </param>
        /// <param name="types">
        /// <para>
        /// The type of the data to be returned in values. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
        /// </para>
        /// </param>
        /// <param name="values">
        /// <para>
        /// A pointer to storage for the returned values.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetMinmax")]
        public static extern void GetMinmax<T4>(OpenTK.Graphics.OpenGL4.MinmaxTarget target, bool reset, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute] T4[,] values)
            where T4 : struct
        ;

        /// <summary>
        /// Get minimum and maximum pixel values
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Must be GL_MINMAX.
        /// </para>
        /// </param>
        /// <param name="reset">
        /// <para>
        /// If GL_TRUE, all entries in the minmax table that are actually returned are reset to their initial values. (Other entries are unaltered.) If GL_FALSE, the minmax table is unaltered.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// The format of the data to be returned in values. Must be one of GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, or GL_LUMINANCE_ALPHA.
        /// </para>
        /// </param>
        /// <param name="types">
        /// <para>
        /// The type of the data to be returned in values. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
        /// </para>
        /// </param>
        /// <param name="values">
        /// <para>
        /// A pointer to storage for the returned values.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetMinmax")]
        public static extern void GetMinmax<T4>(OpenTK.Graphics.OpenGL4.MinmaxTarget target, bool reset, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute] T4[,,] values)
            where T4 : struct
        ;

        /// <summary>
        /// Get minimum and maximum pixel values
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Must be GL_MINMAX.
        /// </para>
        /// </param>
        /// <param name="reset">
        /// <para>
        /// If GL_TRUE, all entries in the minmax table that are actually returned are reset to their initial values. (Other entries are unaltered.) If GL_FALSE, the minmax table is unaltered.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// The format of the data to be returned in values. Must be one of GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, or GL_LUMINANCE_ALPHA.
        /// </para>
        /// </param>
        /// <param name="types">
        /// <para>
        /// The type of the data to be returned in values. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
        /// </para>
        /// </param>
        /// <param name="values">
        /// <para>
        /// A pointer to storage for the returned values.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetMinmax")]
        public static extern void GetMinmax<T4>(OpenTK.Graphics.OpenGL4.MinmaxTarget target, bool reset, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute] ref T4 values)
            where T4 : struct
        ;

        /// <summary>
        /// Get minmax parameters
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Must be GL_MINMAX.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// The parameter to be retrieved. Must be one of GL_MINMAX_FORMAT or GL_MINMAX_SINK.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// A pointer to storage for the retrieved parameters.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetMinmaxParameterfv")]
        public static extern void GetMinmaxParameter(OpenTK.Graphics.OpenGL4.MinmaxTarget target, OpenTK.Graphics.OpenGL4.GetMinmaxParameterPName pname, [OutAttribute] Single[] @params);

        /// <summary>
        /// Get minmax parameters
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Must be GL_MINMAX.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// The parameter to be retrieved. Must be one of GL_MINMAX_FORMAT or GL_MINMAX_SINK.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// A pointer to storage for the retrieved parameters.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetMinmaxParameterfv")]
        public static extern void GetMinmaxParameter(OpenTK.Graphics.OpenGL4.MinmaxTarget target, OpenTK.Graphics.OpenGL4.GetMinmaxParameterPName pname, [OutAttribute] out Single @params);

        /// <summary>
        /// Get minmax parameters
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Must be GL_MINMAX.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// The parameter to be retrieved. Must be one of GL_MINMAX_FORMAT or GL_MINMAX_SINK.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// A pointer to storage for the retrieved parameters.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetMinmaxParameterfv")]
        public static extern unsafe void GetMinmaxParameter(OpenTK.Graphics.OpenGL4.MinmaxTarget target, OpenTK.Graphics.OpenGL4.GetMinmaxParameterPName pname, [OutAttribute] Single* @params);

        /// <summary>
        /// Get minmax parameters
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Must be GL_MINMAX.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// The parameter to be retrieved. Must be one of GL_MINMAX_FORMAT or GL_MINMAX_SINK.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// A pointer to storage for the retrieved parameters.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetMinmaxParameteriv")]
        public static extern void GetMinmaxParameter(OpenTK.Graphics.OpenGL4.MinmaxTarget target, OpenTK.Graphics.OpenGL4.GetMinmaxParameterPName pname, [OutAttribute] Int32[] @params);

        /// <summary>
        /// Get minmax parameters
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Must be GL_MINMAX.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// The parameter to be retrieved. Must be one of GL_MINMAX_FORMAT or GL_MINMAX_SINK.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// A pointer to storage for the retrieved parameters.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetMinmaxParameteriv")]
        public static extern void GetMinmaxParameter(OpenTK.Graphics.OpenGL4.MinmaxTarget target, OpenTK.Graphics.OpenGL4.GetMinmaxParameterPName pname, [OutAttribute] out Int32 @params);

        /// <summary>
        /// Get minmax parameters
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Must be GL_MINMAX.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// The parameter to be retrieved. Must be one of GL_MINMAX_FORMAT or GL_MINMAX_SINK.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// A pointer to storage for the retrieved parameters.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetMinmaxParameteriv")]
        public static extern unsafe void GetMinmaxParameter(OpenTK.Graphics.OpenGL4.MinmaxTarget target, OpenTK.Graphics.OpenGL4.GetMinmaxParameterPName pname, [OutAttribute] Int32* @params);

        /// <summary>[requires: v3.2 and ARB_texture_multisample|VERSION_3_2]
        /// Retrieve the location of a sample
        /// </summary>
        /// <param name="pname">
        /// <para>
        /// Specifies the sample parameter name. pname must be GL_SAMPLE_POSITION.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the sample whose position to query.
        /// </para>
        /// </param>
        /// <param name="val">
        /// <para>
        /// Specifies the address of an array to receive the position of the sample.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_texture_multisample|VERSION_3_2", Version = "3.2", EntryPoint = "glGetMultisamplefv")]
        public static extern void GetMultisample(OpenTK.Graphics.OpenGL4.GetMultisamplePName pname, Int32 index, [OutAttribute] Single[] val);

        /// <summary>[requires: v3.2 and ARB_texture_multisample|VERSION_3_2]
        /// Retrieve the location of a sample
        /// </summary>
        /// <param name="pname">
        /// <para>
        /// Specifies the sample parameter name. pname must be GL_SAMPLE_POSITION.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the sample whose position to query.
        /// </para>
        /// </param>
        /// <param name="val">
        /// <para>
        /// Specifies the address of an array to receive the position of the sample.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_texture_multisample|VERSION_3_2", Version = "3.2", EntryPoint = "glGetMultisamplefv")]
        public static extern void GetMultisample(OpenTK.Graphics.OpenGL4.GetMultisamplePName pname, Int32 index, [OutAttribute] out Single val);

        /// <summary>[requires: v3.2 and ARB_texture_multisample|VERSION_3_2]
        /// Retrieve the location of a sample
        /// </summary>
        /// <param name="pname">
        /// <para>
        /// Specifies the sample parameter name. pname must be GL_SAMPLE_POSITION.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the sample whose position to query.
        /// </para>
        /// </param>
        /// <param name="val">
        /// <para>
        /// Specifies the address of an array to receive the position of the sample.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_texture_multisample|VERSION_3_2", Version = "3.2", EntryPoint = "glGetMultisamplefv")]
        public static extern unsafe void GetMultisample(OpenTK.Graphics.OpenGL4.GetMultisamplePName pname, Int32 index, [OutAttribute] Single* val);

        /// <summary>[requires: v3.2 and ARB_texture_multisample|VERSION_3_2]
        /// Retrieve the location of a sample
        /// </summary>
        /// <param name="pname">
        /// <para>
        /// Specifies the sample parameter name. pname must be GL_SAMPLE_POSITION.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the sample whose position to query.
        /// </para>
        /// </param>
        /// <param name="val">
        /// <para>
        /// Specifies the address of an array to receive the position of the sample.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_texture_multisample|VERSION_3_2", Version = "3.2", EntryPoint = "glGetMultisamplefv")]
        public static extern void GetMultisample(OpenTK.Graphics.OpenGL4.GetMultisamplePName pname, UInt32 index, [OutAttribute] Single[] val);

        /// <summary>[requires: v3.2 and ARB_texture_multisample|VERSION_3_2]
        /// Retrieve the location of a sample
        /// </summary>
        /// <param name="pname">
        /// <para>
        /// Specifies the sample parameter name. pname must be GL_SAMPLE_POSITION.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the sample whose position to query.
        /// </para>
        /// </param>
        /// <param name="val">
        /// <para>
        /// Specifies the address of an array to receive the position of the sample.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_texture_multisample|VERSION_3_2", Version = "3.2", EntryPoint = "glGetMultisamplefv")]
        public static extern void GetMultisample(OpenTK.Graphics.OpenGL4.GetMultisamplePName pname, UInt32 index, [OutAttribute] out Single val);

        /// <summary>[requires: v3.2 and ARB_texture_multisample|VERSION_3_2]
        /// Retrieve the location of a sample
        /// </summary>
        /// <param name="pname">
        /// <para>
        /// Specifies the sample parameter name. pname must be GL_SAMPLE_POSITION.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the sample whose position to query.
        /// </para>
        /// </param>
        /// <param name="val">
        /// <para>
        /// Specifies the address of an array to receive the position of the sample.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_texture_multisample|VERSION_3_2", Version = "3.2", EntryPoint = "glGetMultisamplefv")]
        public static extern unsafe void GetMultisample(OpenTK.Graphics.OpenGL4.GetMultisamplePName pname, UInt32 index, [OutAttribute] Single* val);

        /// <summary>[requires: v4.3 and KHR_debug|VERSION_4_3]
        /// Retrieve the label of a named object identified within a namespace
        /// </summary>
        /// <param name="identifier">
        /// <para>
        /// The namespace from which the name of the object is allocated.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// The name of the object whose label to retrieve.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// The length of the buffer whose address is in label.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// The address of a variable to receive the length of the object label.
        /// </para>
        /// </param>
        /// <param name="label">
        /// <para>
        /// The address of a string that will receive the object label.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glGetObjectLabel")]
        public static extern void GetObjectLabel(OpenTK.Graphics.OpenGL4.ObjectLabelIdentifier identifier, Int32 name, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute] StringBuilder label);

        /// <summary>[requires: v4.3 and KHR_debug|VERSION_4_3]
        /// Retrieve the label of a named object identified within a namespace
        /// </summary>
        /// <param name="identifier">
        /// <para>
        /// The namespace from which the name of the object is allocated.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// The name of the object whose label to retrieve.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// The length of the buffer whose address is in label.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// The address of a variable to receive the length of the object label.
        /// </para>
        /// </param>
        /// <param name="label">
        /// <para>
        /// The address of a string that will receive the object label.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glGetObjectLabel")]
        public static extern void GetObjectLabel(OpenTK.Graphics.OpenGL4.ObjectLabelIdentifier identifier, Int32 name, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder label);

        /// <summary>[requires: v4.3 and KHR_debug|VERSION_4_3]
        /// Retrieve the label of a named object identified within a namespace
        /// </summary>
        /// <param name="identifier">
        /// <para>
        /// The namespace from which the name of the object is allocated.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// The name of the object whose label to retrieve.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// The length of the buffer whose address is in label.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// The address of a variable to receive the length of the object label.
        /// </para>
        /// </param>
        /// <param name="label">
        /// <para>
        /// The address of a string that will receive the object label.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glGetObjectLabel")]
        public static extern unsafe void GetObjectLabel(OpenTK.Graphics.OpenGL4.ObjectLabelIdentifier identifier, Int32 name, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder label);

        /// <summary>[requires: v4.3 and KHR_debug|VERSION_4_3]
        /// Retrieve the label of a named object identified within a namespace
        /// </summary>
        /// <param name="identifier">
        /// <para>
        /// The namespace from which the name of the object is allocated.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// The name of the object whose label to retrieve.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// The length of the buffer whose address is in label.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// The address of a variable to receive the length of the object label.
        /// </para>
        /// </param>
        /// <param name="label">
        /// <para>
        /// The address of a string that will receive the object label.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glGetObjectLabel")]
        public static extern void GetObjectLabel(OpenTK.Graphics.OpenGL4.ObjectLabelIdentifier identifier, UInt32 name, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute] StringBuilder label);

        /// <summary>[requires: v4.3 and KHR_debug|VERSION_4_3]
        /// Retrieve the label of a named object identified within a namespace
        /// </summary>
        /// <param name="identifier">
        /// <para>
        /// The namespace from which the name of the object is allocated.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// The name of the object whose label to retrieve.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// The length of the buffer whose address is in label.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// The address of a variable to receive the length of the object label.
        /// </para>
        /// </param>
        /// <param name="label">
        /// <para>
        /// The address of a string that will receive the object label.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glGetObjectLabel")]
        public static extern void GetObjectLabel(OpenTK.Graphics.OpenGL4.ObjectLabelIdentifier identifier, UInt32 name, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder label);

        /// <summary>[requires: v4.3 and KHR_debug|VERSION_4_3]
        /// Retrieve the label of a named object identified within a namespace
        /// </summary>
        /// <param name="identifier">
        /// <para>
        /// The namespace from which the name of the object is allocated.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// The name of the object whose label to retrieve.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// The length of the buffer whose address is in label.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// The address of a variable to receive the length of the object label.
        /// </para>
        /// </param>
        /// <param name="label">
        /// <para>
        /// The address of a string that will receive the object label.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glGetObjectLabel")]
        public static extern unsafe void GetObjectLabel(OpenTK.Graphics.OpenGL4.ObjectLabelIdentifier identifier, UInt32 name, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder label);

        /// <summary>[requires: v4.3 and KHR_debug|VERSION_4_3]
        /// Retrieve the label of a sync object identified by a pointer
        /// </summary>
        /// <param name="ptr">
        /// <para>
        /// The name of the sync object whose label to retrieve.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// The length of the buffer whose address is in label.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// The address of a variable to receive the length of the object label.
        /// </para>
        /// </param>
        /// <param name="label">
        /// <para>
        /// The address of a string that will receive the object label.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glGetObjectPtrLabel")]
        public static extern void GetObjectPtrLabel(IntPtr ptr, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute] StringBuilder label);

        /// <summary>[requires: v4.3 and KHR_debug|VERSION_4_3]
        /// Retrieve the label of a sync object identified by a pointer
        /// </summary>
        /// <param name="ptr">
        /// <para>
        /// The name of the sync object whose label to retrieve.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// The length of the buffer whose address is in label.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// The address of a variable to receive the length of the object label.
        /// </para>
        /// </param>
        /// <param name="label">
        /// <para>
        /// The address of a string that will receive the object label.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glGetObjectPtrLabel")]
        public static extern void GetObjectPtrLabel(IntPtr ptr, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder label);

        /// <summary>[requires: v4.3 and KHR_debug|VERSION_4_3]
        /// Retrieve the label of a sync object identified by a pointer
        /// </summary>
        /// <param name="ptr">
        /// <para>
        /// The name of the sync object whose label to retrieve.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// The length of the buffer whose address is in label.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// The address of a variable to receive the length of the object label.
        /// </para>
        /// </param>
        /// <param name="label">
        /// <para>
        /// The address of a string that will receive the object label.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glGetObjectPtrLabel")]
        public static extern unsafe void GetObjectPtrLabel(IntPtr ptr, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder label);

        /// <summary>[requires: v4.3 and KHR_debug|VERSION_4_3]
        /// Retrieve the label of a sync object identified by a pointer
        /// </summary>
        /// <param name="ptr">
        /// <para>
        /// The name of the sync object whose label to retrieve.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// The length of the buffer whose address is in label.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// The address of a variable to receive the length of the object label.
        /// </para>
        /// </param>
        /// <param name="label">
        /// <para>
        /// The address of a string that will receive the object label.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glGetObjectPtrLabel")]
        public static extern void GetObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[] ptr, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute] StringBuilder label)
            where T0 : struct
        ;

        /// <summary>[requires: v4.3 and KHR_debug|VERSION_4_3]
        /// Retrieve the label of a sync object identified by a pointer
        /// </summary>
        /// <param name="ptr">
        /// <para>
        /// The name of the sync object whose label to retrieve.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// The length of the buffer whose address is in label.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// The address of a variable to receive the length of the object label.
        /// </para>
        /// </param>
        /// <param name="label">
        /// <para>
        /// The address of a string that will receive the object label.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glGetObjectPtrLabel")]
        public static extern void GetObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[] ptr, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder label)
            where T0 : struct
        ;

        /// <summary>[requires: v4.3 and KHR_debug|VERSION_4_3]
        /// Retrieve the label of a sync object identified by a pointer
        /// </summary>
        /// <param name="ptr">
        /// <para>
        /// The name of the sync object whose label to retrieve.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// The length of the buffer whose address is in label.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// The address of a variable to receive the length of the object label.
        /// </para>
        /// </param>
        /// <param name="label">
        /// <para>
        /// The address of a string that will receive the object label.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glGetObjectPtrLabel")]
        public static extern unsafe void GetObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[] ptr, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder label)
            where T0 : struct
        ;

        /// <summary>[requires: v4.3 and KHR_debug|VERSION_4_3]
        /// Retrieve the label of a sync object identified by a pointer
        /// </summary>
        /// <param name="ptr">
        /// <para>
        /// The name of the sync object whose label to retrieve.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// The length of the buffer whose address is in label.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// The address of a variable to receive the length of the object label.
        /// </para>
        /// </param>
        /// <param name="label">
        /// <para>
        /// The address of a string that will receive the object label.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glGetObjectPtrLabel")]
        public static extern void GetObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[,] ptr, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute] StringBuilder label)
            where T0 : struct
        ;

        /// <summary>[requires: v4.3 and KHR_debug|VERSION_4_3]
        /// Retrieve the label of a sync object identified by a pointer
        /// </summary>
        /// <param name="ptr">
        /// <para>
        /// The name of the sync object whose label to retrieve.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// The length of the buffer whose address is in label.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// The address of a variable to receive the length of the object label.
        /// </para>
        /// </param>
        /// <param name="label">
        /// <para>
        /// The address of a string that will receive the object label.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glGetObjectPtrLabel")]
        public static extern void GetObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[,] ptr, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder label)
            where T0 : struct
        ;

        /// <summary>[requires: v4.3 and KHR_debug|VERSION_4_3]
        /// Retrieve the label of a sync object identified by a pointer
        /// </summary>
        /// <param name="ptr">
        /// <para>
        /// The name of the sync object whose label to retrieve.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// The length of the buffer whose address is in label.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// The address of a variable to receive the length of the object label.
        /// </para>
        /// </param>
        /// <param name="label">
        /// <para>
        /// The address of a string that will receive the object label.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glGetObjectPtrLabel")]
        public static extern unsafe void GetObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[,] ptr, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder label)
            where T0 : struct
        ;

        /// <summary>[requires: v4.3 and KHR_debug|VERSION_4_3]
        /// Retrieve the label of a sync object identified by a pointer
        /// </summary>
        /// <param name="ptr">
        /// <para>
        /// The name of the sync object whose label to retrieve.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// The length of the buffer whose address is in label.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// The address of a variable to receive the length of the object label.
        /// </para>
        /// </param>
        /// <param name="label">
        /// <para>
        /// The address of a string that will receive the object label.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glGetObjectPtrLabel")]
        public static extern void GetObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[,,] ptr, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute] StringBuilder label)
            where T0 : struct
        ;

        /// <summary>[requires: v4.3 and KHR_debug|VERSION_4_3]
        /// Retrieve the label of a sync object identified by a pointer
        /// </summary>
        /// <param name="ptr">
        /// <para>
        /// The name of the sync object whose label to retrieve.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// The length of the buffer whose address is in label.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// The address of a variable to receive the length of the object label.
        /// </para>
        /// </param>
        /// <param name="label">
        /// <para>
        /// The address of a string that will receive the object label.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glGetObjectPtrLabel")]
        public static extern void GetObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[,,] ptr, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder label)
            where T0 : struct
        ;

        /// <summary>[requires: v4.3 and KHR_debug|VERSION_4_3]
        /// Retrieve the label of a sync object identified by a pointer
        /// </summary>
        /// <param name="ptr">
        /// <para>
        /// The name of the sync object whose label to retrieve.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// The length of the buffer whose address is in label.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// The address of a variable to receive the length of the object label.
        /// </para>
        /// </param>
        /// <param name="label">
        /// <para>
        /// The address of a string that will receive the object label.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glGetObjectPtrLabel")]
        public static extern unsafe void GetObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[,,] ptr, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder label)
            where T0 : struct
        ;

        /// <summary>[requires: v4.3 and KHR_debug|VERSION_4_3]
        /// Retrieve the label of a sync object identified by a pointer
        /// </summary>
        /// <param name="ptr">
        /// <para>
        /// The name of the sync object whose label to retrieve.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// The length of the buffer whose address is in label.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// The address of a variable to receive the length of the object label.
        /// </para>
        /// </param>
        /// <param name="label">
        /// <para>
        /// The address of a string that will receive the object label.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glGetObjectPtrLabel")]
        public static extern void GetObjectPtrLabel<T0>([InAttribute, OutAttribute] ref T0 ptr, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute] StringBuilder label)
            where T0 : struct
        ;

        /// <summary>[requires: v4.3 and KHR_debug|VERSION_4_3]
        /// Retrieve the label of a sync object identified by a pointer
        /// </summary>
        /// <param name="ptr">
        /// <para>
        /// The name of the sync object whose label to retrieve.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// The length of the buffer whose address is in label.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// The address of a variable to receive the length of the object label.
        /// </para>
        /// </param>
        /// <param name="label">
        /// <para>
        /// The address of a string that will receive the object label.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glGetObjectPtrLabel")]
        public static extern void GetObjectPtrLabel<T0>([InAttribute, OutAttribute] ref T0 ptr, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder label)
            where T0 : struct
        ;

        /// <summary>[requires: v4.3 and KHR_debug|VERSION_4_3]
        /// Retrieve the label of a sync object identified by a pointer
        /// </summary>
        /// <param name="ptr">
        /// <para>
        /// The name of the sync object whose label to retrieve.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// The length of the buffer whose address is in label.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// The address of a variable to receive the length of the object label.
        /// </para>
        /// </param>
        /// <param name="label">
        /// <para>
        /// The address of a string that will receive the object label.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glGetObjectPtrLabel")]
        public static extern unsafe void GetObjectPtrLabel<T0>([InAttribute, OutAttribute] ref T0 ptr, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder label)
            where T0 : struct
        ;

        /// <summary>[requires: v4.3 and KHR_debug|VERSION_4_3|VERSION_4_3]
        /// Return the address of the specified pointer
        /// </summary>
        /// <param name="pname">
        /// <para>
        /// Specifies the array or buffer pointer to be returned. Symbolic constants GL_COLOR_ARRAY_POINTER, GL_EDGE_FLAG_ARRAY_POINTER, GL_FOG_COORD_ARRAY_POINTER, GL_FEEDBACK_BUFFER_POINTER, GL_INDEX_ARRAY_POINTER, GL_NORMAL_ARRAY_POINTER, GL_SECONDARY_COLOR_ARRAY_POINTER, GL_SELECTION_BUFFER_POINTER, GL_TEXTURE_COORD_ARRAY_POINTER, or GL_VERTEX_ARRAY_POINTER are accepted.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the pointer value specified by pname.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3|VERSION_4_3", Version = "4.3", EntryPoint = "glGetPointerv")]
        public static extern void GetPointer(OpenTK.Graphics.OpenGL4.GetPointervPName pname, [OutAttribute] IntPtr @params);

        /// <summary>[requires: v4.3 and KHR_debug|VERSION_4_3|VERSION_4_3]
        /// Return the address of the specified pointer
        /// </summary>
        /// <param name="pname">
        /// <para>
        /// Specifies the array or buffer pointer to be returned. Symbolic constants GL_COLOR_ARRAY_POINTER, GL_EDGE_FLAG_ARRAY_POINTER, GL_FOG_COORD_ARRAY_POINTER, GL_FEEDBACK_BUFFER_POINTER, GL_INDEX_ARRAY_POINTER, GL_NORMAL_ARRAY_POINTER, GL_SECONDARY_COLOR_ARRAY_POINTER, GL_SELECTION_BUFFER_POINTER, GL_TEXTURE_COORD_ARRAY_POINTER, or GL_VERTEX_ARRAY_POINTER are accepted.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the pointer value specified by pname.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3|VERSION_4_3", Version = "4.3", EntryPoint = "glGetPointerv")]
        public static extern void GetPointer<T1>(OpenTK.Graphics.OpenGL4.GetPointervPName pname, [InAttribute, OutAttribute] T1[] @params)
            where T1 : struct
        ;

        /// <summary>[requires: v4.3 and KHR_debug|VERSION_4_3|VERSION_4_3]
        /// Return the address of the specified pointer
        /// </summary>
        /// <param name="pname">
        /// <para>
        /// Specifies the array or buffer pointer to be returned. Symbolic constants GL_COLOR_ARRAY_POINTER, GL_EDGE_FLAG_ARRAY_POINTER, GL_FOG_COORD_ARRAY_POINTER, GL_FEEDBACK_BUFFER_POINTER, GL_INDEX_ARRAY_POINTER, GL_NORMAL_ARRAY_POINTER, GL_SECONDARY_COLOR_ARRAY_POINTER, GL_SELECTION_BUFFER_POINTER, GL_TEXTURE_COORD_ARRAY_POINTER, or GL_VERTEX_ARRAY_POINTER are accepted.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the pointer value specified by pname.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3|VERSION_4_3", Version = "4.3", EntryPoint = "glGetPointerv")]
        public static extern void GetPointer<T1>(OpenTK.Graphics.OpenGL4.GetPointervPName pname, [InAttribute, OutAttribute] T1[,] @params)
            where T1 : struct
        ;

        /// <summary>[requires: v4.3 and KHR_debug|VERSION_4_3|VERSION_4_3]
        /// Return the address of the specified pointer
        /// </summary>
        /// <param name="pname">
        /// <para>
        /// Specifies the array or buffer pointer to be returned. Symbolic constants GL_COLOR_ARRAY_POINTER, GL_EDGE_FLAG_ARRAY_POINTER, GL_FOG_COORD_ARRAY_POINTER, GL_FEEDBACK_BUFFER_POINTER, GL_INDEX_ARRAY_POINTER, GL_NORMAL_ARRAY_POINTER, GL_SECONDARY_COLOR_ARRAY_POINTER, GL_SELECTION_BUFFER_POINTER, GL_TEXTURE_COORD_ARRAY_POINTER, or GL_VERTEX_ARRAY_POINTER are accepted.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the pointer value specified by pname.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3|VERSION_4_3", Version = "4.3", EntryPoint = "glGetPointerv")]
        public static extern void GetPointer<T1>(OpenTK.Graphics.OpenGL4.GetPointervPName pname, [InAttribute, OutAttribute] T1[,,] @params)
            where T1 : struct
        ;

        /// <summary>[requires: v4.3 and KHR_debug|VERSION_4_3|VERSION_4_3]
        /// Return the address of the specified pointer
        /// </summary>
        /// <param name="pname">
        /// <para>
        /// Specifies the array or buffer pointer to be returned. Symbolic constants GL_COLOR_ARRAY_POINTER, GL_EDGE_FLAG_ARRAY_POINTER, GL_FOG_COORD_ARRAY_POINTER, GL_FEEDBACK_BUFFER_POINTER, GL_INDEX_ARRAY_POINTER, GL_NORMAL_ARRAY_POINTER, GL_SECONDARY_COLOR_ARRAY_POINTER, GL_SELECTION_BUFFER_POINTER, GL_TEXTURE_COORD_ARRAY_POINTER, or GL_VERTEX_ARRAY_POINTER are accepted.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the pointer value specified by pname.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3|VERSION_4_3", Version = "4.3", EntryPoint = "glGetPointerv")]
        public static extern void GetPointer<T1>(OpenTK.Graphics.OpenGL4.GetPointervPName pname, [InAttribute, OutAttribute] ref T1 @params)
            where T1 : struct
        ;

        /// <summary>[requires: v4.1 and ARB_get_program_binary|VERSION_4_1]
        /// Return a binary representation of a program object's compiled and linked executable source
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the name of a program object whose binary representation to retrieve.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the size of the buffer whose address is given by binary.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the address of a variable to receive the number of bytes written into binary.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address an array into which the GL will return program's binary representation.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_get_program_binary|VERSION_4_1", Version = "4.1", EntryPoint = "glGetProgramBinary")]
        public static extern void GetProgramBinary(Int32 program, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] out OpenTK.Graphics.OpenGL4.BinaryFormat binaryFormat, [OutAttribute] IntPtr binary);

        /// <summary>[requires: v4.1 and ARB_get_program_binary|VERSION_4_1]
        /// Return a binary representation of a program object's compiled and linked executable source
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the name of a program object whose binary representation to retrieve.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the size of the buffer whose address is given by binary.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the address of a variable to receive the number of bytes written into binary.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address an array into which the GL will return program's binary representation.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_get_program_binary|VERSION_4_1", Version = "4.1", EntryPoint = "glGetProgramBinary")]
        public static extern void GetProgramBinary<T4>(Int32 program, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] out OpenTK.Graphics.OpenGL4.BinaryFormat binaryFormat, [InAttribute, OutAttribute] T4[] binary)
            where T4 : struct
        ;

        /// <summary>[requires: v4.1 and ARB_get_program_binary|VERSION_4_1]
        /// Return a binary representation of a program object's compiled and linked executable source
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the name of a program object whose binary representation to retrieve.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the size of the buffer whose address is given by binary.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the address of a variable to receive the number of bytes written into binary.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address an array into which the GL will return program's binary representation.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_get_program_binary|VERSION_4_1", Version = "4.1", EntryPoint = "glGetProgramBinary")]
        public static extern void GetProgramBinary<T4>(Int32 program, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] out OpenTK.Graphics.OpenGL4.BinaryFormat binaryFormat, [InAttribute, OutAttribute] T4[,] binary)
            where T4 : struct
        ;

        /// <summary>[requires: v4.1 and ARB_get_program_binary|VERSION_4_1]
        /// Return a binary representation of a program object's compiled and linked executable source
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the name of a program object whose binary representation to retrieve.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the size of the buffer whose address is given by binary.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the address of a variable to receive the number of bytes written into binary.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address an array into which the GL will return program's binary representation.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_get_program_binary|VERSION_4_1", Version = "4.1", EntryPoint = "glGetProgramBinary")]
        public static extern void GetProgramBinary<T4>(Int32 program, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] out OpenTK.Graphics.OpenGL4.BinaryFormat binaryFormat, [InAttribute, OutAttribute] T4[,,] binary)
            where T4 : struct
        ;

        /// <summary>[requires: v4.1 and ARB_get_program_binary|VERSION_4_1]
        /// Return a binary representation of a program object's compiled and linked executable source
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the name of a program object whose binary representation to retrieve.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the size of the buffer whose address is given by binary.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the address of a variable to receive the number of bytes written into binary.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address an array into which the GL will return program's binary representation.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_get_program_binary|VERSION_4_1", Version = "4.1", EntryPoint = "glGetProgramBinary")]
        public static extern void GetProgramBinary<T4>(Int32 program, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] out OpenTK.Graphics.OpenGL4.BinaryFormat binaryFormat, [InAttribute, OutAttribute] ref T4 binary)
            where T4 : struct
        ;

        /// <summary>[requires: v4.1 and ARB_get_program_binary|VERSION_4_1]
        /// Return a binary representation of a program object's compiled and linked executable source
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the name of a program object whose binary representation to retrieve.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the size of the buffer whose address is given by binary.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the address of a variable to receive the number of bytes written into binary.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address an array into which the GL will return program's binary representation.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_get_program_binary|VERSION_4_1", Version = "4.1", EntryPoint = "glGetProgramBinary")]
        public static extern unsafe void GetProgramBinary(Int32 program, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] OpenTK.Graphics.OpenGL4.BinaryFormat* binaryFormat, [OutAttribute] IntPtr binary);

        /// <summary>[requires: v4.1 and ARB_get_program_binary|VERSION_4_1]
        /// Return a binary representation of a program object's compiled and linked executable source
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the name of a program object whose binary representation to retrieve.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the size of the buffer whose address is given by binary.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the address of a variable to receive the number of bytes written into binary.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address an array into which the GL will return program's binary representation.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_get_program_binary|VERSION_4_1", Version = "4.1", EntryPoint = "glGetProgramBinary")]
        public static extern unsafe void GetProgramBinary<T4>(Int32 program, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] OpenTK.Graphics.OpenGL4.BinaryFormat* binaryFormat, [InAttribute, OutAttribute] T4[] binary)
            where T4 : struct
        ;

        /// <summary>[requires: v4.1 and ARB_get_program_binary|VERSION_4_1]
        /// Return a binary representation of a program object's compiled and linked executable source
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the name of a program object whose binary representation to retrieve.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the size of the buffer whose address is given by binary.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the address of a variable to receive the number of bytes written into binary.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address an array into which the GL will return program's binary representation.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_get_program_binary|VERSION_4_1", Version = "4.1", EntryPoint = "glGetProgramBinary")]
        public static extern unsafe void GetProgramBinary<T4>(Int32 program, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] OpenTK.Graphics.OpenGL4.BinaryFormat* binaryFormat, [InAttribute, OutAttribute] T4[,] binary)
            where T4 : struct
        ;

        /// <summary>[requires: v4.1 and ARB_get_program_binary|VERSION_4_1]
        /// Return a binary representation of a program object's compiled and linked executable source
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the name of a program object whose binary representation to retrieve.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the size of the buffer whose address is given by binary.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the address of a variable to receive the number of bytes written into binary.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address an array into which the GL will return program's binary representation.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_get_program_binary|VERSION_4_1", Version = "4.1", EntryPoint = "glGetProgramBinary")]
        public static extern unsafe void GetProgramBinary<T4>(Int32 program, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] OpenTK.Graphics.OpenGL4.BinaryFormat* binaryFormat, [InAttribute, OutAttribute] T4[,,] binary)
            where T4 : struct
        ;

        /// <summary>[requires: v4.1 and ARB_get_program_binary|VERSION_4_1]
        /// Return a binary representation of a program object's compiled and linked executable source
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the name of a program object whose binary representation to retrieve.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the size of the buffer whose address is given by binary.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the address of a variable to receive the number of bytes written into binary.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address an array into which the GL will return program's binary representation.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_get_program_binary|VERSION_4_1", Version = "4.1", EntryPoint = "glGetProgramBinary")]
        public static extern unsafe void GetProgramBinary<T4>(Int32 program, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] OpenTK.Graphics.OpenGL4.BinaryFormat* binaryFormat, [InAttribute, OutAttribute] ref T4 binary)
            where T4 : struct
        ;

        /// <summary>[requires: v4.1 and ARB_get_program_binary|VERSION_4_1]
        /// Return a binary representation of a program object's compiled and linked executable source
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the name of a program object whose binary representation to retrieve.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the size of the buffer whose address is given by binary.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the address of a variable to receive the number of bytes written into binary.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address an array into which the GL will return program's binary representation.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_get_program_binary|VERSION_4_1", Version = "4.1", EntryPoint = "glGetProgramBinary")]
        public static extern void GetProgramBinary(UInt32 program, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] out OpenTK.Graphics.OpenGL4.BinaryFormat binaryFormat, [OutAttribute] IntPtr binary);

        /// <summary>[requires: v4.1 and ARB_get_program_binary|VERSION_4_1]
        /// Return a binary representation of a program object's compiled and linked executable source
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the name of a program object whose binary representation to retrieve.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the size of the buffer whose address is given by binary.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the address of a variable to receive the number of bytes written into binary.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address an array into which the GL will return program's binary representation.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_get_program_binary|VERSION_4_1", Version = "4.1", EntryPoint = "glGetProgramBinary")]
        public static extern void GetProgramBinary<T4>(UInt32 program, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] out OpenTK.Graphics.OpenGL4.BinaryFormat binaryFormat, [InAttribute, OutAttribute] T4[] binary)
            where T4 : struct
        ;

        /// <summary>[requires: v4.1 and ARB_get_program_binary|VERSION_4_1]
        /// Return a binary representation of a program object's compiled and linked executable source
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the name of a program object whose binary representation to retrieve.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the size of the buffer whose address is given by binary.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the address of a variable to receive the number of bytes written into binary.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address an array into which the GL will return program's binary representation.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_get_program_binary|VERSION_4_1", Version = "4.1", EntryPoint = "glGetProgramBinary")]
        public static extern void GetProgramBinary<T4>(UInt32 program, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] out OpenTK.Graphics.OpenGL4.BinaryFormat binaryFormat, [InAttribute, OutAttribute] T4[,] binary)
            where T4 : struct
        ;

        /// <summary>[requires: v4.1 and ARB_get_program_binary|VERSION_4_1]
        /// Return a binary representation of a program object's compiled and linked executable source
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the name of a program object whose binary representation to retrieve.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the size of the buffer whose address is given by binary.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the address of a variable to receive the number of bytes written into binary.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address an array into which the GL will return program's binary representation.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_get_program_binary|VERSION_4_1", Version = "4.1", EntryPoint = "glGetProgramBinary")]
        public static extern void GetProgramBinary<T4>(UInt32 program, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] out OpenTK.Graphics.OpenGL4.BinaryFormat binaryFormat, [InAttribute, OutAttribute] T4[,,] binary)
            where T4 : struct
        ;

        /// <summary>[requires: v4.1 and ARB_get_program_binary|VERSION_4_1]
        /// Return a binary representation of a program object's compiled and linked executable source
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the name of a program object whose binary representation to retrieve.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the size of the buffer whose address is given by binary.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the address of a variable to receive the number of bytes written into binary.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address an array into which the GL will return program's binary representation.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_get_program_binary|VERSION_4_1", Version = "4.1", EntryPoint = "glGetProgramBinary")]
        public static extern void GetProgramBinary<T4>(UInt32 program, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] out OpenTK.Graphics.OpenGL4.BinaryFormat binaryFormat, [InAttribute, OutAttribute] ref T4 binary)
            where T4 : struct
        ;

        /// <summary>[requires: v4.1 and ARB_get_program_binary|VERSION_4_1]
        /// Return a binary representation of a program object's compiled and linked executable source
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the name of a program object whose binary representation to retrieve.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the size of the buffer whose address is given by binary.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the address of a variable to receive the number of bytes written into binary.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address an array into which the GL will return program's binary representation.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_get_program_binary|VERSION_4_1", Version = "4.1", EntryPoint = "glGetProgramBinary")]
        public static extern unsafe void GetProgramBinary(UInt32 program, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] OpenTK.Graphics.OpenGL4.BinaryFormat* binaryFormat, [OutAttribute] IntPtr binary);

        /// <summary>[requires: v4.1 and ARB_get_program_binary|VERSION_4_1]
        /// Return a binary representation of a program object's compiled and linked executable source
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the name of a program object whose binary representation to retrieve.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the size of the buffer whose address is given by binary.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the address of a variable to receive the number of bytes written into binary.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address an array into which the GL will return program's binary representation.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_get_program_binary|VERSION_4_1", Version = "4.1", EntryPoint = "glGetProgramBinary")]
        public static extern unsafe void GetProgramBinary<T4>(UInt32 program, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] OpenTK.Graphics.OpenGL4.BinaryFormat* binaryFormat, [InAttribute, OutAttribute] T4[] binary)
            where T4 : struct
        ;

        /// <summary>[requires: v4.1 and ARB_get_program_binary|VERSION_4_1]
        /// Return a binary representation of a program object's compiled and linked executable source
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the name of a program object whose binary representation to retrieve.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the size of the buffer whose address is given by binary.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the address of a variable to receive the number of bytes written into binary.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address an array into which the GL will return program's binary representation.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_get_program_binary|VERSION_4_1", Version = "4.1", EntryPoint = "glGetProgramBinary")]
        public static extern unsafe void GetProgramBinary<T4>(UInt32 program, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] OpenTK.Graphics.OpenGL4.BinaryFormat* binaryFormat, [InAttribute, OutAttribute] T4[,] binary)
            where T4 : struct
        ;

        /// <summary>[requires: v4.1 and ARB_get_program_binary|VERSION_4_1]
        /// Return a binary representation of a program object's compiled and linked executable source
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the name of a program object whose binary representation to retrieve.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the size of the buffer whose address is given by binary.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the address of a variable to receive the number of bytes written into binary.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address an array into which the GL will return program's binary representation.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_get_program_binary|VERSION_4_1", Version = "4.1", EntryPoint = "glGetProgramBinary")]
        public static extern unsafe void GetProgramBinary<T4>(UInt32 program, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] OpenTK.Graphics.OpenGL4.BinaryFormat* binaryFormat, [InAttribute, OutAttribute] T4[,,] binary)
            where T4 : struct
        ;

        /// <summary>[requires: v4.1 and ARB_get_program_binary|VERSION_4_1]
        /// Return a binary representation of a program object's compiled and linked executable source
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the name of a program object whose binary representation to retrieve.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the size of the buffer whose address is given by binary.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the address of a variable to receive the number of bytes written into binary.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address an array into which the GL will return program's binary representation.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_get_program_binary|VERSION_4_1", Version = "4.1", EntryPoint = "glGetProgramBinary")]
        public static extern unsafe void GetProgramBinary<T4>(UInt32 program, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] OpenTK.Graphics.OpenGL4.BinaryFormat* binaryFormat, [InAttribute, OutAttribute] ref T4 binary)
            where T4 : struct
        ;

        /// <summary>[requires: v2.0]
        /// Returns the information log for a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object whose information log is to be queried.
        /// </para>
        /// </param>
        /// <param name="maxLength">
        /// <para>
        /// Specifies the size of the character buffer for storing the returned information log.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Returns the length of the string returned in infoLog (excluding the null terminator).
        /// </para>
        /// </param>
        /// <param name="infoLog">
        /// <para>
        /// Specifies an array of characters that is used to return the information log.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetProgramInfoLog")]
        public static extern void GetProgramInfoLog(Int32 program, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder infoLog);

        /// <summary>[requires: v2.0]
        /// Returns the information log for a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object whose information log is to be queried.
        /// </para>
        /// </param>
        /// <param name="maxLength">
        /// <para>
        /// Specifies the size of the character buffer for storing the returned information log.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Returns the length of the string returned in infoLog (excluding the null terminator).
        /// </para>
        /// </param>
        /// <param name="infoLog">
        /// <para>
        /// Specifies an array of characters that is used to return the information log.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetProgramInfoLog")]
        public static extern unsafe void GetProgramInfoLog(Int32 program, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder infoLog);

        /// <summary>[requires: v2.0]
        /// Returns the information log for a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object whose information log is to be queried.
        /// </para>
        /// </param>
        /// <param name="maxLength">
        /// <para>
        /// Specifies the size of the character buffer for storing the returned information log.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Returns the length of the string returned in infoLog (excluding the null terminator).
        /// </para>
        /// </param>
        /// <param name="infoLog">
        /// <para>
        /// Specifies an array of characters that is used to return the information log.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetProgramInfoLog")]
        public static extern void GetProgramInfoLog(UInt32 program, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder infoLog);

        /// <summary>[requires: v2.0]
        /// Returns the information log for a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object whose information log is to be queried.
        /// </para>
        /// </param>
        /// <param name="maxLength">
        /// <para>
        /// Specifies the size of the character buffer for storing the returned information log.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Returns the length of the string returned in infoLog (excluding the null terminator).
        /// </para>
        /// </param>
        /// <param name="infoLog">
        /// <para>
        /// Specifies an array of characters that is used to return the information log.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetProgramInfoLog")]
        public static extern unsafe void GetProgramInfoLog(UInt32 program, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder infoLog);

        /// <summary>[requires: v4.3 and ARB_program_interface_query|VERSION_4_3]
        /// Query a property of an interface in a program
        /// </summary>
        /// <param name="program">
        /// <para>
        /// The name of a program object whose interface to query.
        /// </para>
        /// </param>
        /// <param name="programInterface">
        /// <para>
        /// A token identifying the interface within program to query.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// The name of the parameter within programInterface to query.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// The address of a variable to retrieve the value of pname for the program interface.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_program_interface_query|VERSION_4_3", Version = "4.3", EntryPoint = "glGetProgramInterfaceiv")]
        public static extern void GetProgramInterface(Int32 program, OpenTK.Graphics.OpenGL4.ProgramInterface programInterface, OpenTK.Graphics.OpenGL4.ProgramInterfaceParameter pname, [OutAttribute] Int32[] @params);

        /// <summary>[requires: v4.3 and ARB_program_interface_query|VERSION_4_3]
        /// Query a property of an interface in a program
        /// </summary>
        /// <param name="program">
        /// <para>
        /// The name of a program object whose interface to query.
        /// </para>
        /// </param>
        /// <param name="programInterface">
        /// <para>
        /// A token identifying the interface within program to query.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// The name of the parameter within programInterface to query.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// The address of a variable to retrieve the value of pname for the program interface.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_program_interface_query|VERSION_4_3", Version = "4.3", EntryPoint = "glGetProgramInterfaceiv")]
        public static extern void GetProgramInterface(Int32 program, OpenTK.Graphics.OpenGL4.ProgramInterface programInterface, OpenTK.Graphics.OpenGL4.ProgramInterfaceParameter pname, [OutAttribute] out Int32 @params);

        /// <summary>[requires: v4.3 and ARB_program_interface_query|VERSION_4_3]
        /// Query a property of an interface in a program
        /// </summary>
        /// <param name="program">
        /// <para>
        /// The name of a program object whose interface to query.
        /// </para>
        /// </param>
        /// <param name="programInterface">
        /// <para>
        /// A token identifying the interface within program to query.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// The name of the parameter within programInterface to query.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// The address of a variable to retrieve the value of pname for the program interface.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_program_interface_query|VERSION_4_3", Version = "4.3", EntryPoint = "glGetProgramInterfaceiv")]
        public static extern unsafe void GetProgramInterface(Int32 program, OpenTK.Graphics.OpenGL4.ProgramInterface programInterface, OpenTK.Graphics.OpenGL4.ProgramInterfaceParameter pname, [OutAttribute] Int32* @params);

        /// <summary>[requires: v4.3 and ARB_program_interface_query|VERSION_4_3]
        /// Query a property of an interface in a program
        /// </summary>
        /// <param name="program">
        /// <para>
        /// The name of a program object whose interface to query.
        /// </para>
        /// </param>
        /// <param name="programInterface">
        /// <para>
        /// A token identifying the interface within program to query.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// The name of the parameter within programInterface to query.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// The address of a variable to retrieve the value of pname for the program interface.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_program_interface_query|VERSION_4_3", Version = "4.3", EntryPoint = "glGetProgramInterfaceiv")]
        public static extern void GetProgramInterface(UInt32 program, OpenTK.Graphics.OpenGL4.ProgramInterface programInterface, OpenTK.Graphics.OpenGL4.ProgramInterfaceParameter pname, [OutAttribute] Int32[] @params);

        /// <summary>[requires: v4.3 and ARB_program_interface_query|VERSION_4_3]
        /// Query a property of an interface in a program
        /// </summary>
        /// <param name="program">
        /// <para>
        /// The name of a program object whose interface to query.
        /// </para>
        /// </param>
        /// <param name="programInterface">
        /// <para>
        /// A token identifying the interface within program to query.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// The name of the parameter within programInterface to query.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// The address of a variable to retrieve the value of pname for the program interface.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_program_interface_query|VERSION_4_3", Version = "4.3", EntryPoint = "glGetProgramInterfaceiv")]
        public static extern void GetProgramInterface(UInt32 program, OpenTK.Graphics.OpenGL4.ProgramInterface programInterface, OpenTK.Graphics.OpenGL4.ProgramInterfaceParameter pname, [OutAttribute] out Int32 @params);

        /// <summary>[requires: v4.3 and ARB_program_interface_query|VERSION_4_3]
        /// Query a property of an interface in a program
        /// </summary>
        /// <param name="program">
        /// <para>
        /// The name of a program object whose interface to query.
        /// </para>
        /// </param>
        /// <param name="programInterface">
        /// <para>
        /// A token identifying the interface within program to query.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// The name of the parameter within programInterface to query.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// The address of a variable to retrieve the value of pname for the program interface.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_program_interface_query|VERSION_4_3", Version = "4.3", EntryPoint = "glGetProgramInterfaceiv")]
        public static extern unsafe void GetProgramInterface(UInt32 program, OpenTK.Graphics.OpenGL4.ProgramInterface programInterface, OpenTK.Graphics.OpenGL4.ProgramInterfaceParameter pname, [OutAttribute] Int32* @params);

        /// <summary>[requires: v2.0]
        /// Returns a parameter from a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the object parameter. Accepted symbolic names are GL_DELETE_STATUS, GL_LINK_STATUS, GL_VALIDATE_STATUS, GL_INFO_LOG_LENGTH, GL_ATTACHED_SHADERS, GL_ACTIVE_ATOMIC_COUNTER_BUFFERS, GL_ACTIVE_ATTRIBUTES, GL_ACTIVE_ATTRIBUTE_MAX_LENGTH, GL_ACTIVE_UNIFORMS, GL_ACTIVE_UNIFORM_BLOCKS, GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH, GL_ACTIVE_UNIFORM_MAX_LENGTH, GL_COMPUTE_WORK_GROUP_SIZE GL_PROGRAM_BINARY_LENGTH, GL_TRANSFORM_FEEDBACK_BUFFER_MODE, GL_TRANSFORM_FEEDBACK_VARYINGS, GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH, GL_GEOMETRY_VERTICES_OUT, GL_GEOMETRY_INPUT_TYPE, and GL_GEOMETRY_OUTPUT_TYPE.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested object parameter.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetProgramiv")]
        public static extern void GetProgram(Int32 program, OpenTK.Graphics.OpenGL4.GetProgramParameterName pname, [OutAttribute] Int32[] @params);

        /// <summary>[requires: v2.0]
        /// Returns a parameter from a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the object parameter. Accepted symbolic names are GL_DELETE_STATUS, GL_LINK_STATUS, GL_VALIDATE_STATUS, GL_INFO_LOG_LENGTH, GL_ATTACHED_SHADERS, GL_ACTIVE_ATOMIC_COUNTER_BUFFERS, GL_ACTIVE_ATTRIBUTES, GL_ACTIVE_ATTRIBUTE_MAX_LENGTH, GL_ACTIVE_UNIFORMS, GL_ACTIVE_UNIFORM_BLOCKS, GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH, GL_ACTIVE_UNIFORM_MAX_LENGTH, GL_COMPUTE_WORK_GROUP_SIZE GL_PROGRAM_BINARY_LENGTH, GL_TRANSFORM_FEEDBACK_BUFFER_MODE, GL_TRANSFORM_FEEDBACK_VARYINGS, GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH, GL_GEOMETRY_VERTICES_OUT, GL_GEOMETRY_INPUT_TYPE, and GL_GEOMETRY_OUTPUT_TYPE.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested object parameter.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetProgramiv")]
        public static extern void GetProgram(Int32 program, OpenTK.Graphics.OpenGL4.GetProgramParameterName pname, [OutAttribute] out Int32 @params);

        /// <summary>[requires: v2.0]
        /// Returns a parameter from a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the object parameter. Accepted symbolic names are GL_DELETE_STATUS, GL_LINK_STATUS, GL_VALIDATE_STATUS, GL_INFO_LOG_LENGTH, GL_ATTACHED_SHADERS, GL_ACTIVE_ATOMIC_COUNTER_BUFFERS, GL_ACTIVE_ATTRIBUTES, GL_ACTIVE_ATTRIBUTE_MAX_LENGTH, GL_ACTIVE_UNIFORMS, GL_ACTIVE_UNIFORM_BLOCKS, GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH, GL_ACTIVE_UNIFORM_MAX_LENGTH, GL_COMPUTE_WORK_GROUP_SIZE GL_PROGRAM_BINARY_LENGTH, GL_TRANSFORM_FEEDBACK_BUFFER_MODE, GL_TRANSFORM_FEEDBACK_VARYINGS, GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH, GL_GEOMETRY_VERTICES_OUT, GL_GEOMETRY_INPUT_TYPE, and GL_GEOMETRY_OUTPUT_TYPE.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested object parameter.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetProgramiv")]
        public static extern unsafe void GetProgram(Int32 program, OpenTK.Graphics.OpenGL4.GetProgramParameterName pname, [OutAttribute] Int32* @params);

        /// <summary>[requires: v2.0]
        /// Returns a parameter from a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the object parameter. Accepted symbolic names are GL_DELETE_STATUS, GL_LINK_STATUS, GL_VALIDATE_STATUS, GL_INFO_LOG_LENGTH, GL_ATTACHED_SHADERS, GL_ACTIVE_ATOMIC_COUNTER_BUFFERS, GL_ACTIVE_ATTRIBUTES, GL_ACTIVE_ATTRIBUTE_MAX_LENGTH, GL_ACTIVE_UNIFORMS, GL_ACTIVE_UNIFORM_BLOCKS, GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH, GL_ACTIVE_UNIFORM_MAX_LENGTH, GL_COMPUTE_WORK_GROUP_SIZE GL_PROGRAM_BINARY_LENGTH, GL_TRANSFORM_FEEDBACK_BUFFER_MODE, GL_TRANSFORM_FEEDBACK_VARYINGS, GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH, GL_GEOMETRY_VERTICES_OUT, GL_GEOMETRY_INPUT_TYPE, and GL_GEOMETRY_OUTPUT_TYPE.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested object parameter.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetProgramiv")]
        public static extern void GetProgram(UInt32 program, OpenTK.Graphics.OpenGL4.GetProgramParameterName pname, [OutAttribute] Int32[] @params);

        /// <summary>[requires: v2.0]
        /// Returns a parameter from a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the object parameter. Accepted symbolic names are GL_DELETE_STATUS, GL_LINK_STATUS, GL_VALIDATE_STATUS, GL_INFO_LOG_LENGTH, GL_ATTACHED_SHADERS, GL_ACTIVE_ATOMIC_COUNTER_BUFFERS, GL_ACTIVE_ATTRIBUTES, GL_ACTIVE_ATTRIBUTE_MAX_LENGTH, GL_ACTIVE_UNIFORMS, GL_ACTIVE_UNIFORM_BLOCKS, GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH, GL_ACTIVE_UNIFORM_MAX_LENGTH, GL_COMPUTE_WORK_GROUP_SIZE GL_PROGRAM_BINARY_LENGTH, GL_TRANSFORM_FEEDBACK_BUFFER_MODE, GL_TRANSFORM_FEEDBACK_VARYINGS, GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH, GL_GEOMETRY_VERTICES_OUT, GL_GEOMETRY_INPUT_TYPE, and GL_GEOMETRY_OUTPUT_TYPE.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested object parameter.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetProgramiv")]
        public static extern void GetProgram(UInt32 program, OpenTK.Graphics.OpenGL4.GetProgramParameterName pname, [OutAttribute] out Int32 @params);

        /// <summary>[requires: v2.0]
        /// Returns a parameter from a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the object parameter. Accepted symbolic names are GL_DELETE_STATUS, GL_LINK_STATUS, GL_VALIDATE_STATUS, GL_INFO_LOG_LENGTH, GL_ATTACHED_SHADERS, GL_ACTIVE_ATOMIC_COUNTER_BUFFERS, GL_ACTIVE_ATTRIBUTES, GL_ACTIVE_ATTRIBUTE_MAX_LENGTH, GL_ACTIVE_UNIFORMS, GL_ACTIVE_UNIFORM_BLOCKS, GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH, GL_ACTIVE_UNIFORM_MAX_LENGTH, GL_COMPUTE_WORK_GROUP_SIZE GL_PROGRAM_BINARY_LENGTH, GL_TRANSFORM_FEEDBACK_BUFFER_MODE, GL_TRANSFORM_FEEDBACK_VARYINGS, GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH, GL_GEOMETRY_VERTICES_OUT, GL_GEOMETRY_INPUT_TYPE, and GL_GEOMETRY_OUTPUT_TYPE.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested object parameter.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetProgramiv")]
        public static extern unsafe void GetProgram(UInt32 program, OpenTK.Graphics.OpenGL4.GetProgramParameterName pname, [OutAttribute] Int32* @params);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Retrieve the info log string from a program pipeline object
        /// </summary>
        /// <param name="pipeline">
        /// <para>
        /// Specifies the name of a program pipeline object from which to retrieve the info log.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the maximum number of characters, including the null terminator, that may be written into infoLog.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the address of a variable into which will be written the number of characters written into infoLog.
        /// </para>
        /// </param>
        /// <param name="infoLog">
        /// <para>
        /// Specifies the address of an array of characters into which will be written the info log for pipeline.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glGetProgramPipelineInfoLog")]
        public static extern void GetProgramPipelineInfoLog(Int32 pipeline, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder infoLog);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Retrieve the info log string from a program pipeline object
        /// </summary>
        /// <param name="pipeline">
        /// <para>
        /// Specifies the name of a program pipeline object from which to retrieve the info log.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the maximum number of characters, including the null terminator, that may be written into infoLog.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the address of a variable into which will be written the number of characters written into infoLog.
        /// </para>
        /// </param>
        /// <param name="infoLog">
        /// <para>
        /// Specifies the address of an array of characters into which will be written the info log for pipeline.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glGetProgramPipelineInfoLog")]
        public static extern unsafe void GetProgramPipelineInfoLog(Int32 pipeline, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder infoLog);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Retrieve the info log string from a program pipeline object
        /// </summary>
        /// <param name="pipeline">
        /// <para>
        /// Specifies the name of a program pipeline object from which to retrieve the info log.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the maximum number of characters, including the null terminator, that may be written into infoLog.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the address of a variable into which will be written the number of characters written into infoLog.
        /// </para>
        /// </param>
        /// <param name="infoLog">
        /// <para>
        /// Specifies the address of an array of characters into which will be written the info log for pipeline.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glGetProgramPipelineInfoLog")]
        public static extern void GetProgramPipelineInfoLog(UInt32 pipeline, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder infoLog);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Retrieve the info log string from a program pipeline object
        /// </summary>
        /// <param name="pipeline">
        /// <para>
        /// Specifies the name of a program pipeline object from which to retrieve the info log.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the maximum number of characters, including the null terminator, that may be written into infoLog.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the address of a variable into which will be written the number of characters written into infoLog.
        /// </para>
        /// </param>
        /// <param name="infoLog">
        /// <para>
        /// Specifies the address of an array of characters into which will be written the info log for pipeline.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glGetProgramPipelineInfoLog")]
        public static extern unsafe void GetProgramPipelineInfoLog(UInt32 pipeline, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder infoLog);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Retrieve properties of a program pipeline object
        /// </summary>
        /// <param name="pipeline">
        /// <para>
        /// Specifies the name of a program pipeline object whose parameter retrieve.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the name of the parameter to retrieve.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Specifies the address of a variable into which will be written the value or values of pname for pipeline.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glGetProgramPipelineiv")]
        public static extern void GetProgramPipeline(Int32 pipeline, OpenTK.Graphics.OpenGL4.ProgramPipelineParameter pname, [OutAttribute] Int32[] @params);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Retrieve properties of a program pipeline object
        /// </summary>
        /// <param name="pipeline">
        /// <para>
        /// Specifies the name of a program pipeline object whose parameter retrieve.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the name of the parameter to retrieve.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Specifies the address of a variable into which will be written the value or values of pname for pipeline.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glGetProgramPipelineiv")]
        public static extern void GetProgramPipeline(Int32 pipeline, OpenTK.Graphics.OpenGL4.ProgramPipelineParameter pname, [OutAttribute] out Int32 @params);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Retrieve properties of a program pipeline object
        /// </summary>
        /// <param name="pipeline">
        /// <para>
        /// Specifies the name of a program pipeline object whose parameter retrieve.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the name of the parameter to retrieve.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Specifies the address of a variable into which will be written the value or values of pname for pipeline.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glGetProgramPipelineiv")]
        public static extern unsafe void GetProgramPipeline(Int32 pipeline, OpenTK.Graphics.OpenGL4.ProgramPipelineParameter pname, [OutAttribute] Int32* @params);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Retrieve properties of a program pipeline object
        /// </summary>
        /// <param name="pipeline">
        /// <para>
        /// Specifies the name of a program pipeline object whose parameter retrieve.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the name of the parameter to retrieve.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Specifies the address of a variable into which will be written the value or values of pname for pipeline.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glGetProgramPipelineiv")]
        public static extern void GetProgramPipeline(UInt32 pipeline, OpenTK.Graphics.OpenGL4.ProgramPipelineParameter pname, [OutAttribute] Int32[] @params);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Retrieve properties of a program pipeline object
        /// </summary>
        /// <param name="pipeline">
        /// <para>
        /// Specifies the name of a program pipeline object whose parameter retrieve.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the name of the parameter to retrieve.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Specifies the address of a variable into which will be written the value or values of pname for pipeline.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glGetProgramPipelineiv")]
        public static extern void GetProgramPipeline(UInt32 pipeline, OpenTK.Graphics.OpenGL4.ProgramPipelineParameter pname, [OutAttribute] out Int32 @params);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Retrieve properties of a program pipeline object
        /// </summary>
        /// <param name="pipeline">
        /// <para>
        /// Specifies the name of a program pipeline object whose parameter retrieve.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the name of the parameter to retrieve.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Specifies the address of a variable into which will be written the value or values of pname for pipeline.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glGetProgramPipelineiv")]
        public static extern unsafe void GetProgramPipeline(UInt32 pipeline, OpenTK.Graphics.OpenGL4.ProgramPipelineParameter pname, [OutAttribute] Int32* @params);

        /// <summary>[requires: v4.3 and ARB_program_interface_query|VERSION_4_3]
        /// Query the index of a named resource within a program
        /// </summary>
        /// <param name="program">
        /// <para>
        /// The name of a program object whose resources to query.
        /// </para>
        /// </param>
        /// <param name="programInterface">
        /// <para>
        /// A token identifying the interface within program containing the resource named name.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// The name of the resource to query the index of.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_program_interface_query|VERSION_4_3", Version = "4.3", EntryPoint = "glGetProgramResourceIndex")]
        public static extern Int32 GetProgramResourceIndex(Int32 program, OpenTK.Graphics.OpenGL4.ProgramInterface programInterface, String name);

        /// <summary>[requires: v4.3 and ARB_program_interface_query|VERSION_4_3]
        /// Query the index of a named resource within a program
        /// </summary>
        /// <param name="program">
        /// <para>
        /// The name of a program object whose resources to query.
        /// </para>
        /// </param>
        /// <param name="programInterface">
        /// <para>
        /// A token identifying the interface within program containing the resource named name.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// The name of the resource to query the index of.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_program_interface_query|VERSION_4_3", Version = "4.3", EntryPoint = "glGetProgramResourceIndex")]
        public static extern Int32 GetProgramResourceIndex(UInt32 program, OpenTK.Graphics.OpenGL4.ProgramInterface programInterface, String name);

        /// <summary>[requires: v4.3 and ARB_program_interface_query|VERSION_4_3]
        /// Retrieve values for multiple properties of a single active resource within a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// The name of a program object whose resources to query.
        /// </para>
        /// </param>
        /// <param name="programInterface">
        /// <para>
        /// A token identifying the interface within program containing the resource named name.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_program_interface_query|VERSION_4_3", Version = "4.3", EntryPoint = "glGetProgramResourceiv")]
        public static extern void GetProgramResource(Int32 program, OpenTK.Graphics.OpenGL4.ProgramInterface programInterface, Int32 index, Int32 propCount, OpenTK.Graphics.OpenGL4.ProgramProperty[] props, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute] Int32[] @params);

        /// <summary>[requires: v4.3 and ARB_program_interface_query|VERSION_4_3]
        /// Retrieve values for multiple properties of a single active resource within a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// The name of a program object whose resources to query.
        /// </para>
        /// </param>
        /// <param name="programInterface">
        /// <para>
        /// A token identifying the interface within program containing the resource named name.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_program_interface_query|VERSION_4_3", Version = "4.3", EntryPoint = "glGetProgramResourceiv")]
        public static extern void GetProgramResource(Int32 program, OpenTK.Graphics.OpenGL4.ProgramInterface programInterface, Int32 index, Int32 propCount, ref OpenTK.Graphics.OpenGL4.ProgramProperty props, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] out Int32 @params);

        /// <summary>[requires: v4.3 and ARB_program_interface_query|VERSION_4_3]
        /// Retrieve values for multiple properties of a single active resource within a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// The name of a program object whose resources to query.
        /// </para>
        /// </param>
        /// <param name="programInterface">
        /// <para>
        /// A token identifying the interface within program containing the resource named name.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_program_interface_query|VERSION_4_3", Version = "4.3", EntryPoint = "glGetProgramResourceiv")]
        public static extern unsafe void GetProgramResource(Int32 program, OpenTK.Graphics.OpenGL4.ProgramInterface programInterface, Int32 index, Int32 propCount, OpenTK.Graphics.OpenGL4.ProgramProperty* props, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] Int32* @params);

        /// <summary>[requires: v4.3 and ARB_program_interface_query|VERSION_4_3]
        /// Retrieve values for multiple properties of a single active resource within a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// The name of a program object whose resources to query.
        /// </para>
        /// </param>
        /// <param name="programInterface">
        /// <para>
        /// A token identifying the interface within program containing the resource named name.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_program_interface_query|VERSION_4_3", Version = "4.3", EntryPoint = "glGetProgramResourceiv")]
        public static extern void GetProgramResource(UInt32 program, OpenTK.Graphics.OpenGL4.ProgramInterface programInterface, UInt32 index, Int32 propCount, OpenTK.Graphics.OpenGL4.ProgramProperty[] props, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute] Int32[] @params);

        /// <summary>[requires: v4.3 and ARB_program_interface_query|VERSION_4_3]
        /// Retrieve values for multiple properties of a single active resource within a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// The name of a program object whose resources to query.
        /// </para>
        /// </param>
        /// <param name="programInterface">
        /// <para>
        /// A token identifying the interface within program containing the resource named name.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_program_interface_query|VERSION_4_3", Version = "4.3", EntryPoint = "glGetProgramResourceiv")]
        public static extern void GetProgramResource(UInt32 program, OpenTK.Graphics.OpenGL4.ProgramInterface programInterface, UInt32 index, Int32 propCount, ref OpenTK.Graphics.OpenGL4.ProgramProperty props, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] out Int32 @params);

        /// <summary>[requires: v4.3 and ARB_program_interface_query|VERSION_4_3]
        /// Retrieve values for multiple properties of a single active resource within a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// The name of a program object whose resources to query.
        /// </para>
        /// </param>
        /// <param name="programInterface">
        /// <para>
        /// A token identifying the interface within program containing the resource named name.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_program_interface_query|VERSION_4_3", Version = "4.3", EntryPoint = "glGetProgramResourceiv")]
        public static extern unsafe void GetProgramResource(UInt32 program, OpenTK.Graphics.OpenGL4.ProgramInterface programInterface, UInt32 index, Int32 propCount, OpenTK.Graphics.OpenGL4.ProgramProperty* props, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] Int32* @params);

        /// <summary>[requires: v4.3 and ARB_program_interface_query|VERSION_4_3]
        /// Query the location of a named resource within a program
        /// </summary>
        /// <param name="program">
        /// <para>
        /// The name of a program object whose resources to query.
        /// </para>
        /// </param>
        /// <param name="programInterface">
        /// <para>
        /// A token identifying the interface within program containing the resource named name.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// The name of the resource to query the location of.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_program_interface_query|VERSION_4_3", Version = "4.3", EntryPoint = "glGetProgramResourceLocation")]
        public static extern Int32 GetProgramResourceLocation(Int32 program, OpenTK.Graphics.OpenGL4.ProgramInterface programInterface, String name);

        /// <summary>[requires: v4.3 and ARB_program_interface_query|VERSION_4_3]
        /// Query the location of a named resource within a program
        /// </summary>
        /// <param name="program">
        /// <para>
        /// The name of a program object whose resources to query.
        /// </para>
        /// </param>
        /// <param name="programInterface">
        /// <para>
        /// A token identifying the interface within program containing the resource named name.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// The name of the resource to query the location of.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_program_interface_query|VERSION_4_3", Version = "4.3", EntryPoint = "glGetProgramResourceLocation")]
        public static extern Int32 GetProgramResourceLocation(UInt32 program, OpenTK.Graphics.OpenGL4.ProgramInterface programInterface, String name);

        /// <summary>[requires: v4.3 and ARB_program_interface_query|VERSION_4_3]
        /// Query the fragment color index of a named variable within a program
        /// </summary>
        /// <param name="program">
        /// <para>
        /// The name of a program object whose resources to query.
        /// </para>
        /// </param>
        /// <param name="programInterface">
        /// <para>
        /// A token identifying the interface within program containing the resource named name.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// The name of the resource to query the location of.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_program_interface_query|VERSION_4_3", Version = "4.3", EntryPoint = "glGetProgramResourceLocationIndex")]
        public static extern Int32 GetProgramResourceLocationIndex(Int32 program, OpenTK.Graphics.OpenGL4.ProgramInterface programInterface, String name);

        /// <summary>[requires: v4.3 and ARB_program_interface_query|VERSION_4_3]
        /// Query the fragment color index of a named variable within a program
        /// </summary>
        /// <param name="program">
        /// <para>
        /// The name of a program object whose resources to query.
        /// </para>
        /// </param>
        /// <param name="programInterface">
        /// <para>
        /// A token identifying the interface within program containing the resource named name.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// The name of the resource to query the location of.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_program_interface_query|VERSION_4_3", Version = "4.3", EntryPoint = "glGetProgramResourceLocationIndex")]
        public static extern Int32 GetProgramResourceLocationIndex(UInt32 program, OpenTK.Graphics.OpenGL4.ProgramInterface programInterface, String name);

        /// <summary>[requires: v4.3 and ARB_program_interface_query|VERSION_4_3]
        /// Query the name of an indexed resource within a program
        /// </summary>
        /// <param name="program">
        /// <para>
        /// The name of a program object whose resources to query.
        /// </para>
        /// </param>
        /// <param name="programInterface">
        /// <para>
        /// A token identifying the interface within program containing the indexed resource.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// The index of the resource within programInterface of program.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// The size of the character array whose address is given by name.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// The address of a variable which will receive the length of the resource name.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// The address of a character array into which will be written the name of the resource.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_program_interface_query|VERSION_4_3", Version = "4.3", EntryPoint = "glGetProgramResourceName")]
        public static extern void GetProgramResourceName(Int32 program, OpenTK.Graphics.OpenGL4.ProgramInterface programInterface, Int32 index, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute] StringBuilder name);

        /// <summary>[requires: v4.3 and ARB_program_interface_query|VERSION_4_3]
        /// Query the name of an indexed resource within a program
        /// </summary>
        /// <param name="program">
        /// <para>
        /// The name of a program object whose resources to query.
        /// </para>
        /// </param>
        /// <param name="programInterface">
        /// <para>
        /// A token identifying the interface within program containing the indexed resource.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// The index of the resource within programInterface of program.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// The size of the character array whose address is given by name.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// The address of a variable which will receive the length of the resource name.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// The address of a character array into which will be written the name of the resource.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_program_interface_query|VERSION_4_3", Version = "4.3", EntryPoint = "glGetProgramResourceName")]
        public static extern void GetProgramResourceName(Int32 program, OpenTK.Graphics.OpenGL4.ProgramInterface programInterface, Int32 index, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder name);

        /// <summary>[requires: v4.3 and ARB_program_interface_query|VERSION_4_3]
        /// Query the name of an indexed resource within a program
        /// </summary>
        /// <param name="program">
        /// <para>
        /// The name of a program object whose resources to query.
        /// </para>
        /// </param>
        /// <param name="programInterface">
        /// <para>
        /// A token identifying the interface within program containing the indexed resource.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// The index of the resource within programInterface of program.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// The size of the character array whose address is given by name.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// The address of a variable which will receive the length of the resource name.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// The address of a character array into which will be written the name of the resource.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_program_interface_query|VERSION_4_3", Version = "4.3", EntryPoint = "glGetProgramResourceName")]
        public static extern unsafe void GetProgramResourceName(Int32 program, OpenTK.Graphics.OpenGL4.ProgramInterface programInterface, Int32 index, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder name);

        /// <summary>[requires: v4.3 and ARB_program_interface_query|VERSION_4_3]
        /// Query the name of an indexed resource within a program
        /// </summary>
        /// <param name="program">
        /// <para>
        /// The name of a program object whose resources to query.
        /// </para>
        /// </param>
        /// <param name="programInterface">
        /// <para>
        /// A token identifying the interface within program containing the indexed resource.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// The index of the resource within programInterface of program.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// The size of the character array whose address is given by name.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// The address of a variable which will receive the length of the resource name.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// The address of a character array into which will be written the name of the resource.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_program_interface_query|VERSION_4_3", Version = "4.3", EntryPoint = "glGetProgramResourceName")]
        public static extern void GetProgramResourceName(UInt32 program, OpenTK.Graphics.OpenGL4.ProgramInterface programInterface, UInt32 index, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute] StringBuilder name);

        /// <summary>[requires: v4.3 and ARB_program_interface_query|VERSION_4_3]
        /// Query the name of an indexed resource within a program
        /// </summary>
        /// <param name="program">
        /// <para>
        /// The name of a program object whose resources to query.
        /// </para>
        /// </param>
        /// <param name="programInterface">
        /// <para>
        /// A token identifying the interface within program containing the indexed resource.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// The index of the resource within programInterface of program.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// The size of the character array whose address is given by name.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// The address of a variable which will receive the length of the resource name.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// The address of a character array into which will be written the name of the resource.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_program_interface_query|VERSION_4_3", Version = "4.3", EntryPoint = "glGetProgramResourceName")]
        public static extern void GetProgramResourceName(UInt32 program, OpenTK.Graphics.OpenGL4.ProgramInterface programInterface, UInt32 index, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder name);

        /// <summary>[requires: v4.3 and ARB_program_interface_query|VERSION_4_3]
        /// Query the name of an indexed resource within a program
        /// </summary>
        /// <param name="program">
        /// <para>
        /// The name of a program object whose resources to query.
        /// </para>
        /// </param>
        /// <param name="programInterface">
        /// <para>
        /// A token identifying the interface within program containing the indexed resource.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// The index of the resource within programInterface of program.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// The size of the character array whose address is given by name.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// The address of a variable which will receive the length of the resource name.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// The address of a character array into which will be written the name of the resource.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_program_interface_query|VERSION_4_3", Version = "4.3", EntryPoint = "glGetProgramResourceName")]
        public static extern unsafe void GetProgramResourceName(UInt32 program, OpenTK.Graphics.OpenGL4.ProgramInterface programInterface, UInt32 index, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder name);

        /// <summary>[requires: v4.0 and ARB_shader_subroutine|VERSION_4_0]
        /// Retrieve properties of a program object corresponding to a specified shader stage
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the name of the program containing shader stage.
        /// </para>
        /// </param>
        /// <param name="shadertype">
        /// <para>
        /// Specifies the shader stage from which to query for the subroutine parameter. shadertype must be one of GL_VERTEX_SHADER, GL_TESS_CONTROL_SHADER, GL_TESS_EVALUATION_SHADER, GL_GEOMETRY_SHADER or GL_FRAGMENT_SHADER.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the parameter of the shader to query. pname must be GL_ACTIVE_SUBROUTINE_UNIFORMS, GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS, GL_ACTIVE_SUBROUTINES, GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH, or GL_ACTIVE_SUBROUTINE_MAX_LENGTH.
        /// </para>
        /// </param>
        /// <param name="values">
        /// <para>
        /// Specifies the address of a variable into which the queried value or values will be placed.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_shader_subroutine|VERSION_4_0", Version = "4.0", EntryPoint = "glGetProgramStageiv")]
        public static extern void GetProgramStage(Int32 program, OpenTK.Graphics.OpenGL4.ShaderType shadertype, OpenTK.Graphics.OpenGL4.ProgramStageParameter pname, [OutAttribute] out Int32 values);

        /// <summary>[requires: v4.0 and ARB_shader_subroutine|VERSION_4_0]
        /// Retrieve properties of a program object corresponding to a specified shader stage
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the name of the program containing shader stage.
        /// </para>
        /// </param>
        /// <param name="shadertype">
        /// <para>
        /// Specifies the shader stage from which to query for the subroutine parameter. shadertype must be one of GL_VERTEX_SHADER, GL_TESS_CONTROL_SHADER, GL_TESS_EVALUATION_SHADER, GL_GEOMETRY_SHADER or GL_FRAGMENT_SHADER.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the parameter of the shader to query. pname must be GL_ACTIVE_SUBROUTINE_UNIFORMS, GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS, GL_ACTIVE_SUBROUTINES, GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH, or GL_ACTIVE_SUBROUTINE_MAX_LENGTH.
        /// </para>
        /// </param>
        /// <param name="values">
        /// <para>
        /// Specifies the address of a variable into which the queried value or values will be placed.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_shader_subroutine|VERSION_4_0", Version = "4.0", EntryPoint = "glGetProgramStageiv")]
        public static extern unsafe void GetProgramStage(Int32 program, OpenTK.Graphics.OpenGL4.ShaderType shadertype, OpenTK.Graphics.OpenGL4.ProgramStageParameter pname, [OutAttribute] Int32* values);

        /// <summary>[requires: v4.0 and ARB_shader_subroutine|VERSION_4_0]
        /// Retrieve properties of a program object corresponding to a specified shader stage
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the name of the program containing shader stage.
        /// </para>
        /// </param>
        /// <param name="shadertype">
        /// <para>
        /// Specifies the shader stage from which to query for the subroutine parameter. shadertype must be one of GL_VERTEX_SHADER, GL_TESS_CONTROL_SHADER, GL_TESS_EVALUATION_SHADER, GL_GEOMETRY_SHADER or GL_FRAGMENT_SHADER.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the parameter of the shader to query. pname must be GL_ACTIVE_SUBROUTINE_UNIFORMS, GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS, GL_ACTIVE_SUBROUTINES, GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH, or GL_ACTIVE_SUBROUTINE_MAX_LENGTH.
        /// </para>
        /// </param>
        /// <param name="values">
        /// <para>
        /// Specifies the address of a variable into which the queried value or values will be placed.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_shader_subroutine|VERSION_4_0", Version = "4.0", EntryPoint = "glGetProgramStageiv")]
        public static extern void GetProgramStage(UInt32 program, OpenTK.Graphics.OpenGL4.ShaderType shadertype, OpenTK.Graphics.OpenGL4.ProgramStageParameter pname, [OutAttribute] out Int32 values);

        /// <summary>[requires: v4.0 and ARB_shader_subroutine|VERSION_4_0]
        /// Retrieve properties of a program object corresponding to a specified shader stage
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the name of the program containing shader stage.
        /// </para>
        /// </param>
        /// <param name="shadertype">
        /// <para>
        /// Specifies the shader stage from which to query for the subroutine parameter. shadertype must be one of GL_VERTEX_SHADER, GL_TESS_CONTROL_SHADER, GL_TESS_EVALUATION_SHADER, GL_GEOMETRY_SHADER or GL_FRAGMENT_SHADER.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the parameter of the shader to query. pname must be GL_ACTIVE_SUBROUTINE_UNIFORMS, GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS, GL_ACTIVE_SUBROUTINES, GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH, or GL_ACTIVE_SUBROUTINE_MAX_LENGTH.
        /// </para>
        /// </param>
        /// <param name="values">
        /// <para>
        /// Specifies the address of a variable into which the queried value or values will be placed.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_shader_subroutine|VERSION_4_0", Version = "4.0", EntryPoint = "glGetProgramStageiv")]
        public static extern unsafe void GetProgramStage(UInt32 program, OpenTK.Graphics.OpenGL4.ShaderType shadertype, OpenTK.Graphics.OpenGL4.ProgramStageParameter pname, [OutAttribute] Int32* values);

        /// <summary>[requires: v4.0 and ARB_transform_feedback3|VERSION_4_0]
        /// Return parameters of an indexed query object target
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies a query object target. Must be GL_SAMPLES_PASSED, GL_ANY_SAMPLES_PASSED, GL_ANY_SAMPLES_PASSED_CONSERVATIVE GL_PRIMITIVES_GENERATED, GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN, GL_TIME_ELAPSED, or GL_TIMESTAMP.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the query object target.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a query object target parameter. Accepted values are GL_CURRENT_QUERY or GL_QUERY_COUNTER_BITS.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested data.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_transform_feedback3|VERSION_4_0", Version = "4.0", EntryPoint = "glGetQueryIndexediv")]
        public static extern void GetQueryIndexed(OpenTK.Graphics.OpenGL4.QueryTarget target, Int32 index, OpenTK.Graphics.OpenGL4.GetQueryParam pname, [OutAttribute] Int32[] @params);

        /// <summary>[requires: v4.0 and ARB_transform_feedback3|VERSION_4_0]
        /// Return parameters of an indexed query object target
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies a query object target. Must be GL_SAMPLES_PASSED, GL_ANY_SAMPLES_PASSED, GL_ANY_SAMPLES_PASSED_CONSERVATIVE GL_PRIMITIVES_GENERATED, GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN, GL_TIME_ELAPSED, or GL_TIMESTAMP.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the query object target.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a query object target parameter. Accepted values are GL_CURRENT_QUERY or GL_QUERY_COUNTER_BITS.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested data.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_transform_feedback3|VERSION_4_0", Version = "4.0", EntryPoint = "glGetQueryIndexediv")]
        public static extern void GetQueryIndexed(OpenTK.Graphics.OpenGL4.QueryTarget target, Int32 index, OpenTK.Graphics.OpenGL4.GetQueryParam pname, [OutAttribute] out Int32 @params);

        /// <summary>[requires: v4.0 and ARB_transform_feedback3|VERSION_4_0]
        /// Return parameters of an indexed query object target
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies a query object target. Must be GL_SAMPLES_PASSED, GL_ANY_SAMPLES_PASSED, GL_ANY_SAMPLES_PASSED_CONSERVATIVE GL_PRIMITIVES_GENERATED, GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN, GL_TIME_ELAPSED, or GL_TIMESTAMP.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the query object target.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a query object target parameter. Accepted values are GL_CURRENT_QUERY or GL_QUERY_COUNTER_BITS.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested data.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_transform_feedback3|VERSION_4_0", Version = "4.0", EntryPoint = "glGetQueryIndexediv")]
        public static extern unsafe void GetQueryIndexed(OpenTK.Graphics.OpenGL4.QueryTarget target, Int32 index, OpenTK.Graphics.OpenGL4.GetQueryParam pname, [OutAttribute] Int32* @params);

        /// <summary>[requires: v4.0 and ARB_transform_feedback3|VERSION_4_0]
        /// Return parameters of an indexed query object target
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies a query object target. Must be GL_SAMPLES_PASSED, GL_ANY_SAMPLES_PASSED, GL_ANY_SAMPLES_PASSED_CONSERVATIVE GL_PRIMITIVES_GENERATED, GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN, GL_TIME_ELAPSED, or GL_TIMESTAMP.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the query object target.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a query object target parameter. Accepted values are GL_CURRENT_QUERY or GL_QUERY_COUNTER_BITS.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested data.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_transform_feedback3|VERSION_4_0", Version = "4.0", EntryPoint = "glGetQueryIndexediv")]
        public static extern void GetQueryIndexed(OpenTK.Graphics.OpenGL4.QueryTarget target, UInt32 index, OpenTK.Graphics.OpenGL4.GetQueryParam pname, [OutAttribute] Int32[] @params);

        /// <summary>[requires: v4.0 and ARB_transform_feedback3|VERSION_4_0]
        /// Return parameters of an indexed query object target
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies a query object target. Must be GL_SAMPLES_PASSED, GL_ANY_SAMPLES_PASSED, GL_ANY_SAMPLES_PASSED_CONSERVATIVE GL_PRIMITIVES_GENERATED, GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN, GL_TIME_ELAPSED, or GL_TIMESTAMP.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the query object target.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a query object target parameter. Accepted values are GL_CURRENT_QUERY or GL_QUERY_COUNTER_BITS.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested data.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_transform_feedback3|VERSION_4_0", Version = "4.0", EntryPoint = "glGetQueryIndexediv")]
        public static extern void GetQueryIndexed(OpenTK.Graphics.OpenGL4.QueryTarget target, UInt32 index, OpenTK.Graphics.OpenGL4.GetQueryParam pname, [OutAttribute] out Int32 @params);

        /// <summary>[requires: v4.0 and ARB_transform_feedback3|VERSION_4_0]
        /// Return parameters of an indexed query object target
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies a query object target. Must be GL_SAMPLES_PASSED, GL_ANY_SAMPLES_PASSED, GL_ANY_SAMPLES_PASSED_CONSERVATIVE GL_PRIMITIVES_GENERATED, GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN, GL_TIME_ELAPSED, or GL_TIMESTAMP.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the query object target.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a query object target parameter. Accepted values are GL_CURRENT_QUERY or GL_QUERY_COUNTER_BITS.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested data.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_transform_feedback3|VERSION_4_0", Version = "4.0", EntryPoint = "glGetQueryIndexediv")]
        public static extern unsafe void GetQueryIndexed(OpenTK.Graphics.OpenGL4.QueryTarget target, UInt32 index, OpenTK.Graphics.OpenGL4.GetQueryParam pname, [OutAttribute] Int32* @params);

        /// <summary>[requires: v1.5]
        /// Return parameters of a query object target
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies a query object target. Must be GL_SAMPLES_PASSED, GL_ANY_SAMPLES_PASSED, GL_ANY_SAMPLES_PASSED_CONSERVATIVE GL_PRIMITIVES_GENERATED, GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN, GL_TIME_ELAPSED, or GL_TIMESTAMP.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a query object target parameter. Accepted values are GL_CURRENT_QUERY or GL_QUERY_COUNTER_BITS.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested data.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetQueryiv")]
        public static extern void GetQuery(OpenTK.Graphics.OpenGL4.QueryTarget target, OpenTK.Graphics.OpenGL4.GetQueryParam pname, [OutAttribute] Int32[] @params);

        /// <summary>[requires: v1.5]
        /// Return parameters of a query object target
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies a query object target. Must be GL_SAMPLES_PASSED, GL_ANY_SAMPLES_PASSED, GL_ANY_SAMPLES_PASSED_CONSERVATIVE GL_PRIMITIVES_GENERATED, GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN, GL_TIME_ELAPSED, or GL_TIMESTAMP.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a query object target parameter. Accepted values are GL_CURRENT_QUERY or GL_QUERY_COUNTER_BITS.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested data.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetQueryiv")]
        public static extern void GetQuery(OpenTK.Graphics.OpenGL4.QueryTarget target, OpenTK.Graphics.OpenGL4.GetQueryParam pname, [OutAttribute] out Int32 @params);

        /// <summary>[requires: v1.5]
        /// Return parameters of a query object target
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies a query object target. Must be GL_SAMPLES_PASSED, GL_ANY_SAMPLES_PASSED, GL_ANY_SAMPLES_PASSED_CONSERVATIVE GL_PRIMITIVES_GENERATED, GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN, GL_TIME_ELAPSED, or GL_TIMESTAMP.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a query object target parameter. Accepted values are GL_CURRENT_QUERY or GL_QUERY_COUNTER_BITS.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested data.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetQueryiv")]
        public static extern unsafe void GetQuery(OpenTK.Graphics.OpenGL4.QueryTarget target, OpenTK.Graphics.OpenGL4.GetQueryParam pname, [OutAttribute] Int32* @params);

        /// <summary>[requires: v3.3 and ARB_timer_query|VERSION_3_3]
        /// Return parameters of a query object
        /// </summary>
        /// <param name="id">
        /// <para>
        /// Specifies the name of a query object.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a query object parameter. Accepted values are GL_QUERY_RESULT or GL_QUERY_RESULT_AVAILABLE.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// If a buffer is bound to the GL_QUERY_RESULT_BUFFER target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to GL_QUERY_RESULT_BUFFER, then params is treated as an address in client memory of a variable to receive the resulting data.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_timer_query|VERSION_3_3", Version = "3.3", EntryPoint = "glGetQueryObjecti64v")]
        public static extern void GetQueryObject(Int32 id, OpenTK.Graphics.OpenGL4.GetQueryObjectParam pname, [OutAttribute] Int64[] @params);

        /// <summary>[requires: v3.3 and ARB_timer_query|VERSION_3_3]
        /// Return parameters of a query object
        /// </summary>
        /// <param name="id">
        /// <para>
        /// Specifies the name of a query object.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a query object parameter. Accepted values are GL_QUERY_RESULT or GL_QUERY_RESULT_AVAILABLE.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// If a buffer is bound to the GL_QUERY_RESULT_BUFFER target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to GL_QUERY_RESULT_BUFFER, then params is treated as an address in client memory of a variable to receive the resulting data.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_timer_query|VERSION_3_3", Version = "3.3", EntryPoint = "glGetQueryObjecti64v")]
        public static extern void GetQueryObject(Int32 id, OpenTK.Graphics.OpenGL4.GetQueryObjectParam pname, [OutAttribute] out Int64 @params);

        /// <summary>[requires: v3.3 and ARB_timer_query|VERSION_3_3]
        /// Return parameters of a query object
        /// </summary>
        /// <param name="id">
        /// <para>
        /// Specifies the name of a query object.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a query object parameter. Accepted values are GL_QUERY_RESULT or GL_QUERY_RESULT_AVAILABLE.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// If a buffer is bound to the GL_QUERY_RESULT_BUFFER target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to GL_QUERY_RESULT_BUFFER, then params is treated as an address in client memory of a variable to receive the resulting data.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_timer_query|VERSION_3_3", Version = "3.3", EntryPoint = "glGetQueryObjecti64v")]
        public static extern unsafe void GetQueryObject(Int32 id, OpenTK.Graphics.OpenGL4.GetQueryObjectParam pname, [OutAttribute] Int64* @params);

        /// <summary>[requires: v3.3 and ARB_timer_query|VERSION_3_3]
        /// Return parameters of a query object
        /// </summary>
        /// <param name="id">
        /// <para>
        /// Specifies the name of a query object.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a query object parameter. Accepted values are GL_QUERY_RESULT or GL_QUERY_RESULT_AVAILABLE.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// If a buffer is bound to the GL_QUERY_RESULT_BUFFER target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to GL_QUERY_RESULT_BUFFER, then params is treated as an address in client memory of a variable to receive the resulting data.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_timer_query|VERSION_3_3", Version = "3.3", EntryPoint = "glGetQueryObjecti64v")]
        public static extern void GetQueryObject(UInt32 id, OpenTK.Graphics.OpenGL4.GetQueryObjectParam pname, [OutAttribute] Int64[] @params);

        /// <summary>[requires: v3.3 and ARB_timer_query|VERSION_3_3]
        /// Return parameters of a query object
        /// </summary>
        /// <param name="id">
        /// <para>
        /// Specifies the name of a query object.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a query object parameter. Accepted values are GL_QUERY_RESULT or GL_QUERY_RESULT_AVAILABLE.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// If a buffer is bound to the GL_QUERY_RESULT_BUFFER target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to GL_QUERY_RESULT_BUFFER, then params is treated as an address in client memory of a variable to receive the resulting data.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_timer_query|VERSION_3_3", Version = "3.3", EntryPoint = "glGetQueryObjecti64v")]
        public static extern void GetQueryObject(UInt32 id, OpenTK.Graphics.OpenGL4.GetQueryObjectParam pname, [OutAttribute] out Int64 @params);

        /// <summary>[requires: v3.3 and ARB_timer_query|VERSION_3_3]
        /// Return parameters of a query object
        /// </summary>
        /// <param name="id">
        /// <para>
        /// Specifies the name of a query object.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a query object parameter. Accepted values are GL_QUERY_RESULT or GL_QUERY_RESULT_AVAILABLE.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// If a buffer is bound to the GL_QUERY_RESULT_BUFFER target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to GL_QUERY_RESULT_BUFFER, then params is treated as an address in client memory of a variable to receive the resulting data.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_timer_query|VERSION_3_3", Version = "3.3", EntryPoint = "glGetQueryObjecti64v")]
        public static extern unsafe void GetQueryObject(UInt32 id, OpenTK.Graphics.OpenGL4.GetQueryObjectParam pname, [OutAttribute] Int64* @params);

        /// <summary>[requires: v1.5]
        /// Return parameters of a query object
        /// </summary>
        /// <param name="id">
        /// <para>
        /// Specifies the name of a query object.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a query object parameter. Accepted values are GL_QUERY_RESULT or GL_QUERY_RESULT_AVAILABLE.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// If a buffer is bound to the GL_QUERY_RESULT_BUFFER target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to GL_QUERY_RESULT_BUFFER, then params is treated as an address in client memory of a variable to receive the resulting data.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetQueryObjectiv")]
        public static extern void GetQueryObject(Int32 id, OpenTK.Graphics.OpenGL4.GetQueryObjectParam pname, [OutAttribute] Int32[] @params);

        /// <summary>[requires: v1.5]
        /// Return parameters of a query object
        /// </summary>
        /// <param name="id">
        /// <para>
        /// Specifies the name of a query object.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a query object parameter. Accepted values are GL_QUERY_RESULT or GL_QUERY_RESULT_AVAILABLE.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// If a buffer is bound to the GL_QUERY_RESULT_BUFFER target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to GL_QUERY_RESULT_BUFFER, then params is treated as an address in client memory of a variable to receive the resulting data.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetQueryObjectiv")]
        public static extern void GetQueryObject(Int32 id, OpenTK.Graphics.OpenGL4.GetQueryObjectParam pname, [OutAttribute] out Int32 @params);

        /// <summary>[requires: v1.5]
        /// Return parameters of a query object
        /// </summary>
        /// <param name="id">
        /// <para>
        /// Specifies the name of a query object.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a query object parameter. Accepted values are GL_QUERY_RESULT or GL_QUERY_RESULT_AVAILABLE.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// If a buffer is bound to the GL_QUERY_RESULT_BUFFER target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to GL_QUERY_RESULT_BUFFER, then params is treated as an address in client memory of a variable to receive the resulting data.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetQueryObjectiv")]
        public static extern unsafe void GetQueryObject(Int32 id, OpenTK.Graphics.OpenGL4.GetQueryObjectParam pname, [OutAttribute] Int32* @params);

        /// <summary>[requires: v1.5]
        /// Return parameters of a query object
        /// </summary>
        /// <param name="id">
        /// <para>
        /// Specifies the name of a query object.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a query object parameter. Accepted values are GL_QUERY_RESULT or GL_QUERY_RESULT_AVAILABLE.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// If a buffer is bound to the GL_QUERY_RESULT_BUFFER target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to GL_QUERY_RESULT_BUFFER, then params is treated as an address in client memory of a variable to receive the resulting data.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetQueryObjectiv")]
        public static extern void GetQueryObject(UInt32 id, OpenTK.Graphics.OpenGL4.GetQueryObjectParam pname, [OutAttribute] Int32[] @params);

        /// <summary>[requires: v1.5]
        /// Return parameters of a query object
        /// </summary>
        /// <param name="id">
        /// <para>
        /// Specifies the name of a query object.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a query object parameter. Accepted values are GL_QUERY_RESULT or GL_QUERY_RESULT_AVAILABLE.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// If a buffer is bound to the GL_QUERY_RESULT_BUFFER target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to GL_QUERY_RESULT_BUFFER, then params is treated as an address in client memory of a variable to receive the resulting data.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetQueryObjectiv")]
        public static extern void GetQueryObject(UInt32 id, OpenTK.Graphics.OpenGL4.GetQueryObjectParam pname, [OutAttribute] out Int32 @params);

        /// <summary>[requires: v1.5]
        /// Return parameters of a query object
        /// </summary>
        /// <param name="id">
        /// <para>
        /// Specifies the name of a query object.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a query object parameter. Accepted values are GL_QUERY_RESULT or GL_QUERY_RESULT_AVAILABLE.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// If a buffer is bound to the GL_QUERY_RESULT_BUFFER target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to GL_QUERY_RESULT_BUFFER, then params is treated as an address in client memory of a variable to receive the resulting data.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetQueryObjectiv")]
        public static extern unsafe void GetQueryObject(UInt32 id, OpenTK.Graphics.OpenGL4.GetQueryObjectParam pname, [OutAttribute] Int32* @params);

        /// <summary>[requires: v3.3 and ARB_timer_query|VERSION_3_3]
        /// Return parameters of a query object
        /// </summary>
        /// <param name="id">
        /// <para>
        /// Specifies the name of a query object.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a query object parameter. Accepted values are GL_QUERY_RESULT or GL_QUERY_RESULT_AVAILABLE.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// If a buffer is bound to the GL_QUERY_RESULT_BUFFER target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to GL_QUERY_RESULT_BUFFER, then params is treated as an address in client memory of a variable to receive the resulting data.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_timer_query|VERSION_3_3", Version = "3.3", EntryPoint = "glGetQueryObjectui64v")]
        public static extern void GetQueryObject(UInt32 id, OpenTK.Graphics.OpenGL4.GetQueryObjectParam pname, [OutAttribute] UInt64[] @params);

        /// <summary>[requires: v3.3 and ARB_timer_query|VERSION_3_3]
        /// Return parameters of a query object
        /// </summary>
        /// <param name="id">
        /// <para>
        /// Specifies the name of a query object.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a query object parameter. Accepted values are GL_QUERY_RESULT or GL_QUERY_RESULT_AVAILABLE.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// If a buffer is bound to the GL_QUERY_RESULT_BUFFER target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to GL_QUERY_RESULT_BUFFER, then params is treated as an address in client memory of a variable to receive the resulting data.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_timer_query|VERSION_3_3", Version = "3.3", EntryPoint = "glGetQueryObjectui64v")]
        public static extern void GetQueryObject(UInt32 id, OpenTK.Graphics.OpenGL4.GetQueryObjectParam pname, [OutAttribute] out UInt64 @params);

        /// <summary>[requires: v3.3 and ARB_timer_query|VERSION_3_3]
        /// Return parameters of a query object
        /// </summary>
        /// <param name="id">
        /// <para>
        /// Specifies the name of a query object.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a query object parameter. Accepted values are GL_QUERY_RESULT or GL_QUERY_RESULT_AVAILABLE.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// If a buffer is bound to the GL_QUERY_RESULT_BUFFER target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to GL_QUERY_RESULT_BUFFER, then params is treated as an address in client memory of a variable to receive the resulting data.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_timer_query|VERSION_3_3", Version = "3.3", EntryPoint = "glGetQueryObjectui64v")]
        public static extern unsafe void GetQueryObject(UInt32 id, OpenTK.Graphics.OpenGL4.GetQueryObjectParam pname, [OutAttribute] UInt64* @params);

        /// <summary>[requires: v1.5]
        /// Return parameters of a query object
        /// </summary>
        /// <param name="id">
        /// <para>
        /// Specifies the name of a query object.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a query object parameter. Accepted values are GL_QUERY_RESULT or GL_QUERY_RESULT_AVAILABLE.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// If a buffer is bound to the GL_QUERY_RESULT_BUFFER target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to GL_QUERY_RESULT_BUFFER, then params is treated as an address in client memory of a variable to receive the resulting data.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetQueryObjectuiv")]
        public static extern void GetQueryObject(UInt32 id, OpenTK.Graphics.OpenGL4.GetQueryObjectParam pname, [OutAttribute] UInt32[] @params);

        /// <summary>[requires: v1.5]
        /// Return parameters of a query object
        /// </summary>
        /// <param name="id">
        /// <para>
        /// Specifies the name of a query object.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a query object parameter. Accepted values are GL_QUERY_RESULT or GL_QUERY_RESULT_AVAILABLE.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// If a buffer is bound to the GL_QUERY_RESULT_BUFFER target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to GL_QUERY_RESULT_BUFFER, then params is treated as an address in client memory of a variable to receive the resulting data.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetQueryObjectuiv")]
        public static extern void GetQueryObject(UInt32 id, OpenTK.Graphics.OpenGL4.GetQueryObjectParam pname, [OutAttribute] out UInt32 @params);

        /// <summary>[requires: v1.5]
        /// Return parameters of a query object
        /// </summary>
        /// <param name="id">
        /// <para>
        /// Specifies the name of a query object.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a query object parameter. Accepted values are GL_QUERY_RESULT or GL_QUERY_RESULT_AVAILABLE.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// If a buffer is bound to the GL_QUERY_RESULT_BUFFER target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to GL_QUERY_RESULT_BUFFER, then params is treated as an address in client memory of a variable to receive the resulting data.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetQueryObjectuiv")]
        public static extern unsafe void GetQueryObject(UInt32 id, OpenTK.Graphics.OpenGL4.GetQueryObjectParam pname, [OutAttribute] UInt32* @params);

        /// <summary>[requires: v3.0 and ARB_framebuffer_object|VERSION_3_0]
        /// Retrieve information about a bound renderbuffer object
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target of the query operation. target must be GL_RENDERBUFFER.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the parameter whose value to retrieve from the renderbuffer bound to target.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Specifies the address of an array to receive the value of the queried parameter.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glGetRenderbufferParameteriv")]
        public static extern void GetRenderbufferParameter(OpenTK.Graphics.OpenGL4.RenderbufferTarget target, OpenTK.Graphics.OpenGL4.RenderbufferParameterName pname, [OutAttribute] Int32[] @params);

        /// <summary>[requires: v3.0 and ARB_framebuffer_object|VERSION_3_0]
        /// Retrieve information about a bound renderbuffer object
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target of the query operation. target must be GL_RENDERBUFFER.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the parameter whose value to retrieve from the renderbuffer bound to target.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Specifies the address of an array to receive the value of the queried parameter.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glGetRenderbufferParameteriv")]
        public static extern void GetRenderbufferParameter(OpenTK.Graphics.OpenGL4.RenderbufferTarget target, OpenTK.Graphics.OpenGL4.RenderbufferParameterName pname, [OutAttribute] out Int32 @params);

        /// <summary>[requires: v3.0 and ARB_framebuffer_object|VERSION_3_0]
        /// Retrieve information about a bound renderbuffer object
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target of the query operation. target must be GL_RENDERBUFFER.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the parameter whose value to retrieve from the renderbuffer bound to target.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Specifies the address of an array to receive the value of the queried parameter.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glGetRenderbufferParameteriv")]
        public static extern unsafe void GetRenderbufferParameter(OpenTK.Graphics.OpenGL4.RenderbufferTarget target, OpenTK.Graphics.OpenGL4.RenderbufferParameterName pname, [OutAttribute] Int32* @params);

        /// <summary>[requires: v3.3 and ARB_sampler_objects|VERSION_3_3]
        /// Return sampler parameter values
        /// </summary>
        /// <param name="sampler">
        /// <para>
        /// Specifies name of the sampler object from which to retrieve parameters.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a sampler parameter. GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, GL_TEXTURE_LOD_BIAS, GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, GL_TEXTURE_WRAP_R, GL_TEXTURE_BORDER_COLOR, GL_TEXTURE_COMPARE_MODE, and GL_TEXTURE_COMPARE_FUNC are accepted.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the sampler parameters.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glGetSamplerParameterfv")]
        public static extern void GetSamplerParameter(Int32 sampler, OpenTK.Graphics.OpenGL4.SamplerParameterName pname, [OutAttribute] Single[] @params);

        /// <summary>[requires: v3.3 and ARB_sampler_objects|VERSION_3_3]
        /// Return sampler parameter values
        /// </summary>
        /// <param name="sampler">
        /// <para>
        /// Specifies name of the sampler object from which to retrieve parameters.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a sampler parameter. GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, GL_TEXTURE_LOD_BIAS, GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, GL_TEXTURE_WRAP_R, GL_TEXTURE_BORDER_COLOR, GL_TEXTURE_COMPARE_MODE, and GL_TEXTURE_COMPARE_FUNC are accepted.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the sampler parameters.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glGetSamplerParameterfv")]
        public static extern void GetSamplerParameter(Int32 sampler, OpenTK.Graphics.OpenGL4.SamplerParameterName pname, [OutAttribute] out Single @params);

        /// <summary>[requires: v3.3 and ARB_sampler_objects|VERSION_3_3]
        /// Return sampler parameter values
        /// </summary>
        /// <param name="sampler">
        /// <para>
        /// Specifies name of the sampler object from which to retrieve parameters.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a sampler parameter. GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, GL_TEXTURE_LOD_BIAS, GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, GL_TEXTURE_WRAP_R, GL_TEXTURE_BORDER_COLOR, GL_TEXTURE_COMPARE_MODE, and GL_TEXTURE_COMPARE_FUNC are accepted.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the sampler parameters.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glGetSamplerParameterfv")]
        public static extern unsafe void GetSamplerParameter(Int32 sampler, OpenTK.Graphics.OpenGL4.SamplerParameterName pname, [OutAttribute] Single* @params);

        /// <summary>[requires: v3.3 and ARB_sampler_objects|VERSION_3_3]
        /// Return sampler parameter values
        /// </summary>
        /// <param name="sampler">
        /// <para>
        /// Specifies name of the sampler object from which to retrieve parameters.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a sampler parameter. GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, GL_TEXTURE_LOD_BIAS, GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, GL_TEXTURE_WRAP_R, GL_TEXTURE_BORDER_COLOR, GL_TEXTURE_COMPARE_MODE, and GL_TEXTURE_COMPARE_FUNC are accepted.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the sampler parameters.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glGetSamplerParameterfv")]
        public static extern void GetSamplerParameter(UInt32 sampler, OpenTK.Graphics.OpenGL4.SamplerParameterName pname, [OutAttribute] Single[] @params);

        /// <summary>[requires: v3.3 and ARB_sampler_objects|VERSION_3_3]
        /// Return sampler parameter values
        /// </summary>
        /// <param name="sampler">
        /// <para>
        /// Specifies name of the sampler object from which to retrieve parameters.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a sampler parameter. GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, GL_TEXTURE_LOD_BIAS, GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, GL_TEXTURE_WRAP_R, GL_TEXTURE_BORDER_COLOR, GL_TEXTURE_COMPARE_MODE, and GL_TEXTURE_COMPARE_FUNC are accepted.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the sampler parameters.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glGetSamplerParameterfv")]
        public static extern void GetSamplerParameter(UInt32 sampler, OpenTK.Graphics.OpenGL4.SamplerParameterName pname, [OutAttribute] out Single @params);

        /// <summary>[requires: v3.3 and ARB_sampler_objects|VERSION_3_3]
        /// Return sampler parameter values
        /// </summary>
        /// <param name="sampler">
        /// <para>
        /// Specifies name of the sampler object from which to retrieve parameters.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a sampler parameter. GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, GL_TEXTURE_LOD_BIAS, GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, GL_TEXTURE_WRAP_R, GL_TEXTURE_BORDER_COLOR, GL_TEXTURE_COMPARE_MODE, and GL_TEXTURE_COMPARE_FUNC are accepted.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the sampler parameters.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glGetSamplerParameterfv")]
        public static extern unsafe void GetSamplerParameter(UInt32 sampler, OpenTK.Graphics.OpenGL4.SamplerParameterName pname, [OutAttribute] Single* @params);

        /// <summary>[requires: v3.3 and ARB_sampler_objects|VERSION_3_3]</summary>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glGetSamplerParameterIiv")]
        public static extern void GetSamplerParameterI(Int32 sampler, OpenTK.Graphics.OpenGL4.All pname, [OutAttribute] Int32[] @params);

        /// <summary>[requires: v3.3 and ARB_sampler_objects|VERSION_3_3]</summary>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glGetSamplerParameterIiv")]
        public static extern void GetSamplerParameterI(Int32 sampler, OpenTK.Graphics.OpenGL4.All pname, [OutAttribute] out Int32 @params);

        /// <summary>[requires: v3.3 and ARB_sampler_objects|VERSION_3_3]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glGetSamplerParameterIiv")]
        public static extern unsafe void GetSamplerParameterI(Int32 sampler, OpenTK.Graphics.OpenGL4.All pname, [OutAttribute] Int32* @params);

        /// <summary>[requires: v3.3 and ARB_sampler_objects|VERSION_3_3]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glGetSamplerParameterIiv")]
        public static extern void GetSamplerParameterI(UInt32 sampler, OpenTK.Graphics.OpenGL4.All pname, [OutAttribute] Int32[] @params);

        /// <summary>[requires: v3.3 and ARB_sampler_objects|VERSION_3_3]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glGetSamplerParameterIiv")]
        public static extern void GetSamplerParameterI(UInt32 sampler, OpenTK.Graphics.OpenGL4.All pname, [OutAttribute] out Int32 @params);

        /// <summary>[requires: v3.3 and ARB_sampler_objects|VERSION_3_3]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glGetSamplerParameterIiv")]
        public static extern unsafe void GetSamplerParameterI(UInt32 sampler, OpenTK.Graphics.OpenGL4.All pname, [OutAttribute] Int32* @params);

        /// <summary>[requires: v3.3 and ARB_sampler_objects|VERSION_3_3]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glGetSamplerParameterIuiv")]
        public static extern void GetSamplerParameterI(UInt32 sampler, OpenTK.Graphics.OpenGL4.All pname, [OutAttribute] UInt32[] @params);

        /// <summary>[requires: v3.3 and ARB_sampler_objects|VERSION_3_3]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glGetSamplerParameterIuiv")]
        public static extern void GetSamplerParameterI(UInt32 sampler, OpenTK.Graphics.OpenGL4.All pname, [OutAttribute] out UInt32 @params);

        /// <summary>[requires: v3.3 and ARB_sampler_objects|VERSION_3_3]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glGetSamplerParameterIuiv")]
        public static extern unsafe void GetSamplerParameterI(UInt32 sampler, OpenTK.Graphics.OpenGL4.All pname, [OutAttribute] UInt32* @params);

        /// <summary>[requires: v3.3 and ARB_sampler_objects|VERSION_3_3]
        /// Return sampler parameter values
        /// </summary>
        /// <param name="sampler">
        /// <para>
        /// Specifies name of the sampler object from which to retrieve parameters.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a sampler parameter. GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, GL_TEXTURE_LOD_BIAS, GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, GL_TEXTURE_WRAP_R, GL_TEXTURE_BORDER_COLOR, GL_TEXTURE_COMPARE_MODE, and GL_TEXTURE_COMPARE_FUNC are accepted.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the sampler parameters.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glGetSamplerParameteriv")]
        public static extern void GetSamplerParameter(Int32 sampler, OpenTK.Graphics.OpenGL4.SamplerParameterName pname, [OutAttribute] Int32[] @params);

        /// <summary>[requires: v3.3 and ARB_sampler_objects|VERSION_3_3]
        /// Return sampler parameter values
        /// </summary>
        /// <param name="sampler">
        /// <para>
        /// Specifies name of the sampler object from which to retrieve parameters.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a sampler parameter. GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, GL_TEXTURE_LOD_BIAS, GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, GL_TEXTURE_WRAP_R, GL_TEXTURE_BORDER_COLOR, GL_TEXTURE_COMPARE_MODE, and GL_TEXTURE_COMPARE_FUNC are accepted.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the sampler parameters.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glGetSamplerParameteriv")]
        public static extern void GetSamplerParameter(Int32 sampler, OpenTK.Graphics.OpenGL4.SamplerParameterName pname, [OutAttribute] out Int32 @params);

        /// <summary>[requires: v3.3 and ARB_sampler_objects|VERSION_3_3]
        /// Return sampler parameter values
        /// </summary>
        /// <param name="sampler">
        /// <para>
        /// Specifies name of the sampler object from which to retrieve parameters.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a sampler parameter. GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, GL_TEXTURE_LOD_BIAS, GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, GL_TEXTURE_WRAP_R, GL_TEXTURE_BORDER_COLOR, GL_TEXTURE_COMPARE_MODE, and GL_TEXTURE_COMPARE_FUNC are accepted.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the sampler parameters.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glGetSamplerParameteriv")]
        public static extern unsafe void GetSamplerParameter(Int32 sampler, OpenTK.Graphics.OpenGL4.SamplerParameterName pname, [OutAttribute] Int32* @params);

        /// <summary>[requires: v3.3 and ARB_sampler_objects|VERSION_3_3]
        /// Return sampler parameter values
        /// </summary>
        /// <param name="sampler">
        /// <para>
        /// Specifies name of the sampler object from which to retrieve parameters.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a sampler parameter. GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, GL_TEXTURE_LOD_BIAS, GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, GL_TEXTURE_WRAP_R, GL_TEXTURE_BORDER_COLOR, GL_TEXTURE_COMPARE_MODE, and GL_TEXTURE_COMPARE_FUNC are accepted.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the sampler parameters.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glGetSamplerParameteriv")]
        public static extern void GetSamplerParameter(UInt32 sampler, OpenTK.Graphics.OpenGL4.SamplerParameterName pname, [OutAttribute] Int32[] @params);

        /// <summary>[requires: v3.3 and ARB_sampler_objects|VERSION_3_3]
        /// Return sampler parameter values
        /// </summary>
        /// <param name="sampler">
        /// <para>
        /// Specifies name of the sampler object from which to retrieve parameters.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a sampler parameter. GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, GL_TEXTURE_LOD_BIAS, GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, GL_TEXTURE_WRAP_R, GL_TEXTURE_BORDER_COLOR, GL_TEXTURE_COMPARE_MODE, and GL_TEXTURE_COMPARE_FUNC are accepted.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the sampler parameters.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glGetSamplerParameteriv")]
        public static extern void GetSamplerParameter(UInt32 sampler, OpenTK.Graphics.OpenGL4.SamplerParameterName pname, [OutAttribute] out Int32 @params);

        /// <summary>[requires: v3.3 and ARB_sampler_objects|VERSION_3_3]
        /// Return sampler parameter values
        /// </summary>
        /// <param name="sampler">
        /// <para>
        /// Specifies name of the sampler object from which to retrieve parameters.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a sampler parameter. GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, GL_TEXTURE_LOD_BIAS, GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, GL_TEXTURE_WRAP_R, GL_TEXTURE_BORDER_COLOR, GL_TEXTURE_COMPARE_MODE, and GL_TEXTURE_COMPARE_FUNC are accepted.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the sampler parameters.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glGetSamplerParameteriv")]
        public static extern unsafe void GetSamplerParameter(UInt32 sampler, OpenTK.Graphics.OpenGL4.SamplerParameterName pname, [OutAttribute] Int32* @params);

        /// <summary>
        /// Get separable convolution filter kernel images
        /// </summary>
        /// <param name="target">
        /// <para>
        /// The separable filter to be retrieved. Must be GL_SEPARABLE_2D.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Format of the output images. Must be one of GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR GL_RGBA, GL_BGRA, GL_LUMINANCE, or GL_LUMINANCE_ALPHA.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Data type of components in the output images. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
        /// </para>
        /// </param>
        /// <param name="row">
        /// <para>
        /// Pointer to storage for the row filter image.
        /// </para>
        /// </param>
        /// <param name="column">
        /// <para>
        /// Pointer to storage for the column filter image.
        /// </para>
        /// </param>
        /// <param name="span">
        /// <para>
        /// Pointer to storage for the span filter image (currently unused).
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetSeparableFilter")]
        public static extern void GetSeparableFilter(OpenTK.Graphics.OpenGL4.SeparableTarget target, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [OutAttribute] IntPtr row, [OutAttribute] IntPtr column, [OutAttribute] IntPtr span);

        /// <summary>
        /// Get separable convolution filter kernel images
        /// </summary>
        /// <param name="target">
        /// <para>
        /// The separable filter to be retrieved. Must be GL_SEPARABLE_2D.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Format of the output images. Must be one of GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR GL_RGBA, GL_BGRA, GL_LUMINANCE, or GL_LUMINANCE_ALPHA.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Data type of components in the output images. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
        /// </para>
        /// </param>
        /// <param name="row">
        /// <para>
        /// Pointer to storage for the row filter image.
        /// </para>
        /// </param>
        /// <param name="column">
        /// <para>
        /// Pointer to storage for the column filter image.
        /// </para>
        /// </param>
        /// <param name="span">
        /// <para>
        /// Pointer to storage for the span filter image (currently unused).
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetSeparableFilter")]
        public static extern void GetSeparableFilter<T3,T4,T5>(OpenTK.Graphics.OpenGL4.SeparableTarget target, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute] T3[] row, [InAttribute, OutAttribute] T4[] column, [InAttribute, OutAttribute] T5[] span)
            where T3 : struct
            where T4 : struct
            where T5 : struct
        ;

        /// <summary>
        /// Get separable convolution filter kernel images
        /// </summary>
        /// <param name="target">
        /// <para>
        /// The separable filter to be retrieved. Must be GL_SEPARABLE_2D.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Format of the output images. Must be one of GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR GL_RGBA, GL_BGRA, GL_LUMINANCE, or GL_LUMINANCE_ALPHA.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Data type of components in the output images. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
        /// </para>
        /// </param>
        /// <param name="row">
        /// <para>
        /// Pointer to storage for the row filter image.
        /// </para>
        /// </param>
        /// <param name="column">
        /// <para>
        /// Pointer to storage for the column filter image.
        /// </para>
        /// </param>
        /// <param name="span">
        /// <para>
        /// Pointer to storage for the span filter image (currently unused).
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetSeparableFilter")]
        public static extern void GetSeparableFilter<T3,T4,T5>(OpenTK.Graphics.OpenGL4.SeparableTarget target, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute] T3[,] row, [InAttribute, OutAttribute] T4[,] column, [InAttribute, OutAttribute] T5[,] span)
            where T3 : struct
            where T4 : struct
            where T5 : struct
        ;

        /// <summary>
        /// Get separable convolution filter kernel images
        /// </summary>
        /// <param name="target">
        /// <para>
        /// The separable filter to be retrieved. Must be GL_SEPARABLE_2D.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Format of the output images. Must be one of GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR GL_RGBA, GL_BGRA, GL_LUMINANCE, or GL_LUMINANCE_ALPHA.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Data type of components in the output images. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
        /// </para>
        /// </param>
        /// <param name="row">
        /// <para>
        /// Pointer to storage for the row filter image.
        /// </para>
        /// </param>
        /// <param name="column">
        /// <para>
        /// Pointer to storage for the column filter image.
        /// </para>
        /// </param>
        /// <param name="span">
        /// <para>
        /// Pointer to storage for the span filter image (currently unused).
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetSeparableFilter")]
        public static extern void GetSeparableFilter<T3,T4,T5>(OpenTK.Graphics.OpenGL4.SeparableTarget target, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute] T3[,,] row, [InAttribute, OutAttribute] T4[,,] column, [InAttribute, OutAttribute] T5[,,] span)
            where T3 : struct
            where T4 : struct
            where T5 : struct
        ;

        /// <summary>
        /// Get separable convolution filter kernel images
        /// </summary>
        /// <param name="target">
        /// <para>
        /// The separable filter to be retrieved. Must be GL_SEPARABLE_2D.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Format of the output images. Must be one of GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR GL_RGBA, GL_BGRA, GL_LUMINANCE, or GL_LUMINANCE_ALPHA.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Data type of components in the output images. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
        /// </para>
        /// </param>
        /// <param name="row">
        /// <para>
        /// Pointer to storage for the row filter image.
        /// </para>
        /// </param>
        /// <param name="column">
        /// <para>
        /// Pointer to storage for the column filter image.
        /// </para>
        /// </param>
        /// <param name="span">
        /// <para>
        /// Pointer to storage for the span filter image (currently unused).
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetSeparableFilter")]
        public static extern void GetSeparableFilter<T3,T4,T5>(OpenTK.Graphics.OpenGL4.SeparableTarget target, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute] ref T3 row, [InAttribute, OutAttribute] ref T4 column, [InAttribute, OutAttribute] ref T5 span)
            where T3 : struct
            where T4 : struct
            where T5 : struct
        ;

        /// <summary>[requires: v2.0]
        /// Returns the information log for a shader object
        /// </summary>
        /// <param name="shader">
        /// <para>
        /// Specifies the shader object whose information log is to be queried.
        /// </para>
        /// </param>
        /// <param name="maxLength">
        /// <para>
        /// Specifies the size of the character buffer for storing the returned information log.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Returns the length of the string returned in infoLog (excluding the null terminator).
        /// </para>
        /// </param>
        /// <param name="infoLog">
        /// <para>
        /// Specifies an array of characters that is used to return the information log.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderInfoLog")]
        public static extern void GetShaderInfoLog(Int32 shader, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder infoLog);

        /// <summary>[requires: v2.0]
        /// Returns the information log for a shader object
        /// </summary>
        /// <param name="shader">
        /// <para>
        /// Specifies the shader object whose information log is to be queried.
        /// </para>
        /// </param>
        /// <param name="maxLength">
        /// <para>
        /// Specifies the size of the character buffer for storing the returned information log.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Returns the length of the string returned in infoLog (excluding the null terminator).
        /// </para>
        /// </param>
        /// <param name="infoLog">
        /// <para>
        /// Specifies an array of characters that is used to return the information log.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderInfoLog")]
        public static extern unsafe void GetShaderInfoLog(Int32 shader, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder infoLog);

        /// <summary>[requires: v2.0]
        /// Returns the information log for a shader object
        /// </summary>
        /// <param name="shader">
        /// <para>
        /// Specifies the shader object whose information log is to be queried.
        /// </para>
        /// </param>
        /// <param name="maxLength">
        /// <para>
        /// Specifies the size of the character buffer for storing the returned information log.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Returns the length of the string returned in infoLog (excluding the null terminator).
        /// </para>
        /// </param>
        /// <param name="infoLog">
        /// <para>
        /// Specifies an array of characters that is used to return the information log.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderInfoLog")]
        public static extern void GetShaderInfoLog(UInt32 shader, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder infoLog);

        /// <summary>[requires: v2.0]
        /// Returns the information log for a shader object
        /// </summary>
        /// <param name="shader">
        /// <para>
        /// Specifies the shader object whose information log is to be queried.
        /// </para>
        /// </param>
        /// <param name="maxLength">
        /// <para>
        /// Specifies the size of the character buffer for storing the returned information log.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Returns the length of the string returned in infoLog (excluding the null terminator).
        /// </para>
        /// </param>
        /// <param name="infoLog">
        /// <para>
        /// Specifies an array of characters that is used to return the information log.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderInfoLog")]
        public static extern unsafe void GetShaderInfoLog(UInt32 shader, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder infoLog);

        /// <summary>[requires: v2.0]
        /// Returns a parameter from a shader object
        /// </summary>
        /// <param name="shader">
        /// <para>
        /// Specifies the shader object to be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the object parameter. Accepted symbolic names are GL_SHADER_TYPE, GL_DELETE_STATUS, GL_COMPILE_STATUS, GL_INFO_LOG_LENGTH, GL_SHADER_SOURCE_LENGTH.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested object parameter.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderiv")]
        public static extern void GetShader(Int32 shader, OpenTK.Graphics.OpenGL4.ShaderParameter pname, [OutAttribute] Int32[] @params);

        /// <summary>[requires: v2.0]
        /// Returns a parameter from a shader object
        /// </summary>
        /// <param name="shader">
        /// <para>
        /// Specifies the shader object to be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the object parameter. Accepted symbolic names are GL_SHADER_TYPE, GL_DELETE_STATUS, GL_COMPILE_STATUS, GL_INFO_LOG_LENGTH, GL_SHADER_SOURCE_LENGTH.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested object parameter.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderiv")]
        public static extern void GetShader(Int32 shader, OpenTK.Graphics.OpenGL4.ShaderParameter pname, [OutAttribute] out Int32 @params);

        /// <summary>[requires: v2.0]
        /// Returns a parameter from a shader object
        /// </summary>
        /// <param name="shader">
        /// <para>
        /// Specifies the shader object to be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the object parameter. Accepted symbolic names are GL_SHADER_TYPE, GL_DELETE_STATUS, GL_COMPILE_STATUS, GL_INFO_LOG_LENGTH, GL_SHADER_SOURCE_LENGTH.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested object parameter.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderiv")]
        public static extern unsafe void GetShader(Int32 shader, OpenTK.Graphics.OpenGL4.ShaderParameter pname, [OutAttribute] Int32* @params);

        /// <summary>[requires: v2.0]
        /// Returns a parameter from a shader object
        /// </summary>
        /// <param name="shader">
        /// <para>
        /// Specifies the shader object to be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the object parameter. Accepted symbolic names are GL_SHADER_TYPE, GL_DELETE_STATUS, GL_COMPILE_STATUS, GL_INFO_LOG_LENGTH, GL_SHADER_SOURCE_LENGTH.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested object parameter.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderiv")]
        public static extern void GetShader(UInt32 shader, OpenTK.Graphics.OpenGL4.ShaderParameter pname, [OutAttribute] Int32[] @params);

        /// <summary>[requires: v2.0]
        /// Returns a parameter from a shader object
        /// </summary>
        /// <param name="shader">
        /// <para>
        /// Specifies the shader object to be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the object parameter. Accepted symbolic names are GL_SHADER_TYPE, GL_DELETE_STATUS, GL_COMPILE_STATUS, GL_INFO_LOG_LENGTH, GL_SHADER_SOURCE_LENGTH.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested object parameter.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderiv")]
        public static extern void GetShader(UInt32 shader, OpenTK.Graphics.OpenGL4.ShaderParameter pname, [OutAttribute] out Int32 @params);

        /// <summary>[requires: v2.0]
        /// Returns a parameter from a shader object
        /// </summary>
        /// <param name="shader">
        /// <para>
        /// Specifies the shader object to be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the object parameter. Accepted symbolic names are GL_SHADER_TYPE, GL_DELETE_STATUS, GL_COMPILE_STATUS, GL_INFO_LOG_LENGTH, GL_SHADER_SOURCE_LENGTH.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested object parameter.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderiv")]
        public static extern unsafe void GetShader(UInt32 shader, OpenTK.Graphics.OpenGL4.ShaderParameter pname, [OutAttribute] Int32* @params);

        /// <summary>[requires: v4.1 and ARB_ES2_compatibility|VERSION_4_1]
        /// Retrieve the range and precision for numeric formats supported by the shader compiler
        /// </summary>
        /// <param name="shaderType">
        /// <para>
        /// Specifies the type of shader whose precision to query. shaderType must be GL_VERTEX_SHADER or GL_FRAGMENT_SHADER.
        /// </para>
        /// </param>
        /// <param name="precisionType">
        /// <para>
        /// Specifies the numeric format whose precision and range to query.
        /// </para>
        /// </param>
        /// <param name="range">
        /// <para>
        /// Specifies the address of array of two integers into which encodings of the implementation's numeric range are returned.
        /// </para>
        /// </param>
        /// <param name="precision">
        /// <para>
        /// Specifies the address of an integer into which the numeric precision of the implementation is written.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_ES2_compatibility|VERSION_4_1", Version = "4.1", EntryPoint = "glGetShaderPrecisionFormat")]
        public static extern void GetShaderPrecisionFormat(OpenTK.Graphics.OpenGL4.ShaderType shadertype, OpenTK.Graphics.OpenGL4.ShaderPrecision precisiontype, [OutAttribute] Int32[] range, [OutAttribute] Int32[] precision);

        /// <summary>[requires: v4.1 and ARB_ES2_compatibility|VERSION_4_1]
        /// Retrieve the range and precision for numeric formats supported by the shader compiler
        /// </summary>
        /// <param name="shaderType">
        /// <para>
        /// Specifies the type of shader whose precision to query. shaderType must be GL_VERTEX_SHADER or GL_FRAGMENT_SHADER.
        /// </para>
        /// </param>
        /// <param name="precisionType">
        /// <para>
        /// Specifies the numeric format whose precision and range to query.
        /// </para>
        /// </param>
        /// <param name="range">
        /// <para>
        /// Specifies the address of array of two integers into which encodings of the implementation's numeric range are returned.
        /// </para>
        /// </param>
        /// <param name="precision">
        /// <para>
        /// Specifies the address of an integer into which the numeric precision of the implementation is written.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_ES2_compatibility|VERSION_4_1", Version = "4.1", EntryPoint = "glGetShaderPrecisionFormat")]
        public static extern void GetShaderPrecisionFormat(OpenTK.Graphics.OpenGL4.ShaderType shadertype, OpenTK.Graphics.OpenGL4.ShaderPrecision precisiontype, [OutAttribute] out Int32 range, [OutAttribute] out Int32 precision);

        /// <summary>[requires: v4.1 and ARB_ES2_compatibility|VERSION_4_1]
        /// Retrieve the range and precision for numeric formats supported by the shader compiler
        /// </summary>
        /// <param name="shaderType">
        /// <para>
        /// Specifies the type of shader whose precision to query. shaderType must be GL_VERTEX_SHADER or GL_FRAGMENT_SHADER.
        /// </para>
        /// </param>
        /// <param name="precisionType">
        /// <para>
        /// Specifies the numeric format whose precision and range to query.
        /// </para>
        /// </param>
        /// <param name="range">
        /// <para>
        /// Specifies the address of array of two integers into which encodings of the implementation's numeric range are returned.
        /// </para>
        /// </param>
        /// <param name="precision">
        /// <para>
        /// Specifies the address of an integer into which the numeric precision of the implementation is written.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_ES2_compatibility|VERSION_4_1", Version = "4.1", EntryPoint = "glGetShaderPrecisionFormat")]
        public static extern unsafe void GetShaderPrecisionFormat(OpenTK.Graphics.OpenGL4.ShaderType shadertype, OpenTK.Graphics.OpenGL4.ShaderPrecision precisiontype, [OutAttribute] Int32* range, [OutAttribute] Int32* precision);

        /// <summary>[requires: v2.0]
        /// Returns the source code string from a shader object
        /// </summary>
        /// <param name="shader">
        /// <para>
        /// Specifies the shader object to be queried.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the size of the character buffer for storing the returned source code string.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Returns the length of the string returned in source (excluding the null terminator).
        /// </para>
        /// </param>
        /// <param name="source">
        /// <para>
        /// Specifies an array of characters that is used to return the source code string.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderSource")]
        public static extern void GetShaderSource(Int32 shader, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder source);

        /// <summary>[requires: v2.0]
        /// Returns the source code string from a shader object
        /// </summary>
        /// <param name="shader">
        /// <para>
        /// Specifies the shader object to be queried.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the size of the character buffer for storing the returned source code string.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Returns the length of the string returned in source (excluding the null terminator).
        /// </para>
        /// </param>
        /// <param name="source">
        /// <para>
        /// Specifies an array of characters that is used to return the source code string.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderSource")]
        public static extern unsafe void GetShaderSource(Int32 shader, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder source);

        /// <summary>[requires: v2.0]
        /// Returns the source code string from a shader object
        /// </summary>
        /// <param name="shader">
        /// <para>
        /// Specifies the shader object to be queried.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the size of the character buffer for storing the returned source code string.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Returns the length of the string returned in source (excluding the null terminator).
        /// </para>
        /// </param>
        /// <param name="source">
        /// <para>
        /// Specifies an array of characters that is used to return the source code string.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderSource")]
        public static extern void GetShaderSource(UInt32 shader, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder source);

        /// <summary>[requires: v2.0]
        /// Returns the source code string from a shader object
        /// </summary>
        /// <param name="shader">
        /// <para>
        /// Specifies the shader object to be queried.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the size of the character buffer for storing the returned source code string.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Returns the length of the string returned in source (excluding the null terminator).
        /// </para>
        /// </param>
        /// <param name="source">
        /// <para>
        /// Specifies an array of characters that is used to return the source code string.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderSource")]
        public static extern unsafe void GetShaderSource(UInt32 shader, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder source);

        /// <summary>[requires: v1.0]
        /// Return a string describing the current GL connection
        /// </summary>
        /// <param name="name">
        /// <para>
        /// Specifies a symbolic constant, one of GL_VENDOR, GL_RENDERER, GL_VERSION, or GL_SHADING_LANGUAGE_VERSION. Additionally, glGetStringi accepts the GL_EXTENSIONS token.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// For glGetStringi, specifies the index of the string to return.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetString")]
        public static extern String GetString(OpenTK.Graphics.OpenGL4.StringName name);

        /// <summary>[requires: v3.0]
        /// Return a string describing the current GL connection
        /// </summary>
        /// <param name="name">
        /// <para>
        /// Specifies a symbolic constant, one of GL_VENDOR, GL_RENDERER, GL_VERSION, or GL_SHADING_LANGUAGE_VERSION. Additionally, glGetStringi accepts the GL_EXTENSIONS token.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// For glGetStringi, specifies the index of the string to return.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetStringi")]
        public static extern String GetString(OpenTK.Graphics.OpenGL4.StringNameIndexed name, Int32 index);

        /// <summary>[requires: v3.0]
        /// Return a string describing the current GL connection
        /// </summary>
        /// <param name="name">
        /// <para>
        /// Specifies a symbolic constant, one of GL_VENDOR, GL_RENDERER, GL_VERSION, or GL_SHADING_LANGUAGE_VERSION. Additionally, glGetStringi accepts the GL_EXTENSIONS token.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// For glGetStringi, specifies the index of the string to return.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetStringi")]
        public static extern String GetString(OpenTK.Graphics.OpenGL4.StringNameIndexed name, UInt32 index);

        /// <summary>[requires: v4.0 and ARB_shader_subroutine|VERSION_4_0]
        /// Retrieve the index of a subroutine uniform of a given shader stage within a program
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the name of the program containing shader stage.
        /// </para>
        /// </param>
        /// <param name="shadertype">
        /// <para>
        /// Specifies the shader stage from which to query for subroutine uniform index. shadertype must be one of GL_VERTEX_SHADER, GL_TESS_CONTROL_SHADER, GL_TESS_EVALUATION_SHADER, GL_GEOMETRY_SHADER or GL_FRAGMENT_SHADER.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// Specifies the name of the subroutine uniform whose index to query.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_shader_subroutine|VERSION_4_0", Version = "4.0", EntryPoint = "glGetSubroutineIndex")]
        public static extern Int32 GetSubroutineIndex(Int32 program, OpenTK.Graphics.OpenGL4.ShaderType shadertype, String name);

        /// <summary>[requires: v4.0 and ARB_shader_subroutine|VERSION_4_0]
        /// Retrieve the index of a subroutine uniform of a given shader stage within a program
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the name of the program containing shader stage.
        /// </para>
        /// </param>
        /// <param name="shadertype">
        /// <para>
        /// Specifies the shader stage from which to query for subroutine uniform index. shadertype must be one of GL_VERTEX_SHADER, GL_TESS_CONTROL_SHADER, GL_TESS_EVALUATION_SHADER, GL_GEOMETRY_SHADER or GL_FRAGMENT_SHADER.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// Specifies the name of the subroutine uniform whose index to query.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_shader_subroutine|VERSION_4_0", Version = "4.0", EntryPoint = "glGetSubroutineIndex")]
        public static extern Int32 GetSubroutineIndex(UInt32 program, OpenTK.Graphics.OpenGL4.ShaderType shadertype, String name);

        /// <summary>[requires: v4.0 and ARB_shader_subroutine|VERSION_4_0]
        /// Retrieve the location of a subroutine uniform of a given shader stage within a program
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the name of the program containing shader stage.
        /// </para>
        /// </param>
        /// <param name="shadertype">
        /// <para>
        /// Specifies the shader stage from which to query for subroutine uniform index. shadertype must be one of GL_VERTEX_SHADER, GL_TESS_CONTROL_SHADER, GL_TESS_EVALUATION_SHADER, GL_GEOMETRY_SHADER or GL_FRAGMENT_SHADER.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// Specifies the name of the subroutine uniform whose index to query.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_shader_subroutine|VERSION_4_0", Version = "4.0", EntryPoint = "glGetSubroutineUniformLocation")]
        public static extern Int32 GetSubroutineUniformLocation(Int32 program, OpenTK.Graphics.OpenGL4.ShaderType shadertype, String name);

        /// <summary>[requires: v4.0 and ARB_shader_subroutine|VERSION_4_0]
        /// Retrieve the location of a subroutine uniform of a given shader stage within a program
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the name of the program containing shader stage.
        /// </para>
        /// </param>
        /// <param name="shadertype">
        /// <para>
        /// Specifies the shader stage from which to query for subroutine uniform index. shadertype must be one of GL_VERTEX_SHADER, GL_TESS_CONTROL_SHADER, GL_TESS_EVALUATION_SHADER, GL_GEOMETRY_SHADER or GL_FRAGMENT_SHADER.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// Specifies the name of the subroutine uniform whose index to query.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_shader_subroutine|VERSION_4_0", Version = "4.0", EntryPoint = "glGetSubroutineUniformLocation")]
        public static extern Int32 GetSubroutineUniformLocation(UInt32 program, OpenTK.Graphics.OpenGL4.ShaderType shadertype, String name);

        /// <summary>[requires: v3.2 and ARB_sync|VERSION_3_2]
        /// Query the properties of a sync object
        /// </summary>
        /// <param name="sync">
        /// <para>
        /// Specifies the sync object whose properties to query.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the parameter whose value to retrieve from the sync object specified in sync.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the size of the buffer whose address is given in values.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the address of an variable to receive the number of integers placed in values.
        /// </para>
        /// </param>
        /// <param name="values">
        /// <para>
        /// Specifies the address of an array to receive the values of the queried parameter.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_sync|VERSION_3_2", Version = "3.2", EntryPoint = "glGetSynciv")]
        public static extern void GetSync(IntPtr sync, OpenTK.Graphics.OpenGL4.SyncParameterName pname, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] Int32[] values);

        /// <summary>[requires: v3.2 and ARB_sync|VERSION_3_2]
        /// Query the properties of a sync object
        /// </summary>
        /// <param name="sync">
        /// <para>
        /// Specifies the sync object whose properties to query.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the parameter whose value to retrieve from the sync object specified in sync.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the size of the buffer whose address is given in values.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the address of an variable to receive the number of integers placed in values.
        /// </para>
        /// </param>
        /// <param name="values">
        /// <para>
        /// Specifies the address of an array to receive the values of the queried parameter.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_sync|VERSION_3_2", Version = "3.2", EntryPoint = "glGetSynciv")]
        public static extern void GetSync(IntPtr sync, OpenTK.Graphics.OpenGL4.SyncParameterName pname, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] out Int32 values);

        /// <summary>[requires: v3.2 and ARB_sync|VERSION_3_2]
        /// Query the properties of a sync object
        /// </summary>
        /// <param name="sync">
        /// <para>
        /// Specifies the sync object whose properties to query.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the parameter whose value to retrieve from the sync object specified in sync.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the size of the buffer whose address is given in values.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the address of an variable to receive the number of integers placed in values.
        /// </para>
        /// </param>
        /// <param name="values">
        /// <para>
        /// Specifies the address of an array to receive the values of the queried parameter.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_sync|VERSION_3_2", Version = "3.2", EntryPoint = "glGetSynciv")]
        public static extern unsafe void GetSync(IntPtr sync, OpenTK.Graphics.OpenGL4.SyncParameterName pname, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] Int32* values);

        /// <summary>[requires: v1.0]
        /// Return a texture image
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies which texture is to be obtained. GL_TEXTURE_1D, GL_TEXTURE_2D, GL_TEXTURE_3D, GL_TEXTURE_1D_ARRAY, GL_TEXTURE_2D_ARRAY, GL_TEXTURE_RECTANGLE, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, and GL_TEXTURE_CUBE_MAP_NEGATIVE_Z are accepted.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number of the desired image. Level 0 is the base image level. Level is the th mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies a pixel format for the returned data. The supported formats are GL_STENCIL_INDEX, GL_DEPTH_COMPONENT, GL_DEPTH_STENCIL, GL_RED, GL_GREEN, GL_BLUE, GL_RG, GL_RGB, GL_RGBA, GL_BGR, GL_BGRA, GL_RED_INTEGER, GL_GREEN_INTEGER, GL_BLUE_INTEGER, GL_RG_INTEGER, GL_RGB_INTEGER, GL_RGBA_INTEGER, GL_BGR_INTEGER, GL_BGRA_INTEGER.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies a pixel type for the returned data. The supported types are GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_HALF_FLOAT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, GL_UNSIGNED_INT_2_10_10_10_REV, GL_UNSIGNED_INT_24_8, GL_UNSIGNED_INT_10F_11F_11F_REV, GL_UNSIGNED_INT_5_9_9_9_REV, and GL_FLOAT_32_UNSIGNED_INT_24_8_REV.
        /// </para>
        /// </param>
        /// <param name="img">
        /// <para>
        /// Returns the texture image. Should be a pointer to an array of the type specified by type.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexImage")]
        public static extern void GetTexImage(OpenTK.Graphics.OpenGL4.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [OutAttribute] IntPtr pixels);

        /// <summary>[requires: v1.0]
        /// Return a texture image
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies which texture is to be obtained. GL_TEXTURE_1D, GL_TEXTURE_2D, GL_TEXTURE_3D, GL_TEXTURE_1D_ARRAY, GL_TEXTURE_2D_ARRAY, GL_TEXTURE_RECTANGLE, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, and GL_TEXTURE_CUBE_MAP_NEGATIVE_Z are accepted.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number of the desired image. Level 0 is the base image level. Level is the th mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies a pixel format for the returned data. The supported formats are GL_STENCIL_INDEX, GL_DEPTH_COMPONENT, GL_DEPTH_STENCIL, GL_RED, GL_GREEN, GL_BLUE, GL_RG, GL_RGB, GL_RGBA, GL_BGR, GL_BGRA, GL_RED_INTEGER, GL_GREEN_INTEGER, GL_BLUE_INTEGER, GL_RG_INTEGER, GL_RGB_INTEGER, GL_RGBA_INTEGER, GL_BGR_INTEGER, GL_BGRA_INTEGER.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies a pixel type for the returned data. The supported types are GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_HALF_FLOAT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, GL_UNSIGNED_INT_2_10_10_10_REV, GL_UNSIGNED_INT_24_8, GL_UNSIGNED_INT_10F_11F_11F_REV, GL_UNSIGNED_INT_5_9_9_9_REV, and GL_FLOAT_32_UNSIGNED_INT_24_8_REV.
        /// </para>
        /// </param>
        /// <param name="img">
        /// <para>
        /// Returns the texture image. Should be a pointer to an array of the type specified by type.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexImage")]
        public static extern void GetTexImage<T4>(OpenTK.Graphics.OpenGL4.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute] T4[] pixels)
            where T4 : struct
        ;

        /// <summary>[requires: v1.0]
        /// Return a texture image
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies which texture is to be obtained. GL_TEXTURE_1D, GL_TEXTURE_2D, GL_TEXTURE_3D, GL_TEXTURE_1D_ARRAY, GL_TEXTURE_2D_ARRAY, GL_TEXTURE_RECTANGLE, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, and GL_TEXTURE_CUBE_MAP_NEGATIVE_Z are accepted.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number of the desired image. Level 0 is the base image level. Level is the th mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies a pixel format for the returned data. The supported formats are GL_STENCIL_INDEX, GL_DEPTH_COMPONENT, GL_DEPTH_STENCIL, GL_RED, GL_GREEN, GL_BLUE, GL_RG, GL_RGB, GL_RGBA, GL_BGR, GL_BGRA, GL_RED_INTEGER, GL_GREEN_INTEGER, GL_BLUE_INTEGER, GL_RG_INTEGER, GL_RGB_INTEGER, GL_RGBA_INTEGER, GL_BGR_INTEGER, GL_BGRA_INTEGER.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies a pixel type for the returned data. The supported types are GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_HALF_FLOAT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, GL_UNSIGNED_INT_2_10_10_10_REV, GL_UNSIGNED_INT_24_8, GL_UNSIGNED_INT_10F_11F_11F_REV, GL_UNSIGNED_INT_5_9_9_9_REV, and GL_FLOAT_32_UNSIGNED_INT_24_8_REV.
        /// </para>
        /// </param>
        /// <param name="img">
        /// <para>
        /// Returns the texture image. Should be a pointer to an array of the type specified by type.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexImage")]
        public static extern void GetTexImage<T4>(OpenTK.Graphics.OpenGL4.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute] T4[,] pixels)
            where T4 : struct
        ;

        /// <summary>[requires: v1.0]
        /// Return a texture image
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies which texture is to be obtained. GL_TEXTURE_1D, GL_TEXTURE_2D, GL_TEXTURE_3D, GL_TEXTURE_1D_ARRAY, GL_TEXTURE_2D_ARRAY, GL_TEXTURE_RECTANGLE, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, and GL_TEXTURE_CUBE_MAP_NEGATIVE_Z are accepted.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number of the desired image. Level 0 is the base image level. Level is the th mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies a pixel format for the returned data. The supported formats are GL_STENCIL_INDEX, GL_DEPTH_COMPONENT, GL_DEPTH_STENCIL, GL_RED, GL_GREEN, GL_BLUE, GL_RG, GL_RGB, GL_RGBA, GL_BGR, GL_BGRA, GL_RED_INTEGER, GL_GREEN_INTEGER, GL_BLUE_INTEGER, GL_RG_INTEGER, GL_RGB_INTEGER, GL_RGBA_INTEGER, GL_BGR_INTEGER, GL_BGRA_INTEGER.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies a pixel type for the returned data. The supported types are GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_HALF_FLOAT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, GL_UNSIGNED_INT_2_10_10_10_REV, GL_UNSIGNED_INT_24_8, GL_UNSIGNED_INT_10F_11F_11F_REV, GL_UNSIGNED_INT_5_9_9_9_REV, and GL_FLOAT_32_UNSIGNED_INT_24_8_REV.
        /// </para>
        /// </param>
        /// <param name="img">
        /// <para>
        /// Returns the texture image. Should be a pointer to an array of the type specified by type.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexImage")]
        public static extern void GetTexImage<T4>(OpenTK.Graphics.OpenGL4.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute] T4[,,] pixels)
            where T4 : struct
        ;

        /// <summary>[requires: v1.0]
        /// Return a texture image
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies which texture is to be obtained. GL_TEXTURE_1D, GL_TEXTURE_2D, GL_TEXTURE_3D, GL_TEXTURE_1D_ARRAY, GL_TEXTURE_2D_ARRAY, GL_TEXTURE_RECTANGLE, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, and GL_TEXTURE_CUBE_MAP_NEGATIVE_Z are accepted.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number of the desired image. Level 0 is the base image level. Level is the th mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies a pixel format for the returned data. The supported formats are GL_STENCIL_INDEX, GL_DEPTH_COMPONENT, GL_DEPTH_STENCIL, GL_RED, GL_GREEN, GL_BLUE, GL_RG, GL_RGB, GL_RGBA, GL_BGR, GL_BGRA, GL_RED_INTEGER, GL_GREEN_INTEGER, GL_BLUE_INTEGER, GL_RG_INTEGER, GL_RGB_INTEGER, GL_RGBA_INTEGER, GL_BGR_INTEGER, GL_BGRA_INTEGER.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies a pixel type for the returned data. The supported types are GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_HALF_FLOAT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, GL_UNSIGNED_INT_2_10_10_10_REV, GL_UNSIGNED_INT_24_8, GL_UNSIGNED_INT_10F_11F_11F_REV, GL_UNSIGNED_INT_5_9_9_9_REV, and GL_FLOAT_32_UNSIGNED_INT_24_8_REV.
        /// </para>
        /// </param>
        /// <param name="img">
        /// <para>
        /// Returns the texture image. Should be a pointer to an array of the type specified by type.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexImage")]
        public static extern void GetTexImage<T4>(OpenTK.Graphics.OpenGL4.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute] ref T4 pixels)
            where T4 : struct
        ;

        /// <summary>[requires: v1.0]
        /// Return texture parameter values for a specific level of detail
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the symbolic name of the target texture, one of GL_TEXTURE_1D, GL_TEXTURE_2D, GL_TEXTURE_3D, GL_TEXTURE_1D_ARRAY, GL_TEXTURE_2D_ARRAY, GL_TEXTURE_RECTANGLE, GL_TEXTURE_2D_MULTISAMPLE, GL_TEXTURE_2D_MULTISAMPLE_ARRAY, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, GL_TEXTURE_CUBE_MAP_NEGATIVE_Z, GL_PROXY_TEXTURE_1D, GL_PROXY_TEXTURE_2D, GL_PROXY_TEXTURE_3D, GL_PROXY_TEXTURE_1D_ARRAY, GL_PROXY_TEXTURE_2D_ARRAY, GL_PROXY_TEXTURE_RECTANGLE, GL_PROXY_TEXTURE_2D_MULTISAMPLE, GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY, GL_PROXY_TEXTURE_CUBE_MAP, or GL_TEXTURE_BUFFER.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number of the desired image. Level 0 is the base image level. Level is the th mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a texture parameter. GL_TEXTURE_WIDTH, GL_TEXTURE_HEIGHT, GL_TEXTURE_DEPTH, GL_TEXTURE_INTERNAL_FORMAT, GL_TEXTURE_RED_SIZE, GL_TEXTURE_GREEN_SIZE, GL_TEXTURE_BLUE_SIZE, GL_TEXTURE_ALPHA_SIZE, GL_TEXTURE_DEPTH_SIZE, GL_TEXTURE_COMPRESSED, GL_TEXTURE_COMPRESSED_IMAGE_SIZE, and GL_TEXTURE_BUFFER_OFFSET are accepted.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested data.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexLevelParameterfv")]
        public static extern void GetTexLevelParameter(OpenTK.Graphics.OpenGL4.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL4.GetTextureParameter pname, [OutAttribute] Single[] @params);

        /// <summary>[requires: v1.0]
        /// Return texture parameter values for a specific level of detail
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the symbolic name of the target texture, one of GL_TEXTURE_1D, GL_TEXTURE_2D, GL_TEXTURE_3D, GL_TEXTURE_1D_ARRAY, GL_TEXTURE_2D_ARRAY, GL_TEXTURE_RECTANGLE, GL_TEXTURE_2D_MULTISAMPLE, GL_TEXTURE_2D_MULTISAMPLE_ARRAY, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, GL_TEXTURE_CUBE_MAP_NEGATIVE_Z, GL_PROXY_TEXTURE_1D, GL_PROXY_TEXTURE_2D, GL_PROXY_TEXTURE_3D, GL_PROXY_TEXTURE_1D_ARRAY, GL_PROXY_TEXTURE_2D_ARRAY, GL_PROXY_TEXTURE_RECTANGLE, GL_PROXY_TEXTURE_2D_MULTISAMPLE, GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY, GL_PROXY_TEXTURE_CUBE_MAP, or GL_TEXTURE_BUFFER.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number of the desired image. Level 0 is the base image level. Level is the th mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a texture parameter. GL_TEXTURE_WIDTH, GL_TEXTURE_HEIGHT, GL_TEXTURE_DEPTH, GL_TEXTURE_INTERNAL_FORMAT, GL_TEXTURE_RED_SIZE, GL_TEXTURE_GREEN_SIZE, GL_TEXTURE_BLUE_SIZE, GL_TEXTURE_ALPHA_SIZE, GL_TEXTURE_DEPTH_SIZE, GL_TEXTURE_COMPRESSED, GL_TEXTURE_COMPRESSED_IMAGE_SIZE, and GL_TEXTURE_BUFFER_OFFSET are accepted.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested data.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexLevelParameterfv")]
        public static extern void GetTexLevelParameter(OpenTK.Graphics.OpenGL4.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL4.GetTextureParameter pname, [OutAttribute] out Single @params);

        /// <summary>[requires: v1.0]
        /// Return texture parameter values for a specific level of detail
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the symbolic name of the target texture, one of GL_TEXTURE_1D, GL_TEXTURE_2D, GL_TEXTURE_3D, GL_TEXTURE_1D_ARRAY, GL_TEXTURE_2D_ARRAY, GL_TEXTURE_RECTANGLE, GL_TEXTURE_2D_MULTISAMPLE, GL_TEXTURE_2D_MULTISAMPLE_ARRAY, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, GL_TEXTURE_CUBE_MAP_NEGATIVE_Z, GL_PROXY_TEXTURE_1D, GL_PROXY_TEXTURE_2D, GL_PROXY_TEXTURE_3D, GL_PROXY_TEXTURE_1D_ARRAY, GL_PROXY_TEXTURE_2D_ARRAY, GL_PROXY_TEXTURE_RECTANGLE, GL_PROXY_TEXTURE_2D_MULTISAMPLE, GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY, GL_PROXY_TEXTURE_CUBE_MAP, or GL_TEXTURE_BUFFER.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number of the desired image. Level 0 is the base image level. Level is the th mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a texture parameter. GL_TEXTURE_WIDTH, GL_TEXTURE_HEIGHT, GL_TEXTURE_DEPTH, GL_TEXTURE_INTERNAL_FORMAT, GL_TEXTURE_RED_SIZE, GL_TEXTURE_GREEN_SIZE, GL_TEXTURE_BLUE_SIZE, GL_TEXTURE_ALPHA_SIZE, GL_TEXTURE_DEPTH_SIZE, GL_TEXTURE_COMPRESSED, GL_TEXTURE_COMPRESSED_IMAGE_SIZE, and GL_TEXTURE_BUFFER_OFFSET are accepted.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested data.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexLevelParameterfv")]
        public static extern unsafe void GetTexLevelParameter(OpenTK.Graphics.OpenGL4.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL4.GetTextureParameter pname, [OutAttribute] Single* @params);

        /// <summary>[requires: v1.0]
        /// Return texture parameter values for a specific level of detail
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the symbolic name of the target texture, one of GL_TEXTURE_1D, GL_TEXTURE_2D, GL_TEXTURE_3D, GL_TEXTURE_1D_ARRAY, GL_TEXTURE_2D_ARRAY, GL_TEXTURE_RECTANGLE, GL_TEXTURE_2D_MULTISAMPLE, GL_TEXTURE_2D_MULTISAMPLE_ARRAY, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, GL_TEXTURE_CUBE_MAP_NEGATIVE_Z, GL_PROXY_TEXTURE_1D, GL_PROXY_TEXTURE_2D, GL_PROXY_TEXTURE_3D, GL_PROXY_TEXTURE_1D_ARRAY, GL_PROXY_TEXTURE_2D_ARRAY, GL_PROXY_TEXTURE_RECTANGLE, GL_PROXY_TEXTURE_2D_MULTISAMPLE, GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY, GL_PROXY_TEXTURE_CUBE_MAP, or GL_TEXTURE_BUFFER.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number of the desired image. Level 0 is the base image level. Level is the th mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a texture parameter. GL_TEXTURE_WIDTH, GL_TEXTURE_HEIGHT, GL_TEXTURE_DEPTH, GL_TEXTURE_INTERNAL_FORMAT, GL_TEXTURE_RED_SIZE, GL_TEXTURE_GREEN_SIZE, GL_TEXTURE_BLUE_SIZE, GL_TEXTURE_ALPHA_SIZE, GL_TEXTURE_DEPTH_SIZE, GL_TEXTURE_COMPRESSED, GL_TEXTURE_COMPRESSED_IMAGE_SIZE, and GL_TEXTURE_BUFFER_OFFSET are accepted.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested data.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexLevelParameteriv")]
        public static extern void GetTexLevelParameter(OpenTK.Graphics.OpenGL4.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL4.GetTextureParameter pname, [OutAttribute] Int32[] @params);

        /// <summary>[requires: v1.0]
        /// Return texture parameter values for a specific level of detail
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the symbolic name of the target texture, one of GL_TEXTURE_1D, GL_TEXTURE_2D, GL_TEXTURE_3D, GL_TEXTURE_1D_ARRAY, GL_TEXTURE_2D_ARRAY, GL_TEXTURE_RECTANGLE, GL_TEXTURE_2D_MULTISAMPLE, GL_TEXTURE_2D_MULTISAMPLE_ARRAY, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, GL_TEXTURE_CUBE_MAP_NEGATIVE_Z, GL_PROXY_TEXTURE_1D, GL_PROXY_TEXTURE_2D, GL_PROXY_TEXTURE_3D, GL_PROXY_TEXTURE_1D_ARRAY, GL_PROXY_TEXTURE_2D_ARRAY, GL_PROXY_TEXTURE_RECTANGLE, GL_PROXY_TEXTURE_2D_MULTISAMPLE, GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY, GL_PROXY_TEXTURE_CUBE_MAP, or GL_TEXTURE_BUFFER.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number of the desired image. Level 0 is the base image level. Level is the th mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a texture parameter. GL_TEXTURE_WIDTH, GL_TEXTURE_HEIGHT, GL_TEXTURE_DEPTH, GL_TEXTURE_INTERNAL_FORMAT, GL_TEXTURE_RED_SIZE, GL_TEXTURE_GREEN_SIZE, GL_TEXTURE_BLUE_SIZE, GL_TEXTURE_ALPHA_SIZE, GL_TEXTURE_DEPTH_SIZE, GL_TEXTURE_COMPRESSED, GL_TEXTURE_COMPRESSED_IMAGE_SIZE, and GL_TEXTURE_BUFFER_OFFSET are accepted.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested data.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexLevelParameteriv")]
        public static extern void GetTexLevelParameter(OpenTK.Graphics.OpenGL4.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL4.GetTextureParameter pname, [OutAttribute] out Int32 @params);

        /// <summary>[requires: v1.0]
        /// Return texture parameter values for a specific level of detail
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the symbolic name of the target texture, one of GL_TEXTURE_1D, GL_TEXTURE_2D, GL_TEXTURE_3D, GL_TEXTURE_1D_ARRAY, GL_TEXTURE_2D_ARRAY, GL_TEXTURE_RECTANGLE, GL_TEXTURE_2D_MULTISAMPLE, GL_TEXTURE_2D_MULTISAMPLE_ARRAY, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, GL_TEXTURE_CUBE_MAP_NEGATIVE_Z, GL_PROXY_TEXTURE_1D, GL_PROXY_TEXTURE_2D, GL_PROXY_TEXTURE_3D, GL_PROXY_TEXTURE_1D_ARRAY, GL_PROXY_TEXTURE_2D_ARRAY, GL_PROXY_TEXTURE_RECTANGLE, GL_PROXY_TEXTURE_2D_MULTISAMPLE, GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY, GL_PROXY_TEXTURE_CUBE_MAP, or GL_TEXTURE_BUFFER.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number of the desired image. Level 0 is the base image level. Level is the th mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a texture parameter. GL_TEXTURE_WIDTH, GL_TEXTURE_HEIGHT, GL_TEXTURE_DEPTH, GL_TEXTURE_INTERNAL_FORMAT, GL_TEXTURE_RED_SIZE, GL_TEXTURE_GREEN_SIZE, GL_TEXTURE_BLUE_SIZE, GL_TEXTURE_ALPHA_SIZE, GL_TEXTURE_DEPTH_SIZE, GL_TEXTURE_COMPRESSED, GL_TEXTURE_COMPRESSED_IMAGE_SIZE, and GL_TEXTURE_BUFFER_OFFSET are accepted.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested data.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexLevelParameteriv")]
        public static extern unsafe void GetTexLevelParameter(OpenTK.Graphics.OpenGL4.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL4.GetTextureParameter pname, [OutAttribute] Int32* @params);

        /// <summary>[requires: v1.0]
        /// Return texture parameter values
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the symbolic name of the target texture. GL_TEXTURE_1D, GL_TEXTURE_2D, GL_TEXTURE_1D_ARRAY, GL_TEXTURE_2D_ARRAY, GL_TEXTURE_3D, GL_TEXTURE_RECTANGLE, GL_TEXTURE_CUBE_MAP, and GL_TEXTURE_CUBE_MAP_ARRAY are accepted.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a texture parameter. GL_DEPTH_STENCIL_TEXTURE_MODE, GL_TEXTURE_BASE_LEVEL, GL_TEXTURE_BORDER_COLOR, GL_TEXTURE_COMPARE_MODE, GL_TEXTURE_COMPARE_FUNC, GL_TEXTURE_IMMUTABLE_FORMAT, GL_TEXTURE_IMMUTABLE_LEVELS, GL_TEXTURE_LOD_BIAS, GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MAX_LEVEL, GL_TEXTURE_MAX_LOD, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_SWIZZLE_R, GL_TEXTURE_SWIZZLE_G, GL_TEXTURE_SWIZZLE_B, GL_TEXTURE_SWIZZLE_A, GL_TEXTURE_SWIZZLE_RGBA, GL_TEXTURE_VIEW_MIN_LAYER, GL_TEXTURE_VIEW_MIN_LEVEL, GL_TEXTURE_VIEW_NUM_LAYERS, GL_TEXTURE_VIEW_NUM_LEVELS, GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, and GL_TEXTURE_WRAP_R are accepted.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the texture parameters.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexParameterfv")]
        public static extern void GetTexParameter(OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.GetTextureParameter pname, [OutAttribute] Single[] @params);

        /// <summary>[requires: v1.0]
        /// Return texture parameter values
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the symbolic name of the target texture. GL_TEXTURE_1D, GL_TEXTURE_2D, GL_TEXTURE_1D_ARRAY, GL_TEXTURE_2D_ARRAY, GL_TEXTURE_3D, GL_TEXTURE_RECTANGLE, GL_TEXTURE_CUBE_MAP, and GL_TEXTURE_CUBE_MAP_ARRAY are accepted.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a texture parameter. GL_DEPTH_STENCIL_TEXTURE_MODE, GL_TEXTURE_BASE_LEVEL, GL_TEXTURE_BORDER_COLOR, GL_TEXTURE_COMPARE_MODE, GL_TEXTURE_COMPARE_FUNC, GL_TEXTURE_IMMUTABLE_FORMAT, GL_TEXTURE_IMMUTABLE_LEVELS, GL_TEXTURE_LOD_BIAS, GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MAX_LEVEL, GL_TEXTURE_MAX_LOD, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_SWIZZLE_R, GL_TEXTURE_SWIZZLE_G, GL_TEXTURE_SWIZZLE_B, GL_TEXTURE_SWIZZLE_A, GL_TEXTURE_SWIZZLE_RGBA, GL_TEXTURE_VIEW_MIN_LAYER, GL_TEXTURE_VIEW_MIN_LEVEL, GL_TEXTURE_VIEW_NUM_LAYERS, GL_TEXTURE_VIEW_NUM_LEVELS, GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, and GL_TEXTURE_WRAP_R are accepted.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the texture parameters.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexParameterfv")]
        public static extern void GetTexParameter(OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.GetTextureParameter pname, [OutAttribute] out Single @params);

        /// <summary>[requires: v1.0]
        /// Return texture parameter values
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the symbolic name of the target texture. GL_TEXTURE_1D, GL_TEXTURE_2D, GL_TEXTURE_1D_ARRAY, GL_TEXTURE_2D_ARRAY, GL_TEXTURE_3D, GL_TEXTURE_RECTANGLE, GL_TEXTURE_CUBE_MAP, and GL_TEXTURE_CUBE_MAP_ARRAY are accepted.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a texture parameter. GL_DEPTH_STENCIL_TEXTURE_MODE, GL_TEXTURE_BASE_LEVEL, GL_TEXTURE_BORDER_COLOR, GL_TEXTURE_COMPARE_MODE, GL_TEXTURE_COMPARE_FUNC, GL_TEXTURE_IMMUTABLE_FORMAT, GL_TEXTURE_IMMUTABLE_LEVELS, GL_TEXTURE_LOD_BIAS, GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MAX_LEVEL, GL_TEXTURE_MAX_LOD, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_SWIZZLE_R, GL_TEXTURE_SWIZZLE_G, GL_TEXTURE_SWIZZLE_B, GL_TEXTURE_SWIZZLE_A, GL_TEXTURE_SWIZZLE_RGBA, GL_TEXTURE_VIEW_MIN_LAYER, GL_TEXTURE_VIEW_MIN_LEVEL, GL_TEXTURE_VIEW_NUM_LAYERS, GL_TEXTURE_VIEW_NUM_LEVELS, GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, and GL_TEXTURE_WRAP_R are accepted.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the texture parameters.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexParameterfv")]
        public static extern unsafe void GetTexParameter(OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.GetTextureParameter pname, [OutAttribute] Single* @params);

        /// <summary>[requires: v3.0]</summary>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetTexParameterIiv")]
        public static extern void GetTexParameterI(OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.GetTextureParameter pname, [OutAttribute] Int32[] @params);

        /// <summary>[requires: v3.0]</summary>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetTexParameterIiv")]
        public static extern void GetTexParameterI(OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.GetTextureParameter pname, [OutAttribute] out Int32 @params);

        /// <summary>[requires: v3.0]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetTexParameterIiv")]
        public static extern unsafe void GetTexParameterI(OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.GetTextureParameter pname, [OutAttribute] Int32* @params);

        /// <summary>[requires: v3.0]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetTexParameterIuiv")]
        public static extern void GetTexParameterI(OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.GetTextureParameter pname, [OutAttribute] UInt32[] @params);

        /// <summary>[requires: v3.0]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetTexParameterIuiv")]
        public static extern void GetTexParameterI(OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.GetTextureParameter pname, [OutAttribute] out UInt32 @params);

        /// <summary>[requires: v3.0]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetTexParameterIuiv")]
        public static extern unsafe void GetTexParameterI(OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.GetTextureParameter pname, [OutAttribute] UInt32* @params);

        /// <summary>[requires: v1.0]
        /// Return texture parameter values
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the symbolic name of the target texture. GL_TEXTURE_1D, GL_TEXTURE_2D, GL_TEXTURE_1D_ARRAY, GL_TEXTURE_2D_ARRAY, GL_TEXTURE_3D, GL_TEXTURE_RECTANGLE, GL_TEXTURE_CUBE_MAP, and GL_TEXTURE_CUBE_MAP_ARRAY are accepted.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a texture parameter. GL_DEPTH_STENCIL_TEXTURE_MODE, GL_TEXTURE_BASE_LEVEL, GL_TEXTURE_BORDER_COLOR, GL_TEXTURE_COMPARE_MODE, GL_TEXTURE_COMPARE_FUNC, GL_TEXTURE_IMMUTABLE_FORMAT, GL_TEXTURE_IMMUTABLE_LEVELS, GL_TEXTURE_LOD_BIAS, GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MAX_LEVEL, GL_TEXTURE_MAX_LOD, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_SWIZZLE_R, GL_TEXTURE_SWIZZLE_G, GL_TEXTURE_SWIZZLE_B, GL_TEXTURE_SWIZZLE_A, GL_TEXTURE_SWIZZLE_RGBA, GL_TEXTURE_VIEW_MIN_LAYER, GL_TEXTURE_VIEW_MIN_LEVEL, GL_TEXTURE_VIEW_NUM_LAYERS, GL_TEXTURE_VIEW_NUM_LEVELS, GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, and GL_TEXTURE_WRAP_R are accepted.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the texture parameters.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexParameteriv")]
        public static extern void GetTexParameter(OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.GetTextureParameter pname, [OutAttribute] Int32[] @params);

        /// <summary>[requires: v1.0]
        /// Return texture parameter values
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the symbolic name of the target texture. GL_TEXTURE_1D, GL_TEXTURE_2D, GL_TEXTURE_1D_ARRAY, GL_TEXTURE_2D_ARRAY, GL_TEXTURE_3D, GL_TEXTURE_RECTANGLE, GL_TEXTURE_CUBE_MAP, and GL_TEXTURE_CUBE_MAP_ARRAY are accepted.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a texture parameter. GL_DEPTH_STENCIL_TEXTURE_MODE, GL_TEXTURE_BASE_LEVEL, GL_TEXTURE_BORDER_COLOR, GL_TEXTURE_COMPARE_MODE, GL_TEXTURE_COMPARE_FUNC, GL_TEXTURE_IMMUTABLE_FORMAT, GL_TEXTURE_IMMUTABLE_LEVELS, GL_TEXTURE_LOD_BIAS, GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MAX_LEVEL, GL_TEXTURE_MAX_LOD, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_SWIZZLE_R, GL_TEXTURE_SWIZZLE_G, GL_TEXTURE_SWIZZLE_B, GL_TEXTURE_SWIZZLE_A, GL_TEXTURE_SWIZZLE_RGBA, GL_TEXTURE_VIEW_MIN_LAYER, GL_TEXTURE_VIEW_MIN_LEVEL, GL_TEXTURE_VIEW_NUM_LAYERS, GL_TEXTURE_VIEW_NUM_LEVELS, GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, and GL_TEXTURE_WRAP_R are accepted.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the texture parameters.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexParameteriv")]
        public static extern void GetTexParameter(OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.GetTextureParameter pname, [OutAttribute] out Int32 @params);

        /// <summary>[requires: v1.0]
        /// Return texture parameter values
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the symbolic name of the target texture. GL_TEXTURE_1D, GL_TEXTURE_2D, GL_TEXTURE_1D_ARRAY, GL_TEXTURE_2D_ARRAY, GL_TEXTURE_3D, GL_TEXTURE_RECTANGLE, GL_TEXTURE_CUBE_MAP, and GL_TEXTURE_CUBE_MAP_ARRAY are accepted.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a texture parameter. GL_DEPTH_STENCIL_TEXTURE_MODE, GL_TEXTURE_BASE_LEVEL, GL_TEXTURE_BORDER_COLOR, GL_TEXTURE_COMPARE_MODE, GL_TEXTURE_COMPARE_FUNC, GL_TEXTURE_IMMUTABLE_FORMAT, GL_TEXTURE_IMMUTABLE_LEVELS, GL_TEXTURE_LOD_BIAS, GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MAX_LEVEL, GL_TEXTURE_MAX_LOD, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_SWIZZLE_R, GL_TEXTURE_SWIZZLE_G, GL_TEXTURE_SWIZZLE_B, GL_TEXTURE_SWIZZLE_A, GL_TEXTURE_SWIZZLE_RGBA, GL_TEXTURE_VIEW_MIN_LAYER, GL_TEXTURE_VIEW_MIN_LEVEL, GL_TEXTURE_VIEW_NUM_LAYERS, GL_TEXTURE_VIEW_NUM_LEVELS, GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, and GL_TEXTURE_WRAP_R are accepted.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the texture parameters.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexParameteriv")]
        public static extern unsafe void GetTexParameter(OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.GetTextureParameter pname, [OutAttribute] Int32* @params);

        /// <summary>[requires: v3.0]
        /// Retrieve information about varying variables selected for transform feedback
        /// </summary>
        /// <param name="program">
        /// <para>
        /// The name of the target program object.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// The index of the varying variable whose information to retrieve.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// The maximum number of characters, including the null terminator, that may be written into name.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// The address of a variable which will receive the number of characters written into name, excluding the null-terminator. If length is NULL no length is returned.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// The address of a variable that will receive the size of the varying.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// The address of a variable that will recieve the type of the varying.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// The address of a buffer into which will be written the name of the varying.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetTransformFeedbackVarying")]
        public static extern void GetTransformFeedbackVarying(Int32 program, Int32 index, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] out Int32 size, [OutAttribute] out OpenTK.Graphics.OpenGL4.TransformFeedbackType type, [OutAttribute] StringBuilder name);

        /// <summary>[requires: v3.0]
        /// Retrieve information about varying variables selected for transform feedback
        /// </summary>
        /// <param name="program">
        /// <para>
        /// The name of the target program object.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// The index of the varying variable whose information to retrieve.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// The maximum number of characters, including the null terminator, that may be written into name.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// The address of a variable which will receive the number of characters written into name, excluding the null-terminator. If length is NULL no length is returned.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// The address of a variable that will receive the size of the varying.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// The address of a variable that will recieve the type of the varying.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// The address of a buffer into which will be written the name of the varying.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetTransformFeedbackVarying")]
        public static extern unsafe void GetTransformFeedbackVarying(Int32 program, Int32 index, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] Int32* size, [OutAttribute] OpenTK.Graphics.OpenGL4.TransformFeedbackType* type, [OutAttribute] StringBuilder name);

        /// <summary>[requires: v3.0]
        /// Retrieve information about varying variables selected for transform feedback
        /// </summary>
        /// <param name="program">
        /// <para>
        /// The name of the target program object.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// The index of the varying variable whose information to retrieve.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// The maximum number of characters, including the null terminator, that may be written into name.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// The address of a variable which will receive the number of characters written into name, excluding the null-terminator. If length is NULL no length is returned.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// The address of a variable that will receive the size of the varying.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// The address of a variable that will recieve the type of the varying.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// The address of a buffer into which will be written the name of the varying.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetTransformFeedbackVarying")]
        public static extern void GetTransformFeedbackVarying(UInt32 program, UInt32 index, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] out Int32 size, [OutAttribute] out OpenTK.Graphics.OpenGL4.TransformFeedbackType type, [OutAttribute] StringBuilder name);

        /// <summary>[requires: v3.0]
        /// Retrieve information about varying variables selected for transform feedback
        /// </summary>
        /// <param name="program">
        /// <para>
        /// The name of the target program object.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// The index of the varying variable whose information to retrieve.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// The maximum number of characters, including the null terminator, that may be written into name.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// The address of a variable which will receive the number of characters written into name, excluding the null-terminator. If length is NULL no length is returned.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// The address of a variable that will receive the size of the varying.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// The address of a variable that will recieve the type of the varying.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// The address of a buffer into which will be written the name of the varying.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetTransformFeedbackVarying")]
        public static extern unsafe void GetTransformFeedbackVarying(UInt32 program, UInt32 index, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] Int32* size, [OutAttribute] OpenTK.Graphics.OpenGL4.TransformFeedbackType* type, [OutAttribute] StringBuilder name);

        /// <summary>[requires: v3.1 and ARB_uniform_buffer_object|VERSION_3_1]
        /// Retrieve the index of a named uniform block
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the name of a program containing the uniform block.
        /// </para>
        /// </param>
        /// <param name="uniformBlockName">
        /// <para>
        /// Specifies the address an array of characters to containing the name of the uniform block whose index to retrieve.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_uniform_buffer_object|VERSION_3_1", Version = "3.1", EntryPoint = "glGetUniformBlockIndex")]
        public static extern Int32 GetUniformBlockIndex(Int32 program, String uniformBlockName);

        /// <summary>[requires: v3.1 and ARB_uniform_buffer_object|VERSION_3_1]
        /// Retrieve the index of a named uniform block
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the name of a program containing the uniform block.
        /// </para>
        /// </param>
        /// <param name="uniformBlockName">
        /// <para>
        /// Specifies the address an array of characters to containing the name of the uniform block whose index to retrieve.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_uniform_buffer_object|VERSION_3_1", Version = "3.1", EntryPoint = "glGetUniformBlockIndex")]
        public static extern Int32 GetUniformBlockIndex(UInt32 program, String uniformBlockName);

        /// <summary>[requires: v4.0 and ARB_gpu_shader_fp64|VERSION_4_0]
        /// Returns the value of a uniform variable
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be queried.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the value of the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glGetUniformdv")]
        public static extern void GetUniform(Int32 program, Int32 location, [OutAttribute] Double[] @params);

        /// <summary>[requires: v4.0 and ARB_gpu_shader_fp64|VERSION_4_0]
        /// Returns the value of a uniform variable
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be queried.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the value of the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glGetUniformdv")]
        public static extern void GetUniform(Int32 program, Int32 location, [OutAttribute] out Double @params);

        /// <summary>[requires: v4.0 and ARB_gpu_shader_fp64|VERSION_4_0]
        /// Returns the value of a uniform variable
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be queried.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the value of the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glGetUniformdv")]
        public static extern unsafe void GetUniform(Int32 program, Int32 location, [OutAttribute] Double* @params);

        /// <summary>[requires: v4.0 and ARB_gpu_shader_fp64|VERSION_4_0]
        /// Returns the value of a uniform variable
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be queried.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the value of the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glGetUniformdv")]
        public static extern void GetUniform(UInt32 program, Int32 location, [OutAttribute] Double[] @params);

        /// <summary>[requires: v4.0 and ARB_gpu_shader_fp64|VERSION_4_0]
        /// Returns the value of a uniform variable
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be queried.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the value of the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glGetUniformdv")]
        public static extern void GetUniform(UInt32 program, Int32 location, [OutAttribute] out Double @params);

        /// <summary>[requires: v4.0 and ARB_gpu_shader_fp64|VERSION_4_0]
        /// Returns the value of a uniform variable
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be queried.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the value of the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glGetUniformdv")]
        public static extern unsafe void GetUniform(UInt32 program, Int32 location, [OutAttribute] Double* @params);

        /// <summary>[requires: v2.0]
        /// Returns the value of a uniform variable
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be queried.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the value of the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetUniformfv")]
        public static extern void GetUniform(Int32 program, Int32 location, [OutAttribute] Single[] @params);

        /// <summary>[requires: v2.0]
        /// Returns the value of a uniform variable
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be queried.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the value of the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetUniformfv")]
        public static extern void GetUniform(Int32 program, Int32 location, [OutAttribute] out Single @params);

        /// <summary>[requires: v2.0]
        /// Returns the value of a uniform variable
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be queried.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the value of the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetUniformfv")]
        public static extern unsafe void GetUniform(Int32 program, Int32 location, [OutAttribute] Single* @params);

        /// <summary>[requires: v2.0]
        /// Returns the value of a uniform variable
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be queried.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the value of the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetUniformfv")]
        public static extern void GetUniform(UInt32 program, Int32 location, [OutAttribute] Single[] @params);

        /// <summary>[requires: v2.0]
        /// Returns the value of a uniform variable
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be queried.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the value of the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetUniformfv")]
        public static extern void GetUniform(UInt32 program, Int32 location, [OutAttribute] out Single @params);

        /// <summary>[requires: v2.0]
        /// Returns the value of a uniform variable
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be queried.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the value of the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetUniformfv")]
        public static extern unsafe void GetUniform(UInt32 program, Int32 location, [OutAttribute] Single* @params);

        /// <summary>[requires: v3.1 and ARB_uniform_buffer_object|VERSION_3_1]
        /// Retrieve the index of a named uniform block
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the name of a program containing uniforms whose indices to query.
        /// </para>
        /// </param>
        /// <param name="uniformCount">
        /// <para>
        /// Specifies the number of uniforms whose indices to query.
        /// </para>
        /// </param>
        /// <param name="uniformNames">
        /// <para>
        /// Specifies the address of an array of pointers to buffers containing the names of the queried uniforms.
        /// </para>
        /// </param>
        /// <param name="uniformIndices">
        /// <para>
        /// Specifies the address of an array that will receive the indices of the uniforms.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_uniform_buffer_object|VERSION_3_1", Version = "3.1", EntryPoint = "glGetUniformIndices")]
        public static extern void GetUniformIndices(Int32 program, Int32 uniformCount, String[] uniformNames, [OutAttribute] Int32[] uniformIndices);

        /// <summary>[requires: v3.1 and ARB_uniform_buffer_object|VERSION_3_1]
        /// Retrieve the index of a named uniform block
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the name of a program containing uniforms whose indices to query.
        /// </para>
        /// </param>
        /// <param name="uniformCount">
        /// <para>
        /// Specifies the number of uniforms whose indices to query.
        /// </para>
        /// </param>
        /// <param name="uniformNames">
        /// <para>
        /// Specifies the address of an array of pointers to buffers containing the names of the queried uniforms.
        /// </para>
        /// </param>
        /// <param name="uniformIndices">
        /// <para>
        /// Specifies the address of an array that will receive the indices of the uniforms.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_uniform_buffer_object|VERSION_3_1", Version = "3.1", EntryPoint = "glGetUniformIndices")]
        public static extern void GetUniformIndices(Int32 program, Int32 uniformCount, String[] uniformNames, [OutAttribute] out Int32 uniformIndices);

        /// <summary>[requires: v3.1 and ARB_uniform_buffer_object|VERSION_3_1]
        /// Retrieve the index of a named uniform block
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the name of a program containing uniforms whose indices to query.
        /// </para>
        /// </param>
        /// <param name="uniformCount">
        /// <para>
        /// Specifies the number of uniforms whose indices to query.
        /// </para>
        /// </param>
        /// <param name="uniformNames">
        /// <para>
        /// Specifies the address of an array of pointers to buffers containing the names of the queried uniforms.
        /// </para>
        /// </param>
        /// <param name="uniformIndices">
        /// <para>
        /// Specifies the address of an array that will receive the indices of the uniforms.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_uniform_buffer_object|VERSION_3_1", Version = "3.1", EntryPoint = "glGetUniformIndices")]
        public static extern unsafe void GetUniformIndices(Int32 program, Int32 uniformCount, String[] uniformNames, [OutAttribute] Int32* uniformIndices);

        /// <summary>[requires: v3.1 and ARB_uniform_buffer_object|VERSION_3_1]
        /// Retrieve the index of a named uniform block
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the name of a program containing uniforms whose indices to query.
        /// </para>
        /// </param>
        /// <param name="uniformCount">
        /// <para>
        /// Specifies the number of uniforms whose indices to query.
        /// </para>
        /// </param>
        /// <param name="uniformNames">
        /// <para>
        /// Specifies the address of an array of pointers to buffers containing the names of the queried uniforms.
        /// </para>
        /// </param>
        /// <param name="uniformIndices">
        /// <para>
        /// Specifies the address of an array that will receive the indices of the uniforms.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_uniform_buffer_object|VERSION_3_1", Version = "3.1", EntryPoint = "glGetUniformIndices")]
        public static extern void GetUniformIndices(UInt32 program, Int32 uniformCount, String[] uniformNames, [OutAttribute] UInt32[] uniformIndices);

        /// <summary>[requires: v3.1 and ARB_uniform_buffer_object|VERSION_3_1]
        /// Retrieve the index of a named uniform block
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the name of a program containing uniforms whose indices to query.
        /// </para>
        /// </param>
        /// <param name="uniformCount">
        /// <para>
        /// Specifies the number of uniforms whose indices to query.
        /// </para>
        /// </param>
        /// <param name="uniformNames">
        /// <para>
        /// Specifies the address of an array of pointers to buffers containing the names of the queried uniforms.
        /// </para>
        /// </param>
        /// <param name="uniformIndices">
        /// <para>
        /// Specifies the address of an array that will receive the indices of the uniforms.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_uniform_buffer_object|VERSION_3_1", Version = "3.1", EntryPoint = "glGetUniformIndices")]
        public static extern void GetUniformIndices(UInt32 program, Int32 uniformCount, String[] uniformNames, [OutAttribute] out UInt32 uniformIndices);

        /// <summary>[requires: v3.1 and ARB_uniform_buffer_object|VERSION_3_1]
        /// Retrieve the index of a named uniform block
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the name of a program containing uniforms whose indices to query.
        /// </para>
        /// </param>
        /// <param name="uniformCount">
        /// <para>
        /// Specifies the number of uniforms whose indices to query.
        /// </para>
        /// </param>
        /// <param name="uniformNames">
        /// <para>
        /// Specifies the address of an array of pointers to buffers containing the names of the queried uniforms.
        /// </para>
        /// </param>
        /// <param name="uniformIndices">
        /// <para>
        /// Specifies the address of an array that will receive the indices of the uniforms.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_uniform_buffer_object|VERSION_3_1", Version = "3.1", EntryPoint = "glGetUniformIndices")]
        public static extern unsafe void GetUniformIndices(UInt32 program, Int32 uniformCount, String[] uniformNames, [OutAttribute] UInt32* uniformIndices);

        /// <summary>[requires: v2.0]
        /// Returns the value of a uniform variable
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be queried.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the value of the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetUniformiv")]
        public static extern void GetUniform(Int32 program, Int32 location, [OutAttribute] Int32[] @params);

        /// <summary>[requires: v2.0]
        /// Returns the value of a uniform variable
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be queried.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the value of the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetUniformiv")]
        public static extern void GetUniform(Int32 program, Int32 location, [OutAttribute] out Int32 @params);

        /// <summary>[requires: v2.0]
        /// Returns the value of a uniform variable
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be queried.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the value of the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetUniformiv")]
        public static extern unsafe void GetUniform(Int32 program, Int32 location, [OutAttribute] Int32* @params);

        /// <summary>[requires: v2.0]
        /// Returns the value of a uniform variable
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be queried.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the value of the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetUniformiv")]
        public static extern void GetUniform(UInt32 program, Int32 location, [OutAttribute] Int32[] @params);

        /// <summary>[requires: v2.0]
        /// Returns the value of a uniform variable
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be queried.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the value of the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetUniformiv")]
        public static extern void GetUniform(UInt32 program, Int32 location, [OutAttribute] out Int32 @params);

        /// <summary>[requires: v2.0]
        /// Returns the value of a uniform variable
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be queried.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the value of the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetUniformiv")]
        public static extern unsafe void GetUniform(UInt32 program, Int32 location, [OutAttribute] Int32* @params);

        /// <summary>[requires: v2.0]
        /// Returns the location of a uniform variable
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// Points to a null terminated string containing the name of the uniform variable whose location is to be queried.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetUniformLocation")]
        public static extern Int32 GetUniformLocation(Int32 program, String name);

        /// <summary>[requires: v2.0]
        /// Returns the location of a uniform variable
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// Points to a null terminated string containing the name of the uniform variable whose location is to be queried.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetUniformLocation")]
        public static extern Int32 GetUniformLocation(UInt32 program, String name);

        /// <summary>[requires: v4.0 and ARB_shader_subroutine|VERSION_4_0]
        /// Retrieve the value of a subroutine uniform of a given shader stage of the current program
        /// </summary>
        /// <param name="shadertype">
        /// <para>
        /// Specifies the shader stage from which to query for subroutine uniform index. shadertype must be one of GL_VERTEX_SHADER, GL_TESS_CONTROL_SHADER, GL_TESS_EVALUATION_SHADER, GL_GEOMETRY_SHADER or GL_FRAGMENT_SHADER.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the subroutine uniform.
        /// </para>
        /// </param>
        /// <param name="values">
        /// <para>
        /// Specifies the address of a variable to receive the value or values of the subroutine uniform.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_shader_subroutine|VERSION_4_0", Version = "4.0", EntryPoint = "glGetUniformSubroutineuiv")]
        public static extern void GetUniformSubroutine(OpenTK.Graphics.OpenGL4.ShaderType shadertype, Int32 location, [OutAttribute] out Int32 @params);

        /// <summary>[requires: v4.0 and ARB_shader_subroutine|VERSION_4_0]
        /// Retrieve the value of a subroutine uniform of a given shader stage of the current program
        /// </summary>
        /// <param name="shadertype">
        /// <para>
        /// Specifies the shader stage from which to query for subroutine uniform index. shadertype must be one of GL_VERTEX_SHADER, GL_TESS_CONTROL_SHADER, GL_TESS_EVALUATION_SHADER, GL_GEOMETRY_SHADER or GL_FRAGMENT_SHADER.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the subroutine uniform.
        /// </para>
        /// </param>
        /// <param name="values">
        /// <para>
        /// Specifies the address of a variable to receive the value or values of the subroutine uniform.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_shader_subroutine|VERSION_4_0", Version = "4.0", EntryPoint = "glGetUniformSubroutineuiv")]
        public static extern unsafe void GetUniformSubroutine(OpenTK.Graphics.OpenGL4.ShaderType shadertype, Int32 location, [OutAttribute] Int32* @params);

        /// <summary>[requires: v4.0 and ARB_shader_subroutine|VERSION_4_0]
        /// Retrieve the value of a subroutine uniform of a given shader stage of the current program
        /// </summary>
        /// <param name="shadertype">
        /// <para>
        /// Specifies the shader stage from which to query for subroutine uniform index. shadertype must be one of GL_VERTEX_SHADER, GL_TESS_CONTROL_SHADER, GL_TESS_EVALUATION_SHADER, GL_GEOMETRY_SHADER or GL_FRAGMENT_SHADER.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the subroutine uniform.
        /// </para>
        /// </param>
        /// <param name="values">
        /// <para>
        /// Specifies the address of a variable to receive the value or values of the subroutine uniform.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_shader_subroutine|VERSION_4_0", Version = "4.0", EntryPoint = "glGetUniformSubroutineuiv")]
        public static extern void GetUniformSubroutine(OpenTK.Graphics.OpenGL4.ShaderType shadertype, Int32 location, [OutAttribute] out UInt32 @params);

        /// <summary>[requires: v4.0 and ARB_shader_subroutine|VERSION_4_0]
        /// Retrieve the value of a subroutine uniform of a given shader stage of the current program
        /// </summary>
        /// <param name="shadertype">
        /// <para>
        /// Specifies the shader stage from which to query for subroutine uniform index. shadertype must be one of GL_VERTEX_SHADER, GL_TESS_CONTROL_SHADER, GL_TESS_EVALUATION_SHADER, GL_GEOMETRY_SHADER or GL_FRAGMENT_SHADER.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the subroutine uniform.
        /// </para>
        /// </param>
        /// <param name="values">
        /// <para>
        /// Specifies the address of a variable to receive the value or values of the subroutine uniform.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_shader_subroutine|VERSION_4_0", Version = "4.0", EntryPoint = "glGetUniformSubroutineuiv")]
        public static extern unsafe void GetUniformSubroutine(OpenTK.Graphics.OpenGL4.ShaderType shadertype, Int32 location, [OutAttribute] UInt32* @params);

        /// <summary>[requires: v3.0]
        /// Returns the value of a uniform variable
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be queried.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the value of the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetUniformuiv")]
        public static extern void GetUniform(UInt32 program, Int32 location, [OutAttribute] UInt32[] @params);

        /// <summary>[requires: v3.0]
        /// Returns the value of a uniform variable
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be queried.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the value of the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetUniformuiv")]
        public static extern void GetUniform(UInt32 program, Int32 location, [OutAttribute] out UInt32 @params);

        /// <summary>[requires: v3.0]
        /// Returns the value of a uniform variable
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be queried.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the value of the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetUniformuiv")]
        public static extern unsafe void GetUniform(UInt32 program, Int32 location, [OutAttribute] UInt32* @params);

        /// <summary>[requires: v2.0]
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, GL_VERTEX_ATTRIB_ARRAY_ENABLED, GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, GL_VERTEX_ATTRIB_ARRAY_TYPE, GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, GL_VERTEX_ATTRIB_ARRAY_INTEGER, GL_VERTEX_ATTRIB_ARRAY_DIVISOR, or GL_CURRENT_VERTEX_ATTRIB.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested data.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribdv")]
        public static extern void GetVertexAttrib(Int32 index, OpenTK.Graphics.OpenGL4.VertexAttribParameter pname, [OutAttribute] Double[] @params);

        /// <summary>[requires: v2.0]
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, GL_VERTEX_ATTRIB_ARRAY_ENABLED, GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, GL_VERTEX_ATTRIB_ARRAY_TYPE, GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, GL_VERTEX_ATTRIB_ARRAY_INTEGER, GL_VERTEX_ATTRIB_ARRAY_DIVISOR, or GL_CURRENT_VERTEX_ATTRIB.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested data.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribdv")]
        public static extern void GetVertexAttrib(Int32 index, OpenTK.Graphics.OpenGL4.VertexAttribParameter pname, [OutAttribute] out Double @params);

        /// <summary>[requires: v2.0]
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, GL_VERTEX_ATTRIB_ARRAY_ENABLED, GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, GL_VERTEX_ATTRIB_ARRAY_TYPE, GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, GL_VERTEX_ATTRIB_ARRAY_INTEGER, GL_VERTEX_ATTRIB_ARRAY_DIVISOR, or GL_CURRENT_VERTEX_ATTRIB.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested data.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribdv")]
        public static extern unsafe void GetVertexAttrib(Int32 index, OpenTK.Graphics.OpenGL4.VertexAttribParameter pname, [OutAttribute] Double* @params);

        /// <summary>[requires: v2.0]
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, GL_VERTEX_ATTRIB_ARRAY_ENABLED, GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, GL_VERTEX_ATTRIB_ARRAY_TYPE, GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, GL_VERTEX_ATTRIB_ARRAY_INTEGER, GL_VERTEX_ATTRIB_ARRAY_DIVISOR, or GL_CURRENT_VERTEX_ATTRIB.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested data.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribdv")]
        public static extern void GetVertexAttrib(UInt32 index, OpenTK.Graphics.OpenGL4.VertexAttribParameter pname, [OutAttribute] Double[] @params);

        /// <summary>[requires: v2.0]
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, GL_VERTEX_ATTRIB_ARRAY_ENABLED, GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, GL_VERTEX_ATTRIB_ARRAY_TYPE, GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, GL_VERTEX_ATTRIB_ARRAY_INTEGER, GL_VERTEX_ATTRIB_ARRAY_DIVISOR, or GL_CURRENT_VERTEX_ATTRIB.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested data.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribdv")]
        public static extern void GetVertexAttrib(UInt32 index, OpenTK.Graphics.OpenGL4.VertexAttribParameter pname, [OutAttribute] out Double @params);

        /// <summary>[requires: v2.0]
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, GL_VERTEX_ATTRIB_ARRAY_ENABLED, GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, GL_VERTEX_ATTRIB_ARRAY_TYPE, GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, GL_VERTEX_ATTRIB_ARRAY_INTEGER, GL_VERTEX_ATTRIB_ARRAY_DIVISOR, or GL_CURRENT_VERTEX_ATTRIB.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested data.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribdv")]
        public static extern unsafe void GetVertexAttrib(UInt32 index, OpenTK.Graphics.OpenGL4.VertexAttribParameter pname, [OutAttribute] Double* @params);

        /// <summary>[requires: v2.0]
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, GL_VERTEX_ATTRIB_ARRAY_ENABLED, GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, GL_VERTEX_ATTRIB_ARRAY_TYPE, GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, GL_VERTEX_ATTRIB_ARRAY_INTEGER, GL_VERTEX_ATTRIB_ARRAY_DIVISOR, or GL_CURRENT_VERTEX_ATTRIB.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested data.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribfv")]
        public static extern void GetVertexAttrib(Int32 index, OpenTK.Graphics.OpenGL4.VertexAttribParameter pname, [OutAttribute] Single[] @params);

        /// <summary>[requires: v2.0]
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, GL_VERTEX_ATTRIB_ARRAY_ENABLED, GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, GL_VERTEX_ATTRIB_ARRAY_TYPE, GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, GL_VERTEX_ATTRIB_ARRAY_INTEGER, GL_VERTEX_ATTRIB_ARRAY_DIVISOR, or GL_CURRENT_VERTEX_ATTRIB.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested data.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribfv")]
        public static extern void GetVertexAttrib(Int32 index, OpenTK.Graphics.OpenGL4.VertexAttribParameter pname, [OutAttribute] out Single @params);

        /// <summary>[requires: v2.0]
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, GL_VERTEX_ATTRIB_ARRAY_ENABLED, GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, GL_VERTEX_ATTRIB_ARRAY_TYPE, GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, GL_VERTEX_ATTRIB_ARRAY_INTEGER, GL_VERTEX_ATTRIB_ARRAY_DIVISOR, or GL_CURRENT_VERTEX_ATTRIB.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested data.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribfv")]
        public static extern unsafe void GetVertexAttrib(Int32 index, OpenTK.Graphics.OpenGL4.VertexAttribParameter pname, [OutAttribute] Single* @params);

        /// <summary>[requires: v2.0]
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, GL_VERTEX_ATTRIB_ARRAY_ENABLED, GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, GL_VERTEX_ATTRIB_ARRAY_TYPE, GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, GL_VERTEX_ATTRIB_ARRAY_INTEGER, GL_VERTEX_ATTRIB_ARRAY_DIVISOR, or GL_CURRENT_VERTEX_ATTRIB.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested data.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribfv")]
        public static extern void GetVertexAttrib(UInt32 index, OpenTK.Graphics.OpenGL4.VertexAttribParameter pname, [OutAttribute] Single[] @params);

        /// <summary>[requires: v2.0]
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, GL_VERTEX_ATTRIB_ARRAY_ENABLED, GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, GL_VERTEX_ATTRIB_ARRAY_TYPE, GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, GL_VERTEX_ATTRIB_ARRAY_INTEGER, GL_VERTEX_ATTRIB_ARRAY_DIVISOR, or GL_CURRENT_VERTEX_ATTRIB.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested data.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribfv")]
        public static extern void GetVertexAttrib(UInt32 index, OpenTK.Graphics.OpenGL4.VertexAttribParameter pname, [OutAttribute] out Single @params);

        /// <summary>[requires: v2.0]
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, GL_VERTEX_ATTRIB_ARRAY_ENABLED, GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, GL_VERTEX_ATTRIB_ARRAY_TYPE, GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, GL_VERTEX_ATTRIB_ARRAY_INTEGER, GL_VERTEX_ATTRIB_ARRAY_DIVISOR, or GL_CURRENT_VERTEX_ATTRIB.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested data.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribfv")]
        public static extern unsafe void GetVertexAttrib(UInt32 index, OpenTK.Graphics.OpenGL4.VertexAttribParameter pname, [OutAttribute] Single* @params);

        /// <summary>[requires: v3.0]</summary>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetVertexAttribIiv")]
        public static extern void GetVertexAttribI(Int32 index, OpenTK.Graphics.OpenGL4.VertexAttribParameter pname, [OutAttribute] out Int32 @params);

        /// <summary>[requires: v3.0]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetVertexAttribIiv")]
        public static extern unsafe void GetVertexAttribI(Int32 index, OpenTK.Graphics.OpenGL4.VertexAttribParameter pname, [OutAttribute] Int32* @params);

        /// <summary>[requires: v3.0]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetVertexAttribIiv")]
        public static extern void GetVertexAttribI(UInt32 index, OpenTK.Graphics.OpenGL4.VertexAttribParameter pname, [OutAttribute] out Int32 @params);

        /// <summary>[requires: v3.0]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetVertexAttribIiv")]
        public static extern unsafe void GetVertexAttribI(UInt32 index, OpenTK.Graphics.OpenGL4.VertexAttribParameter pname, [OutAttribute] Int32* @params);

        /// <summary>[requires: v3.0]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetVertexAttribIuiv")]
        public static extern void GetVertexAttribI(UInt32 index, OpenTK.Graphics.OpenGL4.VertexAttribParameter pname, [OutAttribute] out UInt32 @params);

        /// <summary>[requires: v3.0]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetVertexAttribIuiv")]
        public static extern unsafe void GetVertexAttribI(UInt32 index, OpenTK.Graphics.OpenGL4.VertexAttribParameter pname, [OutAttribute] UInt32* @params);

        /// <summary>[requires: v2.0]
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, GL_VERTEX_ATTRIB_ARRAY_ENABLED, GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, GL_VERTEX_ATTRIB_ARRAY_TYPE, GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, GL_VERTEX_ATTRIB_ARRAY_INTEGER, GL_VERTEX_ATTRIB_ARRAY_DIVISOR, or GL_CURRENT_VERTEX_ATTRIB.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested data.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribiv")]
        public static extern void GetVertexAttrib(Int32 index, OpenTK.Graphics.OpenGL4.VertexAttribParameter pname, [OutAttribute] Int32[] @params);

        /// <summary>[requires: v2.0]
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, GL_VERTEX_ATTRIB_ARRAY_ENABLED, GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, GL_VERTEX_ATTRIB_ARRAY_TYPE, GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, GL_VERTEX_ATTRIB_ARRAY_INTEGER, GL_VERTEX_ATTRIB_ARRAY_DIVISOR, or GL_CURRENT_VERTEX_ATTRIB.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested data.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribiv")]
        public static extern void GetVertexAttrib(Int32 index, OpenTK.Graphics.OpenGL4.VertexAttribParameter pname, [OutAttribute] out Int32 @params);

        /// <summary>[requires: v2.0]
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, GL_VERTEX_ATTRIB_ARRAY_ENABLED, GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, GL_VERTEX_ATTRIB_ARRAY_TYPE, GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, GL_VERTEX_ATTRIB_ARRAY_INTEGER, GL_VERTEX_ATTRIB_ARRAY_DIVISOR, or GL_CURRENT_VERTEX_ATTRIB.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested data.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribiv")]
        public static extern unsafe void GetVertexAttrib(Int32 index, OpenTK.Graphics.OpenGL4.VertexAttribParameter pname, [OutAttribute] Int32* @params);

        /// <summary>[requires: v2.0]
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, GL_VERTEX_ATTRIB_ARRAY_ENABLED, GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, GL_VERTEX_ATTRIB_ARRAY_TYPE, GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, GL_VERTEX_ATTRIB_ARRAY_INTEGER, GL_VERTEX_ATTRIB_ARRAY_DIVISOR, or GL_CURRENT_VERTEX_ATTRIB.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested data.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribiv")]
        public static extern void GetVertexAttrib(UInt32 index, OpenTK.Graphics.OpenGL4.VertexAttribParameter pname, [OutAttribute] Int32[] @params);

        /// <summary>[requires: v2.0]
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, GL_VERTEX_ATTRIB_ARRAY_ENABLED, GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, GL_VERTEX_ATTRIB_ARRAY_TYPE, GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, GL_VERTEX_ATTRIB_ARRAY_INTEGER, GL_VERTEX_ATTRIB_ARRAY_DIVISOR, or GL_CURRENT_VERTEX_ATTRIB.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested data.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribiv")]
        public static extern void GetVertexAttrib(UInt32 index, OpenTK.Graphics.OpenGL4.VertexAttribParameter pname, [OutAttribute] out Int32 @params);

        /// <summary>[requires: v2.0]
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, GL_VERTEX_ATTRIB_ARRAY_ENABLED, GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, GL_VERTEX_ATTRIB_ARRAY_TYPE, GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, GL_VERTEX_ATTRIB_ARRAY_INTEGER, GL_VERTEX_ATTRIB_ARRAY_DIVISOR, or GL_CURRENT_VERTEX_ATTRIB.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested data.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribiv")]
        public static extern unsafe void GetVertexAttrib(UInt32 index, OpenTK.Graphics.OpenGL4.VertexAttribParameter pname, [OutAttribute] Int32* @params);

        /// <summary>[requires: v4.1 and ARB_vertex_attrib_64bit|VERSION_4_1]</summary>
        [AutoGenerated(Category = "ARB_vertex_attrib_64bit|VERSION_4_1", Version = "4.1", EntryPoint = "glGetVertexAttribLdv")]
        public static extern void GetVertexAttribL(Int32 index, OpenTK.Graphics.OpenGL4.VertexAttribParameter pname, [OutAttribute] Double[] @params);

        /// <summary>[requires: v4.1 and ARB_vertex_attrib_64bit|VERSION_4_1]</summary>
        [AutoGenerated(Category = "ARB_vertex_attrib_64bit|VERSION_4_1", Version = "4.1", EntryPoint = "glGetVertexAttribLdv")]
        public static extern void GetVertexAttribL(Int32 index, OpenTK.Graphics.OpenGL4.VertexAttribParameter pname, [OutAttribute] out Double @params);

        /// <summary>[requires: v4.1 and ARB_vertex_attrib_64bit|VERSION_4_1]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_vertex_attrib_64bit|VERSION_4_1", Version = "4.1", EntryPoint = "glGetVertexAttribLdv")]
        public static extern unsafe void GetVertexAttribL(Int32 index, OpenTK.Graphics.OpenGL4.VertexAttribParameter pname, [OutAttribute] Double* @params);

        /// <summary>[requires: v4.1 and ARB_vertex_attrib_64bit|VERSION_4_1]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_vertex_attrib_64bit|VERSION_4_1", Version = "4.1", EntryPoint = "glGetVertexAttribLdv")]
        public static extern void GetVertexAttribL(UInt32 index, OpenTK.Graphics.OpenGL4.VertexAttribParameter pname, [OutAttribute] Double[] @params);

        /// <summary>[requires: v4.1 and ARB_vertex_attrib_64bit|VERSION_4_1]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_vertex_attrib_64bit|VERSION_4_1", Version = "4.1", EntryPoint = "glGetVertexAttribLdv")]
        public static extern void GetVertexAttribL(UInt32 index, OpenTK.Graphics.OpenGL4.VertexAttribParameter pname, [OutAttribute] out Double @params);

        /// <summary>[requires: v4.1 and ARB_vertex_attrib_64bit|VERSION_4_1]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_vertex_attrib_64bit|VERSION_4_1", Version = "4.1", EntryPoint = "glGetVertexAttribLdv")]
        public static extern unsafe void GetVertexAttribL(UInt32 index, OpenTK.Graphics.OpenGL4.VertexAttribParameter pname, [OutAttribute] Double* @params);

        /// <summary>[requires: v2.0]
        /// Return the address of the specified generic vertex attribute pointer
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the generic vertex attribute parameter to be returned.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of the generic vertex attribute parameter to be returned. Must be GL_VERTEX_ATTRIB_ARRAY_POINTER.
        /// </para>
        /// </param>
        /// <param name="pointer">
        /// <para>
        /// Returns the pointer value.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribPointerv")]
        public static extern void GetVertexAttribPointer(Int32 index, OpenTK.Graphics.OpenGL4.VertexAttribPointerParameter pname, [OutAttribute] IntPtr pointer);

        /// <summary>[requires: v2.0]
        /// Return the address of the specified generic vertex attribute pointer
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the generic vertex attribute parameter to be returned.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of the generic vertex attribute parameter to be returned. Must be GL_VERTEX_ATTRIB_ARRAY_POINTER.
        /// </para>
        /// </param>
        /// <param name="pointer">
        /// <para>
        /// Returns the pointer value.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribPointerv")]
        public static extern void GetVertexAttribPointer<T2>(Int32 index, OpenTK.Graphics.OpenGL4.VertexAttribPointerParameter pname, [InAttribute, OutAttribute] T2[] pointer)
            where T2 : struct
        ;

        /// <summary>[requires: v2.0]
        /// Return the address of the specified generic vertex attribute pointer
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the generic vertex attribute parameter to be returned.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of the generic vertex attribute parameter to be returned. Must be GL_VERTEX_ATTRIB_ARRAY_POINTER.
        /// </para>
        /// </param>
        /// <param name="pointer">
        /// <para>
        /// Returns the pointer value.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribPointerv")]
        public static extern void GetVertexAttribPointer<T2>(Int32 index, OpenTK.Graphics.OpenGL4.VertexAttribPointerParameter pname, [InAttribute, OutAttribute] T2[,] pointer)
            where T2 : struct
        ;

        /// <summary>[requires: v2.0]
        /// Return the address of the specified generic vertex attribute pointer
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the generic vertex attribute parameter to be returned.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of the generic vertex attribute parameter to be returned. Must be GL_VERTEX_ATTRIB_ARRAY_POINTER.
        /// </para>
        /// </param>
        /// <param name="pointer">
        /// <para>
        /// Returns the pointer value.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribPointerv")]
        public static extern void GetVertexAttribPointer<T2>(Int32 index, OpenTK.Graphics.OpenGL4.VertexAttribPointerParameter pname, [InAttribute, OutAttribute] T2[,,] pointer)
            where T2 : struct
        ;

        /// <summary>[requires: v2.0]
        /// Return the address of the specified generic vertex attribute pointer
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the generic vertex attribute parameter to be returned.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of the generic vertex attribute parameter to be returned. Must be GL_VERTEX_ATTRIB_ARRAY_POINTER.
        /// </para>
        /// </param>
        /// <param name="pointer">
        /// <para>
        /// Returns the pointer value.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribPointerv")]
        public static extern void GetVertexAttribPointer<T2>(Int32 index, OpenTK.Graphics.OpenGL4.VertexAttribPointerParameter pname, [InAttribute, OutAttribute] ref T2 pointer)
            where T2 : struct
        ;

        /// <summary>[requires: v2.0]
        /// Return the address of the specified generic vertex attribute pointer
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the generic vertex attribute parameter to be returned.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of the generic vertex attribute parameter to be returned. Must be GL_VERTEX_ATTRIB_ARRAY_POINTER.
        /// </para>
        /// </param>
        /// <param name="pointer">
        /// <para>
        /// Returns the pointer value.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribPointerv")]
        public static extern void GetVertexAttribPointer(UInt32 index, OpenTK.Graphics.OpenGL4.VertexAttribPointerParameter pname, [OutAttribute] IntPtr pointer);

        /// <summary>[requires: v2.0]
        /// Return the address of the specified generic vertex attribute pointer
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the generic vertex attribute parameter to be returned.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of the generic vertex attribute parameter to be returned. Must be GL_VERTEX_ATTRIB_ARRAY_POINTER.
        /// </para>
        /// </param>
        /// <param name="pointer">
        /// <para>
        /// Returns the pointer value.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribPointerv")]
        public static extern void GetVertexAttribPointer<T2>(UInt32 index, OpenTK.Graphics.OpenGL4.VertexAttribPointerParameter pname, [InAttribute, OutAttribute] T2[] pointer)
            where T2 : struct
        ;

        /// <summary>[requires: v2.0]
        /// Return the address of the specified generic vertex attribute pointer
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the generic vertex attribute parameter to be returned.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of the generic vertex attribute parameter to be returned. Must be GL_VERTEX_ATTRIB_ARRAY_POINTER.
        /// </para>
        /// </param>
        /// <param name="pointer">
        /// <para>
        /// Returns the pointer value.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribPointerv")]
        public static extern void GetVertexAttribPointer<T2>(UInt32 index, OpenTK.Graphics.OpenGL4.VertexAttribPointerParameter pname, [InAttribute, OutAttribute] T2[,] pointer)
            where T2 : struct
        ;

        /// <summary>[requires: v2.0]
        /// Return the address of the specified generic vertex attribute pointer
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the generic vertex attribute parameter to be returned.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of the generic vertex attribute parameter to be returned. Must be GL_VERTEX_ATTRIB_ARRAY_POINTER.
        /// </para>
        /// </param>
        /// <param name="pointer">
        /// <para>
        /// Returns the pointer value.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribPointerv")]
        public static extern void GetVertexAttribPointer<T2>(UInt32 index, OpenTK.Graphics.OpenGL4.VertexAttribPointerParameter pname, [InAttribute, OutAttribute] T2[,,] pointer)
            where T2 : struct
        ;

        /// <summary>[requires: v2.0]
        /// Return the address of the specified generic vertex attribute pointer
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the generic vertex attribute parameter to be returned.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of the generic vertex attribute parameter to be returned. Must be GL_VERTEX_ATTRIB_ARRAY_POINTER.
        /// </para>
        /// </param>
        /// <param name="pointer">
        /// <para>
        /// Returns the pointer value.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribPointerv")]
        public static extern void GetVertexAttribPointer<T2>(UInt32 index, OpenTK.Graphics.OpenGL4.VertexAttribPointerParameter pname, [InAttribute, OutAttribute] ref T2 pointer)
            where T2 : struct
        ;

        /// <summary>[requires: v1.0]
        /// Specify implementation-specific hints
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies a symbolic constant indicating the behavior to be controlled. GL_LINE_SMOOTH_HINT, GL_POLYGON_SMOOTH_HINT, GL_TEXTURE_COMPRESSION_HINT, and GL_FRAGMENT_SHADER_DERIVATIVE_HINT are accepted.
        /// </para>
        /// </param>
        /// <param name="mode">
        /// <para>
        /// Specifies a symbolic constant indicating the desired behavior. GL_FASTEST, GL_NICEST, and GL_DONT_CARE are accepted.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glHint")]
        public static extern void Hint(OpenTK.Graphics.OpenGL4.HintTarget target, OpenTK.Graphics.OpenGL4.HintMode mode);

        /// <summary>
        /// Define histogram table
        /// </summary>
        /// <param name="target">
        /// <para>
        /// The histogram whose parameters are to be set. Must be one of GL_HISTOGRAM or GL_PROXY_HISTOGRAM.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// The number of entries in the histogram table. Must be a power of 2.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// The format of entries in the histogram table. Must be one of GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, or GL_RGBA16.
        /// </para>
        /// </param>
        /// <param name="sink">
        /// <para>
        /// If GL_TRUE, pixels will be consumed by the histogramming process and no drawing or texture loading will take place. If GL_FALSE, pixels will proceed to the minmax process after histogramming.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glHistogram")]
        public static extern void Histogram(OpenTK.Graphics.OpenGL4.HistogramTarget target, Int32 width, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, bool sink);

        /// <summary>[requires: v4.3 and ARB_invalidate_subdata|VERSION_4_3]
        /// Invalidate the content of a buffer object's data store
        /// </summary>
        /// <param name="buffer">
        /// <para>
        /// The name of a buffer object whose data store to invalidate.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_invalidate_subdata|VERSION_4_3", Version = "4.3", EntryPoint = "glInvalidateBufferData")]
        public static extern void InvalidateBufferData(Int32 buffer);

        /// <summary>[requires: v4.3 and ARB_invalidate_subdata|VERSION_4_3]
        /// Invalidate the content of a buffer object's data store
        /// </summary>
        /// <param name="buffer">
        /// <para>
        /// The name of a buffer object whose data store to invalidate.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_invalidate_subdata|VERSION_4_3", Version = "4.3", EntryPoint = "glInvalidateBufferData")]
        public static extern void InvalidateBufferData(UInt32 buffer);

        /// <summary>[requires: v4.3 and ARB_invalidate_subdata|VERSION_4_3]
        /// Invalidate a region of a buffer object's data store
        /// </summary>
        /// <param name="buffer">
        /// <para>
        /// The name of a buffer object, a subrange of whose data store to invalidate.
        /// </para>
        /// </param>
        /// <param name="offset">
        /// <para>
        /// The offset within the buffer's data store of the start of the range to be invalidated.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// The length of the range within the buffer's data store to be invalidated.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_invalidate_subdata|VERSION_4_3", Version = "4.3", EntryPoint = "glInvalidateBufferSubData")]
        public static extern void InvalidateBufferSubData(Int32 buffer, IntPtr offset, IntPtr length);

        /// <summary>[requires: v4.3 and ARB_invalidate_subdata|VERSION_4_3]
        /// Invalidate a region of a buffer object's data store
        /// </summary>
        /// <param name="buffer">
        /// <para>
        /// The name of a buffer object, a subrange of whose data store to invalidate.
        /// </para>
        /// </param>
        /// <param name="offset">
        /// <para>
        /// The offset within the buffer's data store of the start of the range to be invalidated.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// The length of the range within the buffer's data store to be invalidated.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_invalidate_subdata|VERSION_4_3", Version = "4.3", EntryPoint = "glInvalidateBufferSubData")]
        public static extern void InvalidateBufferSubData(UInt32 buffer, IntPtr offset, IntPtr length);

        /// <summary>[requires: v4.3 and ARB_invalidate_subdata|VERSION_4_3]
        /// Invalidate the content some or all of a framebuffer object's attachments
        /// </summary>
        /// <param name="target">
        /// <para>
        /// The target to which the framebuffer is attached. target must be GL_FRAMEBUFFER, GL_DRAW_FRAMEBUFFER, or GL_READ_FRAMEBUFFER.
        /// </para>
        /// </param>
        /// <param name="numAttachments">
        /// <para>
        /// The number of entries in the attachments array.
        /// </para>
        /// </param>
        /// <param name="attachments">
        /// <para>
        /// The address of an array identifying the attachments to be invalidated.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_invalidate_subdata|VERSION_4_3", Version = "4.3", EntryPoint = "glInvalidateFramebuffer")]
        public static extern void InvalidateFramebuffer(OpenTK.Graphics.OpenGL4.FramebufferTarget target, Int32 numAttachments, OpenTK.Graphics.OpenGL4.FramebufferAttachment[] attachments);

        /// <summary>[requires: v4.3 and ARB_invalidate_subdata|VERSION_4_3]
        /// Invalidate the content some or all of a framebuffer object's attachments
        /// </summary>
        /// <param name="target">
        /// <para>
        /// The target to which the framebuffer is attached. target must be GL_FRAMEBUFFER, GL_DRAW_FRAMEBUFFER, or GL_READ_FRAMEBUFFER.
        /// </para>
        /// </param>
        /// <param name="numAttachments">
        /// <para>
        /// The number of entries in the attachments array.
        /// </para>
        /// </param>
        /// <param name="attachments">
        /// <para>
        /// The address of an array identifying the attachments to be invalidated.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_invalidate_subdata|VERSION_4_3", Version = "4.3", EntryPoint = "glInvalidateFramebuffer")]
        public static extern void InvalidateFramebuffer(OpenTK.Graphics.OpenGL4.FramebufferTarget target, Int32 numAttachments, ref OpenTK.Graphics.OpenGL4.FramebufferAttachment attachments);

        /// <summary>[requires: v4.3 and ARB_invalidate_subdata|VERSION_4_3]
        /// Invalidate the content some or all of a framebuffer object's attachments
        /// </summary>
        /// <param name="target">
        /// <para>
        /// The target to which the framebuffer is attached. target must be GL_FRAMEBUFFER, GL_DRAW_FRAMEBUFFER, or GL_READ_FRAMEBUFFER.
        /// </para>
        /// </param>
        /// <param name="numAttachments">
        /// <para>
        /// The number of entries in the attachments array.
        /// </para>
        /// </param>
        /// <param name="attachments">
        /// <para>
        /// The address of an array identifying the attachments to be invalidated.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_invalidate_subdata|VERSION_4_3", Version = "4.3", EntryPoint = "glInvalidateFramebuffer")]
        public static extern unsafe void InvalidateFramebuffer(OpenTK.Graphics.OpenGL4.FramebufferTarget target, Int32 numAttachments, OpenTK.Graphics.OpenGL4.FramebufferAttachment* attachments);

        /// <summary>[requires: v4.3 and ARB_invalidate_subdata|VERSION_4_3]
        /// Invalidate the content of a region of some or all of a framebuffer object's attachments
        /// </summary>
        /// <param name="target">
        /// <para>
        /// The target to which the framebuffer is attached. target must be GL_FRAMEBUFFER, GL_DRAW_FRAMEBUFFER, or GL_READ_FRAMEBUFFER.
        /// </para>
        /// </param>
        /// <param name="numAttachments">
        /// <para>
        /// The number of entries in the attachments array.
        /// </para>
        /// </param>
        /// <param name="attachments">
        /// <para>
        /// The address of an array identifying the attachments to be invalidated.
        /// </para>
        /// </param>
        /// <param name="x">
        /// <para>
        /// The X offset of the region to be invalidated.
        /// </para>
        /// </param>
        /// <param name="y">
        /// <para>
        /// The Y offset of the region to be invalidated.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// The width of the region to be invalidated.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// The height of the region to be invalidated.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_invalidate_subdata|VERSION_4_3", Version = "4.3", EntryPoint = "glInvalidateSubFramebuffer")]
        public static extern void InvalidateSubFramebuffer(OpenTK.Graphics.OpenGL4.FramebufferTarget target, Int32 numAttachments, OpenTK.Graphics.OpenGL4.FramebufferAttachment[] attachments, Int32 x, Int32 y, Int32 width, Int32 height);

        /// <summary>[requires: v4.3 and ARB_invalidate_subdata|VERSION_4_3]
        /// Invalidate the content of a region of some or all of a framebuffer object's attachments
        /// </summary>
        /// <param name="target">
        /// <para>
        /// The target to which the framebuffer is attached. target must be GL_FRAMEBUFFER, GL_DRAW_FRAMEBUFFER, or GL_READ_FRAMEBUFFER.
        /// </para>
        /// </param>
        /// <param name="numAttachments">
        /// <para>
        /// The number of entries in the attachments array.
        /// </para>
        /// </param>
        /// <param name="attachments">
        /// <para>
        /// The address of an array identifying the attachments to be invalidated.
        /// </para>
        /// </param>
        /// <param name="x">
        /// <para>
        /// The X offset of the region to be invalidated.
        /// </para>
        /// </param>
        /// <param name="y">
        /// <para>
        /// The Y offset of the region to be invalidated.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// The width of the region to be invalidated.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// The height of the region to be invalidated.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_invalidate_subdata|VERSION_4_3", Version = "4.3", EntryPoint = "glInvalidateSubFramebuffer")]
        public static extern void InvalidateSubFramebuffer(OpenTK.Graphics.OpenGL4.FramebufferTarget target, Int32 numAttachments, ref OpenTK.Graphics.OpenGL4.FramebufferAttachment attachments, Int32 x, Int32 y, Int32 width, Int32 height);

        /// <summary>[requires: v4.3 and ARB_invalidate_subdata|VERSION_4_3]
        /// Invalidate the content of a region of some or all of a framebuffer object's attachments
        /// </summary>
        /// <param name="target">
        /// <para>
        /// The target to which the framebuffer is attached. target must be GL_FRAMEBUFFER, GL_DRAW_FRAMEBUFFER, or GL_READ_FRAMEBUFFER.
        /// </para>
        /// </param>
        /// <param name="numAttachments">
        /// <para>
        /// The number of entries in the attachments array.
        /// </para>
        /// </param>
        /// <param name="attachments">
        /// <para>
        /// The address of an array identifying the attachments to be invalidated.
        /// </para>
        /// </param>
        /// <param name="x">
        /// <para>
        /// The X offset of the region to be invalidated.
        /// </para>
        /// </param>
        /// <param name="y">
        /// <para>
        /// The Y offset of the region to be invalidated.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// The width of the region to be invalidated.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// The height of the region to be invalidated.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_invalidate_subdata|VERSION_4_3", Version = "4.3", EntryPoint = "glInvalidateSubFramebuffer")]
        public static extern unsafe void InvalidateSubFramebuffer(OpenTK.Graphics.OpenGL4.FramebufferTarget target, Int32 numAttachments, OpenTK.Graphics.OpenGL4.FramebufferAttachment* attachments, Int32 x, Int32 y, Int32 width, Int32 height);

        /// <summary>[requires: v4.3 and ARB_invalidate_subdata|VERSION_4_3]
        /// Invalidate the entirety a texture image
        /// </summary>
        /// <param name="texture">
        /// <para>
        /// The name of a texture object to invalidate.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// The level of detail of the texture object to invalidate.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_invalidate_subdata|VERSION_4_3", Version = "4.3", EntryPoint = "glInvalidateTexImage")]
        public static extern void InvalidateTexImage(Int32 texture, Int32 level);

        /// <summary>[requires: v4.3 and ARB_invalidate_subdata|VERSION_4_3]
        /// Invalidate the entirety a texture image
        /// </summary>
        /// <param name="texture">
        /// <para>
        /// The name of a texture object to invalidate.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// The level of detail of the texture object to invalidate.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_invalidate_subdata|VERSION_4_3", Version = "4.3", EntryPoint = "glInvalidateTexImage")]
        public static extern void InvalidateTexImage(UInt32 texture, Int32 level);

        /// <summary>[requires: v4.3 and ARB_invalidate_subdata|VERSION_4_3]
        /// Invalidate a region of a texture image
        /// </summary>
        /// <param name="texture">
        /// <para>
        /// The name of a texture object a subregion of which to invalidate.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// The level of detail of the texture object within which the region resides.
        /// </para>
        /// </param>
        /// <param name="xoffset">
        /// <para>
        /// The X offset of the region to be invalidated.
        /// </para>
        /// </param>
        /// <param name="yoffset">
        /// <para>
        /// The Y offset of the region to be invalidated.
        /// </para>
        /// </param>
        /// <param name="zoffset">
        /// <para>
        /// The Z offset of the region to be invalidated.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// The width of the region to be invalidated.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// The height of the region to be invalidated.
        /// </para>
        /// </param>
        /// <param name="depth">
        /// <para>
        /// The depth of the region to be invalidated.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_invalidate_subdata|VERSION_4_3", Version = "4.3", EntryPoint = "glInvalidateTexSubImage")]
        public static extern void InvalidateTexSubImage(Int32 texture, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth);

        /// <summary>[requires: v4.3 and ARB_invalidate_subdata|VERSION_4_3]
        /// Invalidate a region of a texture image
        /// </summary>
        /// <param name="texture">
        /// <para>
        /// The name of a texture object a subregion of which to invalidate.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// The level of detail of the texture object within which the region resides.
        /// </para>
        /// </param>
        /// <param name="xoffset">
        /// <para>
        /// The X offset of the region to be invalidated.
        /// </para>
        /// </param>
        /// <param name="yoffset">
        /// <para>
        /// The Y offset of the region to be invalidated.
        /// </para>
        /// </param>
        /// <param name="zoffset">
        /// <para>
        /// The Z offset of the region to be invalidated.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// The width of the region to be invalidated.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// The height of the region to be invalidated.
        /// </para>
        /// </param>
        /// <param name="depth">
        /// <para>
        /// The depth of the region to be invalidated.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_invalidate_subdata|VERSION_4_3", Version = "4.3", EntryPoint = "glInvalidateTexSubImage")]
        public static extern void InvalidateTexSubImage(UInt32 texture, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth);

        /// <summary>[requires: v1.5]
        /// Determine if a name corresponds to a buffer object
        /// </summary>
        /// <param name="buffer">
        /// <para>
        /// Specifies a value that may be the name of a buffer object.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glIsBuffer")]
        public static extern bool IsBuffer(Int32 buffer);

        /// <summary>[requires: v1.5]
        /// Determine if a name corresponds to a buffer object
        /// </summary>
        /// <param name="buffer">
        /// <para>
        /// Specifies a value that may be the name of a buffer object.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glIsBuffer")]
        public static extern bool IsBuffer(UInt32 buffer);

        /// <summary>[requires: v1.0]
        /// Test whether a capability is enabled
        /// </summary>
        /// <param name="cap">
        /// <para>
        /// Specifies a symbolic constant indicating a GL capability.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the capability.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glIsEnabled")]
        public static extern bool IsEnabled(OpenTK.Graphics.OpenGL4.EnableCap cap);

        /// <summary>[requires: v3.0]
        /// Test whether a capability is enabled
        /// </summary>
        /// <param name="cap">
        /// <para>
        /// Specifies a symbolic constant indicating a GL capability.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the capability.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glIsEnabledi")]
        public static extern bool IsEnabled(OpenTK.Graphics.OpenGL4.IndexedEnableCap target, Int32 index);

        /// <summary>[requires: v3.0]
        /// Test whether a capability is enabled
        /// </summary>
        /// <param name="cap">
        /// <para>
        /// Specifies a symbolic constant indicating a GL capability.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the capability.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glIsEnabledi")]
        public static extern bool IsEnabled(OpenTK.Graphics.OpenGL4.IndexedEnableCap target, UInt32 index);

        /// <summary>[requires: v3.0 and ARB_framebuffer_object|VERSION_3_0]
        /// Determine if a name corresponds to a framebuffer object
        /// </summary>
        /// <param name="framebuffer">
        /// <para>
        /// Specifies a value that may be the name of a framebuffer object.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glIsFramebuffer")]
        public static extern bool IsFramebuffer(Int32 framebuffer);

        /// <summary>[requires: v3.0 and ARB_framebuffer_object|VERSION_3_0]
        /// Determine if a name corresponds to a framebuffer object
        /// </summary>
        /// <param name="framebuffer">
        /// <para>
        /// Specifies a value that may be the name of a framebuffer object.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glIsFramebuffer")]
        public static extern bool IsFramebuffer(UInt32 framebuffer);

        /// <summary>[requires: v2.0]
        /// Determines if a name corresponds to a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies a potential program object.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glIsProgram")]
        public static extern bool IsProgram(Int32 program);

        /// <summary>[requires: v2.0]
        /// Determines if a name corresponds to a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies a potential program object.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glIsProgram")]
        public static extern bool IsProgram(UInt32 program);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Determine if a name corresponds to a program pipeline object
        /// </summary>
        /// <param name="pipeline">
        /// <para>
        /// Specifies a value that may be the name of a program pipeline object.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glIsProgramPipeline")]
        public static extern bool IsProgramPipeline(Int32 pipeline);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Determine if a name corresponds to a program pipeline object
        /// </summary>
        /// <param name="pipeline">
        /// <para>
        /// Specifies a value that may be the name of a program pipeline object.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glIsProgramPipeline")]
        public static extern bool IsProgramPipeline(UInt32 pipeline);

        /// <summary>[requires: v1.5]
        /// Determine if a name corresponds to a query object
        /// </summary>
        /// <param name="id">
        /// <para>
        /// Specifies a value that may be the name of a query object.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glIsQuery")]
        public static extern bool IsQuery(Int32 id);

        /// <summary>[requires: v1.5]
        /// Determine if a name corresponds to a query object
        /// </summary>
        /// <param name="id">
        /// <para>
        /// Specifies a value that may be the name of a query object.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glIsQuery")]
        public static extern bool IsQuery(UInt32 id);

        /// <summary>[requires: v3.0 and ARB_framebuffer_object|VERSION_3_0]
        /// Determine if a name corresponds to a renderbuffer object
        /// </summary>
        /// <param name="renderbuffer">
        /// <para>
        /// Specifies a value that may be the name of a renderbuffer object.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glIsRenderbuffer")]
        public static extern bool IsRenderbuffer(Int32 renderbuffer);

        /// <summary>[requires: v3.0 and ARB_framebuffer_object|VERSION_3_0]
        /// Determine if a name corresponds to a renderbuffer object
        /// </summary>
        /// <param name="renderbuffer">
        /// <para>
        /// Specifies a value that may be the name of a renderbuffer object.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glIsRenderbuffer")]
        public static extern bool IsRenderbuffer(UInt32 renderbuffer);

        /// <summary>[requires: v3.3 and ARB_sampler_objects|VERSION_3_3]
        /// Determine if a name corresponds to a sampler object
        /// </summary>
        /// <param name="id">
        /// <para>
        /// Specifies a value that may be the name of a sampler object.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glIsSampler")]
        public static extern bool IsSampler(Int32 sampler);

        /// <summary>[requires: v3.3 and ARB_sampler_objects|VERSION_3_3]
        /// Determine if a name corresponds to a sampler object
        /// </summary>
        /// <param name="id">
        /// <para>
        /// Specifies a value that may be the name of a sampler object.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glIsSampler")]
        public static extern bool IsSampler(UInt32 sampler);

        /// <summary>[requires: v2.0]
        /// Determines if a name corresponds to a shader object
        /// </summary>
        /// <param name="shader">
        /// <para>
        /// Specifies a potential shader object.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glIsShader")]
        public static extern bool IsShader(Int32 shader);

        /// <summary>[requires: v2.0]
        /// Determines if a name corresponds to a shader object
        /// </summary>
        /// <param name="shader">
        /// <para>
        /// Specifies a potential shader object.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glIsShader")]
        public static extern bool IsShader(UInt32 shader);

        /// <summary>[requires: v3.2 and ARB_sync|VERSION_3_2]
        /// Determine if a name corresponds to a sync object
        /// </summary>
        /// <param name="sync">
        /// <para>
        /// Specifies a value that may be the name of a sync object.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_sync|VERSION_3_2", Version = "3.2", EntryPoint = "glIsSync")]
        public static extern bool IsSync(IntPtr sync);

        /// <summary>[requires: v1.1]
        /// Determine if a name corresponds to a texture
        /// </summary>
        /// <param name="texture">
        /// <para>
        /// Specifies a value that may be the name of a texture.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glIsTexture")]
        public static extern bool IsTexture(Int32 texture);

        /// <summary>[requires: v1.1]
        /// Determine if a name corresponds to a texture
        /// </summary>
        /// <param name="texture">
        /// <para>
        /// Specifies a value that may be the name of a texture.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glIsTexture")]
        public static extern bool IsTexture(UInt32 texture);

        /// <summary>[requires: v4.0 and ARB_transform_feedback2|VERSION_4_0]
        /// Determine if a name corresponds to a transform feedback object
        /// </summary>
        /// <param name="id">
        /// <para>
        /// Specifies a value that may be the name of a transform feedback object.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_transform_feedback2|VERSION_4_0", Version = "4.0", EntryPoint = "glIsTransformFeedback")]
        public static extern bool IsTransformFeedback(Int32 id);

        /// <summary>[requires: v4.0 and ARB_transform_feedback2|VERSION_4_0]
        /// Determine if a name corresponds to a transform feedback object
        /// </summary>
        /// <param name="id">
        /// <para>
        /// Specifies a value that may be the name of a transform feedback object.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_transform_feedback2|VERSION_4_0", Version = "4.0", EntryPoint = "glIsTransformFeedback")]
        public static extern bool IsTransformFeedback(UInt32 id);

        /// <summary>[requires: v3.0 and ARB_vertex_array_object|VERSION_3_0]
        /// Determine if a name corresponds to a vertex array object
        /// </summary>
        /// <param name="array">
        /// <para>
        /// Specifies a value that may be the name of a vertex array object.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_array_object|VERSION_3_0", Version = "3.0", EntryPoint = "glIsVertexArray")]
        public static extern bool IsVertexArray(Int32 array);

        /// <summary>[requires: v3.0 and ARB_vertex_array_object|VERSION_3_0]
        /// Determine if a name corresponds to a vertex array object
        /// </summary>
        /// <param name="array">
        /// <para>
        /// Specifies a value that may be the name of a vertex array object.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_vertex_array_object|VERSION_3_0", Version = "3.0", EntryPoint = "glIsVertexArray")]
        public static extern bool IsVertexArray(UInt32 array);

        /// <summary>[requires: v1.0]
        /// Specify the width of rasterized lines
        /// </summary>
        /// <param name="width">
        /// <para>
        /// Specifies the width of rasterized lines. The initial value is 1.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glLineWidth")]
        public static extern void LineWidth(Single width);

        /// <summary>[requires: v2.0]
        /// Links a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program object to be linked.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glLinkProgram")]
        public static extern void LinkProgram(Int32 program);

        /// <summary>[requires: v2.0]
        /// Links a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program object to be linked.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glLinkProgram")]
        public static extern void LinkProgram(UInt32 program);

        /// <summary>[requires: v1.0]
        /// Specify a logical pixel operation for rendering
        /// </summary>
        /// <param name="opcode">
        /// <para>
        /// Specifies a symbolic constant that selects a logical operation. The following symbols are accepted: GL_CLEAR, GL_SET, GL_COPY, GL_COPY_INVERTED, GL_NOOP, GL_INVERT, GL_AND, GL_NAND, GL_OR, GL_NOR, GL_XOR, GL_EQUIV, GL_AND_REVERSE, GL_AND_INVERTED, GL_OR_REVERSE, and GL_OR_INVERTED. The initial value is GL_COPY.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glLogicOp")]
        public static extern void LogicOp(OpenTK.Graphics.OpenGL4.LogicOp opcode);

        /// <summary>[requires: v1.5]
        /// Map a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target buffer object being mapped. The symbolic constant must be GL_ARRAY_BUFFER, GL_ATOMIC_COUNTER_BUFFER, GL_COPY_READ_BUFFER, GL_COPY_WRITE_BUFFER, GL_DRAW_INDIRECT_BUFFER, GL_DISPATCH_INDIRECT_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, GL_PIXEL_UNPACK_BUFFER, GL_QUERY_BUFFER, GL_SHADER_STORAGE_BUFFER, GL_TEXTURE_BUFFER, GL_TRANSFORM_FEEDBACK_BUFFER or GL_UNIFORM_BUFFER.
        /// </para>
        /// </param>
        /// <param name="access">
        /// <para>
        /// For glMapBuffer only, specifies the access policy, indicating whether it will be possible to read from, write to, or both read from and write to the buffer object's mapped data store. The symbolic constant must be GL_READ_ONLY, GL_WRITE_ONLY, or GL_READ_WRITE.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glMapBuffer")]
        public static extern IntPtr MapBuffer(OpenTK.Graphics.OpenGL4.BufferTarget target, OpenTK.Graphics.OpenGL4.BufferAccess access);

        /// <summary>[requires: v3.0 and ARB_map_buffer_range|VERSION_3_0]
        /// Map a section of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies a binding to which the target buffer is bound.
        /// </para>
        /// </param>
        /// <param name="offset">
        /// <para>
        /// Specifies a the starting offset within the buffer of the range to be mapped.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies a length of the range to be mapped.
        /// </para>
        /// </param>
        /// <param name="access">
        /// <para>
        /// Specifies a combination of access flags indicating the desired access to the range.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_map_buffer_range|VERSION_3_0", Version = "3.0", EntryPoint = "glMapBufferRange")]
        public static extern IntPtr MapBufferRange(OpenTK.Graphics.OpenGL4.BufferTarget target, IntPtr offset, IntPtr length, OpenTK.Graphics.OpenGL4.BufferAccessMask access);

        /// <summary>[requires: v4.2 and ARB_shader_image_load_store|VERSION_4_2]
        /// Defines a barrier ordering memory transactions
        /// </summary>
        /// <param name="barriers">
        /// <para>
        /// Specifies the barriers to insert. Must be a bitwise combination of GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT, GL_ELEMENT_ARRAY_BARRIER_BIT, GL_UNIFORM_BARRIER_BIT, GL_TEXTURE_FETCH_BARRIER_BIT, GL_SHADER_IMAGE_ACCESS_BARRIER_BIT, GL_COMMAND_BARRIER_BIT, GL_PIXEL_BUFFER_BARRIER_BIT, GL_TEXTURE_UPDATE_BARRIER_BIT, GL_BUFFER_UPDATE_BARRIER_BIT, GL_FRAMEBUFFER_BARRIER_BIT, GL_TRANSFORM_FEEDBACK_BARRIER_BIT, GL_ATOMIC_COUNTER_BARRIER_BIT, or GL_SHADER_STORAGE_BARRIER_BIT. If the special value GL_ALL_BARRIER_BITS is specified, all supported barriers will be inserted.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_shader_image_load_store|VERSION_4_2", Version = "4.2", EntryPoint = "glMemoryBarrier")]
        public static extern void MemoryBarrier(OpenTK.Graphics.OpenGL4.MemoryBarrierFlags barriers);

        /// <summary>
        /// Define minmax table
        /// </summary>
        /// <param name="target">
        /// <para>
        /// The minmax table whose parameters are to be set. Must be GL_MINMAX.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// The format of entries in the minmax table. Must be one of GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, or GL_RGBA16.
        /// </para>
        /// </param>
        /// <param name="sink">
        /// <para>
        /// If GL_TRUE, pixels will be consumed by the minmax process and no drawing or texture loading will take place. If GL_FALSE, pixels will proceed to the final conversion process after minmax.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glMinmax")]
        public static extern void Minmax(OpenTK.Graphics.OpenGL4.MinmaxTarget target, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, bool sink);

        /// <summary>[requires: v4.0]
        /// Specifies minimum rate at which sample shaing takes place
        /// </summary>
        /// <param name="value">
        /// <para>
        /// Specifies the rate at which samples are shaded within each covered pixel.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_4_0", Version = "4.0", EntryPoint = "glMinSampleShading")]
        public static extern void MinSampleShading(Single value);

        /// <summary>[requires: v1.4]
        /// Render multiple sets of primitives from array data
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="first">
        /// <para>
        /// Points to an array of starting indices in the enabled arrays.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Points to an array of the number of indices to be rendered.
        /// </para>
        /// </param>
        /// <param name="drawcount">
        /// <para>
        /// Specifies the size of the first and count
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawArrays")]
        public static extern void MultiDrawArrays(OpenTK.Graphics.OpenGL4.PrimitiveType mode, Int32[] first, Int32[] count, Int32 drawcount);

        /// <summary>[requires: v1.4]
        /// Render multiple sets of primitives from array data
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="first">
        /// <para>
        /// Points to an array of starting indices in the enabled arrays.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Points to an array of the number of indices to be rendered.
        /// </para>
        /// </param>
        /// <param name="drawcount">
        /// <para>
        /// Specifies the size of the first and count
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawArrays")]
        public static extern void MultiDrawArrays(OpenTK.Graphics.OpenGL4.PrimitiveType mode, ref Int32 first, ref Int32 count, Int32 drawcount);

        /// <summary>[requires: v1.4]
        /// Render multiple sets of primitives from array data
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="first">
        /// <para>
        /// Points to an array of starting indices in the enabled arrays.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Points to an array of the number of indices to be rendered.
        /// </para>
        /// </param>
        /// <param name="drawcount">
        /// <para>
        /// Specifies the size of the first and count
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawArrays")]
        public static extern unsafe void MultiDrawArrays(OpenTK.Graphics.OpenGL4.PrimitiveType mode, Int32* first, Int32* count, Int32 drawcount);

        /// <summary>[requires: v4.3 and ARB_multi_draw_indirect|VERSION_4_3]
        /// Render multiple sets of primitives from array data, taking parameters from memory
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY, and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="indirect">
        /// <para>
        /// Specifies the address of an array of structures containing the draw parameters.
        /// </para>
        /// </param>
        /// <param name="drawcount">
        /// <para>
        /// Specifies the the number of elements in the array of draw parameter structures.
        /// </para>
        /// </param>
        /// <param name="stride">
        /// <para>
        /// Specifies the distance in basic machine units between elements of the draw parameter array.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_multi_draw_indirect|VERSION_4_3", Version = "4.3", EntryPoint = "glMultiDrawArraysIndirect")]
        public static extern void MultiDrawArraysIndirect(OpenTK.Graphics.OpenGL4.PrimitiveType mode, IntPtr indirect, Int32 drawcount, Int32 stride);

        /// <summary>[requires: v4.3 and ARB_multi_draw_indirect|VERSION_4_3]
        /// Render multiple sets of primitives from array data, taking parameters from memory
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY, and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="indirect">
        /// <para>
        /// Specifies the address of an array of structures containing the draw parameters.
        /// </para>
        /// </param>
        /// <param name="drawcount">
        /// <para>
        /// Specifies the the number of elements in the array of draw parameter structures.
        /// </para>
        /// </param>
        /// <param name="stride">
        /// <para>
        /// Specifies the distance in basic machine units between elements of the draw parameter array.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_multi_draw_indirect|VERSION_4_3", Version = "4.3", EntryPoint = "glMultiDrawArraysIndirect")]
        public static extern void MultiDrawArraysIndirect<T1>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, [InAttribute, OutAttribute] T1[] indirect, Int32 drawcount, Int32 stride)
            where T1 : struct
        ;

        /// <summary>[requires: v4.3 and ARB_multi_draw_indirect|VERSION_4_3]
        /// Render multiple sets of primitives from array data, taking parameters from memory
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY, and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="indirect">
        /// <para>
        /// Specifies the address of an array of structures containing the draw parameters.
        /// </para>
        /// </param>
        /// <param name="drawcount">
        /// <para>
        /// Specifies the the number of elements in the array of draw parameter structures.
        /// </para>
        /// </param>
        /// <param name="stride">
        /// <para>
        /// Specifies the distance in basic machine units between elements of the draw parameter array.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_multi_draw_indirect|VERSION_4_3", Version = "4.3", EntryPoint = "glMultiDrawArraysIndirect")]
        public static extern void MultiDrawArraysIndirect<T1>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, [InAttribute, OutAttribute] T1[,] indirect, Int32 drawcount, Int32 stride)
            where T1 : struct
        ;

        /// <summary>[requires: v4.3 and ARB_multi_draw_indirect|VERSION_4_3]
        /// Render multiple sets of primitives from array data, taking parameters from memory
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY, and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="indirect">
        /// <para>
        /// Specifies the address of an array of structures containing the draw parameters.
        /// </para>
        /// </param>
        /// <param name="drawcount">
        /// <para>
        /// Specifies the the number of elements in the array of draw parameter structures.
        /// </para>
        /// </param>
        /// <param name="stride">
        /// <para>
        /// Specifies the distance in basic machine units between elements of the draw parameter array.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_multi_draw_indirect|VERSION_4_3", Version = "4.3", EntryPoint = "glMultiDrawArraysIndirect")]
        public static extern void MultiDrawArraysIndirect<T1>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, [InAttribute, OutAttribute] T1[,,] indirect, Int32 drawcount, Int32 stride)
            where T1 : struct
        ;

        /// <summary>[requires: v4.3 and ARB_multi_draw_indirect|VERSION_4_3]
        /// Render multiple sets of primitives from array data, taking parameters from memory
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY, and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="indirect">
        /// <para>
        /// Specifies the address of an array of structures containing the draw parameters.
        /// </para>
        /// </param>
        /// <param name="drawcount">
        /// <para>
        /// Specifies the the number of elements in the array of draw parameter structures.
        /// </para>
        /// </param>
        /// <param name="stride">
        /// <para>
        /// Specifies the distance in basic machine units between elements of the draw parameter array.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_multi_draw_indirect|VERSION_4_3", Version = "4.3", EntryPoint = "glMultiDrawArraysIndirect")]
        public static extern void MultiDrawArraysIndirect<T1>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, [InAttribute, OutAttribute] ref T1 indirect, Int32 drawcount, Int32 stride)
            where T1 : struct
        ;

        /// <summary>[requires: v1.4]
        /// Render multiple sets of primitives by specifying indices of array data elements
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Points to an array of the elements counts.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        /// <param name="drawcount">
        /// <para>
        /// Specifies the size of the count and indices arrays.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        public static extern void MultiDrawElements(OpenTK.Graphics.OpenGL4.PrimitiveType mode, Int32[] count, OpenTK.Graphics.OpenGL4.DrawElementsType type, IntPtr indices, Int32 drawcount);

        /// <summary>[requires: v1.4]
        /// Render multiple sets of primitives by specifying indices of array data elements
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Points to an array of the elements counts.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        /// <param name="drawcount">
        /// <para>
        /// Specifies the size of the count and indices arrays.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        public static extern void MultiDrawElements<T3>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, Int32[] count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute] T3[] indices, Int32 drawcount)
            where T3 : struct
        ;

        /// <summary>[requires: v1.4]
        /// Render multiple sets of primitives by specifying indices of array data elements
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Points to an array of the elements counts.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        /// <param name="drawcount">
        /// <para>
        /// Specifies the size of the count and indices arrays.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        public static extern void MultiDrawElements<T3>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, Int32[] count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute] T3[,] indices, Int32 drawcount)
            where T3 : struct
        ;

        /// <summary>[requires: v1.4]
        /// Render multiple sets of primitives by specifying indices of array data elements
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Points to an array of the elements counts.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        /// <param name="drawcount">
        /// <para>
        /// Specifies the size of the count and indices arrays.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        public static extern void MultiDrawElements<T3>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, Int32[] count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute] T3[,,] indices, Int32 drawcount)
            where T3 : struct
        ;

        /// <summary>[requires: v1.4]
        /// Render multiple sets of primitives by specifying indices of array data elements
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Points to an array of the elements counts.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        /// <param name="drawcount">
        /// <para>
        /// Specifies the size of the count and indices arrays.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        public static extern void MultiDrawElements<T3>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, Int32[] count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute] ref T3 indices, Int32 drawcount)
            where T3 : struct
        ;

        /// <summary>[requires: v1.4]
        /// Render multiple sets of primitives by specifying indices of array data elements
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Points to an array of the elements counts.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        /// <param name="drawcount">
        /// <para>
        /// Specifies the size of the count and indices arrays.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        public static extern void MultiDrawElements(OpenTK.Graphics.OpenGL4.PrimitiveType mode, ref Int32 count, OpenTK.Graphics.OpenGL4.DrawElementsType type, IntPtr indices, Int32 drawcount);

        /// <summary>[requires: v1.4]
        /// Render multiple sets of primitives by specifying indices of array data elements
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Points to an array of the elements counts.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        /// <param name="drawcount">
        /// <para>
        /// Specifies the size of the count and indices arrays.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        public static extern void MultiDrawElements<T3>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, ref Int32 count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute] T3[] indices, Int32 drawcount)
            where T3 : struct
        ;

        /// <summary>[requires: v1.4]
        /// Render multiple sets of primitives by specifying indices of array data elements
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Points to an array of the elements counts.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        /// <param name="drawcount">
        /// <para>
        /// Specifies the size of the count and indices arrays.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        public static extern void MultiDrawElements<T3>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, ref Int32 count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute] T3[,] indices, Int32 drawcount)
            where T3 : struct
        ;

        /// <summary>[requires: v1.4]
        /// Render multiple sets of primitives by specifying indices of array data elements
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Points to an array of the elements counts.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        /// <param name="drawcount">
        /// <para>
        /// Specifies the size of the count and indices arrays.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        public static extern void MultiDrawElements<T3>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, ref Int32 count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute] T3[,,] indices, Int32 drawcount)
            where T3 : struct
        ;

        /// <summary>[requires: v1.4]
        /// Render multiple sets of primitives by specifying indices of array data elements
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Points to an array of the elements counts.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        /// <param name="drawcount">
        /// <para>
        /// Specifies the size of the count and indices arrays.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        public static extern void MultiDrawElements<T3>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, ref Int32 count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute] ref T3 indices, Int32 drawcount)
            where T3 : struct
        ;

        /// <summary>[requires: v1.4]
        /// Render multiple sets of primitives by specifying indices of array data elements
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Points to an array of the elements counts.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        /// <param name="drawcount">
        /// <para>
        /// Specifies the size of the count and indices arrays.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        public static extern unsafe void MultiDrawElements(OpenTK.Graphics.OpenGL4.PrimitiveType mode, Int32* count, OpenTK.Graphics.OpenGL4.DrawElementsType type, IntPtr indices, Int32 drawcount);

        /// <summary>[requires: v1.4]
        /// Render multiple sets of primitives by specifying indices of array data elements
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Points to an array of the elements counts.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        /// <param name="drawcount">
        /// <para>
        /// Specifies the size of the count and indices arrays.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        public static extern unsafe void MultiDrawElements<T3>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, Int32* count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute] T3[] indices, Int32 drawcount)
            where T3 : struct
        ;

        /// <summary>[requires: v1.4]
        /// Render multiple sets of primitives by specifying indices of array data elements
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Points to an array of the elements counts.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        /// <param name="drawcount">
        /// <para>
        /// Specifies the size of the count and indices arrays.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        public static extern unsafe void MultiDrawElements<T3>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, Int32* count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute] T3[,] indices, Int32 drawcount)
            where T3 : struct
        ;

        /// <summary>[requires: v1.4]
        /// Render multiple sets of primitives by specifying indices of array data elements
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Points to an array of the elements counts.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        /// <param name="drawcount">
        /// <para>
        /// Specifies the size of the count and indices arrays.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        public static extern unsafe void MultiDrawElements<T3>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, Int32* count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute] T3[,,] indices, Int32 drawcount)
            where T3 : struct
        ;

        /// <summary>[requires: v1.4]
        /// Render multiple sets of primitives by specifying indices of array data elements
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Points to an array of the elements counts.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        /// <param name="drawcount">
        /// <para>
        /// Specifies the size of the count and indices arrays.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        public static extern unsafe void MultiDrawElements<T3>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, Int32* count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute] ref T3 indices, Int32 drawcount)
            where T3 : struct
        ;

        /// <summary>[requires: v3.2 and ARB_draw_elements_base_vertex|VERSION_3_2]
        /// Render multiple sets of primitives by specifying indices of array data elements and an index to apply to each index
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Points to an array of the elements counts.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        /// <param name="drawcount">
        /// <para>
        /// Specifies the size of the count, indices and basevertex arrays.
        /// </para>
        /// </param>
        /// <param name="basevertex">
        /// <para>
        /// Specifies a pointer to the location where the base vertices are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glMultiDrawElementsBaseVertex")]
        public static extern void MultiDrawElementsBaseVertex(OpenTK.Graphics.OpenGL4.PrimitiveType mode, Int32[] count, OpenTK.Graphics.OpenGL4.DrawElementsType type, IntPtr indices, Int32 drawcount, Int32[] basevertex);

        /// <summary>[requires: v3.2 and ARB_draw_elements_base_vertex|VERSION_3_2]
        /// Render multiple sets of primitives by specifying indices of array data elements and an index to apply to each index
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Points to an array of the elements counts.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        /// <param name="drawcount">
        /// <para>
        /// Specifies the size of the count, indices and basevertex arrays.
        /// </para>
        /// </param>
        /// <param name="basevertex">
        /// <para>
        /// Specifies a pointer to the location where the base vertices are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glMultiDrawElementsBaseVertex")]
        public static extern void MultiDrawElementsBaseVertex<T3>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, Int32[] count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute] T3[] indices, Int32 drawcount, Int32[] basevertex)
            where T3 : struct
        ;

        /// <summary>[requires: v3.2 and ARB_draw_elements_base_vertex|VERSION_3_2]
        /// Render multiple sets of primitives by specifying indices of array data elements and an index to apply to each index
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Points to an array of the elements counts.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        /// <param name="drawcount">
        /// <para>
        /// Specifies the size of the count, indices and basevertex arrays.
        /// </para>
        /// </param>
        /// <param name="basevertex">
        /// <para>
        /// Specifies a pointer to the location where the base vertices are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glMultiDrawElementsBaseVertex")]
        public static extern void MultiDrawElementsBaseVertex<T3>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, Int32[] count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute] T3[,] indices, Int32 drawcount, Int32[] basevertex)
            where T3 : struct
        ;

        /// <summary>[requires: v3.2 and ARB_draw_elements_base_vertex|VERSION_3_2]
        /// Render multiple sets of primitives by specifying indices of array data elements and an index to apply to each index
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Points to an array of the elements counts.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        /// <param name="drawcount">
        /// <para>
        /// Specifies the size of the count, indices and basevertex arrays.
        /// </para>
        /// </param>
        /// <param name="basevertex">
        /// <para>
        /// Specifies a pointer to the location where the base vertices are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glMultiDrawElementsBaseVertex")]
        public static extern void MultiDrawElementsBaseVertex<T3>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, Int32[] count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute] T3[,,] indices, Int32 drawcount, Int32[] basevertex)
            where T3 : struct
        ;

        /// <summary>[requires: v3.2 and ARB_draw_elements_base_vertex|VERSION_3_2]
        /// Render multiple sets of primitives by specifying indices of array data elements and an index to apply to each index
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Points to an array of the elements counts.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        /// <param name="drawcount">
        /// <para>
        /// Specifies the size of the count, indices and basevertex arrays.
        /// </para>
        /// </param>
        /// <param name="basevertex">
        /// <para>
        /// Specifies a pointer to the location where the base vertices are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glMultiDrawElementsBaseVertex")]
        public static extern void MultiDrawElementsBaseVertex<T3>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, Int32[] count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute] ref T3 indices, Int32 drawcount, Int32[] basevertex)
            where T3 : struct
        ;

        /// <summary>[requires: v3.2 and ARB_draw_elements_base_vertex|VERSION_3_2]
        /// Render multiple sets of primitives by specifying indices of array data elements and an index to apply to each index
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Points to an array of the elements counts.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        /// <param name="drawcount">
        /// <para>
        /// Specifies the size of the count, indices and basevertex arrays.
        /// </para>
        /// </param>
        /// <param name="basevertex">
        /// <para>
        /// Specifies a pointer to the location where the base vertices are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glMultiDrawElementsBaseVertex")]
        public static extern void MultiDrawElementsBaseVertex(OpenTK.Graphics.OpenGL4.PrimitiveType mode, ref Int32 count, OpenTK.Graphics.OpenGL4.DrawElementsType type, IntPtr indices, Int32 drawcount, ref Int32 basevertex);

        /// <summary>[requires: v3.2 and ARB_draw_elements_base_vertex|VERSION_3_2]
        /// Render multiple sets of primitives by specifying indices of array data elements and an index to apply to each index
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Points to an array of the elements counts.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        /// <param name="drawcount">
        /// <para>
        /// Specifies the size of the count, indices and basevertex arrays.
        /// </para>
        /// </param>
        /// <param name="basevertex">
        /// <para>
        /// Specifies a pointer to the location where the base vertices are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glMultiDrawElementsBaseVertex")]
        public static extern void MultiDrawElementsBaseVertex<T3>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, ref Int32 count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute] T3[] indices, Int32 drawcount, ref Int32 basevertex)
            where T3 : struct
        ;

        /// <summary>[requires: v3.2 and ARB_draw_elements_base_vertex|VERSION_3_2]
        /// Render multiple sets of primitives by specifying indices of array data elements and an index to apply to each index
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Points to an array of the elements counts.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        /// <param name="drawcount">
        /// <para>
        /// Specifies the size of the count, indices and basevertex arrays.
        /// </para>
        /// </param>
        /// <param name="basevertex">
        /// <para>
        /// Specifies a pointer to the location where the base vertices are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glMultiDrawElementsBaseVertex")]
        public static extern void MultiDrawElementsBaseVertex<T3>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, ref Int32 count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute] T3[,] indices, Int32 drawcount, ref Int32 basevertex)
            where T3 : struct
        ;

        /// <summary>[requires: v3.2 and ARB_draw_elements_base_vertex|VERSION_3_2]
        /// Render multiple sets of primitives by specifying indices of array data elements and an index to apply to each index
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Points to an array of the elements counts.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        /// <param name="drawcount">
        /// <para>
        /// Specifies the size of the count, indices and basevertex arrays.
        /// </para>
        /// </param>
        /// <param name="basevertex">
        /// <para>
        /// Specifies a pointer to the location where the base vertices are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glMultiDrawElementsBaseVertex")]
        public static extern void MultiDrawElementsBaseVertex<T3>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, ref Int32 count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute] T3[,,] indices, Int32 drawcount, ref Int32 basevertex)
            where T3 : struct
        ;

        /// <summary>[requires: v3.2 and ARB_draw_elements_base_vertex|VERSION_3_2]
        /// Render multiple sets of primitives by specifying indices of array data elements and an index to apply to each index
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Points to an array of the elements counts.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        /// <param name="drawcount">
        /// <para>
        /// Specifies the size of the count, indices and basevertex arrays.
        /// </para>
        /// </param>
        /// <param name="basevertex">
        /// <para>
        /// Specifies a pointer to the location where the base vertices are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glMultiDrawElementsBaseVertex")]
        public static extern void MultiDrawElementsBaseVertex<T3>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, ref Int32 count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute] ref T3 indices, Int32 drawcount, ref Int32 basevertex)
            where T3 : struct
        ;

        /// <summary>[requires: v3.2 and ARB_draw_elements_base_vertex|VERSION_3_2]
        /// Render multiple sets of primitives by specifying indices of array data elements and an index to apply to each index
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Points to an array of the elements counts.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        /// <param name="drawcount">
        /// <para>
        /// Specifies the size of the count, indices and basevertex arrays.
        /// </para>
        /// </param>
        /// <param name="basevertex">
        /// <para>
        /// Specifies a pointer to the location where the base vertices are stored.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glMultiDrawElementsBaseVertex")]
        public static extern unsafe void MultiDrawElementsBaseVertex(OpenTK.Graphics.OpenGL4.PrimitiveType mode, Int32* count, OpenTK.Graphics.OpenGL4.DrawElementsType type, IntPtr indices, Int32 drawcount, Int32* basevertex);

        /// <summary>[requires: v3.2 and ARB_draw_elements_base_vertex|VERSION_3_2]
        /// Render multiple sets of primitives by specifying indices of array data elements and an index to apply to each index
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Points to an array of the elements counts.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        /// <param name="drawcount">
        /// <para>
        /// Specifies the size of the count, indices and basevertex arrays.
        /// </para>
        /// </param>
        /// <param name="basevertex">
        /// <para>
        /// Specifies a pointer to the location where the base vertices are stored.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glMultiDrawElementsBaseVertex")]
        public static extern unsafe void MultiDrawElementsBaseVertex<T3>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, Int32* count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute] T3[] indices, Int32 drawcount, Int32* basevertex)
            where T3 : struct
        ;

        /// <summary>[requires: v3.2 and ARB_draw_elements_base_vertex|VERSION_3_2]
        /// Render multiple sets of primitives by specifying indices of array data elements and an index to apply to each index
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Points to an array of the elements counts.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        /// <param name="drawcount">
        /// <para>
        /// Specifies the size of the count, indices and basevertex arrays.
        /// </para>
        /// </param>
        /// <param name="basevertex">
        /// <para>
        /// Specifies a pointer to the location where the base vertices are stored.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glMultiDrawElementsBaseVertex")]
        public static extern unsafe void MultiDrawElementsBaseVertex<T3>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, Int32* count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute] T3[,] indices, Int32 drawcount, Int32* basevertex)
            where T3 : struct
        ;

        /// <summary>[requires: v3.2 and ARB_draw_elements_base_vertex|VERSION_3_2]
        /// Render multiple sets of primitives by specifying indices of array data elements and an index to apply to each index
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Points to an array of the elements counts.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        /// <param name="drawcount">
        /// <para>
        /// Specifies the size of the count, indices and basevertex arrays.
        /// </para>
        /// </param>
        /// <param name="basevertex">
        /// <para>
        /// Specifies a pointer to the location where the base vertices are stored.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glMultiDrawElementsBaseVertex")]
        public static extern unsafe void MultiDrawElementsBaseVertex<T3>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, Int32* count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute] T3[,,] indices, Int32 drawcount, Int32* basevertex)
            where T3 : struct
        ;

        /// <summary>[requires: v3.2 and ARB_draw_elements_base_vertex|VERSION_3_2]
        /// Render multiple sets of primitives by specifying indices of array data elements and an index to apply to each index
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Points to an array of the elements counts.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        /// <param name="drawcount">
        /// <para>
        /// Specifies the size of the count, indices and basevertex arrays.
        /// </para>
        /// </param>
        /// <param name="basevertex">
        /// <para>
        /// Specifies a pointer to the location where the base vertices are stored.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glMultiDrawElementsBaseVertex")]
        public static extern unsafe void MultiDrawElementsBaseVertex<T3>(OpenTK.Graphics.OpenGL4.PrimitiveType mode, Int32* count, OpenTK.Graphics.OpenGL4.DrawElementsType type, [InAttribute, OutAttribute] ref T3 indices, Int32 drawcount, Int32* basevertex)
            where T3 : struct
        ;

        /// <summary>[requires: v4.3 and ARB_multi_draw_indirect|VERSION_4_3]
        /// Render indexed primitives from array data, taking parameters from memory
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY, and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of data in the buffer bound to the GL_ELEMENT_ARRAY_BUFFER binding.
        /// </para>
        /// </param>
        /// <param name="indirect">
        /// <para>
        /// Specifies the address of a structure containing an array of draw parameters.
        /// </para>
        /// </param>
        /// <param name="drawcount">
        /// <para>
        /// Specifies the number of elements in the array addressed by indirect.
        /// </para>
        /// </param>
        /// <param name="stride">
        /// <para>
        /// Specifies the distance in basic machine units between elements of the draw parameter array.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_multi_draw_indirect|VERSION_4_3", Version = "4.3", EntryPoint = "glMultiDrawElementsIndirect")]
        public static extern void MultiDrawElementsIndirect(OpenTK.Graphics.OpenGL4.All mode, OpenTK.Graphics.OpenGL4.All type, IntPtr indirect, Int32 drawcount, Int32 stride);

        /// <summary>[requires: v4.3 and ARB_multi_draw_indirect|VERSION_4_3]
        /// Render indexed primitives from array data, taking parameters from memory
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY, and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of data in the buffer bound to the GL_ELEMENT_ARRAY_BUFFER binding.
        /// </para>
        /// </param>
        /// <param name="indirect">
        /// <para>
        /// Specifies the address of a structure containing an array of draw parameters.
        /// </para>
        /// </param>
        /// <param name="drawcount">
        /// <para>
        /// Specifies the number of elements in the array addressed by indirect.
        /// </para>
        /// </param>
        /// <param name="stride">
        /// <para>
        /// Specifies the distance in basic machine units between elements of the draw parameter array.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_multi_draw_indirect|VERSION_4_3", Version = "4.3", EntryPoint = "glMultiDrawElementsIndirect")]
        public static extern void MultiDrawElementsIndirect<T2>(OpenTK.Graphics.OpenGL4.All mode, OpenTK.Graphics.OpenGL4.All type, [InAttribute, OutAttribute] T2[] indirect, Int32 drawcount, Int32 stride)
            where T2 : struct
        ;

        /// <summary>[requires: v4.3 and ARB_multi_draw_indirect|VERSION_4_3]
        /// Render indexed primitives from array data, taking parameters from memory
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY, and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of data in the buffer bound to the GL_ELEMENT_ARRAY_BUFFER binding.
        /// </para>
        /// </param>
        /// <param name="indirect">
        /// <para>
        /// Specifies the address of a structure containing an array of draw parameters.
        /// </para>
        /// </param>
        /// <param name="drawcount">
        /// <para>
        /// Specifies the number of elements in the array addressed by indirect.
        /// </para>
        /// </param>
        /// <param name="stride">
        /// <para>
        /// Specifies the distance in basic machine units between elements of the draw parameter array.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_multi_draw_indirect|VERSION_4_3", Version = "4.3", EntryPoint = "glMultiDrawElementsIndirect")]
        public static extern void MultiDrawElementsIndirect<T2>(OpenTK.Graphics.OpenGL4.All mode, OpenTK.Graphics.OpenGL4.All type, [InAttribute, OutAttribute] T2[,] indirect, Int32 drawcount, Int32 stride)
            where T2 : struct
        ;

        /// <summary>[requires: v4.3 and ARB_multi_draw_indirect|VERSION_4_3]
        /// Render indexed primitives from array data, taking parameters from memory
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY, and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of data in the buffer bound to the GL_ELEMENT_ARRAY_BUFFER binding.
        /// </para>
        /// </param>
        /// <param name="indirect">
        /// <para>
        /// Specifies the address of a structure containing an array of draw parameters.
        /// </para>
        /// </param>
        /// <param name="drawcount">
        /// <para>
        /// Specifies the number of elements in the array addressed by indirect.
        /// </para>
        /// </param>
        /// <param name="stride">
        /// <para>
        /// Specifies the distance in basic machine units between elements of the draw parameter array.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_multi_draw_indirect|VERSION_4_3", Version = "4.3", EntryPoint = "glMultiDrawElementsIndirect")]
        public static extern void MultiDrawElementsIndirect<T2>(OpenTK.Graphics.OpenGL4.All mode, OpenTK.Graphics.OpenGL4.All type, [InAttribute, OutAttribute] T2[,,] indirect, Int32 drawcount, Int32 stride)
            where T2 : struct
        ;

        /// <summary>[requires: v4.3 and ARB_multi_draw_indirect|VERSION_4_3]
        /// Render indexed primitives from array data, taking parameters from memory
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY, and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of data in the buffer bound to the GL_ELEMENT_ARRAY_BUFFER binding.
        /// </para>
        /// </param>
        /// <param name="indirect">
        /// <para>
        /// Specifies the address of a structure containing an array of draw parameters.
        /// </para>
        /// </param>
        /// <param name="drawcount">
        /// <para>
        /// Specifies the number of elements in the array addressed by indirect.
        /// </para>
        /// </param>
        /// <param name="stride">
        /// <para>
        /// Specifies the distance in basic machine units between elements of the draw parameter array.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_multi_draw_indirect|VERSION_4_3", Version = "4.3", EntryPoint = "glMultiDrawElementsIndirect")]
        public static extern void MultiDrawElementsIndirect<T2>(OpenTK.Graphics.OpenGL4.All mode, OpenTK.Graphics.OpenGL4.All type, [InAttribute, OutAttribute] ref T2 indirect, Int32 drawcount, Int32 stride)
            where T2 : struct
        ;

        /// <summary>[requires: v3.3 and ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glMultiTexCoordP1ui")]
        public static extern void MultiTexCoordP1(OpenTK.Graphics.OpenGL4.TextureUnit texture, OpenTK.Graphics.OpenGL4.PackedPointerType type, Int32 coords);

        /// <summary>[requires: v3.3 and ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glMultiTexCoordP1ui")]
        public static extern void MultiTexCoordP1(OpenTK.Graphics.OpenGL4.TextureUnit texture, OpenTK.Graphics.OpenGL4.PackedPointerType type, UInt32 coords);

        /// <summary>[requires: v3.3 and ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glMultiTexCoordP1uiv")]
        public static extern unsafe void MultiTexCoordP1(OpenTK.Graphics.OpenGL4.TextureUnit texture, OpenTK.Graphics.OpenGL4.PackedPointerType type, Int32* coords);

        /// <summary>[requires: v3.3 and ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glMultiTexCoordP1uiv")]
        public static extern unsafe void MultiTexCoordP1(OpenTK.Graphics.OpenGL4.TextureUnit texture, OpenTK.Graphics.OpenGL4.PackedPointerType type, UInt32* coords);

        /// <summary>[requires: v3.3 and ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glMultiTexCoordP2ui")]
        public static extern void MultiTexCoordP2(OpenTK.Graphics.OpenGL4.TextureUnit texture, OpenTK.Graphics.OpenGL4.PackedPointerType type, Int32 coords);

        /// <summary>[requires: v3.3 and ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glMultiTexCoordP2ui")]
        public static extern void MultiTexCoordP2(OpenTK.Graphics.OpenGL4.TextureUnit texture, OpenTK.Graphics.OpenGL4.PackedPointerType type, UInt32 coords);

        /// <summary>[requires: v3.3 and ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glMultiTexCoordP2uiv")]
        public static extern unsafe void MultiTexCoordP2(OpenTK.Graphics.OpenGL4.TextureUnit texture, OpenTK.Graphics.OpenGL4.PackedPointerType type, Int32* coords);

        /// <summary>[requires: v3.3 and ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glMultiTexCoordP2uiv")]
        public static extern unsafe void MultiTexCoordP2(OpenTK.Graphics.OpenGL4.TextureUnit texture, OpenTK.Graphics.OpenGL4.PackedPointerType type, UInt32* coords);

        /// <summary>[requires: v3.3 and ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glMultiTexCoordP3ui")]
        public static extern void MultiTexCoordP3(OpenTK.Graphics.OpenGL4.TextureUnit texture, OpenTK.Graphics.OpenGL4.PackedPointerType type, Int32 coords);

        /// <summary>[requires: v3.3 and ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glMultiTexCoordP3ui")]
        public static extern void MultiTexCoordP3(OpenTK.Graphics.OpenGL4.TextureUnit texture, OpenTK.Graphics.OpenGL4.PackedPointerType type, UInt32 coords);

        /// <summary>[requires: v3.3 and ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glMultiTexCoordP3uiv")]
        public static extern unsafe void MultiTexCoordP3(OpenTK.Graphics.OpenGL4.TextureUnit texture, OpenTK.Graphics.OpenGL4.PackedPointerType type, Int32* coords);

        /// <summary>[requires: v3.3 and ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glMultiTexCoordP3uiv")]
        public static extern unsafe void MultiTexCoordP3(OpenTK.Graphics.OpenGL4.TextureUnit texture, OpenTK.Graphics.OpenGL4.PackedPointerType type, UInt32* coords);

        /// <summary>[requires: v3.3 and ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glMultiTexCoordP4ui")]
        public static extern void MultiTexCoordP4(OpenTK.Graphics.OpenGL4.TextureUnit texture, OpenTK.Graphics.OpenGL4.PackedPointerType type, Int32 coords);

        /// <summary>[requires: v3.3 and ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glMultiTexCoordP4ui")]
        public static extern void MultiTexCoordP4(OpenTK.Graphics.OpenGL4.TextureUnit texture, OpenTK.Graphics.OpenGL4.PackedPointerType type, UInt32 coords);

        /// <summary>[requires: v3.3 and ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glMultiTexCoordP4uiv")]
        public static extern unsafe void MultiTexCoordP4(OpenTK.Graphics.OpenGL4.TextureUnit texture, OpenTK.Graphics.OpenGL4.PackedPointerType type, Int32* coords);

        /// <summary>[requires: v3.3 and ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glMultiTexCoordP4uiv")]
        public static extern unsafe void MultiTexCoordP4(OpenTK.Graphics.OpenGL4.TextureUnit texture, OpenTK.Graphics.OpenGL4.PackedPointerType type, UInt32* coords);

        /// <summary>[requires: v3.3 and ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glNormalP3ui")]
        public static extern void NormalP3(OpenTK.Graphics.OpenGL4.PackedPointerType type, Int32 coords);

        /// <summary>[requires: v3.3 and ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glNormalP3ui")]
        public static extern void NormalP3(OpenTK.Graphics.OpenGL4.PackedPointerType type, UInt32 coords);

        /// <summary>[requires: v3.3 and ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glNormalP3uiv")]
        public static extern unsafe void NormalP3(OpenTK.Graphics.OpenGL4.PackedPointerType type, Int32* coords);

        /// <summary>[requires: v3.3 and ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glNormalP3uiv")]
        public static extern unsafe void NormalP3(OpenTK.Graphics.OpenGL4.PackedPointerType type, UInt32* coords);

        /// <summary>[requires: v4.3 and KHR_debug|VERSION_4_3]
        /// Label a named object identified within a namespace
        /// </summary>
        /// <param name="identifier">
        /// <para>
        /// The namespace from which the name of the object is allocated.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// The name of the object to label.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// The length of the label to be used for the object.
        /// </para>
        /// </param>
        /// <param name="label">
        /// <para>
        /// The address of a string containing the label to assign to the object.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glObjectLabel")]
        public static extern void ObjectLabel(OpenTK.Graphics.OpenGL4.ObjectLabelIdentifier identifier, Int32 name, Int32 length, String label);

        /// <summary>[requires: v4.3 and KHR_debug|VERSION_4_3]
        /// Label a named object identified within a namespace
        /// </summary>
        /// <param name="identifier">
        /// <para>
        /// The namespace from which the name of the object is allocated.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// The name of the object to label.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// The length of the label to be used for the object.
        /// </para>
        /// </param>
        /// <param name="label">
        /// <para>
        /// The address of a string containing the label to assign to the object.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glObjectLabel")]
        public static extern void ObjectLabel(OpenTK.Graphics.OpenGL4.ObjectLabelIdentifier identifier, UInt32 name, Int32 length, String label);

        /// <summary>[requires: v4.3 and KHR_debug|VERSION_4_3]
        /// Label a a sync object identified by a pointer
        /// </summary>
        /// <param name="ptr">
        /// <para>
        /// A pointer identifying a sync object.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// The length of the label to be used for the object.
        /// </para>
        /// </param>
        /// <param name="label">
        /// <para>
        /// The address of a string containing the label to assign to the object.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glObjectPtrLabel")]
        public static extern void ObjectPtrLabel(IntPtr ptr, Int32 length, String label);

        /// <summary>[requires: v4.3 and KHR_debug|VERSION_4_3]
        /// Label a a sync object identified by a pointer
        /// </summary>
        /// <param name="ptr">
        /// <para>
        /// A pointer identifying a sync object.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// The length of the label to be used for the object.
        /// </para>
        /// </param>
        /// <param name="label">
        /// <para>
        /// The address of a string containing the label to assign to the object.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glObjectPtrLabel")]
        public static extern void ObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[] ptr, Int32 length, String label)
            where T0 : struct
        ;

        /// <summary>[requires: v4.3 and KHR_debug|VERSION_4_3]
        /// Label a a sync object identified by a pointer
        /// </summary>
        /// <param name="ptr">
        /// <para>
        /// A pointer identifying a sync object.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// The length of the label to be used for the object.
        /// </para>
        /// </param>
        /// <param name="label">
        /// <para>
        /// The address of a string containing the label to assign to the object.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glObjectPtrLabel")]
        public static extern void ObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[,] ptr, Int32 length, String label)
            where T0 : struct
        ;

        /// <summary>[requires: v4.3 and KHR_debug|VERSION_4_3]
        /// Label a a sync object identified by a pointer
        /// </summary>
        /// <param name="ptr">
        /// <para>
        /// A pointer identifying a sync object.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// The length of the label to be used for the object.
        /// </para>
        /// </param>
        /// <param name="label">
        /// <para>
        /// The address of a string containing the label to assign to the object.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glObjectPtrLabel")]
        public static extern void ObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[,,] ptr, Int32 length, String label)
            where T0 : struct
        ;

        /// <summary>[requires: v4.3 and KHR_debug|VERSION_4_3]
        /// Label a a sync object identified by a pointer
        /// </summary>
        /// <param name="ptr">
        /// <para>
        /// A pointer identifying a sync object.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// The length of the label to be used for the object.
        /// </para>
        /// </param>
        /// <param name="label">
        /// <para>
        /// The address of a string containing the label to assign to the object.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glObjectPtrLabel")]
        public static extern void ObjectPtrLabel<T0>([InAttribute, OutAttribute] ref T0 ptr, Int32 length, String label)
            where T0 : struct
        ;

        /// <summary>[requires: v4.0 and ARB_tessellation_shader|VERSION_4_0]
        /// Specifies the parameters for patch primitives
        /// </summary>
        /// <param name="pname">
        /// <para>
        /// Specifies the name of the parameter to set. The symbolc constants GL_PATCH_VERTICES, GL_PATCH_DEFAULT_OUTER_LEVEL, and GL_PATCH_DEFAULT_INNER_LEVEL are accepted.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// Specifies the new value for the parameter given by pname.
        /// </para>
        /// </param>
        /// <param name="values">
        /// <para>
        /// Specifies the address of an array containing the new values for the parameter given by pname.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_tessellation_shader|VERSION_4_0", Version = "4.0", EntryPoint = "glPatchParameterfv")]
        public static extern void PatchParameter(OpenTK.Graphics.OpenGL4.PatchParameterFloat pname, Single[] values);

        /// <summary>[requires: v4.0 and ARB_tessellation_shader|VERSION_4_0]
        /// Specifies the parameters for patch primitives
        /// </summary>
        /// <param name="pname">
        /// <para>
        /// Specifies the name of the parameter to set. The symbolc constants GL_PATCH_VERTICES, GL_PATCH_DEFAULT_OUTER_LEVEL, and GL_PATCH_DEFAULT_INNER_LEVEL are accepted.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// Specifies the new value for the parameter given by pname.
        /// </para>
        /// </param>
        /// <param name="values">
        /// <para>
        /// Specifies the address of an array containing the new values for the parameter given by pname.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_tessellation_shader|VERSION_4_0", Version = "4.0", EntryPoint = "glPatchParameterfv")]
        public static extern void PatchParameter(OpenTK.Graphics.OpenGL4.PatchParameterFloat pname, ref Single values);

        /// <summary>[requires: v4.0 and ARB_tessellation_shader|VERSION_4_0]
        /// Specifies the parameters for patch primitives
        /// </summary>
        /// <param name="pname">
        /// <para>
        /// Specifies the name of the parameter to set. The symbolc constants GL_PATCH_VERTICES, GL_PATCH_DEFAULT_OUTER_LEVEL, and GL_PATCH_DEFAULT_INNER_LEVEL are accepted.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// Specifies the new value for the parameter given by pname.
        /// </para>
        /// </param>
        /// <param name="values">
        /// <para>
        /// Specifies the address of an array containing the new values for the parameter given by pname.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_tessellation_shader|VERSION_4_0", Version = "4.0", EntryPoint = "glPatchParameterfv")]
        public static extern unsafe void PatchParameter(OpenTK.Graphics.OpenGL4.PatchParameterFloat pname, Single* values);

        /// <summary>[requires: v4.0 and ARB_tessellation_shader|VERSION_4_0]
        /// Specifies the parameters for patch primitives
        /// </summary>
        /// <param name="pname">
        /// <para>
        /// Specifies the name of the parameter to set. The symbolc constants GL_PATCH_VERTICES, GL_PATCH_DEFAULT_OUTER_LEVEL, and GL_PATCH_DEFAULT_INNER_LEVEL are accepted.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// Specifies the new value for the parameter given by pname.
        /// </para>
        /// </param>
        /// <param name="values">
        /// <para>
        /// Specifies the address of an array containing the new values for the parameter given by pname.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_tessellation_shader|VERSION_4_0", Version = "4.0", EntryPoint = "glPatchParameteri")]
        public static extern void PatchParameter(OpenTK.Graphics.OpenGL4.PatchParameterInt pname, Int32 value);

        /// <summary>[requires: v4.0 and ARB_transform_feedback2|VERSION_4_0]
        /// Pause transform feedback operations
        /// </summary>
        [AutoGenerated(Category = "ARB_transform_feedback2|VERSION_4_0", Version = "4.0", EntryPoint = "glPauseTransformFeedback")]
        public static extern void PauseTransformFeedback();

        /// <summary>[requires: v1.0]
        /// Set pixel storage modes
        /// </summary>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of the parameter to be set. Six values affect the packing of pixel data into memory: GL_PACK_SWAP_BYTES, GL_PACK_LSB_FIRST, GL_PACK_ROW_LENGTH, GL_PACK_IMAGE_HEIGHT, GL_PACK_SKIP_PIXELS, GL_PACK_SKIP_ROWS, GL_PACK_SKIP_IMAGES, and GL_PACK_ALIGNMENT. Six more affect the unpacking of pixel data from memory: GL_UNPACK_SWAP_BYTES, GL_UNPACK_LSB_FIRST, GL_UNPACK_ROW_LENGTH, GL_UNPACK_IMAGE_HEIGHT, GL_UNPACK_SKIP_PIXELS, GL_UNPACK_SKIP_ROWS, GL_UNPACK_SKIP_IMAGES, and GL_UNPACK_ALIGNMENT.
        /// </para>
        /// </param>
        /// <param name="param">
        /// <para>
        /// Specifies the value that pname is set to.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glPixelStoref")]
        public static extern void PixelStore(OpenTK.Graphics.OpenGL4.PixelStoreParameter pname, Single param);

        /// <summary>[requires: v1.0]
        /// Set pixel storage modes
        /// </summary>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of the parameter to be set. Six values affect the packing of pixel data into memory: GL_PACK_SWAP_BYTES, GL_PACK_LSB_FIRST, GL_PACK_ROW_LENGTH, GL_PACK_IMAGE_HEIGHT, GL_PACK_SKIP_PIXELS, GL_PACK_SKIP_ROWS, GL_PACK_SKIP_IMAGES, and GL_PACK_ALIGNMENT. Six more affect the unpacking of pixel data from memory: GL_UNPACK_SWAP_BYTES, GL_UNPACK_LSB_FIRST, GL_UNPACK_ROW_LENGTH, GL_UNPACK_IMAGE_HEIGHT, GL_UNPACK_SKIP_PIXELS, GL_UNPACK_SKIP_ROWS, GL_UNPACK_SKIP_IMAGES, and GL_UNPACK_ALIGNMENT.
        /// </para>
        /// </param>
        /// <param name="param">
        /// <para>
        /// Specifies the value that pname is set to.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glPixelStorei")]
        public static extern void PixelStore(OpenTK.Graphics.OpenGL4.PixelStoreParameter pname, Int32 param);

        /// <summary>[requires: v1.4]
        /// Specify point parameters
        /// </summary>
        /// <param name="pname">
        /// <para>
        /// Specifies a single-valued point parameter. GL_POINT_FADE_THRESHOLD_SIZE, and GL_POINT_SPRITE_COORD_ORIGIN are accepted.
        /// </para>
        /// </param>
        /// <param name="param">
        /// <para>
        /// For glPointParameterf and glPointParameteri, specifies the value that pname will be set to.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// For glPointParameterfv and glPointParameteriv, specifies a pointer to an array where the value or values to be assigned to pname are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glPointParameterf")]
        public static extern void PointParameter(OpenTK.Graphics.OpenGL4.PointParameterName pname, Single param);

        /// <summary>[requires: v1.4]
        /// Specify point parameters
        /// </summary>
        /// <param name="pname">
        /// <para>
        /// Specifies a single-valued point parameter. GL_POINT_FADE_THRESHOLD_SIZE, and GL_POINT_SPRITE_COORD_ORIGIN are accepted.
        /// </para>
        /// </param>
        /// <param name="param">
        /// <para>
        /// For glPointParameterf and glPointParameteri, specifies the value that pname will be set to.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// For glPointParameterfv and glPointParameteriv, specifies a pointer to an array where the value or values to be assigned to pname are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glPointParameterfv")]
        public static extern void PointParameter(OpenTK.Graphics.OpenGL4.PointParameterName pname, Single[] @params);

        /// <summary>[requires: v1.4]
        /// Specify point parameters
        /// </summary>
        /// <param name="pname">
        /// <para>
        /// Specifies a single-valued point parameter. GL_POINT_FADE_THRESHOLD_SIZE, and GL_POINT_SPRITE_COORD_ORIGIN are accepted.
        /// </para>
        /// </param>
        /// <param name="param">
        /// <para>
        /// For glPointParameterf and glPointParameteri, specifies the value that pname will be set to.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// For glPointParameterfv and glPointParameteriv, specifies a pointer to an array where the value or values to be assigned to pname are stored.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glPointParameterfv")]
        public static extern unsafe void PointParameter(OpenTK.Graphics.OpenGL4.PointParameterName pname, Single* @params);

        /// <summary>[requires: v1.4]
        /// Specify point parameters
        /// </summary>
        /// <param name="pname">
        /// <para>
        /// Specifies a single-valued point parameter. GL_POINT_FADE_THRESHOLD_SIZE, and GL_POINT_SPRITE_COORD_ORIGIN are accepted.
        /// </para>
        /// </param>
        /// <param name="param">
        /// <para>
        /// For glPointParameterf and glPointParameteri, specifies the value that pname will be set to.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// For glPointParameterfv and glPointParameteriv, specifies a pointer to an array where the value or values to be assigned to pname are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glPointParameteri")]
        public static extern void PointParameter(OpenTK.Graphics.OpenGL4.PointParameterName pname, Int32 param);

        /// <summary>[requires: v1.4]
        /// Specify point parameters
        /// </summary>
        /// <param name="pname">
        /// <para>
        /// Specifies a single-valued point parameter. GL_POINT_FADE_THRESHOLD_SIZE, and GL_POINT_SPRITE_COORD_ORIGIN are accepted.
        /// </para>
        /// </param>
        /// <param name="param">
        /// <para>
        /// For glPointParameterf and glPointParameteri, specifies the value that pname will be set to.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// For glPointParameterfv and glPointParameteriv, specifies a pointer to an array where the value or values to be assigned to pname are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glPointParameteriv")]
        public static extern void PointParameter(OpenTK.Graphics.OpenGL4.PointParameterName pname, Int32[] @params);

        /// <summary>[requires: v1.4]
        /// Specify point parameters
        /// </summary>
        /// <param name="pname">
        /// <para>
        /// Specifies a single-valued point parameter. GL_POINT_FADE_THRESHOLD_SIZE, and GL_POINT_SPRITE_COORD_ORIGIN are accepted.
        /// </para>
        /// </param>
        /// <param name="param">
        /// <para>
        /// For glPointParameterf and glPointParameteri, specifies the value that pname will be set to.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// For glPointParameterfv and glPointParameteriv, specifies a pointer to an array where the value or values to be assigned to pname are stored.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glPointParameteriv")]
        public static extern unsafe void PointParameter(OpenTK.Graphics.OpenGL4.PointParameterName pname, Int32* @params);

        /// <summary>[requires: v1.0]
        /// Specify the diameter of rasterized points
        /// </summary>
        /// <param name="size">
        /// <para>
        /// Specifies the diameter of rasterized points. The initial value is 1.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glPointSize")]
        public static extern void PointSize(Single size);

        /// <summary>[requires: v1.0]
        /// Select a polygon rasterization mode
        /// </summary>
        /// <param name="face">
        /// <para>
        /// Specifies the polygons that mode applies to. Must be GL_FRONT_AND_BACK for front- and back-facing polygons.
        /// </para>
        /// </param>
        /// <param name="mode">
        /// <para>
        /// Specifies how polygons will be rasterized. Accepted values are GL_POINT, GL_LINE, and GL_FILL. The initial value is GL_FILL for both front- and back-facing polygons.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glPolygonMode")]
        public static extern void PolygonMode(OpenTK.Graphics.OpenGL4.MaterialFace face, OpenTK.Graphics.OpenGL4.PolygonMode mode);

        /// <summary>[requires: v1.1]
        /// Set the scale and units used to calculate depth values
        /// </summary>
        /// <param name="factor">
        /// <para>
        /// Specifies a scale factor that is used to create a variable depth offset for each polygon. The initial value is 0.
        /// </para>
        /// </param>
        /// <param name="units">
        /// <para>
        /// Is multiplied by an implementation-specific value to create a constant depth offset. The initial value is 0.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glPolygonOffset")]
        public static extern void PolygonOffset(Single factor, Single units);

        /// <summary>[requires: v4.3 and KHR_debug|VERSION_4_3]
        /// Pop the active debug group
        /// </summary>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glPopDebugGroup")]
        public static extern void PopDebugGroup();

        /// <summary>[requires: v3.1]
        /// Specify the primitive restart index
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the value to be interpreted as the primitive restart index.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_3_1", Version = "3.1", EntryPoint = "glPrimitiveRestartIndex")]
        public static extern void PrimitiveRestartIndex(Int32 index);

        /// <summary>[requires: v3.1]
        /// Specify the primitive restart index
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the value to be interpreted as the primitive restart index.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_1", Version = "3.1", EntryPoint = "glPrimitiveRestartIndex")]
        public static extern void PrimitiveRestartIndex(UInt32 index);

        /// <summary>[requires: v4.1 and ARB_get_program_binary|VERSION_4_1]
        /// Load a program object with a program binary
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the name of a program object into which to load a program binary.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the format of the binary data in binary.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address an array containing the binary to be loaded into program.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the number of bytes contained in binary.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_get_program_binary|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramBinary")]
        public static extern void ProgramBinary(Int32 program, OpenTK.Graphics.OpenGL4.BinaryFormat binaryFormat, IntPtr binary, Int32 length);

        /// <summary>[requires: v4.1 and ARB_get_program_binary|VERSION_4_1]
        /// Load a program object with a program binary
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the name of a program object into which to load a program binary.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the format of the binary data in binary.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address an array containing the binary to be loaded into program.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the number of bytes contained in binary.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_get_program_binary|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramBinary")]
        public static extern void ProgramBinary<T2>(Int32 program, OpenTK.Graphics.OpenGL4.BinaryFormat binaryFormat, [InAttribute, OutAttribute] T2[] binary, Int32 length)
            where T2 : struct
        ;

        /// <summary>[requires: v4.1 and ARB_get_program_binary|VERSION_4_1]
        /// Load a program object with a program binary
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the name of a program object into which to load a program binary.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the format of the binary data in binary.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address an array containing the binary to be loaded into program.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the number of bytes contained in binary.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_get_program_binary|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramBinary")]
        public static extern void ProgramBinary<T2>(Int32 program, OpenTK.Graphics.OpenGL4.BinaryFormat binaryFormat, [InAttribute, OutAttribute] T2[,] binary, Int32 length)
            where T2 : struct
        ;

        /// <summary>[requires: v4.1 and ARB_get_program_binary|VERSION_4_1]
        /// Load a program object with a program binary
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the name of a program object into which to load a program binary.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the format of the binary data in binary.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address an array containing the binary to be loaded into program.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the number of bytes contained in binary.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_get_program_binary|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramBinary")]
        public static extern void ProgramBinary<T2>(Int32 program, OpenTK.Graphics.OpenGL4.BinaryFormat binaryFormat, [InAttribute, OutAttribute] T2[,,] binary, Int32 length)
            where T2 : struct
        ;

        /// <summary>[requires: v4.1 and ARB_get_program_binary|VERSION_4_1]
        /// Load a program object with a program binary
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the name of a program object into which to load a program binary.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the format of the binary data in binary.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address an array containing the binary to be loaded into program.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the number of bytes contained in binary.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_get_program_binary|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramBinary")]
        public static extern void ProgramBinary<T2>(Int32 program, OpenTK.Graphics.OpenGL4.BinaryFormat binaryFormat, [InAttribute, OutAttribute] ref T2 binary, Int32 length)
            where T2 : struct
        ;

        /// <summary>[requires: v4.1 and ARB_get_program_binary|VERSION_4_1]
        /// Load a program object with a program binary
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the name of a program object into which to load a program binary.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the format of the binary data in binary.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address an array containing the binary to be loaded into program.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the number of bytes contained in binary.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_get_program_binary|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramBinary")]
        public static extern void ProgramBinary(UInt32 program, OpenTK.Graphics.OpenGL4.BinaryFormat binaryFormat, IntPtr binary, Int32 length);

        /// <summary>[requires: v4.1 and ARB_get_program_binary|VERSION_4_1]
        /// Load a program object with a program binary
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the name of a program object into which to load a program binary.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the format of the binary data in binary.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address an array containing the binary to be loaded into program.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the number of bytes contained in binary.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_get_program_binary|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramBinary")]
        public static extern void ProgramBinary<T2>(UInt32 program, OpenTK.Graphics.OpenGL4.BinaryFormat binaryFormat, [InAttribute, OutAttribute] T2[] binary, Int32 length)
            where T2 : struct
        ;

        /// <summary>[requires: v4.1 and ARB_get_program_binary|VERSION_4_1]
        /// Load a program object with a program binary
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the name of a program object into which to load a program binary.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the format of the binary data in binary.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address an array containing the binary to be loaded into program.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the number of bytes contained in binary.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_get_program_binary|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramBinary")]
        public static extern void ProgramBinary<T2>(UInt32 program, OpenTK.Graphics.OpenGL4.BinaryFormat binaryFormat, [InAttribute, OutAttribute] T2[,] binary, Int32 length)
            where T2 : struct
        ;

        /// <summary>[requires: v4.1 and ARB_get_program_binary|VERSION_4_1]
        /// Load a program object with a program binary
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the name of a program object into which to load a program binary.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the format of the binary data in binary.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address an array containing the binary to be loaded into program.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the number of bytes contained in binary.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_get_program_binary|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramBinary")]
        public static extern void ProgramBinary<T2>(UInt32 program, OpenTK.Graphics.OpenGL4.BinaryFormat binaryFormat, [InAttribute, OutAttribute] T2[,,] binary, Int32 length)
            where T2 : struct
        ;

        /// <summary>[requires: v4.1 and ARB_get_program_binary|VERSION_4_1]
        /// Load a program object with a program binary
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the name of a program object into which to load a program binary.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the format of the binary data in binary.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address an array containing the binary to be loaded into program.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the number of bytes contained in binary.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_get_program_binary|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramBinary")]
        public static extern void ProgramBinary<T2>(UInt32 program, OpenTK.Graphics.OpenGL4.BinaryFormat binaryFormat, [InAttribute, OutAttribute] ref T2 binary, Int32 length)
            where T2 : struct
        ;

        /// <summary>[requires: v4.1 and ARB_get_program_binary|VERSION_4_1]
        /// Specify a parameter for a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the name of a program object whose parameter to modify.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the name of the parameter to modify.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// Specifies the new value of the parameter specified by pname for program.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_get_program_binary|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramParameteri")]
        public static extern void ProgramParameter(Int32 program, OpenTK.Graphics.OpenGL4.ProgramParameterName pname, Int32 value);

        /// <summary>[requires: v4.1 and ARB_get_program_binary|VERSION_4_1]
        /// Specify a parameter for a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the name of a program object whose parameter to modify.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the name of the parameter to modify.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// Specifies the new value of the parameter specified by pname for program.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_get_program_binary|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramParameteri")]
        public static extern void ProgramParameter(UInt32 program, OpenTK.Graphics.OpenGL4.ProgramParameterName pname, Int32 value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform1d")]
        public static extern void ProgramUniform1(Int32 program, Int32 location, Double v0);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform1d")]
        public static extern void ProgramUniform1(UInt32 program, Int32 location, Double v0);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform1dv")]
        public static extern void ProgramUniform1(Int32 program, Int32 location, Int32 count, ref Double value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform1dv")]
        public static extern unsafe void ProgramUniform1(Int32 program, Int32 location, Int32 count, Double* value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform1dv")]
        public static extern void ProgramUniform1(UInt32 program, Int32 location, Int32 count, ref Double value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform1dv")]
        public static extern unsafe void ProgramUniform1(UInt32 program, Int32 location, Int32 count, Double* value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform1f")]
        public static extern void ProgramUniform1(Int32 program, Int32 location, Single v0);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform1f")]
        public static extern void ProgramUniform1(UInt32 program, Int32 location, Single v0);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform1fv")]
        public static extern void ProgramUniform1(Int32 program, Int32 location, Int32 count, ref Single value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform1fv")]
        public static extern unsafe void ProgramUniform1(Int32 program, Int32 location, Int32 count, Single* value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform1fv")]
        public static extern void ProgramUniform1(UInt32 program, Int32 location, Int32 count, ref Single value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform1fv")]
        public static extern unsafe void ProgramUniform1(UInt32 program, Int32 location, Int32 count, Single* value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform1i")]
        public static extern void ProgramUniform1(Int32 program, Int32 location, Int32 v0);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform1i")]
        public static extern void ProgramUniform1(UInt32 program, Int32 location, Int32 v0);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform1iv")]
        public static extern void ProgramUniform1(Int32 program, Int32 location, Int32 count, ref Int32 value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform1iv")]
        public static extern unsafe void ProgramUniform1(Int32 program, Int32 location, Int32 count, Int32* value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform1iv")]
        public static extern void ProgramUniform1(UInt32 program, Int32 location, Int32 count, ref Int32 value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform1iv")]
        public static extern unsafe void ProgramUniform1(UInt32 program, Int32 location, Int32 count, Int32* value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform1ui")]
        public static extern void ProgramUniform1(UInt32 program, Int32 location, UInt32 v0);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform1uiv")]
        public static extern void ProgramUniform1(UInt32 program, Int32 location, Int32 count, ref UInt32 value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform1uiv")]
        public static extern unsafe void ProgramUniform1(UInt32 program, Int32 location, Int32 count, UInt32* value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform2d")]
        public static extern void ProgramUniform2(Int32 program, Int32 location, Double v0, Double v1);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform2d")]
        public static extern void ProgramUniform2(UInt32 program, Int32 location, Double v0, Double v1);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform2dv")]
        public static extern void ProgramUniform2(Int32 program, Int32 location, Int32 count, Double[] value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform2dv")]
        public static extern void ProgramUniform2(Int32 program, Int32 location, Int32 count, ref Double value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform2dv")]
        public static extern unsafe void ProgramUniform2(Int32 program, Int32 location, Int32 count, Double* value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform2dv")]
        public static extern void ProgramUniform2(UInt32 program, Int32 location, Int32 count, Double[] value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform2dv")]
        public static extern void ProgramUniform2(UInt32 program, Int32 location, Int32 count, ref Double value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform2dv")]
        public static extern unsafe void ProgramUniform2(UInt32 program, Int32 location, Int32 count, Double* value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform2f")]
        public static extern void ProgramUniform2(Int32 program, Int32 location, Single v0, Single v1);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform2f")]
        public static extern void ProgramUniform2(UInt32 program, Int32 location, Single v0, Single v1);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform2fv")]
        public static extern void ProgramUniform2(Int32 program, Int32 location, Int32 count, Single[] value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform2fv")]
        public static extern void ProgramUniform2(Int32 program, Int32 location, Int32 count, ref Single value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform2fv")]
        public static extern unsafe void ProgramUniform2(Int32 program, Int32 location, Int32 count, Single* value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform2fv")]
        public static extern void ProgramUniform2(UInt32 program, Int32 location, Int32 count, Single[] value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform2fv")]
        public static extern void ProgramUniform2(UInt32 program, Int32 location, Int32 count, ref Single value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform2fv")]
        public static extern unsafe void ProgramUniform2(UInt32 program, Int32 location, Int32 count, Single* value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform2i")]
        public static extern void ProgramUniform2(Int32 program, Int32 location, Int32 v0, Int32 v1);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform2i")]
        public static extern void ProgramUniform2(UInt32 program, Int32 location, Int32 v0, Int32 v1);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform2iv")]
        public static extern void ProgramUniform2(Int32 program, Int32 location, Int32 count, Int32[] value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform2iv")]
        public static extern unsafe void ProgramUniform2(Int32 program, Int32 location, Int32 count, Int32* value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform2iv")]
        public static extern void ProgramUniform2(UInt32 program, Int32 location, Int32 count, Int32[] value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform2iv")]
        public static extern unsafe void ProgramUniform2(UInt32 program, Int32 location, Int32 count, Int32* value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform2ui")]
        public static extern void ProgramUniform2(UInt32 program, Int32 location, UInt32 v0, UInt32 v1);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform2uiv")]
        public static extern void ProgramUniform2(UInt32 program, Int32 location, Int32 count, UInt32[] value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform2uiv")]
        public static extern void ProgramUniform2(UInt32 program, Int32 location, Int32 count, ref UInt32 value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform2uiv")]
        public static extern unsafe void ProgramUniform2(UInt32 program, Int32 location, Int32 count, UInt32* value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform3d")]
        public static extern void ProgramUniform3(Int32 program, Int32 location, Double v0, Double v1, Double v2);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform3d")]
        public static extern void ProgramUniform3(UInt32 program, Int32 location, Double v0, Double v1, Double v2);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform3dv")]
        public static extern void ProgramUniform3(Int32 program, Int32 location, Int32 count, Double[] value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform3dv")]
        public static extern void ProgramUniform3(Int32 program, Int32 location, Int32 count, ref Double value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform3dv")]
        public static extern unsafe void ProgramUniform3(Int32 program, Int32 location, Int32 count, Double* value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform3dv")]
        public static extern void ProgramUniform3(UInt32 program, Int32 location, Int32 count, Double[] value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform3dv")]
        public static extern void ProgramUniform3(UInt32 program, Int32 location, Int32 count, ref Double value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform3dv")]
        public static extern unsafe void ProgramUniform3(UInt32 program, Int32 location, Int32 count, Double* value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform3f")]
        public static extern void ProgramUniform3(Int32 program, Int32 location, Single v0, Single v1, Single v2);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform3f")]
        public static extern void ProgramUniform3(UInt32 program, Int32 location, Single v0, Single v1, Single v2);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform3fv")]
        public static extern void ProgramUniform3(Int32 program, Int32 location, Int32 count, Single[] value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform3fv")]
        public static extern void ProgramUniform3(Int32 program, Int32 location, Int32 count, ref Single value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform3fv")]
        public static extern unsafe void ProgramUniform3(Int32 program, Int32 location, Int32 count, Single* value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform3fv")]
        public static extern void ProgramUniform3(UInt32 program, Int32 location, Int32 count, Single[] value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform3fv")]
        public static extern void ProgramUniform3(UInt32 program, Int32 location, Int32 count, ref Single value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform3fv")]
        public static extern unsafe void ProgramUniform3(UInt32 program, Int32 location, Int32 count, Single* value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform3i")]
        public static extern void ProgramUniform3(Int32 program, Int32 location, Int32 v0, Int32 v1, Int32 v2);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform3i")]
        public static extern void ProgramUniform3(UInt32 program, Int32 location, Int32 v0, Int32 v1, Int32 v2);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform3iv")]
        public static extern void ProgramUniform3(Int32 program, Int32 location, Int32 count, Int32[] value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform3iv")]
        public static extern void ProgramUniform3(Int32 program, Int32 location, Int32 count, ref Int32 value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform3iv")]
        public static extern unsafe void ProgramUniform3(Int32 program, Int32 location, Int32 count, Int32* value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform3iv")]
        public static extern void ProgramUniform3(UInt32 program, Int32 location, Int32 count, Int32[] value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform3iv")]
        public static extern void ProgramUniform3(UInt32 program, Int32 location, Int32 count, ref Int32 value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform3iv")]
        public static extern unsafe void ProgramUniform3(UInt32 program, Int32 location, Int32 count, Int32* value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform3ui")]
        public static extern void ProgramUniform3(UInt32 program, Int32 location, UInt32 v0, UInt32 v1, UInt32 v2);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform3uiv")]
        public static extern void ProgramUniform3(UInt32 program, Int32 location, Int32 count, UInt32[] value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform3uiv")]
        public static extern void ProgramUniform3(UInt32 program, Int32 location, Int32 count, ref UInt32 value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform3uiv")]
        public static extern unsafe void ProgramUniform3(UInt32 program, Int32 location, Int32 count, UInt32* value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform4d")]
        public static extern void ProgramUniform4(Int32 program, Int32 location, Double v0, Double v1, Double v2, Double v3);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform4d")]
        public static extern void ProgramUniform4(UInt32 program, Int32 location, Double v0, Double v1, Double v2, Double v3);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform4dv")]
        public static extern void ProgramUniform4(Int32 program, Int32 location, Int32 count, Double[] value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform4dv")]
        public static extern void ProgramUniform4(Int32 program, Int32 location, Int32 count, ref Double value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform4dv")]
        public static extern unsafe void ProgramUniform4(Int32 program, Int32 location, Int32 count, Double* value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform4dv")]
        public static extern void ProgramUniform4(UInt32 program, Int32 location, Int32 count, Double[] value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform4dv")]
        public static extern void ProgramUniform4(UInt32 program, Int32 location, Int32 count, ref Double value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform4dv")]
        public static extern unsafe void ProgramUniform4(UInt32 program, Int32 location, Int32 count, Double* value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform4f")]
        public static extern void ProgramUniform4(Int32 program, Int32 location, Single v0, Single v1, Single v2, Single v3);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform4f")]
        public static extern void ProgramUniform4(UInt32 program, Int32 location, Single v0, Single v1, Single v2, Single v3);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform4fv")]
        public static extern void ProgramUniform4(Int32 program, Int32 location, Int32 count, Single[] value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform4fv")]
        public static extern void ProgramUniform4(Int32 program, Int32 location, Int32 count, ref Single value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform4fv")]
        public static extern unsafe void ProgramUniform4(Int32 program, Int32 location, Int32 count, Single* value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform4fv")]
        public static extern void ProgramUniform4(UInt32 program, Int32 location, Int32 count, Single[] value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform4fv")]
        public static extern void ProgramUniform4(UInt32 program, Int32 location, Int32 count, ref Single value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform4fv")]
        public static extern unsafe void ProgramUniform4(UInt32 program, Int32 location, Int32 count, Single* value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform4i")]
        public static extern void ProgramUniform4(Int32 program, Int32 location, Int32 v0, Int32 v1, Int32 v2, Int32 v3);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform4i")]
        public static extern void ProgramUniform4(UInt32 program, Int32 location, Int32 v0, Int32 v1, Int32 v2, Int32 v3);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform4iv")]
        public static extern void ProgramUniform4(Int32 program, Int32 location, Int32 count, Int32[] value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform4iv")]
        public static extern void ProgramUniform4(Int32 program, Int32 location, Int32 count, ref Int32 value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform4iv")]
        public static extern unsafe void ProgramUniform4(Int32 program, Int32 location, Int32 count, Int32* value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform4iv")]
        public static extern void ProgramUniform4(UInt32 program, Int32 location, Int32 count, Int32[] value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform4iv")]
        public static extern void ProgramUniform4(UInt32 program, Int32 location, Int32 count, ref Int32 value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform4iv")]
        public static extern unsafe void ProgramUniform4(UInt32 program, Int32 location, Int32 count, Int32* value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform4ui")]
        public static extern void ProgramUniform4(UInt32 program, Int32 location, UInt32 v0, UInt32 v1, UInt32 v2, UInt32 v3);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform4uiv")]
        public static extern void ProgramUniform4(UInt32 program, Int32 location, Int32 count, UInt32[] value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform4uiv")]
        public static extern void ProgramUniform4(UInt32 program, Int32 location, Int32 count, ref UInt32 value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform4uiv")]
        public static extern unsafe void ProgramUniform4(UInt32 program, Int32 location, Int32 count, UInt32* value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]</summary>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix2dv")]
        public static extern void ProgramUniformMatrix2(Int32 program, Int32 location, Int32 count, bool transpose, Double[] value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]</summary>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix2dv")]
        public static extern void ProgramUniformMatrix2(Int32 program, Int32 location, Int32 count, bool transpose, ref Double value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix2dv")]
        public static extern unsafe void ProgramUniformMatrix2(Int32 program, Int32 location, Int32 count, bool transpose, Double* value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix2dv")]
        public static extern void ProgramUniformMatrix2(UInt32 program, Int32 location, Int32 count, bool transpose, Double[] value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix2dv")]
        public static extern void ProgramUniformMatrix2(UInt32 program, Int32 location, Int32 count, bool transpose, ref Double value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix2dv")]
        public static extern unsafe void ProgramUniformMatrix2(UInt32 program, Int32 location, Int32 count, bool transpose, Double* value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]</summary>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix2fv")]
        public static extern void ProgramUniformMatrix2(Int32 program, Int32 location, Int32 count, bool transpose, Single[] value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]</summary>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix2fv")]
        public static extern void ProgramUniformMatrix2(Int32 program, Int32 location, Int32 count, bool transpose, ref Single value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix2fv")]
        public static extern unsafe void ProgramUniformMatrix2(Int32 program, Int32 location, Int32 count, bool transpose, Single* value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix2fv")]
        public static extern void ProgramUniformMatrix2(UInt32 program, Int32 location, Int32 count, bool transpose, Single[] value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix2fv")]
        public static extern void ProgramUniformMatrix2(UInt32 program, Int32 location, Int32 count, bool transpose, ref Single value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix2fv")]
        public static extern unsafe void ProgramUniformMatrix2(UInt32 program, Int32 location, Int32 count, bool transpose, Single* value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]</summary>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix2x3dv")]
        public static extern void ProgramUniformMatrix2x3(Int32 program, Int32 location, Int32 count, bool transpose, Double[] value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]</summary>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix2x3dv")]
        public static extern void ProgramUniformMatrix2x3(Int32 program, Int32 location, Int32 count, bool transpose, ref Double value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix2x3dv")]
        public static extern unsafe void ProgramUniformMatrix2x3(Int32 program, Int32 location, Int32 count, bool transpose, Double* value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix2x3dv")]
        public static extern void ProgramUniformMatrix2x3(UInt32 program, Int32 location, Int32 count, bool transpose, Double[] value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix2x3dv")]
        public static extern void ProgramUniformMatrix2x3(UInt32 program, Int32 location, Int32 count, bool transpose, ref Double value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix2x3dv")]
        public static extern unsafe void ProgramUniformMatrix2x3(UInt32 program, Int32 location, Int32 count, bool transpose, Double* value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]</summary>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix2x3fv")]
        public static extern void ProgramUniformMatrix2x3(Int32 program, Int32 location, Int32 count, bool transpose, Single[] value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]</summary>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix2x3fv")]
        public static extern void ProgramUniformMatrix2x3(Int32 program, Int32 location, Int32 count, bool transpose, ref Single value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix2x3fv")]
        public static extern unsafe void ProgramUniformMatrix2x3(Int32 program, Int32 location, Int32 count, bool transpose, Single* value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix2x3fv")]
        public static extern void ProgramUniformMatrix2x3(UInt32 program, Int32 location, Int32 count, bool transpose, Single[] value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix2x3fv")]
        public static extern void ProgramUniformMatrix2x3(UInt32 program, Int32 location, Int32 count, bool transpose, ref Single value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix2x3fv")]
        public static extern unsafe void ProgramUniformMatrix2x3(UInt32 program, Int32 location, Int32 count, bool transpose, Single* value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]</summary>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix2x4dv")]
        public static extern void ProgramUniformMatrix2x4(Int32 program, Int32 location, Int32 count, bool transpose, Double[] value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]</summary>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix2x4dv")]
        public static extern void ProgramUniformMatrix2x4(Int32 program, Int32 location, Int32 count, bool transpose, ref Double value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix2x4dv")]
        public static extern unsafe void ProgramUniformMatrix2x4(Int32 program, Int32 location, Int32 count, bool transpose, Double* value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix2x4dv")]
        public static extern void ProgramUniformMatrix2x4(UInt32 program, Int32 location, Int32 count, bool transpose, Double[] value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix2x4dv")]
        public static extern void ProgramUniformMatrix2x4(UInt32 program, Int32 location, Int32 count, bool transpose, ref Double value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix2x4dv")]
        public static extern unsafe void ProgramUniformMatrix2x4(UInt32 program, Int32 location, Int32 count, bool transpose, Double* value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]</summary>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix2x4fv")]
        public static extern void ProgramUniformMatrix2x4(Int32 program, Int32 location, Int32 count, bool transpose, Single[] value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]</summary>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix2x4fv")]
        public static extern void ProgramUniformMatrix2x4(Int32 program, Int32 location, Int32 count, bool transpose, ref Single value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix2x4fv")]
        public static extern unsafe void ProgramUniformMatrix2x4(Int32 program, Int32 location, Int32 count, bool transpose, Single* value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix2x4fv")]
        public static extern void ProgramUniformMatrix2x4(UInt32 program, Int32 location, Int32 count, bool transpose, Single[] value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix2x4fv")]
        public static extern void ProgramUniformMatrix2x4(UInt32 program, Int32 location, Int32 count, bool transpose, ref Single value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix2x4fv")]
        public static extern unsafe void ProgramUniformMatrix2x4(UInt32 program, Int32 location, Int32 count, bool transpose, Single* value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]</summary>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix3dv")]
        public static extern void ProgramUniformMatrix3(Int32 program, Int32 location, Int32 count, bool transpose, Double[] value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]</summary>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix3dv")]
        public static extern void ProgramUniformMatrix3(Int32 program, Int32 location, Int32 count, bool transpose, ref Double value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix3dv")]
        public static extern unsafe void ProgramUniformMatrix3(Int32 program, Int32 location, Int32 count, bool transpose, Double* value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix3dv")]
        public static extern void ProgramUniformMatrix3(UInt32 program, Int32 location, Int32 count, bool transpose, Double[] value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix3dv")]
        public static extern void ProgramUniformMatrix3(UInt32 program, Int32 location, Int32 count, bool transpose, ref Double value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix3dv")]
        public static extern unsafe void ProgramUniformMatrix3(UInt32 program, Int32 location, Int32 count, bool transpose, Double* value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]</summary>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix3fv")]
        public static extern void ProgramUniformMatrix3(Int32 program, Int32 location, Int32 count, bool transpose, Single[] value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]</summary>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix3fv")]
        public static extern void ProgramUniformMatrix3(Int32 program, Int32 location, Int32 count, bool transpose, ref Single value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix3fv")]
        public static extern unsafe void ProgramUniformMatrix3(Int32 program, Int32 location, Int32 count, bool transpose, Single* value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix3fv")]
        public static extern void ProgramUniformMatrix3(UInt32 program, Int32 location, Int32 count, bool transpose, Single[] value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix3fv")]
        public static extern void ProgramUniformMatrix3(UInt32 program, Int32 location, Int32 count, bool transpose, ref Single value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix3fv")]
        public static extern unsafe void ProgramUniformMatrix3(UInt32 program, Int32 location, Int32 count, bool transpose, Single* value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]</summary>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix3x2dv")]
        public static extern void ProgramUniformMatrix3x2(Int32 program, Int32 location, Int32 count, bool transpose, Double[] value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]</summary>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix3x2dv")]
        public static extern void ProgramUniformMatrix3x2(Int32 program, Int32 location, Int32 count, bool transpose, ref Double value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix3x2dv")]
        public static extern unsafe void ProgramUniformMatrix3x2(Int32 program, Int32 location, Int32 count, bool transpose, Double* value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix3x2dv")]
        public static extern void ProgramUniformMatrix3x2(UInt32 program, Int32 location, Int32 count, bool transpose, Double[] value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix3x2dv")]
        public static extern void ProgramUniformMatrix3x2(UInt32 program, Int32 location, Int32 count, bool transpose, ref Double value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix3x2dv")]
        public static extern unsafe void ProgramUniformMatrix3x2(UInt32 program, Int32 location, Int32 count, bool transpose, Double* value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]</summary>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix3x2fv")]
        public static extern void ProgramUniformMatrix3x2(Int32 program, Int32 location, Int32 count, bool transpose, Single[] value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]</summary>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix3x2fv")]
        public static extern void ProgramUniformMatrix3x2(Int32 program, Int32 location, Int32 count, bool transpose, ref Single value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix3x2fv")]
        public static extern unsafe void ProgramUniformMatrix3x2(Int32 program, Int32 location, Int32 count, bool transpose, Single* value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix3x2fv")]
        public static extern void ProgramUniformMatrix3x2(UInt32 program, Int32 location, Int32 count, bool transpose, Single[] value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix3x2fv")]
        public static extern void ProgramUniformMatrix3x2(UInt32 program, Int32 location, Int32 count, bool transpose, ref Single value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix3x2fv")]
        public static extern unsafe void ProgramUniformMatrix3x2(UInt32 program, Int32 location, Int32 count, bool transpose, Single* value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]</summary>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix3x4dv")]
        public static extern void ProgramUniformMatrix3x4(Int32 program, Int32 location, Int32 count, bool transpose, Double[] value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]</summary>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix3x4dv")]
        public static extern void ProgramUniformMatrix3x4(Int32 program, Int32 location, Int32 count, bool transpose, ref Double value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix3x4dv")]
        public static extern unsafe void ProgramUniformMatrix3x4(Int32 program, Int32 location, Int32 count, bool transpose, Double* value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix3x4dv")]
        public static extern void ProgramUniformMatrix3x4(UInt32 program, Int32 location, Int32 count, bool transpose, Double[] value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix3x4dv")]
        public static extern void ProgramUniformMatrix3x4(UInt32 program, Int32 location, Int32 count, bool transpose, ref Double value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix3x4dv")]
        public static extern unsafe void ProgramUniformMatrix3x4(UInt32 program, Int32 location, Int32 count, bool transpose, Double* value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]</summary>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix3x4fv")]
        public static extern void ProgramUniformMatrix3x4(Int32 program, Int32 location, Int32 count, bool transpose, Single[] value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]</summary>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix3x4fv")]
        public static extern void ProgramUniformMatrix3x4(Int32 program, Int32 location, Int32 count, bool transpose, ref Single value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix3x4fv")]
        public static extern unsafe void ProgramUniformMatrix3x4(Int32 program, Int32 location, Int32 count, bool transpose, Single* value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix3x4fv")]
        public static extern void ProgramUniformMatrix3x4(UInt32 program, Int32 location, Int32 count, bool transpose, Single[] value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix3x4fv")]
        public static extern void ProgramUniformMatrix3x4(UInt32 program, Int32 location, Int32 count, bool transpose, ref Single value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix3x4fv")]
        public static extern unsafe void ProgramUniformMatrix3x4(UInt32 program, Int32 location, Int32 count, bool transpose, Single* value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]</summary>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix4dv")]
        public static extern void ProgramUniformMatrix4(Int32 program, Int32 location, Int32 count, bool transpose, Double[] value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]</summary>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix4dv")]
        public static extern void ProgramUniformMatrix4(Int32 program, Int32 location, Int32 count, bool transpose, ref Double value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix4dv")]
        public static extern unsafe void ProgramUniformMatrix4(Int32 program, Int32 location, Int32 count, bool transpose, Double* value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix4dv")]
        public static extern void ProgramUniformMatrix4(UInt32 program, Int32 location, Int32 count, bool transpose, Double[] value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix4dv")]
        public static extern void ProgramUniformMatrix4(UInt32 program, Int32 location, Int32 count, bool transpose, ref Double value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix4dv")]
        public static extern unsafe void ProgramUniformMatrix4(UInt32 program, Int32 location, Int32 count, bool transpose, Double* value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]</summary>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix4fv")]
        public static extern void ProgramUniformMatrix4(Int32 program, Int32 location, Int32 count, bool transpose, Single[] value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]</summary>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix4fv")]
        public static extern void ProgramUniformMatrix4(Int32 program, Int32 location, Int32 count, bool transpose, ref Single value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix4fv")]
        public static extern unsafe void ProgramUniformMatrix4(Int32 program, Int32 location, Int32 count, bool transpose, Single* value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix4fv")]
        public static extern void ProgramUniformMatrix4(UInt32 program, Int32 location, Int32 count, bool transpose, Single[] value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix4fv")]
        public static extern void ProgramUniformMatrix4(UInt32 program, Int32 location, Int32 count, bool transpose, ref Single value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix4fv")]
        public static extern unsafe void ProgramUniformMatrix4(UInt32 program, Int32 location, Int32 count, bool transpose, Single* value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]</summary>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix4x2dv")]
        public static extern void ProgramUniformMatrix4x2(Int32 program, Int32 location, Int32 count, bool transpose, Double[] value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]</summary>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix4x2dv")]
        public static extern void ProgramUniformMatrix4x2(Int32 program, Int32 location, Int32 count, bool transpose, ref Double value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix4x2dv")]
        public static extern unsafe void ProgramUniformMatrix4x2(Int32 program, Int32 location, Int32 count, bool transpose, Double* value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix4x2dv")]
        public static extern void ProgramUniformMatrix4x2(UInt32 program, Int32 location, Int32 count, bool transpose, Double[] value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix4x2dv")]
        public static extern void ProgramUniformMatrix4x2(UInt32 program, Int32 location, Int32 count, bool transpose, ref Double value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix4x2dv")]
        public static extern unsafe void ProgramUniformMatrix4x2(UInt32 program, Int32 location, Int32 count, bool transpose, Double* value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]</summary>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix4x2fv")]
        public static extern void ProgramUniformMatrix4x2(Int32 program, Int32 location, Int32 count, bool transpose, Single[] value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]</summary>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix4x2fv")]
        public static extern void ProgramUniformMatrix4x2(Int32 program, Int32 location, Int32 count, bool transpose, ref Single value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix4x2fv")]
        public static extern unsafe void ProgramUniformMatrix4x2(Int32 program, Int32 location, Int32 count, bool transpose, Single* value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix4x2fv")]
        public static extern void ProgramUniformMatrix4x2(UInt32 program, Int32 location, Int32 count, bool transpose, Single[] value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix4x2fv")]
        public static extern void ProgramUniformMatrix4x2(UInt32 program, Int32 location, Int32 count, bool transpose, ref Single value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix4x2fv")]
        public static extern unsafe void ProgramUniformMatrix4x2(UInt32 program, Int32 location, Int32 count, bool transpose, Single* value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]</summary>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix4x3dv")]
        public static extern void ProgramUniformMatrix4x3(Int32 program, Int32 location, Int32 count, bool transpose, Double[] value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]</summary>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix4x3dv")]
        public static extern void ProgramUniformMatrix4x3(Int32 program, Int32 location, Int32 count, bool transpose, ref Double value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix4x3dv")]
        public static extern unsafe void ProgramUniformMatrix4x3(Int32 program, Int32 location, Int32 count, bool transpose, Double* value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix4x3dv")]
        public static extern void ProgramUniformMatrix4x3(UInt32 program, Int32 location, Int32 count, bool transpose, Double[] value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix4x3dv")]
        public static extern void ProgramUniformMatrix4x3(UInt32 program, Int32 location, Int32 count, bool transpose, ref Double value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix4x3dv")]
        public static extern unsafe void ProgramUniformMatrix4x3(UInt32 program, Int32 location, Int32 count, bool transpose, Double* value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]</summary>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix4x3fv")]
        public static extern void ProgramUniformMatrix4x3(Int32 program, Int32 location, Int32 count, bool transpose, Single[] value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]</summary>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix4x3fv")]
        public static extern void ProgramUniformMatrix4x3(Int32 program, Int32 location, Int32 count, bool transpose, ref Single value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix4x3fv")]
        public static extern unsafe void ProgramUniformMatrix4x3(Int32 program, Int32 location, Int32 count, bool transpose, Single* value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix4x3fv")]
        public static extern void ProgramUniformMatrix4x3(UInt32 program, Int32 location, Int32 count, bool transpose, Single[] value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix4x3fv")]
        public static extern void ProgramUniformMatrix4x3(UInt32 program, Int32 location, Int32 count, bool transpose, ref Single value);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix4x3fv")]
        public static extern unsafe void ProgramUniformMatrix4x3(UInt32 program, Int32 location, Int32 count, bool transpose, Single* value);

        /// <summary>[requires: v3.2 and ARB_provoking_vertex|VERSION_3_2]
        /// Specifiy the vertex to be used as the source of data for flat shaded varyings
        /// </summary>
        /// <param name="provokeMode">
        /// <para>
        /// Specifies the vertex to be used as the source of data for flat shaded varyings.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_provoking_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glProvokingVertex")]
        public static extern void ProvokingVertex(OpenTK.Graphics.OpenGL4.ProvokingVertexMode mode);

        /// <summary>[requires: v4.3 and KHR_debug|VERSION_4_3]
        /// Push a named debug group into the command stream
        /// </summary>
        /// <param name="source">
        /// <para>
        /// The source of the debug message.
        /// </para>
        /// </param>
        /// <param name="id">
        /// <para>
        /// The identifier of the message.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// The length of the message to be sent to the debug output stream.
        /// </para>
        /// </param>
        /// <param name="message">
        /// <para>
        /// The a string containing the message to be sent to the debug output stream.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glPushDebugGroup")]
        public static extern void PushDebugGroup(OpenTK.Graphics.OpenGL4.DebugSourceExternal source, Int32 id, Int32 length, String message);

        /// <summary>[requires: v4.3 and KHR_debug|VERSION_4_3]
        /// Push a named debug group into the command stream
        /// </summary>
        /// <param name="source">
        /// <para>
        /// The source of the debug message.
        /// </para>
        /// </param>
        /// <param name="id">
        /// <para>
        /// The identifier of the message.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// The length of the message to be sent to the debug output stream.
        /// </para>
        /// </param>
        /// <param name="message">
        /// <para>
        /// The a string containing the message to be sent to the debug output stream.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glPushDebugGroup")]
        public static extern void PushDebugGroup(OpenTK.Graphics.OpenGL4.DebugSourceExternal source, UInt32 id, Int32 length, String message);

        /// <summary>[requires: v3.3 and ARB_timer_query|VERSION_3_3]
        /// Record the GL time into a query object after all previous commands have reached the GL server but have not yet necessarily executed.
        /// </summary>
        /// <param name="id">
        /// <para>
        /// Specify the name of a query object into which to record the GL time.
        /// </para>
        /// </param>
        /// <param name="target">
        /// <para>
        /// Specify the counter to query. target must be GL_TIMESTAMP.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_timer_query|VERSION_3_3", Version = "3.3", EntryPoint = "glQueryCounter")]
        public static extern void QueryCounter(Int32 id, OpenTK.Graphics.OpenGL4.QueryCounterTarget target);

        /// <summary>[requires: v3.3 and ARB_timer_query|VERSION_3_3]
        /// Record the GL time into a query object after all previous commands have reached the GL server but have not yet necessarily executed.
        /// </summary>
        /// <param name="id">
        /// <para>
        /// Specify the name of a query object into which to record the GL time.
        /// </para>
        /// </param>
        /// <param name="target">
        /// <para>
        /// Specify the counter to query. target must be GL_TIMESTAMP.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_timer_query|VERSION_3_3", Version = "3.3", EntryPoint = "glQueryCounter")]
        public static extern void QueryCounter(UInt32 id, OpenTK.Graphics.OpenGL4.QueryCounterTarget target);

        /// <summary>[requires: v1.0]
        /// Select a color buffer source for pixels
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies a color buffer. Accepted values are GL_FRONT_LEFT, GL_FRONT_RIGHT, GL_BACK_LEFT, GL_BACK_RIGHT, GL_FRONT, GL_BACK, GL_LEFT, GL_RIGHT, and the constants GL_COLOR_ATTACHMENTi.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glReadBuffer")]
        public static extern void ReadBuffer(OpenTK.Graphics.OpenGL4.ReadBufferMode mode);

        /// <summary>[requires: v1.0]
        /// Read a block of pixels from the frame buffer
        /// </summary>
        /// <param name="x">
        /// <para>
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the pixel data. The following symbolic values are accepted: GL_STENCIL_INDEX, GL_DEPTH_COMPONENT, GL_DEPTH_STENCIL, GL_RED, GL_GREEN, GL_BLUE, GL_RGB, GL_BGR, GL_RGBA, and GL_BGRA.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of the pixel data. Must be one of GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_HALF_FLOAT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, GL_UNSIGNED_INT_2_10_10_10_REV, GL_UNSIGNED_INT_24_8, GL_UNSIGNED_INT_10F_11F_11F_REV, GL_UNSIGNED_INT_5_9_9_9_REV, or GL_FLOAT_32_UNSIGNED_INT_24_8_REV.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Returns the pixel data.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glReadPixels")]
        public static extern void ReadPixels(Int32 x, Int32 y, Int32 width, Int32 height, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [OutAttribute] IntPtr pixels);

        /// <summary>[requires: v1.0]
        /// Read a block of pixels from the frame buffer
        /// </summary>
        /// <param name="x">
        /// <para>
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the pixel data. The following symbolic values are accepted: GL_STENCIL_INDEX, GL_DEPTH_COMPONENT, GL_DEPTH_STENCIL, GL_RED, GL_GREEN, GL_BLUE, GL_RGB, GL_BGR, GL_RGBA, and GL_BGRA.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of the pixel data. Must be one of GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_HALF_FLOAT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, GL_UNSIGNED_INT_2_10_10_10_REV, GL_UNSIGNED_INT_24_8, GL_UNSIGNED_INT_10F_11F_11F_REV, GL_UNSIGNED_INT_5_9_9_9_REV, or GL_FLOAT_32_UNSIGNED_INT_24_8_REV.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Returns the pixel data.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glReadPixels")]
        public static extern void ReadPixels<T6>(Int32 x, Int32 y, Int32 width, Int32 height, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute] T6[] pixels)
            where T6 : struct
        ;

        /// <summary>[requires: v1.0]
        /// Read a block of pixels from the frame buffer
        /// </summary>
        /// <param name="x">
        /// <para>
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the pixel data. The following symbolic values are accepted: GL_STENCIL_INDEX, GL_DEPTH_COMPONENT, GL_DEPTH_STENCIL, GL_RED, GL_GREEN, GL_BLUE, GL_RGB, GL_BGR, GL_RGBA, and GL_BGRA.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of the pixel data. Must be one of GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_HALF_FLOAT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, GL_UNSIGNED_INT_2_10_10_10_REV, GL_UNSIGNED_INT_24_8, GL_UNSIGNED_INT_10F_11F_11F_REV, GL_UNSIGNED_INT_5_9_9_9_REV, or GL_FLOAT_32_UNSIGNED_INT_24_8_REV.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Returns the pixel data.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glReadPixels")]
        public static extern void ReadPixels<T6>(Int32 x, Int32 y, Int32 width, Int32 height, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute] T6[,] pixels)
            where T6 : struct
        ;

        /// <summary>[requires: v1.0]
        /// Read a block of pixels from the frame buffer
        /// </summary>
        /// <param name="x">
        /// <para>
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the pixel data. The following symbolic values are accepted: GL_STENCIL_INDEX, GL_DEPTH_COMPONENT, GL_DEPTH_STENCIL, GL_RED, GL_GREEN, GL_BLUE, GL_RGB, GL_BGR, GL_RGBA, and GL_BGRA.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of the pixel data. Must be one of GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_HALF_FLOAT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, GL_UNSIGNED_INT_2_10_10_10_REV, GL_UNSIGNED_INT_24_8, GL_UNSIGNED_INT_10F_11F_11F_REV, GL_UNSIGNED_INT_5_9_9_9_REV, or GL_FLOAT_32_UNSIGNED_INT_24_8_REV.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Returns the pixel data.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glReadPixels")]
        public static extern void ReadPixels<T6>(Int32 x, Int32 y, Int32 width, Int32 height, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute] T6[,,] pixels)
            where T6 : struct
        ;

        /// <summary>[requires: v1.0]
        /// Read a block of pixels from the frame buffer
        /// </summary>
        /// <param name="x">
        /// <para>
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the pixel data. The following symbolic values are accepted: GL_STENCIL_INDEX, GL_DEPTH_COMPONENT, GL_DEPTH_STENCIL, GL_RED, GL_GREEN, GL_BLUE, GL_RGB, GL_BGR, GL_RGBA, and GL_BGRA.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of the pixel data. Must be one of GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_HALF_FLOAT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, GL_UNSIGNED_INT_2_10_10_10_REV, GL_UNSIGNED_INT_24_8, GL_UNSIGNED_INT_10F_11F_11F_REV, GL_UNSIGNED_INT_5_9_9_9_REV, or GL_FLOAT_32_UNSIGNED_INT_24_8_REV.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Returns the pixel data.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glReadPixels")]
        public static extern void ReadPixels<T6>(Int32 x, Int32 y, Int32 width, Int32 height, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute] ref T6 pixels)
            where T6 : struct
        ;

        /// <summary>[requires: v4.1 and ARB_ES2_compatibility|VERSION_4_1]
        /// Release resources consumed by the implementation's shader compiler
        /// </summary>
        [AutoGenerated(Category = "ARB_ES2_compatibility|VERSION_4_1", Version = "4.1", EntryPoint = "glReleaseShaderCompiler")]
        public static extern void ReleaseShaderCompiler();

        /// <summary>[requires: v3.0 and ARB_framebuffer_object|VERSION_3_0]
        /// Establish data storage, format and dimensions of a renderbuffer object's image
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies a binding to which the target of the allocation and must be GL_RENDERBUFFER.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// Specifies the internal format to use for the renderbuffer object's image.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the renderbuffer, in pixels.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the renderbuffer, in pixels.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glRenderbufferStorage")]
        public static extern void RenderbufferStorage(OpenTK.Graphics.OpenGL4.RenderbufferTarget target, OpenTK.Graphics.OpenGL4.RenderbufferStorage internalformat, Int32 width, Int32 height);

        /// <summary>[requires: v3.0 and ARB_framebuffer_object|VERSION_3_0]
        /// Establish data storage, format, dimensions and sample count of a renderbuffer object's image
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies a binding to which the target of the allocation and must be GL_RENDERBUFFER.
        /// </para>
        /// </param>
        /// <param name="samples">
        /// <para>
        /// Specifies the number of samples to be used for the renderbuffer object's storage.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// Specifies the internal format to use for the renderbuffer object's image.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the renderbuffer, in pixels.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the renderbuffer, in pixels.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glRenderbufferStorageMultisample")]
        public static extern void RenderbufferStorageMultisample(OpenTK.Graphics.OpenGL4.RenderbufferTarget target, Int32 samples, OpenTK.Graphics.OpenGL4.RenderbufferStorage internalformat, Int32 width, Int32 height);

        /// <summary>
        /// Reset histogram table entries to zero
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Must be GL_HISTOGRAM.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glResetHistogram")]
        public static extern void ResetHistogram(OpenTK.Graphics.OpenGL4.HistogramTarget target);

        /// <summary>
        /// Reset minmax table entries to initial values
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Must be GL_MINMAX.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glResetMinmax")]
        public static extern void ResetMinmax(OpenTK.Graphics.OpenGL4.MinmaxTarget target);

        /// <summary>[requires: v4.0 and ARB_transform_feedback2|VERSION_4_0]
        /// Resume transform feedback operations
        /// </summary>
        [AutoGenerated(Category = "ARB_transform_feedback2|VERSION_4_0", Version = "4.0", EntryPoint = "glResumeTransformFeedback")]
        public static extern void ResumeTransformFeedback();

        /// <summary>[requires: v1.3]
        /// Specify multisample coverage parameters
        /// </summary>
        /// <param name="value">
        /// <para>
        /// Specify a single floating-point sample coverage value. The value is clamped to the range [0 ,1]. The initial value is 1.0.
        /// </para>
        /// </param>
        /// <param name="invert">
        /// <para>
        /// Specify a single boolean value representing if the coverage masks should be inverted. GL_TRUE and GL_FALSE are accepted. The initial value is GL_FALSE.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glSampleCoverage")]
        public static extern void SampleCoverage(Single value, bool invert);

        /// <summary>[requires: v3.2 and ARB_texture_multisample|VERSION_3_2]
        /// Set the value of a sub-word of the sample mask
        /// </summary>
        /// <param name="maskNumber">
        /// <para>
        /// Specifies which 32-bit sub-word of the sample mask to update.
        /// </para>
        /// </param>
        /// <param name="mask">
        /// <para>
        /// Specifies the new value of the mask sub-word.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_texture_multisample|VERSION_3_2", Version = "3.2", EntryPoint = "glSampleMaski")]
        public static extern void SampleMask(Int32 index, Int32 mask);

        /// <summary>[requires: v3.2 and ARB_texture_multisample|VERSION_3_2]
        /// Set the value of a sub-word of the sample mask
        /// </summary>
        /// <param name="maskNumber">
        /// <para>
        /// Specifies which 32-bit sub-word of the sample mask to update.
        /// </para>
        /// </param>
        /// <param name="mask">
        /// <para>
        /// Specifies the new value of the mask sub-word.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_texture_multisample|VERSION_3_2", Version = "3.2", EntryPoint = "glSampleMaski")]
        public static extern void SampleMask(UInt32 index, UInt32 mask);

        /// <summary>[requires: v3.3 and ARB_sampler_objects|VERSION_3_3]
        /// Set sampler parameters
        /// </summary>
        /// <param name="sampler">
        /// <para>
        /// Specifies the sampler object whose parameter to modify.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a sampler parameter. pname can be one of the following: GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, GL_TEXTURE_WRAP_R, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MAG_FILTER, GL_TEXTURE_BORDER_COLOR, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, GL_TEXTURE_LOD_BIAS GL_TEXTURE_COMPARE_MODE, or GL_TEXTURE_COMPARE_FUNC.
        /// </para>
        /// </param>
        /// <param name="param">
        /// <para>
        /// For the scalar commands, specifies the value of pname.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// For the vector commands (glSamplerParameter*v), specifies a pointer to an array where the value or values of pname are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glSamplerParameterf")]
        public static extern void SamplerParameter(Int32 sampler, OpenTK.Graphics.OpenGL4.SamplerParameterName pname, Single param);

        /// <summary>[requires: v3.3 and ARB_sampler_objects|VERSION_3_3]
        /// Set sampler parameters
        /// </summary>
        /// <param name="sampler">
        /// <para>
        /// Specifies the sampler object whose parameter to modify.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a sampler parameter. pname can be one of the following: GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, GL_TEXTURE_WRAP_R, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MAG_FILTER, GL_TEXTURE_BORDER_COLOR, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, GL_TEXTURE_LOD_BIAS GL_TEXTURE_COMPARE_MODE, or GL_TEXTURE_COMPARE_FUNC.
        /// </para>
        /// </param>
        /// <param name="param">
        /// <para>
        /// For the scalar commands, specifies the value of pname.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// For the vector commands (glSamplerParameter*v), specifies a pointer to an array where the value or values of pname are stored.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glSamplerParameterf")]
        public static extern void SamplerParameter(UInt32 sampler, OpenTK.Graphics.OpenGL4.SamplerParameterName pname, Single param);

        /// <summary>[requires: v3.3 and ARB_sampler_objects|VERSION_3_3]
        /// Set sampler parameters
        /// </summary>
        /// <param name="sampler">
        /// <para>
        /// Specifies the sampler object whose parameter to modify.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a sampler parameter. pname can be one of the following: GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, GL_TEXTURE_WRAP_R, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MAG_FILTER, GL_TEXTURE_BORDER_COLOR, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, GL_TEXTURE_LOD_BIAS GL_TEXTURE_COMPARE_MODE, or GL_TEXTURE_COMPARE_FUNC.
        /// </para>
        /// </param>
        /// <param name="param">
        /// <para>
        /// For the scalar commands, specifies the value of pname.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// For the vector commands (glSamplerParameter*v), specifies a pointer to an array where the value or values of pname are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glSamplerParameterfv")]
        public static extern void SamplerParameter(Int32 sampler, OpenTK.Graphics.OpenGL4.SamplerParameterName pname, Single[] param);

        /// <summary>[requires: v3.3 and ARB_sampler_objects|VERSION_3_3]
        /// Set sampler parameters
        /// </summary>
        /// <param name="sampler">
        /// <para>
        /// Specifies the sampler object whose parameter to modify.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a sampler parameter. pname can be one of the following: GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, GL_TEXTURE_WRAP_R, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MAG_FILTER, GL_TEXTURE_BORDER_COLOR, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, GL_TEXTURE_LOD_BIAS GL_TEXTURE_COMPARE_MODE, or GL_TEXTURE_COMPARE_FUNC.
        /// </para>
        /// </param>
        /// <param name="param">
        /// <para>
        /// For the scalar commands, specifies the value of pname.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// For the vector commands (glSamplerParameter*v), specifies a pointer to an array where the value or values of pname are stored.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glSamplerParameterfv")]
        public static extern unsafe void SamplerParameter(Int32 sampler, OpenTK.Graphics.OpenGL4.SamplerParameterName pname, Single* param);

        /// <summary>[requires: v3.3 and ARB_sampler_objects|VERSION_3_3]
        /// Set sampler parameters
        /// </summary>
        /// <param name="sampler">
        /// <para>
        /// Specifies the sampler object whose parameter to modify.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a sampler parameter. pname can be one of the following: GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, GL_TEXTURE_WRAP_R, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MAG_FILTER, GL_TEXTURE_BORDER_COLOR, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, GL_TEXTURE_LOD_BIAS GL_TEXTURE_COMPARE_MODE, or GL_TEXTURE_COMPARE_FUNC.
        /// </para>
        /// </param>
        /// <param name="param">
        /// <para>
        /// For the scalar commands, specifies the value of pname.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// For the vector commands (glSamplerParameter*v), specifies a pointer to an array where the value or values of pname are stored.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glSamplerParameterfv")]
        public static extern void SamplerParameter(UInt32 sampler, OpenTK.Graphics.OpenGL4.SamplerParameterName pname, Single[] param);

        /// <summary>[requires: v3.3 and ARB_sampler_objects|VERSION_3_3]
        /// Set sampler parameters
        /// </summary>
        /// <param name="sampler">
        /// <para>
        /// Specifies the sampler object whose parameter to modify.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a sampler parameter. pname can be one of the following: GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, GL_TEXTURE_WRAP_R, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MAG_FILTER, GL_TEXTURE_BORDER_COLOR, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, GL_TEXTURE_LOD_BIAS GL_TEXTURE_COMPARE_MODE, or GL_TEXTURE_COMPARE_FUNC.
        /// </para>
        /// </param>
        /// <param name="param">
        /// <para>
        /// For the scalar commands, specifies the value of pname.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// For the vector commands (glSamplerParameter*v), specifies a pointer to an array where the value or values of pname are stored.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glSamplerParameterfv")]
        public static extern unsafe void SamplerParameter(UInt32 sampler, OpenTK.Graphics.OpenGL4.SamplerParameterName pname, Single* param);

        /// <summary>[requires: v3.3 and ARB_sampler_objects|VERSION_3_3]
        /// Set sampler parameters
        /// </summary>
        /// <param name="sampler">
        /// <para>
        /// Specifies the sampler object whose parameter to modify.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a sampler parameter. pname can be one of the following: GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, GL_TEXTURE_WRAP_R, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MAG_FILTER, GL_TEXTURE_BORDER_COLOR, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, GL_TEXTURE_LOD_BIAS GL_TEXTURE_COMPARE_MODE, or GL_TEXTURE_COMPARE_FUNC.
        /// </para>
        /// </param>
        /// <param name="param">
        /// <para>
        /// For the scalar commands, specifies the value of pname.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// For the vector commands (glSamplerParameter*v), specifies a pointer to an array where the value or values of pname are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glSamplerParameteri")]
        public static extern void SamplerParameter(Int32 sampler, OpenTK.Graphics.OpenGL4.SamplerParameterName pname, Int32 param);

        /// <summary>[requires: v3.3 and ARB_sampler_objects|VERSION_3_3]
        /// Set sampler parameters
        /// </summary>
        /// <param name="sampler">
        /// <para>
        /// Specifies the sampler object whose parameter to modify.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a sampler parameter. pname can be one of the following: GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, GL_TEXTURE_WRAP_R, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MAG_FILTER, GL_TEXTURE_BORDER_COLOR, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, GL_TEXTURE_LOD_BIAS GL_TEXTURE_COMPARE_MODE, or GL_TEXTURE_COMPARE_FUNC.
        /// </para>
        /// </param>
        /// <param name="param">
        /// <para>
        /// For the scalar commands, specifies the value of pname.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// For the vector commands (glSamplerParameter*v), specifies a pointer to an array where the value or values of pname are stored.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glSamplerParameteri")]
        public static extern void SamplerParameter(UInt32 sampler, OpenTK.Graphics.OpenGL4.SamplerParameterName pname, Int32 param);

        /// <summary>[requires: v3.3 and ARB_sampler_objects|VERSION_3_3]</summary>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glSamplerParameterIiv")]
        public static extern void SamplerParameterI(Int32 sampler, OpenTK.Graphics.OpenGL4.SamplerParameterName pname, Int32[] param);

        /// <summary>[requires: v3.3 and ARB_sampler_objects|VERSION_3_3]</summary>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glSamplerParameterIiv")]
        public static extern void SamplerParameterI(Int32 sampler, OpenTK.Graphics.OpenGL4.SamplerParameterName pname, ref Int32 param);

        /// <summary>[requires: v3.3 and ARB_sampler_objects|VERSION_3_3]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glSamplerParameterIiv")]
        public static extern unsafe void SamplerParameterI(Int32 sampler, OpenTK.Graphics.OpenGL4.SamplerParameterName pname, Int32* param);

        /// <summary>[requires: v3.3 and ARB_sampler_objects|VERSION_3_3]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glSamplerParameterIiv")]
        public static extern void SamplerParameterI(UInt32 sampler, OpenTK.Graphics.OpenGL4.SamplerParameterName pname, Int32[] param);

        /// <summary>[requires: v3.3 and ARB_sampler_objects|VERSION_3_3]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glSamplerParameterIiv")]
        public static extern void SamplerParameterI(UInt32 sampler, OpenTK.Graphics.OpenGL4.SamplerParameterName pname, ref Int32 param);

        /// <summary>[requires: v3.3 and ARB_sampler_objects|VERSION_3_3]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glSamplerParameterIiv")]
        public static extern unsafe void SamplerParameterI(UInt32 sampler, OpenTK.Graphics.OpenGL4.SamplerParameterName pname, Int32* param);

        /// <summary>[requires: v3.3 and ARB_sampler_objects|VERSION_3_3]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glSamplerParameterIuiv")]
        public static extern void SamplerParameterI(UInt32 sampler, OpenTK.Graphics.OpenGL4.SamplerParameterName pname, UInt32[] param);

        /// <summary>[requires: v3.3 and ARB_sampler_objects|VERSION_3_3]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glSamplerParameterIuiv")]
        public static extern void SamplerParameterI(UInt32 sampler, OpenTK.Graphics.OpenGL4.SamplerParameterName pname, ref UInt32 param);

        /// <summary>[requires: v3.3 and ARB_sampler_objects|VERSION_3_3]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glSamplerParameterIuiv")]
        public static extern unsafe void SamplerParameterI(UInt32 sampler, OpenTK.Graphics.OpenGL4.SamplerParameterName pname, UInt32* param);

        /// <summary>[requires: v3.3 and ARB_sampler_objects|VERSION_3_3]
        /// Set sampler parameters
        /// </summary>
        /// <param name="sampler">
        /// <para>
        /// Specifies the sampler object whose parameter to modify.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a sampler parameter. pname can be one of the following: GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, GL_TEXTURE_WRAP_R, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MAG_FILTER, GL_TEXTURE_BORDER_COLOR, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, GL_TEXTURE_LOD_BIAS GL_TEXTURE_COMPARE_MODE, or GL_TEXTURE_COMPARE_FUNC.
        /// </para>
        /// </param>
        /// <param name="param">
        /// <para>
        /// For the scalar commands, specifies the value of pname.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// For the vector commands (glSamplerParameter*v), specifies a pointer to an array where the value or values of pname are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glSamplerParameteriv")]
        public static extern void SamplerParameter(Int32 sampler, OpenTK.Graphics.OpenGL4.SamplerParameterName pname, Int32[] param);

        /// <summary>[requires: v3.3 and ARB_sampler_objects|VERSION_3_3]
        /// Set sampler parameters
        /// </summary>
        /// <param name="sampler">
        /// <para>
        /// Specifies the sampler object whose parameter to modify.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a sampler parameter. pname can be one of the following: GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, GL_TEXTURE_WRAP_R, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MAG_FILTER, GL_TEXTURE_BORDER_COLOR, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, GL_TEXTURE_LOD_BIAS GL_TEXTURE_COMPARE_MODE, or GL_TEXTURE_COMPARE_FUNC.
        /// </para>
        /// </param>
        /// <param name="param">
        /// <para>
        /// For the scalar commands, specifies the value of pname.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// For the vector commands (glSamplerParameter*v), specifies a pointer to an array where the value or values of pname are stored.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glSamplerParameteriv")]
        public static extern unsafe void SamplerParameter(Int32 sampler, OpenTK.Graphics.OpenGL4.SamplerParameterName pname, Int32* param);

        /// <summary>[requires: v3.3 and ARB_sampler_objects|VERSION_3_3]
        /// Set sampler parameters
        /// </summary>
        /// <param name="sampler">
        /// <para>
        /// Specifies the sampler object whose parameter to modify.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a sampler parameter. pname can be one of the following: GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, GL_TEXTURE_WRAP_R, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MAG_FILTER, GL_TEXTURE_BORDER_COLOR, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, GL_TEXTURE_LOD_BIAS GL_TEXTURE_COMPARE_MODE, or GL_TEXTURE_COMPARE_FUNC.
        /// </para>
        /// </param>
        /// <param name="param">
        /// <para>
        /// For the scalar commands, specifies the value of pname.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// For the vector commands (glSamplerParameter*v), specifies a pointer to an array where the value or values of pname are stored.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glSamplerParameteriv")]
        public static extern void SamplerParameter(UInt32 sampler, OpenTK.Graphics.OpenGL4.SamplerParameterName pname, Int32[] param);

        /// <summary>[requires: v3.3 and ARB_sampler_objects|VERSION_3_3]
        /// Set sampler parameters
        /// </summary>
        /// <param name="sampler">
        /// <para>
        /// Specifies the sampler object whose parameter to modify.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a sampler parameter. pname can be one of the following: GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, GL_TEXTURE_WRAP_R, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MAG_FILTER, GL_TEXTURE_BORDER_COLOR, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, GL_TEXTURE_LOD_BIAS GL_TEXTURE_COMPARE_MODE, or GL_TEXTURE_COMPARE_FUNC.
        /// </para>
        /// </param>
        /// <param name="param">
        /// <para>
        /// For the scalar commands, specifies the value of pname.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// For the vector commands (glSamplerParameter*v), specifies a pointer to an array where the value or values of pname are stored.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glSamplerParameteriv")]
        public static extern unsafe void SamplerParameter(UInt32 sampler, OpenTK.Graphics.OpenGL4.SamplerParameterName pname, Int32* param);

        /// <summary>[requires: v1.0]
        /// Define the scissor box
        /// </summary>
        /// <param name="x">
        /// <para>
        /// Specify the lower left corner of the scissor box. Initially (0, 0).
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specify the width and height of the scissor box. When a GL context is first attached to a window, width and height are set to the dimensions of that window.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glScissor")]
        public static extern void Scissor(Int32 x, Int32 y, Int32 width, Int32 height);

        /// <summary>[requires: v4.1 and ARB_viewport_array|VERSION_4_1]
        /// Define the scissor box for multiple viewports
        /// </summary>
        /// <param name="first">
        /// <para>
        /// Specifies the index of the first viewport whose scissor box to modify.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of scissor boxes to modify.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// Specifies the address of an array containing the left, bottom, width and height of each scissor box, in that order.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glScissorArrayv")]
        public static extern void ScissorArray(Int32 first, Int32 count, Int32[] v);

        /// <summary>[requires: v4.1 and ARB_viewport_array|VERSION_4_1]
        /// Define the scissor box for multiple viewports
        /// </summary>
        /// <param name="first">
        /// <para>
        /// Specifies the index of the first viewport whose scissor box to modify.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of scissor boxes to modify.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// Specifies the address of an array containing the left, bottom, width and height of each scissor box, in that order.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glScissorArrayv")]
        public static extern void ScissorArray(Int32 first, Int32 count, ref Int32 v);

        /// <summary>[requires: v4.1 and ARB_viewport_array|VERSION_4_1]
        /// Define the scissor box for multiple viewports
        /// </summary>
        /// <param name="first">
        /// <para>
        /// Specifies the index of the first viewport whose scissor box to modify.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of scissor boxes to modify.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// Specifies the address of an array containing the left, bottom, width and height of each scissor box, in that order.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glScissorArrayv")]
        public static extern unsafe void ScissorArray(Int32 first, Int32 count, Int32* v);

        /// <summary>[requires: v4.1 and ARB_viewport_array|VERSION_4_1]
        /// Define the scissor box for multiple viewports
        /// </summary>
        /// <param name="first">
        /// <para>
        /// Specifies the index of the first viewport whose scissor box to modify.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of scissor boxes to modify.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// Specifies the address of an array containing the left, bottom, width and height of each scissor box, in that order.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glScissorArrayv")]
        public static extern void ScissorArray(UInt32 first, Int32 count, Int32[] v);

        /// <summary>[requires: v4.1 and ARB_viewport_array|VERSION_4_1]
        /// Define the scissor box for multiple viewports
        /// </summary>
        /// <param name="first">
        /// <para>
        /// Specifies the index of the first viewport whose scissor box to modify.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of scissor boxes to modify.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// Specifies the address of an array containing the left, bottom, width and height of each scissor box, in that order.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glScissorArrayv")]
        public static extern void ScissorArray(UInt32 first, Int32 count, ref Int32 v);

        /// <summary>[requires: v4.1 and ARB_viewport_array|VERSION_4_1]
        /// Define the scissor box for multiple viewports
        /// </summary>
        /// <param name="first">
        /// <para>
        /// Specifies the index of the first viewport whose scissor box to modify.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of scissor boxes to modify.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// Specifies the address of an array containing the left, bottom, width and height of each scissor box, in that order.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glScissorArrayv")]
        public static extern unsafe void ScissorArray(UInt32 first, Int32 count, Int32* v);

        /// <summary>[requires: v4.1 and ARB_viewport_array|VERSION_4_1]
        /// Define the scissor box for a specific viewport
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the viewport whose scissor box to modify.
        /// </para>
        /// </param>
        /// <param name="left">
        /// <para>
        /// Specify the coordinate of the bottom left corner of the scissor box, in pixels.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specify ths dimensions of the scissor box, in pixels.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For glScissorIndexedv, specifies the address of an array containing the left, bottom, width and height of each scissor box, in that order.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glScissorIndexed")]
        public static extern void ScissorIndexed(Int32 index, Int32 left, Int32 bottom, Int32 width, Int32 height);

        /// <summary>[requires: v4.1 and ARB_viewport_array|VERSION_4_1]
        /// Define the scissor box for a specific viewport
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the viewport whose scissor box to modify.
        /// </para>
        /// </param>
        /// <param name="left">
        /// <para>
        /// Specify the coordinate of the bottom left corner of the scissor box, in pixels.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specify ths dimensions of the scissor box, in pixels.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For glScissorIndexedv, specifies the address of an array containing the left, bottom, width and height of each scissor box, in that order.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glScissorIndexed")]
        public static extern void ScissorIndexed(UInt32 index, Int32 left, Int32 bottom, Int32 width, Int32 height);

        /// <summary>[requires: v4.1 and ARB_viewport_array|VERSION_4_1]
        /// Define the scissor box for a specific viewport
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the viewport whose scissor box to modify.
        /// </para>
        /// </param>
        /// <param name="left">
        /// <para>
        /// Specify the coordinate of the bottom left corner of the scissor box, in pixels.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specify ths dimensions of the scissor box, in pixels.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For glScissorIndexedv, specifies the address of an array containing the left, bottom, width and height of each scissor box, in that order.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glScissorIndexedv")]
        public static extern void ScissorIndexed(Int32 index, Int32[] v);

        /// <summary>[requires: v4.1 and ARB_viewport_array|VERSION_4_1]
        /// Define the scissor box for a specific viewport
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the viewport whose scissor box to modify.
        /// </para>
        /// </param>
        /// <param name="left">
        /// <para>
        /// Specify the coordinate of the bottom left corner of the scissor box, in pixels.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specify ths dimensions of the scissor box, in pixels.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For glScissorIndexedv, specifies the address of an array containing the left, bottom, width and height of each scissor box, in that order.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glScissorIndexedv")]
        public static extern void ScissorIndexed(Int32 index, ref Int32 v);

        /// <summary>[requires: v4.1 and ARB_viewport_array|VERSION_4_1]
        /// Define the scissor box for a specific viewport
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the viewport whose scissor box to modify.
        /// </para>
        /// </param>
        /// <param name="left">
        /// <para>
        /// Specify the coordinate of the bottom left corner of the scissor box, in pixels.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specify ths dimensions of the scissor box, in pixels.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For glScissorIndexedv, specifies the address of an array containing the left, bottom, width and height of each scissor box, in that order.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glScissorIndexedv")]
        public static extern unsafe void ScissorIndexed(Int32 index, Int32* v);

        /// <summary>[requires: v4.1 and ARB_viewport_array|VERSION_4_1]
        /// Define the scissor box for a specific viewport
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the viewport whose scissor box to modify.
        /// </para>
        /// </param>
        /// <param name="left">
        /// <para>
        /// Specify the coordinate of the bottom left corner of the scissor box, in pixels.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specify ths dimensions of the scissor box, in pixels.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For glScissorIndexedv, specifies the address of an array containing the left, bottom, width and height of each scissor box, in that order.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glScissorIndexedv")]
        public static extern void ScissorIndexed(UInt32 index, Int32[] v);

        /// <summary>[requires: v4.1 and ARB_viewport_array|VERSION_4_1]
        /// Define the scissor box for a specific viewport
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the viewport whose scissor box to modify.
        /// </para>
        /// </param>
        /// <param name="left">
        /// <para>
        /// Specify the coordinate of the bottom left corner of the scissor box, in pixels.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specify ths dimensions of the scissor box, in pixels.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For glScissorIndexedv, specifies the address of an array containing the left, bottom, width and height of each scissor box, in that order.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glScissorIndexedv")]
        public static extern void ScissorIndexed(UInt32 index, ref Int32 v);

        /// <summary>[requires: v4.1 and ARB_viewport_array|VERSION_4_1]
        /// Define the scissor box for a specific viewport
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the viewport whose scissor box to modify.
        /// </para>
        /// </param>
        /// <param name="left">
        /// <para>
        /// Specify the coordinate of the bottom left corner of the scissor box, in pixels.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specify ths dimensions of the scissor box, in pixels.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For glScissorIndexedv, specifies the address of an array containing the left, bottom, width and height of each scissor box, in that order.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glScissorIndexedv")]
        public static extern unsafe void ScissorIndexed(UInt32 index, Int32* v);

        /// <summary>[requires: v3.3 and ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glSecondaryColorP3ui")]
        public static extern void SecondaryColorP3(OpenTK.Graphics.OpenGL4.PackedPointerType type, Int32 color);

        /// <summary>[requires: v3.3 and ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glSecondaryColorP3ui")]
        public static extern void SecondaryColorP3(OpenTK.Graphics.OpenGL4.PackedPointerType type, UInt32 color);

        /// <summary>[requires: v3.3 and ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glSecondaryColorP3uiv")]
        public static extern unsafe void SecondaryColorP3(OpenTK.Graphics.OpenGL4.PackedPointerType type, Int32* color);

        /// <summary>[requires: v3.3 and ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glSecondaryColorP3uiv")]
        public static extern unsafe void SecondaryColorP3(OpenTK.Graphics.OpenGL4.PackedPointerType type, UInt32* color);

        /// <summary>
        /// Define a separable two-dimensional convolution filter
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Must be GL_SEPARABLE_2D.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// The internal format of the convolution filter kernel. The allowable values are GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, or GL_RGBA16.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// The number of elements in the pixel array referenced by row. (This is the width of the separable filter kernel.)
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// The number of elements in the pixel array referenced by column. (This is the height of the separable filter kernel.)
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// The format of the pixel data in row and column. The allowable values are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_INTENSITY, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// The type of the pixel data in row and column. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
        /// </para>
        /// </param>
        /// <param name="row">
        /// <para>
        /// Pointer to a one-dimensional array of pixel data that is processed to build the row filter kernel.
        /// </para>
        /// </param>
        /// <param name="column">
        /// <para>
        /// Pointer to a one-dimensional array of pixel data that is processed to build the column filter kernel.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glSeparableFilter2D")]
        public static extern void SeparableFilter2D(OpenTK.Graphics.OpenGL4.SeparableTarget target, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, Int32 width, Int32 height, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, IntPtr row, IntPtr column);

        /// <summary>
        /// Define a separable two-dimensional convolution filter
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Must be GL_SEPARABLE_2D.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// The internal format of the convolution filter kernel. The allowable values are GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, or GL_RGBA16.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// The number of elements in the pixel array referenced by row. (This is the width of the separable filter kernel.)
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// The number of elements in the pixel array referenced by column. (This is the height of the separable filter kernel.)
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// The format of the pixel data in row and column. The allowable values are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_INTENSITY, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// The type of the pixel data in row and column. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
        /// </para>
        /// </param>
        /// <param name="row">
        /// <para>
        /// Pointer to a one-dimensional array of pixel data that is processed to build the row filter kernel.
        /// </para>
        /// </param>
        /// <param name="column">
        /// <para>
        /// Pointer to a one-dimensional array of pixel data that is processed to build the column filter kernel.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glSeparableFilter2D")]
        public static extern void SeparableFilter2D<T6,T7>(OpenTK.Graphics.OpenGL4.SeparableTarget target, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, Int32 width, Int32 height, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute] T6[] row, [InAttribute, OutAttribute] T7[] column)
            where T6 : struct
            where T7 : struct
        ;

        /// <summary>
        /// Define a separable two-dimensional convolution filter
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Must be GL_SEPARABLE_2D.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// The internal format of the convolution filter kernel. The allowable values are GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, or GL_RGBA16.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// The number of elements in the pixel array referenced by row. (This is the width of the separable filter kernel.)
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// The number of elements in the pixel array referenced by column. (This is the height of the separable filter kernel.)
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// The format of the pixel data in row and column. The allowable values are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_INTENSITY, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// The type of the pixel data in row and column. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
        /// </para>
        /// </param>
        /// <param name="row">
        /// <para>
        /// Pointer to a one-dimensional array of pixel data that is processed to build the row filter kernel.
        /// </para>
        /// </param>
        /// <param name="column">
        /// <para>
        /// Pointer to a one-dimensional array of pixel data that is processed to build the column filter kernel.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glSeparableFilter2D")]
        public static extern void SeparableFilter2D<T6,T7>(OpenTK.Graphics.OpenGL4.SeparableTarget target, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, Int32 width, Int32 height, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute] T6[,] row, [InAttribute, OutAttribute] T7[,] column)
            where T6 : struct
            where T7 : struct
        ;

        /// <summary>
        /// Define a separable two-dimensional convolution filter
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Must be GL_SEPARABLE_2D.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// The internal format of the convolution filter kernel. The allowable values are GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, or GL_RGBA16.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// The number of elements in the pixel array referenced by row. (This is the width of the separable filter kernel.)
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// The number of elements in the pixel array referenced by column. (This is the height of the separable filter kernel.)
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// The format of the pixel data in row and column. The allowable values are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_INTENSITY, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// The type of the pixel data in row and column. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
        /// </para>
        /// </param>
        /// <param name="row">
        /// <para>
        /// Pointer to a one-dimensional array of pixel data that is processed to build the row filter kernel.
        /// </para>
        /// </param>
        /// <param name="column">
        /// <para>
        /// Pointer to a one-dimensional array of pixel data that is processed to build the column filter kernel.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glSeparableFilter2D")]
        public static extern void SeparableFilter2D<T6,T7>(OpenTK.Graphics.OpenGL4.SeparableTarget target, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, Int32 width, Int32 height, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute] T6[,,] row, [InAttribute, OutAttribute] T7[,,] column)
            where T6 : struct
            where T7 : struct
        ;

        /// <summary>
        /// Define a separable two-dimensional convolution filter
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Must be GL_SEPARABLE_2D.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// The internal format of the convolution filter kernel. The allowable values are GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, or GL_RGBA16.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// The number of elements in the pixel array referenced by row. (This is the width of the separable filter kernel.)
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// The number of elements in the pixel array referenced by column. (This is the height of the separable filter kernel.)
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// The format of the pixel data in row and column. The allowable values are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_INTENSITY, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// The type of the pixel data in row and column. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
        /// </para>
        /// </param>
        /// <param name="row">
        /// <para>
        /// Pointer to a one-dimensional array of pixel data that is processed to build the row filter kernel.
        /// </para>
        /// </param>
        /// <param name="column">
        /// <para>
        /// Pointer to a one-dimensional array of pixel data that is processed to build the column filter kernel.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glSeparableFilter2D")]
        public static extern void SeparableFilter2D<T6,T7>(OpenTK.Graphics.OpenGL4.SeparableTarget target, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, Int32 width, Int32 height, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute] ref T6 row, [InAttribute, OutAttribute] ref T7 column)
            where T6 : struct
            where T7 : struct
        ;

        /// <summary>[requires: v4.1 and ARB_ES2_compatibility|VERSION_4_1]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// <para>
        /// Specifies the number of shader object handles contained in shaders.
        /// </para>
        /// </param>
        /// <param name="shaders">
        /// <para>
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the format of the shader binaries contained in binary.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the length of the array whose address is given in binary.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_ES2_compatibility|VERSION_4_1", Version = "4.1", EntryPoint = "glShaderBinary")]
        public static extern void ShaderBinary(Int32 count, Int32[] shaders, OpenTK.Graphics.OpenGL4.BinaryFormat binaryformat, IntPtr binary, Int32 length);

        /// <summary>[requires: v4.1 and ARB_ES2_compatibility|VERSION_4_1]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// <para>
        /// Specifies the number of shader object handles contained in shaders.
        /// </para>
        /// </param>
        /// <param name="shaders">
        /// <para>
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the format of the shader binaries contained in binary.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the length of the array whose address is given in binary.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_ES2_compatibility|VERSION_4_1", Version = "4.1", EntryPoint = "glShaderBinary")]
        public static extern void ShaderBinary<T3>(Int32 count, Int32[] shaders, OpenTK.Graphics.OpenGL4.BinaryFormat binaryformat, [InAttribute, OutAttribute] T3[] binary, Int32 length)
            where T3 : struct
        ;

        /// <summary>[requires: v4.1 and ARB_ES2_compatibility|VERSION_4_1]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// <para>
        /// Specifies the number of shader object handles contained in shaders.
        /// </para>
        /// </param>
        /// <param name="shaders">
        /// <para>
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the format of the shader binaries contained in binary.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the length of the array whose address is given in binary.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_ES2_compatibility|VERSION_4_1", Version = "4.1", EntryPoint = "glShaderBinary")]
        public static extern void ShaderBinary<T3>(Int32 count, Int32[] shaders, OpenTK.Graphics.OpenGL4.BinaryFormat binaryformat, [InAttribute, OutAttribute] T3[,] binary, Int32 length)
            where T3 : struct
        ;

        /// <summary>[requires: v4.1 and ARB_ES2_compatibility|VERSION_4_1]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// <para>
        /// Specifies the number of shader object handles contained in shaders.
        /// </para>
        /// </param>
        /// <param name="shaders">
        /// <para>
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the format of the shader binaries contained in binary.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the length of the array whose address is given in binary.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_ES2_compatibility|VERSION_4_1", Version = "4.1", EntryPoint = "glShaderBinary")]
        public static extern void ShaderBinary<T3>(Int32 count, Int32[] shaders, OpenTK.Graphics.OpenGL4.BinaryFormat binaryformat, [InAttribute, OutAttribute] T3[,,] binary, Int32 length)
            where T3 : struct
        ;

        /// <summary>[requires: v4.1 and ARB_ES2_compatibility|VERSION_4_1]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// <para>
        /// Specifies the number of shader object handles contained in shaders.
        /// </para>
        /// </param>
        /// <param name="shaders">
        /// <para>
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the format of the shader binaries contained in binary.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the length of the array whose address is given in binary.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_ES2_compatibility|VERSION_4_1", Version = "4.1", EntryPoint = "glShaderBinary")]
        public static extern void ShaderBinary<T3>(Int32 count, Int32[] shaders, OpenTK.Graphics.OpenGL4.BinaryFormat binaryformat, [InAttribute, OutAttribute] ref T3 binary, Int32 length)
            where T3 : struct
        ;

        /// <summary>[requires: v4.1 and ARB_ES2_compatibility|VERSION_4_1]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// <para>
        /// Specifies the number of shader object handles contained in shaders.
        /// </para>
        /// </param>
        /// <param name="shaders">
        /// <para>
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the format of the shader binaries contained in binary.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the length of the array whose address is given in binary.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_ES2_compatibility|VERSION_4_1", Version = "4.1", EntryPoint = "glShaderBinary")]
        public static extern void ShaderBinary(Int32 count, ref Int32 shaders, OpenTK.Graphics.OpenGL4.BinaryFormat binaryformat, IntPtr binary, Int32 length);

        /// <summary>[requires: v4.1 and ARB_ES2_compatibility|VERSION_4_1]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// <para>
        /// Specifies the number of shader object handles contained in shaders.
        /// </para>
        /// </param>
        /// <param name="shaders">
        /// <para>
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the format of the shader binaries contained in binary.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the length of the array whose address is given in binary.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_ES2_compatibility|VERSION_4_1", Version = "4.1", EntryPoint = "glShaderBinary")]
        public static extern void ShaderBinary<T3>(Int32 count, ref Int32 shaders, OpenTK.Graphics.OpenGL4.BinaryFormat binaryformat, [InAttribute, OutAttribute] T3[] binary, Int32 length)
            where T3 : struct
        ;

        /// <summary>[requires: v4.1 and ARB_ES2_compatibility|VERSION_4_1]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// <para>
        /// Specifies the number of shader object handles contained in shaders.
        /// </para>
        /// </param>
        /// <param name="shaders">
        /// <para>
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the format of the shader binaries contained in binary.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the length of the array whose address is given in binary.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_ES2_compatibility|VERSION_4_1", Version = "4.1", EntryPoint = "glShaderBinary")]
        public static extern void ShaderBinary<T3>(Int32 count, ref Int32 shaders, OpenTK.Graphics.OpenGL4.BinaryFormat binaryformat, [InAttribute, OutAttribute] T3[,] binary, Int32 length)
            where T3 : struct
        ;

        /// <summary>[requires: v4.1 and ARB_ES2_compatibility|VERSION_4_1]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// <para>
        /// Specifies the number of shader object handles contained in shaders.
        /// </para>
        /// </param>
        /// <param name="shaders">
        /// <para>
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the format of the shader binaries contained in binary.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the length of the array whose address is given in binary.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_ES2_compatibility|VERSION_4_1", Version = "4.1", EntryPoint = "glShaderBinary")]
        public static extern void ShaderBinary<T3>(Int32 count, ref Int32 shaders, OpenTK.Graphics.OpenGL4.BinaryFormat binaryformat, [InAttribute, OutAttribute] T3[,,] binary, Int32 length)
            where T3 : struct
        ;

        /// <summary>[requires: v4.1 and ARB_ES2_compatibility|VERSION_4_1]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// <para>
        /// Specifies the number of shader object handles contained in shaders.
        /// </para>
        /// </param>
        /// <param name="shaders">
        /// <para>
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the format of the shader binaries contained in binary.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the length of the array whose address is given in binary.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_ES2_compatibility|VERSION_4_1", Version = "4.1", EntryPoint = "glShaderBinary")]
        public static extern void ShaderBinary<T3>(Int32 count, ref Int32 shaders, OpenTK.Graphics.OpenGL4.BinaryFormat binaryformat, [InAttribute, OutAttribute] ref T3 binary, Int32 length)
            where T3 : struct
        ;

        /// <summary>[requires: v4.1 and ARB_ES2_compatibility|VERSION_4_1]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// <para>
        /// Specifies the number of shader object handles contained in shaders.
        /// </para>
        /// </param>
        /// <param name="shaders">
        /// <para>
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the format of the shader binaries contained in binary.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the length of the array whose address is given in binary.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_ES2_compatibility|VERSION_4_1", Version = "4.1", EntryPoint = "glShaderBinary")]
        public static extern unsafe void ShaderBinary(Int32 count, Int32* shaders, OpenTK.Graphics.OpenGL4.BinaryFormat binaryformat, IntPtr binary, Int32 length);

        /// <summary>[requires: v4.1 and ARB_ES2_compatibility|VERSION_4_1]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// <para>
        /// Specifies the number of shader object handles contained in shaders.
        /// </para>
        /// </param>
        /// <param name="shaders">
        /// <para>
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the format of the shader binaries contained in binary.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the length of the array whose address is given in binary.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_ES2_compatibility|VERSION_4_1", Version = "4.1", EntryPoint = "glShaderBinary")]
        public static extern unsafe void ShaderBinary<T3>(Int32 count, Int32* shaders, OpenTK.Graphics.OpenGL4.BinaryFormat binaryformat, [InAttribute, OutAttribute] T3[] binary, Int32 length)
            where T3 : struct
        ;

        /// <summary>[requires: v4.1 and ARB_ES2_compatibility|VERSION_4_1]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// <para>
        /// Specifies the number of shader object handles contained in shaders.
        /// </para>
        /// </param>
        /// <param name="shaders">
        /// <para>
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the format of the shader binaries contained in binary.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the length of the array whose address is given in binary.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_ES2_compatibility|VERSION_4_1", Version = "4.1", EntryPoint = "glShaderBinary")]
        public static extern unsafe void ShaderBinary<T3>(Int32 count, Int32* shaders, OpenTK.Graphics.OpenGL4.BinaryFormat binaryformat, [InAttribute, OutAttribute] T3[,] binary, Int32 length)
            where T3 : struct
        ;

        /// <summary>[requires: v4.1 and ARB_ES2_compatibility|VERSION_4_1]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// <para>
        /// Specifies the number of shader object handles contained in shaders.
        /// </para>
        /// </param>
        /// <param name="shaders">
        /// <para>
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the format of the shader binaries contained in binary.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the length of the array whose address is given in binary.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_ES2_compatibility|VERSION_4_1", Version = "4.1", EntryPoint = "glShaderBinary")]
        public static extern unsafe void ShaderBinary<T3>(Int32 count, Int32* shaders, OpenTK.Graphics.OpenGL4.BinaryFormat binaryformat, [InAttribute, OutAttribute] T3[,,] binary, Int32 length)
            where T3 : struct
        ;

        /// <summary>[requires: v4.1 and ARB_ES2_compatibility|VERSION_4_1]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// <para>
        /// Specifies the number of shader object handles contained in shaders.
        /// </para>
        /// </param>
        /// <param name="shaders">
        /// <para>
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the format of the shader binaries contained in binary.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the length of the array whose address is given in binary.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_ES2_compatibility|VERSION_4_1", Version = "4.1", EntryPoint = "glShaderBinary")]
        public static extern unsafe void ShaderBinary<T3>(Int32 count, Int32* shaders, OpenTK.Graphics.OpenGL4.BinaryFormat binaryformat, [InAttribute, OutAttribute] ref T3 binary, Int32 length)
            where T3 : struct
        ;

        /// <summary>[requires: v4.1 and ARB_ES2_compatibility|VERSION_4_1]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// <para>
        /// Specifies the number of shader object handles contained in shaders.
        /// </para>
        /// </param>
        /// <param name="shaders">
        /// <para>
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the format of the shader binaries contained in binary.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the length of the array whose address is given in binary.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_ES2_compatibility|VERSION_4_1", Version = "4.1", EntryPoint = "glShaderBinary")]
        public static extern void ShaderBinary(Int32 count, UInt32[] shaders, OpenTK.Graphics.OpenGL4.BinaryFormat binaryformat, IntPtr binary, Int32 length);

        /// <summary>[requires: v4.1 and ARB_ES2_compatibility|VERSION_4_1]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// <para>
        /// Specifies the number of shader object handles contained in shaders.
        /// </para>
        /// </param>
        /// <param name="shaders">
        /// <para>
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the format of the shader binaries contained in binary.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the length of the array whose address is given in binary.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_ES2_compatibility|VERSION_4_1", Version = "4.1", EntryPoint = "glShaderBinary")]
        public static extern void ShaderBinary<T3>(Int32 count, UInt32[] shaders, OpenTK.Graphics.OpenGL4.BinaryFormat binaryformat, [InAttribute, OutAttribute] T3[] binary, Int32 length)
            where T3 : struct
        ;

        /// <summary>[requires: v4.1 and ARB_ES2_compatibility|VERSION_4_1]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// <para>
        /// Specifies the number of shader object handles contained in shaders.
        /// </para>
        /// </param>
        /// <param name="shaders">
        /// <para>
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the format of the shader binaries contained in binary.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the length of the array whose address is given in binary.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_ES2_compatibility|VERSION_4_1", Version = "4.1", EntryPoint = "glShaderBinary")]
        public static extern void ShaderBinary<T3>(Int32 count, UInt32[] shaders, OpenTK.Graphics.OpenGL4.BinaryFormat binaryformat, [InAttribute, OutAttribute] T3[,] binary, Int32 length)
            where T3 : struct
        ;

        /// <summary>[requires: v4.1 and ARB_ES2_compatibility|VERSION_4_1]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// <para>
        /// Specifies the number of shader object handles contained in shaders.
        /// </para>
        /// </param>
        /// <param name="shaders">
        /// <para>
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the format of the shader binaries contained in binary.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the length of the array whose address is given in binary.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_ES2_compatibility|VERSION_4_1", Version = "4.1", EntryPoint = "glShaderBinary")]
        public static extern void ShaderBinary<T3>(Int32 count, UInt32[] shaders, OpenTK.Graphics.OpenGL4.BinaryFormat binaryformat, [InAttribute, OutAttribute] T3[,,] binary, Int32 length)
            where T3 : struct
        ;

        /// <summary>[requires: v4.1 and ARB_ES2_compatibility|VERSION_4_1]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// <para>
        /// Specifies the number of shader object handles contained in shaders.
        /// </para>
        /// </param>
        /// <param name="shaders">
        /// <para>
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the format of the shader binaries contained in binary.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the length of the array whose address is given in binary.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_ES2_compatibility|VERSION_4_1", Version = "4.1", EntryPoint = "glShaderBinary")]
        public static extern void ShaderBinary<T3>(Int32 count, UInt32[] shaders, OpenTK.Graphics.OpenGL4.BinaryFormat binaryformat, [InAttribute, OutAttribute] ref T3 binary, Int32 length)
            where T3 : struct
        ;

        /// <summary>[requires: v4.1 and ARB_ES2_compatibility|VERSION_4_1]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// <para>
        /// Specifies the number of shader object handles contained in shaders.
        /// </para>
        /// </param>
        /// <param name="shaders">
        /// <para>
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the format of the shader binaries contained in binary.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the length of the array whose address is given in binary.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_ES2_compatibility|VERSION_4_1", Version = "4.1", EntryPoint = "glShaderBinary")]
        public static extern void ShaderBinary(Int32 count, ref UInt32 shaders, OpenTK.Graphics.OpenGL4.BinaryFormat binaryformat, IntPtr binary, Int32 length);

        /// <summary>[requires: v4.1 and ARB_ES2_compatibility|VERSION_4_1]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// <para>
        /// Specifies the number of shader object handles contained in shaders.
        /// </para>
        /// </param>
        /// <param name="shaders">
        /// <para>
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the format of the shader binaries contained in binary.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the length of the array whose address is given in binary.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_ES2_compatibility|VERSION_4_1", Version = "4.1", EntryPoint = "glShaderBinary")]
        public static extern void ShaderBinary<T3>(Int32 count, ref UInt32 shaders, OpenTK.Graphics.OpenGL4.BinaryFormat binaryformat, [InAttribute, OutAttribute] T3[] binary, Int32 length)
            where T3 : struct
        ;

        /// <summary>[requires: v4.1 and ARB_ES2_compatibility|VERSION_4_1]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// <para>
        /// Specifies the number of shader object handles contained in shaders.
        /// </para>
        /// </param>
        /// <param name="shaders">
        /// <para>
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the format of the shader binaries contained in binary.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the length of the array whose address is given in binary.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_ES2_compatibility|VERSION_4_1", Version = "4.1", EntryPoint = "glShaderBinary")]
        public static extern void ShaderBinary<T3>(Int32 count, ref UInt32 shaders, OpenTK.Graphics.OpenGL4.BinaryFormat binaryformat, [InAttribute, OutAttribute] T3[,] binary, Int32 length)
            where T3 : struct
        ;

        /// <summary>[requires: v4.1 and ARB_ES2_compatibility|VERSION_4_1]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// <para>
        /// Specifies the number of shader object handles contained in shaders.
        /// </para>
        /// </param>
        /// <param name="shaders">
        /// <para>
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the format of the shader binaries contained in binary.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the length of the array whose address is given in binary.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_ES2_compatibility|VERSION_4_1", Version = "4.1", EntryPoint = "glShaderBinary")]
        public static extern void ShaderBinary<T3>(Int32 count, ref UInt32 shaders, OpenTK.Graphics.OpenGL4.BinaryFormat binaryformat, [InAttribute, OutAttribute] T3[,,] binary, Int32 length)
            where T3 : struct
        ;

        /// <summary>[requires: v4.1 and ARB_ES2_compatibility|VERSION_4_1]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// <para>
        /// Specifies the number of shader object handles contained in shaders.
        /// </para>
        /// </param>
        /// <param name="shaders">
        /// <para>
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the format of the shader binaries contained in binary.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the length of the array whose address is given in binary.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_ES2_compatibility|VERSION_4_1", Version = "4.1", EntryPoint = "glShaderBinary")]
        public static extern void ShaderBinary<T3>(Int32 count, ref UInt32 shaders, OpenTK.Graphics.OpenGL4.BinaryFormat binaryformat, [InAttribute, OutAttribute] ref T3 binary, Int32 length)
            where T3 : struct
        ;

        /// <summary>[requires: v4.1 and ARB_ES2_compatibility|VERSION_4_1]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// <para>
        /// Specifies the number of shader object handles contained in shaders.
        /// </para>
        /// </param>
        /// <param name="shaders">
        /// <para>
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the format of the shader binaries contained in binary.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the length of the array whose address is given in binary.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_ES2_compatibility|VERSION_4_1", Version = "4.1", EntryPoint = "glShaderBinary")]
        public static extern unsafe void ShaderBinary(Int32 count, UInt32* shaders, OpenTK.Graphics.OpenGL4.BinaryFormat binaryformat, IntPtr binary, Int32 length);

        /// <summary>[requires: v4.1 and ARB_ES2_compatibility|VERSION_4_1]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// <para>
        /// Specifies the number of shader object handles contained in shaders.
        /// </para>
        /// </param>
        /// <param name="shaders">
        /// <para>
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the format of the shader binaries contained in binary.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the length of the array whose address is given in binary.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_ES2_compatibility|VERSION_4_1", Version = "4.1", EntryPoint = "glShaderBinary")]
        public static extern unsafe void ShaderBinary<T3>(Int32 count, UInt32* shaders, OpenTK.Graphics.OpenGL4.BinaryFormat binaryformat, [InAttribute, OutAttribute] T3[] binary, Int32 length)
            where T3 : struct
        ;

        /// <summary>[requires: v4.1 and ARB_ES2_compatibility|VERSION_4_1]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// <para>
        /// Specifies the number of shader object handles contained in shaders.
        /// </para>
        /// </param>
        /// <param name="shaders">
        /// <para>
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the format of the shader binaries contained in binary.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the length of the array whose address is given in binary.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_ES2_compatibility|VERSION_4_1", Version = "4.1", EntryPoint = "glShaderBinary")]
        public static extern unsafe void ShaderBinary<T3>(Int32 count, UInt32* shaders, OpenTK.Graphics.OpenGL4.BinaryFormat binaryformat, [InAttribute, OutAttribute] T3[,] binary, Int32 length)
            where T3 : struct
        ;

        /// <summary>[requires: v4.1 and ARB_ES2_compatibility|VERSION_4_1]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// <para>
        /// Specifies the number of shader object handles contained in shaders.
        /// </para>
        /// </param>
        /// <param name="shaders">
        /// <para>
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the format of the shader binaries contained in binary.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the length of the array whose address is given in binary.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_ES2_compatibility|VERSION_4_1", Version = "4.1", EntryPoint = "glShaderBinary")]
        public static extern unsafe void ShaderBinary<T3>(Int32 count, UInt32* shaders, OpenTK.Graphics.OpenGL4.BinaryFormat binaryformat, [InAttribute, OutAttribute] T3[,,] binary, Int32 length)
            where T3 : struct
        ;

        /// <summary>[requires: v4.1 and ARB_ES2_compatibility|VERSION_4_1]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// <para>
        /// Specifies the number of shader object handles contained in shaders.
        /// </para>
        /// </param>
        /// <param name="shaders">
        /// <para>
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the format of the shader binaries contained in binary.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the length of the array whose address is given in binary.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_ES2_compatibility|VERSION_4_1", Version = "4.1", EntryPoint = "glShaderBinary")]
        public static extern unsafe void ShaderBinary<T3>(Int32 count, UInt32* shaders, OpenTK.Graphics.OpenGL4.BinaryFormat binaryformat, [InAttribute, OutAttribute] ref T3 binary, Int32 length)
            where T3 : struct
        ;

        /// <summary>[requires: v2.0]
        /// Replaces the source code in a shader object
        /// </summary>
        /// <param name="shader">
        /// <para>
        /// Specifies the handle of the shader object whose source code is to be replaced.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements in the string and length arrays.
        /// </para>
        /// </param>
        /// <param name="string">
        /// <para>
        /// Specifies an array of pointers to strings containing the source code to be loaded into the shader.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies an array of string lengths.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glShaderSource")]
        public static extern void ShaderSource(Int32 shader, Int32 count, String[] @string, Int32[] length);

        /// <summary>[requires: v2.0]
        /// Replaces the source code in a shader object
        /// </summary>
        /// <param name="shader">
        /// <para>
        /// Specifies the handle of the shader object whose source code is to be replaced.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements in the string and length arrays.
        /// </para>
        /// </param>
        /// <param name="string">
        /// <para>
        /// Specifies an array of pointers to strings containing the source code to be loaded into the shader.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies an array of string lengths.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glShaderSource")]
        public static extern void ShaderSource(Int32 shader, Int32 count, String[] @string, ref Int32 length);

        /// <summary>[requires: v2.0]
        /// Replaces the source code in a shader object
        /// </summary>
        /// <param name="shader">
        /// <para>
        /// Specifies the handle of the shader object whose source code is to be replaced.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements in the string and length arrays.
        /// </para>
        /// </param>
        /// <param name="string">
        /// <para>
        /// Specifies an array of pointers to strings containing the source code to be loaded into the shader.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies an array of string lengths.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glShaderSource")]
        public static extern unsafe void ShaderSource(Int32 shader, Int32 count, String[] @string, Int32* length);

        /// <summary>[requires: v2.0]
        /// Replaces the source code in a shader object
        /// </summary>
        /// <param name="shader">
        /// <para>
        /// Specifies the handle of the shader object whose source code is to be replaced.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements in the string and length arrays.
        /// </para>
        /// </param>
        /// <param name="string">
        /// <para>
        /// Specifies an array of pointers to strings containing the source code to be loaded into the shader.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies an array of string lengths.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glShaderSource")]
        public static extern void ShaderSource(UInt32 shader, Int32 count, String[] @string, Int32[] length);

        /// <summary>[requires: v2.0]
        /// Replaces the source code in a shader object
        /// </summary>
        /// <param name="shader">
        /// <para>
        /// Specifies the handle of the shader object whose source code is to be replaced.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements in the string and length arrays.
        /// </para>
        /// </param>
        /// <param name="string">
        /// <para>
        /// Specifies an array of pointers to strings containing the source code to be loaded into the shader.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies an array of string lengths.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glShaderSource")]
        public static extern void ShaderSource(UInt32 shader, Int32 count, String[] @string, ref Int32 length);

        /// <summary>[requires: v2.0]
        /// Replaces the source code in a shader object
        /// </summary>
        /// <param name="shader">
        /// <para>
        /// Specifies the handle of the shader object whose source code is to be replaced.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements in the string and length arrays.
        /// </para>
        /// </param>
        /// <param name="string">
        /// <para>
        /// Specifies an array of pointers to strings containing the source code to be loaded into the shader.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies an array of string lengths.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glShaderSource")]
        public static extern unsafe void ShaderSource(UInt32 shader, Int32 count, String[] @string, Int32* length);

        /// <summary>[requires: v4.3 and ARB_shader_storage_buffer_object|VERSION_4_3]
        /// Change an active shader storage block binding
        /// </summary>
        /// <param name="program">
        /// <para>
        /// The name of the program containing the block whose binding to change.
        /// </para>
        /// </param>
        /// <param name="storageBlockIndex">
        /// <para>
        /// The index storage block within the program.
        /// </para>
        /// </param>
        /// <param name="storageBlockBinding">
        /// <para>
        /// The index storage block binding to associate with the specified storage block.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_shader_storage_buffer_object|VERSION_4_3", Version = "4.3", EntryPoint = "glShaderStorageBlockBinding")]
        public static extern void ShaderStorageBlockBinding(Int32 program, Int32 storageBlockIndex, Int32 storageBlockBinding);

        /// <summary>[requires: v4.3 and ARB_shader_storage_buffer_object|VERSION_4_3]
        /// Change an active shader storage block binding
        /// </summary>
        /// <param name="program">
        /// <para>
        /// The name of the program containing the block whose binding to change.
        /// </para>
        /// </param>
        /// <param name="storageBlockIndex">
        /// <para>
        /// The index storage block within the program.
        /// </para>
        /// </param>
        /// <param name="storageBlockBinding">
        /// <para>
        /// The index storage block binding to associate with the specified storage block.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_shader_storage_buffer_object|VERSION_4_3", Version = "4.3", EntryPoint = "glShaderStorageBlockBinding")]
        public static extern void ShaderStorageBlockBinding(UInt32 program, UInt32 storageBlockIndex, UInt32 storageBlockBinding);

        /// <summary>[requires: v1.0]
        /// Set front and back function and reference value for stencil testing
        /// </summary>
        /// <param name="func">
        /// <para>
        /// Specifies the test function. Eight symbolic constants are valid: GL_NEVER, GL_LESS, GL_LEQUAL, GL_GREATER, GL_GEQUAL, GL_EQUAL, GL_NOTEQUAL, and GL_ALWAYS. The initial value is GL_ALWAYS.
        /// </para>
        /// </param>
        /// <param name="ref">
        /// <para>
        /// Specifies the reference value for the stencil test. ref is clamped to the range [0, 2 sup n - 1], where is the number of bitplanes in the stencil buffer. The initial value is 0.
        /// </para>
        /// </param>
        /// <param name="mask">
        /// <para>
        /// Specifies a mask that is ANDed with both the reference value and the stored stencil value when the test is done. The initial value is all 1's.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glStencilFunc")]
        public static extern void StencilFunc(OpenTK.Graphics.OpenGL4.StencilFunction func, Int32 @ref, Int32 mask);

        /// <summary>[requires: v1.0]
        /// Set front and back function and reference value for stencil testing
        /// </summary>
        /// <param name="func">
        /// <para>
        /// Specifies the test function. Eight symbolic constants are valid: GL_NEVER, GL_LESS, GL_LEQUAL, GL_GREATER, GL_GEQUAL, GL_EQUAL, GL_NOTEQUAL, and GL_ALWAYS. The initial value is GL_ALWAYS.
        /// </para>
        /// </param>
        /// <param name="ref">
        /// <para>
        /// Specifies the reference value for the stencil test. ref is clamped to the range [0, 2 sup n - 1], where is the number of bitplanes in the stencil buffer. The initial value is 0.
        /// </para>
        /// </param>
        /// <param name="mask">
        /// <para>
        /// Specifies a mask that is ANDed with both the reference value and the stored stencil value when the test is done. The initial value is all 1's.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glStencilFunc")]
        public static extern void StencilFunc(OpenTK.Graphics.OpenGL4.StencilFunction func, Int32 @ref, UInt32 mask);

        /// <summary>[requires: v2.0]
        /// Set front and/or back function and reference value for stencil testing
        /// </summary>
        /// <param name="face">
        /// <para>
        /// Specifies whether front and/or back stencil state is updated. Three symbolic constants are valid: GL_FRONT, GL_BACK, and GL_FRONT_AND_BACK.
        /// </para>
        /// </param>
        /// <param name="func">
        /// <para>
        /// Specifies the test function. Eight symbolic constants are valid: GL_NEVER, GL_LESS, GL_LEQUAL, GL_GREATER, GL_GEQUAL, GL_EQUAL, GL_NOTEQUAL, and GL_ALWAYS. The initial value is GL_ALWAYS.
        /// </para>
        /// </param>
        /// <param name="ref">
        /// <para>
        /// Specifies the reference value for the stencil test. ref is clamped to the range [0, 2 sup n - 1], where is the number of bitplanes in the stencil buffer. The initial value is 0.
        /// </para>
        /// </param>
        /// <param name="mask">
        /// <para>
        /// Specifies a mask that is ANDed with both the reference value and the stored stencil value when the test is done. The initial value is all 1's.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glStencilFuncSeparate")]
        public static extern void StencilFuncSeparate(OpenTK.Graphics.OpenGL4.StencilFace face, OpenTK.Graphics.OpenGL4.StencilFunction func, Int32 @ref, Int32 mask);

        /// <summary>[requires: v2.0]
        /// Set front and/or back function and reference value for stencil testing
        /// </summary>
        /// <param name="face">
        /// <para>
        /// Specifies whether front and/or back stencil state is updated. Three symbolic constants are valid: GL_FRONT, GL_BACK, and GL_FRONT_AND_BACK.
        /// </para>
        /// </param>
        /// <param name="func">
        /// <para>
        /// Specifies the test function. Eight symbolic constants are valid: GL_NEVER, GL_LESS, GL_LEQUAL, GL_GREATER, GL_GEQUAL, GL_EQUAL, GL_NOTEQUAL, and GL_ALWAYS. The initial value is GL_ALWAYS.
        /// </para>
        /// </param>
        /// <param name="ref">
        /// <para>
        /// Specifies the reference value for the stencil test. ref is clamped to the range [0, 2 sup n - 1], where is the number of bitplanes in the stencil buffer. The initial value is 0.
        /// </para>
        /// </param>
        /// <param name="mask">
        /// <para>
        /// Specifies a mask that is ANDed with both the reference value and the stored stencil value when the test is done. The initial value is all 1's.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glStencilFuncSeparate")]
        public static extern void StencilFuncSeparate(OpenTK.Graphics.OpenGL4.StencilFace face, OpenTK.Graphics.OpenGL4.StencilFunction func, Int32 @ref, UInt32 mask);

        /// <summary>[requires: v1.0]
        /// Control the front and back writing of individual bits in the stencil planes
        /// </summary>
        /// <param name="mask">
        /// <para>
        /// Specifies a bit mask to enable and disable writing of individual bits in the stencil planes. Initially, the mask is all 1's.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glStencilMask")]
        public static extern void StencilMask(Int32 mask);

        /// <summary>[requires: v1.0]
        /// Control the front and back writing of individual bits in the stencil planes
        /// </summary>
        /// <param name="mask">
        /// <para>
        /// Specifies a bit mask to enable and disable writing of individual bits in the stencil planes. Initially, the mask is all 1's.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glStencilMask")]
        public static extern void StencilMask(UInt32 mask);

        /// <summary>[requires: v2.0]
        /// Control the front and/or back writing of individual bits in the stencil planes
        /// </summary>
        /// <param name="face">
        /// <para>
        /// Specifies whether the front and/or back stencil writemask is updated. Three symbolic constants are valid: GL_FRONT, GL_BACK, and GL_FRONT_AND_BACK.
        /// </para>
        /// </param>
        /// <param name="mask">
        /// <para>
        /// Specifies a bit mask to enable and disable writing of individual bits in the stencil planes. Initially, the mask is all 1's.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glStencilMaskSeparate")]
        public static extern void StencilMaskSeparate(OpenTK.Graphics.OpenGL4.StencilFace face, Int32 mask);

        /// <summary>[requires: v2.0]
        /// Control the front and/or back writing of individual bits in the stencil planes
        /// </summary>
        /// <param name="face">
        /// <para>
        /// Specifies whether the front and/or back stencil writemask is updated. Three symbolic constants are valid: GL_FRONT, GL_BACK, and GL_FRONT_AND_BACK.
        /// </para>
        /// </param>
        /// <param name="mask">
        /// <para>
        /// Specifies a bit mask to enable and disable writing of individual bits in the stencil planes. Initially, the mask is all 1's.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glStencilMaskSeparate")]
        public static extern void StencilMaskSeparate(OpenTK.Graphics.OpenGL4.StencilFace face, UInt32 mask);

        /// <summary>[requires: v1.0]
        /// Set front and back stencil test actions
        /// </summary>
        /// <param name="sfail">
        /// <para>
        /// Specifies the action to take when the stencil test fails. Eight symbolic constants are accepted: GL_KEEP, GL_ZERO, GL_REPLACE, GL_INCR, GL_INCR_WRAP, GL_DECR, GL_DECR_WRAP, and GL_INVERT. The initial value is GL_KEEP.
        /// </para>
        /// </param>
        /// <param name="dpfail">
        /// <para>
        /// Specifies the stencil action when the stencil test passes, but the depth test fails. dpfail accepts the same symbolic constants as sfail. The initial value is GL_KEEP.
        /// </para>
        /// </param>
        /// <param name="dppass">
        /// <para>
        /// Specifies the stencil action when both the stencil test and the depth test pass, or when the stencil test passes and either there is no depth buffer or depth testing is not enabled. dppass accepts the same symbolic constants as sfail. The initial value is GL_KEEP.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glStencilOp")]
        public static extern void StencilOp(OpenTK.Graphics.OpenGL4.StencilOp fail, OpenTK.Graphics.OpenGL4.StencilOp zfail, OpenTK.Graphics.OpenGL4.StencilOp zpass);

        /// <summary>[requires: v2.0]
        /// Set front and/or back stencil test actions
        /// </summary>
        /// <param name="face">
        /// <para>
        /// Specifies whether front and/or back stencil state is updated. Three symbolic constants are valid: GL_FRONT, GL_BACK, and GL_FRONT_AND_BACK.
        /// </para>
        /// </param>
        /// <param name="sfail">
        /// <para>
        /// Specifies the action to take when the stencil test fails. Eight symbolic constants are accepted: GL_KEEP, GL_ZERO, GL_REPLACE, GL_INCR, GL_INCR_WRAP, GL_DECR, GL_DECR_WRAP, and GL_INVERT. The initial value is GL_KEEP.
        /// </para>
        /// </param>
        /// <param name="dpfail">
        /// <para>
        /// Specifies the stencil action when the stencil test passes, but the depth test fails. dpfail accepts the same symbolic constants as sfail. The initial value is GL_KEEP.
        /// </para>
        /// </param>
        /// <param name="dppass">
        /// <para>
        /// Specifies the stencil action when both the stencil test and the depth test pass, or when the stencil test passes and either there is no depth buffer or depth testing is not enabled. dppass accepts the same symbolic constants as sfail. The initial value is GL_KEEP.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glStencilOpSeparate")]
        public static extern void StencilOpSeparate(OpenTK.Graphics.OpenGL4.StencilFace face, OpenTK.Graphics.OpenGL4.StencilOp sfail, OpenTK.Graphics.OpenGL4.StencilOp dpfail, OpenTK.Graphics.OpenGL4.StencilOp dppass);

        /// <summary>[requires: v3.1]
        /// Attach the storage for a buffer object to the active buffer texture
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target of the operation and must be GL_TEXTURE_BUFFER.
        /// </para>
        /// </param>
        /// <param name="internalFormat">
        /// <para>
        /// Specifies the internal format of the data in the store belonging to buffer.
        /// </para>
        /// </param>
        /// <param name="buffer">
        /// <para>
        /// Specifies the name of the buffer object whose storage to attach to the active buffer texture.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_3_1", Version = "3.1", EntryPoint = "glTexBuffer")]
        public static extern void TexBuffer(OpenTK.Graphics.OpenGL4.TextureBufferTarget target, OpenTK.Graphics.OpenGL4.SizedInternalFormat internalformat, Int32 buffer);

        /// <summary>[requires: v3.1]
        /// Attach the storage for a buffer object to the active buffer texture
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target of the operation and must be GL_TEXTURE_BUFFER.
        /// </para>
        /// </param>
        /// <param name="internalFormat">
        /// <para>
        /// Specifies the internal format of the data in the store belonging to buffer.
        /// </para>
        /// </param>
        /// <param name="buffer">
        /// <para>
        /// Specifies the name of the buffer object whose storage to attach to the active buffer texture.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_1", Version = "3.1", EntryPoint = "glTexBuffer")]
        public static extern void TexBuffer(OpenTK.Graphics.OpenGL4.TextureBufferTarget target, OpenTK.Graphics.OpenGL4.SizedInternalFormat internalformat, UInt32 buffer);

        /// <summary>[requires: v4.3 and ARB_texture_buffer_range|VERSION_4_3]
        /// Bind a range of a buffer's data store to a buffer texture
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target of the operation and must be GL_TEXTURE_BUFFER.
        /// </para>
        /// </param>
        /// <param name="internalFormat">
        /// <para>
        /// Specifies the internal format of the data in the store belonging to buffer.
        /// </para>
        /// </param>
        /// <param name="buffer">
        /// <para>
        /// Specifies the name of the buffer object whose storage to attach to the active buffer texture.
        /// </para>
        /// </param>
        /// <param name="offset">
        /// <para>
        /// Specifies the offset of the start of the range of the buffer's data store to attach.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Specifies the size of the range of the buffer's data store to attach.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_texture_buffer_range|VERSION_4_3", Version = "4.3", EntryPoint = "glTexBufferRange")]
        public static extern void TexBufferRange(OpenTK.Graphics.OpenGL4.TextureBufferTarget target, OpenTK.Graphics.OpenGL4.SizedInternalFormat internalformat, Int32 buffer, IntPtr offset, IntPtr size);

        /// <summary>[requires: v4.3 and ARB_texture_buffer_range|VERSION_4_3]
        /// Bind a range of a buffer's data store to a buffer texture
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target of the operation and must be GL_TEXTURE_BUFFER.
        /// </para>
        /// </param>
        /// <param name="internalFormat">
        /// <para>
        /// Specifies the internal format of the data in the store belonging to buffer.
        /// </para>
        /// </param>
        /// <param name="buffer">
        /// <para>
        /// Specifies the name of the buffer object whose storage to attach to the active buffer texture.
        /// </para>
        /// </param>
        /// <param name="offset">
        /// <para>
        /// Specifies the offset of the start of the range of the buffer's data store to attach.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Specifies the size of the range of the buffer's data store to attach.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_texture_buffer_range|VERSION_4_3", Version = "4.3", EntryPoint = "glTexBufferRange")]
        public static extern void TexBufferRange(OpenTK.Graphics.OpenGL4.TextureBufferTarget target, OpenTK.Graphics.OpenGL4.SizedInternalFormat internalformat, UInt32 buffer, IntPtr offset, IntPtr size);

        /// <summary>[requires: v3.3 and ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glTexCoordP1ui")]
        public static extern void TexCoordP1(OpenTK.Graphics.OpenGL4.PackedPointerType type, Int32 coords);

        /// <summary>[requires: v3.3 and ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glTexCoordP1ui")]
        public static extern void TexCoordP1(OpenTK.Graphics.OpenGL4.PackedPointerType type, UInt32 coords);

        /// <summary>[requires: v3.3 and ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glTexCoordP1uiv")]
        public static extern unsafe void TexCoordP1(OpenTK.Graphics.OpenGL4.PackedPointerType type, Int32* coords);

        /// <summary>[requires: v3.3 and ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glTexCoordP1uiv")]
        public static extern unsafe void TexCoordP1(OpenTK.Graphics.OpenGL4.PackedPointerType type, UInt32* coords);

        /// <summary>[requires: v3.3 and ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glTexCoordP2ui")]
        public static extern void TexCoordP2(OpenTK.Graphics.OpenGL4.PackedPointerType type, Int32 coords);

        /// <summary>[requires: v3.3 and ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glTexCoordP2ui")]
        public static extern void TexCoordP2(OpenTK.Graphics.OpenGL4.PackedPointerType type, UInt32 coords);

        /// <summary>[requires: v3.3 and ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glTexCoordP2uiv")]
        public static extern unsafe void TexCoordP2(OpenTK.Graphics.OpenGL4.PackedPointerType type, Int32* coords);

        /// <summary>[requires: v3.3 and ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glTexCoordP2uiv")]
        public static extern unsafe void TexCoordP2(OpenTK.Graphics.OpenGL4.PackedPointerType type, UInt32* coords);

        /// <summary>[requires: v3.3 and ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glTexCoordP3ui")]
        public static extern void TexCoordP3(OpenTK.Graphics.OpenGL4.PackedPointerType type, Int32 coords);

        /// <summary>[requires: v3.3 and ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glTexCoordP3ui")]
        public static extern void TexCoordP3(OpenTK.Graphics.OpenGL4.PackedPointerType type, UInt32 coords);

        /// <summary>[requires: v3.3 and ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glTexCoordP3uiv")]
        public static extern unsafe void TexCoordP3(OpenTK.Graphics.OpenGL4.PackedPointerType type, Int32* coords);

        /// <summary>[requires: v3.3 and ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glTexCoordP3uiv")]
        public static extern unsafe void TexCoordP3(OpenTK.Graphics.OpenGL4.PackedPointerType type, UInt32* coords);

        /// <summary>[requires: v3.3 and ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glTexCoordP4ui")]
        public static extern void TexCoordP4(OpenTK.Graphics.OpenGL4.PackedPointerType type, Int32 coords);

        /// <summary>[requires: v3.3 and ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glTexCoordP4ui")]
        public static extern void TexCoordP4(OpenTK.Graphics.OpenGL4.PackedPointerType type, UInt32 coords);

        /// <summary>[requires: v3.3 and ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glTexCoordP4uiv")]
        public static extern unsafe void TexCoordP4(OpenTK.Graphics.OpenGL4.PackedPointerType type, Int32* coords);

        /// <summary>[requires: v3.3 and ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glTexCoordP4uiv")]
        public static extern unsafe void TexCoordP4(OpenTK.Graphics.OpenGL4.PackedPointerType type, UInt32* coords);

        /// <summary>[requires: v1.0]
        /// Specify a one-dimensional texture image
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_1D or GL_PROXY_TEXTURE_1D.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="internalFormat">
        /// <para>
        /// Specifies the number of color components in the texture. Must be one of base internal formats given in Table 1, one of the sized internal formats given in Table 2, or one of the compressed internal formats given in Table 3, below.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture image. All implementations support texture images that are at least 1024 texels wide. The height of the 1D texture image is 1.
        /// </para>
        /// </param>
        /// <param name="border">
        /// <para>
        /// This value must be 0.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the pixel data. The following symbolic values are accepted: GL_RED, GL_RG, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_RED_INTEGER, GL_RG_INTEGER, GL_RGB_INTEGER, GL_BGR_INTEGER, GL_RGBA_INTEGER, GL_BGRA_INTEGER, GL_STENCIL_INDEX, GL_DEPTH_COMPONENT, GL_DEPTH_STENCIL.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexImage1D")]
        public static extern void TexImage1D(OpenTK.Graphics.OpenGL4.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, Int32 width, Int32 border, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, IntPtr pixels);

        /// <summary>[requires: v1.0]
        /// Specify a one-dimensional texture image
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_1D or GL_PROXY_TEXTURE_1D.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="internalFormat">
        /// <para>
        /// Specifies the number of color components in the texture. Must be one of base internal formats given in Table 1, one of the sized internal formats given in Table 2, or one of the compressed internal formats given in Table 3, below.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture image. All implementations support texture images that are at least 1024 texels wide. The height of the 1D texture image is 1.
        /// </para>
        /// </param>
        /// <param name="border">
        /// <para>
        /// This value must be 0.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the pixel data. The following symbolic values are accepted: GL_RED, GL_RG, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_RED_INTEGER, GL_RG_INTEGER, GL_RGB_INTEGER, GL_BGR_INTEGER, GL_RGBA_INTEGER, GL_BGRA_INTEGER, GL_STENCIL_INDEX, GL_DEPTH_COMPONENT, GL_DEPTH_STENCIL.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexImage1D")]
        public static extern void TexImage1D<T7>(OpenTK.Graphics.OpenGL4.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, Int32 width, Int32 border, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute] T7[] pixels)
            where T7 : struct
        ;

        /// <summary>[requires: v1.0]
        /// Specify a one-dimensional texture image
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_1D or GL_PROXY_TEXTURE_1D.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="internalFormat">
        /// <para>
        /// Specifies the number of color components in the texture. Must be one of base internal formats given in Table 1, one of the sized internal formats given in Table 2, or one of the compressed internal formats given in Table 3, below.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture image. All implementations support texture images that are at least 1024 texels wide. The height of the 1D texture image is 1.
        /// </para>
        /// </param>
        /// <param name="border">
        /// <para>
        /// This value must be 0.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the pixel data. The following symbolic values are accepted: GL_RED, GL_RG, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_RED_INTEGER, GL_RG_INTEGER, GL_RGB_INTEGER, GL_BGR_INTEGER, GL_RGBA_INTEGER, GL_BGRA_INTEGER, GL_STENCIL_INDEX, GL_DEPTH_COMPONENT, GL_DEPTH_STENCIL.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexImage1D")]
        public static extern void TexImage1D<T7>(OpenTK.Graphics.OpenGL4.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, Int32 width, Int32 border, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute] T7[,] pixels)
            where T7 : struct
        ;

        /// <summary>[requires: v1.0]
        /// Specify a one-dimensional texture image
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_1D or GL_PROXY_TEXTURE_1D.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="internalFormat">
        /// <para>
        /// Specifies the number of color components in the texture. Must be one of base internal formats given in Table 1, one of the sized internal formats given in Table 2, or one of the compressed internal formats given in Table 3, below.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture image. All implementations support texture images that are at least 1024 texels wide. The height of the 1D texture image is 1.
        /// </para>
        /// </param>
        /// <param name="border">
        /// <para>
        /// This value must be 0.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the pixel data. The following symbolic values are accepted: GL_RED, GL_RG, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_RED_INTEGER, GL_RG_INTEGER, GL_RGB_INTEGER, GL_BGR_INTEGER, GL_RGBA_INTEGER, GL_BGRA_INTEGER, GL_STENCIL_INDEX, GL_DEPTH_COMPONENT, GL_DEPTH_STENCIL.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexImage1D")]
        public static extern void TexImage1D<T7>(OpenTK.Graphics.OpenGL4.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, Int32 width, Int32 border, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute] T7[,,] pixels)
            where T7 : struct
        ;

        /// <summary>[requires: v1.0]
        /// Specify a one-dimensional texture image
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_1D or GL_PROXY_TEXTURE_1D.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="internalFormat">
        /// <para>
        /// Specifies the number of color components in the texture. Must be one of base internal formats given in Table 1, one of the sized internal formats given in Table 2, or one of the compressed internal formats given in Table 3, below.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture image. All implementations support texture images that are at least 1024 texels wide. The height of the 1D texture image is 1.
        /// </para>
        /// </param>
        /// <param name="border">
        /// <para>
        /// This value must be 0.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the pixel data. The following symbolic values are accepted: GL_RED, GL_RG, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_RED_INTEGER, GL_RG_INTEGER, GL_RGB_INTEGER, GL_BGR_INTEGER, GL_RGBA_INTEGER, GL_BGRA_INTEGER, GL_STENCIL_INDEX, GL_DEPTH_COMPONENT, GL_DEPTH_STENCIL.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexImage1D")]
        public static extern void TexImage1D<T7>(OpenTK.Graphics.OpenGL4.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, Int32 width, Int32 border, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute] ref T7 pixels)
            where T7 : struct
        ;

        /// <summary>[requires: v1.0]
        /// Specify a two-dimensional texture image
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_2D, GL_PROXY_TEXTURE_2D, GL_TEXTURE_1D_ARRAY, GL_PROXY_TEXTURE_1D_ARRAY, GL_TEXTURE_RECTANGLE, GL_PROXY_TEXTURE_RECTANGLE, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, GL_TEXTURE_CUBE_MAP_NEGATIVE_Z, or GL_PROXY_TEXTURE_CUBE_MAP.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image. If target is GL_TEXTURE_RECTANGLE or GL_PROXY_TEXTURE_RECTANGLE, level must be 0.
        /// </para>
        /// </param>
        /// <param name="internalFormat">
        /// <para>
        /// Specifies the number of color components in the texture. Must be one of base internal formats given in Table 1, one of the sized internal formats given in Table 2, or one of the compressed internal formats given in Table 3, below.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture image. All implementations support texture images that are at least 1024 texels wide.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture image, or the number of layers in a texture array, in the case of the GL_TEXTURE_1D_ARRAY and GL_PROXY_TEXTURE_1D_ARRAY targets. All implementations support 2D texture images that are at least 1024 texels high, and texture arrays that are at least 256 layers deep.
        /// </para>
        /// </param>
        /// <param name="border">
        /// <para>
        /// This value must be 0.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the pixel data. The following symbolic values are accepted: GL_RED, GL_RG, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_RED_INTEGER, GL_RG_INTEGER, GL_RGB_INTEGER, GL_BGR_INTEGER, GL_RGBA_INTEGER, GL_BGRA_INTEGER, GL_STENCIL_INDEX, GL_DEPTH_COMPONENT, GL_DEPTH_STENCIL.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexImage2D")]
        public static extern void TexImage2D(OpenTK.Graphics.OpenGL4.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 border, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, IntPtr pixels);

        /// <summary>[requires: v1.0]
        /// Specify a two-dimensional texture image
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_2D, GL_PROXY_TEXTURE_2D, GL_TEXTURE_1D_ARRAY, GL_PROXY_TEXTURE_1D_ARRAY, GL_TEXTURE_RECTANGLE, GL_PROXY_TEXTURE_RECTANGLE, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, GL_TEXTURE_CUBE_MAP_NEGATIVE_Z, or GL_PROXY_TEXTURE_CUBE_MAP.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image. If target is GL_TEXTURE_RECTANGLE or GL_PROXY_TEXTURE_RECTANGLE, level must be 0.
        /// </para>
        /// </param>
        /// <param name="internalFormat">
        /// <para>
        /// Specifies the number of color components in the texture. Must be one of base internal formats given in Table 1, one of the sized internal formats given in Table 2, or one of the compressed internal formats given in Table 3, below.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture image. All implementations support texture images that are at least 1024 texels wide.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture image, or the number of layers in a texture array, in the case of the GL_TEXTURE_1D_ARRAY and GL_PROXY_TEXTURE_1D_ARRAY targets. All implementations support 2D texture images that are at least 1024 texels high, and texture arrays that are at least 256 layers deep.
        /// </para>
        /// </param>
        /// <param name="border">
        /// <para>
        /// This value must be 0.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the pixel data. The following symbolic values are accepted: GL_RED, GL_RG, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_RED_INTEGER, GL_RG_INTEGER, GL_RGB_INTEGER, GL_BGR_INTEGER, GL_RGBA_INTEGER, GL_BGRA_INTEGER, GL_STENCIL_INDEX, GL_DEPTH_COMPONENT, GL_DEPTH_STENCIL.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexImage2D")]
        public static extern void TexImage2D<T8>(OpenTK.Graphics.OpenGL4.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 border, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute] T8[] pixels)
            where T8 : struct
        ;

        /// <summary>[requires: v1.0]
        /// Specify a two-dimensional texture image
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_2D, GL_PROXY_TEXTURE_2D, GL_TEXTURE_1D_ARRAY, GL_PROXY_TEXTURE_1D_ARRAY, GL_TEXTURE_RECTANGLE, GL_PROXY_TEXTURE_RECTANGLE, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, GL_TEXTURE_CUBE_MAP_NEGATIVE_Z, or GL_PROXY_TEXTURE_CUBE_MAP.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image. If target is GL_TEXTURE_RECTANGLE or GL_PROXY_TEXTURE_RECTANGLE, level must be 0.
        /// </para>
        /// </param>
        /// <param name="internalFormat">
        /// <para>
        /// Specifies the number of color components in the texture. Must be one of base internal formats given in Table 1, one of the sized internal formats given in Table 2, or one of the compressed internal formats given in Table 3, below.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture image. All implementations support texture images that are at least 1024 texels wide.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture image, or the number of layers in a texture array, in the case of the GL_TEXTURE_1D_ARRAY and GL_PROXY_TEXTURE_1D_ARRAY targets. All implementations support 2D texture images that are at least 1024 texels high, and texture arrays that are at least 256 layers deep.
        /// </para>
        /// </param>
        /// <param name="border">
        /// <para>
        /// This value must be 0.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the pixel data. The following symbolic values are accepted: GL_RED, GL_RG, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_RED_INTEGER, GL_RG_INTEGER, GL_RGB_INTEGER, GL_BGR_INTEGER, GL_RGBA_INTEGER, GL_BGRA_INTEGER, GL_STENCIL_INDEX, GL_DEPTH_COMPONENT, GL_DEPTH_STENCIL.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexImage2D")]
        public static extern void TexImage2D<T8>(OpenTK.Graphics.OpenGL4.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 border, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute] T8[,] pixels)
            where T8 : struct
        ;

        /// <summary>[requires: v1.0]
        /// Specify a two-dimensional texture image
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_2D, GL_PROXY_TEXTURE_2D, GL_TEXTURE_1D_ARRAY, GL_PROXY_TEXTURE_1D_ARRAY, GL_TEXTURE_RECTANGLE, GL_PROXY_TEXTURE_RECTANGLE, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, GL_TEXTURE_CUBE_MAP_NEGATIVE_Z, or GL_PROXY_TEXTURE_CUBE_MAP.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image. If target is GL_TEXTURE_RECTANGLE or GL_PROXY_TEXTURE_RECTANGLE, level must be 0.
        /// </para>
        /// </param>
        /// <param name="internalFormat">
        /// <para>
        /// Specifies the number of color components in the texture. Must be one of base internal formats given in Table 1, one of the sized internal formats given in Table 2, or one of the compressed internal formats given in Table 3, below.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture image. All implementations support texture images that are at least 1024 texels wide.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture image, or the number of layers in a texture array, in the case of the GL_TEXTURE_1D_ARRAY and GL_PROXY_TEXTURE_1D_ARRAY targets. All implementations support 2D texture images that are at least 1024 texels high, and texture arrays that are at least 256 layers deep.
        /// </para>
        /// </param>
        /// <param name="border">
        /// <para>
        /// This value must be 0.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the pixel data. The following symbolic values are accepted: GL_RED, GL_RG, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_RED_INTEGER, GL_RG_INTEGER, GL_RGB_INTEGER, GL_BGR_INTEGER, GL_RGBA_INTEGER, GL_BGRA_INTEGER, GL_STENCIL_INDEX, GL_DEPTH_COMPONENT, GL_DEPTH_STENCIL.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexImage2D")]
        public static extern void TexImage2D<T8>(OpenTK.Graphics.OpenGL4.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 border, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute] T8[,,] pixels)
            where T8 : struct
        ;

        /// <summary>[requires: v1.0]
        /// Specify a two-dimensional texture image
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_2D, GL_PROXY_TEXTURE_2D, GL_TEXTURE_1D_ARRAY, GL_PROXY_TEXTURE_1D_ARRAY, GL_TEXTURE_RECTANGLE, GL_PROXY_TEXTURE_RECTANGLE, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, GL_TEXTURE_CUBE_MAP_NEGATIVE_Z, or GL_PROXY_TEXTURE_CUBE_MAP.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image. If target is GL_TEXTURE_RECTANGLE or GL_PROXY_TEXTURE_RECTANGLE, level must be 0.
        /// </para>
        /// </param>
        /// <param name="internalFormat">
        /// <para>
        /// Specifies the number of color components in the texture. Must be one of base internal formats given in Table 1, one of the sized internal formats given in Table 2, or one of the compressed internal formats given in Table 3, below.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture image. All implementations support texture images that are at least 1024 texels wide.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture image, or the number of layers in a texture array, in the case of the GL_TEXTURE_1D_ARRAY and GL_PROXY_TEXTURE_1D_ARRAY targets. All implementations support 2D texture images that are at least 1024 texels high, and texture arrays that are at least 256 layers deep.
        /// </para>
        /// </param>
        /// <param name="border">
        /// <para>
        /// This value must be 0.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the pixel data. The following symbolic values are accepted: GL_RED, GL_RG, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_RED_INTEGER, GL_RG_INTEGER, GL_RGB_INTEGER, GL_BGR_INTEGER, GL_RGBA_INTEGER, GL_BGRA_INTEGER, GL_STENCIL_INDEX, GL_DEPTH_COMPONENT, GL_DEPTH_STENCIL.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexImage2D")]
        public static extern void TexImage2D<T8>(OpenTK.Graphics.OpenGL4.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 border, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute] ref T8 pixels)
            where T8 : struct
        ;

        /// <summary>[requires: v3.2 and ARB_texture_multisample|VERSION_3_2]
        /// Establish the data storage, format, dimensions, and number of samples of a multisample texture's image
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target of the operation. target must be GL_TEXTURE_2D_MULTISAMPLE or GL_PROXY_TEXTURE_2D_MULTISAMPLE.
        /// </para>
        /// </param>
        /// <param name="samples">
        /// <para>
        /// The number of samples in the multisample texture's image.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// The internal format to be used to store the multisample texture's image. internalformat must specify a color-renderable, depth-renderable, or stencil-renderable format.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// The width of the multisample texture's image, in texels.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// The height of the multisample texture's image, in texels.
        /// </para>
        /// </param>
        /// <param name="fixedsamplelocations">
        /// <para>
        /// Specifies whether the image will use identical sample locations and the same number of samples for all texels in the image, and the sample locations will not depend on the internal format or size of the image.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_texture_multisample|VERSION_3_2", Version = "3.2", EntryPoint = "glTexImage2DMultisample")]
        public static extern void TexImage2DMultisample(OpenTK.Graphics.OpenGL4.TextureTargetMultisample target, Int32 samples, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, Int32 width, Int32 height, bool fixedsamplelocations);

        /// <summary>[requires: v1.2]
        /// Specify a three-dimensional texture image
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be one of GL_TEXTURE_3D, GL_PROXY_TEXTURE_3D, GL_TEXTURE_2D_ARRAY or GL_PROXY_TEXTURE_2D_ARRAY.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level is the n sup th mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="internalFormat">
        /// <para>
        /// Specifies the number of color components in the texture. Must be one of base internal formats given in Table 1, one of the sized internal formats given in Table 2, or one of the compressed internal formats given in Table 3, below.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture image. All implementations support 3D texture images that are at least 16 texels wide.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture image. All implementations support 3D texture images that are at least 256 texels high.
        /// </para>
        /// </param>
        /// <param name="depth">
        /// <para>
        /// Specifies the depth of the texture image, or the number of layers in a texture array. All implementations support 3D texture images that are at least 256 texels deep, and texture arrays that are at least 256 layers deep.
        /// </para>
        /// </param>
        /// <param name="border">
        /// <para>
        /// This value must be 0.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the pixel data. The following symbolic values are accepted: GL_RED, GL_RG, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_RED_INTEGER, GL_RG_INTEGER, GL_RGB_INTEGER, GL_BGR_INTEGER, GL_RGBA_INTEGER, GL_BGRA_INTEGER, GL_STENCIL_INDEX, GL_DEPTH_COMPONENT, GL_DEPTH_STENCIL.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_2", Version = "1.2", EntryPoint = "glTexImage3D")]
        public static extern void TexImage3D(OpenTK.Graphics.OpenGL4.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, IntPtr pixels);

        /// <summary>[requires: v1.2]
        /// Specify a three-dimensional texture image
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be one of GL_TEXTURE_3D, GL_PROXY_TEXTURE_3D, GL_TEXTURE_2D_ARRAY or GL_PROXY_TEXTURE_2D_ARRAY.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level is the n sup th mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="internalFormat">
        /// <para>
        /// Specifies the number of color components in the texture. Must be one of base internal formats given in Table 1, one of the sized internal formats given in Table 2, or one of the compressed internal formats given in Table 3, below.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture image. All implementations support 3D texture images that are at least 16 texels wide.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture image. All implementations support 3D texture images that are at least 256 texels high.
        /// </para>
        /// </param>
        /// <param name="depth">
        /// <para>
        /// Specifies the depth of the texture image, or the number of layers in a texture array. All implementations support 3D texture images that are at least 256 texels deep, and texture arrays that are at least 256 layers deep.
        /// </para>
        /// </param>
        /// <param name="border">
        /// <para>
        /// This value must be 0.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the pixel data. The following symbolic values are accepted: GL_RED, GL_RG, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_RED_INTEGER, GL_RG_INTEGER, GL_RGB_INTEGER, GL_BGR_INTEGER, GL_RGBA_INTEGER, GL_BGRA_INTEGER, GL_STENCIL_INDEX, GL_DEPTH_COMPONENT, GL_DEPTH_STENCIL.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_2", Version = "1.2", EntryPoint = "glTexImage3D")]
        public static extern void TexImage3D<T9>(OpenTK.Graphics.OpenGL4.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute] T9[] pixels)
            where T9 : struct
        ;

        /// <summary>[requires: v1.2]
        /// Specify a three-dimensional texture image
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be one of GL_TEXTURE_3D, GL_PROXY_TEXTURE_3D, GL_TEXTURE_2D_ARRAY or GL_PROXY_TEXTURE_2D_ARRAY.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level is the n sup th mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="internalFormat">
        /// <para>
        /// Specifies the number of color components in the texture. Must be one of base internal formats given in Table 1, one of the sized internal formats given in Table 2, or one of the compressed internal formats given in Table 3, below.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture image. All implementations support 3D texture images that are at least 16 texels wide.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture image. All implementations support 3D texture images that are at least 256 texels high.
        /// </para>
        /// </param>
        /// <param name="depth">
        /// <para>
        /// Specifies the depth of the texture image, or the number of layers in a texture array. All implementations support 3D texture images that are at least 256 texels deep, and texture arrays that are at least 256 layers deep.
        /// </para>
        /// </param>
        /// <param name="border">
        /// <para>
        /// This value must be 0.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the pixel data. The following symbolic values are accepted: GL_RED, GL_RG, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_RED_INTEGER, GL_RG_INTEGER, GL_RGB_INTEGER, GL_BGR_INTEGER, GL_RGBA_INTEGER, GL_BGRA_INTEGER, GL_STENCIL_INDEX, GL_DEPTH_COMPONENT, GL_DEPTH_STENCIL.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_2", Version = "1.2", EntryPoint = "glTexImage3D")]
        public static extern void TexImage3D<T9>(OpenTK.Graphics.OpenGL4.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute] T9[,] pixels)
            where T9 : struct
        ;

        /// <summary>[requires: v1.2]
        /// Specify a three-dimensional texture image
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be one of GL_TEXTURE_3D, GL_PROXY_TEXTURE_3D, GL_TEXTURE_2D_ARRAY or GL_PROXY_TEXTURE_2D_ARRAY.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level is the n sup th mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="internalFormat">
        /// <para>
        /// Specifies the number of color components in the texture. Must be one of base internal formats given in Table 1, one of the sized internal formats given in Table 2, or one of the compressed internal formats given in Table 3, below.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture image. All implementations support 3D texture images that are at least 16 texels wide.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture image. All implementations support 3D texture images that are at least 256 texels high.
        /// </para>
        /// </param>
        /// <param name="depth">
        /// <para>
        /// Specifies the depth of the texture image, or the number of layers in a texture array. All implementations support 3D texture images that are at least 256 texels deep, and texture arrays that are at least 256 layers deep.
        /// </para>
        /// </param>
        /// <param name="border">
        /// <para>
        /// This value must be 0.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the pixel data. The following symbolic values are accepted: GL_RED, GL_RG, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_RED_INTEGER, GL_RG_INTEGER, GL_RGB_INTEGER, GL_BGR_INTEGER, GL_RGBA_INTEGER, GL_BGRA_INTEGER, GL_STENCIL_INDEX, GL_DEPTH_COMPONENT, GL_DEPTH_STENCIL.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_2", Version = "1.2", EntryPoint = "glTexImage3D")]
        public static extern void TexImage3D<T9>(OpenTK.Graphics.OpenGL4.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute] T9[,,] pixels)
            where T9 : struct
        ;

        /// <summary>[requires: v1.2]
        /// Specify a three-dimensional texture image
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be one of GL_TEXTURE_3D, GL_PROXY_TEXTURE_3D, GL_TEXTURE_2D_ARRAY or GL_PROXY_TEXTURE_2D_ARRAY.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level is the n sup th mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="internalFormat">
        /// <para>
        /// Specifies the number of color components in the texture. Must be one of base internal formats given in Table 1, one of the sized internal formats given in Table 2, or one of the compressed internal formats given in Table 3, below.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture image. All implementations support 3D texture images that are at least 16 texels wide.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture image. All implementations support 3D texture images that are at least 256 texels high.
        /// </para>
        /// </param>
        /// <param name="depth">
        /// <para>
        /// Specifies the depth of the texture image, or the number of layers in a texture array. All implementations support 3D texture images that are at least 256 texels deep, and texture arrays that are at least 256 layers deep.
        /// </para>
        /// </param>
        /// <param name="border">
        /// <para>
        /// This value must be 0.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the pixel data. The following symbolic values are accepted: GL_RED, GL_RG, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_RED_INTEGER, GL_RG_INTEGER, GL_RGB_INTEGER, GL_BGR_INTEGER, GL_RGBA_INTEGER, GL_BGRA_INTEGER, GL_STENCIL_INDEX, GL_DEPTH_COMPONENT, GL_DEPTH_STENCIL.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_2", Version = "1.2", EntryPoint = "glTexImage3D")]
        public static extern void TexImage3D<T9>(OpenTK.Graphics.OpenGL4.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute] ref T9 pixels)
            where T9 : struct
        ;

        /// <summary>[requires: v3.2 and ARB_texture_multisample|VERSION_3_2]
        /// Establish the data storage, format, dimensions, and number of samples of a multisample texture's image
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target of the operation. target must be GL_TEXTURE_2D_MULTISAMPLE_ARRAY or GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY.
        /// </para>
        /// </param>
        /// <param name="samples">
        /// <para>
        /// The number of samples in the multisample texture's image.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// The internal format to be used to store the multisample texture's image. internalformat must specify a color-renderable, depth-renderable, or stencil-renderable format.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// The width of the multisample texture's image, in texels.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// The height of the multisample texture's image, in texels.
        /// </para>
        /// </param>
        /// <param name="fixedsamplelocations">
        /// <para>
        /// Specifies whether the image will use identical sample locations and the same number of samples for all texels in the image, and the sample locations will not depend on the internal format or size of the image.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_texture_multisample|VERSION_3_2", Version = "3.2", EntryPoint = "glTexImage3DMultisample")]
        public static extern void TexImage3DMultisample(OpenTK.Graphics.OpenGL4.TextureTargetMultisample target, Int32 samples, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 depth, bool fixedsamplelocations);

        /// <summary>[requires: v1.0]
        /// Set texture parameters
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture, which must be either GL_TEXTURE_1D, GL_TEXTURE_2D, GL_TEXTURE_3D, GL_TEXTURE_1D_ARRAY, GL_TEXTURE_2D_ARRAY, GL_TEXTURE_RECTANGLE, or GL_TEXTURE_CUBE_MAP.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a single-valued texture parameter. pname can be one of the following: GL_DEPTH_STENCIL_TEXTURE_MODE, GL_TEXTURE_BASE_LEVEL, GL_TEXTURE_COMPARE_FUNC, GL_TEXTURE_COMPARE_MODE, GL_TEXTURE_LOD_BIAS, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, GL_TEXTURE_MAX_LEVEL, GL_TEXTURE_SWIZZLE_R, GL_TEXTURE_SWIZZLE_G, GL_TEXTURE_SWIZZLE_B, GL_TEXTURE_SWIZZLE_A, GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, or GL_TEXTURE_WRAP_R.
        /// </para>
        /// <para>
        /// For the vector commands (glTexParameter*v), pname can also be one of GL_TEXTURE_BORDER_COLOR or GL_TEXTURE_SWIZZLE_RGBA.
        /// </para>
        /// </param>
        /// <param name="param">
        /// <para>
        /// For the scalar commands, specifies the value of pname.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// For the vector commands, specifies a pointer to an array where the value or values of pname are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexParameterf")]
        public static extern void TexParameter(OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.TextureParameterName pname, Single param);

        /// <summary>[requires: v1.0]
        /// Set texture parameters
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture, which must be either GL_TEXTURE_1D, GL_TEXTURE_2D, GL_TEXTURE_3D, GL_TEXTURE_1D_ARRAY, GL_TEXTURE_2D_ARRAY, GL_TEXTURE_RECTANGLE, or GL_TEXTURE_CUBE_MAP.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a single-valued texture parameter. pname can be one of the following: GL_DEPTH_STENCIL_TEXTURE_MODE, GL_TEXTURE_BASE_LEVEL, GL_TEXTURE_COMPARE_FUNC, GL_TEXTURE_COMPARE_MODE, GL_TEXTURE_LOD_BIAS, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, GL_TEXTURE_MAX_LEVEL, GL_TEXTURE_SWIZZLE_R, GL_TEXTURE_SWIZZLE_G, GL_TEXTURE_SWIZZLE_B, GL_TEXTURE_SWIZZLE_A, GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, or GL_TEXTURE_WRAP_R.
        /// </para>
        /// <para>
        /// For the vector commands (glTexParameter*v), pname can also be one of GL_TEXTURE_BORDER_COLOR or GL_TEXTURE_SWIZZLE_RGBA.
        /// </para>
        /// </param>
        /// <param name="param">
        /// <para>
        /// For the scalar commands, specifies the value of pname.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// For the vector commands, specifies a pointer to an array where the value or values of pname are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexParameterfv")]
        public static extern void TexParameter(OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.TextureParameterName pname, Single[] @params);

        /// <summary>[requires: v1.0]
        /// Set texture parameters
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture, which must be either GL_TEXTURE_1D, GL_TEXTURE_2D, GL_TEXTURE_3D, GL_TEXTURE_1D_ARRAY, GL_TEXTURE_2D_ARRAY, GL_TEXTURE_RECTANGLE, or GL_TEXTURE_CUBE_MAP.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a single-valued texture parameter. pname can be one of the following: GL_DEPTH_STENCIL_TEXTURE_MODE, GL_TEXTURE_BASE_LEVEL, GL_TEXTURE_COMPARE_FUNC, GL_TEXTURE_COMPARE_MODE, GL_TEXTURE_LOD_BIAS, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, GL_TEXTURE_MAX_LEVEL, GL_TEXTURE_SWIZZLE_R, GL_TEXTURE_SWIZZLE_G, GL_TEXTURE_SWIZZLE_B, GL_TEXTURE_SWIZZLE_A, GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, or GL_TEXTURE_WRAP_R.
        /// </para>
        /// <para>
        /// For the vector commands (glTexParameter*v), pname can also be one of GL_TEXTURE_BORDER_COLOR or GL_TEXTURE_SWIZZLE_RGBA.
        /// </para>
        /// </param>
        /// <param name="param">
        /// <para>
        /// For the scalar commands, specifies the value of pname.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// For the vector commands, specifies a pointer to an array where the value or values of pname are stored.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexParameterfv")]
        public static extern unsafe void TexParameter(OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.TextureParameterName pname, Single* @params);

        /// <summary>[requires: v1.0]
        /// Set texture parameters
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture, which must be either GL_TEXTURE_1D, GL_TEXTURE_2D, GL_TEXTURE_3D, GL_TEXTURE_1D_ARRAY, GL_TEXTURE_2D_ARRAY, GL_TEXTURE_RECTANGLE, or GL_TEXTURE_CUBE_MAP.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a single-valued texture parameter. pname can be one of the following: GL_DEPTH_STENCIL_TEXTURE_MODE, GL_TEXTURE_BASE_LEVEL, GL_TEXTURE_COMPARE_FUNC, GL_TEXTURE_COMPARE_MODE, GL_TEXTURE_LOD_BIAS, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, GL_TEXTURE_MAX_LEVEL, GL_TEXTURE_SWIZZLE_R, GL_TEXTURE_SWIZZLE_G, GL_TEXTURE_SWIZZLE_B, GL_TEXTURE_SWIZZLE_A, GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, or GL_TEXTURE_WRAP_R.
        /// </para>
        /// <para>
        /// For the vector commands (glTexParameter*v), pname can also be one of GL_TEXTURE_BORDER_COLOR or GL_TEXTURE_SWIZZLE_RGBA.
        /// </para>
        /// </param>
        /// <param name="param">
        /// <para>
        /// For the scalar commands, specifies the value of pname.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// For the vector commands, specifies a pointer to an array where the value or values of pname are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexParameteri")]
        public static extern void TexParameter(OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.TextureParameterName pname, Int32 param);

        /// <summary>[requires: v3.0]</summary>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glTexParameterIiv")]
        public static extern void TexParameterI(OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.TextureParameterName pname, Int32[] @params);

        /// <summary>[requires: v3.0]</summary>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glTexParameterIiv")]
        public static extern void TexParameterI(OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.TextureParameterName pname, ref Int32 @params);

        /// <summary>[requires: v3.0]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glTexParameterIiv")]
        public static extern unsafe void TexParameterI(OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.TextureParameterName pname, Int32* @params);

        /// <summary>[requires: v3.0]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glTexParameterIuiv")]
        public static extern void TexParameterI(OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.TextureParameterName pname, UInt32[] @params);

        /// <summary>[requires: v3.0]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glTexParameterIuiv")]
        public static extern void TexParameterI(OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.TextureParameterName pname, ref UInt32 @params);

        /// <summary>[requires: v3.0]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glTexParameterIuiv")]
        public static extern unsafe void TexParameterI(OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.TextureParameterName pname, UInt32* @params);

        /// <summary>[requires: v1.0]
        /// Set texture parameters
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture, which must be either GL_TEXTURE_1D, GL_TEXTURE_2D, GL_TEXTURE_3D, GL_TEXTURE_1D_ARRAY, GL_TEXTURE_2D_ARRAY, GL_TEXTURE_RECTANGLE, or GL_TEXTURE_CUBE_MAP.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a single-valued texture parameter. pname can be one of the following: GL_DEPTH_STENCIL_TEXTURE_MODE, GL_TEXTURE_BASE_LEVEL, GL_TEXTURE_COMPARE_FUNC, GL_TEXTURE_COMPARE_MODE, GL_TEXTURE_LOD_BIAS, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, GL_TEXTURE_MAX_LEVEL, GL_TEXTURE_SWIZZLE_R, GL_TEXTURE_SWIZZLE_G, GL_TEXTURE_SWIZZLE_B, GL_TEXTURE_SWIZZLE_A, GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, or GL_TEXTURE_WRAP_R.
        /// </para>
        /// <para>
        /// For the vector commands (glTexParameter*v), pname can also be one of GL_TEXTURE_BORDER_COLOR or GL_TEXTURE_SWIZZLE_RGBA.
        /// </para>
        /// </param>
        /// <param name="param">
        /// <para>
        /// For the scalar commands, specifies the value of pname.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// For the vector commands, specifies a pointer to an array where the value or values of pname are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexParameteriv")]
        public static extern void TexParameter(OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.TextureParameterName pname, Int32[] @params);

        /// <summary>[requires: v1.0]
        /// Set texture parameters
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture, which must be either GL_TEXTURE_1D, GL_TEXTURE_2D, GL_TEXTURE_3D, GL_TEXTURE_1D_ARRAY, GL_TEXTURE_2D_ARRAY, GL_TEXTURE_RECTANGLE, or GL_TEXTURE_CUBE_MAP.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a single-valued texture parameter. pname can be one of the following: GL_DEPTH_STENCIL_TEXTURE_MODE, GL_TEXTURE_BASE_LEVEL, GL_TEXTURE_COMPARE_FUNC, GL_TEXTURE_COMPARE_MODE, GL_TEXTURE_LOD_BIAS, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, GL_TEXTURE_MAX_LEVEL, GL_TEXTURE_SWIZZLE_R, GL_TEXTURE_SWIZZLE_G, GL_TEXTURE_SWIZZLE_B, GL_TEXTURE_SWIZZLE_A, GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, or GL_TEXTURE_WRAP_R.
        /// </para>
        /// <para>
        /// For the vector commands (glTexParameter*v), pname can also be one of GL_TEXTURE_BORDER_COLOR or GL_TEXTURE_SWIZZLE_RGBA.
        /// </para>
        /// </param>
        /// <param name="param">
        /// <para>
        /// For the scalar commands, specifies the value of pname.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// For the vector commands, specifies a pointer to an array where the value or values of pname are stored.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexParameteriv")]
        public static extern unsafe void TexParameter(OpenTK.Graphics.OpenGL4.TextureTarget target, OpenTK.Graphics.OpenGL4.TextureParameterName pname, Int32* @params);

        /// <summary>[requires: v4.2 and ARB_texture_storage|VERSION_4_2]
        /// Simultaneously specify storage for all levels of a one-dimensional texture
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specify the target of the operation. target must be either GL_TEXTURE_1D or GL_PROXY_TEXTURE_1D.
        /// </para>
        /// </param>
        /// <param name="levels">
        /// <para>
        /// Specify the number of texture levels.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// Specifies the sized internal format to be used to store texture image data.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture, in texels.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_texture_storage|VERSION_4_2", Version = "4.2", EntryPoint = "glTexStorage1D")]
        public static extern void TexStorage1D(OpenTK.Graphics.OpenGL4.TextureTarget1d target, Int32 levels, OpenTK.Graphics.OpenGL4.SizedInternalFormat internalformat, Int32 width);

        /// <summary>[requires: v4.2 and ARB_texture_storage|VERSION_4_2]
        /// Simultaneously specify storage for all levels of a two-dimensional or one-dimensional array texture
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specify the target of the operation. target must be one of GL_TEXTURE_2D, GL_PROXY_TEXTURE_2D, GL_TEXTURE_1D_ARRAY, GL_PROXY_TEXTURE_1D_ARRAY, GL_TEXTURE_RECTANGLE, GL_PROXY_TEXTURE_RECTANGLE, or GL_PROXY_TEXTURE_CUBE_MAP.
        /// </para>
        /// </param>
        /// <param name="levels">
        /// <para>
        /// Specify the number of texture levels.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// Specifies the sized internal format to be used to store texture image data.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture, in texels.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture, in texels.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_texture_storage|VERSION_4_2", Version = "4.2", EntryPoint = "glTexStorage2D")]
        public static extern void TexStorage2D(OpenTK.Graphics.OpenGL4.TextureTarget2d target, Int32 levels, OpenTK.Graphics.OpenGL4.SizedInternalFormat internalformat, Int32 width, Int32 height);

        /// <summary>[requires: v4.3 and ARB_texture_storage_multisample|VERSION_4_3]
        /// Specify storage for a two-dimensional multisample texture
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specify the target of the operation. target must be GL_TEXTURE_2D_MULTISAMPLE or GL_PROXY_TEXTURE_2D_MULTISAMPLE.
        /// </para>
        /// </param>
        /// <param name="samples">
        /// <para>
        /// Specify the number of samples in the texture.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// Specifies the sized internal format to be used to store texture image data.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture, in texels.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture, in texels.
        /// </para>
        /// </param>
        /// <param name="fixedsamplelocations">
        /// <para>
        /// Specifies whether the image will use identical sample locations and the same number of samples for all texels in the image, and the sample locations will not depend on the internal format or size of the image.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_texture_storage_multisample|VERSION_4_3", Version = "4.3", EntryPoint = "glTexStorage2DMultisample")]
        public static extern void TexStorage2DMultisample(OpenTK.Graphics.OpenGL4.TextureTargetMultisample2d target, Int32 samples, OpenTK.Graphics.OpenGL4.SizedInternalFormat internalformat, Int32 width, Int32 height, bool fixedsamplelocations);

        /// <summary>[requires: v4.2 and ARB_texture_storage|VERSION_4_2]
        /// Simultaneously specify storage for all levels of a three-dimensional, two-dimensional array or cube-map array texture
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specify the target of the operation. target must be one of GL_TEXTURE_3D, GL_PROXY_TEXTURE_3D, GL_TEXTURE_2D_ARRAY, GL_PROXY_TEXTURE_2D_ARRAY, GL_TEXTURE_CUBE_ARRAY, or GL_PROXY_TEXTURE_CUBE_ARRAY.
        /// </para>
        /// </param>
        /// <param name="levels">
        /// <para>
        /// Specify the number of texture levels.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// Specifies the sized internal format to be used to store texture image data.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture, in texels.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture, in texels.
        /// </para>
        /// </param>
        /// <param name="depth">
        /// <para>
        /// Specifies the depth of the texture, in texels.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_texture_storage|VERSION_4_2", Version = "4.2", EntryPoint = "glTexStorage3D")]
        public static extern void TexStorage3D(OpenTK.Graphics.OpenGL4.TextureTarget3d target, Int32 levels, OpenTK.Graphics.OpenGL4.SizedInternalFormat internalformat, Int32 width, Int32 height, Int32 depth);

        /// <summary>[requires: v4.3 and ARB_texture_storage_multisample|VERSION_4_3]
        /// Specify storage for a two-dimensional multisample array texture
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specify the target of the operation. target must be GL_TEXTURE_2D_MULTISAMPLE_ARRAY or GL_PROXY_TEXTURE_2D_MULTISAMPLE_MULTISAMPLE.
        /// </para>
        /// </param>
        /// <param name="samples">
        /// <para>
        /// Specify the number of samples in the texture.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// Specifies the sized internal format to be used to store texture image data.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture, in texels.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture, in texels.
        /// </para>
        /// </param>
        /// <param name="depth">
        /// <para>
        /// Specifies the depth of the texture, in layers.
        /// </para>
        /// </param>
        /// <param name="fixedsamplelocations">
        /// <para>
        /// Specifies whether the image will use identical sample locations and the same number of samples for all texels in the image, and the sample locations will not depend on the internal format or size of the image.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_texture_storage_multisample|VERSION_4_3", Version = "4.3", EntryPoint = "glTexStorage3DMultisample")]
        public static extern void TexStorage3DMultisample(OpenTK.Graphics.OpenGL4.TextureTargetMultisample3d target, Int32 samples, OpenTK.Graphics.OpenGL4.SizedInternalFormat internalformat, Int32 width, Int32 height, Int32 depth, bool fixedsamplelocations);

        /// <summary>[requires: v1.1]
        /// Specify a one-dimensional texture subimage
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_1D.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="xoffset">
        /// <para>
        /// Specifies a texel offset in the x direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the pixel data. The following symbolic values are accepted: GL_RED, GL_RG, GL_RGB, GL_BGR, GL_RGBA, GL_DEPTH_COMPONENT, and GL_STENCIL_INDEX.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glTexSubImage1D")]
        public static extern void TexSubImage1D(OpenTK.Graphics.OpenGL4.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, IntPtr pixels);

        /// <summary>[requires: v1.1]
        /// Specify a one-dimensional texture subimage
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_1D.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="xoffset">
        /// <para>
        /// Specifies a texel offset in the x direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the pixel data. The following symbolic values are accepted: GL_RED, GL_RG, GL_RGB, GL_BGR, GL_RGBA, GL_DEPTH_COMPONENT, and GL_STENCIL_INDEX.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glTexSubImage1D")]
        public static extern void TexSubImage1D<T6>(OpenTK.Graphics.OpenGL4.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute] T6[] pixels)
            where T6 : struct
        ;

        /// <summary>[requires: v1.1]
        /// Specify a one-dimensional texture subimage
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_1D.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="xoffset">
        /// <para>
        /// Specifies a texel offset in the x direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the pixel data. The following symbolic values are accepted: GL_RED, GL_RG, GL_RGB, GL_BGR, GL_RGBA, GL_DEPTH_COMPONENT, and GL_STENCIL_INDEX.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glTexSubImage1D")]
        public static extern void TexSubImage1D<T6>(OpenTK.Graphics.OpenGL4.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute] T6[,] pixels)
            where T6 : struct
        ;

        /// <summary>[requires: v1.1]
        /// Specify a one-dimensional texture subimage
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_1D.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="xoffset">
        /// <para>
        /// Specifies a texel offset in the x direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the pixel data. The following symbolic values are accepted: GL_RED, GL_RG, GL_RGB, GL_BGR, GL_RGBA, GL_DEPTH_COMPONENT, and GL_STENCIL_INDEX.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glTexSubImage1D")]
        public static extern void TexSubImage1D<T6>(OpenTK.Graphics.OpenGL4.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute] T6[,,] pixels)
            where T6 : struct
        ;

        /// <summary>[requires: v1.1]
        /// Specify a one-dimensional texture subimage
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_1D.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="xoffset">
        /// <para>
        /// Specifies a texel offset in the x direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the pixel data. The following symbolic values are accepted: GL_RED, GL_RG, GL_RGB, GL_BGR, GL_RGBA, GL_DEPTH_COMPONENT, and GL_STENCIL_INDEX.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glTexSubImage1D")]
        public static extern void TexSubImage1D<T6>(OpenTK.Graphics.OpenGL4.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute] ref T6 pixels)
            where T6 : struct
        ;

        /// <summary>[requires: v1.1]
        /// Specify a two-dimensional texture subimage
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_2D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, GL_TEXTURE_CUBE_MAP_NEGATIVE_Z, or GL_TEXTURE_1D_ARRAY.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="xoffset">
        /// <para>
        /// Specifies a texel offset in the x direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="yoffset">
        /// <para>
        /// Specifies a texel offset in the y direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the pixel data. The following symbolic values are accepted: GL_RED, GL_RG, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_DEPTH_COMPONENT, and GL_STENCIL_INDEX.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glTexSubImage2D")]
        public static extern void TexSubImage2D(OpenTK.Graphics.OpenGL4.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, IntPtr pixels);

        /// <summary>[requires: v1.1]
        /// Specify a two-dimensional texture subimage
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_2D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, GL_TEXTURE_CUBE_MAP_NEGATIVE_Z, or GL_TEXTURE_1D_ARRAY.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="xoffset">
        /// <para>
        /// Specifies a texel offset in the x direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="yoffset">
        /// <para>
        /// Specifies a texel offset in the y direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the pixel data. The following symbolic values are accepted: GL_RED, GL_RG, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_DEPTH_COMPONENT, and GL_STENCIL_INDEX.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glTexSubImage2D")]
        public static extern void TexSubImage2D<T8>(OpenTK.Graphics.OpenGL4.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute] T8[] pixels)
            where T8 : struct
        ;

        /// <summary>[requires: v1.1]
        /// Specify a two-dimensional texture subimage
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_2D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, GL_TEXTURE_CUBE_MAP_NEGATIVE_Z, or GL_TEXTURE_1D_ARRAY.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="xoffset">
        /// <para>
        /// Specifies a texel offset in the x direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="yoffset">
        /// <para>
        /// Specifies a texel offset in the y direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the pixel data. The following symbolic values are accepted: GL_RED, GL_RG, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_DEPTH_COMPONENT, and GL_STENCIL_INDEX.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glTexSubImage2D")]
        public static extern void TexSubImage2D<T8>(OpenTK.Graphics.OpenGL4.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute] T8[,] pixels)
            where T8 : struct
        ;

        /// <summary>[requires: v1.1]
        /// Specify a two-dimensional texture subimage
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_2D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, GL_TEXTURE_CUBE_MAP_NEGATIVE_Z, or GL_TEXTURE_1D_ARRAY.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="xoffset">
        /// <para>
        /// Specifies a texel offset in the x direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="yoffset">
        /// <para>
        /// Specifies a texel offset in the y direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the pixel data. The following symbolic values are accepted: GL_RED, GL_RG, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_DEPTH_COMPONENT, and GL_STENCIL_INDEX.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glTexSubImage2D")]
        public static extern void TexSubImage2D<T8>(OpenTK.Graphics.OpenGL4.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute] T8[,,] pixels)
            where T8 : struct
        ;

        /// <summary>[requires: v1.1]
        /// Specify a two-dimensional texture subimage
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_2D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, GL_TEXTURE_CUBE_MAP_NEGATIVE_Z, or GL_TEXTURE_1D_ARRAY.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="xoffset">
        /// <para>
        /// Specifies a texel offset in the x direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="yoffset">
        /// <para>
        /// Specifies a texel offset in the y direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the pixel data. The following symbolic values are accepted: GL_RED, GL_RG, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_DEPTH_COMPONENT, and GL_STENCIL_INDEX.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glTexSubImage2D")]
        public static extern void TexSubImage2D<T8>(OpenTK.Graphics.OpenGL4.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute] ref T8 pixels)
            where T8 : struct
        ;

        /// <summary>[requires: v1.2]
        /// Specify a three-dimensional texture subimage
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_3D or GL_TEXTURE_2D_ARRAY.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="xoffset">
        /// <para>
        /// Specifies a texel offset in the x direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="yoffset">
        /// <para>
        /// Specifies a texel offset in the y direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="zoffset">
        /// <para>
        /// Specifies a texel offset in the z direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="depth">
        /// <para>
        /// Specifies the depth of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the pixel data. The following symbolic values are accepted: GL_RED, GL_RG, GL_RGB, GL_BGR, GL_RGBA, GL_DEPTH_COMPONENT, and GL_STENCIL_INDEX.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_2", Version = "1.2", EntryPoint = "glTexSubImage3D")]
        public static extern void TexSubImage3D(OpenTK.Graphics.OpenGL4.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, IntPtr pixels);

        /// <summary>[requires: v1.2]
        /// Specify a three-dimensional texture subimage
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_3D or GL_TEXTURE_2D_ARRAY.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="xoffset">
        /// <para>
        /// Specifies a texel offset in the x direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="yoffset">
        /// <para>
        /// Specifies a texel offset in the y direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="zoffset">
        /// <para>
        /// Specifies a texel offset in the z direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="depth">
        /// <para>
        /// Specifies the depth of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the pixel data. The following symbolic values are accepted: GL_RED, GL_RG, GL_RGB, GL_BGR, GL_RGBA, GL_DEPTH_COMPONENT, and GL_STENCIL_INDEX.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_2", Version = "1.2", EntryPoint = "glTexSubImage3D")]
        public static extern void TexSubImage3D<T10>(OpenTK.Graphics.OpenGL4.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute] T10[] pixels)
            where T10 : struct
        ;

        /// <summary>[requires: v1.2]
        /// Specify a three-dimensional texture subimage
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_3D or GL_TEXTURE_2D_ARRAY.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="xoffset">
        /// <para>
        /// Specifies a texel offset in the x direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="yoffset">
        /// <para>
        /// Specifies a texel offset in the y direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="zoffset">
        /// <para>
        /// Specifies a texel offset in the z direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="depth">
        /// <para>
        /// Specifies the depth of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the pixel data. The following symbolic values are accepted: GL_RED, GL_RG, GL_RGB, GL_BGR, GL_RGBA, GL_DEPTH_COMPONENT, and GL_STENCIL_INDEX.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_2", Version = "1.2", EntryPoint = "glTexSubImage3D")]
        public static extern void TexSubImage3D<T10>(OpenTK.Graphics.OpenGL4.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute] T10[,] pixels)
            where T10 : struct
        ;

        /// <summary>[requires: v1.2]
        /// Specify a three-dimensional texture subimage
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_3D or GL_TEXTURE_2D_ARRAY.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="xoffset">
        /// <para>
        /// Specifies a texel offset in the x direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="yoffset">
        /// <para>
        /// Specifies a texel offset in the y direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="zoffset">
        /// <para>
        /// Specifies a texel offset in the z direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="depth">
        /// <para>
        /// Specifies the depth of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the pixel data. The following symbolic values are accepted: GL_RED, GL_RG, GL_RGB, GL_BGR, GL_RGBA, GL_DEPTH_COMPONENT, and GL_STENCIL_INDEX.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_2", Version = "1.2", EntryPoint = "glTexSubImage3D")]
        public static extern void TexSubImage3D<T10>(OpenTK.Graphics.OpenGL4.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute] T10[,,] pixels)
            where T10 : struct
        ;

        /// <summary>[requires: v1.2]
        /// Specify a three-dimensional texture subimage
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_3D or GL_TEXTURE_2D_ARRAY.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="xoffset">
        /// <para>
        /// Specifies a texel offset in the x direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="yoffset">
        /// <para>
        /// Specifies a texel offset in the y direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="zoffset">
        /// <para>
        /// Specifies a texel offset in the z direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="depth">
        /// <para>
        /// Specifies the depth of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the pixel data. The following symbolic values are accepted: GL_RED, GL_RG, GL_RGB, GL_BGR, GL_RGBA, GL_DEPTH_COMPONENT, and GL_STENCIL_INDEX.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_2", Version = "1.2", EntryPoint = "glTexSubImage3D")]
        public static extern void TexSubImage3D<T10>(OpenTK.Graphics.OpenGL4.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.OpenGL4.PixelFormat format, OpenTK.Graphics.OpenGL4.PixelType type, [InAttribute, OutAttribute] ref T10 pixels)
            where T10 : struct
        ;

        /// <summary>[requires: v4.3 and ARB_texture_view|VERSION_4_3]
        /// Initialize a texture as a data alias of another texture's data store
        /// </summary>
        /// <param name="texture">
        /// <para>
        /// Specifies the texture object to be initialized as a view.
        /// </para>
        /// </param>
        /// <param name="target">
        /// <para>
        /// Specifies the target to be used for the newly initialized texture.
        /// </para>
        /// </param>
        /// <param name="origtexture">
        /// <para>
        /// Specifies the name of a texture object of which to make a view.
        /// </para>
        /// </param>
        /// <param name="internalFormat">
        /// <para>
        /// Specifies the internal format for the newly created view.
        /// </para>
        /// </param>
        /// <param name="minlevel">
        /// <para>
        /// Specifies lowest level of detail of the view.
        /// </para>
        /// </param>
        /// <param name="numlevels">
        /// <para>
        /// Specifies the number of levels of detail to include in the view.
        /// </para>
        /// </param>
        /// <param name="minlayer">
        /// <para>
        /// Specifies the index of the first layer to include in the view.
        /// </para>
        /// </param>
        /// <param name="numlayers">
        /// <para>
        /// Specifies the number of layers to include in the view.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_texture_view|VERSION_4_3", Version = "4.3", EntryPoint = "glTextureView")]
        public static extern void TextureView(Int32 texture, OpenTK.Graphics.OpenGL4.TextureTarget target, Int32 origtexture, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, Int32 minlevel, Int32 numlevels, Int32 minlayer, Int32 numlayers);

        /// <summary>[requires: v4.3 and ARB_texture_view|VERSION_4_3]
        /// Initialize a texture as a data alias of another texture's data store
        /// </summary>
        /// <param name="texture">
        /// <para>
        /// Specifies the texture object to be initialized as a view.
        /// </para>
        /// </param>
        /// <param name="target">
        /// <para>
        /// Specifies the target to be used for the newly initialized texture.
        /// </para>
        /// </param>
        /// <param name="origtexture">
        /// <para>
        /// Specifies the name of a texture object of which to make a view.
        /// </para>
        /// </param>
        /// <param name="internalFormat">
        /// <para>
        /// Specifies the internal format for the newly created view.
        /// </para>
        /// </param>
        /// <param name="minlevel">
        /// <para>
        /// Specifies lowest level of detail of the view.
        /// </para>
        /// </param>
        /// <param name="numlevels">
        /// <para>
        /// Specifies the number of levels of detail to include in the view.
        /// </para>
        /// </param>
        /// <param name="minlayer">
        /// <para>
        /// Specifies the index of the first layer to include in the view.
        /// </para>
        /// </param>
        /// <param name="numlayers">
        /// <para>
        /// Specifies the number of layers to include in the view.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_texture_view|VERSION_4_3", Version = "4.3", EntryPoint = "glTextureView")]
        public static extern void TextureView(UInt32 texture, OpenTK.Graphics.OpenGL4.TextureTarget target, UInt32 origtexture, OpenTK.Graphics.OpenGL4.PixelInternalFormat internalformat, UInt32 minlevel, UInt32 numlevels, UInt32 minlayer, UInt32 numlayers);

        /// <summary>[requires: v3.0]
        /// Specify values to record in transform feedback buffers
        /// </summary>
        /// <param name="program">
        /// <para>
        /// The name of the target program object.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// The number of varying variables used for transform feedback.
        /// </para>
        /// </param>
        /// <param name="varyings">
        /// <para>
        /// An array of count zero-terminated strings specifying the names of the varying variables to use for transform feedback.
        /// </para>
        /// </param>
        /// <param name="bufferMode">
        /// <para>
        /// Identifies the mode used to capture the varying variables when transform feedback is active. bufferMode must be GL_INTERLEAVED_ATTRIBS or GL_SEPARATE_ATTRIBS.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glTransformFeedbackVaryings")]
        public static extern void TransformFeedbackVaryings(Int32 program, Int32 count, String[] varyings, OpenTK.Graphics.OpenGL4.TransformFeedbackMode bufferMode);

        /// <summary>[requires: v3.0]
        /// Specify values to record in transform feedback buffers
        /// </summary>
        /// <param name="program">
        /// <para>
        /// The name of the target program object.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// The number of varying variables used for transform feedback.
        /// </para>
        /// </param>
        /// <param name="varyings">
        /// <para>
        /// An array of count zero-terminated strings specifying the names of the varying variables to use for transform feedback.
        /// </para>
        /// </param>
        /// <param name="bufferMode">
        /// <para>
        /// Identifies the mode used to capture the varying variables when transform feedback is active. bufferMode must be GL_INTERLEAVED_ATTRIBS or GL_SEPARATE_ATTRIBS.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glTransformFeedbackVaryings")]
        public static extern void TransformFeedbackVaryings(UInt32 program, Int32 count, String[] varyings, OpenTK.Graphics.OpenGL4.TransformFeedbackMode bufferMode);

        /// <summary>[requires: v4.0 and ARB_gpu_shader_fp64|VERSION_4_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glUniform1d")]
        public static extern void Uniform1(Int32 location, Double x);

        /// <summary>[requires: v4.0 and ARB_gpu_shader_fp64|VERSION_4_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glUniform1dv")]
        public static extern void Uniform1(Int32 location, Int32 count, Double[] value);

        /// <summary>[requires: v4.0 and ARB_gpu_shader_fp64|VERSION_4_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glUniform1dv")]
        public static extern void Uniform1(Int32 location, Int32 count, ref Double value);

        /// <summary>[requires: v4.0 and ARB_gpu_shader_fp64|VERSION_4_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glUniform1dv")]
        public static extern unsafe void Uniform1(Int32 location, Int32 count, Double* value);

        /// <summary>[requires: v2.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform1f")]
        public static extern void Uniform1(Int32 location, Single v0);

        /// <summary>[requires: v2.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform1fv")]
        public static extern void Uniform1(Int32 location, Int32 count, Single[] value);

        /// <summary>[requires: v2.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform1fv")]
        public static extern void Uniform1(Int32 location, Int32 count, ref Single value);

        /// <summary>[requires: v2.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform1fv")]
        public static extern unsafe void Uniform1(Int32 location, Int32 count, Single* value);

        /// <summary>[requires: v2.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform1i")]
        public static extern void Uniform1(Int32 location, Int32 v0);

        /// <summary>[requires: v2.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform1iv")]
        public static extern void Uniform1(Int32 location, Int32 count, Int32[] value);

        /// <summary>[requires: v2.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform1iv")]
        public static extern void Uniform1(Int32 location, Int32 count, ref Int32 value);

        /// <summary>[requires: v2.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform1iv")]
        public static extern unsafe void Uniform1(Int32 location, Int32 count, Int32* value);

        /// <summary>[requires: v3.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glUniform1ui")]
        public static extern void Uniform1(Int32 location, UInt32 v0);

        /// <summary>[requires: v3.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glUniform1uiv")]
        public static extern void Uniform1(Int32 location, Int32 count, UInt32[] value);

        /// <summary>[requires: v3.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glUniform1uiv")]
        public static extern void Uniform1(Int32 location, Int32 count, ref UInt32 value);

        /// <summary>[requires: v3.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glUniform1uiv")]
        public static extern unsafe void Uniform1(Int32 location, Int32 count, UInt32* value);

        /// <summary>[requires: v4.0 and ARB_gpu_shader_fp64|VERSION_4_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glUniform2d")]
        public static extern void Uniform2(Int32 location, Double x, Double y);

        /// <summary>[requires: v4.0 and ARB_gpu_shader_fp64|VERSION_4_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glUniform2dv")]
        public static extern void Uniform2(Int32 location, Int32 count, Double[] value);

        /// <summary>[requires: v4.0 and ARB_gpu_shader_fp64|VERSION_4_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glUniform2dv")]
        public static extern void Uniform2(Int32 location, Int32 count, ref Double value);

        /// <summary>[requires: v4.0 and ARB_gpu_shader_fp64|VERSION_4_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glUniform2dv")]
        public static extern unsafe void Uniform2(Int32 location, Int32 count, Double* value);

        /// <summary>[requires: v2.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform2f")]
        public static extern void Uniform2(Int32 location, Single v0, Single v1);

        /// <summary>[requires: v2.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform2fv")]
        public static extern void Uniform2(Int32 location, Int32 count, Single[] value);

        /// <summary>[requires: v2.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform2fv")]
        public static extern void Uniform2(Int32 location, Int32 count, ref Single value);

        /// <summary>[requires: v2.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform2fv")]
        public static extern unsafe void Uniform2(Int32 location, Int32 count, Single* value);

        /// <summary>[requires: v2.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform2i")]
        public static extern void Uniform2(Int32 location, Int32 v0, Int32 v1);

        /// <summary>[requires: v2.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform2iv")]
        public static extern void Uniform2(Int32 location, Int32 count, Int32[] value);

        /// <summary>[requires: v2.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform2iv")]
        public static extern unsafe void Uniform2(Int32 location, Int32 count, Int32* value);

        /// <summary>[requires: v3.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glUniform2ui")]
        public static extern void Uniform2(Int32 location, UInt32 v0, UInt32 v1);

        /// <summary>[requires: v3.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glUniform2uiv")]
        public static extern void Uniform2(Int32 location, Int32 count, UInt32[] value);

        /// <summary>[requires: v3.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glUniform2uiv")]
        public static extern void Uniform2(Int32 location, Int32 count, ref UInt32 value);

        /// <summary>[requires: v3.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glUniform2uiv")]
        public static extern unsafe void Uniform2(Int32 location, Int32 count, UInt32* value);

        /// <summary>[requires: v4.0 and ARB_gpu_shader_fp64|VERSION_4_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glUniform3d")]
        public static extern void Uniform3(Int32 location, Double x, Double y, Double z);

        /// <summary>[requires: v4.0 and ARB_gpu_shader_fp64|VERSION_4_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glUniform3dv")]
        public static extern void Uniform3(Int32 location, Int32 count, Double[] value);

        /// <summary>[requires: v4.0 and ARB_gpu_shader_fp64|VERSION_4_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glUniform3dv")]
        public static extern void Uniform3(Int32 location, Int32 count, ref Double value);

        /// <summary>[requires: v4.0 and ARB_gpu_shader_fp64|VERSION_4_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glUniform3dv")]
        public static extern unsafe void Uniform3(Int32 location, Int32 count, Double* value);

        /// <summary>[requires: v2.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform3f")]
        public static extern void Uniform3(Int32 location, Single v0, Single v1, Single v2);

        /// <summary>[requires: v2.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform3fv")]
        public static extern void Uniform3(Int32 location, Int32 count, Single[] value);

        /// <summary>[requires: v2.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform3fv")]
        public static extern void Uniform3(Int32 location, Int32 count, ref Single value);

        /// <summary>[requires: v2.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform3fv")]
        public static extern unsafe void Uniform3(Int32 location, Int32 count, Single* value);

        /// <summary>[requires: v2.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform3i")]
        public static extern void Uniform3(Int32 location, Int32 v0, Int32 v1, Int32 v2);

        /// <summary>[requires: v2.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform3iv")]
        public static extern void Uniform3(Int32 location, Int32 count, Int32[] value);

        /// <summary>[requires: v2.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform3iv")]
        public static extern void Uniform3(Int32 location, Int32 count, ref Int32 value);

        /// <summary>[requires: v2.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform3iv")]
        public static extern unsafe void Uniform3(Int32 location, Int32 count, Int32* value);

        /// <summary>[requires: v3.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glUniform3ui")]
        public static extern void Uniform3(Int32 location, UInt32 v0, UInt32 v1, UInt32 v2);

        /// <summary>[requires: v3.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glUniform3uiv")]
        public static extern void Uniform3(Int32 location, Int32 count, UInt32[] value);

        /// <summary>[requires: v3.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glUniform3uiv")]
        public static extern void Uniform3(Int32 location, Int32 count, ref UInt32 value);

        /// <summary>[requires: v3.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glUniform3uiv")]
        public static extern unsafe void Uniform3(Int32 location, Int32 count, UInt32* value);

        /// <summary>[requires: v4.0 and ARB_gpu_shader_fp64|VERSION_4_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glUniform4d")]
        public static extern void Uniform4(Int32 location, Double x, Double y, Double z, Double w);

        /// <summary>[requires: v4.0 and ARB_gpu_shader_fp64|VERSION_4_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glUniform4dv")]
        public static extern void Uniform4(Int32 location, Int32 count, Double[] value);

        /// <summary>[requires: v4.0 and ARB_gpu_shader_fp64|VERSION_4_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glUniform4dv")]
        public static extern void Uniform4(Int32 location, Int32 count, ref Double value);

        /// <summary>[requires: v4.0 and ARB_gpu_shader_fp64|VERSION_4_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glUniform4dv")]
        public static extern unsafe void Uniform4(Int32 location, Int32 count, Double* value);

        /// <summary>[requires: v2.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform4f")]
        public static extern void Uniform4(Int32 location, Single v0, Single v1, Single v2, Single v3);

        /// <summary>[requires: v2.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform4fv")]
        public static extern void Uniform4(Int32 location, Int32 count, Single[] value);

        /// <summary>[requires: v2.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform4fv")]
        public static extern void Uniform4(Int32 location, Int32 count, ref Single value);

        /// <summary>[requires: v2.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform4fv")]
        public static extern unsafe void Uniform4(Int32 location, Int32 count, Single* value);

        /// <summary>[requires: v2.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform4i")]
        public static extern void Uniform4(Int32 location, Int32 v0, Int32 v1, Int32 v2, Int32 v3);

        /// <summary>[requires: v2.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform4iv")]
        public static extern void Uniform4(Int32 location, Int32 count, Int32[] value);

        /// <summary>[requires: v2.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform4iv")]
        public static extern void Uniform4(Int32 location, Int32 count, ref Int32 value);

        /// <summary>[requires: v2.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform4iv")]
        public static extern unsafe void Uniform4(Int32 location, Int32 count, Int32* value);

        /// <summary>[requires: v3.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glUniform4ui")]
        public static extern void Uniform4(Int32 location, UInt32 v0, UInt32 v1, UInt32 v2, UInt32 v3);

        /// <summary>[requires: v3.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glUniform4uiv")]
        public static extern void Uniform4(Int32 location, Int32 count, UInt32[] value);

        /// <summary>[requires: v3.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glUniform4uiv")]
        public static extern void Uniform4(Int32 location, Int32 count, ref UInt32 value);

        /// <summary>[requires: v3.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glUniform4uiv")]
        public static extern unsafe void Uniform4(Int32 location, Int32 count, UInt32* value);

        /// <summary>[requires: v3.1 and ARB_uniform_buffer_object|VERSION_3_1]
        /// Assign a binding point to an active uniform block
        /// </summary>
        /// <param name="program">
        /// <para>
        /// The name of a program object containing the active uniform block whose binding to assign.
        /// </para>
        /// </param>
        /// <param name="uniformBlockIndex">
        /// <para>
        /// The index of the active uniform block within program whose binding to assign.
        /// </para>
        /// </param>
        /// <param name="uniformBlockBinding">
        /// <para>
        /// Specifies the binding point to which to bind the uniform block with index uniformBlockIndex within program.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_uniform_buffer_object|VERSION_3_1", Version = "3.1", EntryPoint = "glUniformBlockBinding")]
        public static extern void UniformBlockBinding(Int32 program, Int32 uniformBlockIndex, Int32 uniformBlockBinding);

        /// <summary>[requires: v3.1 and ARB_uniform_buffer_object|VERSION_3_1]
        /// Assign a binding point to an active uniform block
        /// </summary>
        /// <param name="program">
        /// <para>
        /// The name of a program object containing the active uniform block whose binding to assign.
        /// </para>
        /// </param>
        /// <param name="uniformBlockIndex">
        /// <para>
        /// The index of the active uniform block within program whose binding to assign.
        /// </para>
        /// </param>
        /// <param name="uniformBlockBinding">
        /// <para>
        /// Specifies the binding point to which to bind the uniform block with index uniformBlockIndex within program.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_uniform_buffer_object|VERSION_3_1", Version = "3.1", EntryPoint = "glUniformBlockBinding")]
        public static extern void UniformBlockBinding(UInt32 program, UInt32 uniformBlockIndex, UInt32 uniformBlockBinding);

        /// <summary>[requires: v4.0 and ARB_gpu_shader_fp64|VERSION_4_0]</summary>
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glUniformMatrix2dv")]
        public static extern void UniformMatrix2(Int32 location, Int32 count, bool transpose, Double[] value);

        /// <summary>[requires: v4.0 and ARB_gpu_shader_fp64|VERSION_4_0]</summary>
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glUniformMatrix2dv")]
        public static extern void UniformMatrix2(Int32 location, Int32 count, bool transpose, ref Double value);

        /// <summary>[requires: v4.0 and ARB_gpu_shader_fp64|VERSION_4_0]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glUniformMatrix2dv")]
        public static extern unsafe void UniformMatrix2(Int32 location, Int32 count, bool transpose, Double* value);

        /// <summary>[requires: v2.0]</summary>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniformMatrix2fv")]
        public static extern void UniformMatrix2(Int32 location, Int32 count, bool transpose, Single[] value);

        /// <summary>[requires: v2.0]</summary>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniformMatrix2fv")]
        public static extern void UniformMatrix2(Int32 location, Int32 count, bool transpose, ref Single value);

        /// <summary>[requires: v2.0]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniformMatrix2fv")]
        public static extern unsafe void UniformMatrix2(Int32 location, Int32 count, bool transpose, Single* value);

        /// <summary>[requires: v4.0 and ARB_gpu_shader_fp64|VERSION_4_0]</summary>
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glUniformMatrix2x3dv")]
        public static extern void UniformMatrix2x3(Int32 location, Int32 count, bool transpose, Double[] value);

        /// <summary>[requires: v4.0 and ARB_gpu_shader_fp64|VERSION_4_0]</summary>
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glUniformMatrix2x3dv")]
        public static extern void UniformMatrix2x3(Int32 location, Int32 count, bool transpose, ref Double value);

        /// <summary>[requires: v4.0 and ARB_gpu_shader_fp64|VERSION_4_0]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glUniformMatrix2x3dv")]
        public static extern unsafe void UniformMatrix2x3(Int32 location, Int32 count, bool transpose, Double* value);

        /// <summary>[requires: v2.1]</summary>
        [AutoGenerated(Category = "VERSION_2_1", Version = "2.1", EntryPoint = "glUniformMatrix2x3fv")]
        public static extern void UniformMatrix2x3(Int32 location, Int32 count, bool transpose, Single[] value);

        /// <summary>[requires: v2.1]</summary>
        [AutoGenerated(Category = "VERSION_2_1", Version = "2.1", EntryPoint = "glUniformMatrix2x3fv")]
        public static extern void UniformMatrix2x3(Int32 location, Int32 count, bool transpose, ref Single value);

        /// <summary>[requires: v2.1]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_1", Version = "2.1", EntryPoint = "glUniformMatrix2x3fv")]
        public static extern unsafe void UniformMatrix2x3(Int32 location, Int32 count, bool transpose, Single* value);

        /// <summary>[requires: v4.0 and ARB_gpu_shader_fp64|VERSION_4_0]</summary>
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glUniformMatrix2x4dv")]
        public static extern void UniformMatrix2x4(Int32 location, Int32 count, bool transpose, Double[] value);

        /// <summary>[requires: v4.0 and ARB_gpu_shader_fp64|VERSION_4_0]</summary>
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glUniformMatrix2x4dv")]
        public static extern void UniformMatrix2x4(Int32 location, Int32 count, bool transpose, ref Double value);

        /// <summary>[requires: v4.0 and ARB_gpu_shader_fp64|VERSION_4_0]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glUniformMatrix2x4dv")]
        public static extern unsafe void UniformMatrix2x4(Int32 location, Int32 count, bool transpose, Double* value);

        /// <summary>[requires: v2.1]</summary>
        [AutoGenerated(Category = "VERSION_2_1", Version = "2.1", EntryPoint = "glUniformMatrix2x4fv")]
        public static extern void UniformMatrix2x4(Int32 location, Int32 count, bool transpose, Single[] value);

        /// <summary>[requires: v2.1]</summary>
        [AutoGenerated(Category = "VERSION_2_1", Version = "2.1", EntryPoint = "glUniformMatrix2x4fv")]
        public static extern void UniformMatrix2x4(Int32 location, Int32 count, bool transpose, ref Single value);

        /// <summary>[requires: v2.1]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_1", Version = "2.1", EntryPoint = "glUniformMatrix2x4fv")]
        public static extern unsafe void UniformMatrix2x4(Int32 location, Int32 count, bool transpose, Single* value);

        /// <summary>[requires: v4.0 and ARB_gpu_shader_fp64|VERSION_4_0]</summary>
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glUniformMatrix3dv")]
        public static extern void UniformMatrix3(Int32 location, Int32 count, bool transpose, Double[] value);

        /// <summary>[requires: v4.0 and ARB_gpu_shader_fp64|VERSION_4_0]</summary>
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glUniformMatrix3dv")]
        public static extern void UniformMatrix3(Int32 location, Int32 count, bool transpose, ref Double value);

        /// <summary>[requires: v4.0 and ARB_gpu_shader_fp64|VERSION_4_0]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glUniformMatrix3dv")]
        public static extern unsafe void UniformMatrix3(Int32 location, Int32 count, bool transpose, Double* value);

        /// <summary>[requires: v2.0]</summary>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniformMatrix3fv")]
        public static extern void UniformMatrix3(Int32 location, Int32 count, bool transpose, Single[] value);

        /// <summary>[requires: v2.0]</summary>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniformMatrix3fv")]
        public static extern void UniformMatrix3(Int32 location, Int32 count, bool transpose, ref Single value);

        /// <summary>[requires: v2.0]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniformMatrix3fv")]
        public static extern unsafe void UniformMatrix3(Int32 location, Int32 count, bool transpose, Single* value);

        /// <summary>[requires: v4.0 and ARB_gpu_shader_fp64|VERSION_4_0]</summary>
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glUniformMatrix3x2dv")]
        public static extern void UniformMatrix3x2(Int32 location, Int32 count, bool transpose, Double[] value);

        /// <summary>[requires: v4.0 and ARB_gpu_shader_fp64|VERSION_4_0]</summary>
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glUniformMatrix3x2dv")]
        public static extern void UniformMatrix3x2(Int32 location, Int32 count, bool transpose, ref Double value);

        /// <summary>[requires: v4.0 and ARB_gpu_shader_fp64|VERSION_4_0]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glUniformMatrix3x2dv")]
        public static extern unsafe void UniformMatrix3x2(Int32 location, Int32 count, bool transpose, Double* value);

        /// <summary>[requires: v2.1]</summary>
        [AutoGenerated(Category = "VERSION_2_1", Version = "2.1", EntryPoint = "glUniformMatrix3x2fv")]
        public static extern void UniformMatrix3x2(Int32 location, Int32 count, bool transpose, Single[] value);

        /// <summary>[requires: v2.1]</summary>
        [AutoGenerated(Category = "VERSION_2_1", Version = "2.1", EntryPoint = "glUniformMatrix3x2fv")]
        public static extern void UniformMatrix3x2(Int32 location, Int32 count, bool transpose, ref Single value);

        /// <summary>[requires: v2.1]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_1", Version = "2.1", EntryPoint = "glUniformMatrix3x2fv")]
        public static extern unsafe void UniformMatrix3x2(Int32 location, Int32 count, bool transpose, Single* value);

        /// <summary>[requires: v4.0 and ARB_gpu_shader_fp64|VERSION_4_0]</summary>
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glUniformMatrix3x4dv")]
        public static extern void UniformMatrix3x4(Int32 location, Int32 count, bool transpose, Double[] value);

        /// <summary>[requires: v4.0 and ARB_gpu_shader_fp64|VERSION_4_0]</summary>
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glUniformMatrix3x4dv")]
        public static extern void UniformMatrix3x4(Int32 location, Int32 count, bool transpose, ref Double value);

        /// <summary>[requires: v4.0 and ARB_gpu_shader_fp64|VERSION_4_0]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glUniformMatrix3x4dv")]
        public static extern unsafe void UniformMatrix3x4(Int32 location, Int32 count, bool transpose, Double* value);

        /// <summary>[requires: v2.1]</summary>
        [AutoGenerated(Category = "VERSION_2_1", Version = "2.1", EntryPoint = "glUniformMatrix3x4fv")]
        public static extern void UniformMatrix3x4(Int32 location, Int32 count, bool transpose, Single[] value);

        /// <summary>[requires: v2.1]</summary>
        [AutoGenerated(Category = "VERSION_2_1", Version = "2.1", EntryPoint = "glUniformMatrix3x4fv")]
        public static extern void UniformMatrix3x4(Int32 location, Int32 count, bool transpose, ref Single value);

        /// <summary>[requires: v2.1]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_1", Version = "2.1", EntryPoint = "glUniformMatrix3x4fv")]
        public static extern unsafe void UniformMatrix3x4(Int32 location, Int32 count, bool transpose, Single* value);

        /// <summary>[requires: v4.0 and ARB_gpu_shader_fp64|VERSION_4_0]</summary>
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glUniformMatrix4dv")]
        public static extern void UniformMatrix4(Int32 location, Int32 count, bool transpose, Double[] value);

        /// <summary>[requires: v4.0 and ARB_gpu_shader_fp64|VERSION_4_0]</summary>
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glUniformMatrix4dv")]
        public static extern void UniformMatrix4(Int32 location, Int32 count, bool transpose, ref Double value);

        /// <summary>[requires: v4.0 and ARB_gpu_shader_fp64|VERSION_4_0]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glUniformMatrix4dv")]
        public static extern unsafe void UniformMatrix4(Int32 location, Int32 count, bool transpose, Double* value);

        /// <summary>[requires: v2.0]</summary>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniformMatrix4fv")]
        public static extern void UniformMatrix4(Int32 location, Int32 count, bool transpose, Single[] value);

        /// <summary>[requires: v2.0]</summary>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniformMatrix4fv")]
        public static extern void UniformMatrix4(Int32 location, Int32 count, bool transpose, ref Single value);

        /// <summary>[requires: v2.0]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniformMatrix4fv")]
        public static extern unsafe void UniformMatrix4(Int32 location, Int32 count, bool transpose, Single* value);

        /// <summary>[requires: v4.0 and ARB_gpu_shader_fp64|VERSION_4_0]</summary>
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glUniformMatrix4x2dv")]
        public static extern void UniformMatrix4x2(Int32 location, Int32 count, bool transpose, Double[] value);

        /// <summary>[requires: v4.0 and ARB_gpu_shader_fp64|VERSION_4_0]</summary>
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glUniformMatrix4x2dv")]
        public static extern void UniformMatrix4x2(Int32 location, Int32 count, bool transpose, ref Double value);

        /// <summary>[requires: v4.0 and ARB_gpu_shader_fp64|VERSION_4_0]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glUniformMatrix4x2dv")]
        public static extern unsafe void UniformMatrix4x2(Int32 location, Int32 count, bool transpose, Double* value);

        /// <summary>[requires: v2.1]</summary>
        [AutoGenerated(Category = "VERSION_2_1", Version = "2.1", EntryPoint = "glUniformMatrix4x2fv")]
        public static extern void UniformMatrix4x2(Int32 location, Int32 count, bool transpose, Single[] value);

        /// <summary>[requires: v2.1]</summary>
        [AutoGenerated(Category = "VERSION_2_1", Version = "2.1", EntryPoint = "glUniformMatrix4x2fv")]
        public static extern void UniformMatrix4x2(Int32 location, Int32 count, bool transpose, ref Single value);

        /// <summary>[requires: v2.1]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_1", Version = "2.1", EntryPoint = "glUniformMatrix4x2fv")]
        public static extern unsafe void UniformMatrix4x2(Int32 location, Int32 count, bool transpose, Single* value);

        /// <summary>[requires: v4.0 and ARB_gpu_shader_fp64|VERSION_4_0]</summary>
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glUniformMatrix4x3dv")]
        public static extern void UniformMatrix4x3(Int32 location, Int32 count, bool transpose, Double[] value);

        /// <summary>[requires: v4.0 and ARB_gpu_shader_fp64|VERSION_4_0]</summary>
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glUniformMatrix4x3dv")]
        public static extern void UniformMatrix4x3(Int32 location, Int32 count, bool transpose, ref Double value);

        /// <summary>[requires: v4.0 and ARB_gpu_shader_fp64|VERSION_4_0]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glUniformMatrix4x3dv")]
        public static extern unsafe void UniformMatrix4x3(Int32 location, Int32 count, bool transpose, Double* value);

        /// <summary>[requires: v2.1]</summary>
        [AutoGenerated(Category = "VERSION_2_1", Version = "2.1", EntryPoint = "glUniformMatrix4x3fv")]
        public static extern void UniformMatrix4x3(Int32 location, Int32 count, bool transpose, Single[] value);

        /// <summary>[requires: v2.1]</summary>
        [AutoGenerated(Category = "VERSION_2_1", Version = "2.1", EntryPoint = "glUniformMatrix4x3fv")]
        public static extern void UniformMatrix4x3(Int32 location, Int32 count, bool transpose, ref Single value);

        /// <summary>[requires: v2.1]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_1", Version = "2.1", EntryPoint = "glUniformMatrix4x3fv")]
        public static extern unsafe void UniformMatrix4x3(Int32 location, Int32 count, bool transpose, Single* value);

        /// <summary>[requires: v4.0 and ARB_shader_subroutine|VERSION_4_0]
        /// Load active subroutine uniforms
        /// </summary>
        /// <param name="shadertype">
        /// <para>
        /// Specifies the shader stage from which to query for subroutine uniform index. shadertype must be one of GL_VERTEX_SHADER, GL_TESS_CONTROL_SHADER, GL_TESS_EVALUATION_SHADER, GL_GEOMETRY_SHADER or GL_FRAGMENT_SHADER.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of uniform indices stored in indices.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies the address of an array holding the indices to load into the shader subroutine variables.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_shader_subroutine|VERSION_4_0", Version = "4.0", EntryPoint = "glUniformSubroutinesuiv")]
        public static extern void UniformSubroutines(OpenTK.Graphics.OpenGL4.ShaderType shadertype, Int32 count, Int32[] indices);

        /// <summary>[requires: v4.0 and ARB_shader_subroutine|VERSION_4_0]
        /// Load active subroutine uniforms
        /// </summary>
        /// <param name="shadertype">
        /// <para>
        /// Specifies the shader stage from which to query for subroutine uniform index. shadertype must be one of GL_VERTEX_SHADER, GL_TESS_CONTROL_SHADER, GL_TESS_EVALUATION_SHADER, GL_GEOMETRY_SHADER or GL_FRAGMENT_SHADER.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of uniform indices stored in indices.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies the address of an array holding the indices to load into the shader subroutine variables.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_shader_subroutine|VERSION_4_0", Version = "4.0", EntryPoint = "glUniformSubroutinesuiv")]
        public static extern void UniformSubroutines(OpenTK.Graphics.OpenGL4.ShaderType shadertype, Int32 count, ref Int32 indices);

        /// <summary>[requires: v4.0 and ARB_shader_subroutine|VERSION_4_0]
        /// Load active subroutine uniforms
        /// </summary>
        /// <param name="shadertype">
        /// <para>
        /// Specifies the shader stage from which to query for subroutine uniform index. shadertype must be one of GL_VERTEX_SHADER, GL_TESS_CONTROL_SHADER, GL_TESS_EVALUATION_SHADER, GL_GEOMETRY_SHADER or GL_FRAGMENT_SHADER.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of uniform indices stored in indices.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies the address of an array holding the indices to load into the shader subroutine variables.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_shader_subroutine|VERSION_4_0", Version = "4.0", EntryPoint = "glUniformSubroutinesuiv")]
        public static extern unsafe void UniformSubroutines(OpenTK.Graphics.OpenGL4.ShaderType shadertype, Int32 count, Int32* indices);

        /// <summary>[requires: v4.0 and ARB_shader_subroutine|VERSION_4_0]
        /// Load active subroutine uniforms
        /// </summary>
        /// <param name="shadertype">
        /// <para>
        /// Specifies the shader stage from which to query for subroutine uniform index. shadertype must be one of GL_VERTEX_SHADER, GL_TESS_CONTROL_SHADER, GL_TESS_EVALUATION_SHADER, GL_GEOMETRY_SHADER or GL_FRAGMENT_SHADER.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of uniform indices stored in indices.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies the address of an array holding the indices to load into the shader subroutine variables.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_shader_subroutine|VERSION_4_0", Version = "4.0", EntryPoint = "glUniformSubroutinesuiv")]
        public static extern void UniformSubroutines(OpenTK.Graphics.OpenGL4.ShaderType shadertype, Int32 count, UInt32[] indices);

        /// <summary>[requires: v4.0 and ARB_shader_subroutine|VERSION_4_0]
        /// Load active subroutine uniforms
        /// </summary>
        /// <param name="shadertype">
        /// <para>
        /// Specifies the shader stage from which to query for subroutine uniform index. shadertype must be one of GL_VERTEX_SHADER, GL_TESS_CONTROL_SHADER, GL_TESS_EVALUATION_SHADER, GL_GEOMETRY_SHADER or GL_FRAGMENT_SHADER.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of uniform indices stored in indices.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies the address of an array holding the indices to load into the shader subroutine variables.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_shader_subroutine|VERSION_4_0", Version = "4.0", EntryPoint = "glUniformSubroutinesuiv")]
        public static extern void UniformSubroutines(OpenTK.Graphics.OpenGL4.ShaderType shadertype, Int32 count, ref UInt32 indices);

        /// <summary>[requires: v4.0 and ARB_shader_subroutine|VERSION_4_0]
        /// Load active subroutine uniforms
        /// </summary>
        /// <param name="shadertype">
        /// <para>
        /// Specifies the shader stage from which to query for subroutine uniform index. shadertype must be one of GL_VERTEX_SHADER, GL_TESS_CONTROL_SHADER, GL_TESS_EVALUATION_SHADER, GL_GEOMETRY_SHADER or GL_FRAGMENT_SHADER.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of uniform indices stored in indices.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies the address of an array holding the indices to load into the shader subroutine variables.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_shader_subroutine|VERSION_4_0", Version = "4.0", EntryPoint = "glUniformSubroutinesuiv")]
        public static extern unsafe void UniformSubroutines(OpenTK.Graphics.OpenGL4.ShaderType shadertype, Int32 count, UInt32* indices);

        /// <summary>[requires: v1.5]</summary>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glUnmapBuffer")]
        public static extern bool UnmapBuffer(OpenTK.Graphics.OpenGL4.BufferTarget target);

        /// <summary>[requires: v2.0]
        /// Installs a program object as part of current rendering state
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program object whose executables are to be used as part of current rendering state.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUseProgram")]
        public static extern void UseProgram(Int32 program);

        /// <summary>[requires: v2.0]
        /// Installs a program object as part of current rendering state
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program object whose executables are to be used as part of current rendering state.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUseProgram")]
        public static extern void UseProgram(UInt32 program);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Bind stages of a program object to a program pipeline
        /// </summary>
        /// <param name="pipeline">
        /// <para>
        /// Specifies the program pipeline object to which to bind stages from program.
        /// </para>
        /// </param>
        /// <param name="stages">
        /// <para>
        /// Specifies a set of program stages to bind to the program pipeline object.
        /// </para>
        /// </param>
        /// <param name="program">
        /// <para>
        /// Specifies the program object containing the shader executables to use in pipeline.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glUseProgramStages")]
        public static extern void UseProgramStages(Int32 pipeline, OpenTK.Graphics.OpenGL4.ProgramStageMask stages, Int32 program);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Bind stages of a program object to a program pipeline
        /// </summary>
        /// <param name="pipeline">
        /// <para>
        /// Specifies the program pipeline object to which to bind stages from program.
        /// </para>
        /// </param>
        /// <param name="stages">
        /// <para>
        /// Specifies a set of program stages to bind to the program pipeline object.
        /// </para>
        /// </param>
        /// <param name="program">
        /// <para>
        /// Specifies the program object containing the shader executables to use in pipeline.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glUseProgramStages")]
        public static extern void UseProgramStages(UInt32 pipeline, OpenTK.Graphics.OpenGL4.ProgramStageMask stages, UInt32 program);

        /// <summary>[requires: v2.0]
        /// Validates a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program object to be validated.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glValidateProgram")]
        public static extern void ValidateProgram(Int32 program);

        /// <summary>[requires: v2.0]
        /// Validates a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program object to be validated.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glValidateProgram")]
        public static extern void ValidateProgram(UInt32 program);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Validate a program pipeline object against current GL state
        /// </summary>
        /// <param name="pipeline">
        /// <para>
        /// Specifies the name of a program pipeline object to validate.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glValidateProgramPipeline")]
        public static extern void ValidateProgramPipeline(Int32 pipeline);

        /// <summary>[requires: v4.1 and ARB_separate_shader_objects|VERSION_4_1]
        /// Validate a program pipeline object against current GL state
        /// </summary>
        /// <param name="pipeline">
        /// <para>
        /// Specifies the name of a program pipeline object to validate.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glValidateProgramPipeline")]
        public static extern void ValidateProgramPipeline(UInt32 pipeline);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// For the packed commands (glVertexAttribP*), specified the type of packing used on the data. This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, to specify signed or unsigned data, respectively, or GL_UNSIGNED_INT_10F_11F_11F_REV to specify floating point data.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For the packed commands, if GL_TRUE, then the values are to be converted to floating point values by normalizing. Otherwise, they are converted directly to floating-point values. If type indicates a floating-pont format, then normalized value must be GL_FALSE.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the packed commands, specifies the new packed value to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib1d")]
        public static extern void VertexAttrib1(Int32 index, Double x);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// For the packed commands (glVertexAttribP*), specified the type of packing used on the data. This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, to specify signed or unsigned data, respectively, or GL_UNSIGNED_INT_10F_11F_11F_REV to specify floating point data.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For the packed commands, if GL_TRUE, then the values are to be converted to floating point values by normalizing. Otherwise, they are converted directly to floating-point values. If type indicates a floating-pont format, then normalized value must be GL_FALSE.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the packed commands, specifies the new packed value to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib1d")]
        public static extern void VertexAttrib1(UInt32 index, Double x);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// For the packed commands (glVertexAttribP*), specified the type of packing used on the data. This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, to specify signed or unsigned data, respectively, or GL_UNSIGNED_INT_10F_11F_11F_REV to specify floating point data.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For the packed commands, if GL_TRUE, then the values are to be converted to floating point values by normalizing. Otherwise, they are converted directly to floating-point values. If type indicates a floating-pont format, then normalized value must be GL_FALSE.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the packed commands, specifies the new packed value to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib1dv")]
        public static extern unsafe void VertexAttrib1(Int32 index, Double* v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// For the packed commands (glVertexAttribP*), specified the type of packing used on the data. This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, to specify signed or unsigned data, respectively, or GL_UNSIGNED_INT_10F_11F_11F_REV to specify floating point data.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For the packed commands, if GL_TRUE, then the values are to be converted to floating point values by normalizing. Otherwise, they are converted directly to floating-point values. If type indicates a floating-pont format, then normalized value must be GL_FALSE.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the packed commands, specifies the new packed value to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib1dv")]
        public static extern unsafe void VertexAttrib1(UInt32 index, Double* v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// For the packed commands (glVertexAttribP*), specified the type of packing used on the data. This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, to specify signed or unsigned data, respectively, or GL_UNSIGNED_INT_10F_11F_11F_REV to specify floating point data.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For the packed commands, if GL_TRUE, then the values are to be converted to floating point values by normalizing. Otherwise, they are converted directly to floating-point values. If type indicates a floating-pont format, then normalized value must be GL_FALSE.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the packed commands, specifies the new packed value to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib1f")]
        public static extern void VertexAttrib1(Int32 index, Single x);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// For the packed commands (glVertexAttribP*), specified the type of packing used on the data. This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, to specify signed or unsigned data, respectively, or GL_UNSIGNED_INT_10F_11F_11F_REV to specify floating point data.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For the packed commands, if GL_TRUE, then the values are to be converted to floating point values by normalizing. Otherwise, they are converted directly to floating-point values. If type indicates a floating-pont format, then normalized value must be GL_FALSE.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the packed commands, specifies the new packed value to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib1f")]
        public static extern void VertexAttrib1(UInt32 index, Single x);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// For the packed commands (glVertexAttribP*), specified the type of packing used on the data. This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, to specify signed or unsigned data, respectively, or GL_UNSIGNED_INT_10F_11F_11F_REV to specify floating point data.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For the packed commands, if GL_TRUE, then the values are to be converted to floating point values by normalizing. Otherwise, they are converted directly to floating-point values. If type indicates a floating-pont format, then normalized value must be GL_FALSE.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the packed commands, specifies the new packed value to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib1fv")]
        public static extern unsafe void VertexAttrib1(Int32 index, Single* v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// For the packed commands (glVertexAttribP*), specified the type of packing used on the data. This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, to specify signed or unsigned data, respectively, or GL_UNSIGNED_INT_10F_11F_11F_REV to specify floating point data.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For the packed commands, if GL_TRUE, then the values are to be converted to floating point values by normalizing. Otherwise, they are converted directly to floating-point values. If type indicates a floating-pont format, then normalized value must be GL_FALSE.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the packed commands, specifies the new packed value to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib1fv")]
        public static extern unsafe void VertexAttrib1(UInt32 index, Single* v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// For the packed commands (glVertexAttribP*), specified the type of packing used on the data. This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, to specify signed or unsigned data, respectively, or GL_UNSIGNED_INT_10F_11F_11F_REV to specify floating point data.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For the packed commands, if GL_TRUE, then the values are to be converted to floating point values by normalizing. Otherwise, they are converted directly to floating-point values. If type indicates a floating-pont format, then normalized value must be GL_FALSE.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the packed commands, specifies the new packed value to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib1s")]
        public static extern void VertexAttrib1(Int32 index, Int16 x);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// For the packed commands (glVertexAttribP*), specified the type of packing used on the data. This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, to specify signed or unsigned data, respectively, or GL_UNSIGNED_INT_10F_11F_11F_REV to specify floating point data.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For the packed commands, if GL_TRUE, then the values are to be converted to floating point values by normalizing. Otherwise, they are converted directly to floating-point values. If type indicates a floating-pont format, then normalized value must be GL_FALSE.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the packed commands, specifies the new packed value to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib1s")]
        public static extern void VertexAttrib1(UInt32 index, Int16 x);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// For the packed commands (glVertexAttribP*), specified the type of packing used on the data. This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, to specify signed or unsigned data, respectively, or GL_UNSIGNED_INT_10F_11F_11F_REV to specify floating point data.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For the packed commands, if GL_TRUE, then the values are to be converted to floating point values by normalizing. Otherwise, they are converted directly to floating-point values. If type indicates a floating-pont format, then normalized value must be GL_FALSE.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the packed commands, specifies the new packed value to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib1sv")]
        public static extern unsafe void VertexAttrib1(Int32 index, Int16* v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// For the packed commands (glVertexAttribP*), specified the type of packing used on the data. This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, to specify signed or unsigned data, respectively, or GL_UNSIGNED_INT_10F_11F_11F_REV to specify floating point data.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For the packed commands, if GL_TRUE, then the values are to be converted to floating point values by normalizing. Otherwise, they are converted directly to floating-point values. If type indicates a floating-pont format, then normalized value must be GL_FALSE.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the packed commands, specifies the new packed value to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib1sv")]
        public static extern unsafe void VertexAttrib1(UInt32 index, Int16* v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// For the packed commands (glVertexAttribP*), specified the type of packing used on the data. This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, to specify signed or unsigned data, respectively, or GL_UNSIGNED_INT_10F_11F_11F_REV to specify floating point data.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For the packed commands, if GL_TRUE, then the values are to be converted to floating point values by normalizing. Otherwise, they are converted directly to floating-point values. If type indicates a floating-pont format, then normalized value must be GL_FALSE.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the packed commands, specifies the new packed value to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib2d")]
        public static extern void VertexAttrib2(Int32 index, Double x, Double y);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// For the packed commands (glVertexAttribP*), specified the type of packing used on the data. This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, to specify signed or unsigned data, respectively, or GL_UNSIGNED_INT_10F_11F_11F_REV to specify floating point data.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For the packed commands, if GL_TRUE, then the values are to be converted to floating point values by normalizing. Otherwise, they are converted directly to floating-point values. If type indicates a floating-pont format, then normalized value must be GL_FALSE.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the packed commands, specifies the new packed value to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib2d")]
        public static extern void VertexAttrib2(UInt32 index, Double x, Double y);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// For the packed commands (glVertexAttribP*), specified the type of packing used on the data. This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, to specify signed or unsigned data, respectively, or GL_UNSIGNED_INT_10F_11F_11F_REV to specify floating point data.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For the packed commands, if GL_TRUE, then the values are to be converted to floating point values by normalizing. Otherwise, they are converted directly to floating-point values. If type indicates a floating-pont format, then normalized value must be GL_FALSE.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the packed commands, specifies the new packed value to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib2dv")]
        public static extern void VertexAttrib2(Int32 index, Double[] v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// For the packed commands (glVertexAttribP*), specified the type of packing used on the data. This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, to specify signed or unsigned data, respectively, or GL_UNSIGNED_INT_10F_11F_11F_REV to specify floating point data.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For the packed commands, if GL_TRUE, then the values are to be converted to floating point values by normalizing. Otherwise, they are converted directly to floating-point values. If type indicates a floating-pont format, then normalized value must be GL_FALSE.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the packed commands, specifies the new packed value to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib2dv")]
        public static extern void VertexAttrib2(Int32 index, ref Double v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// For the packed commands (glVertexAttribP*), specified the type of packing used on the data. This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, to specify signed or unsigned data, respectively, or GL_UNSIGNED_INT_10F_11F_11F_REV to specify floating point data.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For the packed commands, if GL_TRUE, then the values are to be converted to floating point values by normalizing. Otherwise, they are converted directly to floating-point values. If type indicates a floating-pont format, then normalized value must be GL_FALSE.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the packed commands, specifies the new packed value to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib2dv")]
        public static extern unsafe void VertexAttrib2(Int32 index, Double* v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// For the packed commands (glVertexAttribP*), specified the type of packing used on the data. This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, to specify signed or unsigned data, respectively, or GL_UNSIGNED_INT_10F_11F_11F_REV to specify floating point data.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For the packed commands, if GL_TRUE, then the values are to be converted to floating point values by normalizing. Otherwise, they are converted directly to floating-point values. If type indicates a floating-pont format, then normalized value must be GL_FALSE.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the packed commands, specifies the new packed value to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib2dv")]
        public static extern void VertexAttrib2(UInt32 index, Double[] v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// For the packed commands (glVertexAttribP*), specified the type of packing used on the data. This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, to specify signed or unsigned data, respectively, or GL_UNSIGNED_INT_10F_11F_11F_REV to specify floating point data.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For the packed commands, if GL_TRUE, then the values are to be converted to floating point values by normalizing. Otherwise, they are converted directly to floating-point values. If type indicates a floating-pont format, then normalized value must be GL_FALSE.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the packed commands, specifies the new packed value to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib2dv")]
        public static extern void VertexAttrib2(UInt32 index, ref Double v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// For the packed commands (glVertexAttribP*), specified the type of packing used on the data. This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, to specify signed or unsigned data, respectively, or GL_UNSIGNED_INT_10F_11F_11F_REV to specify floating point data.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For the packed commands, if GL_TRUE, then the values are to be converted to floating point values by normalizing. Otherwise, they are converted directly to floating-point values. If type indicates a floating-pont format, then normalized value must be GL_FALSE.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the packed commands, specifies the new packed value to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib2dv")]
        public static extern unsafe void VertexAttrib2(UInt32 index, Double* v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// For the packed commands (glVertexAttribP*), specified the type of packing used on the data. This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, to specify signed or unsigned data, respectively, or GL_UNSIGNED_INT_10F_11F_11F_REV to specify floating point data.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For the packed commands, if GL_TRUE, then the values are to be converted to floating point values by normalizing. Otherwise, they are converted directly to floating-point values. If type indicates a floating-pont format, then normalized value must be GL_FALSE.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the packed commands, specifies the new packed value to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib2f")]
        public static extern void VertexAttrib2(Int32 index, Single x, Single y);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// For the packed commands (glVertexAttribP*), specified the type of packing used on the data. This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, to specify signed or unsigned data, respectively, or GL_UNSIGNED_INT_10F_11F_11F_REV to specify floating point data.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For the packed commands, if GL_TRUE, then the values are to be converted to floating point values by normalizing. Otherwise, they are converted directly to floating-point values. If type indicates a floating-pont format, then normalized value must be GL_FALSE.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the packed commands, specifies the new packed value to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib2f")]
        public static extern void VertexAttrib2(UInt32 index, Single x, Single y);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// For the packed commands (glVertexAttribP*), specified the type of packing used on the data. This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, to specify signed or unsigned data, respectively, or GL_UNSIGNED_INT_10F_11F_11F_REV to specify floating point data.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For the packed commands, if GL_TRUE, then the values are to be converted to floating point values by normalizing. Otherwise, they are converted directly to floating-point values. If type indicates a floating-pont format, then normalized value must be GL_FALSE.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the packed commands, specifies the new packed value to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib2fv")]
        public static extern void VertexAttrib2(Int32 index, Single[] v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// For the packed commands (glVertexAttribP*), specified the type of packing used on the data. This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, to specify signed or unsigned data, respectively, or GL_UNSIGNED_INT_10F_11F_11F_REV to specify floating point data.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For the packed commands, if GL_TRUE, then the values are to be converted to floating point values by normalizing. Otherwise, they are converted directly to floating-point values. If type indicates a floating-pont format, then normalized value must be GL_FALSE.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the packed commands, specifies the new packed value to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib2fv")]
        public static extern void VertexAttrib2(Int32 index, ref Single v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// For the packed commands (glVertexAttribP*), specified the type of packing used on the data. This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, to specify signed or unsigned data, respectively, or GL_UNSIGNED_INT_10F_11F_11F_REV to specify floating point data.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For the packed commands, if GL_TRUE, then the values are to be converted to floating point values by normalizing. Otherwise, they are converted directly to floating-point values. If type indicates a floating-pont format, then normalized value must be GL_FALSE.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the packed commands, specifies the new packed value to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib2fv")]
        public static extern unsafe void VertexAttrib2(Int32 index, Single* v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// For the packed commands (glVertexAttribP*), specified the type of packing used on the data. This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, to specify signed or unsigned data, respectively, or GL_UNSIGNED_INT_10F_11F_11F_REV to specify floating point data.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For the packed commands, if GL_TRUE, then the values are to be converted to floating point values by normalizing. Otherwise, they are converted directly to floating-point values. If type indicates a floating-pont format, then normalized value must be GL_FALSE.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the packed commands, specifies the new packed value to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib2fv")]
        public static extern void VertexAttrib2(UInt32 index, Single[] v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// For the packed commands (glVertexAttribP*), specified the type of packing used on the data. This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, to specify signed or unsigned data, respectively, or GL_UNSIGNED_INT_10F_11F_11F_REV to specify floating point data.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For the packed commands, if GL_TRUE, then the values are to be converted to floating point values by normalizing. Otherwise, they are converted directly to floating-point values. If type indicates a floating-pont format, then normalized value must be GL_FALSE.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the packed commands, specifies the new packed value to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib2fv")]
        public static extern void VertexAttrib2(UInt32 index, ref Single v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// For the packed commands (glVertexAttribP*), specified the type of packing used on the data. This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, to specify signed or unsigned data, respectively, or GL_UNSIGNED_INT_10F_11F_11F_REV to specify floating point data.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For the packed commands, if GL_TRUE, then the values are to be converted to floating point values by normalizing. Otherwise, they are converted directly to floating-point values. If type indicates a floating-pont format, then normalized value must be GL_FALSE.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the packed commands, specifies the new packed value to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib2fv")]
        public static extern unsafe void VertexAttrib2(UInt32 index, Single* v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// For the packed commands (glVertexAttribP*), specified the type of packing used on the data. This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, to specify signed or unsigned data, respectively, or GL_UNSIGNED_INT_10F_11F_11F_REV to specify floating point data.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For the packed commands, if GL_TRUE, then the values are to be converted to floating point values by normalizing. Otherwise, they are converted directly to floating-point values. If type indicates a floating-pont format, then normalized value must be GL_FALSE.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the packed commands, specifies the new packed value to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib2s")]
        public static extern void VertexAttrib2(Int32 index, Int16 x, Int16 y);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// For the packed commands (glVertexAttribP*), specified the type of packing used on the data. This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, to specify signed or unsigned data, respectively, or GL_UNSIGNED_INT_10F_11F_11F_REV to specify floating point data.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For the packed commands, if GL_TRUE, then the values are to be converted to floating point values by normalizing. Otherwise, they are converted directly to floating-point values. If type indicates a floating-pont format, then normalized value must be GL_FALSE.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the packed commands, specifies the new packed value to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib2s")]
        public static extern void VertexAttrib2(UInt32 index, Int16 x, Int16 y);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// For the packed commands (glVertexAttribP*), specified the type of packing used on the data. This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, to specify signed or unsigned data, respectively, or GL_UNSIGNED_INT_10F_11F_11F_REV to specify floating point data.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For the packed commands, if GL_TRUE, then the values are to be converted to floating point values by normalizing. Otherwise, they are converted directly to floating-point values. If type indicates a floating-pont format, then normalized value must be GL_FALSE.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the packed commands, specifies the new packed value to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib2sv")]
        public static extern void VertexAttrib2(Int32 index, Int16[] v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// For the packed commands (glVertexAttribP*), specified the type of packing used on the data. This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, to specify signed or unsigned data, respectively, or GL_UNSIGNED_INT_10F_11F_11F_REV to specify floating point data.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For the packed commands, if GL_TRUE, then the values are to be converted to floating point values by normalizing. Otherwise, they are converted directly to floating-point values. If type indicates a floating-pont format, then normalized value must be GL_FALSE.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the packed commands, specifies the new packed value to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib2sv")]
        public static extern void VertexAttrib2(Int32 index, ref Int16 v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// For the packed commands (glVertexAttribP*), specified the type of packing used on the data. This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, to specify signed or unsigned data, respectively, or GL_UNSIGNED_INT_10F_11F_11F_REV to specify floating point data.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For the packed commands, if GL_TRUE, then the values are to be converted to floating point values by normalizing. Otherwise, they are converted directly to floating-point values. If type indicates a floating-pont format, then normalized value must be GL_FALSE.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the packed commands, specifies the new packed value to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib2sv")]
        public static extern unsafe void VertexAttrib2(Int32 index, Int16* v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// For the packed commands (glVertexAttribP*), specified the type of packing used on the data. This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, to specify signed or unsigned data, respectively, or GL_UNSIGNED_INT_10F_11F_11F_REV to specify floating point data.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For the packed commands, if GL_TRUE, then the values are to be converted to floating point values by normalizing. Otherwise, they are converted directly to floating-point values. If type indicates a floating-pont format, then normalized value must be GL_FALSE.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the packed commands, specifies the new packed value to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib2sv")]
        public static extern void VertexAttrib2(UInt32 index, Int16[] v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// For the packed commands (glVertexAttribP*), specified the type of packing used on the data. This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, to specify signed or unsigned data, respectively, or GL_UNSIGNED_INT_10F_11F_11F_REV to specify floating point data.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For the packed commands, if GL_TRUE, then the values are to be converted to floating point values by normalizing. Otherwise, they are converted directly to floating-point values. If type indicates a floating-pont format, then normalized value must be GL_FALSE.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the packed commands, specifies the new packed value to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib2sv")]
        public static extern void VertexAttrib2(UInt32 index, ref Int16 v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// For the packed commands (glVertexAttribP*), specified the type of packing used on the data. This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, to specify signed or unsigned data, respectively, or GL_UNSIGNED_INT_10F_11F_11F_REV to specify floating point data.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For the packed commands, if GL_TRUE, then the values are to be converted to floating point values by normalizing. Otherwise, they are converted directly to floating-point values. If type indicates a floating-pont format, then normalized value must be GL_FALSE.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the packed commands, specifies the new packed value to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib2sv")]
        public static extern unsafe void VertexAttrib2(UInt32 index, Int16* v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// For the packed commands (glVertexAttribP*), specified the type of packing used on the data. This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, to specify signed or unsigned data, respectively, or GL_UNSIGNED_INT_10F_11F_11F_REV to specify floating point data.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For the packed commands, if GL_TRUE, then the values are to be converted to floating point values by normalizing. Otherwise, they are converted directly to floating-point values. If type indicates a floating-pont format, then normalized value must be GL_FALSE.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the packed commands, specifies the new packed value to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib3d")]
        public static extern void VertexAttrib3(Int32 index, Double x, Double y, Double z);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// For the packed commands (glVertexAttribP*), specified the type of packing used on the data. This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, to specify signed or unsigned data, respectively, or GL_UNSIGNED_INT_10F_11F_11F_REV to specify floating point data.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For the packed commands, if GL_TRUE, then the values are to be converted to floating point values by normalizing. Otherwise, they are converted directly to floating-point values. If type indicates a floating-pont format, then normalized value must be GL_FALSE.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the packed commands, specifies the new packed value to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib3d")]
        public static extern void VertexAttrib3(UInt32 index, Double x, Double y, Double z);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// For the packed commands (glVertexAttribP*), specified the type of packing used on the data. This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, to specify signed or unsigned data, respectively, or GL_UNSIGNED_INT_10F_11F_11F_REV to specify floating point data.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For the packed commands, if GL_TRUE, then the values are to be converted to floating point values by normalizing. Otherwise, they are converted directly to floating-point values. If type indicates a floating-pont format, then normalized value must be GL_FALSE.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the packed commands, specifies the new packed value to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib3dv")]
        public static extern void VertexAttrib3(Int32 index, Double[] v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// For the packed commands (glVertexAttribP*), specified the type of packing used on the data. This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, to specify signed or unsigned data, respectively, or GL_UNSIGNED_INT_10F_11F_11F_REV to specify floating point data.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For the packed commands, if GL_TRUE, then the values are to be converted to floating point values by normalizing. Otherwise, they are converted directly to floating-point values. If type indicates a floating-pont format, then normalized value must be GL_FALSE.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the packed commands, specifies the new packed value to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib3dv")]
        public static extern void VertexAttrib3(Int32 index, ref Double v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// For the packed commands (glVertexAttribP*), specified the type of packing used on the data. This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, to specify signed or unsigned data, respectively, or GL_UNSIGNED_INT_10F_11F_11F_REV to specify floating point data.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For the packed commands, if GL_TRUE, then the values are to be converted to floating point values by normalizing. Otherwise, they are converted directly to floating-point values. If type indicates a floating-pont format, then normalized value must be GL_FALSE.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the packed commands, specifies the new packed value to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib3dv")]
        public static extern unsafe void VertexAttrib3(Int32 index, Double* v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// For the packed commands (glVertexAttribP*), specified the type of packing used on the data. This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, to specify signed or unsigned data, respectively, or GL_UNSIGNED_INT_10F_11F_11F_REV to specify floating point data.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For the packed commands, if GL_TRUE, then the values are to be converted to floating point values by normalizing. Otherwise, they are converted directly to floating-point values. If type indicates a floating-pont format, then normalized value must be GL_FALSE.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the packed commands, specifies the new packed value to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib3dv")]
        public static extern void VertexAttrib3(UInt32 index, Double[] v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// For the packed commands (glVertexAttribP*), specified the type of packing used on the data. This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, to specify signed or unsigned data, respectively, or GL_UNSIGNED_INT_10F_11F_11F_REV to specify floating point data.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For the packed commands, if GL_TRUE, then the values are to be converted to floating point values by normalizing. Otherwise, they are converted directly to floating-point values. If type indicates a floating-pont format, then normalized value must be GL_FALSE.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the packed commands, specifies the new packed value to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib3dv")]
        public static extern void VertexAttrib3(UInt32 index, ref Double v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// For the packed commands (glVertexAttribP*), specified the type of packing used on the data. This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, to specify signed or unsigned data, respectively, or GL_UNSIGNED_INT_10F_11F_11F_REV to specify floating point data.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For the packed commands, if GL_TRUE, then the values are to be converted to floating point values by normalizing. Otherwise, they are converted directly to floating-point values. If type indicates a floating-pont format, then normalized value must be GL_FALSE.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the packed commands, specifies the new packed value to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib3dv")]
        public static extern unsafe void VertexAttrib3(UInt32 index, Double* v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// For the packed commands (glVertexAttribP*), specified the type of packing used on the data. This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, to specify signed or unsigned data, respectively, or GL_UNSIGNED_INT_10F_11F_11F_REV to specify floating point data.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For the packed commands, if GL_TRUE, then the values are to be converted to floating point values by normalizing. Otherwise, they are converted directly to floating-point values. If type indicates a floating-pont format, then normalized value must be GL_FALSE.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the packed commands, specifies the new packed value to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib3f")]
        public static extern void VertexAttrib3(Int32 index, Single x, Single y, Single z);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// For the packed commands (glVertexAttribP*), specified the type of packing used on the data. This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, to specify signed or unsigned data, respectively, or GL_UNSIGNED_INT_10F_11F_11F_REV to specify floating point data.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For the packed commands, if GL_TRUE, then the values are to be converted to floating point values by normalizing. Otherwise, they are converted directly to floating-point values. If type indicates a floating-pont format, then normalized value must be GL_FALSE.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the packed commands, specifies the new packed value to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib3f")]
        public static extern void VertexAttrib3(UInt32 index, Single x, Single y, Single z);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// For the packed commands (glVertexAttribP*), specified the type of packing used on the data. This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, to specify signed or unsigned data, respectively, or GL_UNSIGNED_INT_10F_11F_11F_REV to specify floating point data.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For the packed commands, if GL_TRUE, then the values are to be converted to floating point values by normalizing. Otherwise, they are converted directly to floating-point values. If type indicates a floating-pont format, then normalized value must be GL_FALSE.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the packed commands, specifies the new packed value to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib3fv")]
        public static extern void VertexAttrib3(Int32 index, Single[] v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// For the packed commands (glVertexAttribP*), specified the type of packing used on the data. This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, to specify signed or unsigned data, respectively, or GL_UNSIGNED_INT_10F_11F_11F_REV to specify floating point data.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For the packed commands, if GL_TRUE, then the values are to be converted to floating point values by normalizing. Otherwise, they are converted directly to floating-point values. If type indicates a floating-pont format, then normalized value must be GL_FALSE.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the packed commands, specifies the new packed value to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib3fv")]
        public static extern void VertexAttrib3(Int32 index, ref Single v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// For the packed commands (glVertexAttribP*), specified the type of packing used on the data. This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, to specify signed or unsigned data, respectively, or GL_UNSIGNED_INT_10F_11F_11F_REV to specify floating point data.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For the packed commands, if GL_TRUE, then the values are to be converted to floating point values by normalizing. Otherwise, they are converted directly to floating-point values. If type indicates a floating-pont format, then normalized value must be GL_FALSE.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the packed commands, specifies the new packed value to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib3fv")]
        public static extern unsafe void VertexAttrib3(Int32 index, Single* v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// For the packed commands (glVertexAttribP*), specified the type of packing used on the data. This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, to specify signed or unsigned data, respectively, or GL_UNSIGNED_INT_10F_11F_11F_REV to specify floating point data.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For the packed commands, if GL_TRUE, then the values are to be converted to floating point values by normalizing. Otherwise, they are converted directly to floating-point values. If type indicates a floating-pont format, then normalized value must be GL_FALSE.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the packed commands, specifies the new packed value to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib3fv")]
        public static extern void VertexAttrib3(UInt32 index, Single[] v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// For the packed commands (glVertexAttribP*), specified the type of packing used on the data. This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, to specify signed or unsigned data, respectively, or GL_UNSIGNED_INT_10F_11F_11F_REV to specify floating point data.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For the packed commands, if GL_TRUE, then the values are to be converted to floating point values by normalizing. Otherwise, they are converted directly to floating-point values. If type indicates a floating-pont format, then normalized value must be GL_FALSE.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the packed commands, specifies the new packed value to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib3fv")]
        public static extern void VertexAttrib3(UInt32 index, ref Single v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// For the packed commands (glVertexAttribP*), specified the type of packing used on the data. This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, to specify signed or unsigned data, respectively, or GL_UNSIGNED_INT_10F_11F_11F_REV to specify floating point data.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For the packed commands, if GL_TRUE, then the values are to be converted to floating point values by normalizing. Otherwise, they are converted directly to floating-point values. If type indicates a floating-pont format, then normalized value must be GL_FALSE.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the packed commands, specifies the new packed value to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib3fv")]
        public static extern unsafe void VertexAttrib3(UInt32 index, Single* v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// For the packed commands (glVertexAttribP*), specified the type of packing used on the data. This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, to specify signed or unsigned data, respectively, or GL_UNSIGNED_INT_10F_11F_11F_REV to specify floating point data.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For the packed commands, if GL_TRUE, then the values are to be converted to floating point values by normalizing. Otherwise, they are converted directly to floating-point values. If type indicates a floating-pont format, then normalized value must be GL_FALSE.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the packed commands, specifies the new packed value to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib3s")]
        public static extern void VertexAttrib3(Int32 index, Int16 x, Int16 y, Int16 z);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// For the packed commands (glVertexAttribP*), specified the type of packing used on the data. This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, to specify signed or unsigned data, respectively, or GL_UNSIGNED_INT_10F_11F_11F_REV to specify floating point data.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For the packed commands, if GL_TRUE, then the values are to be converted to floating point values by normalizing. Otherwise, they are converted directly to floating-point values. If type indicates a floating-pont format, then normalized value must be GL_FALSE.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the packed commands, specifies the new packed value to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib3s")]
        public static extern void VertexAttrib3(UInt32 index, Int16 x, Int16 y, Int16 z);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// For the packed commands (glVertexAttribP*), specified the type of packing used on the data. This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, to specify signed or unsigned data, respectively, or GL_UNSIGNED_INT_10F_11F_11F_REV to specify floating point data.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For the packed commands, if GL_TRUE, then the values are to be converted to floating point values by normalizing. Otherwise, they are converted directly to floating-point values. If type indicates a floating-pont format, then normalized value must be GL_FALSE.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the packed commands, specifies the new packed value to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib3sv")]
        public static extern void VertexAttrib3(Int32 index, Int16[] v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// For the packed commands (glVertexAttribP*), specified the type of packing used on the data. This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, to specify signed or unsigned data, respectively, or GL_UNSIGNED_INT_10F_11F_11F_REV to specify floating point data.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For the packed commands, if GL_TRUE, then the values are to be converted to floating point values by normalizing. Otherwise, they are converted directly to floating-point values. If type indicates a floating-pont format, then normalized value must be GL_FALSE.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the packed commands, specifies the new packed value to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib3sv")]
        public static extern void VertexAttrib3(Int32 index, ref Int16 v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// For the packed commands (glVertexAttribP*), specified the type of packing used on the data. This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, to specify signed or unsigned data, respectively, or GL_UNSIGNED_INT_10F_11F_11F_REV to specify floating point data.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For the packed commands, if GL_TRUE, then the values are to be converted to floating point values by normalizing. Otherwise, they are converted directly to floating-point values. If type indicates a floating-pont format, then normalized value must be GL_FALSE.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the packed commands, specifies the new packed value to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib3sv")]
        public static extern unsafe void VertexAttrib3(Int32 index, Int16* v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// For the packed commands (glVertexAttribP*), specified the type of packing used on the data. This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, to specify signed or unsigned data, respectively, or GL_UNSIGNED_INT_10F_11F_11F_REV to specify floating point data.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For the packed commands, if GL_TRUE, then the values are to be converted to floating point values by normalizing. Otherwise, they are converted directly to floating-point values. If type indicates a floating-pont format, then normalized value must be GL_FALSE.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the packed commands, specifies the new packed value to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib3sv")]
        public static extern void VertexAttrib3(UInt32 index, Int16[] v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// For the packed commands (glVertexAttribP*), specified the type of packing used on the data. This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, to specify signed or unsigned data, respectively, or GL_UNSIGNED_INT_10F_11F_11F_REV to specify floating point data.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For the packed commands, if GL_TRUE, then the values are to be converted to floating point values by normalizing. Otherwise, they are converted directly to floating-point values. If type indicates a floating-pont format, then normalized value must be GL_FALSE.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the packed commands, specifies the new packed value to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib3sv")]
        public static extern void VertexAttrib3(UInt32 index, ref Int16 v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// For the packed commands (glVertexAttribP*), specified the type of packing used on the data. This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, to specify signed or unsigned data, respectively, or GL_UNSIGNED_INT_10F_11F_11F_REV to specify floating point data.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For the packed commands, if GL_TRUE, then the values are to be converted to floating point values by normalizing. Otherwise, they are converted directly to floating-point values. If type indicates a floating-pont format, then normalized value must be GL_FALSE.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the packed commands, specifies the new packed value to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib3sv")]
        public static extern unsafe void VertexAttrib3(UInt32 index, Int16* v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// For the packed commands (glVertexAttribP*), specified the type of packing used on the data. This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, to specify signed or unsigned data, respectively, or GL_UNSIGNED_INT_10F_11F_11F_REV to specify floating point data.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For the packed commands, if GL_TRUE, then the values are to be converted to floating point values by normalizing. Otherwise, they are converted directly to floating-point values. If type indicates a floating-pont format, then normalized value must be GL_FALSE.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the packed commands, specifies the new packed value to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4bv")]
        public static extern void VertexAttrib4(UInt32 index, SByte[] v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// For the packed commands (glVertexAttribP*), specified the type of packing used on the data. This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, to specify signed or unsigned data, respectively, or GL_UNSIGNED_INT_10F_11F_11F_REV to specify floating point data.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For the packed commands, if GL_TRUE, then the values are to be converted to floating point values by normalizing. Otherwise, they are converted directly to floating-point values. If type indicates a floating-pont format, then normalized value must be GL_FALSE.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the packed commands, specifies the new packed value to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4bv")]
        public static extern void VertexAttrib4(UInt32 index, ref SByte v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// For the packed commands (glVertexAttribP*), specified the type of packing used on the data. This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, to specify signed or unsigned data, respectively, or GL_UNSIGNED_INT_10F_11F_11F_REV to specify floating point data.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For the packed commands, if GL_TRUE, then the values are to be converted to floating point values by normalizing. Otherwise, they are converted directly to floating-point values. If type indicates a floating-pont format, then normalized value must be GL_FALSE.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the packed commands, specifies the new packed value to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4bv")]
        public static extern unsafe void VertexAttrib4(UInt32 index, SByte* v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// For the packed commands (glVertexAttribP*), specified the type of packing used on the data. This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, to specify signed or unsigned data, respectively, or GL_UNSIGNED_INT_10F_11F_11F_REV to specify floating point data.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For the packed commands, if GL_TRUE, then the values are to be converted to floating point values by normalizing. Otherwise, they are converted directly to floating-point values. If type indicates a floating-pont format, then normalized value must be GL_FALSE.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the packed commands, specifies the new packed value to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4d")]
        public static extern void VertexAttrib4(Int32 index, Double x, Double y, Double z, Double w);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// For the packed commands (glVertexAttribP*), specified the type of packing used on the data. This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, to specify signed or unsigned data, respectively, or GL_UNSIGNED_INT_10F_11F_11F_REV to specify floating point data.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For the packed commands, if GL_TRUE, then the values are to be converted to floating point values by normalizing. Otherwise, they are converted directly to floating-point values. If type indicates a floating-pont format, then normalized value must be GL_FALSE.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the packed commands, specifies the new packed value to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4d")]
        public static extern void VertexAttrib4(UInt32 index, Double x, Double y, Double z, Double w);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// For the packed commands (glVertexAttribP*), specified the type of packing used on the data. This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, to specify signed or unsigned data, respectively, or GL_UNSIGNED_INT_10F_11F_11F_REV to specify floating point data.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For the packed commands, if GL_TRUE, then the values are to be converted to floating point values by normalizing. Otherwise, they are converted directly to floating-point values. If type indicates a floating-pont format, then normalized value must be GL_FALSE.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the packed commands, specifies the new packed value to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4dv")]
        public static extern void VertexAttrib4(Int32 index, Double[] v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// For the packed commands (glVertexAttribP*), specified the type of packing used on the data. This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, to specify signed or unsigned data, respectively, or GL_UNSIGNED_INT_10F_11F_11F_REV to specify floating point data.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For the packed commands, if GL_TRUE, then the values are to be converted to floating point values by normalizing. Otherwise, they are converted directly to floating-point values. If type indicates a floating-pont format, then normalized value must be GL_FALSE.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the packed commands, specifies the new packed value to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4dv")]
        public static extern void VertexAttrib4(Int32 index, ref Double v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// For the packed commands (glVertexAttribP*), specified the type of packing used on the data. This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, to specify signed or unsigned data, respectively, or GL_UNSIGNED_INT_10F_11F_11F_REV to specify floating point data.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For the packed commands, if GL_TRUE, then the values are to be converted to floating point values by normalizing. Otherwise, they are converted directly to floating-point values. If type indicates a floating-pont format, then normalized value must be GL_FALSE.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the packed commands, specifies the new packed value to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4dv")]
        public static extern unsafe void VertexAttrib4(Int32 index, Double* v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// For the packed commands (glVertexAttribP*), specified the type of packing used on the data. This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, to specify signed or unsigned data, respectively, or GL_UNSIGNED_INT_10F_11F_11F_REV to specify floating point data.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For the packed commands, if GL_TRUE, then the values are to be converted to floating point values by normalizing. Otherwise, they are converted directly to floating-point values. If type indicates a floating-pont format, then normalized value must be GL_FALSE.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the packed commands, specifies the new packed value to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4dv")]
        public static extern void VertexAttrib4(UInt32 index, Double[] v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// For the packed commands (glVertexAttribP*), specified the type of packing used on the data. This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, to specify signed or unsigned data, respectively, or GL_UNSIGNED_INT_10F_11F_11F_REV to specify floating point data.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For the packed commands, if GL_TRUE, then the values are to be converted to floating point values by normalizing. Otherwise, they are converted directly to floating-point values. If type indicates a floating-pont format, then normalized value must be GL_FALSE.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the packed commands, specifies the new packed value to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4dv")]
        public static extern void VertexAttrib4(UInt32 index, ref Double v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// For the packed commands (glVertexAttribP*), specified the type of packing used on the data. This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, to specify signed or unsigned data, respectively, or GL_UNSIGNED_INT_10F_11F_11F_REV to specify floating point data.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For the packed commands, if GL_TRUE, then the values are to be converted to floating point values by normalizing. Otherwise, they are converted directly to floating-point values. If type indicates a floating-pont format, then normalized value must be GL_FALSE.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the packed commands, specifies the new packed value to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4dv")]
        public static extern unsafe void VertexAttrib4(UInt32 index, Double* v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// For the packed commands (glVertexAttribP*), specified the type of packing used on the data. This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, to specify signed or unsigned data, respectively, or GL_UNSIGNED_INT_10F_11F_11F_REV to specify floating point data.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For the packed commands, if GL_TRUE, then the values are to be converted to floating point values by normalizing. Otherwise, they are converted directly to floating-point values. If type indicates a floating-pont format, then normalized value must be GL_FALSE.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the packed commands, specifies the new packed value to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4f")]
        public static extern void VertexAttrib4(Int32 index, Single x, Single y, Single z, Single w);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// For the packed commands (glVertexAttribP*), specified the type of packing used on the data. This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, to specify signed or unsigned data, respectively, or GL_UNSIGNED_INT_10F_11F_11F_REV to specify floating point data.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For the packed commands, if GL_TRUE, then the values are to be converted to floating point values by normalizing. Otherwise, they are converted directly to floating-point values. If type indicates a floating-pont format, then normalized value must be GL_FALSE.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the packed commands, specifies the new packed value to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4f")]
        public static extern void VertexAttrib4(UInt32 index, Single x, Single y, Single z, Single w);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// For the packed commands (glVertexAttribP*), specified the type of packing used on the data. This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, to specify signed or unsigned data, respectively, or GL_UNSIGNED_INT_10F_11F_11F_REV to specify floating point data.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For the packed commands, if GL_TRUE, then the values are to be converted to floating point values by normalizing. Otherwise, they are converted directly to floating-point values. If type indicates a floating-pont format, then normalized value must be GL_FALSE.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the packed commands, specifies the new packed value to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4fv")]
        public static extern void VertexAttrib4(Int32 index, Single[] v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// For the packed commands (glVertexAttribP*), specified the type of packing used on the data. This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, to specify signed or unsigned data, respectively, or GL_UNSIGNED_INT_10F_11F_11F_REV to specify floating point data.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For the packed commands, if GL_TRUE, then the values are to be converted to floating point values by normalizing. Otherwise, they are converted directly to floating-point values. If type indicates a floating-pont format, then normalized value must be GL_FALSE.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the packed commands, specifies the new packed value to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4fv")]
        public static extern void VertexAttrib4(Int32 index, ref Single v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// For the packed commands (glVertexAttribP*), specified the type of packing used on the data. This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, to specify signed or unsigned data, respectively, or GL_UNSIGNED_INT_10F_11F_11F_REV to specify floating point data.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For the packed commands, if GL_TRUE, then the values are to be converted to floating point values by normalizing. Otherwise, they are converted directly to floating-point values. If type indicates a floating-pont format, then normalized value must be GL_FALSE.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the packed commands, specifies the new packed value to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4fv")]
        public static extern unsafe void VertexAttrib4(Int32 index, Single* v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// For the packed commands (glVertexAttribP*), specified the type of packing used on the data. This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, to specify signed or unsigned data, respectively, or GL_UNSIGNED_INT_10F_11F_11F_REV to specify floating point data.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For the packed commands, if GL_TRUE, then the values are to be converted to floating point values by normalizing. Otherwise, they are converted directly to floating-point values. If type indicates a floating-pont format, then normalized value must be GL_FALSE.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the packed commands, specifies the new packed value to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4fv")]
        public static extern void VertexAttrib4(UInt32 index, Single[] v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// For the packed commands (glVertexAttribP*), specified the type of packing used on the data. This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, to specify signed or unsigned data, respectively, or GL_UNSIGNED_INT_10F_11F_11F_REV to specify floating point data.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For the packed commands, if GL_TRUE, then the values are to be converted to floating point values by normalizing. Otherwise, they are converted directly to floating-point values. If type indicates a floating-pont format, then normalized value must be GL_FALSE.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the packed commands, specifies the new packed value to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4fv")]
        public static extern void VertexAttrib4(UInt32 index, ref Single v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// For the packed commands (glVertexAttribP*), specified the type of packing used on the data. This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, to specify signed or unsigned data, respectively, or GL_UNSIGNED_INT_10F_11F_11F_REV to specify floating point data.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For the packed commands, if GL_TRUE, then the values are to be converted to floating point values by normalizing. Otherwise, they are converted directly to floating-point values. If type indicates a floating-pont format, then normalized value must be GL_FALSE.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the packed commands, specifies the new packed value to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4fv")]
        public static extern unsafe void VertexAttrib4(UInt32 index, Single* v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// For the packed commands (glVertexAttribP*), specified the type of packing used on the data. This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, to specify signed or unsigned data, respectively, or GL_UNSIGNED_INT_10F_11F_11F_REV to specify floating point data.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For the packed commands, if GL_TRUE, then the values are to be converted to floating point values by normalizing. Otherwise, they are converted directly to floating-point values. If type indicates a floating-pont format, then normalized value must be GL_FALSE.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the packed commands, specifies the new packed value to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4iv")]
        public static extern void VertexAttrib4(Int32 index, Int32[] v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// For the packed commands (glVertexAttribP*), specified the type of packing used on the data. This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, to specify signed or unsigned data, respectively, or GL_UNSIGNED_INT_10F_11F_11F_REV to specify floating point data.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For the packed commands, if GL_TRUE, then the values are to be converted to floating point values by normalizing. Otherwise, they are converted directly to floating-point values. If type indicates a floating-pont format, then normalized value must be GL_FALSE.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the packed commands, specifies the new packed value to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4iv")]
        public static extern void VertexAttrib4(Int32 index, ref Int32 v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// For the packed commands (glVertexAttribP*), specified the type of packing used on the data. This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, to specify signed or unsigned data, respectively, or GL_UNSIGNED_INT_10F_11F_11F_REV to specify floating point data.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For the packed commands, if GL_TRUE, then the values are to be converted to floating point values by normalizing. Otherwise, they are converted directly to floating-point values. If type indicates a floating-pont format, then normalized value must be GL_FALSE.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the packed commands, specifies the new packed value to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4iv")]
        public static extern unsafe void VertexAttrib4(Int32 index, Int32* v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// For the packed commands (glVertexAttribP*), specified the type of packing used on the data. This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, to specify signed or unsigned data, respectively, or GL_UNSIGNED_INT_10F_11F_11F_REV to specify floating point data.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For the packed commands, if GL_TRUE, then the values are to be converted to floating point values by normalizing. Otherwise, they are converted directly to floating-point values. If type indicates a floating-pont format, then normalized value must be GL_FALSE.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the packed commands, specifies the new packed value to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4iv")]
        public static extern void VertexAttrib4(UInt32 index, Int32[] v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// For the packed commands (glVertexAttribP*), specified the type of packing used on the data. This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, to specify signed or unsigned data, respectively, or GL_UNSIGNED_INT_10F_11F_11F_REV to specify floating point data.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For the packed commands, if GL_TRUE, then the values are to be converted to floating point values by normalizing. Otherwise, they are converted directly to floating-point values. If type indicates a floating-pont format, then normalized value must be GL_FALSE.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the packed commands, specifies the new packed value to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4iv")]
        public static extern void VertexAttrib4(UInt32 index, ref Int32 v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// For the packed commands (glVertexAttribP*), specified the type of packing used on the data. This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, to specify signed or unsigned data, respectively, or GL_UNSIGNED_INT_10F_11F_11F_REV to specify floating point data.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For the packed commands, if GL_TRUE, then the values are to be converted to floating point values by normalizing. Otherwise, they are converted directly to floating-point values. If type indicates a floating-pont format, then normalized value must be GL_FALSE.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the packed commands, specifies the new packed value to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4iv")]
        public static extern unsafe void VertexAttrib4(UInt32 index, Int32* v);

        /// <summary>[requires: v2.0]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4Nbv")]
        public static extern void VertexAttrib4N(UInt32 index, SByte[] v);

        /// <summary>[requires: v2.0]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4Nbv")]
        public static extern void VertexAttrib4N(UInt32 index, ref SByte v);

        /// <summary>[requires: v2.0]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4Nbv")]
        public static extern unsafe void VertexAttrib4N(UInt32 index, SByte* v);

        /// <summary>[requires: v2.0]</summary>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4Niv")]
        public static extern void VertexAttrib4N(Int32 index, Int32[] v);

        /// <summary>[requires: v2.0]</summary>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4Niv")]
        public static extern void VertexAttrib4N(Int32 index, ref Int32 v);

        /// <summary>[requires: v2.0]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4Niv")]
        public static extern unsafe void VertexAttrib4N(Int32 index, Int32* v);

        /// <summary>[requires: v2.0]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4Niv")]
        public static extern void VertexAttrib4N(UInt32 index, Int32[] v);

        /// <summary>[requires: v2.0]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4Niv")]
        public static extern void VertexAttrib4N(UInt32 index, ref Int32 v);

        /// <summary>[requires: v2.0]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4Niv")]
        public static extern unsafe void VertexAttrib4N(UInt32 index, Int32* v);

        /// <summary>[requires: v2.0]</summary>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4Nsv")]
        public static extern void VertexAttrib4N(Int32 index, Int16[] v);

        /// <summary>[requires: v2.0]</summary>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4Nsv")]
        public static extern void VertexAttrib4N(Int32 index, ref Int16 v);

        /// <summary>[requires: v2.0]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4Nsv")]
        public static extern unsafe void VertexAttrib4N(Int32 index, Int16* v);

        /// <summary>[requires: v2.0]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4Nsv")]
        public static extern void VertexAttrib4N(UInt32 index, Int16[] v);

        /// <summary>[requires: v2.0]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4Nsv")]
        public static extern void VertexAttrib4N(UInt32 index, ref Int16 v);

        /// <summary>[requires: v2.0]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4Nsv")]
        public static extern unsafe void VertexAttrib4N(UInt32 index, Int16* v);

        /// <summary>[requires: v2.0]</summary>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4Nub")]
        public static extern void VertexAttrib4N(Int32 index, Byte x, Byte y, Byte z, Byte w);

        /// <summary>[requires: v2.0]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4Nub")]
        public static extern void VertexAttrib4N(UInt32 index, Byte x, Byte y, Byte z, Byte w);

        /// <summary>[requires: v2.0]</summary>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4Nubv")]
        public static extern void VertexAttrib4N(Int32 index, Byte[] v);

        /// <summary>[requires: v2.0]</summary>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4Nubv")]
        public static extern void VertexAttrib4N(Int32 index, ref Byte v);

        /// <summary>[requires: v2.0]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4Nubv")]
        public static extern unsafe void VertexAttrib4N(Int32 index, Byte* v);

        /// <summary>[requires: v2.0]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4Nubv")]
        public static extern void VertexAttrib4N(UInt32 index, Byte[] v);

        /// <summary>[requires: v2.0]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4Nubv")]
        public static extern void VertexAttrib4N(UInt32 index, ref Byte v);

        /// <summary>[requires: v2.0]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4Nubv")]
        public static extern unsafe void VertexAttrib4N(UInt32 index, Byte* v);

        /// <summary>[requires: v2.0]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4Nuiv")]
        public static extern void VertexAttrib4N(UInt32 index, UInt32[] v);

        /// <summary>[requires: v2.0]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4Nuiv")]
        public static extern void VertexAttrib4N(UInt32 index, ref UInt32 v);

        /// <summary>[requires: v2.0]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4Nuiv")]
        public static extern unsafe void VertexAttrib4N(UInt32 index, UInt32* v);

        /// <summary>[requires: v2.0]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4Nusv")]
        public static extern void VertexAttrib4N(UInt32 index, UInt16[] v);

        /// <summary>[requires: v2.0]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4Nusv")]
        public static extern void VertexAttrib4N(UInt32 index, ref UInt16 v);

        /// <summary>[requires: v2.0]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4Nusv")]
        public static extern unsafe void VertexAttrib4N(UInt32 index, UInt16* v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// For the packed commands (glVertexAttribP*), specified the type of packing used on the data. This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, to specify signed or unsigned data, respectively, or GL_UNSIGNED_INT_10F_11F_11F_REV to specify floating point data.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For the packed commands, if GL_TRUE, then the values are to be converted to floating point values by normalizing. Otherwise, they are converted directly to floating-point values. If type indicates a floating-pont format, then normalized value must be GL_FALSE.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the packed commands, specifies the new packed value to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4s")]
        public static extern void VertexAttrib4(Int32 index, Int16 x, Int16 y, Int16 z, Int16 w);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// For the packed commands (glVertexAttribP*), specified the type of packing used on the data. This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, to specify signed or unsigned data, respectively, or GL_UNSIGNED_INT_10F_11F_11F_REV to specify floating point data.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For the packed commands, if GL_TRUE, then the values are to be converted to floating point values by normalizing. Otherwise, they are converted directly to floating-point values. If type indicates a floating-pont format, then normalized value must be GL_FALSE.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the packed commands, specifies the new packed value to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4s")]
        public static extern void VertexAttrib4(UInt32 index, Int16 x, Int16 y, Int16 z, Int16 w);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// For the packed commands (glVertexAttribP*), specified the type of packing used on the data. This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, to specify signed or unsigned data, respectively, or GL_UNSIGNED_INT_10F_11F_11F_REV to specify floating point data.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For the packed commands, if GL_TRUE, then the values are to be converted to floating point values by normalizing. Otherwise, they are converted directly to floating-point values. If type indicates a floating-pont format, then normalized value must be GL_FALSE.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the packed commands, specifies the new packed value to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4sv")]
        public static extern void VertexAttrib4(Int32 index, Int16[] v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// For the packed commands (glVertexAttribP*), specified the type of packing used on the data. This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, to specify signed or unsigned data, respectively, or GL_UNSIGNED_INT_10F_11F_11F_REV to specify floating point data.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For the packed commands, if GL_TRUE, then the values are to be converted to floating point values by normalizing. Otherwise, they are converted directly to floating-point values. If type indicates a floating-pont format, then normalized value must be GL_FALSE.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the packed commands, specifies the new packed value to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4sv")]
        public static extern void VertexAttrib4(Int32 index, ref Int16 v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// For the packed commands (glVertexAttribP*), specified the type of packing used on the data. This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, to specify signed or unsigned data, respectively, or GL_UNSIGNED_INT_10F_11F_11F_REV to specify floating point data.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For the packed commands, if GL_TRUE, then the values are to be converted to floating point values by normalizing. Otherwise, they are converted directly to floating-point values. If type indicates a floating-pont format, then normalized value must be GL_FALSE.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the packed commands, specifies the new packed value to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4sv")]
        public static extern unsafe void VertexAttrib4(Int32 index, Int16* v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// For the packed commands (glVertexAttribP*), specified the type of packing used on the data. This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, to specify signed or unsigned data, respectively, or GL_UNSIGNED_INT_10F_11F_11F_REV to specify floating point data.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For the packed commands, if GL_TRUE, then the values are to be converted to floating point values by normalizing. Otherwise, they are converted directly to floating-point values. If type indicates a floating-pont format, then normalized value must be GL_FALSE.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the packed commands, specifies the new packed value to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4sv")]
        public static extern void VertexAttrib4(UInt32 index, Int16[] v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// For the packed commands (glVertexAttribP*), specified the type of packing used on the data. This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, to specify signed or unsigned data, respectively, or GL_UNSIGNED_INT_10F_11F_11F_REV to specify floating point data.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For the packed commands, if GL_TRUE, then the values are to be converted to floating point values by normalizing. Otherwise, they are converted directly to floating-point values. If type indicates a floating-pont format, then normalized value must be GL_FALSE.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the packed commands, specifies the new packed value to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4sv")]
        public static extern void VertexAttrib4(UInt32 index, ref Int16 v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// For the packed commands (glVertexAttribP*), specified the type of packing used on the data. This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, to specify signed or unsigned data, respectively, or GL_UNSIGNED_INT_10F_11F_11F_REV to specify floating point data.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For the packed commands, if GL_TRUE, then the values are to be converted to floating point values by normalizing. Otherwise, they are converted directly to floating-point values. If type indicates a floating-pont format, then normalized value must be GL_FALSE.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the packed commands, specifies the new packed value to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4sv")]
        public static extern unsafe void VertexAttrib4(UInt32 index, Int16* v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// For the packed commands (glVertexAttribP*), specified the type of packing used on the data. This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, to specify signed or unsigned data, respectively, or GL_UNSIGNED_INT_10F_11F_11F_REV to specify floating point data.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For the packed commands, if GL_TRUE, then the values are to be converted to floating point values by normalizing. Otherwise, they are converted directly to floating-point values. If type indicates a floating-pont format, then normalized value must be GL_FALSE.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the packed commands, specifies the new packed value to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4ubv")]
        public static extern void VertexAttrib4(Int32 index, Byte[] v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// For the packed commands (glVertexAttribP*), specified the type of packing used on the data. This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, to specify signed or unsigned data, respectively, or GL_UNSIGNED_INT_10F_11F_11F_REV to specify floating point data.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For the packed commands, if GL_TRUE, then the values are to be converted to floating point values by normalizing. Otherwise, they are converted directly to floating-point values. If type indicates a floating-pont format, then normalized value must be GL_FALSE.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the packed commands, specifies the new packed value to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4ubv")]
        public static extern void VertexAttrib4(Int32 index, ref Byte v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// For the packed commands (glVertexAttribP*), specified the type of packing used on the data. This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, to specify signed or unsigned data, respectively, or GL_UNSIGNED_INT_10F_11F_11F_REV to specify floating point data.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For the packed commands, if GL_TRUE, then the values are to be converted to floating point values by normalizing. Otherwise, they are converted directly to floating-point values. If type indicates a floating-pont format, then normalized value must be GL_FALSE.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the packed commands, specifies the new packed value to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4ubv")]
        public static extern unsafe void VertexAttrib4(Int32 index, Byte* v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// For the packed commands (glVertexAttribP*), specified the type of packing used on the data. This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, to specify signed or unsigned data, respectively, or GL_UNSIGNED_INT_10F_11F_11F_REV to specify floating point data.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For the packed commands, if GL_TRUE, then the values are to be converted to floating point values by normalizing. Otherwise, they are converted directly to floating-point values. If type indicates a floating-pont format, then normalized value must be GL_FALSE.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the packed commands, specifies the new packed value to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4ubv")]
        public static extern void VertexAttrib4(UInt32 index, Byte[] v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// For the packed commands (glVertexAttribP*), specified the type of packing used on the data. This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, to specify signed or unsigned data, respectively, or GL_UNSIGNED_INT_10F_11F_11F_REV to specify floating point data.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For the packed commands, if GL_TRUE, then the values are to be converted to floating point values by normalizing. Otherwise, they are converted directly to floating-point values. If type indicates a floating-pont format, then normalized value must be GL_FALSE.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the packed commands, specifies the new packed value to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4ubv")]
        public static extern void VertexAttrib4(UInt32 index, ref Byte v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// For the packed commands (glVertexAttribP*), specified the type of packing used on the data. This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, to specify signed or unsigned data, respectively, or GL_UNSIGNED_INT_10F_11F_11F_REV to specify floating point data.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For the packed commands, if GL_TRUE, then the values are to be converted to floating point values by normalizing. Otherwise, they are converted directly to floating-point values. If type indicates a floating-pont format, then normalized value must be GL_FALSE.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the packed commands, specifies the new packed value to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4ubv")]
        public static extern unsafe void VertexAttrib4(UInt32 index, Byte* v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// For the packed commands (glVertexAttribP*), specified the type of packing used on the data. This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, to specify signed or unsigned data, respectively, or GL_UNSIGNED_INT_10F_11F_11F_REV to specify floating point data.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For the packed commands, if GL_TRUE, then the values are to be converted to floating point values by normalizing. Otherwise, they are converted directly to floating-point values. If type indicates a floating-pont format, then normalized value must be GL_FALSE.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the packed commands, specifies the new packed value to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4uiv")]
        public static extern void VertexAttrib4(UInt32 index, UInt32[] v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// For the packed commands (glVertexAttribP*), specified the type of packing used on the data. This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, to specify signed or unsigned data, respectively, or GL_UNSIGNED_INT_10F_11F_11F_REV to specify floating point data.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For the packed commands, if GL_TRUE, then the values are to be converted to floating point values by normalizing. Otherwise, they are converted directly to floating-point values. If type indicates a floating-pont format, then normalized value must be GL_FALSE.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the packed commands, specifies the new packed value to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4uiv")]
        public static extern void VertexAttrib4(UInt32 index, ref UInt32 v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// For the packed commands (glVertexAttribP*), specified the type of packing used on the data. This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, to specify signed or unsigned data, respectively, or GL_UNSIGNED_INT_10F_11F_11F_REV to specify floating point data.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For the packed commands, if GL_TRUE, then the values are to be converted to floating point values by normalizing. Otherwise, they are converted directly to floating-point values. If type indicates a floating-pont format, then normalized value must be GL_FALSE.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the packed commands, specifies the new packed value to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4uiv")]
        public static extern unsafe void VertexAttrib4(UInt32 index, UInt32* v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// For the packed commands (glVertexAttribP*), specified the type of packing used on the data. This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, to specify signed or unsigned data, respectively, or GL_UNSIGNED_INT_10F_11F_11F_REV to specify floating point data.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For the packed commands, if GL_TRUE, then the values are to be converted to floating point values by normalizing. Otherwise, they are converted directly to floating-point values. If type indicates a floating-pont format, then normalized value must be GL_FALSE.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the packed commands, specifies the new packed value to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4usv")]
        public static extern void VertexAttrib4(UInt32 index, UInt16[] v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// For the packed commands (glVertexAttribP*), specified the type of packing used on the data. This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, to specify signed or unsigned data, respectively, or GL_UNSIGNED_INT_10F_11F_11F_REV to specify floating point data.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For the packed commands, if GL_TRUE, then the values are to be converted to floating point values by normalizing. Otherwise, they are converted directly to floating-point values. If type indicates a floating-pont format, then normalized value must be GL_FALSE.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the packed commands, specifies the new packed value to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4usv")]
        public static extern void VertexAttrib4(UInt32 index, ref UInt16 v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// For the packed commands (glVertexAttribP*), specified the type of packing used on the data. This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, to specify signed or unsigned data, respectively, or GL_UNSIGNED_INT_10F_11F_11F_REV to specify floating point data.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For the packed commands, if GL_TRUE, then the values are to be converted to floating point values by normalizing. Otherwise, they are converted directly to floating-point values. If type indicates a floating-pont format, then normalized value must be GL_FALSE.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the packed commands, specifies the new packed value to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4usv")]
        public static extern unsafe void VertexAttrib4(UInt32 index, UInt16* v);

        /// <summary>[requires: v4.3 and ARB_vertex_attrib_binding|VERSION_4_3]
        /// Associate a vertex attribute and a vertex buffer binding
        /// </summary>
        /// <param name="attribindex">
        /// <para>
        /// The index of the attribute to associate with a vertex buffer binding.
        /// </para>
        /// </param>
        /// <param name="bindingindex">
        /// <para>
        /// The index of the vertex buffer binding with which to associate the generic vertex attribute.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_attrib_binding|VERSION_4_3", Version = "4.3", EntryPoint = "glVertexAttribBinding")]
        public static extern void VertexAttribBinding(Int32 attribindex, Int32 bindingindex);

        /// <summary>[requires: v4.3 and ARB_vertex_attrib_binding|VERSION_4_3]
        /// Associate a vertex attribute and a vertex buffer binding
        /// </summary>
        /// <param name="attribindex">
        /// <para>
        /// The index of the attribute to associate with a vertex buffer binding.
        /// </para>
        /// </param>
        /// <param name="bindingindex">
        /// <para>
        /// The index of the vertex buffer binding with which to associate the generic vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_vertex_attrib_binding|VERSION_4_3", Version = "4.3", EntryPoint = "glVertexAttribBinding")]
        public static extern void VertexAttribBinding(UInt32 attribindex, UInt32 bindingindex);

        /// <summary>[requires: v3.3]
        /// Modify the rate at which generic vertex attributes advance during instanced rendering
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specify the index of the generic vertex attribute.
        /// </para>
        /// </param>
        /// <param name="divisor">
        /// <para>
        /// Specify the number of instances that will pass between updates of the generic attribute at slot index.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_3_3", Version = "3.3", EntryPoint = "glVertexAttribDivisor")]
        public static extern void VertexAttribDivisor(Int32 index, Int32 divisor);

        /// <summary>[requires: v3.3]
        /// Modify the rate at which generic vertex attributes advance during instanced rendering
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specify the index of the generic vertex attribute.
        /// </para>
        /// </param>
        /// <param name="divisor">
        /// <para>
        /// Specify the number of instances that will pass between updates of the generic attribute at slot index.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_3", Version = "3.3", EntryPoint = "glVertexAttribDivisor")]
        public static extern void VertexAttribDivisor(UInt32 index, UInt32 divisor);

        /// <summary>[requires: v4.3 and ARB_vertex_attrib_binding|VERSION_4_3]
        /// Specify the organization of vertex arrays
        /// </summary>
        /// <param name="attribindex">
        /// <para>
        /// The generic vertex attribute array being described.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// The number of values per vertex that are stored in the array.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// The type of the data stored in the array.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// The distance between elements within the buffer.
        /// </para>
        /// </param>
        /// <param name="relativeoffset">
        /// <para>
        /// The distance between elements within the buffer.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_attrib_binding|VERSION_4_3", Version = "4.3", EntryPoint = "glVertexAttribFormat")]
        public static extern void VertexAttribFormat(Int32 attribindex, Int32 size, OpenTK.Graphics.OpenGL4.VertexAttribType type, bool normalized, Int32 relativeoffset);

        /// <summary>[requires: v4.3 and ARB_vertex_attrib_binding|VERSION_4_3]
        /// Specify the organization of vertex arrays
        /// </summary>
        /// <param name="attribindex">
        /// <para>
        /// The generic vertex attribute array being described.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// The number of values per vertex that are stored in the array.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// The type of the data stored in the array.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// The distance between elements within the buffer.
        /// </para>
        /// </param>
        /// <param name="relativeoffset">
        /// <para>
        /// The distance between elements within the buffer.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_vertex_attrib_binding|VERSION_4_3", Version = "4.3", EntryPoint = "glVertexAttribFormat")]
        public static extern void VertexAttribFormat(UInt32 attribindex, Int32 size, OpenTK.Graphics.OpenGL4.VertexAttribType type, bool normalized, UInt32 relativeoffset);

        /// <summary>[requires: v3.0]</summary>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI1i")]
        public static extern void VertexAttribI1(Int32 index, Int32 x);

        /// <summary>[requires: v3.0]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI1i")]
        public static extern void VertexAttribI1(UInt32 index, Int32 x);

        /// <summary>[requires: v3.0]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI1iv")]
        public static extern unsafe void VertexAttribI1(Int32 index, Int32* v);

        /// <summary>[requires: v3.0]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI1iv")]
        public static extern unsafe void VertexAttribI1(UInt32 index, Int32* v);

        /// <summary>[requires: v3.0]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI1ui")]
        public static extern void VertexAttribI1(UInt32 index, UInt32 x);

        /// <summary>[requires: v3.0]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI1uiv")]
        public static extern unsafe void VertexAttribI1(UInt32 index, UInt32* v);

        /// <summary>[requires: v3.0]</summary>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI2i")]
        public static extern void VertexAttribI2(Int32 index, Int32 x, Int32 y);

        /// <summary>[requires: v3.0]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI2i")]
        public static extern void VertexAttribI2(UInt32 index, Int32 x, Int32 y);

        /// <summary>[requires: v3.0]</summary>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI2iv")]
        public static extern void VertexAttribI2(Int32 index, Int32[] v);

        /// <summary>[requires: v3.0]</summary>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI2iv")]
        public static extern void VertexAttribI2(Int32 index, ref Int32 v);

        /// <summary>[requires: v3.0]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI2iv")]
        public static extern unsafe void VertexAttribI2(Int32 index, Int32* v);

        /// <summary>[requires: v3.0]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI2iv")]
        public static extern void VertexAttribI2(UInt32 index, Int32[] v);

        /// <summary>[requires: v3.0]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI2iv")]
        public static extern void VertexAttribI2(UInt32 index, ref Int32 v);

        /// <summary>[requires: v3.0]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI2iv")]
        public static extern unsafe void VertexAttribI2(UInt32 index, Int32* v);

        /// <summary>[requires: v3.0]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI2ui")]
        public static extern void VertexAttribI2(UInt32 index, UInt32 x, UInt32 y);

        /// <summary>[requires: v3.0]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI2uiv")]
        public static extern void VertexAttribI2(UInt32 index, UInt32[] v);

        /// <summary>[requires: v3.0]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI2uiv")]
        public static extern void VertexAttribI2(UInt32 index, ref UInt32 v);

        /// <summary>[requires: v3.0]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI2uiv")]
        public static extern unsafe void VertexAttribI2(UInt32 index, UInt32* v);

        /// <summary>[requires: v3.0]</summary>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI3i")]
        public static extern void VertexAttribI3(Int32 index, Int32 x, Int32 y, Int32 z);

        /// <summary>[requires: v3.0]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI3i")]
        public static extern void VertexAttribI3(UInt32 index, Int32 x, Int32 y, Int32 z);

        /// <summary>[requires: v3.0]</summary>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI3iv")]
        public static extern void VertexAttribI3(Int32 index, Int32[] v);

        /// <summary>[requires: v3.0]</summary>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI3iv")]
        public static extern void VertexAttribI3(Int32 index, ref Int32 v);

        /// <summary>[requires: v3.0]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI3iv")]
        public static extern unsafe void VertexAttribI3(Int32 index, Int32* v);

        /// <summary>[requires: v3.0]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI3iv")]
        public static extern void VertexAttribI3(UInt32 index, Int32[] v);

        /// <summary>[requires: v3.0]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI3iv")]
        public static extern void VertexAttribI3(UInt32 index, ref Int32 v);

        /// <summary>[requires: v3.0]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI3iv")]
        public static extern unsafe void VertexAttribI3(UInt32 index, Int32* v);

        /// <summary>[requires: v3.0]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI3ui")]
        public static extern void VertexAttribI3(UInt32 index, UInt32 x, UInt32 y, UInt32 z);

        /// <summary>[requires: v3.0]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI3uiv")]
        public static extern void VertexAttribI3(UInt32 index, UInt32[] v);

        /// <summary>[requires: v3.0]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI3uiv")]
        public static extern void VertexAttribI3(UInt32 index, ref UInt32 v);

        /// <summary>[requires: v3.0]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI3uiv")]
        public static extern unsafe void VertexAttribI3(UInt32 index, UInt32* v);

        /// <summary>[requires: v3.0]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4bv")]
        public static extern void VertexAttribI4(UInt32 index, SByte[] v);

        /// <summary>[requires: v3.0]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4bv")]
        public static extern void VertexAttribI4(UInt32 index, ref SByte v);

        /// <summary>[requires: v3.0]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4bv")]
        public static extern unsafe void VertexAttribI4(UInt32 index, SByte* v);

        /// <summary>[requires: v3.0]</summary>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4i")]
        public static extern void VertexAttribI4(Int32 index, Int32 x, Int32 y, Int32 z, Int32 w);

        /// <summary>[requires: v3.0]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4i")]
        public static extern void VertexAttribI4(UInt32 index, Int32 x, Int32 y, Int32 z, Int32 w);

        /// <summary>[requires: v3.0]</summary>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4iv")]
        public static extern void VertexAttribI4(Int32 index, Int32[] v);

        /// <summary>[requires: v3.0]</summary>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4iv")]
        public static extern void VertexAttribI4(Int32 index, ref Int32 v);

        /// <summary>[requires: v3.0]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4iv")]
        public static extern unsafe void VertexAttribI4(Int32 index, Int32* v);

        /// <summary>[requires: v3.0]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4iv")]
        public static extern void VertexAttribI4(UInt32 index, Int32[] v);

        /// <summary>[requires: v3.0]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4iv")]
        public static extern void VertexAttribI4(UInt32 index, ref Int32 v);

        /// <summary>[requires: v3.0]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4iv")]
        public static extern unsafe void VertexAttribI4(UInt32 index, Int32* v);

        /// <summary>[requires: v3.0]</summary>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4sv")]
        public static extern void VertexAttribI4(Int32 index, Int16[] v);

        /// <summary>[requires: v3.0]</summary>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4sv")]
        public static extern void VertexAttribI4(Int32 index, ref Int16 v);

        /// <summary>[requires: v3.0]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4sv")]
        public static extern unsafe void VertexAttribI4(Int32 index, Int16* v);

        /// <summary>[requires: v3.0]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4sv")]
        public static extern void VertexAttribI4(UInt32 index, Int16[] v);

        /// <summary>[requires: v3.0]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4sv")]
        public static extern void VertexAttribI4(UInt32 index, ref Int16 v);

        /// <summary>[requires: v3.0]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4sv")]
        public static extern unsafe void VertexAttribI4(UInt32 index, Int16* v);

        /// <summary>[requires: v3.0]</summary>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4ubv")]
        public static extern void VertexAttribI4(Int32 index, Byte[] v);

        /// <summary>[requires: v3.0]</summary>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4ubv")]
        public static extern void VertexAttribI4(Int32 index, ref Byte v);

        /// <summary>[requires: v3.0]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4ubv")]
        public static extern unsafe void VertexAttribI4(Int32 index, Byte* v);

        /// <summary>[requires: v3.0]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4ubv")]
        public static extern void VertexAttribI4(UInt32 index, Byte[] v);

        /// <summary>[requires: v3.0]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4ubv")]
        public static extern void VertexAttribI4(UInt32 index, ref Byte v);

        /// <summary>[requires: v3.0]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4ubv")]
        public static extern unsafe void VertexAttribI4(UInt32 index, Byte* v);

        /// <summary>[requires: v3.0]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4ui")]
        public static extern void VertexAttribI4(UInt32 index, UInt32 x, UInt32 y, UInt32 z, UInt32 w);

        /// <summary>[requires: v3.0]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4uiv")]
        public static extern void VertexAttribI4(UInt32 index, UInt32[] v);

        /// <summary>[requires: v3.0]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4uiv")]
        public static extern void VertexAttribI4(UInt32 index, ref UInt32 v);

        /// <summary>[requires: v3.0]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4uiv")]
        public static extern unsafe void VertexAttribI4(UInt32 index, UInt32* v);

        /// <summary>[requires: v3.0]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4usv")]
        public static extern void VertexAttribI4(UInt32 index, UInt16[] v);

        /// <summary>[requires: v3.0]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4usv")]
        public static extern void VertexAttribI4(UInt32 index, ref UInt16 v);

        /// <summary>[requires: v3.0]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4usv")]
        public static extern unsafe void VertexAttribI4(UInt32 index, UInt16* v);

        /// <summary>[requires: v4.3 and ARB_vertex_attrib_binding|VERSION_4_3]</summary>
        [AutoGenerated(Category = "ARB_vertex_attrib_binding|VERSION_4_3", Version = "4.3", EntryPoint = "glVertexAttribIFormat")]
        public static extern void VertexAttribIFormat(Int32 attribindex, Int32 size, OpenTK.Graphics.OpenGL4.VertexAttribIntegerType type, Int32 relativeoffset);

        /// <summary>[requires: v4.3 and ARB_vertex_attrib_binding|VERSION_4_3]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_vertex_attrib_binding|VERSION_4_3", Version = "4.3", EntryPoint = "glVertexAttribIFormat")]
        public static extern void VertexAttribIFormat(UInt32 attribindex, Int32 size, OpenTK.Graphics.OpenGL4.VertexAttribIntegerType type, UInt32 relativeoffset);

        /// <summary>[requires: v3.0]</summary>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribIPointer")]
        public static extern void VertexAttribIPointer(Int32 index, Int32 size, OpenTK.Graphics.OpenGL4.VertexAttribIntegerType type, Int32 stride, IntPtr pointer);

        /// <summary>[requires: v3.0]</summary>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribIPointer")]
        public static extern void VertexAttribIPointer<T4>(Int32 index, Int32 size, OpenTK.Graphics.OpenGL4.VertexAttribIntegerType type, Int32 stride, [InAttribute, OutAttribute] T4[] pointer)
            where T4 : struct
        ;

        /// <summary>[requires: v3.0]</summary>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribIPointer")]
        public static extern void VertexAttribIPointer<T4>(Int32 index, Int32 size, OpenTK.Graphics.OpenGL4.VertexAttribIntegerType type, Int32 stride, [InAttribute, OutAttribute] T4[,] pointer)
            where T4 : struct
        ;

        /// <summary>[requires: v3.0]</summary>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribIPointer")]
        public static extern void VertexAttribIPointer<T4>(Int32 index, Int32 size, OpenTK.Graphics.OpenGL4.VertexAttribIntegerType type, Int32 stride, [InAttribute, OutAttribute] T4[,,] pointer)
            where T4 : struct
        ;

        /// <summary>[requires: v3.0]</summary>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribIPointer")]
        public static extern void VertexAttribIPointer<T4>(Int32 index, Int32 size, OpenTK.Graphics.OpenGL4.VertexAttribIntegerType type, Int32 stride, [InAttribute, OutAttribute] ref T4 pointer)
            where T4 : struct
        ;

        /// <summary>[requires: v3.0]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribIPointer")]
        public static extern void VertexAttribIPointer(UInt32 index, Int32 size, OpenTK.Graphics.OpenGL4.VertexAttribIntegerType type, Int32 stride, IntPtr pointer);

        /// <summary>[requires: v3.0]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribIPointer")]
        public static extern void VertexAttribIPointer<T4>(UInt32 index, Int32 size, OpenTK.Graphics.OpenGL4.VertexAttribIntegerType type, Int32 stride, [InAttribute, OutAttribute] T4[] pointer)
            where T4 : struct
        ;

        /// <summary>[requires: v3.0]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribIPointer")]
        public static extern void VertexAttribIPointer<T4>(UInt32 index, Int32 size, OpenTK.Graphics.OpenGL4.VertexAttribIntegerType type, Int32 stride, [InAttribute, OutAttribute] T4[,] pointer)
            where T4 : struct
        ;

        /// <summary>[requires: v3.0]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribIPointer")]
        public static extern void VertexAttribIPointer<T4>(UInt32 index, Int32 size, OpenTK.Graphics.OpenGL4.VertexAttribIntegerType type, Int32 stride, [InAttribute, OutAttribute] T4[,,] pointer)
            where T4 : struct
        ;

        /// <summary>[requires: v3.0]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribIPointer")]
        public static extern void VertexAttribIPointer<T4>(UInt32 index, Int32 size, OpenTK.Graphics.OpenGL4.VertexAttribIntegerType type, Int32 stride, [InAttribute, OutAttribute] ref T4 pointer)
            where T4 : struct
        ;

        /// <summary>[requires: v4.1 and ARB_vertex_attrib_64bit|VERSION_4_1]</summary>
        [AutoGenerated(Category = "ARB_vertex_attrib_64bit|VERSION_4_1", Version = "4.1", EntryPoint = "glVertexAttribL1d")]
        public static extern void VertexAttribL1(Int32 index, Double x);

        /// <summary>[requires: v4.1 and ARB_vertex_attrib_64bit|VERSION_4_1]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_vertex_attrib_64bit|VERSION_4_1", Version = "4.1", EntryPoint = "glVertexAttribL1d")]
        public static extern void VertexAttribL1(UInt32 index, Double x);

        /// <summary>[requires: v4.1 and ARB_vertex_attrib_64bit|VERSION_4_1]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_vertex_attrib_64bit|VERSION_4_1", Version = "4.1", EntryPoint = "glVertexAttribL1dv")]
        public static extern unsafe void VertexAttribL1(Int32 index, Double* v);

        /// <summary>[requires: v4.1 and ARB_vertex_attrib_64bit|VERSION_4_1]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_vertex_attrib_64bit|VERSION_4_1", Version = "4.1", EntryPoint = "glVertexAttribL1dv")]
        public static extern unsafe void VertexAttribL1(UInt32 index, Double* v);

        /// <summary>[requires: v4.1 and ARB_vertex_attrib_64bit|VERSION_4_1]</summary>
        [AutoGenerated(Category = "ARB_vertex_attrib_64bit|VERSION_4_1", Version = "4.1", EntryPoint = "glVertexAttribL2d")]
        public static extern void VertexAttribL2(Int32 index, Double x, Double y);

        /// <summary>[requires: v4.1 and ARB_vertex_attrib_64bit|VERSION_4_1]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_vertex_attrib_64bit|VERSION_4_1", Version = "4.1", EntryPoint = "glVertexAttribL2d")]
        public static extern void VertexAttribL2(UInt32 index, Double x, Double y);

        /// <summary>[requires: v4.1 and ARB_vertex_attrib_64bit|VERSION_4_1]</summary>
        [AutoGenerated(Category = "ARB_vertex_attrib_64bit|VERSION_4_1", Version = "4.1", EntryPoint = "glVertexAttribL2dv")]
        public static extern void VertexAttribL2(Int32 index, Double[] v);

        /// <summary>[requires: v4.1 and ARB_vertex_attrib_64bit|VERSION_4_1]</summary>
        [AutoGenerated(Category = "ARB_vertex_attrib_64bit|VERSION_4_1", Version = "4.1", EntryPoint = "glVertexAttribL2dv")]
        public static extern void VertexAttribL2(Int32 index, ref Double v);

        /// <summary>[requires: v4.1 and ARB_vertex_attrib_64bit|VERSION_4_1]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_vertex_attrib_64bit|VERSION_4_1", Version = "4.1", EntryPoint = "glVertexAttribL2dv")]
        public static extern unsafe void VertexAttribL2(Int32 index, Double* v);

        /// <summary>[requires: v4.1 and ARB_vertex_attrib_64bit|VERSION_4_1]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_vertex_attrib_64bit|VERSION_4_1", Version = "4.1", EntryPoint = "glVertexAttribL2dv")]
        public static extern void VertexAttribL2(UInt32 index, Double[] v);

        /// <summary>[requires: v4.1 and ARB_vertex_attrib_64bit|VERSION_4_1]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_vertex_attrib_64bit|VERSION_4_1", Version = "4.1", EntryPoint = "glVertexAttribL2dv")]
        public static extern void VertexAttribL2(UInt32 index, ref Double v);

        /// <summary>[requires: v4.1 and ARB_vertex_attrib_64bit|VERSION_4_1]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_vertex_attrib_64bit|VERSION_4_1", Version = "4.1", EntryPoint = "glVertexAttribL2dv")]
        public static extern unsafe void VertexAttribL2(UInt32 index, Double* v);

        /// <summary>[requires: v4.1 and ARB_vertex_attrib_64bit|VERSION_4_1]</summary>
        [AutoGenerated(Category = "ARB_vertex_attrib_64bit|VERSION_4_1", Version = "4.1", EntryPoint = "glVertexAttribL3d")]
        public static extern void VertexAttribL3(Int32 index, Double x, Double y, Double z);

        /// <summary>[requires: v4.1 and ARB_vertex_attrib_64bit|VERSION_4_1]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_vertex_attrib_64bit|VERSION_4_1", Version = "4.1", EntryPoint = "glVertexAttribL3d")]
        public static extern void VertexAttribL3(UInt32 index, Double x, Double y, Double z);

        /// <summary>[requires: v4.1 and ARB_vertex_attrib_64bit|VERSION_4_1]</summary>
        [AutoGenerated(Category = "ARB_vertex_attrib_64bit|VERSION_4_1", Version = "4.1", EntryPoint = "glVertexAttribL3dv")]
        public static extern void VertexAttribL3(Int32 index, Double[] v);

        /// <summary>[requires: v4.1 and ARB_vertex_attrib_64bit|VERSION_4_1]</summary>
        [AutoGenerated(Category = "ARB_vertex_attrib_64bit|VERSION_4_1", Version = "4.1", EntryPoint = "glVertexAttribL3dv")]
        public static extern void VertexAttribL3(Int32 index, ref Double v);

        /// <summary>[requires: v4.1 and ARB_vertex_attrib_64bit|VERSION_4_1]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_vertex_attrib_64bit|VERSION_4_1", Version = "4.1", EntryPoint = "glVertexAttribL3dv")]
        public static extern unsafe void VertexAttribL3(Int32 index, Double* v);

        /// <summary>[requires: v4.1 and ARB_vertex_attrib_64bit|VERSION_4_1]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_vertex_attrib_64bit|VERSION_4_1", Version = "4.1", EntryPoint = "glVertexAttribL3dv")]
        public static extern void VertexAttribL3(UInt32 index, Double[] v);

        /// <summary>[requires: v4.1 and ARB_vertex_attrib_64bit|VERSION_4_1]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_vertex_attrib_64bit|VERSION_4_1", Version = "4.1", EntryPoint = "glVertexAttribL3dv")]
        public static extern void VertexAttribL3(UInt32 index, ref Double v);

        /// <summary>[requires: v4.1 and ARB_vertex_attrib_64bit|VERSION_4_1]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_vertex_attrib_64bit|VERSION_4_1", Version = "4.1", EntryPoint = "glVertexAttribL3dv")]
        public static extern unsafe void VertexAttribL3(UInt32 index, Double* v);

        /// <summary>[requires: v4.1 and ARB_vertex_attrib_64bit|VERSION_4_1]</summary>
        [AutoGenerated(Category = "ARB_vertex_attrib_64bit|VERSION_4_1", Version = "4.1", EntryPoint = "glVertexAttribL4d")]
        public static extern void VertexAttribL4(Int32 index, Double x, Double y, Double z, Double w);

        /// <summary>[requires: v4.1 and ARB_vertex_attrib_64bit|VERSION_4_1]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_vertex_attrib_64bit|VERSION_4_1", Version = "4.1", EntryPoint = "glVertexAttribL4d")]
        public static extern void VertexAttribL4(UInt32 index, Double x, Double y, Double z, Double w);

        /// <summary>[requires: v4.1 and ARB_vertex_attrib_64bit|VERSION_4_1]</summary>
        [AutoGenerated(Category = "ARB_vertex_attrib_64bit|VERSION_4_1", Version = "4.1", EntryPoint = "glVertexAttribL4dv")]
        public static extern void VertexAttribL4(Int32 index, Double[] v);

        /// <summary>[requires: v4.1 and ARB_vertex_attrib_64bit|VERSION_4_1]</summary>
        [AutoGenerated(Category = "ARB_vertex_attrib_64bit|VERSION_4_1", Version = "4.1", EntryPoint = "glVertexAttribL4dv")]
        public static extern void VertexAttribL4(Int32 index, ref Double v);

        /// <summary>[requires: v4.1 and ARB_vertex_attrib_64bit|VERSION_4_1]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_vertex_attrib_64bit|VERSION_4_1", Version = "4.1", EntryPoint = "glVertexAttribL4dv")]
        public static extern unsafe void VertexAttribL4(Int32 index, Double* v);

        /// <summary>[requires: v4.1 and ARB_vertex_attrib_64bit|VERSION_4_1]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_vertex_attrib_64bit|VERSION_4_1", Version = "4.1", EntryPoint = "glVertexAttribL4dv")]
        public static extern void VertexAttribL4(UInt32 index, Double[] v);

        /// <summary>[requires: v4.1 and ARB_vertex_attrib_64bit|VERSION_4_1]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_vertex_attrib_64bit|VERSION_4_1", Version = "4.1", EntryPoint = "glVertexAttribL4dv")]
        public static extern void VertexAttribL4(UInt32 index, ref Double v);

        /// <summary>[requires: v4.1 and ARB_vertex_attrib_64bit|VERSION_4_1]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_vertex_attrib_64bit|VERSION_4_1", Version = "4.1", EntryPoint = "glVertexAttribL4dv")]
        public static extern unsafe void VertexAttribL4(UInt32 index, Double* v);

        /// <summary>[requires: v4.3 and ARB_vertex_attrib_binding|VERSION_4_3]</summary>
        [AutoGenerated(Category = "ARB_vertex_attrib_binding|VERSION_4_3", Version = "4.3", EntryPoint = "glVertexAttribLFormat")]
        public static extern void VertexAttribLFormat(Int32 attribindex, Int32 size, OpenTK.Graphics.OpenGL4.VertexAttribDoubleType type, Int32 relativeoffset);

        /// <summary>[requires: v4.3 and ARB_vertex_attrib_binding|VERSION_4_3]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_vertex_attrib_binding|VERSION_4_3", Version = "4.3", EntryPoint = "glVertexAttribLFormat")]
        public static extern void VertexAttribLFormat(UInt32 attribindex, Int32 size, OpenTK.Graphics.OpenGL4.VertexAttribDoubleType type, UInt32 relativeoffset);

        /// <summary>[requires: v4.1 and ARB_vertex_attrib_64bit|VERSION_4_1]</summary>
        [AutoGenerated(Category = "ARB_vertex_attrib_64bit|VERSION_4_1", Version = "4.1", EntryPoint = "glVertexAttribLPointer")]
        public static extern void VertexAttribLPointer(Int32 index, Int32 size, OpenTK.Graphics.OpenGL4.VertexAttribDoubleType type, Int32 stride, IntPtr pointer);

        /// <summary>[requires: v4.1 and ARB_vertex_attrib_64bit|VERSION_4_1]</summary>
        [AutoGenerated(Category = "ARB_vertex_attrib_64bit|VERSION_4_1", Version = "4.1", EntryPoint = "glVertexAttribLPointer")]
        public static extern void VertexAttribLPointer<T4>(Int32 index, Int32 size, OpenTK.Graphics.OpenGL4.VertexAttribDoubleType type, Int32 stride, [InAttribute, OutAttribute] T4[] pointer)
            where T4 : struct
        ;

        /// <summary>[requires: v4.1 and ARB_vertex_attrib_64bit|VERSION_4_1]</summary>
        [AutoGenerated(Category = "ARB_vertex_attrib_64bit|VERSION_4_1", Version = "4.1", EntryPoint = "glVertexAttribLPointer")]
        public static extern void VertexAttribLPointer<T4>(Int32 index, Int32 size, OpenTK.Graphics.OpenGL4.VertexAttribDoubleType type, Int32 stride, [InAttribute, OutAttribute] T4[,] pointer)
            where T4 : struct
        ;

        /// <summary>[requires: v4.1 and ARB_vertex_attrib_64bit|VERSION_4_1]</summary>
        [AutoGenerated(Category = "ARB_vertex_attrib_64bit|VERSION_4_1", Version = "4.1", EntryPoint = "glVertexAttribLPointer")]
        public static extern void VertexAttribLPointer<T4>(Int32 index, Int32 size, OpenTK.Graphics.OpenGL4.VertexAttribDoubleType type, Int32 stride, [InAttribute, OutAttribute] T4[,,] pointer)
            where T4 : struct
        ;

        /// <summary>[requires: v4.1 and ARB_vertex_attrib_64bit|VERSION_4_1]</summary>
        [AutoGenerated(Category = "ARB_vertex_attrib_64bit|VERSION_4_1", Version = "4.1", EntryPoint = "glVertexAttribLPointer")]
        public static extern void VertexAttribLPointer<T4>(Int32 index, Int32 size, OpenTK.Graphics.OpenGL4.VertexAttribDoubleType type, Int32 stride, [InAttribute, OutAttribute] ref T4 pointer)
            where T4 : struct
        ;

        /// <summary>[requires: v4.1 and ARB_vertex_attrib_64bit|VERSION_4_1]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_vertex_attrib_64bit|VERSION_4_1", Version = "4.1", EntryPoint = "glVertexAttribLPointer")]
        public static extern void VertexAttribLPointer(UInt32 index, Int32 size, OpenTK.Graphics.OpenGL4.VertexAttribDoubleType type, Int32 stride, IntPtr pointer);

        /// <summary>[requires: v4.1 and ARB_vertex_attrib_64bit|VERSION_4_1]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_vertex_attrib_64bit|VERSION_4_1", Version = "4.1", EntryPoint = "glVertexAttribLPointer")]
        public static extern void VertexAttribLPointer<T4>(UInt32 index, Int32 size, OpenTK.Graphics.OpenGL4.VertexAttribDoubleType type, Int32 stride, [InAttribute, OutAttribute] T4[] pointer)
            where T4 : struct
        ;

        /// <summary>[requires: v4.1 and ARB_vertex_attrib_64bit|VERSION_4_1]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_vertex_attrib_64bit|VERSION_4_1", Version = "4.1", EntryPoint = "glVertexAttribLPointer")]
        public static extern void VertexAttribLPointer<T4>(UInt32 index, Int32 size, OpenTK.Graphics.OpenGL4.VertexAttribDoubleType type, Int32 stride, [InAttribute, OutAttribute] T4[,] pointer)
            where T4 : struct
        ;

        /// <summary>[requires: v4.1 and ARB_vertex_attrib_64bit|VERSION_4_1]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_vertex_attrib_64bit|VERSION_4_1", Version = "4.1", EntryPoint = "glVertexAttribLPointer")]
        public static extern void VertexAttribLPointer<T4>(UInt32 index, Int32 size, OpenTK.Graphics.OpenGL4.VertexAttribDoubleType type, Int32 stride, [InAttribute, OutAttribute] T4[,,] pointer)
            where T4 : struct
        ;

        /// <summary>[requires: v4.1 and ARB_vertex_attrib_64bit|VERSION_4_1]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_vertex_attrib_64bit|VERSION_4_1", Version = "4.1", EntryPoint = "glVertexAttribLPointer")]
        public static extern void VertexAttribLPointer<T4>(UInt32 index, Int32 size, OpenTK.Graphics.OpenGL4.VertexAttribDoubleType type, Int32 stride, [InAttribute, OutAttribute] ref T4 pointer)
            where T4 : struct
        ;

        /// <summary>[requires: v3.3 and ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glVertexAttribP1ui")]
        public static extern void VertexAttribP1(Int32 index, OpenTK.Graphics.OpenGL4.PackedPointerType type, bool normalized, Int32 value);

        /// <summary>[requires: v3.3 and ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glVertexAttribP1ui")]
        public static extern void VertexAttribP1(UInt32 index, OpenTK.Graphics.OpenGL4.PackedPointerType type, bool normalized, UInt32 value);

        /// <summary>[requires: v3.3 and ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glVertexAttribP1uiv")]
        public static extern unsafe void VertexAttribP1(Int32 index, OpenTK.Graphics.OpenGL4.PackedPointerType type, bool normalized, Int32* value);

        /// <summary>[requires: v3.3 and ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glVertexAttribP1uiv")]
        public static extern unsafe void VertexAttribP1(UInt32 index, OpenTK.Graphics.OpenGL4.PackedPointerType type, bool normalized, UInt32* value);

        /// <summary>[requires: v3.3 and ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glVertexAttribP2ui")]
        public static extern void VertexAttribP2(Int32 index, OpenTK.Graphics.OpenGL4.PackedPointerType type, bool normalized, Int32 value);

        /// <summary>[requires: v3.3 and ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glVertexAttribP2ui")]
        public static extern void VertexAttribP2(UInt32 index, OpenTK.Graphics.OpenGL4.PackedPointerType type, bool normalized, UInt32 value);

        /// <summary>[requires: v3.3 and ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glVertexAttribP2uiv")]
        public static extern unsafe void VertexAttribP2(Int32 index, OpenTK.Graphics.OpenGL4.PackedPointerType type, bool normalized, Int32* value);

        /// <summary>[requires: v3.3 and ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glVertexAttribP2uiv")]
        public static extern unsafe void VertexAttribP2(UInt32 index, OpenTK.Graphics.OpenGL4.PackedPointerType type, bool normalized, UInt32* value);

        /// <summary>[requires: v3.3 and ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glVertexAttribP3ui")]
        public static extern void VertexAttribP3(Int32 index, OpenTK.Graphics.OpenGL4.PackedPointerType type, bool normalized, Int32 value);

        /// <summary>[requires: v3.3 and ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glVertexAttribP3ui")]
        public static extern void VertexAttribP3(UInt32 index, OpenTK.Graphics.OpenGL4.PackedPointerType type, bool normalized, UInt32 value);

        /// <summary>[requires: v3.3 and ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glVertexAttribP3uiv")]
        public static extern unsafe void VertexAttribP3(Int32 index, OpenTK.Graphics.OpenGL4.PackedPointerType type, bool normalized, Int32* value);

        /// <summary>[requires: v3.3 and ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glVertexAttribP3uiv")]
        public static extern unsafe void VertexAttribP3(UInt32 index, OpenTK.Graphics.OpenGL4.PackedPointerType type, bool normalized, UInt32* value);

        /// <summary>[requires: v3.3 and ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glVertexAttribP4ui")]
        public static extern void VertexAttribP4(Int32 index, OpenTK.Graphics.OpenGL4.PackedPointerType type, bool normalized, Int32 value);

        /// <summary>[requires: v3.3 and ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glVertexAttribP4ui")]
        public static extern void VertexAttribP4(UInt32 index, OpenTK.Graphics.OpenGL4.PackedPointerType type, bool normalized, UInt32 value);

        /// <summary>[requires: v3.3 and ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glVertexAttribP4uiv")]
        public static extern unsafe void VertexAttribP4(Int32 index, OpenTK.Graphics.OpenGL4.PackedPointerType type, bool normalized, Int32* value);

        /// <summary>[requires: v3.3 and ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glVertexAttribP4uiv")]
        public static extern unsafe void VertexAttribP4(UInt32 index, OpenTK.Graphics.OpenGL4.PackedPointerType type, bool normalized, UInt32* value);

        /// <summary>[requires: v2.0]
        /// Define an array of generic vertex attribute data
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, 4. Additionally, the symbolic constant GL_BGRA is accepted by glVertexAttribPointer. The initial value is 4.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of each component in the array. The symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, and GL_UNSIGNED_INT are accepted by glVertexAttribPointer and glVertexAttribIPointer. Additionally GL_HALF_FLOAT, GL_FLOAT, GL_DOUBLE, GL_FIXED, GL_INT_2_10_10_10_REV, GL_UNSIGNED_INT_2_10_10_10_REV and GL_UNSIGNED_INT_10F_11F_11F_REV are accepted by glVertexAttribPointer. GL_DOUBLE is also accepted by glVertexAttribLPointer and is the only token accepted by the type parameter for that function. The initial value is GL_FLOAT.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For glVertexAttribPointer, specifies whether fixed-point data values should be normalized (GL_TRUE) or converted directly as fixed-point values (GL_FALSE) when they are accessed.
        /// </para>
        /// </param>
        /// <param name="stride">
        /// <para>
        /// Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
        /// </para>
        /// </param>
        /// <param name="pointer">
        /// <para>
        /// Specifies a offset of the first component of the first generic vertex attribute in the array in the data store of the buffer currently bound to the GL_ARRAY_BUFFER target. The initial value is 0.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttribPointer")]
        public static extern void VertexAttribPointer(Int32 index, Int32 size, OpenTK.Graphics.OpenGL4.VertexAttribPointerType type, bool normalized, Int32 stride, IntPtr pointer);

        /// <summary>[requires: v2.0]
        /// Define an array of generic vertex attribute data
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, 4. Additionally, the symbolic constant GL_BGRA is accepted by glVertexAttribPointer. The initial value is 4.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of each component in the array. The symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, and GL_UNSIGNED_INT are accepted by glVertexAttribPointer and glVertexAttribIPointer. Additionally GL_HALF_FLOAT, GL_FLOAT, GL_DOUBLE, GL_FIXED, GL_INT_2_10_10_10_REV, GL_UNSIGNED_INT_2_10_10_10_REV and GL_UNSIGNED_INT_10F_11F_11F_REV are accepted by glVertexAttribPointer. GL_DOUBLE is also accepted by glVertexAttribLPointer and is the only token accepted by the type parameter for that function. The initial value is GL_FLOAT.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For glVertexAttribPointer, specifies whether fixed-point data values should be normalized (GL_TRUE) or converted directly as fixed-point values (GL_FALSE) when they are accessed.
        /// </para>
        /// </param>
        /// <param name="stride">
        /// <para>
        /// Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
        /// </para>
        /// </param>
        /// <param name="pointer">
        /// <para>
        /// Specifies a offset of the first component of the first generic vertex attribute in the array in the data store of the buffer currently bound to the GL_ARRAY_BUFFER target. The initial value is 0.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttribPointer")]
        public static extern void VertexAttribPointer<T5>(Int32 index, Int32 size, OpenTK.Graphics.OpenGL4.VertexAttribPointerType type, bool normalized, Int32 stride, [InAttribute, OutAttribute] T5[] pointer)
            where T5 : struct
        ;

        /// <summary>[requires: v2.0]
        /// Define an array of generic vertex attribute data
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, 4. Additionally, the symbolic constant GL_BGRA is accepted by glVertexAttribPointer. The initial value is 4.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of each component in the array. The symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, and GL_UNSIGNED_INT are accepted by glVertexAttribPointer and glVertexAttribIPointer. Additionally GL_HALF_FLOAT, GL_FLOAT, GL_DOUBLE, GL_FIXED, GL_INT_2_10_10_10_REV, GL_UNSIGNED_INT_2_10_10_10_REV and GL_UNSIGNED_INT_10F_11F_11F_REV are accepted by glVertexAttribPointer. GL_DOUBLE is also accepted by glVertexAttribLPointer and is the only token accepted by the type parameter for that function. The initial value is GL_FLOAT.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For glVertexAttribPointer, specifies whether fixed-point data values should be normalized (GL_TRUE) or converted directly as fixed-point values (GL_FALSE) when they are accessed.
        /// </para>
        /// </param>
        /// <param name="stride">
        /// <para>
        /// Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
        /// </para>
        /// </param>
        /// <param name="pointer">
        /// <para>
        /// Specifies a offset of the first component of the first generic vertex attribute in the array in the data store of the buffer currently bound to the GL_ARRAY_BUFFER target. The initial value is 0.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttribPointer")]
        public static extern void VertexAttribPointer<T5>(Int32 index, Int32 size, OpenTK.Graphics.OpenGL4.VertexAttribPointerType type, bool normalized, Int32 stride, [InAttribute, OutAttribute] T5[,] pointer)
            where T5 : struct
        ;

        /// <summary>[requires: v2.0]
        /// Define an array of generic vertex attribute data
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, 4. Additionally, the symbolic constant GL_BGRA is accepted by glVertexAttribPointer. The initial value is 4.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of each component in the array. The symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, and GL_UNSIGNED_INT are accepted by glVertexAttribPointer and glVertexAttribIPointer. Additionally GL_HALF_FLOAT, GL_FLOAT, GL_DOUBLE, GL_FIXED, GL_INT_2_10_10_10_REV, GL_UNSIGNED_INT_2_10_10_10_REV and GL_UNSIGNED_INT_10F_11F_11F_REV are accepted by glVertexAttribPointer. GL_DOUBLE is also accepted by glVertexAttribLPointer and is the only token accepted by the type parameter for that function. The initial value is GL_FLOAT.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For glVertexAttribPointer, specifies whether fixed-point data values should be normalized (GL_TRUE) or converted directly as fixed-point values (GL_FALSE) when they are accessed.
        /// </para>
        /// </param>
        /// <param name="stride">
        /// <para>
        /// Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
        /// </para>
        /// </param>
        /// <param name="pointer">
        /// <para>
        /// Specifies a offset of the first component of the first generic vertex attribute in the array in the data store of the buffer currently bound to the GL_ARRAY_BUFFER target. The initial value is 0.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttribPointer")]
        public static extern void VertexAttribPointer<T5>(Int32 index, Int32 size, OpenTK.Graphics.OpenGL4.VertexAttribPointerType type, bool normalized, Int32 stride, [InAttribute, OutAttribute] T5[,,] pointer)
            where T5 : struct
        ;

        /// <summary>[requires: v2.0]
        /// Define an array of generic vertex attribute data
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, 4. Additionally, the symbolic constant GL_BGRA is accepted by glVertexAttribPointer. The initial value is 4.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of each component in the array. The symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, and GL_UNSIGNED_INT are accepted by glVertexAttribPointer and glVertexAttribIPointer. Additionally GL_HALF_FLOAT, GL_FLOAT, GL_DOUBLE, GL_FIXED, GL_INT_2_10_10_10_REV, GL_UNSIGNED_INT_2_10_10_10_REV and GL_UNSIGNED_INT_10F_11F_11F_REV are accepted by glVertexAttribPointer. GL_DOUBLE is also accepted by glVertexAttribLPointer and is the only token accepted by the type parameter for that function. The initial value is GL_FLOAT.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For glVertexAttribPointer, specifies whether fixed-point data values should be normalized (GL_TRUE) or converted directly as fixed-point values (GL_FALSE) when they are accessed.
        /// </para>
        /// </param>
        /// <param name="stride">
        /// <para>
        /// Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
        /// </para>
        /// </param>
        /// <param name="pointer">
        /// <para>
        /// Specifies a offset of the first component of the first generic vertex attribute in the array in the data store of the buffer currently bound to the GL_ARRAY_BUFFER target. The initial value is 0.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttribPointer")]
        public static extern void VertexAttribPointer<T5>(Int32 index, Int32 size, OpenTK.Graphics.OpenGL4.VertexAttribPointerType type, bool normalized, Int32 stride, [InAttribute, OutAttribute] ref T5 pointer)
            where T5 : struct
        ;

        /// <summary>[requires: v2.0]
        /// Define an array of generic vertex attribute data
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, 4. Additionally, the symbolic constant GL_BGRA is accepted by glVertexAttribPointer. The initial value is 4.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of each component in the array. The symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, and GL_UNSIGNED_INT are accepted by glVertexAttribPointer and glVertexAttribIPointer. Additionally GL_HALF_FLOAT, GL_FLOAT, GL_DOUBLE, GL_FIXED, GL_INT_2_10_10_10_REV, GL_UNSIGNED_INT_2_10_10_10_REV and GL_UNSIGNED_INT_10F_11F_11F_REV are accepted by glVertexAttribPointer. GL_DOUBLE is also accepted by glVertexAttribLPointer and is the only token accepted by the type parameter for that function. The initial value is GL_FLOAT.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For glVertexAttribPointer, specifies whether fixed-point data values should be normalized (GL_TRUE) or converted directly as fixed-point values (GL_FALSE) when they are accessed.
        /// </para>
        /// </param>
        /// <param name="stride">
        /// <para>
        /// Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
        /// </para>
        /// </param>
        /// <param name="pointer">
        /// <para>
        /// Specifies a offset of the first component of the first generic vertex attribute in the array in the data store of the buffer currently bound to the GL_ARRAY_BUFFER target. The initial value is 0.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttribPointer")]
        public static extern void VertexAttribPointer(UInt32 index, Int32 size, OpenTK.Graphics.OpenGL4.VertexAttribPointerType type, bool normalized, Int32 stride, IntPtr pointer);

        /// <summary>[requires: v2.0]
        /// Define an array of generic vertex attribute data
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, 4. Additionally, the symbolic constant GL_BGRA is accepted by glVertexAttribPointer. The initial value is 4.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of each component in the array. The symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, and GL_UNSIGNED_INT are accepted by glVertexAttribPointer and glVertexAttribIPointer. Additionally GL_HALF_FLOAT, GL_FLOAT, GL_DOUBLE, GL_FIXED, GL_INT_2_10_10_10_REV, GL_UNSIGNED_INT_2_10_10_10_REV and GL_UNSIGNED_INT_10F_11F_11F_REV are accepted by glVertexAttribPointer. GL_DOUBLE is also accepted by glVertexAttribLPointer and is the only token accepted by the type parameter for that function. The initial value is GL_FLOAT.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For glVertexAttribPointer, specifies whether fixed-point data values should be normalized (GL_TRUE) or converted directly as fixed-point values (GL_FALSE) when they are accessed.
        /// </para>
        /// </param>
        /// <param name="stride">
        /// <para>
        /// Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
        /// </para>
        /// </param>
        /// <param name="pointer">
        /// <para>
        /// Specifies a offset of the first component of the first generic vertex attribute in the array in the data store of the buffer currently bound to the GL_ARRAY_BUFFER target. The initial value is 0.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttribPointer")]
        public static extern void VertexAttribPointer<T5>(UInt32 index, Int32 size, OpenTK.Graphics.OpenGL4.VertexAttribPointerType type, bool normalized, Int32 stride, [InAttribute, OutAttribute] T5[] pointer)
            where T5 : struct
        ;

        /// <summary>[requires: v2.0]
        /// Define an array of generic vertex attribute data
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, 4. Additionally, the symbolic constant GL_BGRA is accepted by glVertexAttribPointer. The initial value is 4.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of each component in the array. The symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, and GL_UNSIGNED_INT are accepted by glVertexAttribPointer and glVertexAttribIPointer. Additionally GL_HALF_FLOAT, GL_FLOAT, GL_DOUBLE, GL_FIXED, GL_INT_2_10_10_10_REV, GL_UNSIGNED_INT_2_10_10_10_REV and GL_UNSIGNED_INT_10F_11F_11F_REV are accepted by glVertexAttribPointer. GL_DOUBLE is also accepted by glVertexAttribLPointer and is the only token accepted by the type parameter for that function. The initial value is GL_FLOAT.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For glVertexAttribPointer, specifies whether fixed-point data values should be normalized (GL_TRUE) or converted directly as fixed-point values (GL_FALSE) when they are accessed.
        /// </para>
        /// </param>
        /// <param name="stride">
        /// <para>
        /// Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
        /// </para>
        /// </param>
        /// <param name="pointer">
        /// <para>
        /// Specifies a offset of the first component of the first generic vertex attribute in the array in the data store of the buffer currently bound to the GL_ARRAY_BUFFER target. The initial value is 0.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttribPointer")]
        public static extern void VertexAttribPointer<T5>(UInt32 index, Int32 size, OpenTK.Graphics.OpenGL4.VertexAttribPointerType type, bool normalized, Int32 stride, [InAttribute, OutAttribute] T5[,] pointer)
            where T5 : struct
        ;

        /// <summary>[requires: v2.0]
        /// Define an array of generic vertex attribute data
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, 4. Additionally, the symbolic constant GL_BGRA is accepted by glVertexAttribPointer. The initial value is 4.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of each component in the array. The symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, and GL_UNSIGNED_INT are accepted by glVertexAttribPointer and glVertexAttribIPointer. Additionally GL_HALF_FLOAT, GL_FLOAT, GL_DOUBLE, GL_FIXED, GL_INT_2_10_10_10_REV, GL_UNSIGNED_INT_2_10_10_10_REV and GL_UNSIGNED_INT_10F_11F_11F_REV are accepted by glVertexAttribPointer. GL_DOUBLE is also accepted by glVertexAttribLPointer and is the only token accepted by the type parameter for that function. The initial value is GL_FLOAT.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For glVertexAttribPointer, specifies whether fixed-point data values should be normalized (GL_TRUE) or converted directly as fixed-point values (GL_FALSE) when they are accessed.
        /// </para>
        /// </param>
        /// <param name="stride">
        /// <para>
        /// Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
        /// </para>
        /// </param>
        /// <param name="pointer">
        /// <para>
        /// Specifies a offset of the first component of the first generic vertex attribute in the array in the data store of the buffer currently bound to the GL_ARRAY_BUFFER target. The initial value is 0.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttribPointer")]
        public static extern void VertexAttribPointer<T5>(UInt32 index, Int32 size, OpenTK.Graphics.OpenGL4.VertexAttribPointerType type, bool normalized, Int32 stride, [InAttribute, OutAttribute] T5[,,] pointer)
            where T5 : struct
        ;

        /// <summary>[requires: v2.0]
        /// Define an array of generic vertex attribute data
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, 4. Additionally, the symbolic constant GL_BGRA is accepted by glVertexAttribPointer. The initial value is 4.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of each component in the array. The symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, and GL_UNSIGNED_INT are accepted by glVertexAttribPointer and glVertexAttribIPointer. Additionally GL_HALF_FLOAT, GL_FLOAT, GL_DOUBLE, GL_FIXED, GL_INT_2_10_10_10_REV, GL_UNSIGNED_INT_2_10_10_10_REV and GL_UNSIGNED_INT_10F_11F_11F_REV are accepted by glVertexAttribPointer. GL_DOUBLE is also accepted by glVertexAttribLPointer and is the only token accepted by the type parameter for that function. The initial value is GL_FLOAT.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For glVertexAttribPointer, specifies whether fixed-point data values should be normalized (GL_TRUE) or converted directly as fixed-point values (GL_FALSE) when they are accessed.
        /// </para>
        /// </param>
        /// <param name="stride">
        /// <para>
        /// Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
        /// </para>
        /// </param>
        /// <param name="pointer">
        /// <para>
        /// Specifies a offset of the first component of the first generic vertex attribute in the array in the data store of the buffer currently bound to the GL_ARRAY_BUFFER target. The initial value is 0.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttribPointer")]
        public static extern void VertexAttribPointer<T5>(UInt32 index, Int32 size, OpenTK.Graphics.OpenGL4.VertexAttribPointerType type, bool normalized, Int32 stride, [InAttribute, OutAttribute] ref T5 pointer)
            where T5 : struct
        ;

        /// <summary>[requires: v4.3 and ARB_vertex_attrib_binding|VERSION_4_3]
        /// Modify the rate at which generic vertex attributes advance
        /// </summary>
        /// <param name="bindingindex">
        /// <para>
        /// The index of the binding whose divisor to modify.
        /// </para>
        /// </param>
        /// <param name="divisor">
        /// <para>
        /// The new value for the instance step rate to apply.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_attrib_binding|VERSION_4_3", Version = "4.3", EntryPoint = "glVertexBindingDivisor")]
        public static extern void VertexBindingDivisor(Int32 bindingindex, Int32 divisor);

        /// <summary>[requires: v4.3 and ARB_vertex_attrib_binding|VERSION_4_3]
        /// Modify the rate at which generic vertex attributes advance
        /// </summary>
        /// <param name="bindingindex">
        /// <para>
        /// The index of the binding whose divisor to modify.
        /// </para>
        /// </param>
        /// <param name="divisor">
        /// <para>
        /// The new value for the instance step rate to apply.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_vertex_attrib_binding|VERSION_4_3", Version = "4.3", EntryPoint = "glVertexBindingDivisor")]
        public static extern void VertexBindingDivisor(UInt32 bindingindex, UInt32 divisor);

        /// <summary>[requires: v3.3 and ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glVertexP2ui")]
        public static extern void VertexP2(OpenTK.Graphics.OpenGL4.PackedPointerType type, Int32 value);

        /// <summary>[requires: v3.3 and ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glVertexP2ui")]
        public static extern void VertexP2(OpenTK.Graphics.OpenGL4.PackedPointerType type, UInt32 value);

        /// <summary>[requires: v3.3 and ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glVertexP2uiv")]
        public static extern unsafe void VertexP2(OpenTK.Graphics.OpenGL4.PackedPointerType type, Int32* value);

        /// <summary>[requires: v3.3 and ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glVertexP2uiv")]
        public static extern unsafe void VertexP2(OpenTK.Graphics.OpenGL4.PackedPointerType type, UInt32* value);

        /// <summary>[requires: v3.3 and ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glVertexP3ui")]
        public static extern void VertexP3(OpenTK.Graphics.OpenGL4.PackedPointerType type, Int32 value);

        /// <summary>[requires: v3.3 and ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glVertexP3ui")]
        public static extern void VertexP3(OpenTK.Graphics.OpenGL4.PackedPointerType type, UInt32 value);

        /// <summary>[requires: v3.3 and ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glVertexP3uiv")]
        public static extern unsafe void VertexP3(OpenTK.Graphics.OpenGL4.PackedPointerType type, Int32* value);

        /// <summary>[requires: v3.3 and ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glVertexP3uiv")]
        public static extern unsafe void VertexP3(OpenTK.Graphics.OpenGL4.PackedPointerType type, UInt32* value);

        /// <summary>[requires: v3.3 and ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glVertexP4ui")]
        public static extern void VertexP4(OpenTK.Graphics.OpenGL4.PackedPointerType type, Int32 value);

        /// <summary>[requires: v3.3 and ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glVertexP4ui")]
        public static extern void VertexP4(OpenTK.Graphics.OpenGL4.PackedPointerType type, UInt32 value);

        /// <summary>[requires: v3.3 and ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glVertexP4uiv")]
        public static extern unsafe void VertexP4(OpenTK.Graphics.OpenGL4.PackedPointerType type, Int32* value);

        /// <summary>[requires: v3.3 and ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glVertexP4uiv")]
        public static extern unsafe void VertexP4(OpenTK.Graphics.OpenGL4.PackedPointerType type, UInt32* value);

        /// <summary>[requires: v1.0]
        /// Set the viewport
        /// </summary>
        /// <param name="x">
        /// <para>
        /// Specify the lower left corner of the viewport rectangle, in pixels. The initial value is (0,0).
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specify the width and height of the viewport. When a GL context is first attached to a window, width and height are set to the dimensions of that window.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glViewport")]
        public static extern void Viewport(Int32 x, Int32 y, Int32 width, Int32 height);

        /// <summary>[requires: v4.1 and ARB_viewport_array|VERSION_4_1]
        /// Set multiple viewports
        /// </summary>
        /// <param name="first">
        /// <para>
        /// Specify the first viewport to set.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specify the number of viewports to set.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// Specify the address of an array containing the viewport parameters.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glViewportArrayv")]
        public static extern void ViewportArray(Int32 first, Int32 count, Single[] v);

        /// <summary>[requires: v4.1 and ARB_viewport_array|VERSION_4_1]
        /// Set multiple viewports
        /// </summary>
        /// <param name="first">
        /// <para>
        /// Specify the first viewport to set.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specify the number of viewports to set.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// Specify the address of an array containing the viewport parameters.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glViewportArrayv")]
        public static extern void ViewportArray(Int32 first, Int32 count, ref Single v);

        /// <summary>[requires: v4.1 and ARB_viewport_array|VERSION_4_1]
        /// Set multiple viewports
        /// </summary>
        /// <param name="first">
        /// <para>
        /// Specify the first viewport to set.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specify the number of viewports to set.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// Specify the address of an array containing the viewport parameters.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glViewportArrayv")]
        public static extern unsafe void ViewportArray(Int32 first, Int32 count, Single* v);

        /// <summary>[requires: v4.1 and ARB_viewport_array|VERSION_4_1]
        /// Set multiple viewports
        /// </summary>
        /// <param name="first">
        /// <para>
        /// Specify the first viewport to set.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specify the number of viewports to set.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// Specify the address of an array containing the viewport parameters.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glViewportArrayv")]
        public static extern void ViewportArray(UInt32 first, Int32 count, Single[] v);

        /// <summary>[requires: v4.1 and ARB_viewport_array|VERSION_4_1]
        /// Set multiple viewports
        /// </summary>
        /// <param name="first">
        /// <para>
        /// Specify the first viewport to set.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specify the number of viewports to set.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// Specify the address of an array containing the viewport parameters.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glViewportArrayv")]
        public static extern void ViewportArray(UInt32 first, Int32 count, ref Single v);

        /// <summary>[requires: v4.1 and ARB_viewport_array|VERSION_4_1]
        /// Set multiple viewports
        /// </summary>
        /// <param name="first">
        /// <para>
        /// Specify the first viewport to set.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specify the number of viewports to set.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// Specify the address of an array containing the viewport parameters.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glViewportArrayv")]
        public static extern unsafe void ViewportArray(UInt32 first, Int32 count, Single* v);

        /// <summary>[requires: v4.1 and ARB_viewport_array|VERSION_4_1]
        /// Set a specified viewport
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specify the first viewport to set.
        /// </para>
        /// </param>
        /// <param name="x">
        /// <para>
        /// For glViewportIndexedf, specifies the lower left corner of the viewport rectangle, in pixels. The initial value is (0,0).
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// For glViewportIndexedf, specifies the width and height of the viewport. When a GL context is first attached to a window, width and height are set to the dimensions of that window.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For glViewportIndexedfv, specifies the address of an array containing the viewport parameters.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glViewportIndexedf")]
        public static extern void ViewportIndexed(Int32 index, Single x, Single y, Single w, Single h);

        /// <summary>[requires: v4.1 and ARB_viewport_array|VERSION_4_1]
        /// Set a specified viewport
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specify the first viewport to set.
        /// </para>
        /// </param>
        /// <param name="x">
        /// <para>
        /// For glViewportIndexedf, specifies the lower left corner of the viewport rectangle, in pixels. The initial value is (0,0).
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// For glViewportIndexedf, specifies the width and height of the viewport. When a GL context is first attached to a window, width and height are set to the dimensions of that window.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For glViewportIndexedfv, specifies the address of an array containing the viewport parameters.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glViewportIndexedf")]
        public static extern void ViewportIndexed(UInt32 index, Single x, Single y, Single w, Single h);

        /// <summary>[requires: v4.1 and ARB_viewport_array|VERSION_4_1]
        /// Set a specified viewport
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specify the first viewport to set.
        /// </para>
        /// </param>
        /// <param name="x">
        /// <para>
        /// For glViewportIndexedf, specifies the lower left corner of the viewport rectangle, in pixels. The initial value is (0,0).
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// For glViewportIndexedf, specifies the width and height of the viewport. When a GL context is first attached to a window, width and height are set to the dimensions of that window.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For glViewportIndexedfv, specifies the address of an array containing the viewport parameters.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glViewportIndexedfv")]
        public static extern void ViewportIndexed(Int32 index, Single[] v);

        /// <summary>[requires: v4.1 and ARB_viewport_array|VERSION_4_1]
        /// Set a specified viewport
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specify the first viewport to set.
        /// </para>
        /// </param>
        /// <param name="x">
        /// <para>
        /// For glViewportIndexedf, specifies the lower left corner of the viewport rectangle, in pixels. The initial value is (0,0).
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// For glViewportIndexedf, specifies the width and height of the viewport. When a GL context is first attached to a window, width and height are set to the dimensions of that window.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For glViewportIndexedfv, specifies the address of an array containing the viewport parameters.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glViewportIndexedfv")]
        public static extern void ViewportIndexed(Int32 index, ref Single v);

        /// <summary>[requires: v4.1 and ARB_viewport_array|VERSION_4_1]
        /// Set a specified viewport
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specify the first viewport to set.
        /// </para>
        /// </param>
        /// <param name="x">
        /// <para>
        /// For glViewportIndexedf, specifies the lower left corner of the viewport rectangle, in pixels. The initial value is (0,0).
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// For glViewportIndexedf, specifies the width and height of the viewport. When a GL context is first attached to a window, width and height are set to the dimensions of that window.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For glViewportIndexedfv, specifies the address of an array containing the viewport parameters.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glViewportIndexedfv")]
        public static extern unsafe void ViewportIndexed(Int32 index, Single* v);

        /// <summary>[requires: v4.1 and ARB_viewport_array|VERSION_4_1]
        /// Set a specified viewport
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specify the first viewport to set.
        /// </para>
        /// </param>
        /// <param name="x">
        /// <para>
        /// For glViewportIndexedf, specifies the lower left corner of the viewport rectangle, in pixels. The initial value is (0,0).
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// For glViewportIndexedf, specifies the width and height of the viewport. When a GL context is first attached to a window, width and height are set to the dimensions of that window.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For glViewportIndexedfv, specifies the address of an array containing the viewport parameters.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glViewportIndexedfv")]
        public static extern void ViewportIndexed(UInt32 index, Single[] v);

        /// <summary>[requires: v4.1 and ARB_viewport_array|VERSION_4_1]
        /// Set a specified viewport
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specify the first viewport to set.
        /// </para>
        /// </param>
        /// <param name="x">
        /// <para>
        /// For glViewportIndexedf, specifies the lower left corner of the viewport rectangle, in pixels. The initial value is (0,0).
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// For glViewportIndexedf, specifies the width and height of the viewport. When a GL context is first attached to a window, width and height are set to the dimensions of that window.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For glViewportIndexedfv, specifies the address of an array containing the viewport parameters.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glViewportIndexedfv")]
        public static extern void ViewportIndexed(UInt32 index, ref Single v);

        /// <summary>[requires: v4.1 and ARB_viewport_array|VERSION_4_1]
        /// Set a specified viewport
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specify the first viewport to set.
        /// </para>
        /// </param>
        /// <param name="x">
        /// <para>
        /// For glViewportIndexedf, specifies the lower left corner of the viewport rectangle, in pixels. The initial value is (0,0).
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// For glViewportIndexedf, specifies the width and height of the viewport. When a GL context is first attached to a window, width and height are set to the dimensions of that window.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For glViewportIndexedfv, specifies the address of an array containing the viewport parameters.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glViewportIndexedfv")]
        public static extern unsafe void ViewportIndexed(UInt32 index, Single* v);

        /// <summary>[requires: v3.2 and ARB_sync|VERSION_3_2]
        /// Instruct the GL server to block until the specified sync object becomes signaled
        /// </summary>
        /// <param name="sync">
        /// <para>
        /// Specifies the sync object whose status to wait on.
        /// </para>
        /// </param>
        /// <param name="flags">
        /// <para>
        /// A bitfield controlling the command flushing behavior. flags may be zero.
        /// </para>
        /// </param>
        /// <param name="timeout">
        /// <para>
        /// Specifies the timeout that the server should wait before continuing. timeout must be GL_TIMEOUT_IGNORED.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ARB_sync|VERSION_3_2", Version = "3.2", EntryPoint = "glWaitSync")]
        public static extern OpenTK.Graphics.OpenGL4.WaitSyncStatus WaitSync(IntPtr sync, OpenTK.Graphics.OpenGL4.WaitSyncFlags flags, Int64 timeout);

        /// <summary>[requires: v3.2 and ARB_sync|VERSION_3_2]
        /// Instruct the GL server to block until the specified sync object becomes signaled
        /// </summary>
        /// <param name="sync">
        /// <para>
        /// Specifies the sync object whose status to wait on.
        /// </para>
        /// </param>
        /// <param name="flags">
        /// <para>
        /// A bitfield controlling the command flushing behavior. flags may be zero.
        /// </para>
        /// </param>
        /// <param name="timeout">
        /// <para>
        /// Specifies the timeout that the server should wait before continuing. timeout must be GL_TIMEOUT_IGNORED.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ARB_sync|VERSION_3_2", Version = "3.2", EntryPoint = "glWaitSync")]
        public static extern OpenTK.Graphics.OpenGL4.WaitSyncStatus WaitSync(IntPtr sync, OpenTK.Graphics.OpenGL4.WaitSyncFlags flags, UInt64 timeout);

        public static partial class Khr
        {
            /// <summary>[requires: KHR_debug]
            /// Specify a callback to receive debugging messages from the GL
            /// </summary>
            /// <param name="callback">
            /// <para>
            /// The address of a callback function that will be called when a debug message is generated.
            /// </para>
            /// </param>
            /// <param name="userParam">
            /// <para>
            /// A user supplied pointer that will be passed on each invocation of callback.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageCallbackKHR")]
            public static extern void DebugMessageCallback(DebugProcKhr callback, IntPtr userParam);

            /// <summary>[requires: KHR_debug]
            /// Specify a callback to receive debugging messages from the GL
            /// </summary>
            /// <param name="callback">
            /// <para>
            /// The address of a callback function that will be called when a debug message is generated.
            /// </para>
            /// </param>
            /// <param name="userParam">
            /// <para>
            /// A user supplied pointer that will be passed on each invocation of callback.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageCallbackKHR")]
            public static extern void DebugMessageCallback<T1>(DebugProcKhr callback, [InAttribute, OutAttribute] T1[] userParam)
                where T1 : struct
            ;

            /// <summary>[requires: KHR_debug]
            /// Specify a callback to receive debugging messages from the GL
            /// </summary>
            /// <param name="callback">
            /// <para>
            /// The address of a callback function that will be called when a debug message is generated.
            /// </para>
            /// </param>
            /// <param name="userParam">
            /// <para>
            /// A user supplied pointer that will be passed on each invocation of callback.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageCallbackKHR")]
            public static extern void DebugMessageCallback<T1>(DebugProcKhr callback, [InAttribute, OutAttribute] T1[,] userParam)
                where T1 : struct
            ;

            /// <summary>[requires: KHR_debug]
            /// Specify a callback to receive debugging messages from the GL
            /// </summary>
            /// <param name="callback">
            /// <para>
            /// The address of a callback function that will be called when a debug message is generated.
            /// </para>
            /// </param>
            /// <param name="userParam">
            /// <para>
            /// A user supplied pointer that will be passed on each invocation of callback.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageCallbackKHR")]
            public static extern void DebugMessageCallback<T1>(DebugProcKhr callback, [InAttribute, OutAttribute] T1[,,] userParam)
                where T1 : struct
            ;

            /// <summary>[requires: KHR_debug]
            /// Specify a callback to receive debugging messages from the GL
            /// </summary>
            /// <param name="callback">
            /// <para>
            /// The address of a callback function that will be called when a debug message is generated.
            /// </para>
            /// </param>
            /// <param name="userParam">
            /// <para>
            /// A user supplied pointer that will be passed on each invocation of callback.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageCallbackKHR")]
            public static extern void DebugMessageCallback<T1>(DebugProcKhr callback, [InAttribute, OutAttribute] ref T1 userParam)
                where T1 : struct
            ;

            /// <summary>[requires: KHR_debug]
            /// Control the reporting of debug messages in a debug context
            /// </summary>
            /// <param name="source">
            /// <para>
            /// The source of debug messages to enable or disable.
            /// </para>
            /// </param>
            /// <param name="type">
            /// <para>
            /// The type of debug messages to enable or disable.
            /// </para>
            /// </param>
            /// <param name="severity">
            /// <para>
            /// The severity of debug messages to enable or disable.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// The length of the array ids.
            /// </para>
            /// </param>
            /// <param name="ids">
            /// <para>
            /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
            /// </para>
            /// </param>
            /// <param name="enabled">
            /// <para>
            /// A Boolean flag determining whether the selected messages should be enabled or disabled.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageControlKHR")]
            public static extern void DebugMessageControl(OpenTK.Graphics.OpenGL4.All source, OpenTK.Graphics.OpenGL4.All type, OpenTK.Graphics.OpenGL4.All severity, Int32 count, Int32[] ids, bool enabled);

            /// <summary>[requires: KHR_debug]
            /// Control the reporting of debug messages in a debug context
            /// </summary>
            /// <param name="source">
            /// <para>
            /// The source of debug messages to enable or disable.
            /// </para>
            /// </param>
            /// <param name="type">
            /// <para>
            /// The type of debug messages to enable or disable.
            /// </para>
            /// </param>
            /// <param name="severity">
            /// <para>
            /// The severity of debug messages to enable or disable.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// The length of the array ids.
            /// </para>
            /// </param>
            /// <param name="ids">
            /// <para>
            /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
            /// </para>
            /// </param>
            /// <param name="enabled">
            /// <para>
            /// A Boolean flag determining whether the selected messages should be enabled or disabled.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageControlKHR")]
            public static extern void DebugMessageControl(OpenTK.Graphics.OpenGL4.All source, OpenTK.Graphics.OpenGL4.All type, OpenTK.Graphics.OpenGL4.All severity, Int32 count, ref Int32 ids, bool enabled);

            /// <summary>[requires: KHR_debug]
            /// Control the reporting of debug messages in a debug context
            /// </summary>
            /// <param name="source">
            /// <para>
            /// The source of debug messages to enable or disable.
            /// </para>
            /// </param>
            /// <param name="type">
            /// <para>
            /// The type of debug messages to enable or disable.
            /// </para>
            /// </param>
            /// <param name="severity">
            /// <para>
            /// The severity of debug messages to enable or disable.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// The length of the array ids.
            /// </para>
            /// </param>
            /// <param name="ids">
            /// <para>
            /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
            /// </para>
            /// </param>
            /// <param name="enabled">
            /// <para>
            /// A Boolean flag determining whether the selected messages should be enabled or disabled.
            /// </para>
            /// </param>
            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageControlKHR")]
            public static extern unsafe void DebugMessageControl(OpenTK.Graphics.OpenGL4.All source, OpenTK.Graphics.OpenGL4.All type, OpenTK.Graphics.OpenGL4.All severity, Int32 count, Int32* ids, bool enabled);

            /// <summary>[requires: KHR_debug]
            /// Control the reporting of debug messages in a debug context
            /// </summary>
            /// <param name="source">
            /// <para>
            /// The source of debug messages to enable or disable.
            /// </para>
            /// </param>
            /// <param name="type">
            /// <para>
            /// The type of debug messages to enable or disable.
            /// </para>
            /// </param>
            /// <param name="severity">
            /// <para>
            /// The severity of debug messages to enable or disable.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// The length of the array ids.
            /// </para>
            /// </param>
            /// <param name="ids">
            /// <para>
            /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
            /// </para>
            /// </param>
            /// <param name="enabled">
            /// <para>
            /// A Boolean flag determining whether the selected messages should be enabled or disabled.
            /// </para>
            /// </param>
            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageControlKHR")]
            public static extern void DebugMessageControl(OpenTK.Graphics.OpenGL4.All source, OpenTK.Graphics.OpenGL4.All type, OpenTK.Graphics.OpenGL4.All severity, Int32 count, UInt32[] ids, bool enabled);

            /// <summary>[requires: KHR_debug]
            /// Control the reporting of debug messages in a debug context
            /// </summary>
            /// <param name="source">
            /// <para>
            /// The source of debug messages to enable or disable.
            /// </para>
            /// </param>
            /// <param name="type">
            /// <para>
            /// The type of debug messages to enable or disable.
            /// </para>
            /// </param>
            /// <param name="severity">
            /// <para>
            /// The severity of debug messages to enable or disable.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// The length of the array ids.
            /// </para>
            /// </param>
            /// <param name="ids">
            /// <para>
            /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
            /// </para>
            /// </param>
            /// <param name="enabled">
            /// <para>
            /// A Boolean flag determining whether the selected messages should be enabled or disabled.
            /// </para>
            /// </param>
            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageControlKHR")]
            public static extern void DebugMessageControl(OpenTK.Graphics.OpenGL4.All source, OpenTK.Graphics.OpenGL4.All type, OpenTK.Graphics.OpenGL4.All severity, Int32 count, ref UInt32 ids, bool enabled);

            /// <summary>[requires: KHR_debug]
            /// Control the reporting of debug messages in a debug context
            /// </summary>
            /// <param name="source">
            /// <para>
            /// The source of debug messages to enable or disable.
            /// </para>
            /// </param>
            /// <param name="type">
            /// <para>
            /// The type of debug messages to enable or disable.
            /// </para>
            /// </param>
            /// <param name="severity">
            /// <para>
            /// The severity of debug messages to enable or disable.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// The length of the array ids.
            /// </para>
            /// </param>
            /// <param name="ids">
            /// <para>
            /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
            /// </para>
            /// </param>
            /// <param name="enabled">
            /// <para>
            /// A Boolean flag determining whether the selected messages should be enabled or disabled.
            /// </para>
            /// </param>
            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageControlKHR")]
            public static extern unsafe void DebugMessageControl(OpenTK.Graphics.OpenGL4.All source, OpenTK.Graphics.OpenGL4.All type, OpenTK.Graphics.OpenGL4.All severity, Int32 count, UInt32* ids, bool enabled);

            /// <summary>[requires: KHR_debug]
            /// Inject an application-supplied message into the debug message queue
            /// </summary>
            /// <param name="source">
            /// <para>
            /// The source of the debug message to insert.
            /// </para>
            /// </param>
            /// <param name="type">
            /// <para>
            /// The type of the debug message insert.
            /// </para>
            /// </param>
            /// <param name="id">
            /// <para>
            /// The user-supplied identifier of the message to insert.
            /// </para>
            /// </param>
            /// <param name="severity">
            /// <para>
            /// The severity of the debug messages to insert.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// The length string contained in the character array whose address is given by message.
            /// </para>
            /// </param>
            /// <param name="message">
            /// <para>
            /// The address of a character array containing the message to insert.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageInsertKHR")]
            public static extern void DebugMessageInsert(OpenTK.Graphics.OpenGL4.All source, OpenTK.Graphics.OpenGL4.All type, Int32 id, OpenTK.Graphics.OpenGL4.All severity, Int32 length, String buf);

            /// <summary>[requires: KHR_debug]
            /// Inject an application-supplied message into the debug message queue
            /// </summary>
            /// <param name="source">
            /// <para>
            /// The source of the debug message to insert.
            /// </para>
            /// </param>
            /// <param name="type">
            /// <para>
            /// The type of the debug message insert.
            /// </para>
            /// </param>
            /// <param name="id">
            /// <para>
            /// The user-supplied identifier of the message to insert.
            /// </para>
            /// </param>
            /// <param name="severity">
            /// <para>
            /// The severity of the debug messages to insert.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// The length string contained in the character array whose address is given by message.
            /// </para>
            /// </param>
            /// <param name="message">
            /// <para>
            /// The address of a character array containing the message to insert.
            /// </para>
            /// </param>
            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageInsertKHR")]
            public static extern void DebugMessageInsert(OpenTK.Graphics.OpenGL4.All source, OpenTK.Graphics.OpenGL4.All type, UInt32 id, OpenTK.Graphics.OpenGL4.All severity, Int32 length, String buf);

            /// <summary>[requires: KHR_debug]
            /// Retrieve messages from the debug message log
            /// </summary>
            /// <param name="count">
            /// <para>
            /// The number of debug messages to retrieve from the log.
            /// </para>
            /// </param>
            /// <param name="bufSize">
            /// <para>
            /// The size of the buffer whose address is given by messageLog.
            /// </para>
            /// </param>
            /// <param name="sources">
            /// <para>
            /// The address of an array of variables to receive the sources of the retrieved messages.
            /// </para>
            /// </param>
            /// <param name="types">
            /// <para>
            /// The address of an array of variables to receive the types of the retrieved messages.
            /// </para>
            /// </param>
            /// <param name="ids">
            /// <para>
            /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
            /// </para>
            /// </param>
            /// <param name="severities">
            /// <para>
            /// The address of an array of variables to receive the severites of the retrieved messages.
            /// </para>
            /// </param>
            /// <param name="lengths">
            /// <para>
            /// The address of an array of variables to receive the lengths of the received messages.
            /// </para>
            /// </param>
            /// <param name="messageLog">
            /// <para>
            /// The address of an array of characters that will receive the messages.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetDebugMessageLogKHR")]
            public static extern Int32 GetDebugMessageLog(Int32 count, Int32 bufSize, [OutAttribute] OpenTK.Graphics.OpenGL4.All[] sources, [OutAttribute] OpenTK.Graphics.OpenGL4.All[] types, [OutAttribute] Int32[] ids, [OutAttribute] OpenTK.Graphics.OpenGL4.All[] severities, [OutAttribute] Int32[] lengths, [OutAttribute] StringBuilder messageLog);

            /// <summary>[requires: KHR_debug]
            /// Retrieve messages from the debug message log
            /// </summary>
            /// <param name="count">
            /// <para>
            /// The number of debug messages to retrieve from the log.
            /// </para>
            /// </param>
            /// <param name="bufSize">
            /// <para>
            /// The size of the buffer whose address is given by messageLog.
            /// </para>
            /// </param>
            /// <param name="sources">
            /// <para>
            /// The address of an array of variables to receive the sources of the retrieved messages.
            /// </para>
            /// </param>
            /// <param name="types">
            /// <para>
            /// The address of an array of variables to receive the types of the retrieved messages.
            /// </para>
            /// </param>
            /// <param name="ids">
            /// <para>
            /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
            /// </para>
            /// </param>
            /// <param name="severities">
            /// <para>
            /// The address of an array of variables to receive the severites of the retrieved messages.
            /// </para>
            /// </param>
            /// <param name="lengths">
            /// <para>
            /// The address of an array of variables to receive the lengths of the received messages.
            /// </para>
            /// </param>
            /// <param name="messageLog">
            /// <para>
            /// The address of an array of characters that will receive the messages.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetDebugMessageLogKHR")]
            public static extern Int32 GetDebugMessageLog(Int32 count, Int32 bufSize, [OutAttribute] out OpenTK.Graphics.OpenGL4.All sources, [OutAttribute] out OpenTK.Graphics.OpenGL4.All types, [OutAttribute] out Int32 ids, [OutAttribute] out OpenTK.Graphics.OpenGL4.All severities, [OutAttribute] out Int32 lengths, [OutAttribute] StringBuilder messageLog);

            /// <summary>[requires: KHR_debug]
            /// Retrieve messages from the debug message log
            /// </summary>
            /// <param name="count">
            /// <para>
            /// The number of debug messages to retrieve from the log.
            /// </para>
            /// </param>
            /// <param name="bufSize">
            /// <para>
            /// The size of the buffer whose address is given by messageLog.
            /// </para>
            /// </param>
            /// <param name="sources">
            /// <para>
            /// The address of an array of variables to receive the sources of the retrieved messages.
            /// </para>
            /// </param>
            /// <param name="types">
            /// <para>
            /// The address of an array of variables to receive the types of the retrieved messages.
            /// </para>
            /// </param>
            /// <param name="ids">
            /// <para>
            /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
            /// </para>
            /// </param>
            /// <param name="severities">
            /// <para>
            /// The address of an array of variables to receive the severites of the retrieved messages.
            /// </para>
            /// </param>
            /// <param name="lengths">
            /// <para>
            /// The address of an array of variables to receive the lengths of the received messages.
            /// </para>
            /// </param>
            /// <param name="messageLog">
            /// <para>
            /// The address of an array of characters that will receive the messages.
            /// </para>
            /// </param>
            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetDebugMessageLogKHR")]
            public static extern unsafe Int32 GetDebugMessageLog(Int32 count, Int32 bufSize, [OutAttribute] OpenTK.Graphics.OpenGL4.All* sources, [OutAttribute] OpenTK.Graphics.OpenGL4.All* types, [OutAttribute] Int32* ids, [OutAttribute] OpenTK.Graphics.OpenGL4.All* severities, [OutAttribute] Int32* lengths, [OutAttribute] StringBuilder messageLog);

            /// <summary>[requires: KHR_debug]
            /// Retrieve messages from the debug message log
            /// </summary>
            /// <param name="count">
            /// <para>
            /// The number of debug messages to retrieve from the log.
            /// </para>
            /// </param>
            /// <param name="bufSize">
            /// <para>
            /// The size of the buffer whose address is given by messageLog.
            /// </para>
            /// </param>
            /// <param name="sources">
            /// <para>
            /// The address of an array of variables to receive the sources of the retrieved messages.
            /// </para>
            /// </param>
            /// <param name="types">
            /// <para>
            /// The address of an array of variables to receive the types of the retrieved messages.
            /// </para>
            /// </param>
            /// <param name="ids">
            /// <para>
            /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
            /// </para>
            /// </param>
            /// <param name="severities">
            /// <para>
            /// The address of an array of variables to receive the severites of the retrieved messages.
            /// </para>
            /// </param>
            /// <param name="lengths">
            /// <para>
            /// The address of an array of variables to receive the lengths of the received messages.
            /// </para>
            /// </param>
            /// <param name="messageLog">
            /// <para>
            /// The address of an array of characters that will receive the messages.
            /// </para>
            /// </param>
            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetDebugMessageLogKHR")]
            public static extern Int32 GetDebugMessageLog(UInt32 count, Int32 bufSize, [OutAttribute] OpenTK.Graphics.OpenGL4.All[] sources, [OutAttribute] OpenTK.Graphics.OpenGL4.All[] types, [OutAttribute] UInt32[] ids, [OutAttribute] OpenTK.Graphics.OpenGL4.All[] severities, [OutAttribute] Int32[] lengths, [OutAttribute] StringBuilder messageLog);

            /// <summary>[requires: KHR_debug]
            /// Retrieve messages from the debug message log
            /// </summary>
            /// <param name="count">
            /// <para>
            /// The number of debug messages to retrieve from the log.
            /// </para>
            /// </param>
            /// <param name="bufSize">
            /// <para>
            /// The size of the buffer whose address is given by messageLog.
            /// </para>
            /// </param>
            /// <param name="sources">
            /// <para>
            /// The address of an array of variables to receive the sources of the retrieved messages.
            /// </para>
            /// </param>
            /// <param name="types">
            /// <para>
            /// The address of an array of variables to receive the types of the retrieved messages.
            /// </para>
            /// </param>
            /// <param name="ids">
            /// <para>
            /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
            /// </para>
            /// </param>
            /// <param name="severities">
            /// <para>
            /// The address of an array of variables to receive the severites of the retrieved messages.
            /// </para>
            /// </param>
            /// <param name="lengths">
            /// <para>
            /// The address of an array of variables to receive the lengths of the received messages.
            /// </para>
            /// </param>
            /// <param name="messageLog">
            /// <para>
            /// The address of an array of characters that will receive the messages.
            /// </para>
            /// </param>
            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetDebugMessageLogKHR")]
            public static extern Int32 GetDebugMessageLog(UInt32 count, Int32 bufSize, [OutAttribute] out OpenTK.Graphics.OpenGL4.All sources, [OutAttribute] out OpenTK.Graphics.OpenGL4.All types, [OutAttribute] out UInt32 ids, [OutAttribute] out OpenTK.Graphics.OpenGL4.All severities, [OutAttribute] out Int32 lengths, [OutAttribute] StringBuilder messageLog);

            /// <summary>[requires: KHR_debug]
            /// Retrieve messages from the debug message log
            /// </summary>
            /// <param name="count">
            /// <para>
            /// The number of debug messages to retrieve from the log.
            /// </para>
            /// </param>
            /// <param name="bufSize">
            /// <para>
            /// The size of the buffer whose address is given by messageLog.
            /// </para>
            /// </param>
            /// <param name="sources">
            /// <para>
            /// The address of an array of variables to receive the sources of the retrieved messages.
            /// </para>
            /// </param>
            /// <param name="types">
            /// <para>
            /// The address of an array of variables to receive the types of the retrieved messages.
            /// </para>
            /// </param>
            /// <param name="ids">
            /// <para>
            /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
            /// </para>
            /// </param>
            /// <param name="severities">
            /// <para>
            /// The address of an array of variables to receive the severites of the retrieved messages.
            /// </para>
            /// </param>
            /// <param name="lengths">
            /// <para>
            /// The address of an array of variables to receive the lengths of the received messages.
            /// </para>
            /// </param>
            /// <param name="messageLog">
            /// <para>
            /// The address of an array of characters that will receive the messages.
            /// </para>
            /// </param>
            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetDebugMessageLogKHR")]
            public static extern unsafe Int32 GetDebugMessageLog(UInt32 count, Int32 bufSize, [OutAttribute] OpenTK.Graphics.OpenGL4.All* sources, [OutAttribute] OpenTK.Graphics.OpenGL4.All* types, [OutAttribute] UInt32* ids, [OutAttribute] OpenTK.Graphics.OpenGL4.All* severities, [OutAttribute] Int32* lengths, [OutAttribute] StringBuilder messageLog);

            /// <summary>[requires: KHR_debug]
            /// Retrieve the label of a named object identified within a namespace
            /// </summary>
            /// <param name="identifier">
            /// <para>
            /// The namespace from which the name of the object is allocated.
            /// </para>
            /// </param>
            /// <param name="name">
            /// <para>
            /// The name of the object whose label to retrieve.
            /// </para>
            /// </param>
            /// <param name="bufSize">
            /// <para>
            /// The length of the buffer whose address is in label.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// The address of a variable to receive the length of the object label.
            /// </para>
            /// </param>
            /// <param name="label">
            /// <para>
            /// The address of a string that will receive the object label.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectLabelKHR")]
            public static extern void GetObjectLabel(OpenTK.Graphics.OpenGL4.All identifier, Int32 name, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute] StringBuilder label);

            /// <summary>[requires: KHR_debug]
            /// Retrieve the label of a named object identified within a namespace
            /// </summary>
            /// <param name="identifier">
            /// <para>
            /// The namespace from which the name of the object is allocated.
            /// </para>
            /// </param>
            /// <param name="name">
            /// <para>
            /// The name of the object whose label to retrieve.
            /// </para>
            /// </param>
            /// <param name="bufSize">
            /// <para>
            /// The length of the buffer whose address is in label.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// The address of a variable to receive the length of the object label.
            /// </para>
            /// </param>
            /// <param name="label">
            /// <para>
            /// The address of a string that will receive the object label.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectLabelKHR")]
            public static extern void GetObjectLabel(OpenTK.Graphics.OpenGL4.All identifier, Int32 name, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder label);

            /// <summary>[requires: KHR_debug]
            /// Retrieve the label of a named object identified within a namespace
            /// </summary>
            /// <param name="identifier">
            /// <para>
            /// The namespace from which the name of the object is allocated.
            /// </para>
            /// </param>
            /// <param name="name">
            /// <para>
            /// The name of the object whose label to retrieve.
            /// </para>
            /// </param>
            /// <param name="bufSize">
            /// <para>
            /// The length of the buffer whose address is in label.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// The address of a variable to receive the length of the object label.
            /// </para>
            /// </param>
            /// <param name="label">
            /// <para>
            /// The address of a string that will receive the object label.
            /// </para>
            /// </param>
            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectLabelKHR")]
            public static extern unsafe void GetObjectLabel(OpenTK.Graphics.OpenGL4.All identifier, Int32 name, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder label);

            /// <summary>[requires: KHR_debug]
            /// Retrieve the label of a named object identified within a namespace
            /// </summary>
            /// <param name="identifier">
            /// <para>
            /// The namespace from which the name of the object is allocated.
            /// </para>
            /// </param>
            /// <param name="name">
            /// <para>
            /// The name of the object whose label to retrieve.
            /// </para>
            /// </param>
            /// <param name="bufSize">
            /// <para>
            /// The length of the buffer whose address is in label.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// The address of a variable to receive the length of the object label.
            /// </para>
            /// </param>
            /// <param name="label">
            /// <para>
            /// The address of a string that will receive the object label.
            /// </para>
            /// </param>
            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectLabelKHR")]
            public static extern void GetObjectLabel(OpenTK.Graphics.OpenGL4.All identifier, UInt32 name, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute] StringBuilder label);

            /// <summary>[requires: KHR_debug]
            /// Retrieve the label of a named object identified within a namespace
            /// </summary>
            /// <param name="identifier">
            /// <para>
            /// The namespace from which the name of the object is allocated.
            /// </para>
            /// </param>
            /// <param name="name">
            /// <para>
            /// The name of the object whose label to retrieve.
            /// </para>
            /// </param>
            /// <param name="bufSize">
            /// <para>
            /// The length of the buffer whose address is in label.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// The address of a variable to receive the length of the object label.
            /// </para>
            /// </param>
            /// <param name="label">
            /// <para>
            /// The address of a string that will receive the object label.
            /// </para>
            /// </param>
            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectLabelKHR")]
            public static extern void GetObjectLabel(OpenTK.Graphics.OpenGL4.All identifier, UInt32 name, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder label);

            /// <summary>[requires: KHR_debug]
            /// Retrieve the label of a named object identified within a namespace
            /// </summary>
            /// <param name="identifier">
            /// <para>
            /// The namespace from which the name of the object is allocated.
            /// </para>
            /// </param>
            /// <param name="name">
            /// <para>
            /// The name of the object whose label to retrieve.
            /// </para>
            /// </param>
            /// <param name="bufSize">
            /// <para>
            /// The length of the buffer whose address is in label.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// The address of a variable to receive the length of the object label.
            /// </para>
            /// </param>
            /// <param name="label">
            /// <para>
            /// The address of a string that will receive the object label.
            /// </para>
            /// </param>
            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectLabelKHR")]
            public static extern unsafe void GetObjectLabel(OpenTK.Graphics.OpenGL4.All identifier, UInt32 name, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder label);

            /// <summary>[requires: KHR_debug]
            /// Retrieve the label of a sync object identified by a pointer
            /// </summary>
            /// <param name="ptr">
            /// <para>
            /// The name of the sync object whose label to retrieve.
            /// </para>
            /// </param>
            /// <param name="bufSize">
            /// <para>
            /// The length of the buffer whose address is in label.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// The address of a variable to receive the length of the object label.
            /// </para>
            /// </param>
            /// <param name="label">
            /// <para>
            /// The address of a string that will receive the object label.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectPtrLabelKHR")]
            public static extern void GetObjectPtrLabel(IntPtr ptr, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute] StringBuilder label);

            /// <summary>[requires: KHR_debug]
            /// Retrieve the label of a sync object identified by a pointer
            /// </summary>
            /// <param name="ptr">
            /// <para>
            /// The name of the sync object whose label to retrieve.
            /// </para>
            /// </param>
            /// <param name="bufSize">
            /// <para>
            /// The length of the buffer whose address is in label.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// The address of a variable to receive the length of the object label.
            /// </para>
            /// </param>
            /// <param name="label">
            /// <para>
            /// The address of a string that will receive the object label.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectPtrLabelKHR")]
            public static extern void GetObjectPtrLabel(IntPtr ptr, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder label);

            /// <summary>[requires: KHR_debug]
            /// Retrieve the label of a sync object identified by a pointer
            /// </summary>
            /// <param name="ptr">
            /// <para>
            /// The name of the sync object whose label to retrieve.
            /// </para>
            /// </param>
            /// <param name="bufSize">
            /// <para>
            /// The length of the buffer whose address is in label.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// The address of a variable to receive the length of the object label.
            /// </para>
            /// </param>
            /// <param name="label">
            /// <para>
            /// The address of a string that will receive the object label.
            /// </para>
            /// </param>
            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectPtrLabelKHR")]
            public static extern unsafe void GetObjectPtrLabel(IntPtr ptr, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder label);

            /// <summary>[requires: KHR_debug]
            /// Retrieve the label of a sync object identified by a pointer
            /// </summary>
            /// <param name="ptr">
            /// <para>
            /// The name of the sync object whose label to retrieve.
            /// </para>
            /// </param>
            /// <param name="bufSize">
            /// <para>
            /// The length of the buffer whose address is in label.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// The address of a variable to receive the length of the object label.
            /// </para>
            /// </param>
            /// <param name="label">
            /// <para>
            /// The address of a string that will receive the object label.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectPtrLabelKHR")]
            public static extern void GetObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[] ptr, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute] StringBuilder label)
                where T0 : struct
            ;

            /// <summary>[requires: KHR_debug]
            /// Retrieve the label of a sync object identified by a pointer
            /// </summary>
            /// <param name="ptr">
            /// <para>
            /// The name of the sync object whose label to retrieve.
            /// </para>
            /// </param>
            /// <param name="bufSize">
            /// <para>
            /// The length of the buffer whose address is in label.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// The address of a variable to receive the length of the object label.
            /// </para>
            /// </param>
            /// <param name="label">
            /// <para>
            /// The address of a string that will receive the object label.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectPtrLabelKHR")]
            public static extern void GetObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[] ptr, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder label)
                where T0 : struct
            ;

            /// <summary>[requires: KHR_debug]
            /// Retrieve the label of a sync object identified by a pointer
            /// </summary>
            /// <param name="ptr">
            /// <para>
            /// The name of the sync object whose label to retrieve.
            /// </para>
            /// </param>
            /// <param name="bufSize">
            /// <para>
            /// The length of the buffer whose address is in label.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// The address of a variable to receive the length of the object label.
            /// </para>
            /// </param>
            /// <param name="label">
            /// <para>
            /// The address of a string that will receive the object label.
            /// </para>
            /// </param>
            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectPtrLabelKHR")]
            public static extern unsafe void GetObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[] ptr, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder label)
                where T0 : struct
            ;

            /// <summary>[requires: KHR_debug]
            /// Retrieve the label of a sync object identified by a pointer
            /// </summary>
            /// <param name="ptr">
            /// <para>
            /// The name of the sync object whose label to retrieve.
            /// </para>
            /// </param>
            /// <param name="bufSize">
            /// <para>
            /// The length of the buffer whose address is in label.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// The address of a variable to receive the length of the object label.
            /// </para>
            /// </param>
            /// <param name="label">
            /// <para>
            /// The address of a string that will receive the object label.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectPtrLabelKHR")]
            public static extern void GetObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[,] ptr, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute] StringBuilder label)
                where T0 : struct
            ;

            /// <summary>[requires: KHR_debug]
            /// Retrieve the label of a sync object identified by a pointer
            /// </summary>
            /// <param name="ptr">
            /// <para>
            /// The name of the sync object whose label to retrieve.
            /// </para>
            /// </param>
            /// <param name="bufSize">
            /// <para>
            /// The length of the buffer whose address is in label.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// The address of a variable to receive the length of the object label.
            /// </para>
            /// </param>
            /// <param name="label">
            /// <para>
            /// The address of a string that will receive the object label.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectPtrLabelKHR")]
            public static extern void GetObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[,] ptr, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder label)
                where T0 : struct
            ;

            /// <summary>[requires: KHR_debug]
            /// Retrieve the label of a sync object identified by a pointer
            /// </summary>
            /// <param name="ptr">
            /// <para>
            /// The name of the sync object whose label to retrieve.
            /// </para>
            /// </param>
            /// <param name="bufSize">
            /// <para>
            /// The length of the buffer whose address is in label.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// The address of a variable to receive the length of the object label.
            /// </para>
            /// </param>
            /// <param name="label">
            /// <para>
            /// The address of a string that will receive the object label.
            /// </para>
            /// </param>
            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectPtrLabelKHR")]
            public static extern unsafe void GetObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[,] ptr, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder label)
                where T0 : struct
            ;

            /// <summary>[requires: KHR_debug]
            /// Retrieve the label of a sync object identified by a pointer
            /// </summary>
            /// <param name="ptr">
            /// <para>
            /// The name of the sync object whose label to retrieve.
            /// </para>
            /// </param>
            /// <param name="bufSize">
            /// <para>
            /// The length of the buffer whose address is in label.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// The address of a variable to receive the length of the object label.
            /// </para>
            /// </param>
            /// <param name="label">
            /// <para>
            /// The address of a string that will receive the object label.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectPtrLabelKHR")]
            public static extern void GetObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[,,] ptr, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute] StringBuilder label)
                where T0 : struct
            ;

            /// <summary>[requires: KHR_debug]
            /// Retrieve the label of a sync object identified by a pointer
            /// </summary>
            /// <param name="ptr">
            /// <para>
            /// The name of the sync object whose label to retrieve.
            /// </para>
            /// </param>
            /// <param name="bufSize">
            /// <para>
            /// The length of the buffer whose address is in label.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// The address of a variable to receive the length of the object label.
            /// </para>
            /// </param>
            /// <param name="label">
            /// <para>
            /// The address of a string that will receive the object label.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectPtrLabelKHR")]
            public static extern void GetObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[,,] ptr, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder label)
                where T0 : struct
            ;

            /// <summary>[requires: KHR_debug]
            /// Retrieve the label of a sync object identified by a pointer
            /// </summary>
            /// <param name="ptr">
            /// <para>
            /// The name of the sync object whose label to retrieve.
            /// </para>
            /// </param>
            /// <param name="bufSize">
            /// <para>
            /// The length of the buffer whose address is in label.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// The address of a variable to receive the length of the object label.
            /// </para>
            /// </param>
            /// <param name="label">
            /// <para>
            /// The address of a string that will receive the object label.
            /// </para>
            /// </param>
            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectPtrLabelKHR")]
            public static extern unsafe void GetObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[,,] ptr, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder label)
                where T0 : struct
            ;

            /// <summary>[requires: KHR_debug]
            /// Retrieve the label of a sync object identified by a pointer
            /// </summary>
            /// <param name="ptr">
            /// <para>
            /// The name of the sync object whose label to retrieve.
            /// </para>
            /// </param>
            /// <param name="bufSize">
            /// <para>
            /// The length of the buffer whose address is in label.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// The address of a variable to receive the length of the object label.
            /// </para>
            /// </param>
            /// <param name="label">
            /// <para>
            /// The address of a string that will receive the object label.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectPtrLabelKHR")]
            public static extern void GetObjectPtrLabel<T0>([InAttribute, OutAttribute] ref T0 ptr, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute] StringBuilder label)
                where T0 : struct
            ;

            /// <summary>[requires: KHR_debug]
            /// Retrieve the label of a sync object identified by a pointer
            /// </summary>
            /// <param name="ptr">
            /// <para>
            /// The name of the sync object whose label to retrieve.
            /// </para>
            /// </param>
            /// <param name="bufSize">
            /// <para>
            /// The length of the buffer whose address is in label.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// The address of a variable to receive the length of the object label.
            /// </para>
            /// </param>
            /// <param name="label">
            /// <para>
            /// The address of a string that will receive the object label.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectPtrLabelKHR")]
            public static extern void GetObjectPtrLabel<T0>([InAttribute, OutAttribute] ref T0 ptr, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder label)
                where T0 : struct
            ;

            /// <summary>[requires: KHR_debug]
            /// Retrieve the label of a sync object identified by a pointer
            /// </summary>
            /// <param name="ptr">
            /// <para>
            /// The name of the sync object whose label to retrieve.
            /// </para>
            /// </param>
            /// <param name="bufSize">
            /// <para>
            /// The length of the buffer whose address is in label.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// The address of a variable to receive the length of the object label.
            /// </para>
            /// </param>
            /// <param name="label">
            /// <para>
            /// The address of a string that will receive the object label.
            /// </para>
            /// </param>
            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectPtrLabelKHR")]
            public static extern unsafe void GetObjectPtrLabel<T0>([InAttribute, OutAttribute] ref T0 ptr, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder label)
                where T0 : struct
            ;

            /// <summary>[requires: KHR_debug]</summary>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetPointervKHR")]
            public static extern void GetPointer(OpenTK.Graphics.OpenGL4.All pname, [OutAttribute] IntPtr @params);

            /// <summary>[requires: KHR_debug]</summary>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetPointervKHR")]
            public static extern void GetPointer<T1>(OpenTK.Graphics.OpenGL4.All pname, [InAttribute, OutAttribute] T1[] @params)
                where T1 : struct
            ;

            /// <summary>[requires: KHR_debug]</summary>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetPointervKHR")]
            public static extern void GetPointer<T1>(OpenTK.Graphics.OpenGL4.All pname, [InAttribute, OutAttribute] T1[,] @params)
                where T1 : struct
            ;

            /// <summary>[requires: KHR_debug]</summary>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetPointervKHR")]
            public static extern void GetPointer<T1>(OpenTK.Graphics.OpenGL4.All pname, [InAttribute, OutAttribute] T1[,,] @params)
                where T1 : struct
            ;

            /// <summary>[requires: KHR_debug]</summary>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetPointervKHR")]
            public static extern void GetPointer<T1>(OpenTK.Graphics.OpenGL4.All pname, [InAttribute, OutAttribute] ref T1 @params)
                where T1 : struct
            ;

            /// <summary>[requires: KHR_debug]
            /// Label a named object identified within a namespace
            /// </summary>
            /// <param name="identifier">
            /// <para>
            /// The namespace from which the name of the object is allocated.
            /// </para>
            /// </param>
            /// <param name="name">
            /// <para>
            /// The name of the object to label.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// The length of the label to be used for the object.
            /// </para>
            /// </param>
            /// <param name="label">
            /// <para>
            /// The address of a string containing the label to assign to the object.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glObjectLabelKHR")]
            public static extern void ObjectLabel(OpenTK.Graphics.OpenGL4.All identifier, Int32 name, Int32 length, String label);

            /// <summary>[requires: KHR_debug]
            /// Label a named object identified within a namespace
            /// </summary>
            /// <param name="identifier">
            /// <para>
            /// The namespace from which the name of the object is allocated.
            /// </para>
            /// </param>
            /// <param name="name">
            /// <para>
            /// The name of the object to label.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// The length of the label to be used for the object.
            /// </para>
            /// </param>
            /// <param name="label">
            /// <para>
            /// The address of a string containing the label to assign to the object.
            /// </para>
            /// </param>
            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glObjectLabelKHR")]
            public static extern void ObjectLabel(OpenTK.Graphics.OpenGL4.All identifier, UInt32 name, Int32 length, String label);

            /// <summary>[requires: KHR_debug]
            /// Label a a sync object identified by a pointer
            /// </summary>
            /// <param name="ptr">
            /// <para>
            /// A pointer identifying a sync object.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// The length of the label to be used for the object.
            /// </para>
            /// </param>
            /// <param name="label">
            /// <para>
            /// The address of a string containing the label to assign to the object.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glObjectPtrLabelKHR")]
            public static extern void ObjectPtrLabel(IntPtr ptr, Int32 length, String label);

            /// <summary>[requires: KHR_debug]
            /// Label a a sync object identified by a pointer
            /// </summary>
            /// <param name="ptr">
            /// <para>
            /// A pointer identifying a sync object.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// The length of the label to be used for the object.
            /// </para>
            /// </param>
            /// <param name="label">
            /// <para>
            /// The address of a string containing the label to assign to the object.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glObjectPtrLabelKHR")]
            public static extern void ObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[] ptr, Int32 length, String label)
                where T0 : struct
            ;

            /// <summary>[requires: KHR_debug]
            /// Label a a sync object identified by a pointer
            /// </summary>
            /// <param name="ptr">
            /// <para>
            /// A pointer identifying a sync object.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// The length of the label to be used for the object.
            /// </para>
            /// </param>
            /// <param name="label">
            /// <para>
            /// The address of a string containing the label to assign to the object.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glObjectPtrLabelKHR")]
            public static extern void ObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[,] ptr, Int32 length, String label)
                where T0 : struct
            ;

            /// <summary>[requires: KHR_debug]
            /// Label a a sync object identified by a pointer
            /// </summary>
            /// <param name="ptr">
            /// <para>
            /// A pointer identifying a sync object.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// The length of the label to be used for the object.
            /// </para>
            /// </param>
            /// <param name="label">
            /// <para>
            /// The address of a string containing the label to assign to the object.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glObjectPtrLabelKHR")]
            public static extern void ObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[,,] ptr, Int32 length, String label)
                where T0 : struct
            ;

            /// <summary>[requires: KHR_debug]
            /// Label a a sync object identified by a pointer
            /// </summary>
            /// <param name="ptr">
            /// <para>
            /// A pointer identifying a sync object.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// The length of the label to be used for the object.
            /// </para>
            /// </param>
            /// <param name="label">
            /// <para>
            /// The address of a string containing the label to assign to the object.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glObjectPtrLabelKHR")]
            public static extern void ObjectPtrLabel<T0>([InAttribute, OutAttribute] ref T0 ptr, Int32 length, String label)
                where T0 : struct
            ;

            /// <summary>[requires: KHR_debug]
            /// Pop the active debug group
            /// </summary>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glPopDebugGroupKHR")]
            public static extern void PopDebugGroup();

            /// <summary>[requires: KHR_debug]
            /// Push a named debug group into the command stream
            /// </summary>
            /// <param name="source">
            /// <para>
            /// The source of the debug message.
            /// </para>
            /// </param>
            /// <param name="id">
            /// <para>
            /// The identifier of the message.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// The length of the message to be sent to the debug output stream.
            /// </para>
            /// </param>
            /// <param name="message">
            /// <para>
            /// The a string containing the message to be sent to the debug output stream.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glPushDebugGroupKHR")]
            public static extern void PushDebugGroup(OpenTK.Graphics.OpenGL4.All source, Int32 id, Int32 length, String message);

            /// <summary>[requires: KHR_debug]
            /// Push a named debug group into the command stream
            /// </summary>
            /// <param name="source">
            /// <para>
            /// The source of the debug message.
            /// </para>
            /// </param>
            /// <param name="id">
            /// <para>
            /// The identifier of the message.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// The length of the message to be sent to the debug output stream.
            /// </para>
            /// </param>
            /// <param name="message">
            /// <para>
            /// The a string containing the message to be sent to the debug output stream.
            /// </para>
            /// </param>
            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glPushDebugGroupKHR")]
            public static extern void PushDebugGroup(OpenTK.Graphics.OpenGL4.All source, UInt32 id, Int32 length, String message);

        }

        [Slot(31)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glBlendEquationiARB(UInt32 buf, System.Int32 mode);
        [Slot(34)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glBlendEquationSeparateiARB(UInt32 buf, System.Int32 modeRGB, System.Int32 modeAlpha);
        [Slot(37)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glBlendFunciARB(UInt32 buf, System.Int32 src, System.Int32 dst);
        [Slot(40)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glBlendFuncSeparateiARB(UInt32 buf, System.Int32 srcRGB, System.Int32 dstRGB, System.Int32 srcAlpha, System.Int32 dstAlpha);
        [Slot(72)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glCompileShaderIncludeARB(UInt32 shader, Int32 count, IntPtr path, Int32* length);
        [Slot(99)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe IntPtr glCreateSyncFromCLeventARB([OutAttribute] IntPtr* context, [OutAttribute] IntPtr* @event, UInt32 flags);
        [Slot(102)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glDebugMessageCallbackARB(DebugProcArb callback, IntPtr userParam);
        [Slot(105)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glDebugMessageControlARB(System.Int32 source, System.Int32 type, System.Int32 severity, Int32 count, UInt32* ids, bool enabled);
        [Slot(108)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glDebugMessageInsertARB(System.Int32 source, System.Int32 type, UInt32 id, System.Int32 severity, Int32 length, IntPtr buf);
        [Slot(112)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glDeleteNamedStringARB(Int32 namelen, IntPtr name);
        [Slot(134)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glDispatchComputeGroupSizeARB(UInt32 num_groups_x, UInt32 num_groups_y, UInt32 num_groups_z, UInt32 group_size_x, UInt32 group_size_y, UInt32 group_size_z);
        [Slot(210)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe Int32 glGetDebugMessageLogARB(UInt32 count, Int32 bufSize, [OutAttribute] System.Int32* sources, [OutAttribute] System.Int32* types, [OutAttribute] UInt32* ids, [OutAttribute] System.Int32* severities, [OutAttribute] Int32* lengths, [OutAttribute] IntPtr messageLog);
        [Slot(221)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern System.Int32 glGetGraphicsResetStatusARB();
        [Slot(225)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern Int64 glGetImageHandleARB(UInt32 texture, Int32 level, bool layered, Int32 layer, System.Int32 format);
        [Slot(236)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetNamedStringARB(Int32 namelen, IntPtr name, Int32 bufSize, [OutAttribute] Int32* stringlen, [OutAttribute] IntPtr @string);
        [Slot(237)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetNamedStringivARB(Int32 namelen, IntPtr name, System.Int32 pname, [OutAttribute] Int32* @params);
        [Slot(238)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glGetnColorTableARB(System.Int32 target, System.Int32 format, System.Int32 type, Int32 bufSize, [OutAttribute] IntPtr table);
        [Slot(239)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glGetnCompressedTexImageARB(System.Int32 target, Int32 lod, Int32 bufSize, [OutAttribute] IntPtr img);
        [Slot(240)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glGetnConvolutionFilterARB(System.Int32 target, System.Int32 format, System.Int32 type, Int32 bufSize, [OutAttribute] IntPtr image);
        [Slot(241)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glGetnHistogramARB(System.Int32 target, bool reset, System.Int32 format, System.Int32 type, Int32 bufSize, [OutAttribute] IntPtr values);
        [Slot(242)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetnMapdvARB(System.Int32 target, System.Int32 query, Int32 bufSize, [OutAttribute] Double* v);
        [Slot(243)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetnMapfvARB(System.Int32 target, System.Int32 query, Int32 bufSize, [OutAttribute] Single* v);
        [Slot(244)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetnMapivARB(System.Int32 target, System.Int32 query, Int32 bufSize, [OutAttribute] Int32* v);
        [Slot(245)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glGetnMinmaxARB(System.Int32 target, bool reset, System.Int32 format, System.Int32 type, Int32 bufSize, [OutAttribute] IntPtr values);
        [Slot(246)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetnPixelMapfvARB(System.Int32 map, Int32 bufSize, [OutAttribute] Single* values);
        [Slot(247)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetnPixelMapuivARB(System.Int32 map, Int32 bufSize, [OutAttribute] UInt32* values);
        [Slot(248)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetnPixelMapusvARB(System.Int32 map, Int32 bufSize, [OutAttribute] UInt16* values);
        [Slot(249)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetnPolygonStippleARB(Int32 bufSize, [OutAttribute] Byte* pattern);
        [Slot(250)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glGetnSeparableFilterARB(System.Int32 target, System.Int32 format, System.Int32 type, Int32 rowBufSize, [OutAttribute] IntPtr row, Int32 columnBufSize, [OutAttribute] IntPtr column, [OutAttribute] IntPtr span);
        [Slot(251)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glGetnTexImageARB(System.Int32 target, Int32 level, System.Int32 format, System.Int32 type, Int32 bufSize, [OutAttribute] IntPtr img);
        [Slot(252)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetnUniformdvARB(UInt32 program, Int32 location, Int32 bufSize, [OutAttribute] Double* @params);
        [Slot(253)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetnUniformfvARB(UInt32 program, Int32 location, Int32 bufSize, [OutAttribute] Single* @params);
        [Slot(254)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetnUniformivARB(UInt32 program, Int32 location, Int32 bufSize, [OutAttribute] Int32* @params);
        [Slot(255)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetnUniformuivARB(UInt32 program, Int32 location, Int32 bufSize, [OutAttribute] UInt32* @params);
        [Slot(302)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern Int64 glGetTextureHandleARB(UInt32 texture);
        [Slot(303)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern Int64 glGetTextureSamplerHandleARB(UInt32 texture, UInt32 sampler);
        [Slot(319)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetVertexAttribLui64vARB(UInt32 index, System.Int32 pname, [OutAttribute] UInt64* @params);
        [Slot(333)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern bool glIsImageHandleResidentARB(UInt64 handle);
        [Slot(334)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern bool glIsNamedStringARB(Int32 namelen, IntPtr name);
        [Slot(343)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern bool glIsTextureHandleResidentARB(UInt64 handle);
        [Slot(349)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glMakeImageHandleNonResidentARB(UInt64 handle);
        [Slot(350)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glMakeImageHandleResidentARB(UInt64 handle, System.Int32 access);
        [Slot(351)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glMakeTextureHandleNonResidentARB(UInt64 handle);
        [Slot(352)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glMakeTextureHandleResidentARB(UInt64 handle);
        [Slot(358)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glMinSampleShadingARB(Single value);
        [Slot(361)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glMultiDrawArraysIndirectCountARB(System.Int32 mode, IntPtr indirect, IntPtr drawcount, Int32 maxdrawcount, Int32 stride);
        [Slot(365)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glMultiDrawElementsIndirectCountARB(System.Int32 mode, System.Int32 type, IntPtr indirect, IntPtr drawcount, Int32 maxdrawcount, Int32 stride);
        [Slot(374)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glNamedStringARB(System.Int32 type, Int32 namelen, IntPtr name, Int32 stringlen, IntPtr @string);
        [Slot(430)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glProgramUniformHandleui64ARB(UInt32 program, Int32 location, UInt64 value);
        [Slot(431)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glProgramUniformHandleui64vARB(UInt32 program, Int32 location, Int32 count, UInt64* values);
        [Slot(455)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glReadnPixelsARB(Int32 x, Int32 y, Int32 width, Int32 height, System.Int32 format, System.Int32 type, Int32 bufSize, [OutAttribute] IntPtr data);
        [Slot(502)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glTexPageCommitmentARB(System.Int32 target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, bool resident);
        [Slot(552)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glUniformHandleui64ARB(Int32 location, UInt64 value);
        [Slot(553)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glUniformHandleui64vARB(Int32 location, Int32 count, UInt64* value);
        [Slot(641)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glVertexAttribL1ui64ARB(UInt32 index, UInt64 x);
        [Slot(642)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glVertexAttribL1ui64vARB(UInt32 index, UInt64* v);
        [Slot(0)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glActiveShaderProgram(UInt32 pipeline, UInt32 program);
        [Slot(1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glActiveTexture(System.Int32 texture);
        [Slot(2)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glAttachShader(UInt32 program, UInt32 shader);
        [Slot(3)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glBeginConditionalRender(UInt32 id, System.Int32 mode);
        [Slot(4)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glBeginQuery(System.Int32 target, UInt32 id);
        [Slot(5)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glBeginQueryIndexed(System.Int32 target, UInt32 index, UInt32 id);
        [Slot(6)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glBeginTransformFeedback(System.Int32 primitiveMode);
        [Slot(7)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glBindAttribLocation(UInt32 program, UInt32 index, IntPtr name);
        [Slot(8)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glBindBuffer(System.Int32 target, UInt32 buffer);
        [Slot(9)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glBindBufferBase(System.Int32 target, UInt32 index, UInt32 buffer);
        [Slot(10)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glBindBufferRange(System.Int32 target, UInt32 index, UInt32 buffer, IntPtr offset, IntPtr size);
        [Slot(11)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glBindBuffersBase(System.Int32 target, UInt32 first, Int32 count, UInt32* buffers);
        [Slot(12)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glBindBuffersRange(System.Int32 target, UInt32 first, Int32 count, UInt32* buffers, IntPtr* offsets, IntPtr* sizes);
        [Slot(13)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glBindFragDataLocation(UInt32 program, UInt32 color, IntPtr name);
        [Slot(14)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glBindFragDataLocationIndexed(UInt32 program, UInt32 colorNumber, UInt32 index, IntPtr name);
        [Slot(15)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glBindFramebuffer(System.Int32 target, UInt32 framebuffer);
        [Slot(16)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glBindImageTexture(UInt32 unit, UInt32 texture, Int32 level, bool layered, Int32 layer, System.Int32 access, System.Int32 format);
        [Slot(17)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glBindImageTextures(UInt32 first, Int32 count, UInt32* textures);
        [Slot(18)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glBindProgramPipeline(UInt32 pipeline);
        [Slot(19)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glBindRenderbuffer(System.Int32 target, UInt32 renderbuffer);
        [Slot(20)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glBindSampler(UInt32 unit, UInt32 sampler);
        [Slot(21)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glBindSamplers(UInt32 first, Int32 count, UInt32* samplers);
        [Slot(22)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glBindTexture(System.Int32 target, UInt32 texture);
        [Slot(23)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glBindTextures(UInt32 first, Int32 count, UInt32* textures);
        [Slot(24)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glBindTransformFeedback(System.Int32 target, UInt32 id);
        [Slot(25)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glBindVertexArray(UInt32 array);
        [Slot(26)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glBindVertexBuffer(UInt32 bindingindex, UInt32 buffer, IntPtr offset, Int32 stride);
        [Slot(27)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glBindVertexBuffers(UInt32 first, Int32 count, UInt32* buffers, IntPtr* offsets, Int32* strides);
        [Slot(28)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glBlendColor(Single red, Single green, Single blue, Single alpha);
        [Slot(29)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glBlendEquation(System.Int32 mode);
        [Slot(30)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glBlendEquationi(UInt32 buf, System.Int32 mode);
        [Slot(32)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glBlendEquationSeparate(System.Int32 modeRGB, System.Int32 modeAlpha);
        [Slot(33)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glBlendEquationSeparatei(UInt32 buf, System.Int32 modeRGB, System.Int32 modeAlpha);
        [Slot(35)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glBlendFunc(System.Int32 sfactor, System.Int32 dfactor);
        [Slot(36)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glBlendFunci(UInt32 buf, System.Int32 src, System.Int32 dst);
        [Slot(38)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glBlendFuncSeparate(System.Int32 sfactorRGB, System.Int32 dfactorRGB, System.Int32 sfactorAlpha, System.Int32 dfactorAlpha);
        [Slot(39)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glBlendFuncSeparatei(UInt32 buf, System.Int32 srcRGB, System.Int32 dstRGB, System.Int32 srcAlpha, System.Int32 dstAlpha);
        [Slot(41)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glBlitFramebuffer(Int32 srcX0, Int32 srcY0, Int32 srcX1, Int32 srcY1, Int32 dstX0, Int32 dstY0, Int32 dstX1, Int32 dstY1, System.Int32 mask, System.Int32 filter);
        [Slot(42)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glBufferData(System.Int32 target, IntPtr size, IntPtr data, System.Int32 usage);
        [Slot(43)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glBufferStorage(System.Int32 target, IntPtr size, IntPtr data, System.Int32 flags);
        [Slot(44)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glBufferSubData(System.Int32 target, IntPtr offset, IntPtr size, IntPtr data);
        [Slot(45)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern System.Int32 glCheckFramebufferStatus(System.Int32 target);
        [Slot(46)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glClampColor(System.Int32 target, System.Int32 clamp);
        [Slot(47)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glClear(System.Int32 mask);
        [Slot(48)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glClearBufferData(System.Int32 target, System.Int32 internalformat, System.Int32 format, System.Int32 type, IntPtr data);
        [Slot(49)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glClearBufferfi(System.Int32 buffer, Int32 drawbuffer, Single depth, Int32 stencil);
        [Slot(50)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glClearBufferfv(System.Int32 buffer, Int32 drawbuffer, Single* value);
        [Slot(51)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glClearBufferiv(System.Int32 buffer, Int32 drawbuffer, Int32* value);
        [Slot(52)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glClearBufferSubData(System.Int32 target, System.Int32 internalformat, IntPtr offset, IntPtr size, System.Int32 format, System.Int32 type, IntPtr data);
        [Slot(53)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glClearBufferuiv(System.Int32 buffer, Int32 drawbuffer, UInt32* value);
        [Slot(54)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glClearColor(Single red, Single green, Single blue, Single alpha);
        [Slot(55)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glClearDepth(Double depth);
        [Slot(56)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glClearDepthf(Single d);
        [Slot(57)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glClearStencil(Int32 s);
        [Slot(58)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glClearTexImage(UInt32 texture, Int32 level, System.Int32 format, System.Int32 type, IntPtr data);
        [Slot(59)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glClearTexSubImage(UInt32 texture, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, System.Int32 format, System.Int32 type, IntPtr data);
        [Slot(60)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern System.Int32 glClientWaitSync(IntPtr sync, System.Int32 flags, UInt64 timeout);
        [Slot(61)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glColorMask(bool red, bool green, bool blue, bool alpha);
        [Slot(62)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glColorMaski(UInt32 index, bool r, bool g, bool b, bool a);
        [Slot(63)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glColorP3ui(System.Int32 type, UInt32 color);
        [Slot(64)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glColorP3uiv(System.Int32 type, UInt32* color);
        [Slot(65)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glColorP4ui(System.Int32 type, UInt32 color);
        [Slot(66)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glColorP4uiv(System.Int32 type, UInt32* color);
        [Slot(67)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glColorSubTable(System.Int32 target, Int32 start, Int32 count, System.Int32 format, System.Int32 type, IntPtr data);
        [Slot(68)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glColorTable(System.Int32 target, System.Int32 internalformat, Int32 width, System.Int32 format, System.Int32 type, IntPtr table);
        [Slot(69)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glColorTableParameterfv(System.Int32 target, System.Int32 pname, Single* @params);
        [Slot(70)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glColorTableParameteriv(System.Int32 target, System.Int32 pname, Int32* @params);
        [Slot(71)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glCompileShader(UInt32 shader);
        [Slot(73)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glCompressedTexImage1D(System.Int32 target, Int32 level, System.Int32 internalformat, Int32 width, Int32 border, Int32 imageSize, IntPtr data);
        [Slot(74)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glCompressedTexImage2D(System.Int32 target, Int32 level, System.Int32 internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, IntPtr data);
        [Slot(75)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glCompressedTexImage3D(System.Int32 target, Int32 level, System.Int32 internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, IntPtr data);
        [Slot(76)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glCompressedTexSubImage1D(System.Int32 target, Int32 level, Int32 xoffset, Int32 width, System.Int32 format, Int32 imageSize, IntPtr data);
        [Slot(77)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glCompressedTexSubImage2D(System.Int32 target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, System.Int32 format, Int32 imageSize, IntPtr data);
        [Slot(78)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glCompressedTexSubImage3D(System.Int32 target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, System.Int32 format, Int32 imageSize, IntPtr data);
        [Slot(79)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glConvolutionFilter1D(System.Int32 target, System.Int32 internalformat, Int32 width, System.Int32 format, System.Int32 type, IntPtr image);
        [Slot(80)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glConvolutionFilter2D(System.Int32 target, System.Int32 internalformat, Int32 width, Int32 height, System.Int32 format, System.Int32 type, IntPtr image);
        [Slot(81)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glConvolutionParameterf(System.Int32 target, System.Int32 pname, Single @params);
        [Slot(82)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glConvolutionParameterfv(System.Int32 target, System.Int32 pname, Single* @params);
        [Slot(83)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glConvolutionParameteri(System.Int32 target, System.Int32 pname, Int32 @params);
        [Slot(84)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glConvolutionParameteriv(System.Int32 target, System.Int32 pname, Int32* @params);
        [Slot(85)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glCopyBufferSubData(System.Int32 readTarget, System.Int32 writeTarget, IntPtr readOffset, IntPtr writeOffset, IntPtr size);
        [Slot(86)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glCopyColorSubTable(System.Int32 target, Int32 start, Int32 x, Int32 y, Int32 width);
        [Slot(87)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glCopyColorTable(System.Int32 target, System.Int32 internalformat, Int32 x, Int32 y, Int32 width);
        [Slot(88)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glCopyConvolutionFilter1D(System.Int32 target, System.Int32 internalformat, Int32 x, Int32 y, Int32 width);
        [Slot(89)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glCopyConvolutionFilter2D(System.Int32 target, System.Int32 internalformat, Int32 x, Int32 y, Int32 width, Int32 height);
        [Slot(90)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glCopyImageSubData(UInt32 srcName, System.Int32 srcTarget, Int32 srcLevel, Int32 srcX, Int32 srcY, Int32 srcZ, UInt32 dstName, System.Int32 dstTarget, Int32 dstLevel, Int32 dstX, Int32 dstY, Int32 dstZ, Int32 srcWidth, Int32 srcHeight, Int32 srcDepth);
        [Slot(91)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glCopyTexImage1D(System.Int32 target, Int32 level, System.Int32 internalformat, Int32 x, Int32 y, Int32 width, Int32 border);
        [Slot(92)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glCopyTexImage2D(System.Int32 target, Int32 level, System.Int32 internalformat, Int32 x, Int32 y, Int32 width, Int32 height, Int32 border);
        [Slot(93)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glCopyTexSubImage1D(System.Int32 target, Int32 level, Int32 xoffset, Int32 x, Int32 y, Int32 width);
        [Slot(94)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glCopyTexSubImage2D(System.Int32 target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 x, Int32 y, Int32 width, Int32 height);
        [Slot(95)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glCopyTexSubImage3D(System.Int32 target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 x, Int32 y, Int32 width, Int32 height);
        [Slot(96)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern Int32 glCreateProgram();
        [Slot(97)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern Int32 glCreateShader(System.Int32 type);
        [Slot(98)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern Int32 glCreateShaderProgramv(System.Int32 type, Int32 count, IntPtr strings);
        [Slot(100)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glCullFace(System.Int32 mode);
        [Slot(101)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glDebugMessageCallback(DebugProc callback, IntPtr userParam);
        [Slot(104)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glDebugMessageControl(System.Int32 source, System.Int32 type, System.Int32 severity, Int32 count, UInt32* ids, bool enabled);
        [Slot(107)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glDebugMessageInsert(System.Int32 source, System.Int32 type, UInt32 id, System.Int32 severity, Int32 length, IntPtr buf);
        [Slot(110)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glDeleteBuffers(Int32 n, UInt32* buffers);
        [Slot(111)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glDeleteFramebuffers(Int32 n, UInt32* framebuffers);
        [Slot(113)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glDeleteProgram(UInt32 program);
        [Slot(114)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glDeleteProgramPipelines(Int32 n, UInt32* pipelines);
        [Slot(115)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glDeleteQueries(Int32 n, UInt32* ids);
        [Slot(116)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glDeleteRenderbuffers(Int32 n, UInt32* renderbuffers);
        [Slot(117)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glDeleteSamplers(Int32 count, UInt32* samplers);
        [Slot(118)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glDeleteShader(UInt32 shader);
        [Slot(119)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glDeleteSync(IntPtr sync);
        [Slot(120)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glDeleteTextures(Int32 n, UInt32* textures);
        [Slot(121)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glDeleteTransformFeedbacks(Int32 n, UInt32* ids);
        [Slot(122)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glDeleteVertexArrays(Int32 n, UInt32* arrays);
        [Slot(123)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glDepthFunc(System.Int32 func);
        [Slot(124)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glDepthMask(bool flag);
        [Slot(125)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glDepthRange(Double near, Double far);
        [Slot(126)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glDepthRangeArrayv(UInt32 first, Int32 count, Double* v);
        [Slot(127)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glDepthRangef(Single n, Single f);
        [Slot(128)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glDepthRangeIndexed(UInt32 index, Double n, Double f);
        [Slot(129)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glDetachShader(UInt32 program, UInt32 shader);
        [Slot(130)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glDisable(System.Int32 cap);
        [Slot(131)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glDisablei(System.Int32 target, UInt32 index);
        [Slot(132)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glDisableVertexAttribArray(UInt32 index);
        [Slot(133)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glDispatchCompute(UInt32 num_groups_x, UInt32 num_groups_y, UInt32 num_groups_z);
        [Slot(135)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glDispatchComputeIndirect(IntPtr indirect);
        [Slot(136)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glDrawArrays(System.Int32 mode, Int32 first, Int32 count);
        [Slot(137)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glDrawArraysIndirect(System.Int32 mode, IntPtr indirect);
        [Slot(138)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glDrawArraysInstanced(System.Int32 mode, Int32 first, Int32 count, Int32 instancecount);
        [Slot(139)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glDrawArraysInstancedBaseInstance(System.Int32 mode, Int32 first, Int32 count, Int32 instancecount, UInt32 baseinstance);
        [Slot(140)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glDrawBuffer(System.Int32 mode);
        [Slot(141)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glDrawBuffers(Int32 n, System.Int32* bufs);
        [Slot(142)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glDrawElements(System.Int32 mode, Int32 count, System.Int32 type, IntPtr indices);
        [Slot(143)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glDrawElementsBaseVertex(System.Int32 mode, Int32 count, System.Int32 type, IntPtr indices, Int32 basevertex);
        [Slot(144)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glDrawElementsIndirect(System.Int32 mode, System.Int32 type, IntPtr indirect);
        [Slot(145)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glDrawElementsInstanced(System.Int32 mode, Int32 count, System.Int32 type, IntPtr indices, Int32 instancecount);
        [Slot(146)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glDrawElementsInstancedBaseInstance(System.Int32 mode, Int32 count, System.Int32 type, IntPtr indices, Int32 instancecount, UInt32 baseinstance);
        [Slot(147)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glDrawElementsInstancedBaseVertex(System.Int32 mode, Int32 count, System.Int32 type, IntPtr indices, Int32 instancecount, Int32 basevertex);
        [Slot(148)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glDrawElementsInstancedBaseVertexBaseInstance(System.Int32 mode, Int32 count, System.Int32 type, IntPtr indices, Int32 instancecount, Int32 basevertex, UInt32 baseinstance);
        [Slot(149)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glDrawRangeElements(System.Int32 mode, UInt32 start, UInt32 end, Int32 count, System.Int32 type, IntPtr indices);
        [Slot(150)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glDrawRangeElementsBaseVertex(System.Int32 mode, UInt32 start, UInt32 end, Int32 count, System.Int32 type, IntPtr indices, Int32 basevertex);
        [Slot(151)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glDrawTransformFeedback(System.Int32 mode, UInt32 id);
        [Slot(152)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glDrawTransformFeedbackInstanced(System.Int32 mode, UInt32 id, Int32 instancecount);
        [Slot(153)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glDrawTransformFeedbackStream(System.Int32 mode, UInt32 id, UInt32 stream);
        [Slot(154)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glDrawTransformFeedbackStreamInstanced(System.Int32 mode, UInt32 id, UInt32 stream, Int32 instancecount);
        [Slot(155)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glEnable(System.Int32 cap);
        [Slot(156)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glEnablei(System.Int32 target, UInt32 index);
        [Slot(157)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glEnableVertexAttribArray(UInt32 index);
        [Slot(158)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glEndConditionalRender();
        [Slot(159)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glEndQuery(System.Int32 target);
        [Slot(160)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glEndQueryIndexed(System.Int32 target, UInt32 index);
        [Slot(161)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glEndTransformFeedback();
        [Slot(162)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern IntPtr glFenceSync(System.Int32 condition, System.Int32 flags);
        [Slot(163)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glFinish();
        [Slot(164)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glFlush();
        [Slot(165)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glFlushMappedBufferRange(System.Int32 target, IntPtr offset, IntPtr length);
        [Slot(166)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glFramebufferParameteri(System.Int32 target, System.Int32 pname, Int32 param);
        [Slot(167)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glFramebufferRenderbuffer(System.Int32 target, System.Int32 attachment, System.Int32 renderbuffertarget, UInt32 renderbuffer);
        [Slot(168)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glFramebufferTexture(System.Int32 target, System.Int32 attachment, UInt32 texture, Int32 level);
        [Slot(169)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glFramebufferTexture1D(System.Int32 target, System.Int32 attachment, System.Int32 textarget, UInt32 texture, Int32 level);
        [Slot(170)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glFramebufferTexture2D(System.Int32 target, System.Int32 attachment, System.Int32 textarget, UInt32 texture, Int32 level);
        [Slot(171)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glFramebufferTexture3D(System.Int32 target, System.Int32 attachment, System.Int32 textarget, UInt32 texture, Int32 level, Int32 zoffset);
        [Slot(172)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glFramebufferTextureLayer(System.Int32 target, System.Int32 attachment, UInt32 texture, Int32 level, Int32 layer);
        [Slot(173)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glFrontFace(System.Int32 mode);
        [Slot(174)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGenBuffers(Int32 n, [OutAttribute] UInt32* buffers);
        [Slot(175)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glGenerateMipmap(System.Int32 target);
        [Slot(176)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGenFramebuffers(Int32 n, [OutAttribute] UInt32* framebuffers);
        [Slot(177)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGenProgramPipelines(Int32 n, [OutAttribute] UInt32* pipelines);
        [Slot(178)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGenQueries(Int32 n, [OutAttribute] UInt32* ids);
        [Slot(179)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGenRenderbuffers(Int32 n, [OutAttribute] UInt32* renderbuffers);
        [Slot(180)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGenSamplers(Int32 count, [OutAttribute] UInt32* samplers);
        [Slot(181)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGenTextures(Int32 n, [OutAttribute] UInt32* textures);
        [Slot(182)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGenTransformFeedbacks(Int32 n, [OutAttribute] UInt32* ids);
        [Slot(183)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGenVertexArrays(Int32 n, [OutAttribute] UInt32* arrays);
        [Slot(184)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetActiveAtomicCounterBufferiv(UInt32 program, UInt32 bufferIndex, System.Int32 pname, [OutAttribute] Int32* @params);
        [Slot(185)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetActiveAttrib(UInt32 program, UInt32 index, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] Int32* size, [OutAttribute] System.Int32* type, [OutAttribute] IntPtr name);
        [Slot(186)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetActiveSubroutineName(UInt32 program, System.Int32 shadertype, UInt32 index, Int32 bufsize, [OutAttribute] Int32* length, [OutAttribute] IntPtr name);
        [Slot(187)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetActiveSubroutineUniformiv(UInt32 program, System.Int32 shadertype, UInt32 index, System.Int32 pname, [OutAttribute] Int32* values);
        [Slot(188)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetActiveSubroutineUniformName(UInt32 program, System.Int32 shadertype, UInt32 index, Int32 bufsize, [OutAttribute] Int32* length, [OutAttribute] IntPtr name);
        [Slot(189)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetActiveUniform(UInt32 program, UInt32 index, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] Int32* size, [OutAttribute] System.Int32* type, [OutAttribute] IntPtr name);
        [Slot(190)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetActiveUniformBlockiv(UInt32 program, UInt32 uniformBlockIndex, System.Int32 pname, [OutAttribute] Int32* @params);
        [Slot(191)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetActiveUniformBlockName(UInt32 program, UInt32 uniformBlockIndex, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] IntPtr uniformBlockName);
        [Slot(192)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetActiveUniformName(UInt32 program, UInt32 uniformIndex, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] IntPtr uniformName);
        [Slot(193)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetActiveUniformsiv(UInt32 program, Int32 uniformCount, UInt32* uniformIndices, System.Int32 pname, [OutAttribute] Int32* @params);
        [Slot(194)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetAttachedShaders(UInt32 program, Int32 maxCount, [OutAttribute] Int32* count, [OutAttribute] UInt32* shaders);
        [Slot(195)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern Int32 glGetAttribLocation(UInt32 program, IntPtr name);
        [Slot(196)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetBooleani_v(System.Int32 target, UInt32 index, [OutAttribute] bool* data);
        [Slot(197)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetBooleanv(System.Int32 pname, [OutAttribute] bool* data);
        [Slot(198)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetBufferParameteri64v(System.Int32 target, System.Int32 pname, [OutAttribute] Int64* @params);
        [Slot(199)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetBufferParameteriv(System.Int32 target, System.Int32 pname, [OutAttribute] Int32* @params);
        [Slot(200)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glGetBufferPointerv(System.Int32 target, System.Int32 pname, [OutAttribute] IntPtr @params);
        [Slot(201)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glGetBufferSubData(System.Int32 target, IntPtr offset, IntPtr size, [OutAttribute] IntPtr data);
        [Slot(202)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glGetColorTable(System.Int32 target, System.Int32 format, System.Int32 type, [OutAttribute] IntPtr table);
        [Slot(203)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetColorTableParameterfv(System.Int32 target, System.Int32 pname, [OutAttribute] Single* @params);
        [Slot(204)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetColorTableParameteriv(System.Int32 target, System.Int32 pname, [OutAttribute] Int32* @params);
        [Slot(205)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glGetCompressedTexImage(System.Int32 target, Int32 level, [OutAttribute] IntPtr img);
        [Slot(206)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glGetConvolutionFilter(System.Int32 target, System.Int32 format, System.Int32 type, [OutAttribute] IntPtr image);
        [Slot(207)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetConvolutionParameterfv(System.Int32 target, System.Int32 pname, [OutAttribute] Single* @params);
        [Slot(208)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetConvolutionParameteriv(System.Int32 target, System.Int32 pname, [OutAttribute] Int32* @params);
        [Slot(209)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe Int32 glGetDebugMessageLog(UInt32 count, Int32 bufSize, [OutAttribute] System.Int32* sources, [OutAttribute] System.Int32* types, [OutAttribute] UInt32* ids, [OutAttribute] System.Int32* severities, [OutAttribute] Int32* lengths, [OutAttribute] IntPtr messageLog);
        [Slot(212)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetDoublei_v(System.Int32 target, UInt32 index, [OutAttribute] Double* data);
        [Slot(213)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetDoublev(System.Int32 pname, [OutAttribute] Double* data);
        [Slot(214)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern System.Int32 glGetError();
        [Slot(215)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetFloati_v(System.Int32 target, UInt32 index, [OutAttribute] Single* data);
        [Slot(216)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetFloatv(System.Int32 pname, [OutAttribute] Single* data);
        [Slot(217)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern Int32 glGetFragDataIndex(UInt32 program, IntPtr name);
        [Slot(218)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern Int32 glGetFragDataLocation(UInt32 program, IntPtr name);
        [Slot(219)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetFramebufferAttachmentParameteriv(System.Int32 target, System.Int32 attachment, System.Int32 pname, [OutAttribute] Int32* @params);
        [Slot(220)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetFramebufferParameteriv(System.Int32 target, System.Int32 pname, [OutAttribute] Int32* @params);
        [Slot(222)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glGetHistogram(System.Int32 target, bool reset, System.Int32 format, System.Int32 type, [OutAttribute] IntPtr values);
        [Slot(223)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetHistogramParameterfv(System.Int32 target, System.Int32 pname, [OutAttribute] Single* @params);
        [Slot(224)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetHistogramParameteriv(System.Int32 target, System.Int32 pname, [OutAttribute] Int32* @params);
        [Slot(226)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetInteger64i_v(System.Int32 target, UInt32 index, [OutAttribute] Int64* data);
        [Slot(227)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetInteger64v(System.Int32 pname, [OutAttribute] Int64* data);
        [Slot(228)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetIntegeri_v(System.Int32 target, UInt32 index, [OutAttribute] Int32* data);
        [Slot(229)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetIntegerv(System.Int32 pname, [OutAttribute] Int32* data);
        [Slot(230)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetInternalformati64v(System.Int32 target, System.Int32 internalformat, System.Int32 pname, Int32 bufSize, [OutAttribute] Int64* @params);
        [Slot(231)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetInternalformativ(System.Int32 target, System.Int32 internalformat, System.Int32 pname, Int32 bufSize, [OutAttribute] Int32* @params);
        [Slot(232)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glGetMinmax(System.Int32 target, bool reset, System.Int32 format, System.Int32 type, [OutAttribute] IntPtr values);
        [Slot(233)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetMinmaxParameterfv(System.Int32 target, System.Int32 pname, [OutAttribute] Single* @params);
        [Slot(234)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetMinmaxParameteriv(System.Int32 target, System.Int32 pname, [OutAttribute] Int32* @params);
        [Slot(235)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetMultisamplefv(System.Int32 pname, UInt32 index, [OutAttribute] Single* val);
        [Slot(256)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetObjectLabel(System.Int32 identifier, UInt32 name, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] IntPtr label);
        [Slot(258)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetObjectPtrLabel(IntPtr ptr, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] IntPtr label);
        [Slot(260)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glGetPointerv(System.Int32 pname, [OutAttribute] IntPtr @params);
        [Slot(262)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetProgramBinary(UInt32 program, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] System.Int32* binaryFormat, [OutAttribute] IntPtr binary);
        [Slot(263)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetProgramInfoLog(UInt32 program, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] IntPtr infoLog);
        [Slot(264)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetProgramInterfaceiv(UInt32 program, System.Int32 programInterface, System.Int32 pname, [OutAttribute] Int32* @params);
        [Slot(265)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetProgramiv(UInt32 program, System.Int32 pname, [OutAttribute] Int32* @params);
        [Slot(266)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetProgramPipelineInfoLog(UInt32 pipeline, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] IntPtr infoLog);
        [Slot(267)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetProgramPipelineiv(UInt32 pipeline, System.Int32 pname, [OutAttribute] Int32* @params);
        [Slot(268)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern Int32 glGetProgramResourceIndex(UInt32 program, System.Int32 programInterface, IntPtr name);
        [Slot(269)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetProgramResourceiv(UInt32 program, System.Int32 programInterface, UInt32 index, Int32 propCount, System.Int32* props, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] Int32* @params);
        [Slot(270)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern Int32 glGetProgramResourceLocation(UInt32 program, System.Int32 programInterface, IntPtr name);
        [Slot(271)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern Int32 glGetProgramResourceLocationIndex(UInt32 program, System.Int32 programInterface, IntPtr name);
        [Slot(272)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetProgramResourceName(UInt32 program, System.Int32 programInterface, UInt32 index, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] IntPtr name);
        [Slot(273)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetProgramStageiv(UInt32 program, System.Int32 shadertype, System.Int32 pname, [OutAttribute] Int32* values);
        [Slot(274)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetQueryIndexediv(System.Int32 target, UInt32 index, System.Int32 pname, [OutAttribute] Int32* @params);
        [Slot(275)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetQueryiv(System.Int32 target, System.Int32 pname, [OutAttribute] Int32* @params);
        [Slot(276)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetQueryObjecti64v(UInt32 id, System.Int32 pname, [OutAttribute] Int64* @params);
        [Slot(277)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetQueryObjectiv(UInt32 id, System.Int32 pname, [OutAttribute] Int32* @params);
        [Slot(278)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetQueryObjectui64v(UInt32 id, System.Int32 pname, [OutAttribute] UInt64* @params);
        [Slot(279)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetQueryObjectuiv(UInt32 id, System.Int32 pname, [OutAttribute] UInt32* @params);
        [Slot(280)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetRenderbufferParameteriv(System.Int32 target, System.Int32 pname, [OutAttribute] Int32* @params);
        [Slot(281)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetSamplerParameterfv(UInt32 sampler, System.Int32 pname, [OutAttribute] Single* @params);
        [Slot(282)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetSamplerParameterIiv(UInt32 sampler, System.Int32 pname, [OutAttribute] Int32* @params);
        [Slot(283)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetSamplerParameterIuiv(UInt32 sampler, System.Int32 pname, [OutAttribute] UInt32* @params);
        [Slot(284)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetSamplerParameteriv(UInt32 sampler, System.Int32 pname, [OutAttribute] Int32* @params);
        [Slot(285)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glGetSeparableFilter(System.Int32 target, System.Int32 format, System.Int32 type, [OutAttribute] IntPtr row, [OutAttribute] IntPtr column, [OutAttribute] IntPtr span);
        [Slot(286)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetShaderInfoLog(UInt32 shader, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] IntPtr infoLog);
        [Slot(287)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetShaderiv(UInt32 shader, System.Int32 pname, [OutAttribute] Int32* @params);
        [Slot(288)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetShaderPrecisionFormat(System.Int32 shadertype, System.Int32 precisiontype, [OutAttribute] Int32* range, [OutAttribute] Int32* precision);
        [Slot(289)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetShaderSource(UInt32 shader, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] IntPtr source);
        [Slot(290)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern IntPtr glGetString(System.Int32 name);
        [Slot(291)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern IntPtr glGetStringi(System.Int32 name, UInt32 index);
        [Slot(292)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern Int32 glGetSubroutineIndex(UInt32 program, System.Int32 shadertype, IntPtr name);
        [Slot(293)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern Int32 glGetSubroutineUniformLocation(UInt32 program, System.Int32 shadertype, IntPtr name);
        [Slot(294)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetSynciv(IntPtr sync, System.Int32 pname, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] Int32* values);
        [Slot(295)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glGetTexImage(System.Int32 target, Int32 level, System.Int32 format, System.Int32 type, [OutAttribute] IntPtr pixels);
        [Slot(296)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetTexLevelParameterfv(System.Int32 target, Int32 level, System.Int32 pname, [OutAttribute] Single* @params);
        [Slot(297)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetTexLevelParameteriv(System.Int32 target, Int32 level, System.Int32 pname, [OutAttribute] Int32* @params);
        [Slot(298)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetTexParameterfv(System.Int32 target, System.Int32 pname, [OutAttribute] Single* @params);
        [Slot(299)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetTexParameterIiv(System.Int32 target, System.Int32 pname, [OutAttribute] Int32* @params);
        [Slot(300)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetTexParameterIuiv(System.Int32 target, System.Int32 pname, [OutAttribute] UInt32* @params);
        [Slot(301)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetTexParameteriv(System.Int32 target, System.Int32 pname, [OutAttribute] Int32* @params);
        [Slot(304)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetTransformFeedbackVarying(UInt32 program, UInt32 index, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] Int32* size, [OutAttribute] System.Int32* type, [OutAttribute] IntPtr name);
        [Slot(305)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern Int32 glGetUniformBlockIndex(UInt32 program, IntPtr uniformBlockName);
        [Slot(306)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetUniformdv(UInt32 program, Int32 location, [OutAttribute] Double* @params);
        [Slot(307)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetUniformfv(UInt32 program, Int32 location, [OutAttribute] Single* @params);
        [Slot(308)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetUniformIndices(UInt32 program, Int32 uniformCount, IntPtr uniformNames, [OutAttribute] UInt32* uniformIndices);
        [Slot(309)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetUniformiv(UInt32 program, Int32 location, [OutAttribute] Int32* @params);
        [Slot(310)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern Int32 glGetUniformLocation(UInt32 program, IntPtr name);
        [Slot(311)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetUniformSubroutineuiv(System.Int32 shadertype, Int32 location, [OutAttribute] UInt32* @params);
        [Slot(312)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetUniformuiv(UInt32 program, Int32 location, [OutAttribute] UInt32* @params);
        [Slot(313)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetVertexAttribdv(UInt32 index, System.Int32 pname, [OutAttribute] Double* @params);
        [Slot(314)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetVertexAttribfv(UInt32 index, System.Int32 pname, [OutAttribute] Single* @params);
        [Slot(315)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetVertexAttribIiv(UInt32 index, System.Int32 pname, [OutAttribute] Int32* @params);
        [Slot(316)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetVertexAttribIuiv(UInt32 index, System.Int32 pname, [OutAttribute] UInt32* @params);
        [Slot(317)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetVertexAttribiv(UInt32 index, System.Int32 pname, [OutAttribute] Int32* @params);
        [Slot(318)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetVertexAttribLdv(UInt32 index, System.Int32 pname, [OutAttribute] Double* @params);
        [Slot(320)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glGetVertexAttribPointerv(UInt32 index, System.Int32 pname, [OutAttribute] IntPtr pointer);
        [Slot(321)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glHint(System.Int32 target, System.Int32 mode);
        [Slot(322)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glHistogram(System.Int32 target, Int32 width, System.Int32 internalformat, bool sink);
        [Slot(323)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glInvalidateBufferData(UInt32 buffer);
        [Slot(324)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glInvalidateBufferSubData(UInt32 buffer, IntPtr offset, IntPtr length);
        [Slot(325)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glInvalidateFramebuffer(System.Int32 target, Int32 numAttachments, System.Int32* attachments);
        [Slot(326)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glInvalidateSubFramebuffer(System.Int32 target, Int32 numAttachments, System.Int32* attachments, Int32 x, Int32 y, Int32 width, Int32 height);
        [Slot(327)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glInvalidateTexImage(UInt32 texture, Int32 level);
        [Slot(328)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glInvalidateTexSubImage(UInt32 texture, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth);
        [Slot(329)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern bool glIsBuffer(UInt32 buffer);
        [Slot(330)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern bool glIsEnabled(System.Int32 cap);
        [Slot(331)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern bool glIsEnabledi(System.Int32 target, UInt32 index);
        [Slot(332)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern bool glIsFramebuffer(UInt32 framebuffer);
        [Slot(335)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern bool glIsProgram(UInt32 program);
        [Slot(336)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern bool glIsProgramPipeline(UInt32 pipeline);
        [Slot(337)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern bool glIsQuery(UInt32 id);
        [Slot(338)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern bool glIsRenderbuffer(UInt32 renderbuffer);
        [Slot(339)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern bool glIsSampler(UInt32 sampler);
        [Slot(340)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern bool glIsShader(UInt32 shader);
        [Slot(341)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern bool glIsSync(IntPtr sync);
        [Slot(342)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern bool glIsTexture(UInt32 texture);
        [Slot(344)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern bool glIsTransformFeedback(UInt32 id);
        [Slot(345)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern bool glIsVertexArray(UInt32 array);
        [Slot(346)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glLineWidth(Single width);
        [Slot(347)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glLinkProgram(UInt32 program);
        [Slot(348)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glLogicOp(System.Int32 opcode);
        [Slot(353)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern IntPtr glMapBuffer(System.Int32 target, System.Int32 access);
        [Slot(354)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern IntPtr glMapBufferRange(System.Int32 target, IntPtr offset, IntPtr length, System.Int32 access);
        [Slot(355)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glMemoryBarrier(System.Int32 barriers);
        [Slot(356)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glMinmax(System.Int32 target, System.Int32 internalformat, bool sink);
        [Slot(357)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glMinSampleShading(Single value);
        [Slot(359)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glMultiDrawArrays(System.Int32 mode, Int32* first, Int32* count, Int32 drawcount);
        [Slot(360)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glMultiDrawArraysIndirect(System.Int32 mode, IntPtr indirect, Int32 drawcount, Int32 stride);
        [Slot(362)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glMultiDrawElements(System.Int32 mode, Int32* count, System.Int32 type, IntPtr indices, Int32 drawcount);
        [Slot(363)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glMultiDrawElementsBaseVertex(System.Int32 mode, Int32* count, System.Int32 type, IntPtr indices, Int32 drawcount, Int32* basevertex);
        [Slot(364)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glMultiDrawElementsIndirect(System.Int32 mode, System.Int32 type, IntPtr indirect, Int32 drawcount, Int32 stride);
        [Slot(366)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glMultiTexCoordP1ui(System.Int32 texture, System.Int32 type, UInt32 coords);
        [Slot(367)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glMultiTexCoordP1uiv(System.Int32 texture, System.Int32 type, UInt32* coords);
        [Slot(368)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glMultiTexCoordP2ui(System.Int32 texture, System.Int32 type, UInt32 coords);
        [Slot(369)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glMultiTexCoordP2uiv(System.Int32 texture, System.Int32 type, UInt32* coords);
        [Slot(370)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glMultiTexCoordP3ui(System.Int32 texture, System.Int32 type, UInt32 coords);
        [Slot(371)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glMultiTexCoordP3uiv(System.Int32 texture, System.Int32 type, UInt32* coords);
        [Slot(372)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glMultiTexCoordP4ui(System.Int32 texture, System.Int32 type, UInt32 coords);
        [Slot(373)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glMultiTexCoordP4uiv(System.Int32 texture, System.Int32 type, UInt32* coords);
        [Slot(375)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glNormalP3ui(System.Int32 type, UInt32 coords);
        [Slot(376)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glNormalP3uiv(System.Int32 type, UInt32* coords);
        [Slot(377)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glObjectLabel(System.Int32 identifier, UInt32 name, Int32 length, IntPtr label);
        [Slot(379)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glObjectPtrLabel(IntPtr ptr, Int32 length, IntPtr label);
        [Slot(381)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glPatchParameterfv(System.Int32 pname, Single* values);
        [Slot(382)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glPatchParameteri(System.Int32 pname, Int32 value);
        [Slot(383)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glPauseTransformFeedback();
        [Slot(384)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glPixelStoref(System.Int32 pname, Single param);
        [Slot(385)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glPixelStorei(System.Int32 pname, Int32 param);
        [Slot(386)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glPointParameterf(System.Int32 pname, Single param);
        [Slot(387)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glPointParameterfv(System.Int32 pname, Single* @params);
        [Slot(388)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glPointParameteri(System.Int32 pname, Int32 param);
        [Slot(389)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glPointParameteriv(System.Int32 pname, Int32* @params);
        [Slot(390)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glPointSize(Single size);
        [Slot(391)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glPolygonMode(System.Int32 face, System.Int32 mode);
        [Slot(392)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glPolygonOffset(Single factor, Single units);
        [Slot(393)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glPopDebugGroup();
        [Slot(395)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glPrimitiveRestartIndex(UInt32 index);
        [Slot(396)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glProgramBinary(UInt32 program, System.Int32 binaryFormat, IntPtr binary, Int32 length);
        [Slot(397)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glProgramParameteri(UInt32 program, System.Int32 pname, Int32 value);
        [Slot(398)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glProgramUniform1d(UInt32 program, Int32 location, Double v0);
        [Slot(399)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glProgramUniform1dv(UInt32 program, Int32 location, Int32 count, Double* value);
        [Slot(400)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glProgramUniform1f(UInt32 program, Int32 location, Single v0);
        [Slot(401)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glProgramUniform1fv(UInt32 program, Int32 location, Int32 count, Single* value);
        [Slot(402)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glProgramUniform1i(UInt32 program, Int32 location, Int32 v0);
        [Slot(403)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glProgramUniform1iv(UInt32 program, Int32 location, Int32 count, Int32* value);
        [Slot(404)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glProgramUniform1ui(UInt32 program, Int32 location, UInt32 v0);
        [Slot(405)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glProgramUniform1uiv(UInt32 program, Int32 location, Int32 count, UInt32* value);
        [Slot(406)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glProgramUniform2d(UInt32 program, Int32 location, Double v0, Double v1);
        [Slot(407)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glProgramUniform2dv(UInt32 program, Int32 location, Int32 count, Double* value);
        [Slot(408)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glProgramUniform2f(UInt32 program, Int32 location, Single v0, Single v1);
        [Slot(409)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glProgramUniform2fv(UInt32 program, Int32 location, Int32 count, Single* value);
        [Slot(410)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glProgramUniform2i(UInt32 program, Int32 location, Int32 v0, Int32 v1);
        [Slot(411)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glProgramUniform2iv(UInt32 program, Int32 location, Int32 count, Int32* value);
        [Slot(412)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glProgramUniform2ui(UInt32 program, Int32 location, UInt32 v0, UInt32 v1);
        [Slot(413)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glProgramUniform2uiv(UInt32 program, Int32 location, Int32 count, UInt32* value);
        [Slot(414)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glProgramUniform3d(UInt32 program, Int32 location, Double v0, Double v1, Double v2);
        [Slot(415)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glProgramUniform3dv(UInt32 program, Int32 location, Int32 count, Double* value);
        [Slot(416)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glProgramUniform3f(UInt32 program, Int32 location, Single v0, Single v1, Single v2);
        [Slot(417)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glProgramUniform3fv(UInt32 program, Int32 location, Int32 count, Single* value);
        [Slot(418)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glProgramUniform3i(UInt32 program, Int32 location, Int32 v0, Int32 v1, Int32 v2);
        [Slot(419)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glProgramUniform3iv(UInt32 program, Int32 location, Int32 count, Int32* value);
        [Slot(420)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glProgramUniform3ui(UInt32 program, Int32 location, UInt32 v0, UInt32 v1, UInt32 v2);
        [Slot(421)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glProgramUniform3uiv(UInt32 program, Int32 location, Int32 count, UInt32* value);
        [Slot(422)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glProgramUniform4d(UInt32 program, Int32 location, Double v0, Double v1, Double v2, Double v3);
        [Slot(423)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glProgramUniform4dv(UInt32 program, Int32 location, Int32 count, Double* value);
        [Slot(424)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glProgramUniform4f(UInt32 program, Int32 location, Single v0, Single v1, Single v2, Single v3);
        [Slot(425)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glProgramUniform4fv(UInt32 program, Int32 location, Int32 count, Single* value);
        [Slot(426)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glProgramUniform4i(UInt32 program, Int32 location, Int32 v0, Int32 v1, Int32 v2, Int32 v3);
        [Slot(427)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glProgramUniform4iv(UInt32 program, Int32 location, Int32 count, Int32* value);
        [Slot(428)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glProgramUniform4ui(UInt32 program, Int32 location, UInt32 v0, UInt32 v1, UInt32 v2, UInt32 v3);
        [Slot(429)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glProgramUniform4uiv(UInt32 program, Int32 location, Int32 count, UInt32* value);
        [Slot(432)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glProgramUniformMatrix2dv(UInt32 program, Int32 location, Int32 count, bool transpose, Double* value);
        [Slot(433)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glProgramUniformMatrix2fv(UInt32 program, Int32 location, Int32 count, bool transpose, Single* value);
        [Slot(434)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glProgramUniformMatrix2x3dv(UInt32 program, Int32 location, Int32 count, bool transpose, Double* value);
        [Slot(435)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glProgramUniformMatrix2x3fv(UInt32 program, Int32 location, Int32 count, bool transpose, Single* value);
        [Slot(436)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glProgramUniformMatrix2x4dv(UInt32 program, Int32 location, Int32 count, bool transpose, Double* value);
        [Slot(437)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glProgramUniformMatrix2x4fv(UInt32 program, Int32 location, Int32 count, bool transpose, Single* value);
        [Slot(438)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glProgramUniformMatrix3dv(UInt32 program, Int32 location, Int32 count, bool transpose, Double* value);
        [Slot(439)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glProgramUniformMatrix3fv(UInt32 program, Int32 location, Int32 count, bool transpose, Single* value);
        [Slot(440)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glProgramUniformMatrix3x2dv(UInt32 program, Int32 location, Int32 count, bool transpose, Double* value);
        [Slot(441)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glProgramUniformMatrix3x2fv(UInt32 program, Int32 location, Int32 count, bool transpose, Single* value);
        [Slot(442)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glProgramUniformMatrix3x4dv(UInt32 program, Int32 location, Int32 count, bool transpose, Double* value);
        [Slot(443)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glProgramUniformMatrix3x4fv(UInt32 program, Int32 location, Int32 count, bool transpose, Single* value);
        [Slot(444)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glProgramUniformMatrix4dv(UInt32 program, Int32 location, Int32 count, bool transpose, Double* value);
        [Slot(445)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glProgramUniformMatrix4fv(UInt32 program, Int32 location, Int32 count, bool transpose, Single* value);
        [Slot(446)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glProgramUniformMatrix4x2dv(UInt32 program, Int32 location, Int32 count, bool transpose, Double* value);
        [Slot(447)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glProgramUniformMatrix4x2fv(UInt32 program, Int32 location, Int32 count, bool transpose, Single* value);
        [Slot(448)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glProgramUniformMatrix4x3dv(UInt32 program, Int32 location, Int32 count, bool transpose, Double* value);
        [Slot(449)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glProgramUniformMatrix4x3fv(UInt32 program, Int32 location, Int32 count, bool transpose, Single* value);
        [Slot(450)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glProvokingVertex(System.Int32 mode);
        [Slot(451)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glPushDebugGroup(System.Int32 source, UInt32 id, Int32 length, IntPtr message);
        [Slot(453)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glQueryCounter(UInt32 id, System.Int32 target);
        [Slot(454)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glReadBuffer(System.Int32 mode);
        [Slot(456)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glReadPixels(Int32 x, Int32 y, Int32 width, Int32 height, System.Int32 format, System.Int32 type, [OutAttribute] IntPtr pixels);
        [Slot(457)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glReleaseShaderCompiler();
        [Slot(458)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glRenderbufferStorage(System.Int32 target, System.Int32 internalformat, Int32 width, Int32 height);
        [Slot(459)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glRenderbufferStorageMultisample(System.Int32 target, Int32 samples, System.Int32 internalformat, Int32 width, Int32 height);
        [Slot(460)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glResetHistogram(System.Int32 target);
        [Slot(461)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glResetMinmax(System.Int32 target);
        [Slot(462)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glResumeTransformFeedback();
        [Slot(463)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glSampleCoverage(Single value, bool invert);
        [Slot(464)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glSampleMaski(UInt32 index, UInt32 mask);
        [Slot(465)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glSamplerParameterf(UInt32 sampler, System.Int32 pname, Single param);
        [Slot(466)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glSamplerParameterfv(UInt32 sampler, System.Int32 pname, Single* param);
        [Slot(467)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glSamplerParameteri(UInt32 sampler, System.Int32 pname, Int32 param);
        [Slot(468)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glSamplerParameterIiv(UInt32 sampler, System.Int32 pname, Int32* param);
        [Slot(469)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glSamplerParameterIuiv(UInt32 sampler, System.Int32 pname, UInt32* param);
        [Slot(470)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glSamplerParameteriv(UInt32 sampler, System.Int32 pname, Int32* param);
        [Slot(471)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glScissor(Int32 x, Int32 y, Int32 width, Int32 height);
        [Slot(472)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glScissorArrayv(UInt32 first, Int32 count, Int32* v);
        [Slot(473)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glScissorIndexed(UInt32 index, Int32 left, Int32 bottom, Int32 width, Int32 height);
        [Slot(474)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glScissorIndexedv(UInt32 index, Int32* v);
        [Slot(475)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glSecondaryColorP3ui(System.Int32 type, UInt32 color);
        [Slot(476)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glSecondaryColorP3uiv(System.Int32 type, UInt32* color);
        [Slot(477)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glSeparableFilter2D(System.Int32 target, System.Int32 internalformat, Int32 width, Int32 height, System.Int32 format, System.Int32 type, IntPtr row, IntPtr column);
        [Slot(478)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glShaderBinary(Int32 count, UInt32* shaders, System.Int32 binaryformat, IntPtr binary, Int32 length);
        [Slot(479)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glShaderSource(UInt32 shader, Int32 count, IntPtr @string, Int32* length);
        [Slot(480)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glShaderStorageBlockBinding(UInt32 program, UInt32 storageBlockIndex, UInt32 storageBlockBinding);
        [Slot(481)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glStencilFunc(System.Int32 func, Int32 @ref, UInt32 mask);
        [Slot(482)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glStencilFuncSeparate(System.Int32 face, System.Int32 func, Int32 @ref, UInt32 mask);
        [Slot(483)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glStencilMask(UInt32 mask);
        [Slot(484)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glStencilMaskSeparate(System.Int32 face, UInt32 mask);
        [Slot(485)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glStencilOp(System.Int32 fail, System.Int32 zfail, System.Int32 zpass);
        [Slot(486)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glStencilOpSeparate(System.Int32 face, System.Int32 sfail, System.Int32 dpfail, System.Int32 dppass);
        [Slot(487)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glTexBuffer(System.Int32 target, System.Int32 internalformat, UInt32 buffer);
        [Slot(488)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glTexBufferRange(System.Int32 target, System.Int32 internalformat, UInt32 buffer, IntPtr offset, IntPtr size);
        [Slot(489)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glTexCoordP1ui(System.Int32 type, UInt32 coords);
        [Slot(490)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glTexCoordP1uiv(System.Int32 type, UInt32* coords);
        [Slot(491)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glTexCoordP2ui(System.Int32 type, UInt32 coords);
        [Slot(492)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glTexCoordP2uiv(System.Int32 type, UInt32* coords);
        [Slot(493)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glTexCoordP3ui(System.Int32 type, UInt32 coords);
        [Slot(494)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glTexCoordP3uiv(System.Int32 type, UInt32* coords);
        [Slot(495)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glTexCoordP4ui(System.Int32 type, UInt32 coords);
        [Slot(496)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glTexCoordP4uiv(System.Int32 type, UInt32* coords);
        [Slot(497)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glTexImage1D(System.Int32 target, Int32 level, System.Int32 internalformat, Int32 width, Int32 border, System.Int32 format, System.Int32 type, IntPtr pixels);
        [Slot(498)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glTexImage2D(System.Int32 target, Int32 level, System.Int32 internalformat, Int32 width, Int32 height, Int32 border, System.Int32 format, System.Int32 type, IntPtr pixels);
        [Slot(499)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glTexImage2DMultisample(System.Int32 target, Int32 samples, System.Int32 internalformat, Int32 width, Int32 height, bool fixedsamplelocations);
        [Slot(500)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glTexImage3D(System.Int32 target, Int32 level, System.Int32 internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, System.Int32 format, System.Int32 type, IntPtr pixels);
        [Slot(501)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glTexImage3DMultisample(System.Int32 target, Int32 samples, System.Int32 internalformat, Int32 width, Int32 height, Int32 depth, bool fixedsamplelocations);
        [Slot(503)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glTexParameterf(System.Int32 target, System.Int32 pname, Single param);
        [Slot(504)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glTexParameterfv(System.Int32 target, System.Int32 pname, Single* @params);
        [Slot(505)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glTexParameteri(System.Int32 target, System.Int32 pname, Int32 param);
        [Slot(506)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glTexParameterIiv(System.Int32 target, System.Int32 pname, Int32* @params);
        [Slot(507)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glTexParameterIuiv(System.Int32 target, System.Int32 pname, UInt32* @params);
        [Slot(508)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glTexParameteriv(System.Int32 target, System.Int32 pname, Int32* @params);
        [Slot(509)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glTexStorage1D(System.Int32 target, Int32 levels, System.Int32 internalformat, Int32 width);
        [Slot(510)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glTexStorage2D(System.Int32 target, Int32 levels, System.Int32 internalformat, Int32 width, Int32 height);
        [Slot(511)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glTexStorage2DMultisample(System.Int32 target, Int32 samples, System.Int32 internalformat, Int32 width, Int32 height, bool fixedsamplelocations);
        [Slot(512)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glTexStorage3D(System.Int32 target, Int32 levels, System.Int32 internalformat, Int32 width, Int32 height, Int32 depth);
        [Slot(513)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glTexStorage3DMultisample(System.Int32 target, Int32 samples, System.Int32 internalformat, Int32 width, Int32 height, Int32 depth, bool fixedsamplelocations);
        [Slot(514)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glTexSubImage1D(System.Int32 target, Int32 level, Int32 xoffset, Int32 width, System.Int32 format, System.Int32 type, IntPtr pixels);
        [Slot(515)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glTexSubImage2D(System.Int32 target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, System.Int32 format, System.Int32 type, IntPtr pixels);
        [Slot(516)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glTexSubImage3D(System.Int32 target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, System.Int32 format, System.Int32 type, IntPtr pixels);
        [Slot(517)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glTextureView(UInt32 texture, System.Int32 target, UInt32 origtexture, System.Int32 internalformat, UInt32 minlevel, UInt32 numlevels, UInt32 minlayer, UInt32 numlayers);
        [Slot(518)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glTransformFeedbackVaryings(UInt32 program, Int32 count, IntPtr varyings, System.Int32 bufferMode);
        [Slot(519)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glUniform1d(Int32 location, Double x);
        [Slot(520)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glUniform1dv(Int32 location, Int32 count, Double* value);
        [Slot(521)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glUniform1f(Int32 location, Single v0);
        [Slot(522)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glUniform1fv(Int32 location, Int32 count, Single* value);
        [Slot(523)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glUniform1i(Int32 location, Int32 v0);
        [Slot(524)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glUniform1iv(Int32 location, Int32 count, Int32* value);
        [Slot(525)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glUniform1ui(Int32 location, UInt32 v0);
        [Slot(526)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glUniform1uiv(Int32 location, Int32 count, UInt32* value);
        [Slot(527)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glUniform2d(Int32 location, Double x, Double y);
        [Slot(528)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glUniform2dv(Int32 location, Int32 count, Double* value);
        [Slot(529)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glUniform2f(Int32 location, Single v0, Single v1);
        [Slot(530)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glUniform2fv(Int32 location, Int32 count, Single* value);
        [Slot(531)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glUniform2i(Int32 location, Int32 v0, Int32 v1);
        [Slot(532)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glUniform2iv(Int32 location, Int32 count, Int32* value);
        [Slot(533)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glUniform2ui(Int32 location, UInt32 v0, UInt32 v1);
        [Slot(534)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glUniform2uiv(Int32 location, Int32 count, UInt32* value);
        [Slot(535)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glUniform3d(Int32 location, Double x, Double y, Double z);
        [Slot(536)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glUniform3dv(Int32 location, Int32 count, Double* value);
        [Slot(537)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glUniform3f(Int32 location, Single v0, Single v1, Single v2);
        [Slot(538)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glUniform3fv(Int32 location, Int32 count, Single* value);
        [Slot(539)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glUniform3i(Int32 location, Int32 v0, Int32 v1, Int32 v2);
        [Slot(540)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glUniform3iv(Int32 location, Int32 count, Int32* value);
        [Slot(541)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glUniform3ui(Int32 location, UInt32 v0, UInt32 v1, UInt32 v2);
        [Slot(542)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glUniform3uiv(Int32 location, Int32 count, UInt32* value);
        [Slot(543)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glUniform4d(Int32 location, Double x, Double y, Double z, Double w);
        [Slot(544)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glUniform4dv(Int32 location, Int32 count, Double* value);
        [Slot(545)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glUniform4f(Int32 location, Single v0, Single v1, Single v2, Single v3);
        [Slot(546)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glUniform4fv(Int32 location, Int32 count, Single* value);
        [Slot(547)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glUniform4i(Int32 location, Int32 v0, Int32 v1, Int32 v2, Int32 v3);
        [Slot(548)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glUniform4iv(Int32 location, Int32 count, Int32* value);
        [Slot(549)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glUniform4ui(Int32 location, UInt32 v0, UInt32 v1, UInt32 v2, UInt32 v3);
        [Slot(550)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glUniform4uiv(Int32 location, Int32 count, UInt32* value);
        [Slot(551)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glUniformBlockBinding(UInt32 program, UInt32 uniformBlockIndex, UInt32 uniformBlockBinding);
        [Slot(554)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glUniformMatrix2dv(Int32 location, Int32 count, bool transpose, Double* value);
        [Slot(555)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glUniformMatrix2fv(Int32 location, Int32 count, bool transpose, Single* value);
        [Slot(556)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glUniformMatrix2x3dv(Int32 location, Int32 count, bool transpose, Double* value);
        [Slot(557)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glUniformMatrix2x3fv(Int32 location, Int32 count, bool transpose, Single* value);
        [Slot(558)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glUniformMatrix2x4dv(Int32 location, Int32 count, bool transpose, Double* value);
        [Slot(559)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glUniformMatrix2x4fv(Int32 location, Int32 count, bool transpose, Single* value);
        [Slot(560)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glUniformMatrix3dv(Int32 location, Int32 count, bool transpose, Double* value);
        [Slot(561)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glUniformMatrix3fv(Int32 location, Int32 count, bool transpose, Single* value);
        [Slot(562)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glUniformMatrix3x2dv(Int32 location, Int32 count, bool transpose, Double* value);
        [Slot(563)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glUniformMatrix3x2fv(Int32 location, Int32 count, bool transpose, Single* value);
        [Slot(564)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glUniformMatrix3x4dv(Int32 location, Int32 count, bool transpose, Double* value);
        [Slot(565)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glUniformMatrix3x4fv(Int32 location, Int32 count, bool transpose, Single* value);
        [Slot(566)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glUniformMatrix4dv(Int32 location, Int32 count, bool transpose, Double* value);
        [Slot(567)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glUniformMatrix4fv(Int32 location, Int32 count, bool transpose, Single* value);
        [Slot(568)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glUniformMatrix4x2dv(Int32 location, Int32 count, bool transpose, Double* value);
        [Slot(569)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glUniformMatrix4x2fv(Int32 location, Int32 count, bool transpose, Single* value);
        [Slot(570)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glUniformMatrix4x3dv(Int32 location, Int32 count, bool transpose, Double* value);
        [Slot(571)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glUniformMatrix4x3fv(Int32 location, Int32 count, bool transpose, Single* value);
        [Slot(572)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glUniformSubroutinesuiv(System.Int32 shadertype, Int32 count, UInt32* indices);
        [Slot(573)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern bool glUnmapBuffer(System.Int32 target);
        [Slot(574)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glUseProgram(UInt32 program);
        [Slot(575)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glUseProgramStages(UInt32 pipeline, System.Int32 stages, UInt32 program);
        [Slot(576)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glValidateProgram(UInt32 program);
        [Slot(577)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glValidateProgramPipeline(UInt32 pipeline);
        [Slot(578)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glVertexAttrib1d(UInt32 index, Double x);
        [Slot(579)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glVertexAttrib1dv(UInt32 index, Double* v);
        [Slot(580)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glVertexAttrib1f(UInt32 index, Single x);
        [Slot(581)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glVertexAttrib1fv(UInt32 index, Single* v);
        [Slot(582)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glVertexAttrib1s(UInt32 index, Int16 x);
        [Slot(583)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glVertexAttrib1sv(UInt32 index, Int16* v);
        [Slot(584)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glVertexAttrib2d(UInt32 index, Double x, Double y);
        [Slot(585)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glVertexAttrib2dv(UInt32 index, Double* v);
        [Slot(586)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glVertexAttrib2f(UInt32 index, Single x, Single y);
        [Slot(587)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glVertexAttrib2fv(UInt32 index, Single* v);
        [Slot(588)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glVertexAttrib2s(UInt32 index, Int16 x, Int16 y);
        [Slot(589)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glVertexAttrib2sv(UInt32 index, Int16* v);
        [Slot(590)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glVertexAttrib3d(UInt32 index, Double x, Double y, Double z);
        [Slot(591)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glVertexAttrib3dv(UInt32 index, Double* v);
        [Slot(592)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glVertexAttrib3f(UInt32 index, Single x, Single y, Single z);
        [Slot(593)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glVertexAttrib3fv(UInt32 index, Single* v);
        [Slot(594)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glVertexAttrib3s(UInt32 index, Int16 x, Int16 y, Int16 z);
        [Slot(595)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glVertexAttrib3sv(UInt32 index, Int16* v);
        [Slot(596)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glVertexAttrib4bv(UInt32 index, SByte* v);
        [Slot(597)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glVertexAttrib4d(UInt32 index, Double x, Double y, Double z, Double w);
        [Slot(598)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glVertexAttrib4dv(UInt32 index, Double* v);
        [Slot(599)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glVertexAttrib4f(UInt32 index, Single x, Single y, Single z, Single w);
        [Slot(600)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glVertexAttrib4fv(UInt32 index, Single* v);
        [Slot(601)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glVertexAttrib4iv(UInt32 index, Int32* v);
        [Slot(602)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glVertexAttrib4Nbv(UInt32 index, SByte* v);
        [Slot(603)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glVertexAttrib4Niv(UInt32 index, Int32* v);
        [Slot(604)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glVertexAttrib4Nsv(UInt32 index, Int16* v);
        [Slot(605)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glVertexAttrib4Nub(UInt32 index, Byte x, Byte y, Byte z, Byte w);
        [Slot(606)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glVertexAttrib4Nubv(UInt32 index, Byte* v);
        [Slot(607)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glVertexAttrib4Nuiv(UInt32 index, UInt32* v);
        [Slot(608)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glVertexAttrib4Nusv(UInt32 index, UInt16* v);
        [Slot(609)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glVertexAttrib4s(UInt32 index, Int16 x, Int16 y, Int16 z, Int16 w);
        [Slot(610)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glVertexAttrib4sv(UInt32 index, Int16* v);
        [Slot(611)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glVertexAttrib4ubv(UInt32 index, Byte* v);
        [Slot(612)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glVertexAttrib4uiv(UInt32 index, UInt32* v);
        [Slot(613)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glVertexAttrib4usv(UInt32 index, UInt16* v);
        [Slot(614)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glVertexAttribBinding(UInt32 attribindex, UInt32 bindingindex);
        [Slot(615)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glVertexAttribDivisor(UInt32 index, UInt32 divisor);
        [Slot(616)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glVertexAttribFormat(UInt32 attribindex, Int32 size, System.Int32 type, bool normalized, UInt32 relativeoffset);
        [Slot(617)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glVertexAttribI1i(UInt32 index, Int32 x);
        [Slot(618)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glVertexAttribI1iv(UInt32 index, Int32* v);
        [Slot(619)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glVertexAttribI1ui(UInt32 index, UInt32 x);
        [Slot(620)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glVertexAttribI1uiv(UInt32 index, UInt32* v);
        [Slot(621)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glVertexAttribI2i(UInt32 index, Int32 x, Int32 y);
        [Slot(622)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glVertexAttribI2iv(UInt32 index, Int32* v);
        [Slot(623)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glVertexAttribI2ui(UInt32 index, UInt32 x, UInt32 y);
        [Slot(624)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glVertexAttribI2uiv(UInt32 index, UInt32* v);
        [Slot(625)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glVertexAttribI3i(UInt32 index, Int32 x, Int32 y, Int32 z);
        [Slot(626)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glVertexAttribI3iv(UInt32 index, Int32* v);
        [Slot(627)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glVertexAttribI3ui(UInt32 index, UInt32 x, UInt32 y, UInt32 z);
        [Slot(628)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glVertexAttribI3uiv(UInt32 index, UInt32* v);
        [Slot(629)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glVertexAttribI4bv(UInt32 index, SByte* v);
        [Slot(630)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glVertexAttribI4i(UInt32 index, Int32 x, Int32 y, Int32 z, Int32 w);
        [Slot(631)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glVertexAttribI4iv(UInt32 index, Int32* v);
        [Slot(632)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glVertexAttribI4sv(UInt32 index, Int16* v);
        [Slot(633)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glVertexAttribI4ubv(UInt32 index, Byte* v);
        [Slot(634)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glVertexAttribI4ui(UInt32 index, UInt32 x, UInt32 y, UInt32 z, UInt32 w);
        [Slot(635)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glVertexAttribI4uiv(UInt32 index, UInt32* v);
        [Slot(636)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glVertexAttribI4usv(UInt32 index, UInt16* v);
        [Slot(637)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glVertexAttribIFormat(UInt32 attribindex, Int32 size, System.Int32 type, UInt32 relativeoffset);
        [Slot(638)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glVertexAttribIPointer(UInt32 index, Int32 size, System.Int32 type, Int32 stride, IntPtr pointer);
        [Slot(639)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glVertexAttribL1d(UInt32 index, Double x);
        [Slot(640)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glVertexAttribL1dv(UInt32 index, Double* v);
        [Slot(643)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glVertexAttribL2d(UInt32 index, Double x, Double y);
        [Slot(644)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glVertexAttribL2dv(UInt32 index, Double* v);
        [Slot(645)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glVertexAttribL3d(UInt32 index, Double x, Double y, Double z);
        [Slot(646)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glVertexAttribL3dv(UInt32 index, Double* v);
        [Slot(647)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glVertexAttribL4d(UInt32 index, Double x, Double y, Double z, Double w);
        [Slot(648)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glVertexAttribL4dv(UInt32 index, Double* v);
        [Slot(649)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glVertexAttribLFormat(UInt32 attribindex, Int32 size, System.Int32 type, UInt32 relativeoffset);
        [Slot(650)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glVertexAttribLPointer(UInt32 index, Int32 size, System.Int32 type, Int32 stride, IntPtr pointer);
        [Slot(651)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glVertexAttribP1ui(UInt32 index, System.Int32 type, bool normalized, UInt32 value);
        [Slot(652)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glVertexAttribP1uiv(UInt32 index, System.Int32 type, bool normalized, UInt32* value);
        [Slot(653)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glVertexAttribP2ui(UInt32 index, System.Int32 type, bool normalized, UInt32 value);
        [Slot(654)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glVertexAttribP2uiv(UInt32 index, System.Int32 type, bool normalized, UInt32* value);
        [Slot(655)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glVertexAttribP3ui(UInt32 index, System.Int32 type, bool normalized, UInt32 value);
        [Slot(656)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glVertexAttribP3uiv(UInt32 index, System.Int32 type, bool normalized, UInt32* value);
        [Slot(657)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glVertexAttribP4ui(UInt32 index, System.Int32 type, bool normalized, UInt32 value);
        [Slot(658)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glVertexAttribP4uiv(UInt32 index, System.Int32 type, bool normalized, UInt32* value);
        [Slot(659)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glVertexAttribPointer(UInt32 index, Int32 size, System.Int32 type, bool normalized, Int32 stride, IntPtr pointer);
        [Slot(660)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glVertexBindingDivisor(UInt32 bindingindex, UInt32 divisor);
        [Slot(661)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glVertexP2ui(System.Int32 type, UInt32 value);
        [Slot(662)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glVertexP2uiv(System.Int32 type, UInt32* value);
        [Slot(663)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glVertexP3ui(System.Int32 type, UInt32 value);
        [Slot(664)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glVertexP3uiv(System.Int32 type, UInt32* value);
        [Slot(665)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glVertexP4ui(System.Int32 type, UInt32 value);
        [Slot(666)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glVertexP4uiv(System.Int32 type, UInt32* value);
        [Slot(667)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glViewport(Int32 x, Int32 y, Int32 width, Int32 height);
        [Slot(668)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glViewportArrayv(UInt32 first, Int32 count, Single* v);
        [Slot(669)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glViewportIndexedf(UInt32 index, Single x, Single y, Single w, Single h);
        [Slot(670)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glViewportIndexedfv(UInt32 index, Single* v);
        [Slot(671)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern System.Int32 glWaitSync(IntPtr sync, System.Int32 flags, UInt64 timeout);
        [Slot(103)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glDebugMessageCallbackKHR(DebugProcKhr callback, IntPtr userParam);
        [Slot(106)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glDebugMessageControlKHR(System.Int32 source, System.Int32 type, System.Int32 severity, Int32 count, UInt32* ids, bool enabled);
        [Slot(109)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glDebugMessageInsertKHR(System.Int32 source, System.Int32 type, UInt32 id, System.Int32 severity, Int32 length, IntPtr buf);
        [Slot(211)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe Int32 glGetDebugMessageLogKHR(UInt32 count, Int32 bufSize, [OutAttribute] System.Int32* sources, [OutAttribute] System.Int32* types, [OutAttribute] UInt32* ids, [OutAttribute] System.Int32* severities, [OutAttribute] Int32* lengths, [OutAttribute] IntPtr messageLog);
        [Slot(257)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetObjectLabelKHR(System.Int32 identifier, UInt32 name, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] IntPtr label);
        [Slot(259)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetObjectPtrLabelKHR(IntPtr ptr, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] IntPtr label);
        [Slot(261)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glGetPointervKHR(System.Int32 pname, [OutAttribute] IntPtr @params);
        [Slot(378)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glObjectLabelKHR(System.Int32 identifier, UInt32 name, Int32 length, IntPtr label);
        [Slot(380)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glObjectPtrLabelKHR(IntPtr ptr, Int32 length, IntPtr label);
        [Slot(394)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glPopDebugGroupKHR();
        [Slot(452)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glPushDebugGroupKHR(System.Int32 source, UInt32 id, Int32 length, IntPtr message);
    }
}
