#region License
//
// ES20Obsolete.cs
//
// Author:
//       Stefanos A. <stapostol@gmail.com>
//
// Copyright (c) 2006-2014 Stefanos Apostolopoulos
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//
#endregion

using System;
using System.Text;
using System.Runtime.InteropServices;

namespace OpenTK.Graphics.ES30
{
    partial class GL
    {
        #region Xamarin.Android compatibility

        /// <summary>[requires: ANGLE_framebuffer_blit]
        /// Copy a block of pixels from the read framebuffer to the draw framebuffer
        /// </summary>
        /// <param name="srcX0"> 
        /// Specify the bounds of the source rectangle within the read buffer of the read framebuffer.
        /// </param>
        /// <param name="srcY0"> 
        /// Specify the bounds of the source rectangle within the read buffer of the read framebuffer.
        /// </param>
        /// <param name="srcX1"> 
        /// Specify the bounds of the source rectangle within the read buffer of the read framebuffer.
        /// </param>
        /// <param name="srcY1"> 
        /// Specify the bounds of the source rectangle within the read buffer of the read framebuffer.
        /// </param>
        /// <param name="dstX0"> 
        /// Specify the bounds of the destination rectangle within the write buffer of the write framebuffer.
        /// </param>
        /// <param name="dstY0"> 
        /// Specify the bounds of the destination rectangle within the write buffer of the write framebuffer.
        /// </param>
        /// <param name="dstX1"> 
        /// Specify the bounds of the destination rectangle within the write buffer of the write framebuffer.
        /// </param>
        /// <param name="dstY1"> 
        /// Specify the bounds of the destination rectangle within the write buffer of the write framebuffer.
        /// </param>
        /// <param name="mask"> 
        /// The bitwise OR of the flags indicating which buffers are to be copied. The allowed flags are ColorBufferBit, DepthBufferBit and StencilBufferBit.
        /// </param>
        /// <param name="filter"> 
        /// Specifies the interpolation to be applied if the image is stretched. Must be Nearest or Linear.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ANGLE_framebuffer_blit", Version = "", EntryPoint = "glBlitFramebufferANGLE")]
        public static void BlitFramebuffer(Int32 srcX0, Int32 srcY0, Int32 srcX1, Int32 srcY1, Int32 dstX0, Int32 dstY0, Int32 dstX1, Int32 dstY1, Int32 mask, OpenTK.Graphics.ES30.All filter) { throw new NotImplementedException(); }

        /// <summary>[requires: ANGLE_framebuffer_blit]
        /// Copy a block of pixels from the read framebuffer to the draw framebuffer
        /// </summary>
        /// <param name="srcX0"> 
        /// Specify the bounds of the source rectangle within the read buffer of the read framebuffer.
        /// </param>
        /// <param name="srcY0"> 
        /// Specify the bounds of the source rectangle within the read buffer of the read framebuffer.
        /// </param>
        /// <param name="srcX1"> 
        /// Specify the bounds of the source rectangle within the read buffer of the read framebuffer.
        /// </param>
        /// <param name="srcY1"> 
        /// Specify the bounds of the source rectangle within the read buffer of the read framebuffer.
        /// </param>
        /// <param name="dstX0"> 
        /// Specify the bounds of the destination rectangle within the write buffer of the write framebuffer.
        /// </param>
        /// <param name="dstY0"> 
        /// Specify the bounds of the destination rectangle within the write buffer of the write framebuffer.
        /// </param>
        /// <param name="dstX1"> 
        /// Specify the bounds of the destination rectangle within the write buffer of the write framebuffer.
        /// </param>
        /// <param name="dstY1"> 
        /// Specify the bounds of the destination rectangle within the write buffer of the write framebuffer.
        /// </param>
        /// <param name="mask"> 
        /// The bitwise OR of the flags indicating which buffers are to be copied. The allowed flags are ColorBufferBit, DepthBufferBit and StencilBufferBit.
        /// </param>
        /// <param name="filter"> 
        /// Specifies the interpolation to be applied if the image is stretched. Must be Nearest or Linear.
        /// </param>
        [AutoGenerated(Category = "ANGLE_framebuffer_blit", Version = "", EntryPoint = "glBlitFramebufferANGLE")]
        public static void BlitFramebuffer(Int32 srcX0, Int32 srcY0, Int32 srcX1, Int32 srcY1, Int32 dstX0, Int32 dstY0, Int32 dstX1, Int32 dstY1, UInt32 mask, OpenTK.Graphics.ES30.All filter) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Block and wait for a sync object to become signaled
        /// </summary>
        /// <param name="sync"> 
        /// The sync object whose status to wait on.
        /// </param>
        /// <param name="flags"> 
        /// A bitfield controlling the command flushing behavior. flags may be SyncFlushCommandsBit.
        /// </param>
        /// <param name="timeout"> 
        /// The timeout, specified in nanoseconds, for which the implementation should wait for sync to become signaled.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glClientWaitSync")]
        [CLSCompliant(false)]
        public static OpenTK.Graphics.ES30.All ClientWaitSync(IntPtr sync, Int32 flags, Int64 timeout) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Block and wait for a sync object to become signaled
        /// </summary>
        /// <param name="sync"> 
        /// The sync object whose status to wait on.
        /// </param>
        /// <param name="flags"> 
        /// A bitfield controlling the command flushing behavior. flags may be SyncFlushCommandsBit.
        /// </param>
        /// <param name="timeout"> 
        /// The timeout, specified in nanoseconds, for which the implementation should wait for sync to become signaled.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glClientWaitSync")]
        [CLSCompliant(false)]
        public static OpenTK.Graphics.ES30.All ClientWaitSync(IntPtr sync, UInt32 flags, UInt64 timeout) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Delete transform feedback objects
        /// </summary>
        /// <param name="n"> 
        /// Specifies the number of transform feedback objects to delete.
        /// </param>
        /// <param name="ids">[length: n] 
        /// Specifies an array of names of transform feedback objects to delete.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glDeleteTransformFeedbacks")]
        [CLSCompliant(false)]
        public static void DeleteTransformFeedback(Int32 n, Int32[] ids) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Delete transform feedback objects
        /// </summary>
        /// <param name="n"> 
        /// Specifies the number of transform feedback objects to delete.
        /// </param>
        /// <param name="ids">[length: n] 
        /// Specifies an array of names of transform feedback objects to delete.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glDeleteTransformFeedbacks")]
        [CLSCompliant(false)]
        public static void DeleteTransformFeedback(Int32 n, ref Int32 ids) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Delete transform feedback objects
        /// </summary>
        /// <param name="n"> 
        /// Specifies the number of transform feedback objects to delete.
        /// </param>
        /// <param name="ids">[length: n] 
        /// Specifies an array of names of transform feedback objects to delete.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glDeleteTransformFeedbacks")]
        [CLSCompliant(false)]
        public static unsafe void DeleteTransformFeedback(Int32 n, Int32* ids) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Delete transform feedback objects
        /// </summary>
        /// <param name="n"> 
        /// Specifies the number of transform feedback objects to delete.
        /// </param>
        /// <param name="ids">[length: n] 
        /// Specifies an array of names of transform feedback objects to delete.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glDeleteTransformFeedbacks")]
        [CLSCompliant(false)]
        public static void DeleteTransformFeedback(Int32 n, UInt32[] ids) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Delete transform feedback objects
        /// </summary>
        /// <param name="n"> 
        /// Specifies the number of transform feedback objects to delete.
        /// </param>
        /// <param name="ids">[length: n] 
        /// Specifies an array of names of transform feedback objects to delete.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glDeleteTransformFeedbacks")]
        [CLSCompliant(false)]
        public static void DeleteTransformFeedback(Int32 n, ref UInt32 ids) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Delete transform feedback objects
        /// </summary>
        /// <param name="n"> 
        /// Specifies the number of transform feedback objects to delete.
        /// </param>
        /// <param name="ids">[length: n] 
        /// Specifies an array of names of transform feedback objects to delete.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glDeleteTransformFeedbacks")]
        [CLSCompliant(false)]
        public static unsafe void DeleteTransformFeedback(Int32 n, UInt32* ids) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode"> 
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan and Triangles are accepted.
        /// </param>
        /// <param name="count"> 
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type"> 
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: count,type] 
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDrawElements")]
        public static void DrawElements(OpenTK.Graphics.ES30.BeginMode mode, Int32 count, OpenTK.Graphics.ES30.All type, IntPtr indices) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Create a new sync object and insert it into the GL command stream
        /// </summary>
        /// <param name="condition"> 
        /// Specifies the condition that must be met to set the sync object's state to signaled. condition must be SyncGpuCommandsComplete.
        /// </param>
        /// <param name="flags"> 
        /// Specifies a bitwise combination of flags controlling the behavior of the sync object. No flags are presently defined for this operation and flags must be zero.flags is a placeholder for anticipated future extensions of fence sync object capabilities.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glFenceSync")]
        public static IntPtr FenceSync(OpenTK.Graphics.ES30.All condition, Int32 flags) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Create a new sync object and insert it into the GL command stream
        /// </summary>
        /// <param name="condition"> 
        /// Specifies the condition that must be met to set the sync object's state to signaled. condition must be SyncGpuCommandsComplete.
        /// </param>
        /// <param name="flags"> 
        /// Specifies a bitwise combination of flags controlling the behavior of the sync object. No flags are presently defined for this operation and flags must be zero.flags is a placeholder for anticipated future extensions of fence sync object capabilities.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glFenceSync")]
        public static IntPtr FenceSync(OpenTK.Graphics.ES30.All condition, UInt32 flags) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Reserve transform feedback object names
        /// </summary>
        /// <param name="n"> 
        /// Specifies the number of transform feedback object names to reserve.
        /// </param>
        /// <param name="ids">[length: n] 
        /// Specifies an array of into which the reserved names will be written.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGenTransformFeedbacks")]
        [CLSCompliant(false)]
        public static void GenTransformFeedback(Int32 n, [OutAttribute] Int32[] ids) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Reserve transform feedback object names
        /// </summary>
        /// <param name="n"> 
        /// Specifies the number of transform feedback object names to reserve.
        /// </param>
        /// <param name="ids">[length: n] 
        /// Specifies an array of into which the reserved names will be written.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGenTransformFeedbacks")]
        [CLSCompliant(false)]
        public static void GenTransformFeedback(Int32 n, [OutAttribute] out Int32 ids) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Reserve transform feedback object names
        /// </summary>
        /// <param name="n"> 
        /// Specifies the number of transform feedback object names to reserve.
        /// </param>
        /// <param name="ids">[length: n] 
        /// Specifies an array of into which the reserved names will be written.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGenTransformFeedbacks")]
        [CLSCompliant(false)]
        public static unsafe void GenTransformFeedback(Int32 n, [OutAttribute] Int32* ids) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Reserve transform feedback object names
        /// </summary>
        /// <param name="n"> 
        /// Specifies the number of transform feedback object names to reserve.
        /// </param>
        /// <param name="ids">[length: n] 
        /// Specifies an array of into which the reserved names will be written.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGenTransformFeedbacks")]
        [CLSCompliant(false)]
        public static void GenTransformFeedback(Int32 n, [OutAttribute] UInt32[] ids) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Reserve transform feedback object names
        /// </summary>
        /// <param name="n"> 
        /// Specifies the number of transform feedback object names to reserve.
        /// </param>
        /// <param name="ids">[length: n] 
        /// Specifies an array of into which the reserved names will be written.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGenTransformFeedbacks")]
        [CLSCompliant(false)]
        public static void GenTransformFeedback(Int32 n, [OutAttribute] out UInt32 ids) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Reserve transform feedback object names
        /// </summary>
        /// <param name="n"> 
        /// Specifies the number of transform feedback object names to reserve.
        /// </param>
        /// <param name="ids">[length: n] 
        /// Specifies an array of into which the reserved names will be written.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGenTransformFeedbacks")]
        [CLSCompliant(false)]
        public static unsafe void GenTransformFeedback(Int32 n, [OutAttribute] UInt32* ids) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return information about an active attribute variable
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="index"> 
        /// Specifies the index of the attribute variable to be queried.
        /// </param>
        /// <param name="bufSize"> 
        /// Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
        /// </param>
        /// <param name="length">[length: 1] 
        /// Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than Null is passed.
        /// </param>
        /// <param name="size">[length: 1] 
        /// Returns the size of the attribute variable.
        /// </param>
        /// <param name="type">[length: 1] 
        /// Returns the data type of the attribute variable.
        /// </param>
        /// <param name="name">[length: bufSize] 
        /// Returns a null terminated string containing the name of the attribute variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetActiveAttrib")]
        [CLSCompliant(false)]
        public static void GetActiveAttrib(Int32 program, Int32 index, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute] Int32[] size, [OutAttribute] OpenTK.Graphics.ES30.All[] type, [OutAttribute] StringBuilder name) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return information about an active attribute variable
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="index"> 
        /// Specifies the index of the attribute variable to be queried.
        /// </param>
        /// <param name="bufSize"> 
        /// Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
        /// </param>
        /// <param name="length">[length: 1] 
        /// Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than Null is passed.
        /// </param>
        /// <param name="size">[length: 1] 
        /// Returns the size of the attribute variable.
        /// </param>
        /// <param name="type">[length: 1] 
        /// Returns the data type of the attribute variable.
        /// </param>
        /// <param name="name">[length: bufSize] 
        /// Returns a null terminated string containing the name of the attribute variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetActiveAttrib")]
        [CLSCompliant(false)]
        public static void GetActiveAttrib(UInt32 program, UInt32 index, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute] Int32[] size, [OutAttribute] OpenTK.Graphics.ES30.All[] type, [OutAttribute] StringBuilder name) { throw new NotImplementedException(); }

        public static string GetActiveAttrib(int program, int index, out int size, out All type)
        {
            int length;
            GetProgram(program, GetProgramParameterName.ActiveAttributeMaxLength, out length);
            StringBuilder sb = new StringBuilder(length == 0 ? 1 : length * 2);

            GetActiveAttrib(program, index, sb.Capacity, out length, out size, out type, sb);
            return sb.ToString();
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return information about an active uniform variable
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="index"> 
        /// Specifies the index of the uniform variable to be queried.
        /// </param>
        /// <param name="bufSize"> 
        /// Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
        /// </param>
        /// <param name="length">[length: 1] 
        /// Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than Null is passed.
        /// </param>
        /// <param name="size">[length: 1] 
        /// Returns the size of the uniform variable.
        /// </param>
        /// <param name="type">[length: 1] 
        /// Returns the data type of the uniform variable.
        /// </param>
        /// <param name="name">[length: bufSize] 
        /// Returns a null terminated string containing the name of the uniform variable.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetActiveUniform")]
        [CLSCompliant(false)]
        public static void GetActiveUniform(Int32 program, Int32 index, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute] Int32[] size, [OutAttribute] OpenTK.Graphics.ES30.All[] type, [OutAttribute] StringBuilder name) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return information about an active uniform variable
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="index"> 
        /// Specifies the index of the uniform variable to be queried.
        /// </param>
        /// <param name="bufSize"> 
        /// Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
        /// </param>
        /// <param name="length">[length: 1] 
        /// Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than Null is passed.
        /// </param>
        /// <param name="size">[length: 1] 
        /// Returns the size of the uniform variable.
        /// </param>
        /// <param name="type">[length: 1] 
        /// Returns the data type of the uniform variable.
        /// </param>
        /// <param name="name">[length: bufSize] 
        /// Returns a null terminated string containing the name of the uniform variable.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetActiveUniform")]
        [CLSCompliant(false)]
        public static void GetActiveUniform(UInt32 program, UInt32 index, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute] Int32[] size, [OutAttribute] OpenTK.Graphics.ES30.All[] type, [OutAttribute] StringBuilder name) { throw new NotImplementedException(); }

        public static string GetActiveUniform(int program, int uniformIndex, out int size, out All type)
        {
            int length;
            GetProgram(program, GetProgramParameterName.ActiveUniformMaxLength, out length);

            StringBuilder sb = new StringBuilder(length == 0 ? 1 : length);
            GetActiveUniform(program, uniformIndex, sb.Capacity, out length, out size, out type, sb);
            return sb.ToString();
        }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Retrieve the name of an active uniform block
        /// </summary>
        /// <param name="program"> 
        /// Specifies the name of a program containing the uniform block.
        /// </param>
        /// <param name="uniformBlockIndex"> 
        /// Specifies the index of the uniform block within program.
        /// </param>
        /// <param name="bufSize"> 
        /// Specifies the size of the buffer addressed by uniformBlockName.
        /// </param>
        /// <param name="length">[length: 1] 
        /// Specifies the address of a variable to receive the number of characters that were written to uniformBlockName.
        /// </param>
        /// <param name="uniformBlockName">[length: bufSize] 
        /// Specifies the address an array of characters to receive the name of the uniform block at uniformBlockIndex.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetActiveUniformBlockName")]
        [CLSCompliant(false)]
        public static void GetActiveUniformBlockName(Int32 program, Int32 uniformBlockIndex, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute] StringBuilder uniformBlockName) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Retrieve the name of an active uniform block
        /// </summary>
        /// <param name="program"> 
        /// Specifies the name of a program containing the uniform block.
        /// </param>
        /// <param name="uniformBlockIndex"> 
        /// Specifies the index of the uniform block within program.
        /// </param>
        /// <param name="bufSize"> 
        /// Specifies the size of the buffer addressed by uniformBlockName.
        /// </param>
        /// <param name="length">[length: 1] 
        /// Specifies the address of a variable to receive the number of characters that were written to uniformBlockName.
        /// </param>
        /// <param name="uniformBlockName">[length: bufSize] 
        /// Specifies the address an array of characters to receive the name of the uniform block at uniformBlockIndex.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetActiveUniformBlockName")]
        [CLSCompliant(false)]
        public static void GetActiveUniformBlockName(UInt32 program, UInt32 uniformBlockIndex, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute] StringBuilder uniformBlockName) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return the handles of the shader objects attached to a program object
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="maxCount"> 
        /// Specifies the size of the array for storing the returned object names.
        /// </param>
        /// <param name="count">[length: 1] 
        /// Returns the number of names actually returned in shaders.
        /// </param>
        /// <param name="shaders">[length: maxCount] 
        /// Specifies an array that is used to return the names of attached shader objects.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetAttachedShaders")]
        [CLSCompliant(false)]
        public static void GetAttachedShaders(Int32 program, Int32 maxCount, [OutAttribute] Int32[] count, [OutAttribute] Int32[] shaders) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return the handles of the shader objects attached to a program object
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="maxCount"> 
        /// Specifies the size of the array for storing the returned object names.
        /// </param>
        /// <param name="count">[length: 1] 
        /// Returns the number of names actually returned in shaders.
        /// </param>
        /// <param name="shaders">[length: maxCount] 
        /// Specifies an array that is used to return the names of attached shader objects.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetAttachedShaders")]
        [CLSCompliant(false)]
        public static void GetAttachedShaders(UInt32 program, Int32 maxCount, [OutAttribute] Int32[] count, [OutAttribute] UInt32[] shaders) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return the location of an attribute variable
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="name"> 
        /// Points to a null terminated string containing the name of the attribute variable whose location is to be queried.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetAttribLocation")]
        [CLSCompliant(false)]
        public static Int32 GetAttribLocation(Int32 program, StringBuilder name) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return the location of an attribute variable
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="name"> 
        /// Points to a null terminated string containing the name of the attribute variable whose location is to be queried.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetAttribLocation")]
        [CLSCompliant(false)]
        public static Int32 GetAttribLocation(UInt32 program, StringBuilder name) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Return parameters of a buffer object
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, CopyReadBuffer, CopyWriteBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of a buffer object parameter. Accepted values are BufferAccessFlags, BufferMapped, BufferMapLength, BufferMapOffset, BufferSize, or BufferUsage.
        /// </param>
        /// <param name="params">[length: pname] 
        /// Returns the requested parameter.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetBufferParameteri64v")]
        [CLSCompliant(false)]
        public static void GetBufferParameteri64(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All pname, [OutAttribute] Int64[] @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Return parameters of a buffer object
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, CopyReadBuffer, CopyWriteBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of a buffer object parameter. Accepted values are BufferAccessFlags, BufferMapped, BufferMapLength, BufferMapOffset, BufferSize, or BufferUsage.
        /// </param>
        /// <param name="params">[length: pname] 
        /// Returns the requested parameter.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetBufferParameteri64v")]
        [CLSCompliant(false)]
        public static void GetBufferParameteri64(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All pname, [OutAttribute] out Int64 @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Return parameters of a buffer object
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, CopyReadBuffer, CopyWriteBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of a buffer object parameter. Accepted values are BufferAccessFlags, BufferMapped, BufferMapLength, BufferMapOffset, BufferSize, or BufferUsage.
        /// </param>
        /// <param name="params">[length: pname] 
        /// Returns the requested parameter.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetBufferParameteri64v")]
        [CLSCompliant(false)]
        public static unsafe void GetBufferParameteri64(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All pname, [OutAttribute] Int64* @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Return parameters of a buffer object
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, CopyReadBuffer, CopyWriteBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of a buffer object parameter. Accepted values are BufferAccessFlags, BufferMapped, BufferMapLength, BufferMapOffset, BufferSize, or BufferUsage.
        /// </param>
        /// <param name="params">[length: pname] 
        /// Returns the requested parameter.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetBufferParameteri64v")]
        [CLSCompliant(false)]
        public static void GetBufferParameteri64(OpenTK.Graphics.ES30.BufferTarget target, OpenTK.Graphics.ES30.BufferParameterName pname, [OutAttribute] Int64[] @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Return parameters of a buffer object
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, CopyReadBuffer, CopyWriteBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of a buffer object parameter. Accepted values are BufferAccessFlags, BufferMapped, BufferMapLength, BufferMapOffset, BufferSize, or BufferUsage.
        /// </param>
        /// <param name="params">[length: pname] 
        /// Returns the requested parameter.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetBufferParameteri64v")]
        [CLSCompliant(false)]
        public static void GetBufferParameteri64(OpenTK.Graphics.ES30.BufferTarget target, OpenTK.Graphics.ES30.BufferParameterName pname, [OutAttribute] out Int64 @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Return parameters of a buffer object
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, CopyReadBuffer, CopyWriteBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of a buffer object parameter. Accepted values are BufferAccessFlags, BufferMapped, BufferMapLength, BufferMapOffset, BufferSize, or BufferUsage.
        /// </param>
        /// <param name="params">[length: pname] 
        /// Returns the requested parameter.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetBufferParameteri64v")]
        [CLSCompliant(false)]
        public static unsafe void GetBufferParameteri64(OpenTK.Graphics.ES30.BufferTarget target, OpenTK.Graphics.ES30.BufferParameterName pname, [OutAttribute] Int64* @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Query the bindings of color numbers to user-defined varying out variables
        /// </summary>
        /// <param name="program"> 
        /// The name of the program containing varying out variable whose binding to query
        /// </param>
        /// <param name="name">[length: name] 
        /// The name of the user-defined varying out variable whose binding to query
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetFragDataLocation")]
        [CLSCompliant(false)]
        public static Int32 GetFragDataLocation(Int32 program, StringBuilder name) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Query the bindings of color numbers to user-defined varying out variables
        /// </summary>
        /// <param name="program"> 
        /// The name of the program containing varying out variable whose binding to query
        /// </param>
        /// <param name="name">[length: name] 
        /// The name of the user-defined varying out variable whose binding to query
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetFragDataLocation")]
        [CLSCompliant(false)]
        public static Int32 GetFragDataLocation(UInt32 program, StringBuilder name) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Return a binary representation of a program object's compiled and linked executable source
        /// </summary>
        /// <param name="program"> 
        /// Specifies the name of a program object whose binary representation to retrieve.
        /// </param>
        /// <param name="bufSize"> 
        /// Specifies the size of the buffer whose address is given by binary.
        /// </param>
        /// <param name="length">[length: 1] 
        /// Specifies the address of a variable to receive the number of bytes written into binary.
        /// </param>
        /// <param name="binaryFormat">[length: 1] 
        /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
        /// </param>
        /// <param name="binary">[length: bufSize] 
        /// Specifies the address an array into which the GL will return program's binary representation.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetProgramBinary")]
        [CLSCompliant(false)]
        public static void GetProgramBinary(Int32 program, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute] OpenTK.Graphics.ES30.All[] binaryFormat, [OutAttribute] IntPtr binary) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Return a binary representation of a program object's compiled and linked executable source
        /// </summary>
        /// <param name="program"> 
        /// Specifies the name of a program object whose binary representation to retrieve.
        /// </param>
        /// <param name="bufSize"> 
        /// Specifies the size of the buffer whose address is given by binary.
        /// </param>
        /// <param name="length">[length: 1] 
        /// Specifies the address of a variable to receive the number of bytes written into binary.
        /// </param>
        /// <param name="binaryFormat">[length: 1] 
        /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
        /// </param>
        /// <param name="binary">[length: bufSize] 
        /// Specifies the address an array into which the GL will return program's binary representation.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetProgramBinary")]
        [CLSCompliant(false)]
        public static void GetProgramBinary<T4>(Int32 program, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute] OpenTK.Graphics.ES30.All[] binaryFormat, [InAttribute, OutAttribute] T4[] binary)
            where T4 : struct
        { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Return a binary representation of a program object's compiled and linked executable source
        /// </summary>
        /// <param name="program"> 
        /// Specifies the name of a program object whose binary representation to retrieve.
        /// </param>
        /// <param name="bufSize"> 
        /// Specifies the size of the buffer whose address is given by binary.
        /// </param>
        /// <param name="length">[length: 1] 
        /// Specifies the address of a variable to receive the number of bytes written into binary.
        /// </param>
        /// <param name="binaryFormat">[length: 1] 
        /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
        /// </param>
        /// <param name="binary">[length: bufSize] 
        /// Specifies the address an array into which the GL will return program's binary representation.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetProgramBinary")]
        [CLSCompliant(false)]
        public static void GetProgramBinary<T4>(Int32 program, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute] OpenTK.Graphics.ES30.All[] binaryFormat, [InAttribute, OutAttribute] T4[,] binary)
            where T4 : struct
        { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Return a binary representation of a program object's compiled and linked executable source
        /// </summary>
        /// <param name="program"> 
        /// Specifies the name of a program object whose binary representation to retrieve.
        /// </param>
        /// <param name="bufSize"> 
        /// Specifies the size of the buffer whose address is given by binary.
        /// </param>
        /// <param name="length">[length: 1] 
        /// Specifies the address of a variable to receive the number of bytes written into binary.
        /// </param>
        /// <param name="binaryFormat">[length: 1] 
        /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
        /// </param>
        /// <param name="binary">[length: bufSize] 
        /// Specifies the address an array into which the GL will return program's binary representation.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetProgramBinary")]
        [CLSCompliant(false)]
        public static void GetProgramBinary<T4>(Int32 program, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute] OpenTK.Graphics.ES30.All[] binaryFormat, [InAttribute, OutAttribute] T4[,,] binary)
            where T4 : struct
        { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Return a binary representation of a program object's compiled and linked executable source
        /// </summary>
        /// <param name="program"> 
        /// Specifies the name of a program object whose binary representation to retrieve.
        /// </param>
        /// <param name="bufSize"> 
        /// Specifies the size of the buffer whose address is given by binary.
        /// </param>
        /// <param name="length">[length: 1] 
        /// Specifies the address of a variable to receive the number of bytes written into binary.
        /// </param>
        /// <param name="binaryFormat">[length: 1] 
        /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
        /// </param>
        /// <param name="binary">[length: bufSize] 
        /// Specifies the address an array into which the GL will return program's binary representation.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetProgramBinary")]
        [CLSCompliant(false)]
        public static void GetProgramBinary<T4>(Int32 program, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute] OpenTK.Graphics.ES30.All[] binaryFormat, [InAttribute, OutAttribute] ref T4 binary)
            where T4 : struct
        { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Return a binary representation of a program object's compiled and linked executable source
        /// </summary>
        /// <param name="program"> 
        /// Specifies the name of a program object whose binary representation to retrieve.
        /// </param>
        /// <param name="bufSize"> 
        /// Specifies the size of the buffer whose address is given by binary.
        /// </param>
        /// <param name="length">[length: 1] 
        /// Specifies the address of a variable to receive the number of bytes written into binary.
        /// </param>
        /// <param name="binaryFormat">[length: 1] 
        /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
        /// </param>
        /// <param name="binary">[length: bufSize] 
        /// Specifies the address an array into which the GL will return program's binary representation.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetProgramBinary")]
        [CLSCompliant(false)]
        public static void GetProgramBinary(UInt32 program, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute] OpenTK.Graphics.ES30.All[] binaryFormat, [OutAttribute] IntPtr binary) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Return a binary representation of a program object's compiled and linked executable source
        /// </summary>
        /// <param name="program"> 
        /// Specifies the name of a program object whose binary representation to retrieve.
        /// </param>
        /// <param name="bufSize"> 
        /// Specifies the size of the buffer whose address is given by binary.
        /// </param>
        /// <param name="length">[length: 1] 
        /// Specifies the address of a variable to receive the number of bytes written into binary.
        /// </param>
        /// <param name="binaryFormat">[length: 1] 
        /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
        /// </param>
        /// <param name="binary">[length: bufSize] 
        /// Specifies the address an array into which the GL will return program's binary representation.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetProgramBinary")]
        [CLSCompliant(false)]
        public static void GetProgramBinary<T4>(UInt32 program, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute] OpenTK.Graphics.ES30.All[] binaryFormat, [InAttribute, OutAttribute] T4[] binary)
            where T4 : struct
        { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Return a binary representation of a program object's compiled and linked executable source
        /// </summary>
        /// <param name="program"> 
        /// Specifies the name of a program object whose binary representation to retrieve.
        /// </param>
        /// <param name="bufSize"> 
        /// Specifies the size of the buffer whose address is given by binary.
        /// </param>
        /// <param name="length">[length: 1] 
        /// Specifies the address of a variable to receive the number of bytes written into binary.
        /// </param>
        /// <param name="binaryFormat">[length: 1] 
        /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
        /// </param>
        /// <param name="binary">[length: bufSize] 
        /// Specifies the address an array into which the GL will return program's binary representation.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetProgramBinary")]
        [CLSCompliant(false)]
        public static void GetProgramBinary<T4>(UInt32 program, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute] OpenTK.Graphics.ES30.All[] binaryFormat, [InAttribute, OutAttribute] T4[,] binary)
            where T4 : struct
        { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Return a binary representation of a program object's compiled and linked executable source
        /// </summary>
        /// <param name="program"> 
        /// Specifies the name of a program object whose binary representation to retrieve.
        /// </param>
        /// <param name="bufSize"> 
        /// Specifies the size of the buffer whose address is given by binary.
        /// </param>
        /// <param name="length">[length: 1] 
        /// Specifies the address of a variable to receive the number of bytes written into binary.
        /// </param>
        /// <param name="binaryFormat">[length: 1] 
        /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
        /// </param>
        /// <param name="binary">[length: bufSize] 
        /// Specifies the address an array into which the GL will return program's binary representation.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetProgramBinary")]
        [CLSCompliant(false)]
        public static void GetProgramBinary<T4>(UInt32 program, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute] OpenTK.Graphics.ES30.All[] binaryFormat, [InAttribute, OutAttribute] T4[,,] binary)
            where T4 : struct
        { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Return a binary representation of a program object's compiled and linked executable source
        /// </summary>
        /// <param name="program"> 
        /// Specifies the name of a program object whose binary representation to retrieve.
        /// </param>
        /// <param name="bufSize"> 
        /// Specifies the size of the buffer whose address is given by binary.
        /// </param>
        /// <param name="length">[length: 1] 
        /// Specifies the address of a variable to receive the number of bytes written into binary.
        /// </param>
        /// <param name="binaryFormat">[length: 1] 
        /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
        /// </param>
        /// <param name="binary">[length: bufSize] 
        /// Specifies the address an array into which the GL will return program's binary representation.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetProgramBinary")]
        [CLSCompliant(false)]
        public static void GetProgramBinary<T4>(UInt32 program, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute] OpenTK.Graphics.ES30.All[] binaryFormat, [InAttribute, OutAttribute] ref T4 binary)
            where T4 : struct
        { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return the information log for a program object
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object whose information log is to be queried.
        /// </param>
        /// <param name="bufSize"> 
        /// Specifies the size of the character buffer for storing the returned information log.
        /// </param>
        /// <param name="length">[length: 1] 
        /// Returns the length of the string returned in infoLog (excluding the null terminator).
        /// </param>
        /// <param name="infoLog">[length: bufSize] 
        /// Specifies an array of characters that is used to return the information log.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetProgramInfoLog")]
        [CLSCompliant(false)]
        public static void GetProgramInfoLog(Int32 program, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute] StringBuilder infoLog) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return the information log for a program object
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object whose information log is to be queried.
        /// </param>
        /// <param name="bufSize"> 
        /// Specifies the size of the character buffer for storing the returned information log.
        /// </param>
        /// <param name="length">[length: 1] 
        /// Returns the length of the string returned in infoLog (excluding the null terminator).
        /// </param>
        /// <param name="infoLog">[length: bufSize] 
        /// Specifies an array of characters that is used to return the information log.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetProgramInfoLog")]
        [CLSCompliant(false)]
        public static void GetProgramInfoLog(UInt32 program, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute] StringBuilder infoLog) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return the information log for a shader object
        /// </summary>
        /// <param name="shader"> 
        /// Specifies the shader object whose information log is to be queried.
        /// </param>
        /// <param name="bufSize"> 
        /// Specifies the size of the character buffer for storing the returned information log.
        /// </param>
        /// <param name="length">[length: 1] 
        /// Returns the length of the string returned in infoLog (excluding the null terminator).
        /// </param>
        /// <param name="infoLog">[length: bufSize] 
        /// Specifies an array of characters that is used to return the information log.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderInfoLog")]
        [CLSCompliant(false)]
        public static void GetShaderInfoLog(Int32 shader, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute] StringBuilder infoLog) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return the source code string from a shader object
        /// </summary>
        /// <param name="shader"> 
        /// Specifies the shader object to be queried.
        /// </param>
        /// <param name="bufSize"> 
        /// Specifies the size of the character buffer for storing the returned source code string.
        /// </param>
        /// <param name="length">[length: 1] 
        /// Returns the length of the string returned in source (excluding the null terminator).
        /// </param>
        /// <param name="source">[length: bufSize] 
        /// Specifies an array of characters that is used to return the source code string.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderSource")]
        [CLSCompliant(false)]
        public static void GetShaderSource(Int32 shader, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute] StringBuilder source) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return the source code string from a shader object
        /// </summary>
        /// <param name="shader"> 
        /// Specifies the shader object to be queried.
        /// </param>
        /// <param name="bufSize"> 
        /// Specifies the size of the character buffer for storing the returned source code string.
        /// </param>
        /// <param name="length">[length: 1] 
        /// Returns the length of the string returned in source (excluding the null terminator).
        /// </param>
        /// <param name="source">[length: bufSize] 
        /// Specifies an array of characters that is used to return the source code string.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderSource")]
        [CLSCompliant(false)]
        public static void GetShaderSource(UInt32 shader, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute] StringBuilder source) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return the information log for a shader object
        /// </summary>
        /// <param name="shader"> 
        /// Specifies the shader object whose information log is to be queried.
        /// </param>
        /// <param name="bufSize"> 
        /// Specifies the size of the character buffer for storing the returned information log.
        /// </param>
        /// <param name="length">[length: 1] 
        /// Returns the length of the string returned in infoLog (excluding the null terminator).
        /// </param>
        /// <param name="infoLog">[length: bufSize] 
        /// Specifies an array of characters that is used to return the information log.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderInfoLog")]
        [CLSCompliant(false)]
        public static void GetShaderInfoLog(UInt32 shader, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute] StringBuilder infoLog) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Query the properties of a sync object
        /// </summary>
        /// <param name="sync"> 
        /// Specifies the sync object whose properties to query.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the parameter whose value to retrieve from the sync object specified in sync.
        /// </param>
        /// <param name="bufSize"> 
        /// Specifies the size of the buffer whose address is given in values.
        /// </param>
        /// <param name="length">[length: 1] 
        /// Specifies the address of an variable to receive the number of integers placed in values.
        /// </param>
        /// <param name="values">[length: bufSize] 
        /// Specifies the address of an array to receive the values of the queried parameter.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetSynciv")]
        [CLSCompliant(false)]
        public static void GetSync(IntPtr sync, OpenTK.Graphics.ES30.All pname, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute] Int32[] values) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Retrieve information about varying variables selected for transform feedback
        /// </summary>
        /// <param name="program"> 
        /// The name of the target program object.
        /// </param>
        /// <param name="index"> 
        /// The index of the varying variable whose information to retrieve.
        /// </param>
        /// <param name="bufSize"> 
        /// The maximum number of characters, including the null terminator, that may be written into name.
        /// </param>
        /// <param name="length">[length: 1] 
        /// The address of a variable which will receive the number of characters written into name, excluding the null-terminator. If length is Null no length is returned.
        /// </param>
        /// <param name="size">[length: 1] 
        /// The address of a variable that will receive the size of the varying.
        /// </param>
        /// <param name="type">[length: 1] 
        /// The address of a variable that will recieve the type of the varying.
        /// </param>
        /// <param name="name">[length: bufSize] 
        /// The address of a buffer into which will be written the name of the varying.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetTransformFeedbackVarying")]
        [CLSCompliant(false)]
        public static void GetTransformFeedbackVarying(Int32 program, Int32 index, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute] Int32[] size, [OutAttribute] OpenTK.Graphics.ES30.All[] type, [OutAttribute] StringBuilder name) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Retrieve information about varying variables selected for transform feedback
        /// </summary>
        /// <param name="program"> 
        /// The name of the target program object.
        /// </param>
        /// <param name="index"> 
        /// The index of the varying variable whose information to retrieve.
        /// </param>
        /// <param name="bufSize"> 
        /// The maximum number of characters, including the null terminator, that may be written into name.
        /// </param>
        /// <param name="length">[length: 1] 
        /// The address of a variable which will receive the number of characters written into name, excluding the null-terminator. If length is Null no length is returned.
        /// </param>
        /// <param name="size">[length: 1] 
        /// The address of a variable that will receive the size of the varying.
        /// </param>
        /// <param name="type">[length: 1] 
        /// The address of a variable that will recieve the type of the varying.
        /// </param>
        /// <param name="name">[length: bufSize] 
        /// The address of a buffer into which will be written the name of the varying.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetTransformFeedbackVarying")]
        [CLSCompliant(false)]
        public static void GetTransformFeedbackVarying(UInt32 program, UInt32 index, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute] Int32[] size, [OutAttribute] OpenTK.Graphics.ES30.All[] type, [OutAttribute] StringBuilder name) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Retrieve the index of a named uniform block
        /// </summary>
        /// <param name="program"> 
        /// Specifies the name of a program containing the uniform block.
        /// </param>
        /// <param name="uniformBlockName"> 
        /// Specifies the address an array of characters containing the name of the uniform block whose index to retrieve.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetUniformBlockIndex")]
        [CLSCompliant(false)]
        public static Int32 GetUniformBlockIndex(Int32 program, StringBuilder uniformBlockName) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Retrieve the index of a named uniform block
        /// </summary>
        /// <param name="program"> 
        /// Specifies the name of a program containing the uniform block.
        /// </param>
        /// <param name="uniformBlockName"> 
        /// Specifies the address an array of characters containing the name of the uniform block whose index to retrieve.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetUniformBlockIndex")]
        [CLSCompliant(false)]
        public static Int32 GetUniformBlockIndex(UInt32 program, StringBuilder uniformBlockName) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Retrieve the index of a named uniform block
        /// </summary>
        /// <param name="program"> 
        /// Specifies the name of a program containing uniforms whose indices to query.
        /// </param>
        /// <param name="uniformCount"> 
        /// Specifies the number of uniforms whose indices to query.
        /// </param>
        /// <param name="uniformNames">[length: uniformCount] 
        /// Specifies the address of an array of pointers to buffers containing the names of the queried uniforms.
        /// </param>
        /// <param name="uniformIndices">[length: uniformCount] 
        /// Specifies the address of an array that will receive the indices of the uniforms.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetUniformIndices")]
        [CLSCompliant(false)]
        public static void GetUniformIndices(Int32 program, Int32 uniformCount, StringBuilder uniformNames, [OutAttribute] Int32[] uniformIndices) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Retrieve the index of a named uniform block
        /// </summary>
        /// <param name="program"> 
        /// Specifies the name of a program containing uniforms whose indices to query.
        /// </param>
        /// <param name="uniformCount"> 
        /// Specifies the number of uniforms whose indices to query.
        /// </param>
        /// <param name="uniformNames">[length: uniformCount] 
        /// Specifies the address of an array of pointers to buffers containing the names of the queried uniforms.
        /// </param>
        /// <param name="uniformIndices">[length: uniformCount] 
        /// Specifies the address of an array that will receive the indices of the uniforms.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetUniformIndices")]
        [CLSCompliant(false)]
        public static void GetUniformIndices(Int32 program, Int32 uniformCount, StringBuilder uniformNames, [OutAttribute] out Int32 uniformIndices) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Retrieve the index of a named uniform block
        /// </summary>
        /// <param name="program"> 
        /// Specifies the name of a program containing uniforms whose indices to query.
        /// </param>
        /// <param name="uniformCount"> 
        /// Specifies the number of uniforms whose indices to query.
        /// </param>
        /// <param name="uniformNames">[length: uniformCount] 
        /// Specifies the address of an array of pointers to buffers containing the names of the queried uniforms.
        /// </param>
        /// <param name="uniformIndices">[length: uniformCount] 
        /// Specifies the address of an array that will receive the indices of the uniforms.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetUniformIndices")]
        [CLSCompliant(false)]
        public static unsafe void GetUniformIndices(Int32 program, Int32 uniformCount, StringBuilder uniformNames, [OutAttribute] Int32* uniformIndices) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Retrieve the index of a named uniform block
        /// </summary>
        /// <param name="program"> 
        /// Specifies the name of a program containing uniforms whose indices to query.
        /// </param>
        /// <param name="uniformCount"> 
        /// Specifies the number of uniforms whose indices to query.
        /// </param>
        /// <param name="uniformNames">[length: uniformCount] 
        /// Specifies the address of an array of pointers to buffers containing the names of the queried uniforms.
        /// </param>
        /// <param name="uniformIndices">[length: uniformCount] 
        /// Specifies the address of an array that will receive the indices of the uniforms.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetUniformIndices")]
        [CLSCompliant(false)]
        public static void GetUniformIndices(UInt32 program, Int32 uniformCount, StringBuilder uniformNames, [OutAttribute] UInt32[] uniformIndices) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Retrieve the index of a named uniform block
        /// </summary>
        /// <param name="program"> 
        /// Specifies the name of a program containing uniforms whose indices to query.
        /// </param>
        /// <param name="uniformCount"> 
        /// Specifies the number of uniforms whose indices to query.
        /// </param>
        /// <param name="uniformNames">[length: uniformCount] 
        /// Specifies the address of an array of pointers to buffers containing the names of the queried uniforms.
        /// </param>
        /// <param name="uniformIndices">[length: uniformCount] 
        /// Specifies the address of an array that will receive the indices of the uniforms.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetUniformIndices")]
        [CLSCompliant(false)]
        public static void GetUniformIndices(UInt32 program, Int32 uniformCount, StringBuilder uniformNames, [OutAttribute] out UInt32 uniformIndices) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Retrieve the index of a named uniform block
        /// </summary>
        /// <param name="program"> 
        /// Specifies the name of a program containing uniforms whose indices to query.
        /// </param>
        /// <param name="uniformCount"> 
        /// Specifies the number of uniforms whose indices to query.
        /// </param>
        /// <param name="uniformNames">[length: uniformCount] 
        /// Specifies the address of an array of pointers to buffers containing the names of the queried uniforms.
        /// </param>
        /// <param name="uniformIndices">[length: uniformCount] 
        /// Specifies the address of an array that will receive the indices of the uniforms.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetUniformIndices")]
        [CLSCompliant(false)]
        public static unsafe void GetUniformIndices(UInt32 program, Int32 uniformCount, StringBuilder uniformNames, [OutAttribute] UInt32* uniformIndices) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return the location of a uniform variable
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="name"> 
        /// Points to a null terminated string containing the name of the uniform variable whose location is to be queried.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetUniformLocation")]
        [CLSCompliant(false)]
        public static Int32 GetUniformLocation(Int32 program, StringBuilder name) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return the location of a uniform variable
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="name"> 
        /// Points to a null terminated string containing the name of the uniform variable whose location is to be queried.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetUniformLocation")]
        [CLSCompliant(false)]
        public static Int32 GetUniformLocation(UInt32 program, StringBuilder name) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]</summary>
        /// <param name="index"></param>
        /// <param name="pname"></param>
        /// <param name="params">[length: 1]</param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetVertexAttribIiv")]
        [CLSCompliant(false)]
        public static void GetVertexAttribI(Int32 index, OpenTK.Graphics.ES30.All pname, [OutAttribute] Int32[] @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]</summary>
        /// <param name="index"></param>
        /// <param name="pname"></param>
        /// <param name="params">[length: 1]</param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetVertexAttribIiv")]
        [CLSCompliant(false)]
        public static void GetVertexAttribI(UInt32 index, OpenTK.Graphics.ES30.All pname, [OutAttribute] Int32[] @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]</summary>
        /// <param name="index"></param>
        /// <param name="pname"></param>
        /// <param name="params">[length: 1]</param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetVertexAttribIiv")]
        [CLSCompliant(false)]
        public static void GetVertexAttribI(UInt32 index, OpenTK.Graphics.ES30.All pname, [OutAttribute] UInt32[] @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Map a section of a buffer object's data store
        /// </summary>
        /// <param name="target"> 
        /// Specifies a binding to which the target buffer is bound.
        /// </param>
        /// <param name="offset"> 
        /// Specifies the starting offset within the buffer of the range to be mapped.
        /// </param>
        /// <param name="length"> 
        /// Specifies the length of the range to be mapped.
        /// </param>
        /// <param name="access"> 
        /// Specifies a combination of access flags indicating the desired access to the range.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glMapBufferRange")]
        public static IntPtr MapBufferRange(OpenTK.Graphics.ES30.All target, IntPtr offset, IntPtr length, int access) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Map a section of a buffer object's data store
        /// </summary>
        /// <param name="target"> 
        /// Specifies a binding to which the target buffer is bound.
        /// </param>
        /// <param name="offset"> 
        /// Specifies the starting offset within the buffer of the range to be mapped.
        /// </param>
        /// <param name="length"> 
        /// Specifies the length of the range to be mapped.
        /// </param>
        /// <param name="access"> 
        /// Specifies a combination of access flags indicating the desired access to the range.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glMapBufferRange")]
        public static IntPtr MapBufferRange(OpenTK.Graphics.ES30.All target, IntPtr offset, IntPtr length, uint access) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify a two-dimensional texture image
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat"> 
        /// Specifies the internal format of the texture. Must be one of the following symbolic constants: Alpha, Luminance, LuminanceAlpha, Rgb, Rgba.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture image. All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture image All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.
        /// </param>
        /// <param name="border"> 
        /// Specifies the width of the border. Must be 0.
        /// </param>
        /// <param name="format"> 
        /// Specifies the format of the texel data.  Must match internalformat. The following symbolic values are accepted: Alpha, Rgb, Rgba, Luminance, and LuminanceAlpha.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of the texel data. The following symbolic values are accepted: UnsignedByte, UnsignedShort565, UnsignedShort4444, and UnsignedShort5551.
        /// </param>
        /// <param name="pixels">[length: format,type,width,height] 
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glTexImage2D")]
        public static void TexImage2D(OpenTK.Graphics.ES30.All target, Int32 level, int internalformat, Int32 width, Int32 height, Int32 border, OpenTK.Graphics.ES30.All format, OpenTK.Graphics.ES30.All type, IntPtr pixels) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify a two-dimensional texture image
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat"> 
        /// Specifies the internal format of the texture. Must be one of the following symbolic constants: Alpha, Luminance, LuminanceAlpha, Rgb, Rgba.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture image. All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture image All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.
        /// </param>
        /// <param name="border"> 
        /// Specifies the width of the border. Must be 0.
        /// </param>
        /// <param name="format"> 
        /// Specifies the format of the texel data.  Must match internalformat. The following symbolic values are accepted: Alpha, Rgb, Rgba, Luminance, and LuminanceAlpha.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of the texel data. The following symbolic values are accepted: UnsignedByte, UnsignedShort565, UnsignedShort4444, and UnsignedShort5551.
        /// </param>
        /// <param name="pixels">[length: format,type,width,height] 
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glTexImage2D")]
        [CLSCompliant(false)]
        public static void TexImage2D<T8>(OpenTK.Graphics.ES30.All target, Int32 level, int internalformat, Int32 width, Int32 height, Int32 border, OpenTK.Graphics.ES30.All format, OpenTK.Graphics.ES30.All type, [InAttribute, OutAttribute] T8[] pixels)
            where T8 : struct
        { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify a two-dimensional texture image
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat"> 
        /// Specifies the internal format of the texture. Must be one of the following symbolic constants: Alpha, Luminance, LuminanceAlpha, Rgb, Rgba.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture image. All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture image All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.
        /// </param>
        /// <param name="border"> 
        /// Specifies the width of the border. Must be 0.
        /// </param>
        /// <param name="format"> 
        /// Specifies the format of the texel data.  Must match internalformat. The following symbolic values are accepted: Alpha, Rgb, Rgba, Luminance, and LuminanceAlpha.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of the texel data. The following symbolic values are accepted: UnsignedByte, UnsignedShort565, UnsignedShort4444, and UnsignedShort5551.
        /// </param>
        /// <param name="pixels">[length: format,type,width,height] 
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glTexImage2D")]
        [CLSCompliant(false)]
        public static void TexImage2D<T8>(OpenTK.Graphics.ES30.All target, Int32 level, int internalformat, Int32 width, Int32 height, Int32 border, OpenTK.Graphics.ES30.All format, OpenTK.Graphics.ES30.All type, [InAttribute, OutAttribute] T8[,] pixels)
            where T8 : struct
        { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify a two-dimensional texture image
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat"> 
        /// Specifies the internal format of the texture. Must be one of the following symbolic constants: Alpha, Luminance, LuminanceAlpha, Rgb, Rgba.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture image. All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture image All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.
        /// </param>
        /// <param name="border"> 
        /// Specifies the width of the border. Must be 0.
        /// </param>
        /// <param name="format"> 
        /// Specifies the format of the texel data.  Must match internalformat. The following symbolic values are accepted: Alpha, Rgb, Rgba, Luminance, and LuminanceAlpha.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of the texel data. The following symbolic values are accepted: UnsignedByte, UnsignedShort565, UnsignedShort4444, and UnsignedShort5551.
        /// </param>
        /// <param name="pixels">[length: format,type,width,height] 
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glTexImage2D")]
        [CLSCompliant(false)]
        public static void TexImage2D<T8>(OpenTK.Graphics.ES30.All target, Int32 level, int internalformat, Int32 width, Int32 height, Int32 border, OpenTK.Graphics.ES30.All format, OpenTK.Graphics.ES30.All type, [InAttribute, OutAttribute] T8[,,] pixels)
            where T8 : struct
        { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify a two-dimensional texture image
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat"> 
        /// Specifies the internal format of the texture. Must be one of the following symbolic constants: Alpha, Luminance, LuminanceAlpha, Rgb, Rgba.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture image. All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture image All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.
        /// </param>
        /// <param name="border"> 
        /// Specifies the width of the border. Must be 0.
        /// </param>
        /// <param name="format"> 
        /// Specifies the format of the texel data.  Must match internalformat. The following symbolic values are accepted: Alpha, Rgb, Rgba, Luminance, and LuminanceAlpha.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of the texel data. The following symbolic values are accepted: UnsignedByte, UnsignedShort565, UnsignedShort4444, and UnsignedShort5551.
        /// </param>
        /// <param name="pixels">[length: format,type,width,height] 
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glTexImage2D")]
        public static void TexImage2D<T8>(OpenTK.Graphics.ES30.All target, Int32 level, int internalformat, Int32 width, Int32 height, Int32 border, OpenTK.Graphics.ES30.All format, OpenTK.Graphics.ES30.All type, [InAttribute, OutAttribute] ref T8 pixels)
            where T8 : struct
        { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Specify a three-dimensional texture image
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture. Must be one of Texture3D or Texture2DArray.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level  is the n sup th mipmap reduction image.
        /// </param>
        /// <param name="internalformat"> 
        /// Specifies the number of color components in the texture. Must be one of base internal formats given in Table 1, or one of the sized internal formats given in Table 2, below.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture image. All implementations support 3D texture images that are at least 256 texels wide.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture image. All implementations support 3D texture images that are at least 256 texels high.
        /// </param>
        /// <param name="depth"> 
        /// Specifies the depth of the texture image, or the number of layers in a texture array. All implementations support 3D texture images that are at least 256 texels deep, and texture arrays that are at least 256 layers deep.
        /// </param>
        /// <param name="border"> 
        /// This value must be 0.
        /// </param>
        /// <param name="format"> 
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, RedInteger, Rg, RgInteger, Rgb, RgbInteger, Rgba, RgbaInteger, DepthComponent, DepthStencil, LuminanceAlpha, Luminance, and Alpha,
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, HalfFloat, Float, UnsignedShort565, UnsignedShort4444, UnsignedShort5551, UnsignedInt2101010Rev, UnsignedInt10F11F11FRev, UnsignedInt5999Rev, UnsignedInt248, and Float32UnsignedInt248Rev.
        /// </param>
        /// <param name="pixels">[length: format,type,width,height,depth] 
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glTexImage3D")]
        public static void TexImage3D(OpenTK.Graphics.ES30.All target, Int32 level, Int32 internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, OpenTK.Graphics.ES30.All format, OpenTK.Graphics.ES30.All type, IntPtr pixels) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Specify a three-dimensional texture image
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture. Must be one of Texture3D or Texture2DArray.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level  is the n sup th mipmap reduction image.
        /// </param>
        /// <param name="internalformat"> 
        /// Specifies the number of color components in the texture. Must be one of base internal formats given in Table 1, or one of the sized internal formats given in Table 2, below.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture image. All implementations support 3D texture images that are at least 256 texels wide.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture image. All implementations support 3D texture images that are at least 256 texels high.
        /// </param>
        /// <param name="depth"> 
        /// Specifies the depth of the texture image, or the number of layers in a texture array. All implementations support 3D texture images that are at least 256 texels deep, and texture arrays that are at least 256 layers deep.
        /// </param>
        /// <param name="border"> 
        /// This value must be 0.
        /// </param>
        /// <param name="format"> 
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, RedInteger, Rg, RgInteger, Rgb, RgbInteger, Rgba, RgbaInteger, DepthComponent, DepthStencil, LuminanceAlpha, Luminance, and Alpha,
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, HalfFloat, Float, UnsignedShort565, UnsignedShort4444, UnsignedShort5551, UnsignedInt2101010Rev, UnsignedInt10F11F11FRev, UnsignedInt5999Rev, UnsignedInt248, and Float32UnsignedInt248Rev.
        /// </param>
        /// <param name="pixels">[length: format,type,width,height,depth] 
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glTexImage3D")]
        [CLSCompliant(false)]
        public static void TexImage3D<T9>(OpenTK.Graphics.ES30.All target, Int32 level, Int32 internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, OpenTK.Graphics.ES30.All format, OpenTK.Graphics.ES30.All type, [InAttribute, OutAttribute] T9[] pixels)
            where T9 : struct
        { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Specify a three-dimensional texture image
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture. Must be one of Texture3D or Texture2DArray.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level  is the n sup th mipmap reduction image.
        /// </param>
        /// <param name="internalformat"> 
        /// Specifies the number of color components in the texture. Must be one of base internal formats given in Table 1, or one of the sized internal formats given in Table 2, below.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture image. All implementations support 3D texture images that are at least 256 texels wide.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture image. All implementations support 3D texture images that are at least 256 texels high.
        /// </param>
        /// <param name="depth"> 
        /// Specifies the depth of the texture image, or the number of layers in a texture array. All implementations support 3D texture images that are at least 256 texels deep, and texture arrays that are at least 256 layers deep.
        /// </param>
        /// <param name="border"> 
        /// This value must be 0.
        /// </param>
        /// <param name="format"> 
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, RedInteger, Rg, RgInteger, Rgb, RgbInteger, Rgba, RgbaInteger, DepthComponent, DepthStencil, LuminanceAlpha, Luminance, and Alpha,
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, HalfFloat, Float, UnsignedShort565, UnsignedShort4444, UnsignedShort5551, UnsignedInt2101010Rev, UnsignedInt10F11F11FRev, UnsignedInt5999Rev, UnsignedInt248, and Float32UnsignedInt248Rev.
        /// </param>
        /// <param name="pixels">[length: format,type,width,height,depth] 
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glTexImage3D")]
        [CLSCompliant(false)]
        public static void TexImage3D<T9>(OpenTK.Graphics.ES30.All target, Int32 level, Int32 internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, OpenTK.Graphics.ES30.All format, OpenTK.Graphics.ES30.All type, [InAttribute, OutAttribute] T9[,] pixels)
            where T9 : struct
        { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Specify a three-dimensional texture image
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture. Must be one of Texture3D or Texture2DArray.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level  is the n sup th mipmap reduction image.
        /// </param>
        /// <param name="internalformat"> 
        /// Specifies the number of color components in the texture. Must be one of base internal formats given in Table 1, or one of the sized internal formats given in Table 2, below.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture image. All implementations support 3D texture images that are at least 256 texels wide.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture image. All implementations support 3D texture images that are at least 256 texels high.
        /// </param>
        /// <param name="depth"> 
        /// Specifies the depth of the texture image, or the number of layers in a texture array. All implementations support 3D texture images that are at least 256 texels deep, and texture arrays that are at least 256 layers deep.
        /// </param>
        /// <param name="border"> 
        /// This value must be 0.
        /// </param>
        /// <param name="format"> 
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, RedInteger, Rg, RgInteger, Rgb, RgbInteger, Rgba, RgbaInteger, DepthComponent, DepthStencil, LuminanceAlpha, Luminance, and Alpha,
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, HalfFloat, Float, UnsignedShort565, UnsignedShort4444, UnsignedShort5551, UnsignedInt2101010Rev, UnsignedInt10F11F11FRev, UnsignedInt5999Rev, UnsignedInt248, and Float32UnsignedInt248Rev.
        /// </param>
        /// <param name="pixels">[length: format,type,width,height,depth] 
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glTexImage3D")]
        [CLSCompliant(false)]
        public static void TexImage3D<T9>(OpenTK.Graphics.ES30.All target, Int32 level, Int32 internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, OpenTK.Graphics.ES30.All format, OpenTK.Graphics.ES30.All type, [InAttribute, OutAttribute] T9[,,] pixels)
            where T9 : struct
        { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Specify a three-dimensional texture image
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture. Must be one of Texture3D or Texture2DArray.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level  is the n sup th mipmap reduction image.
        /// </param>
        /// <param name="internalformat"> 
        /// Specifies the number of color components in the texture. Must be one of base internal formats given in Table 1, or one of the sized internal formats given in Table 2, below.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture image. All implementations support 3D texture images that are at least 256 texels wide.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture image. All implementations support 3D texture images that are at least 256 texels high.
        /// </param>
        /// <param name="depth"> 
        /// Specifies the depth of the texture image, or the number of layers in a texture array. All implementations support 3D texture images that are at least 256 texels deep, and texture arrays that are at least 256 layers deep.
        /// </param>
        /// <param name="border"> 
        /// This value must be 0.
        /// </param>
        /// <param name="format"> 
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, RedInteger, Rg, RgInteger, Rgb, RgbInteger, Rgba, RgbaInteger, DepthComponent, DepthStencil, LuminanceAlpha, Luminance, and Alpha,
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, HalfFloat, Float, UnsignedShort565, UnsignedShort4444, UnsignedShort5551, UnsignedInt2101010Rev, UnsignedInt10F11F11FRev, UnsignedInt5999Rev, UnsignedInt248, and Float32UnsignedInt248Rev.
        /// </param>
        /// <param name="pixels">[length: format,type,width,height,depth] 
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glTexImage3D")]
        public static void TexImage3D<T9>(OpenTK.Graphics.ES30.All target, Int32 level, Int32 internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, OpenTK.Graphics.ES30.All format, OpenTK.Graphics.ES30.All type, [InAttribute, OutAttribute] ref T9 pixels)
            where T9 : struct
        { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Specify values to record in transform feedback buffers
        /// </summary>
        /// <param name="program"> 
        /// The name of the target program object.
        /// </param>
        /// <param name="count"> 
        /// The number of varying variables used for transform feedback.
        /// </param>
        /// <param name="varyings">[length: count] 
        /// An array of count zero-terminated strings specifying the names of the varying variables to use for transform feedback.
        /// </param>
        /// <param name="bufferMode"> 
        /// Identifies the mode used to capture the varying variables when transform feedback is active. bufferMode must be InterleavedAttribs or SeparateAttribs.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        public static void TransformFeedbackVaryings(Int32 program, Int32 count, String varyings, OpenTK.Graphics.ES30.All bufferMode)
        {
            TransformFeedbackVaryings(program, 1, new string[] { varyings }, bufferMode);
        }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Specify values to record in transform feedback buffers
        /// </summary>
        /// <param name="program"> 
        /// The name of the target program object.
        /// </param>
        /// <param name="count"> 
        /// The number of varying variables used for transform feedback.
        /// </param>
        /// <param name="varyings">[length: count] 
        /// An array of count zero-terminated strings specifying the names of the varying variables to use for transform feedback.
        /// </param>
        /// <param name="bufferMode"> 
        /// Identifies the mode used to capture the varying variables when transform feedback is active. bufferMode must be InterleavedAttribs or SeparateAttribs.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        public static void TransformFeedbackVaryings(UInt32 program, Int32 count, String varyings, OpenTK.Graphics.ES30.All bufferMode)
        {
            TransformFeedbackVaryings(program, 1, new string[] { varyings }, bufferMode);
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index"> 
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 1] 
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib1fv")]
        [CLSCompliant(false)]
        public static unsafe void VertexAttrib1(Int32 index, Single[] v) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index"> 
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 1] 
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib1fv")]
        [CLSCompliant(false)]
        public static unsafe void VertexAttrib1(UInt32 index, Single[] v) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Instruct the GL server to block until the specified sync object becomes signaled
        /// </summary>
        /// <param name="sync"> 
        /// Specifies the sync object whose status to wait on.
        /// </param>
        /// <param name="flags"> 
        /// A bitfield controlling the command flushing behavior. flags must be zero.
        /// </param>
        /// <param name="timeout"> 
        /// Specifies the timeout that the server should wait before continuing. timeout must be TimeoutIgnored.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glWaitSync")]
        [CLSCompliant(false)]
        public static void WaitSync(IntPtr sync, Int32 flags, Int64 timeout) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 or ES_VERSION_3_0]
        /// Instruct the GL server to block until the specified sync object becomes signaled
        /// </summary>
        /// <param name="sync"> 
        /// Specifies the sync object whose status to wait on.
        /// </param>
        /// <param name="flags"> 
        /// A bitfield controlling the command flushing behavior. flags must be zero.
        /// </param>
        /// <param name="timeout"> 
        /// Specifies the timeout that the server should wait before continuing. timeout must be TimeoutIgnored.
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glWaitSync")]
        [CLSCompliant(false)]
        public static void WaitSync(IntPtr sync, UInt32 flags, UInt64 timeout) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_driver_control]</summary>
        /// <param name="driverControl"></param>
        [AutoGenerated(Category = "QCOM_driver_control", Version = "", EntryPoint = "glDisableDriverControlQCOM")]
        [CLSCompliant(false)]
        public static void DisableDriverControlQCOM(Int32 driverControl) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_driver_control]</summary>
        /// <param name="driverControl"></param>
        [AutoGenerated(Category = "QCOM_driver_control", Version = "", EntryPoint = "glDisableDriverControlQCOM")]
        [CLSCompliant(false)]
        public static void DisableDriverControlQCOM(UInt32 driverControl) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_driver_control]</summary>
        /// <param name="driverControl"></param>
        [AutoGenerated(Category = "QCOM_driver_control", Version = "", EntryPoint = "glEnableDriverControlQCOM")]
        [CLSCompliant(false)]
        public static void EnableDriverControlQCOM(Int32 driverControl) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_driver_control]</summary>
        /// <param name="driverControl"></param>
        [AutoGenerated(Category = "QCOM_driver_control", Version = "", EntryPoint = "glEnableDriverControlQCOM")]
        [CLSCompliant(false)]
        public static void EnableDriverControlQCOM(UInt32 driverControl) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_tiled_rendering]</summary>
        /// <param name="preserveMask"></param>
        [AutoGenerated(Category = "QCOM_tiled_rendering", Version = "", EntryPoint = "glEndTilingQCOM")]
        [CLSCompliant(false)]
        public static void EndTilingQCOM(Int32 preserveMask) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_tiled_rendering]</summary>
        /// <param name="preserveMask"></param>
        [AutoGenerated(Category = "QCOM_tiled_rendering", Version = "", EntryPoint = "glEndTilingQCOM")]
        [CLSCompliant(false)]
        public static void EndTilingQCOM(UInt32 preserveMask) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get]</summary>
        /// <param name="target"></param>
        /// <param name="params"></param>
        [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetBufferPointervQCOM")]
        public static void ExtGetBufferPointervQCOM(OpenTK.Graphics.ES30.All target, [OutAttribute] IntPtr @params) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get]</summary>
        /// <param name="target"></param>
        /// <param name="params"></param>
        [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetBufferPointervQCOM")]
        [CLSCompliant(false)]
        public static void ExtGetBufferPointervQCOM<T1>(OpenTK.Graphics.ES30.All target, [InAttribute, OutAttribute] T1[] @params)
            where T1 : struct
        { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get]</summary>
        /// <param name="target"></param>
        /// <param name="params"></param>
        [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetBufferPointervQCOM")]
        [CLSCompliant(false)]
        public static void ExtGetBufferPointervQCOM<T1>(OpenTK.Graphics.ES30.All target, [InAttribute, OutAttribute] T1[,] @params)
            where T1 : struct
        { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get]</summary>
        /// <param name="target"></param>
        /// <param name="params"></param>
        [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetBufferPointervQCOM")]
        [CLSCompliant(false)]
        public static void ExtGetBufferPointervQCOM<T1>(OpenTK.Graphics.ES30.All target, [InAttribute, OutAttribute] T1[,,] @params)
            where T1 : struct
        { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get]</summary>
        /// <param name="target"></param>
        /// <param name="params"></param>
        [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetBufferPointervQCOM")]
        public static void ExtGetBufferPointervQCOM<T1>(OpenTK.Graphics.ES30.All target, [InAttribute, OutAttribute] ref T1 @params)
            where T1 : struct
        { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get]</summary>
        /// <param name="buffers">[length: maxBuffers]</param>
        /// <param name="maxBuffers"></param>
        /// <param name="numBuffers">[length: 1]</param>
        [Obsolete("Use out overload instead")]
        [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetBuffersQCOM")]
        [CLSCompliant(false)]
        public static void ExtGetBuffersQCOM([OutAttribute] Int32[] buffers, Int32 maxBuffers, [OutAttribute] Int32[] numBuffers) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get]</summary>
        /// <param name="buffers">[length: maxBuffers]</param>
        /// <param name="maxBuffers"></param>
        /// <param name="numBuffers">[length: 1]</param>
        [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetBuffersQCOM")]
        [CLSCompliant(false)]
        public static void ExtGetBuffersQCOM([OutAttribute] Int32[] buffers, Int32 maxBuffers, [OutAttribute] out Int32 numBuffers) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get]</summary>
        /// <param name="buffers">[length: maxBuffers]</param>
        /// <param name="maxBuffers"></param>
        /// <param name="numBuffers">[length: 1]</param>
        [Obsolete("Use out overload instead")]
        [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetBuffersQCOM")]
        [CLSCompliant(false)]
        public static void ExtGetBuffersQCOM(ref Int32 buffers, Int32 maxBuffers, ref Int32 numBuffers) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get]</summary>
        /// <param name="buffers">[length: maxBuffers]</param>
        /// <param name="maxBuffers"></param>
        /// <param name="numBuffers">[length: 1]</param>
        [Obsolete("Use out overload instead")]
        [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetBuffersQCOM")]
        [CLSCompliant(false)]
        public static unsafe void ExtGetBuffersQCOM([OutAttribute] Int32* buffers, Int32 maxBuffers, [OutAttribute] Int32* numBuffers) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get]</summary>
        /// <param name="buffers">[length: maxBuffers]</param>
        /// <param name="maxBuffers"></param>
        /// <param name="numBuffers">[length: 1]</param>
        [Obsolete("Use out overload instead")]
        [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetBuffersQCOM")]
        [CLSCompliant(false)]
        public static void ExtGetBuffersQCOM([OutAttribute] UInt32[] buffers, Int32 maxBuffers, [OutAttribute] Int32[] numBuffers) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get]</summary>
        /// <param name="buffers">[length: maxBuffers]</param>
        /// <param name="maxBuffers"></param>
        /// <param name="numBuffers">[length: 1]</param>
        [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetBuffersQCOM")]
        [CLSCompliant(false)]
        public static void ExtGetBuffersQCOM([OutAttribute] UInt32[] buffers, Int32 maxBuffers, [OutAttribute] out Int32 numBuffers) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get]</summary>
        /// <param name="buffers">[length: maxBuffers]</param>
        /// <param name="maxBuffers"></param>
        /// <param name="numBuffers">[length: 1]</param>
        [Obsolete("Use out overload instead")]
        [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetBuffersQCOM")]
        [CLSCompliant(false)]
        public static void ExtGetBuffersQCOM(ref UInt32 buffers, Int32 maxBuffers, ref Int32 numBuffers) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get]</summary>
        /// <param name="buffers">[length: maxBuffers]</param>
        /// <param name="maxBuffers"></param>
        /// <param name="numBuffers">[length: 1]</param>
        [Obsolete("Use out overload instead")]
        [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetBuffersQCOM")]
        [CLSCompliant(false)]
        public static unsafe void ExtGetBuffersQCOM([OutAttribute] UInt32* buffers, Int32 maxBuffers, [OutAttribute] Int32* numBuffers) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get]</summary>
        /// <param name="framebuffers">[length: maxFramebuffers]</param>
        /// <param name="maxFramebuffers"></param>
        /// <param name="numFramebuffers">[length: 1]</param>
        [Obsolete("Use out overload instead")]
        [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetFramebuffersQCOM")]
        [CLSCompliant(false)]
        public static void ExtGetFramebuffersQCOM([OutAttribute] Int32[] framebuffers, Int32 maxFramebuffers, [OutAttribute] Int32[] numFramebuffers) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get]</summary>
        /// <param name="framebuffers">[length: maxFramebuffers]</param>
        /// <param name="maxFramebuffers"></param>
        /// <param name="numFramebuffers">[length: 1]</param>
        [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetFramebuffersQCOM")]
        [CLSCompliant(false)]
        public static void ExtGetFramebuffersQCOM([OutAttribute] Int32[] framebuffers, Int32 maxFramebuffers, [OutAttribute] out Int32 numFramebuffers) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get]</summary>
        /// <param name="framebuffers">[length: maxFramebuffers]</param>
        /// <param name="maxFramebuffers"></param>
        /// <param name="numFramebuffers">[length: 1]</param>
        [Obsolete("Use out overload instead")]
        [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetFramebuffersQCOM")]
        [CLSCompliant(false)]
        public static void ExtGetFramebuffersQCOM(ref Int32 framebuffers, Int32 maxFramebuffers, ref Int32 numFramebuffers) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get]</summary>
        /// <param name="framebuffers">[length: maxFramebuffers]</param>
        /// <param name="maxFramebuffers"></param>
        /// <param name="numFramebuffers">[length: 1]</param>
        [Obsolete("Use out overload instead")]
        [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetFramebuffersQCOM")]
        [CLSCompliant(false)]
        public static unsafe void ExtGetFramebuffersQCOM([OutAttribute] Int32* framebuffers, Int32 maxFramebuffers, [OutAttribute] Int32* numFramebuffers) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get]</summary>
        /// <param name="framebuffers">[length: maxFramebuffers]</param>
        /// <param name="maxFramebuffers"></param>
        /// <param name="numFramebuffers">[length: 1]</param>
        [Obsolete("Use out overload instead")]
        [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetFramebuffersQCOM")]
        [CLSCompliant(false)]
        public static void ExtGetFramebuffersQCOM([OutAttribute] UInt32[] framebuffers, Int32 maxFramebuffers, [OutAttribute] Int32[] numFramebuffers) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get]</summary>
        /// <param name="framebuffers">[length: maxFramebuffers]</param>
        /// <param name="maxFramebuffers"></param>
        /// <param name="numFramebuffers">[length: 1]</param>
        [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetFramebuffersQCOM")]
        [CLSCompliant(false)]
        public static void ExtGetFramebuffersQCOM([OutAttribute] UInt32[] framebuffers, Int32 maxFramebuffers, [OutAttribute] out Int32 numFramebuffers) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get]</summary>
        /// <param name="framebuffers">[length: maxFramebuffers]</param>
        /// <param name="maxFramebuffers"></param>
        /// <param name="numFramebuffers">[length: 1]</param>
        [Obsolete("Use out overload instead")]
        [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetFramebuffersQCOM")]
        [CLSCompliant(false)]
        public static void ExtGetFramebuffersQCOM(ref UInt32 framebuffers, Int32 maxFramebuffers, ref Int32 numFramebuffers) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get]</summary>
        /// <param name="framebuffers">[length: maxFramebuffers]</param>
        /// <param name="maxFramebuffers"></param>
        /// <param name="numFramebuffers">[length: 1]</param>
        [Obsolete("Use out overload instead")]
        [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetFramebuffersQCOM")]
        [CLSCompliant(false)]
        public static unsafe void ExtGetFramebuffersQCOM([OutAttribute] UInt32* framebuffers, Int32 maxFramebuffers, [OutAttribute] Int32* numFramebuffers) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get2]</summary>
        /// <param name="program"></param>
        /// <param name="shadertype"></param>
        /// <param name="source"></param>
        /// <param name="length"></param>
        [AutoGenerated(Category = "QCOM_extended_get2", Version = "", EntryPoint = "glExtGetProgramBinarySourceQCOM")]
        [CLSCompliant(false)]
        public static void ExtGetProgramBinarySourceQCOM(Int32 program, OpenTK.Graphics.ES30.All shadertype, string source, [OutAttribute] Int32[] length) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get2]</summary>
        /// <param name="program"></param>
        /// <param name="shadertype"></param>
        /// <param name="source"></param>
        /// <param name="length"></param>
        [AutoGenerated(Category = "QCOM_extended_get2", Version = "", EntryPoint = "glExtGetProgramBinarySourceQCOM")]
        [CLSCompliant(false)]
        [Obsolete("Use GL.Qcom method instead")]
        public static void ExtGetProgramBinarySourceQCOM(Int32 program, OpenTK.Graphics.ES30.All shadertype, string source, ref Int32 length) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get2]</summary>
        /// <param name="program"></param>
        /// <param name="shadertype"></param>
        /// <param name="source"></param>
        /// <param name="length"></param>
        [AutoGenerated(Category = "QCOM_extended_get2", Version = "", EntryPoint = "glExtGetProgramBinarySourceQCOM")]
        [CLSCompliant(false)]
        [Obsolete("Use GL.Qcom method instead")]
        public static unsafe void ExtGetProgramBinarySourceQCOM(Int32 program, OpenTK.Graphics.ES30.All shadertype, string source, [OutAttribute] Int32* length) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get2]</summary>
        /// <param name="program"></param>
        /// <param name="shadertype"></param>
        /// <param name="source"></param>
        /// <param name="length"></param>
        [AutoGenerated(Category = "QCOM_extended_get2", Version = "", EntryPoint = "glExtGetProgramBinarySourceQCOM")]
        [CLSCompliant(false)]
        [Obsolete("Use GL.Qcom method instead")]
        public static void ExtGetProgramBinarySourceQCOM(UInt32 program, OpenTK.Graphics.ES30.All shadertype, string source, [OutAttribute] Int32[] length) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get2]</summary>
        /// <param name="program"></param>
        /// <param name="shadertype"></param>
        /// <param name="source"></param>
        /// <param name="length"></param>
        [AutoGenerated(Category = "QCOM_extended_get2", Version = "", EntryPoint = "glExtGetProgramBinarySourceQCOM")]
        [CLSCompliant(false)]
        [Obsolete("Use GL.Qcom method instead")]
        public static void ExtGetProgramBinarySourceQCOM(UInt32 program, OpenTK.Graphics.ES30.All shadertype, string source, ref Int32 length) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get2]</summary>
        /// <param name="program"></param>
        /// <param name="shadertype"></param>
        /// <param name="source"></param>
        /// <param name="length"></param>
        [AutoGenerated(Category = "QCOM_extended_get2", Version = "", EntryPoint = "glExtGetProgramBinarySourceQCOM")]
        [CLSCompliant(false)]
        [Obsolete("Use GL.Qcom method instead")]
        public static unsafe void ExtGetProgramBinarySourceQCOM(UInt32 program, OpenTK.Graphics.ES30.All shadertype, string source, [OutAttribute] Int32* length) { throw new NotImplementedException(); }


        /// <summary>[requires: QCOM_extended_get2]</summary>
        /// <param name="programs">[length: maxPrograms]</param>
        /// <param name="maxPrograms"></param>
        /// <param name="numPrograms">[length: 1]</param>
        [Obsolete("Use out overload instead")]
        [AutoGenerated(Category = "QCOM_extended_get2", Version = "", EntryPoint = "glExtGetProgramsQCOM")]
        [CLSCompliant(false)]
        public static void ExtGetProgramsQCOM([OutAttribute] Int32[] programs, Int32 maxPrograms, [OutAttribute] Int32[] numPrograms) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get2]</summary>
        /// <param name="programs">[length: maxPrograms]</param>
        /// <param name="maxPrograms"></param>
        /// <param name="numPrograms">[length: 1]</param>
        [AutoGenerated(Category = "QCOM_extended_get2", Version = "", EntryPoint = "glExtGetProgramsQCOM")]
        [CLSCompliant(false)]
        public static void ExtGetProgramsQCOM([OutAttribute] Int32[] programs, Int32 maxPrograms, ref Int32 numPrograms) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get2]</summary>
        /// <param name="programs">[length: maxPrograms]</param>
        /// <param name="maxPrograms"></param>
        /// <param name="numPrograms">[length: 1]</param>
        [Obsolete("Use out overload instead")]
        [AutoGenerated(Category = "QCOM_extended_get2", Version = "", EntryPoint = "glExtGetProgramsQCOM")]
        [CLSCompliant(false)]
        public static void ExtGetProgramsQCOM(ref Int32 programs, Int32 maxPrograms, ref Int32 numPrograms) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get2]</summary>
        /// <param name="programs">[length: maxPrograms]</param>
        /// <param name="maxPrograms"></param>
        /// <param name="numPrograms">[length: 1]</param>
        [Obsolete("Use out overload instead")]
        [AutoGenerated(Category = "QCOM_extended_get2", Version = "", EntryPoint = "glExtGetProgramsQCOM")]
        [CLSCompliant(false)]
        public static unsafe void ExtGetProgramsQCOM([OutAttribute] Int32* programs, Int32 maxPrograms, [OutAttribute] Int32* numPrograms) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get2]</summary>
        /// <param name="programs">[length: maxPrograms]</param>
        /// <param name="maxPrograms"></param>
        /// <param name="numPrograms">[length: 1]</param>
        [Obsolete("Use out overload instead")]
        [AutoGenerated(Category = "QCOM_extended_get2", Version = "", EntryPoint = "glExtGetProgramsQCOM")]
        [CLSCompliant(false)]
        public static void ExtGetProgramsQCOM([OutAttribute] UInt32[] programs, Int32 maxPrograms, [OutAttribute] Int32[] numPrograms) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get2]</summary>
        /// <param name="programs">[length: maxPrograms]</param>
        /// <param name="maxPrograms"></param>
        /// <param name="numPrograms">[length: 1]</param>
        [AutoGenerated(Category = "QCOM_extended_get2", Version = "", EntryPoint = "glExtGetProgramsQCOM")]
        [CLSCompliant(false)]
        public static void ExtGetProgramsQCOM([OutAttribute] UInt32[] programs, Int32 maxPrograms, ref Int32 numPrograms) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get2]</summary>
        /// <param name="programs">[length: maxPrograms]</param>
        /// <param name="maxPrograms"></param>
        /// <param name="numPrograms">[length: 1]</param>
        [Obsolete("Use out overload instead")]
        [AutoGenerated(Category = "QCOM_extended_get2", Version = "", EntryPoint = "glExtGetProgramsQCOM")]
        [CLSCompliant(false)]
        public static void ExtGetProgramsQCOM(ref UInt32 programs, Int32 maxPrograms, ref Int32 numPrograms) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get2]</summary>
        /// <param name="programs">[length: maxPrograms]</param>
        /// <param name="maxPrograms"></param>
        /// <param name="numPrograms">[length: 1]</param>
        [Obsolete("Use out overload instead")]
        [AutoGenerated(Category = "QCOM_extended_get2", Version = "", EntryPoint = "glExtGetProgramsQCOM")]
        [CLSCompliant(false)]
        public static unsafe void ExtGetProgramsQCOM([OutAttribute] UInt32* programs, Int32 maxPrograms, [OutAttribute] Int32* numPrograms) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get]</summary>
        /// <param name="renderbuffers">[length: maxRenderbuffers]</param>
        /// <param name="maxRenderbuffers"></param>
        /// <param name="numRenderbuffers">[length: 1]</param>
        [Obsolete("Use out overload instead")]
        [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetRenderbuffersQCOM")]
        [CLSCompliant(false)]
        public static void ExtGetRenderbuffersQCOM([OutAttribute] Int32[] renderbuffers, Int32 maxRenderbuffers, [OutAttribute] Int32[] numRenderbuffers) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get]</summary>
        /// <param name="renderbuffers">[length: maxRenderbuffers]</param>
        /// <param name="maxRenderbuffers"></param>
        /// <param name="numRenderbuffers">[length: 1]</param>
        [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetRenderbuffersQCOM")]
        [CLSCompliant(false)]
        public static void ExtGetRenderbuffersQCOM([OutAttribute] Int32[] renderbuffers, Int32 maxRenderbuffers, ref Int32 numRenderbuffers) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get]</summary>
        /// <param name="renderbuffers">[length: maxRenderbuffers]</param>
        /// <param name="maxRenderbuffers"></param>
        /// <param name="numRenderbuffers">[length: 1]</param>
        [Obsolete("Use out overload instead")]
        [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetRenderbuffersQCOM")]
        [CLSCompliant(false)]
        public static void ExtGetRenderbuffersQCOM(ref Int32 renderbuffers, Int32 maxRenderbuffers, ref Int32 numRenderbuffers) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get]</summary>
        /// <param name="renderbuffers">[length: maxRenderbuffers]</param>
        /// <param name="maxRenderbuffers"></param>
        /// <param name="numRenderbuffers">[length: 1]</param>
        [Obsolete("Use out overload instead")]
        [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetRenderbuffersQCOM")]
        [CLSCompliant(false)]
        public static unsafe void ExtGetRenderbuffersQCOM([OutAttribute] Int32* renderbuffers, Int32 maxRenderbuffers, [OutAttribute] Int32* numRenderbuffers) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get]</summary>
        /// <param name="renderbuffers">[length: maxRenderbuffers]</param>
        /// <param name="maxRenderbuffers"></param>
        /// <param name="numRenderbuffers">[length: 1]</param>
        [Obsolete("Use out overload instead")]
        [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetRenderbuffersQCOM")]
        [CLSCompliant(false)]
        public static void ExtGetRenderbuffersQCOM([OutAttribute] UInt32[] renderbuffers, Int32 maxRenderbuffers, [OutAttribute] Int32[] numRenderbuffers) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get]</summary>
        /// <param name="renderbuffers">[length: maxRenderbuffers]</param>
        /// <param name="maxRenderbuffers"></param>
        /// <param name="numRenderbuffers">[length: 1]</param>
        [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetRenderbuffersQCOM")]
        [CLSCompliant(false)]
        public static void ExtGetRenderbuffersQCOM([OutAttribute] UInt32[] renderbuffers, Int32 maxRenderbuffers, ref Int32 numRenderbuffers) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get]</summary>
        /// <param name="renderbuffers">[length: maxRenderbuffers]</param>
        /// <param name="maxRenderbuffers"></param>
        /// <param name="numRenderbuffers">[length: 1]</param>
        [Obsolete("Use out overload instead")]
        [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetRenderbuffersQCOM")]
        [CLSCompliant(false)]
        public static void ExtGetRenderbuffersQCOM(ref UInt32 renderbuffers, Int32 maxRenderbuffers, ref Int32 numRenderbuffers) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get]</summary>
        /// <param name="renderbuffers">[length: maxRenderbuffers]</param>
        /// <param name="maxRenderbuffers"></param>
        /// <param name="numRenderbuffers">[length: 1]</param>
        [Obsolete("Use out overload instead")]
        [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetRenderbuffersQCOM")]
        [CLSCompliant(false)]
        public static unsafe void ExtGetRenderbuffersQCOM([OutAttribute] UInt32* renderbuffers, Int32 maxRenderbuffers, [OutAttribute] Int32* numRenderbuffers) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get2]</summary>
        /// <param name="shaders">[length: maxShaders]</param>
        /// <param name="maxShaders"></param>
        /// <param name="numShaders">[length: 1]</param>
        [Obsolete("Use out overload instead")]
        [AutoGenerated(Category = "QCOM_extended_get2", Version = "", EntryPoint = "glExtGetShadersQCOM")]
        [CLSCompliant(false)]
        public static void ExtGetShadersQCOM([OutAttribute] Int32[] shaders, Int32 maxShaders, [OutAttribute] Int32[] numShaders) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get2]</summary>
        /// <param name="shaders">[length: maxShaders]</param>
        /// <param name="maxShaders"></param>
        /// <param name="numShaders">[length: 1]</param>
        [AutoGenerated(Category = "QCOM_extended_get2", Version = "", EntryPoint = "glExtGetShadersQCOM")]
        [CLSCompliant(false)]
        public static void ExtGetShadersQCOM([OutAttribute] Int32[] shaders, Int32 maxShaders, ref Int32 numShaders) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get2]</summary>
        /// <param name="shaders">[length: maxShaders]</param>
        /// <param name="maxShaders"></param>
        /// <param name="numShaders">[length: 1]</param>
        [Obsolete("Use out overload instead")]
        [AutoGenerated(Category = "QCOM_extended_get2", Version = "", EntryPoint = "glExtGetShadersQCOM")]
        [CLSCompliant(false)]
        public static void ExtGetShadersQCOM(ref Int32 shaders, Int32 maxShaders, ref Int32 numShaders) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get2]</summary>
        /// <param name="shaders">[length: maxShaders]</param>
        /// <param name="maxShaders"></param>
        /// <param name="numShaders">[length: 1]</param>
        [Obsolete("Use out overload instead")]
        [AutoGenerated(Category = "QCOM_extended_get2", Version = "", EntryPoint = "glExtGetShadersQCOM")]
        [CLSCompliant(false)]
        public static unsafe void ExtGetShadersQCOM([OutAttribute] Int32* shaders, Int32 maxShaders, [OutAttribute] Int32* numShaders) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get2]</summary>
        /// <param name="shaders">[length: maxShaders]</param>
        /// <param name="maxShaders"></param>
        /// <param name="numShaders">[length: 1]</param>
        [Obsolete("Use out overload instead")]
        [AutoGenerated(Category = "QCOM_extended_get2", Version = "", EntryPoint = "glExtGetShadersQCOM")]
        [CLSCompliant(false)]
        public static void ExtGetShadersQCOM([OutAttribute] UInt32[] shaders, Int32 maxShaders, [OutAttribute] Int32[] numShaders) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get2]</summary>
        /// <param name="shaders">[length: maxShaders]</param>
        /// <param name="maxShaders"></param>
        /// <param name="numShaders">[length: 1]</param>
        [AutoGenerated(Category = "QCOM_extended_get2", Version = "", EntryPoint = "glExtGetShadersQCOM")]
        [CLSCompliant(false)]
        public static void ExtGetShadersQCOM([OutAttribute] UInt32[] shaders, Int32 maxShaders, ref Int32 numShaders) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get2]</summary>
        /// <param name="shaders">[length: maxShaders]</param>
        /// <param name="maxShaders"></param>
        /// <param name="numShaders">[length: 1]</param>
        [Obsolete("Use out overload instead")]
        [AutoGenerated(Category = "QCOM_extended_get2", Version = "", EntryPoint = "glExtGetShadersQCOM")]
        [CLSCompliant(false)]
        public static void ExtGetShadersQCOM(ref UInt32 shaders, Int32 maxShaders, ref Int32 numShaders) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get2]</summary>
        /// <param name="shaders">[length: maxShaders]</param>
        /// <param name="maxShaders"></param>
        /// <param name="numShaders">[length: 1]</param>
        [Obsolete("Use out overload instead")]
        [AutoGenerated(Category = "QCOM_extended_get2", Version = "", EntryPoint = "glExtGetShadersQCOM")]
        [CLSCompliant(false)]
        public static unsafe void ExtGetShadersQCOM([OutAttribute] UInt32* shaders, Int32 maxShaders, [OutAttribute] Int32* numShaders) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get]</summary>
        /// <param name="texture"></param>
        /// <param name="face"></param>
        /// <param name="level"></param>
        /// <param name="pname"></param>
        /// <param name="params"></param>
        [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetTexLevelParameterivQCOM")]
        [CLSCompliant(false)]
        public static void ExtGetTexLevelParameterivQCOM(Int32 texture, OpenTK.Graphics.ES30.All face, Int32 level, OpenTK.Graphics.ES30.All pname, [OutAttribute] Int32[] @params) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get]</summary>
        /// <param name="texture"></param>
        /// <param name="face"></param>
        /// <param name="level"></param>
        /// <param name="pname"></param>
        /// <param name="params"></param>
        [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetTexLevelParameterivQCOM")]
        [CLSCompliant(false)]
        public static void ExtGetTexLevelParameterivQCOM(Int32 texture, OpenTK.Graphics.ES30.All face, Int32 level, OpenTK.Graphics.ES30.All pname, ref Int32 @params) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get]</summary>
        /// <param name="texture"></param>
        /// <param name="face"></param>
        /// <param name="level"></param>
        /// <param name="pname"></param>
        /// <param name="params"></param>
        [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetTexLevelParameterivQCOM")]
        [CLSCompliant(false)]
        public static unsafe void ExtGetTexLevelParameterivQCOM(Int32 texture, OpenTK.Graphics.ES30.All face, Int32 level, OpenTK.Graphics.ES30.All pname, [OutAttribute] Int32* @params) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get]</summary>
        /// <param name="texture"></param>
        /// <param name="face"></param>
        /// <param name="level"></param>
        /// <param name="pname"></param>
        /// <param name="params"></param>
        [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetTexLevelParameterivQCOM")]
        [CLSCompliant(false)]
        public static void ExtGetTexLevelParameterivQCOM(UInt32 texture, OpenTK.Graphics.ES30.All face, Int32 level, OpenTK.Graphics.ES30.All pname, [OutAttribute] Int32[] @params) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get]</summary>
        /// <param name="texture"></param>
        /// <param name="face"></param>
        /// <param name="level"></param>
        /// <param name="pname"></param>
        /// <param name="params"></param>
        [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetTexLevelParameterivQCOM")]
        [CLSCompliant(false)]
        public static void ExtGetTexLevelParameterivQCOM(UInt32 texture, OpenTK.Graphics.ES30.All face, Int32 level, OpenTK.Graphics.ES30.All pname, ref Int32 @params) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get]</summary>
        /// <param name="texture"></param>
        /// <param name="face"></param>
        /// <param name="level"></param>
        /// <param name="pname"></param>
        /// <param name="params"></param>
        [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetTexLevelParameterivQCOM")]
        [CLSCompliant(false)]
        public static unsafe void ExtGetTexLevelParameterivQCOM(UInt32 texture, OpenTK.Graphics.ES30.All face, Int32 level, OpenTK.Graphics.ES30.All pname, [OutAttribute] Int32* @params) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get]</summary>
        /// <param name="target"></param>
        /// <param name="level"></param>
        /// <param name="xoffset"></param>
        /// <param name="yoffset"></param>
        /// <param name="zoffset"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="depth"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="texels"></param>
        [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetTexSubImageQCOM")]
        public static void ExtGetTexSubImageQCOM(OpenTK.Graphics.ES30.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.ES30.All format, OpenTK.Graphics.ES30.All type, [OutAttribute] IntPtr texels) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get]</summary>
        /// <param name="target"></param>
        /// <param name="level"></param>
        /// <param name="xoffset"></param>
        /// <param name="yoffset"></param>
        /// <param name="zoffset"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="depth"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="texels"></param>
        [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetTexSubImageQCOM")]
        [CLSCompliant(false)]
        public static void ExtGetTexSubImageQCOM<T10>(OpenTK.Graphics.ES30.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.ES30.All format, OpenTK.Graphics.ES30.All type, [InAttribute, OutAttribute] T10[] texels)
            where T10 : struct
        { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get]</summary>
        /// <param name="target"></param>
        /// <param name="level"></param>
        /// <param name="xoffset"></param>
        /// <param name="yoffset"></param>
        /// <param name="zoffset"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="depth"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="texels"></param>
        [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetTexSubImageQCOM")]
        [CLSCompliant(false)]
        public static void ExtGetTexSubImageQCOM<T10>(OpenTK.Graphics.ES30.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.ES30.All format, OpenTK.Graphics.ES30.All type, [InAttribute, OutAttribute] T10[,] texels)
            where T10 : struct
        { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get]</summary>
        /// <param name="target"></param>
        /// <param name="level"></param>
        /// <param name="xoffset"></param>
        /// <param name="yoffset"></param>
        /// <param name="zoffset"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="depth"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="texels"></param>
        [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetTexSubImageQCOM")]
        [CLSCompliant(false)]
        public static void ExtGetTexSubImageQCOM<T10>(OpenTK.Graphics.ES30.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.ES30.All format, OpenTK.Graphics.ES30.All type, [InAttribute, OutAttribute] T10[,,] texels)
            where T10 : struct
        { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get]</summary>
        /// <param name="target"></param>
        /// <param name="level"></param>
        /// <param name="xoffset"></param>
        /// <param name="yoffset"></param>
        /// <param name="zoffset"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="depth"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="texels"></param>
        [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetTexSubImageQCOM")]
        public static void ExtGetTexSubImageQCOM<T10>(OpenTK.Graphics.ES30.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.ES30.All format, OpenTK.Graphics.ES30.All type, [InAttribute, OutAttribute] ref T10 texels)
            where T10 : struct
        { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get]</summary>
        /// <param name="textures"></param>
        /// <param name="maxTextures"></param>
        /// <param name="numTextures"></param>
        [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetTexturesQCOM")]
        [CLSCompliant(false)]
        public static void ExtGetTexturesQCOM([OutAttribute] Int32[] textures, Int32 maxTextures, [OutAttribute] Int32[] numTextures) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get]</summary>
        /// <param name="textures"></param>
        /// <param name="maxTextures"></param>
        /// <param name="numTextures"></param>
        [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetTexturesQCOM")]
        [CLSCompliant(false)]
        public static void ExtGetTexturesQCOM(ref Int32 textures, Int32 maxTextures, ref Int32 numTextures) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get]</summary>
        /// <param name="textures"></param>
        /// <param name="maxTextures"></param>
        /// <param name="numTextures"></param>
        [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetTexturesQCOM")]
        [CLSCompliant(false)]
        public static unsafe void ExtGetTexturesQCOM([OutAttribute] Int32* textures, Int32 maxTextures, [OutAttribute] Int32* numTextures) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get]</summary>
        /// <param name="textures"></param>
        /// <param name="maxTextures"></param>
        /// <param name="numTextures"></param>
        [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetTexturesQCOM")]
        [CLSCompliant(false)]
        public static void ExtGetTexturesQCOM([OutAttribute] UInt32[] textures, Int32 maxTextures, [OutAttribute] Int32[] numTextures) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get]</summary>
        /// <param name="textures"></param>
        /// <param name="maxTextures"></param>
        /// <param name="numTextures"></param>
        [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetTexturesQCOM")]
        [CLSCompliant(false)]
        public static void ExtGetTexturesQCOM(ref UInt32 textures, Int32 maxTextures, ref Int32 numTextures) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get]</summary>
        /// <param name="textures"></param>
        /// <param name="maxTextures"></param>
        /// <param name="numTextures"></param>
        [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetTexturesQCOM")]
        [CLSCompliant(false)]
        public static unsafe void ExtGetTexturesQCOM([OutAttribute] UInt32* textures, Int32 maxTextures, [OutAttribute] Int32* numTextures) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get2]</summary>
        /// <param name="program"></param>
        [AutoGenerated(Category = "QCOM_extended_get2", Version = "", EntryPoint = "glExtIsProgramBinaryQCOM")]
        [CLSCompliant(false)]
        public static bool ExtIsProgramBinaryQCOM(Int32 program) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get2]</summary>
        /// <param name="program"></param>
        [AutoGenerated(Category = "QCOM_extended_get2", Version = "", EntryPoint = "glExtIsProgramBinaryQCOM")]
        [CLSCompliant(false)]
        public static bool ExtIsProgramBinaryQCOM(UInt32 program) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_extended_get]</summary>
        /// <param name="target"></param>
        /// <param name="pname"></param>
        /// <param name="param"></param>
        [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtTexObjectStateOverrideiQCOM")]
        public static void ExtTexObjectStateOverrideiQCOM(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All pname, Int32 param) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_driver_control]</summary>
        /// <param name="num"></param>
        /// <param name="size"></param>
        /// <param name="driverControls">[length: size]</param>
        [AutoGenerated(Category = "QCOM_driver_control", Version = "", EntryPoint = "glGetDriverControlsQCOM")]
        [CLSCompliant(false)]
        public static void GetDriverControlsQCOM([OutAttribute] Int32[] num, Int32 size, [OutAttribute] Int32[] driverControls) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_driver_control]</summary>
        /// <param name="num"></param>
        /// <param name="size"></param>
        /// <param name="driverControls">[length: size]</param>
        [AutoGenerated(Category = "QCOM_driver_control", Version = "", EntryPoint = "glGetDriverControlsQCOM")]
        [CLSCompliant(false)]
        public static void GetDriverControlsQCOM([OutAttribute] Int32[] num, Int32 size, [OutAttribute] UInt32[] driverControls) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_driver_control]</summary>
        /// <param name="num"></param>
        /// <param name="size"></param>
        /// <param name="driverControls">[length: size]</param>
        [AutoGenerated(Category = "QCOM_driver_control", Version = "", EntryPoint = "glGetDriverControlsQCOM")]
        [CLSCompliant(false)]
        public static void GetDriverControlsQCOM([OutAttribute] out Int32 num, Int32 size, [OutAttribute] out Int32 driverControls) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_driver_control]</summary>
        /// <param name="num"></param>
        /// <param name="size"></param>
        /// <param name="driverControls">[length: size]</param>
        [AutoGenerated(Category = "QCOM_driver_control", Version = "", EntryPoint = "glGetDriverControlsQCOM")]
        [CLSCompliant(false)]
        public static void GetDriverControlsQCOM([OutAttribute] out Int32 num, Int32 size, [OutAttribute] out UInt32 driverControls) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_driver_control]</summary>
        /// <param name="num"></param>
        /// <param name="size"></param>
        /// <param name="driverControls">[length: size]</param>
        [AutoGenerated(Category = "QCOM_driver_control", Version = "", EntryPoint = "glGetDriverControlsQCOM")]
        [CLSCompliant(false)]
        public static unsafe void GetDriverControlsQCOM([OutAttribute] Int32* num, Int32 size, [OutAttribute] Int32* driverControls) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_driver_control]</summary>
        /// <param name="num"></param>
        /// <param name="size"></param>
        /// <param name="driverControls">[length: size]</param>
        [AutoGenerated(Category = "QCOM_driver_control", Version = "", EntryPoint = "glGetDriverControlsQCOM")]
        [CLSCompliant(false)]
        public static unsafe void GetDriverControlsQCOM([OutAttribute] Int32* num, Int32 size, [OutAttribute] UInt32* driverControls) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_driver_control]</summary>
        /// <param name="driverControl"></param>
        /// <param name="bufSize"></param>
        /// <param name="length"></param>
        /// <param name="driverControlString">[length: bufSize]</param>
        [AutoGenerated(Category = "QCOM_driver_control", Version = "", EntryPoint = "glGetDriverControlStringQCOM")]
        [CLSCompliant(false)]
        public static void GetDriverControlStringQCOM(Int32 driverControl, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute] StringBuilder driverControlString) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_driver_control]</summary>
        /// <param name="driverControl"></param>
        /// <param name="bufSize"></param>
        /// <param name="length"></param>
        /// <param name="driverControlString">[length: bufSize]</param>
        [AutoGenerated(Category = "QCOM_driver_control", Version = "", EntryPoint = "glGetDriverControlStringQCOM")]
        [CLSCompliant(false)]
        public static void GetDriverControlStringQCOM(Int32 driverControl, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder driverControlString) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_driver_control]</summary>
        /// <param name="driverControl"></param>
        /// <param name="bufSize"></param>
        /// <param name="length"></param>
        /// <param name="driverControlString">[length: bufSize]</param>
        [AutoGenerated(Category = "QCOM_driver_control", Version = "", EntryPoint = "glGetDriverControlStringQCOM")]
        [CLSCompliant(false)]
        public static unsafe void GetDriverControlStringQCOM(Int32 driverControl, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder driverControlString) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_driver_control]</summary>
        /// <param name="driverControl"></param>
        /// <param name="bufSize"></param>
        /// <param name="length"></param>
        /// <param name="driverControlString">[length: bufSize]</param>
        [AutoGenerated(Category = "QCOM_driver_control", Version = "", EntryPoint = "glGetDriverControlStringQCOM")]
        [CLSCompliant(false)]
        public static void GetDriverControlStringQCOM(UInt32 driverControl, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute] StringBuilder driverControlString) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_driver_control]</summary>
        /// <param name="driverControl"></param>
        /// <param name="bufSize"></param>
        /// <param name="length"></param>
        /// <param name="driverControlString">[length: bufSize]</param>
        [AutoGenerated(Category = "QCOM_driver_control", Version = "", EntryPoint = "glGetDriverControlStringQCOM")]
        [CLSCompliant(false)]
        public static void GetDriverControlStringQCOM(UInt32 driverControl, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder driverControlString) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_driver_control]</summary>
        /// <param name="driverControl"></param>
        /// <param name="bufSize"></param>
        /// <param name="length"></param>
        /// <param name="driverControlString">[length: bufSize]</param>
        [AutoGenerated(Category = "QCOM_driver_control", Version = "", EntryPoint = "glGetDriverControlStringQCOM")]
        [CLSCompliant(false)]
        public static unsafe void GetDriverControlStringQCOM(UInt32 driverControl, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder driverControlString) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_tiled_rendering]</summary>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="preserveMask"></param>
        [AutoGenerated(Category = "QCOM_tiled_rendering", Version = "", EntryPoint = "glStartTilingQCOM")]
        [CLSCompliant(false)]
        public static void StartTilingQCOM(Int32 x, Int32 y, Int32 width, Int32 height, Int32 preserveMask) { throw new NotImplementedException(); }

        /// <summary>[requires: QCOM_tiled_rendering]</summary>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="preserveMask"></param>
        [AutoGenerated(Category = "QCOM_tiled_rendering", Version = "", EntryPoint = "glStartTilingQCOM")]
        [CLSCompliant(false)]
        public static void StartTilingQCOM(UInt32 x, UInt32 y, UInt32 width, UInt32 height, UInt32 preserveMask) { throw new NotImplementedException(); }

        /// <summary>[requires: IMG_multisampled_render_to_texture]</summary>
        /// <param name="target"></param>
        /// <param name="attachment"></param>
        /// <param name="textarget"></param>
        /// <param name="texture"></param>
        /// <param name="level"></param>
        /// <param name="samples"></param>
        [AutoGenerated(Category = "IMG_multisampled_render_to_texture", Version = "", EntryPoint = "glFramebufferTexture2DMultisampleIMG")]
        [CLSCompliant(false)]
        public static void FramebufferTexture2DMultisampleIMG(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All attachment, OpenTK.Graphics.ES30.All textarget, Int32 texture, Int32 level, Int32 samples) { throw new NotImplementedException(); }

        /// <summary>[requires: IMG_multisampled_render_to_texture]</summary>
        /// <param name="target"></param>
        /// <param name="attachment"></param>
        /// <param name="textarget"></param>
        /// <param name="texture"></param>
        /// <param name="level"></param>
        /// <param name="samples"></param>
        [AutoGenerated(Category = "IMG_multisampled_render_to_texture", Version = "", EntryPoint = "glFramebufferTexture2DMultisampleIMG")]
        [CLSCompliant(false)]
        public static void FramebufferTexture2DMultisampleIMG(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All attachment, OpenTK.Graphics.ES30.All textarget, UInt32 texture, Int32 level, Int32 samples) { throw new NotImplementedException(); }

        /// <summary>[requires: IMG_multisampled_render_to_texture]
        /// Establish data storage, format, dimensions and sample count of a renderbuffer object's image
        /// </summary>
        /// <param name="target"> 
        /// Specifies a binding to which the target of the allocation and must be Renderbuffer.
        /// </param>
        /// <param name="samples"> 
        /// Specifies the number of samples to be used for the renderbuffer object's storage.
        /// </param>
        /// <param name="internalformat"> 
        /// Specifies the internal format to use for the renderbuffer object's image.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the renderbuffer, in pixels.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the renderbuffer, in pixels.
        /// </param>
        [AutoGenerated(Category = "IMG_multisampled_render_to_texture", Version = "", EntryPoint = "glRenderbufferStorageMultisampleIMG")]
        public static void RenderbufferStorageMultisampleIMG(OpenTK.Graphics.ES30.All target, Int32 samples, OpenTK.Graphics.ES30.All internalformat, Int32 width, Int32 height) { throw new NotImplementedException(); }

        #endregion

        #region Xamarin.iOS compatibility

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Attach a renderbuffer object to a framebuffer object
        /// </summary>
        /// <param name="target"> 
        /// Specifies the framebuffer target. The symbolic constant must be Framebuffer.
        /// </param>
        /// <param name="attachment"> 
        /// Specifies the attachment point to which renderbuffer should be attached. Must be one of the following symbolic constants: ColorAttachment0, DepthAttachment, or StencilAttachment.
        /// </param>
        /// <param name="renderbuffertarget"> 
        /// Specifies the renderbuffer target. The symbolic constant must be Renderbuffer.
        /// </param>
        /// <param name="renderbuffer"> 
        /// Specifies the renderbuffer object that is to be attached.
        /// </param>
        [Obsolete("Use FramebufferAttachment overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glFramebufferRenderbuffer")]
        [CLSCompliant(false)]
        public static void FramebufferRenderbuffer(OpenTK.Graphics.ES30.FramebufferTarget target, OpenTK.Graphics.ES30.FramebufferSlot attachment, OpenTK.Graphics.ES30.RenderbufferTarget renderbuffertarget, Int32 renderbuffer) { throw new NotImplementedException(); }

        #endregion
    }
}
