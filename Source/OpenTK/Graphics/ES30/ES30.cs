//
// The Open Toolkit Library License
//
// Copyright (c) 2006 - 2013 Stefanos Apostolopoulos for the Open Toolkit Library
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights to 
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do
// so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.
//

namespace OpenTK.Graphics.ES30
{
    using System;
    using System.Text;
    using System.Runtime.InteropServices;
    #pragma warning disable 3019
    #pragma warning disable 1591
    #pragma warning disable 1572
    #pragma warning disable 1573
    #pragma warning disable 626

    partial class GL
    {
        static GL()
        {
            EntryPointNames = new string[]
            {
                "glActiveProgramEXT",
                "glActiveShaderProgramEXT",
                "glActiveTexture",
                "glAlphaFuncQCOM",
                "glAttachShader",
                "glBeginPerfMonitorAMD",
                "glBeginPerfQueryINTEL",
                "glBeginQuery",
                "glBeginQueryEXT",
                "glBeginTransformFeedback",
                "glBindAttribLocation",
                "glBindBuffer",
                "glBindBufferBase",
                "glBindBufferRange",
                "glBindFramebuffer",
                "glBindProgramPipelineEXT",
                "glBindRenderbuffer",
                "glBindSampler",
                "glBindTexture",
                "glBindTransformFeedback",
                "glBindVertexArray",
                "glBindVertexArrayOES",
                "glBlendBarrierNV",
                "glBlendColor",
                "glBlendEquation",
                "glBlendEquationEXT",
                "glBlendEquationSeparate",
                "glBlendFunc",
                "glBlendFuncSeparate",
                "glBlendParameteriNV",
                "glBlitFramebuffer",
                "glBlitFramebufferANGLE",
                "glBlitFramebufferNV",
                "glBufferData",
                "glBufferSubData",
                "glCheckFramebufferStatus",
                "glClear",
                "glClearBufferfi",
                "glClearBufferfv",
                "glClearBufferiv",
                "glClearBufferuiv",
                "glClearColor",
                "glClearDepthf",
                "glClearStencil",
                "glClientWaitSync",
                "glClientWaitSyncAPPLE",
                "glColorMask",
                "glCompileShader",
                "glCompressedTexImage2D",
                "glCompressedTexImage3D",
                "glCompressedTexImage3DOES",
                "glCompressedTexSubImage2D",
                "glCompressedTexSubImage3D",
                "glCompressedTexSubImage3DOES",
                "glCopyBufferSubData",
                "glCopyBufferSubDataNV",
                "glCopyTexImage2D",
                "glCopyTexSubImage2D",
                "glCopyTexSubImage3D",
                "glCopyTexSubImage3DOES",
                "glCopyTextureLevelsAPPLE",
                "glCoverageMaskNV",
                "glCoverageOperationNV",
                "glCreatePerfQueryINTEL",
                "glCreateProgram",
                "glCreateShader",
                "glCreateShaderProgramEXT",
                "glCreateShaderProgramvEXT",
                "glCullFace",
                "glDebugMessageCallback",
                "glDebugMessageCallbackKHR",
                "glDebugMessageControl",
                "glDebugMessageControlKHR",
                "glDebugMessageInsert",
                "glDebugMessageInsertKHR",
                "glDeleteBuffers",
                "glDeleteFencesNV",
                "glDeleteFramebuffers",
                "glDeletePerfMonitorsAMD",
                "glDeletePerfQueryINTEL",
                "glDeleteProgram",
                "glDeleteProgramPipelinesEXT",
                "glDeleteQueries",
                "glDeleteQueriesEXT",
                "glDeleteRenderbuffers",
                "glDeleteSamplers",
                "glDeleteShader",
                "glDeleteSync",
                "glDeleteSyncAPPLE",
                "glDeleteTextures",
                "glDeleteTransformFeedbacks",
                "glDeleteVertexArrays",
                "glDeleteVertexArraysOES",
                "glDepthFunc",
                "glDepthMask",
                "glDepthRangef",
                "glDetachShader",
                "glDisable",
                "glDisableDriverControlQCOM",
                "glDisableVertexAttribArray",
                "glDiscardFramebufferEXT",
                "glDrawArrays",
                "glDrawArraysInstanced",
                "glDrawArraysInstancedANGLE",
                "glDrawArraysInstancedEXT",
                "glDrawArraysInstancedNV",
                "glDrawBuffers",
                "glDrawBuffersEXT",
                "glDrawBuffersIndexedEXT",
                "glDrawBuffersNV",
                "glDrawElements",
                "glDrawElementsInstanced",
                "glDrawElementsInstancedANGLE",
                "glDrawElementsInstancedEXT",
                "glDrawElementsInstancedNV",
                "glDrawRangeElements",
                "glEGLImageTargetRenderbufferStorageOES",
                "glEGLImageTargetTexture2DOES",
                "glEnable",
                "glEnableDriverControlQCOM",
                "glEnableVertexAttribArray",
                "glEndPerfMonitorAMD",
                "glEndPerfQueryINTEL",
                "glEndQuery",
                "glEndQueryEXT",
                "glEndTilingQCOM",
                "glEndTransformFeedback",
                "glExtGetBufferPointervQCOM",
                "glExtGetBuffersQCOM",
                "glExtGetFramebuffersQCOM",
                "glExtGetProgramBinarySourceQCOM",
                "glExtGetProgramsQCOM",
                "glExtGetRenderbuffersQCOM",
                "glExtGetShadersQCOM",
                "glExtGetTexLevelParameterivQCOM",
                "glExtGetTexSubImageQCOM",
                "glExtGetTexturesQCOM",
                "glExtIsProgramBinaryQCOM",
                "glExtTexObjectStateOverrideiQCOM",
                "glFenceSync",
                "glFenceSyncAPPLE",
                "glFinish",
                "glFinishFenceNV",
                "glFlush",
                "glFlushMappedBufferRange",
                "glFlushMappedBufferRangeEXT",
                "glFramebufferRenderbuffer",
                "glFramebufferTexture2D",
                "glFramebufferTexture2DMultisampleEXT",
                "glFramebufferTexture2DMultisampleIMG",
                "glFramebufferTexture3DOES",
                "glFramebufferTextureLayer",
                "glFrontFace",
                "glGenBuffers",
                "glGenerateMipmap",
                "glGenFencesNV",
                "glGenFramebuffers",
                "glGenPerfMonitorsAMD",
                "glGenProgramPipelinesEXT",
                "glGenQueries",
                "glGenQueriesEXT",
                "glGenRenderbuffers",
                "glGenSamplers",
                "glGenTextures",
                "glGenTransformFeedbacks",
                "glGenVertexArrays",
                "glGenVertexArraysOES",
                "glGetActiveAttrib",
                "glGetActiveUniform",
                "glGetActiveUniformBlockiv",
                "glGetActiveUniformBlockName",
                "glGetActiveUniformsiv",
                "glGetAttachedShaders",
                "glGetAttribLocation",
                "glGetBooleanv",
                "glGetBufferParameteri64v",
                "glGetBufferParameteriv",
                "glGetBufferPointerv",
                "glGetBufferPointervOES",
                "glGetDebugMessageLog",
                "glGetDebugMessageLogKHR",
                "glGetDriverControlsQCOM",
                "glGetDriverControlStringQCOM",
                "glGetError",
                "glGetFenceivNV",
                "glGetFirstPerfQueryIdINTEL",
                "glGetFloatv",
                "glGetFragDataLocation",
                "glGetFramebufferAttachmentParameteriv",
                "glGetGraphicsResetStatusEXT",
                "glGetInteger64i_v",
                "glGetInteger64v",
                "glGetInteger64vAPPLE",
                "glGetIntegeri_v",
                "glGetIntegeri_vEXT",
                "glGetIntegerv",
                "glGetInternalformativ",
                "glGetNextPerfQueryIdINTEL",
                "glGetnUniformfvEXT",
                "glGetnUniformivEXT",
                "glGetObjectLabel",
                "glGetObjectLabelEXT",
                "glGetObjectLabelKHR",
                "glGetObjectPtrLabel",
                "glGetObjectPtrLabelKHR",
                "glGetPerfCounterInfoINTEL",
                "glGetPerfMonitorCounterDataAMD",
                "glGetPerfMonitorCounterInfoAMD",
                "glGetPerfMonitorCountersAMD",
                "glGetPerfMonitorCounterStringAMD",
                "glGetPerfMonitorGroupsAMD",
                "glGetPerfMonitorGroupStringAMD",
                "glGetPerfQueryDataINTEL",
                "glGetPerfQueryIdByNameINTEL",
                "glGetPerfQueryInfoINTEL",
                "glGetPointerv",
                "glGetPointervKHR",
                "glGetProgramBinary",
                "glGetProgramBinaryOES",
                "glGetProgramInfoLog",
                "glGetProgramiv",
                "glGetProgramPipelineInfoLogEXT",
                "glGetProgramPipelineivEXT",
                "glGetQueryiv",
                "glGetQueryivEXT",
                "glGetQueryObjecti64vEXT",
                "glGetQueryObjectivEXT",
                "glGetQueryObjectui64vEXT",
                "glGetQueryObjectuiv",
                "glGetQueryObjectuivEXT",
                "glGetRenderbufferParameteriv",
                "glGetSamplerParameterfv",
                "glGetSamplerParameteriv",
                "glGetShaderInfoLog",
                "glGetShaderiv",
                "glGetShaderPrecisionFormat",
                "glGetShaderSource",
                "glGetString",
                "glGetStringi",
                "glGetSynciv",
                "glGetSyncivAPPLE",
                "glGetTexParameterfv",
                "glGetTexParameteriv",
                "glGetTransformFeedbackVarying",
                "glGetTranslatedShaderSourceANGLE",
                "glGetUniformBlockIndex",
                "glGetUniformfv",
                "glGetUniformIndices",
                "glGetUniformiv",
                "glGetUniformLocation",
                "glGetUniformuiv",
                "glGetVertexAttribfv",
                "glGetVertexAttribIiv",
                "glGetVertexAttribIuiv",
                "glGetVertexAttribiv",
                "glGetVertexAttribPointerv",
                "glHint",
                "glInsertEventMarkerEXT",
                "glInvalidateFramebuffer",
                "glInvalidateSubFramebuffer",
                "glIsBuffer",
                "glIsEnabled",
                "glIsFenceNV",
                "glIsFramebuffer",
                "glIsProgram",
                "glIsProgramPipelineEXT",
                "glIsQuery",
                "glIsQueryEXT",
                "glIsRenderbuffer",
                "glIsSampler",
                "glIsShader",
                "glIsSync",
                "glIsSyncAPPLE",
                "glIsTexture",
                "glIsTransformFeedback",
                "glIsVertexArray",
                "glIsVertexArrayOES",
                "glLabelObjectEXT",
                "glLineWidth",
                "glLinkProgram",
                "glMapBufferOES",
                "glMapBufferRange",
                "glMapBufferRangeEXT",
                "glMultiDrawArraysEXT",
                "glMultiDrawElementsEXT",
                "glObjectLabel",
                "glObjectLabelKHR",
                "glObjectPtrLabel",
                "glObjectPtrLabelKHR",
                "glPauseTransformFeedback",
                "glPixelStorei",
                "glPolygonOffset",
                "glPopDebugGroup",
                "glPopDebugGroupKHR",
                "glPopGroupMarkerEXT",
                "glProgramBinary",
                "glProgramBinaryOES",
                "glProgramParameteri",
                "glProgramParameteriEXT",
                "glProgramUniform1fEXT",
                "glProgramUniform1fvEXT",
                "glProgramUniform1iEXT",
                "glProgramUniform1ivEXT",
                "glProgramUniform1uiEXT",
                "glProgramUniform1uivEXT",
                "glProgramUniform2fEXT",
                "glProgramUniform2fvEXT",
                "glProgramUniform2iEXT",
                "glProgramUniform2ivEXT",
                "glProgramUniform2uiEXT",
                "glProgramUniform2uivEXT",
                "glProgramUniform3fEXT",
                "glProgramUniform3fvEXT",
                "glProgramUniform3iEXT",
                "glProgramUniform3ivEXT",
                "glProgramUniform3uiEXT",
                "glProgramUniform3uivEXT",
                "glProgramUniform4fEXT",
                "glProgramUniform4fvEXT",
                "glProgramUniform4iEXT",
                "glProgramUniform4ivEXT",
                "glProgramUniform4uiEXT",
                "glProgramUniform4uivEXT",
                "glProgramUniformMatrix2fvEXT",
                "glProgramUniformMatrix2x3fvEXT",
                "glProgramUniformMatrix2x4fvEXT",
                "glProgramUniformMatrix3fvEXT",
                "glProgramUniformMatrix3x2fvEXT",
                "glProgramUniformMatrix3x4fvEXT",
                "glProgramUniformMatrix4fvEXT",
                "glProgramUniformMatrix4x2fvEXT",
                "glProgramUniformMatrix4x3fvEXT",
                "glPushDebugGroup",
                "glPushDebugGroupKHR",
                "glPushGroupMarkerEXT",
                "glQueryCounterEXT",
                "glReadBuffer",
                "glReadBufferIndexedEXT",
                "glReadBufferNV",
                "glReadnPixelsEXT",
                "glReadPixels",
                "glReleaseShaderCompiler",
                "glRenderbufferStorage",
                "glRenderbufferStorageMultisample",
                "glRenderbufferStorageMultisampleANGLE",
                "glRenderbufferStorageMultisampleAPPLE",
                "glRenderbufferStorageMultisampleEXT",
                "glRenderbufferStorageMultisampleIMG",
                "glRenderbufferStorageMultisampleNV",
                "glResolveMultisampleFramebufferAPPLE",
                "glResumeTransformFeedback",
                "glSampleCoverage",
                "glSamplerParameterf",
                "glSamplerParameterfv",
                "glSamplerParameteri",
                "glSamplerParameteriv",
                "glScissor",
                "glSelectPerfMonitorCountersAMD",
                "glSetFenceNV",
                "glShaderBinary",
                "glShaderSource",
                "glStartTilingQCOM",
                "glStencilFunc",
                "glStencilFuncSeparate",
                "glStencilMask",
                "glStencilMaskSeparate",
                "glStencilOp",
                "glStencilOpSeparate",
                "glTestFenceNV",
                "glTexImage2D",
                "glTexImage3D",
                "glTexImage3DOES",
                "glTexParameterf",
                "glTexParameterfv",
                "glTexParameteri",
                "glTexParameteriv",
                "glTexStorage1DEXT",
                "glTexStorage2D",
                "glTexStorage2DEXT",
                "glTexStorage3D",
                "glTexStorage3DEXT",
                "glTexSubImage2D",
                "glTexSubImage3D",
                "glTexSubImage3DOES",
                "glTextureStorage1DEXT",
                "glTextureStorage2DEXT",
                "glTextureStorage3DEXT",
                "glTransformFeedbackVaryings",
                "glUniform1f",
                "glUniform1fv",
                "glUniform1i",
                "glUniform1iv",
                "glUniform1ui",
                "glUniform1uiv",
                "glUniform2f",
                "glUniform2fv",
                "glUniform2i",
                "glUniform2iv",
                "glUniform2ui",
                "glUniform2uiv",
                "glUniform3f",
                "glUniform3fv",
                "glUniform3i",
                "glUniform3iv",
                "glUniform3ui",
                "glUniform3uiv",
                "glUniform4f",
                "glUniform4fv",
                "glUniform4i",
                "glUniform4iv",
                "glUniform4ui",
                "glUniform4uiv",
                "glUniformBlockBinding",
                "glUniformMatrix2fv",
                "glUniformMatrix2x3fv",
                "glUniformMatrix2x3fvNV",
                "glUniformMatrix2x4fv",
                "glUniformMatrix2x4fvNV",
                "glUniformMatrix3fv",
                "glUniformMatrix3x2fv",
                "glUniformMatrix3x2fvNV",
                "glUniformMatrix3x4fv",
                "glUniformMatrix3x4fvNV",
                "glUniformMatrix4fv",
                "glUniformMatrix4x2fv",
                "glUniformMatrix4x2fvNV",
                "glUniformMatrix4x3fv",
                "glUniformMatrix4x3fvNV",
                "glUnmapBuffer",
                "glUnmapBufferOES",
                "glUseProgram",
                "glUseProgramStagesEXT",
                "glUseShaderProgramEXT",
                "glValidateProgram",
                "glValidateProgramPipelineEXT",
                "glVertexAttrib1f",
                "glVertexAttrib1fv",
                "glVertexAttrib2f",
                "glVertexAttrib2fv",
                "glVertexAttrib3f",
                "glVertexAttrib3fv",
                "glVertexAttrib4f",
                "glVertexAttrib4fv",
                "glVertexAttribDivisor",
                "glVertexAttribDivisorANGLE",
                "glVertexAttribDivisorEXT",
                "glVertexAttribDivisorNV",
                "glVertexAttribI4i",
                "glVertexAttribI4iv",
                "glVertexAttribI4ui",
                "glVertexAttribI4uiv",
                "glVertexAttribIPointer",
                "glVertexAttribPointer",
                "glViewport",
                "glWaitSync",
                "glWaitSyncAPPLE",
            };
            EntryPoints = new IntPtr[EntryPointNames.Length];
        }

        public static partial class Amd
        {
            /// <summary>[requires: AMD_performance_monitor]</summary>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glBeginPerfMonitorAMD")]
            [CLSCompliant(false)]
            public static void BeginPerfMonitor(Int32 monitor) { throw new NotImplementedException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glBeginPerfMonitorAMD")]
            [CLSCompliant(false)]
            public static void BeginPerfMonitor(UInt32 monitor) { throw new NotImplementedException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glDeletePerfMonitorsAMD")]
            [CLSCompliant(false)]
            public static void DeletePerfMonitor(Int32 monitors) { throw new NotImplementedException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glDeletePerfMonitorsAMD")]
            [CLSCompliant(false)]
            public static void DeletePerfMonitor(UInt32 monitors) { throw new NotImplementedException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glDeletePerfMonitorsAMD")]
            [CLSCompliant(false)]
            public static void DeletePerfMonitors(Int32 n, Int32[] monitors) { throw new NotImplementedException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glDeletePerfMonitorsAMD")]
            [CLSCompliant(false)]
            public static void DeletePerfMonitors(Int32 n, ref Int32 monitors) { throw new NotImplementedException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glDeletePerfMonitorsAMD")]
            [CLSCompliant(false)]
            public static unsafe void DeletePerfMonitors(Int32 n, Int32* monitors) { throw new NotImplementedException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glDeletePerfMonitorsAMD")]
            [CLSCompliant(false)]
            public static void DeletePerfMonitors(Int32 n, UInt32[] monitors) { throw new NotImplementedException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glDeletePerfMonitorsAMD")]
            [CLSCompliant(false)]
            public static void DeletePerfMonitors(Int32 n, ref UInt32 monitors) { throw new NotImplementedException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glDeletePerfMonitorsAMD")]
            [CLSCompliant(false)]
            public static unsafe void DeletePerfMonitors(Int32 n, UInt32* monitors) { throw new NotImplementedException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glEndPerfMonitorAMD")]
            [CLSCompliant(false)]
            public static void EndPerfMonitor(Int32 monitor) { throw new NotImplementedException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glEndPerfMonitorAMD")]
            [CLSCompliant(false)]
            public static void EndPerfMonitor(UInt32 monitor) { throw new NotImplementedException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGenPerfMonitorsAMD")]
            [CLSCompliant(false)]
            public static Int32 GenPerfMonitor() { throw new NotImplementedException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGenPerfMonitorsAMD")]
            [CLSCompliant(false)]
            public static void GenPerfMonitors(Int32 n, [OutAttribute] Int32[] monitors) { throw new NotImplementedException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGenPerfMonitorsAMD")]
            [CLSCompliant(false)]
            public static void GenPerfMonitors(Int32 n, [OutAttribute] out Int32 monitors) { throw new NotImplementedException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGenPerfMonitorsAMD")]
            [CLSCompliant(false)]
            public static unsafe void GenPerfMonitors(Int32 n, [OutAttribute] Int32* monitors) { throw new NotImplementedException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGenPerfMonitorsAMD")]
            [CLSCompliant(false)]
            public static void GenPerfMonitors(Int32 n, [OutAttribute] UInt32[] monitors) { throw new NotImplementedException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGenPerfMonitorsAMD")]
            [CLSCompliant(false)]
            public static void GenPerfMonitors(Int32 n, [OutAttribute] out UInt32 monitors) { throw new NotImplementedException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGenPerfMonitorsAMD")]
            [CLSCompliant(false)]
            public static unsafe void GenPerfMonitors(Int32 n, [OutAttribute] UInt32* monitors) { throw new NotImplementedException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGetPerfMonitorCounterDataAMD")]
            [CLSCompliant(false)]
            public static void GetPerfMonitorCounterData(Int32 monitor, OpenTK.Graphics.ES30.All pname, Int32 dataSize, [OutAttribute] Int32[] data, [OutAttribute] out Int32 bytesWritten) { throw new NotImplementedException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGetPerfMonitorCounterDataAMD")]
            [CLSCompliant(false)]
            public static void GetPerfMonitorCounterData(Int32 monitor, OpenTK.Graphics.ES30.All pname, Int32 dataSize, [OutAttribute] out Int32 data, [OutAttribute] out Int32 bytesWritten) { throw new NotImplementedException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGetPerfMonitorCounterDataAMD")]
            [CLSCompliant(false)]
            public static unsafe void GetPerfMonitorCounterData(Int32 monitor, OpenTK.Graphics.ES30.All pname, Int32 dataSize, [OutAttribute] Int32* data, [OutAttribute] Int32* bytesWritten) { throw new NotImplementedException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGetPerfMonitorCounterDataAMD")]
            [CLSCompliant(false)]
            public static void GetPerfMonitorCounterData(UInt32 monitor, OpenTK.Graphics.ES30.All pname, Int32 dataSize, [OutAttribute] UInt32[] data, [OutAttribute] out Int32 bytesWritten) { throw new NotImplementedException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGetPerfMonitorCounterDataAMD")]
            [CLSCompliant(false)]
            public static void GetPerfMonitorCounterData(UInt32 monitor, OpenTK.Graphics.ES30.All pname, Int32 dataSize, [OutAttribute] out UInt32 data, [OutAttribute] out Int32 bytesWritten) { throw new NotImplementedException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGetPerfMonitorCounterDataAMD")]
            [CLSCompliant(false)]
            public static unsafe void GetPerfMonitorCounterData(UInt32 monitor, OpenTK.Graphics.ES30.All pname, Int32 dataSize, [OutAttribute] UInt32* data, [OutAttribute] Int32* bytesWritten) { throw new NotImplementedException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGetPerfMonitorCounterInfoAMD")]
            [CLSCompliant(false)]
            public static void GetPerfMonitorCounterInfo(Int32 group, Int32 counter, OpenTK.Graphics.ES30.All pname, [OutAttribute] IntPtr data) { throw new NotImplementedException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGetPerfMonitorCounterInfoAMD")]
            [CLSCompliant(false)]
            public static void GetPerfMonitorCounterInfo<T3>(Int32 group, Int32 counter, OpenTK.Graphics.ES30.All pname, [InAttribute, OutAttribute] T3[] data)
                where T3 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGetPerfMonitorCounterInfoAMD")]
            [CLSCompliant(false)]
            public static void GetPerfMonitorCounterInfo<T3>(Int32 group, Int32 counter, OpenTK.Graphics.ES30.All pname, [InAttribute, OutAttribute] T3[,] data)
                where T3 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGetPerfMonitorCounterInfoAMD")]
            [CLSCompliant(false)]
            public static void GetPerfMonitorCounterInfo<T3>(Int32 group, Int32 counter, OpenTK.Graphics.ES30.All pname, [InAttribute, OutAttribute] T3[,,] data)
                where T3 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGetPerfMonitorCounterInfoAMD")]
            [CLSCompliant(false)]
            public static void GetPerfMonitorCounterInfo<T3>(Int32 group, Int32 counter, OpenTK.Graphics.ES30.All pname, [InAttribute, OutAttribute] ref T3 data)
                where T3 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGetPerfMonitorCounterInfoAMD")]
            [CLSCompliant(false)]
            public static void GetPerfMonitorCounterInfo(UInt32 group, UInt32 counter, OpenTK.Graphics.ES30.All pname, [OutAttribute] IntPtr data) { throw new NotImplementedException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGetPerfMonitorCounterInfoAMD")]
            [CLSCompliant(false)]
            public static void GetPerfMonitorCounterInfo<T3>(UInt32 group, UInt32 counter, OpenTK.Graphics.ES30.All pname, [InAttribute, OutAttribute] T3[] data)
                where T3 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGetPerfMonitorCounterInfoAMD")]
            [CLSCompliant(false)]
            public static void GetPerfMonitorCounterInfo<T3>(UInt32 group, UInt32 counter, OpenTK.Graphics.ES30.All pname, [InAttribute, OutAttribute] T3[,] data)
                where T3 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGetPerfMonitorCounterInfoAMD")]
            [CLSCompliant(false)]
            public static void GetPerfMonitorCounterInfo<T3>(UInt32 group, UInt32 counter, OpenTK.Graphics.ES30.All pname, [InAttribute, OutAttribute] T3[,,] data)
                where T3 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGetPerfMonitorCounterInfoAMD")]
            [CLSCompliant(false)]
            public static void GetPerfMonitorCounterInfo<T3>(UInt32 group, UInt32 counter, OpenTK.Graphics.ES30.All pname, [InAttribute, OutAttribute] ref T3 data)
                where T3 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGetPerfMonitorCountersAMD")]
            [CLSCompliant(false)]
            public static void GetPerfMonitorCounters(Int32 group, [OutAttribute] out Int32 numCounters, [OutAttribute] out Int32 maxActiveCounters, Int32 counterSize, [OutAttribute] Int32[] counters) { throw new NotImplementedException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGetPerfMonitorCountersAMD")]
            [CLSCompliant(false)]
            public static void GetPerfMonitorCounters(Int32 group, [OutAttribute] out Int32 numCounters, [OutAttribute] out Int32 maxActiveCounters, Int32 counterSize, [OutAttribute] out Int32 counters) { throw new NotImplementedException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGetPerfMonitorCountersAMD")]
            [CLSCompliant(false)]
            public static unsafe void GetPerfMonitorCounters(Int32 group, [OutAttribute] Int32* numCounters, [OutAttribute] Int32* maxActiveCounters, Int32 counterSize, [OutAttribute] Int32* counters) { throw new NotImplementedException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGetPerfMonitorCountersAMD")]
            [CLSCompliant(false)]
            public static void GetPerfMonitorCounters(UInt32 group, [OutAttribute] out Int32 numCounters, [OutAttribute] out Int32 maxActiveCounters, Int32 counterSize, [OutAttribute] UInt32[] counters) { throw new NotImplementedException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGetPerfMonitorCountersAMD")]
            [CLSCompliant(false)]
            public static void GetPerfMonitorCounters(UInt32 group, [OutAttribute] out Int32 numCounters, [OutAttribute] out Int32 maxActiveCounters, Int32 counterSize, [OutAttribute] out UInt32 counters) { throw new NotImplementedException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGetPerfMonitorCountersAMD")]
            [CLSCompliant(false)]
            public static unsafe void GetPerfMonitorCounters(UInt32 group, [OutAttribute] Int32* numCounters, [OutAttribute] Int32* maxActiveCounters, Int32 counterSize, [OutAttribute] UInt32* counters) { throw new NotImplementedException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGetPerfMonitorCounterStringAMD")]
            [CLSCompliant(false)]
            public static void GetPerfMonitorCounterString(Int32 group, Int32 counter, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder counterString) { throw new NotImplementedException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGetPerfMonitorCounterStringAMD")]
            [CLSCompliant(false)]
            public static unsafe void GetPerfMonitorCounterString(Int32 group, Int32 counter, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder counterString) { throw new NotImplementedException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGetPerfMonitorCounterStringAMD")]
            [CLSCompliant(false)]
            public static void GetPerfMonitorCounterString(UInt32 group, UInt32 counter, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder counterString) { throw new NotImplementedException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGetPerfMonitorCounterStringAMD")]
            [CLSCompliant(false)]
            public static unsafe void GetPerfMonitorCounterString(UInt32 group, UInt32 counter, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder counterString) { throw new NotImplementedException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGetPerfMonitorGroupsAMD")]
            [CLSCompliant(false)]
            public static void GetPerfMonitorGroups([OutAttribute] out Int32 numGroups, Int32 groupsSize, [OutAttribute] Int32[] groups) { throw new NotImplementedException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGetPerfMonitorGroupsAMD")]
            [CLSCompliant(false)]
            public static void GetPerfMonitorGroups([OutAttribute] out Int32 numGroups, Int32 groupsSize, [OutAttribute] out Int32 groups) { throw new NotImplementedException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGetPerfMonitorGroupsAMD")]
            [CLSCompliant(false)]
            public static void GetPerfMonitorGroups([OutAttribute] out Int32 numGroups, Int32 groupsSize, [OutAttribute] UInt32[] groups) { throw new NotImplementedException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGetPerfMonitorGroupsAMD")]
            [CLSCompliant(false)]
            public static void GetPerfMonitorGroups([OutAttribute] out Int32 numGroups, Int32 groupsSize, [OutAttribute] out UInt32 groups) { throw new NotImplementedException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGetPerfMonitorGroupsAMD")]
            [CLSCompliant(false)]
            public static unsafe void GetPerfMonitorGroups([OutAttribute] Int32* numGroups, Int32 groupsSize, [OutAttribute] Int32* groups) { throw new NotImplementedException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGetPerfMonitorGroupsAMD")]
            [CLSCompliant(false)]
            public static unsafe void GetPerfMonitorGroups([OutAttribute] Int32* numGroups, Int32 groupsSize, [OutAttribute] UInt32* groups) { throw new NotImplementedException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGetPerfMonitorGroupStringAMD")]
            [CLSCompliant(false)]
            public static void GetPerfMonitorGroupString(Int32 group, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder groupString) { throw new NotImplementedException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGetPerfMonitorGroupStringAMD")]
            [CLSCompliant(false)]
            public static unsafe void GetPerfMonitorGroupString(Int32 group, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder groupString) { throw new NotImplementedException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGetPerfMonitorGroupStringAMD")]
            [CLSCompliant(false)]
            public static void GetPerfMonitorGroupString(UInt32 group, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder groupString) { throw new NotImplementedException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGetPerfMonitorGroupStringAMD")]
            [CLSCompliant(false)]
            public static unsafe void GetPerfMonitorGroupString(UInt32 group, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder groupString) { throw new NotImplementedException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glSelectPerfMonitorCountersAMD")]
            [CLSCompliant(false)]
            public static void SelectPerfMonitorCounters(Int32 monitor, bool enable, Int32 group, Int32 numCounters, [OutAttribute] Int32[] counterList) { throw new NotImplementedException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glSelectPerfMonitorCountersAMD")]
            [CLSCompliant(false)]
            public static void SelectPerfMonitorCounters(Int32 monitor, bool enable, Int32 group, Int32 numCounters, [OutAttribute] out Int32 counterList) { throw new NotImplementedException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glSelectPerfMonitorCountersAMD")]
            [CLSCompliant(false)]
            public static unsafe void SelectPerfMonitorCounters(Int32 monitor, bool enable, Int32 group, Int32 numCounters, [OutAttribute] Int32* counterList) { throw new NotImplementedException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glSelectPerfMonitorCountersAMD")]
            [CLSCompliant(false)]
            public static void SelectPerfMonitorCounters(UInt32 monitor, bool enable, UInt32 group, Int32 numCounters, [OutAttribute] UInt32[] counterList) { throw new NotImplementedException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glSelectPerfMonitorCountersAMD")]
            [CLSCompliant(false)]
            public static void SelectPerfMonitorCounters(UInt32 monitor, bool enable, UInt32 group, Int32 numCounters, [OutAttribute] out UInt32 counterList) { throw new NotImplementedException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glSelectPerfMonitorCountersAMD")]
            [CLSCompliant(false)]
            public static unsafe void SelectPerfMonitorCounters(UInt32 monitor, bool enable, UInt32 group, Int32 numCounters, [OutAttribute] UInt32* counterList) { throw new NotImplementedException(); }

        }

        public static partial class Angle
        {
            /// <summary>[requires: ANGLE_framebuffer_blit]
            /// Copy a block of pixels from the read framebuffer to the draw framebuffer
            /// </summary>
            /// <param name="srcX0">
            /// <para>
            /// Specify the bounds of the source rectangle within the read buffer of the read framebuffer.
            /// </para>
            /// </param>
            /// <param name="dstX0">
            /// <para>
            /// Specify the bounds of the destination rectangle within the write buffer of the write framebuffer.
            /// </para>
            /// </param>
            /// <param name="mask">
            /// <para>
            /// The bitwise OR of the flags indicating which buffers are to be copied. The allowed flags are GL_COLOR_BUFFER_BIT, GL_DEPTH_BUFFER_BIT and GL_STENCIL_BUFFER_BIT.
            /// </para>
            /// </param>
            /// <param name="filter">
            /// <para>
            /// Specifies the interpolation to be applied if the image is stretched. Must be GL_NEAREST or GL_LINEAR.
            /// </para>
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "ANGLE_framebuffer_blit", Version = "", EntryPoint = "glBlitFramebufferANGLE")]
            public static void BlitFramebuffer(Int32 srcX0, Int32 srcY0, Int32 srcX1, Int32 srcY1, Int32 dstX0, Int32 dstY0, Int32 dstX1, Int32 dstY1, OpenTK.Graphics.ES30.All mask, OpenTK.Graphics.ES30.All filter) { throw new NotImplementedException(); }

            /// <summary>[requires: ANGLE_framebuffer_blit]
            /// Copy a block of pixels from the read framebuffer to the draw framebuffer
            /// </summary>
            /// <param name="srcX0">
            /// <para>
            /// Specify the bounds of the source rectangle within the read buffer of the read framebuffer.
            /// </para>
            /// </param>
            /// <param name="dstX0">
            /// <para>
            /// Specify the bounds of the destination rectangle within the write buffer of the write framebuffer.
            /// </para>
            /// </param>
            /// <param name="mask">
            /// <para>
            /// The bitwise OR of the flags indicating which buffers are to be copied. The allowed flags are GL_COLOR_BUFFER_BIT, GL_DEPTH_BUFFER_BIT and GL_STENCIL_BUFFER_BIT.
            /// </para>
            /// </param>
            /// <param name="filter">
            /// <para>
            /// Specifies the interpolation to be applied if the image is stretched. Must be GL_NEAREST or GL_LINEAR.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "ANGLE_framebuffer_blit", Version = "", EntryPoint = "glBlitFramebufferANGLE")]
            public static void BlitFramebuffer(Int32 srcX0, Int32 srcY0, Int32 srcX1, Int32 srcY1, Int32 dstX0, Int32 dstY0, Int32 dstX1, Int32 dstY1, OpenTK.Graphics.ES30.ClearBufferMask mask, OpenTK.Graphics.ES30.BlitFramebufferFilter filter) { throw new NotImplementedException(); }

            /// <summary>[requires: ANGLE_instanced_arrays]
            /// Draw multiple instances of a range of elements
            /// </summary>
            /// <param name="mode">
            /// <para>
            /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES GL_LINES_ADJACENCY, GL_LINE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY, GL_TRIANGLE_STRIP_ADJACENCY and GL_PATCHES are accepted.
            /// </para>
            /// </param>
            /// <param name="first">
            /// <para>
            /// Specifies the starting index in the enabled arrays.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// Specifies the number of indices to be rendered.
            /// </para>
            /// </param>
            /// <param name="primcount">
            /// <para>
            /// Specifies the number of instances of the specified range of indices to be rendered.
            /// </para>
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "ANGLE_instanced_arrays", Version = "", EntryPoint = "glDrawArraysInstancedANGLE")]
            public static void DrawArraysInstanced(OpenTK.Graphics.ES30.All mode, Int32 first, Int32 count, Int32 primcount) { throw new NotImplementedException(); }

            /// <summary>[requires: ANGLE_instanced_arrays]
            /// Draw multiple instances of a range of elements
            /// </summary>
            /// <param name="mode">
            /// <para>
            /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES GL_LINES_ADJACENCY, GL_LINE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY, GL_TRIANGLE_STRIP_ADJACENCY and GL_PATCHES are accepted.
            /// </para>
            /// </param>
            /// <param name="first">
            /// <para>
            /// Specifies the starting index in the enabled arrays.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// Specifies the number of indices to be rendered.
            /// </para>
            /// </param>
            /// <param name="primcount">
            /// <para>
            /// Specifies the number of instances of the specified range of indices to be rendered.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "ANGLE_instanced_arrays", Version = "", EntryPoint = "glDrawArraysInstancedANGLE")]
            public static void DrawArraysInstanced(OpenTK.Graphics.ES30.PrimitiveType mode, Int32 first, Int32 count, Int32 primcount) { throw new NotImplementedException(); }

            /// <summary>[requires: ANGLE_instanced_arrays]
            /// Draw multiple instances of a set of elements
            /// </summary>
            /// <param name="mode">
            /// <para>
            /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// Specifies the number of elements to be rendered.
            /// </para>
            /// </param>
            /// <param name="type">
            /// <para>
            /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
            /// </para>
            /// </param>
            /// <param name="indices">
            /// <para>
            /// Specifies a pointer to the location where the indices are stored.
            /// </para>
            /// </param>
            /// <param name="primcount">
            /// <para>
            /// Specifies the number of instances of the specified range of indices to be rendered.
            /// </para>
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "ANGLE_instanced_arrays", Version = "", EntryPoint = "glDrawElementsInstancedANGLE")]
            public static void DrawElementsInstanced(OpenTK.Graphics.ES30.All mode, Int32 count, OpenTK.Graphics.ES30.All type, IntPtr indices, Int32 primcount) { throw new NotImplementedException(); }

            /// <summary>[requires: ANGLE_instanced_arrays]
            /// Draw multiple instances of a set of elements
            /// </summary>
            /// <param name="mode">
            /// <para>
            /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// Specifies the number of elements to be rendered.
            /// </para>
            /// </param>
            /// <param name="type">
            /// <para>
            /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
            /// </para>
            /// </param>
            /// <param name="indices">
            /// <para>
            /// Specifies a pointer to the location where the indices are stored.
            /// </para>
            /// </param>
            /// <param name="primcount">
            /// <para>
            /// Specifies the number of instances of the specified range of indices to be rendered.
            /// </para>
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "ANGLE_instanced_arrays", Version = "", EntryPoint = "glDrawElementsInstancedANGLE")]
            [CLSCompliant(false)]
            public static void DrawElementsInstanced<T3>(OpenTK.Graphics.ES30.All mode, Int32 count, OpenTK.Graphics.ES30.All type, [InAttribute, OutAttribute] T3[] indices, Int32 primcount)
                where T3 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: ANGLE_instanced_arrays]
            /// Draw multiple instances of a set of elements
            /// </summary>
            /// <param name="mode">
            /// <para>
            /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// Specifies the number of elements to be rendered.
            /// </para>
            /// </param>
            /// <param name="type">
            /// <para>
            /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
            /// </para>
            /// </param>
            /// <param name="indices">
            /// <para>
            /// Specifies a pointer to the location where the indices are stored.
            /// </para>
            /// </param>
            /// <param name="primcount">
            /// <para>
            /// Specifies the number of instances of the specified range of indices to be rendered.
            /// </para>
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "ANGLE_instanced_arrays", Version = "", EntryPoint = "glDrawElementsInstancedANGLE")]
            [CLSCompliant(false)]
            public static void DrawElementsInstanced<T3>(OpenTK.Graphics.ES30.All mode, Int32 count, OpenTK.Graphics.ES30.All type, [InAttribute, OutAttribute] T3[,] indices, Int32 primcount)
                where T3 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: ANGLE_instanced_arrays]
            /// Draw multiple instances of a set of elements
            /// </summary>
            /// <param name="mode">
            /// <para>
            /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// Specifies the number of elements to be rendered.
            /// </para>
            /// </param>
            /// <param name="type">
            /// <para>
            /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
            /// </para>
            /// </param>
            /// <param name="indices">
            /// <para>
            /// Specifies a pointer to the location where the indices are stored.
            /// </para>
            /// </param>
            /// <param name="primcount">
            /// <para>
            /// Specifies the number of instances of the specified range of indices to be rendered.
            /// </para>
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "ANGLE_instanced_arrays", Version = "", EntryPoint = "glDrawElementsInstancedANGLE")]
            [CLSCompliant(false)]
            public static void DrawElementsInstanced<T3>(OpenTK.Graphics.ES30.All mode, Int32 count, OpenTK.Graphics.ES30.All type, [InAttribute, OutAttribute] T3[,,] indices, Int32 primcount)
                where T3 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: ANGLE_instanced_arrays]
            /// Draw multiple instances of a set of elements
            /// </summary>
            /// <param name="mode">
            /// <para>
            /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// Specifies the number of elements to be rendered.
            /// </para>
            /// </param>
            /// <param name="type">
            /// <para>
            /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
            /// </para>
            /// </param>
            /// <param name="indices">
            /// <para>
            /// Specifies a pointer to the location where the indices are stored.
            /// </para>
            /// </param>
            /// <param name="primcount">
            /// <para>
            /// Specifies the number of instances of the specified range of indices to be rendered.
            /// </para>
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "ANGLE_instanced_arrays", Version = "", EntryPoint = "glDrawElementsInstancedANGLE")]
            public static void DrawElementsInstanced<T3>(OpenTK.Graphics.ES30.All mode, Int32 count, OpenTK.Graphics.ES30.All type, [InAttribute, OutAttribute] ref T3 indices, Int32 primcount)
                where T3 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: ANGLE_instanced_arrays]
            /// Draw multiple instances of a set of elements
            /// </summary>
            /// <param name="mode">
            /// <para>
            /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// Specifies the number of elements to be rendered.
            /// </para>
            /// </param>
            /// <param name="type">
            /// <para>
            /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
            /// </para>
            /// </param>
            /// <param name="indices">
            /// <para>
            /// Specifies a pointer to the location where the indices are stored.
            /// </para>
            /// </param>
            /// <param name="primcount">
            /// <para>
            /// Specifies the number of instances of the specified range of indices to be rendered.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "ANGLE_instanced_arrays", Version = "", EntryPoint = "glDrawElementsInstancedANGLE")]
            public static void DrawElementsInstanced(OpenTK.Graphics.ES30.PrimitiveType mode, Int32 count, OpenTK.Graphics.ES30.DrawElementsType type, IntPtr indices, Int32 primcount) { throw new NotImplementedException(); }

            /// <summary>[requires: ANGLE_instanced_arrays]
            /// Draw multiple instances of a set of elements
            /// </summary>
            /// <param name="mode">
            /// <para>
            /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// Specifies the number of elements to be rendered.
            /// </para>
            /// </param>
            /// <param name="type">
            /// <para>
            /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
            /// </para>
            /// </param>
            /// <param name="indices">
            /// <para>
            /// Specifies a pointer to the location where the indices are stored.
            /// </para>
            /// </param>
            /// <param name="primcount">
            /// <para>
            /// Specifies the number of instances of the specified range of indices to be rendered.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "ANGLE_instanced_arrays", Version = "", EntryPoint = "glDrawElementsInstancedANGLE")]
            [CLSCompliant(false)]
            public static void DrawElementsInstanced<T3>(OpenTK.Graphics.ES30.PrimitiveType mode, Int32 count, OpenTK.Graphics.ES30.DrawElementsType type, [InAttribute, OutAttribute] T3[] indices, Int32 primcount)
                where T3 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: ANGLE_instanced_arrays]
            /// Draw multiple instances of a set of elements
            /// </summary>
            /// <param name="mode">
            /// <para>
            /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// Specifies the number of elements to be rendered.
            /// </para>
            /// </param>
            /// <param name="type">
            /// <para>
            /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
            /// </para>
            /// </param>
            /// <param name="indices">
            /// <para>
            /// Specifies a pointer to the location where the indices are stored.
            /// </para>
            /// </param>
            /// <param name="primcount">
            /// <para>
            /// Specifies the number of instances of the specified range of indices to be rendered.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "ANGLE_instanced_arrays", Version = "", EntryPoint = "glDrawElementsInstancedANGLE")]
            [CLSCompliant(false)]
            public static void DrawElementsInstanced<T3>(OpenTK.Graphics.ES30.PrimitiveType mode, Int32 count, OpenTK.Graphics.ES30.DrawElementsType type, [InAttribute, OutAttribute] T3[,] indices, Int32 primcount)
                where T3 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: ANGLE_instanced_arrays]
            /// Draw multiple instances of a set of elements
            /// </summary>
            /// <param name="mode">
            /// <para>
            /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// Specifies the number of elements to be rendered.
            /// </para>
            /// </param>
            /// <param name="type">
            /// <para>
            /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
            /// </para>
            /// </param>
            /// <param name="indices">
            /// <para>
            /// Specifies a pointer to the location where the indices are stored.
            /// </para>
            /// </param>
            /// <param name="primcount">
            /// <para>
            /// Specifies the number of instances of the specified range of indices to be rendered.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "ANGLE_instanced_arrays", Version = "", EntryPoint = "glDrawElementsInstancedANGLE")]
            [CLSCompliant(false)]
            public static void DrawElementsInstanced<T3>(OpenTK.Graphics.ES30.PrimitiveType mode, Int32 count, OpenTK.Graphics.ES30.DrawElementsType type, [InAttribute, OutAttribute] T3[,,] indices, Int32 primcount)
                where T3 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: ANGLE_instanced_arrays]
            /// Draw multiple instances of a set of elements
            /// </summary>
            /// <param name="mode">
            /// <para>
            /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// Specifies the number of elements to be rendered.
            /// </para>
            /// </param>
            /// <param name="type">
            /// <para>
            /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
            /// </para>
            /// </param>
            /// <param name="indices">
            /// <para>
            /// Specifies a pointer to the location where the indices are stored.
            /// </para>
            /// </param>
            /// <param name="primcount">
            /// <para>
            /// Specifies the number of instances of the specified range of indices to be rendered.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "ANGLE_instanced_arrays", Version = "", EntryPoint = "glDrawElementsInstancedANGLE")]
            public static void DrawElementsInstanced<T3>(OpenTK.Graphics.ES30.PrimitiveType mode, Int32 count, OpenTK.Graphics.ES30.DrawElementsType type, [InAttribute, OutAttribute] ref T3 indices, Int32 primcount)
                where T3 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: ANGLE_translated_shader_source]</summary>
            [Obsolete("Use out overload instead")]
            [AutoGenerated(Category = "ANGLE_translated_shader_source", Version = "", EntryPoint = "glGetTranslatedShaderSourceANGLE")]
            [CLSCompliant(false)]
            public static void GetTranslatedShaderSource(Int32 shader, Int32 bufsize, [OutAttribute] Int32[] length, [OutAttribute] StringBuilder source) { throw new NotImplementedException(); }

            /// <summary>[requires: ANGLE_translated_shader_source]</summary>
            [Obsolete("Use out overload instead")]
            [AutoGenerated(Category = "ANGLE_translated_shader_source", Version = "", EntryPoint = "glGetTranslatedShaderSourceANGLE")]
            [CLSCompliant(false)]
            public static void GetTranslatedShaderSource(Int32 shader, Int32 bufsize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder source) { throw new NotImplementedException(); }

            /// <summary>[requires: ANGLE_translated_shader_source]</summary>
            [Obsolete("Use out overload instead")]
            [AutoGenerated(Category = "ANGLE_translated_shader_source", Version = "", EntryPoint = "glGetTranslatedShaderSourceANGLE")]
            [CLSCompliant(false)]
            public static unsafe void GetTranslatedShaderSource(Int32 shader, Int32 bufsize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder source) { throw new NotImplementedException(); }

            /// <summary>[requires: ANGLE_translated_shader_source]</summary>
            [Obsolete("Use out overload instead")]
            [AutoGenerated(Category = "ANGLE_translated_shader_source", Version = "", EntryPoint = "glGetTranslatedShaderSourceANGLE")]
            [CLSCompliant(false)]
            public static void GetTranslatedShaderSource(UInt32 shader, Int32 bufsize, [OutAttribute] Int32[] length, [OutAttribute] StringBuilder source) { throw new NotImplementedException(); }

            /// <summary>[requires: ANGLE_translated_shader_source]</summary>
            [Obsolete("Use out overload instead")]
            [AutoGenerated(Category = "ANGLE_translated_shader_source", Version = "", EntryPoint = "glGetTranslatedShaderSourceANGLE")]
            [CLSCompliant(false)]
            public static void GetTranslatedShaderSource(UInt32 shader, Int32 bufsize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder source) { throw new NotImplementedException(); }

            /// <summary>[requires: ANGLE_translated_shader_source]</summary>
            [Obsolete("Use out overload instead")]
            [AutoGenerated(Category = "ANGLE_translated_shader_source", Version = "", EntryPoint = "glGetTranslatedShaderSourceANGLE")]
            [CLSCompliant(false)]
            public static unsafe void GetTranslatedShaderSource(UInt32 shader, Int32 bufsize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder source) { throw new NotImplementedException(); }

            /// <summary>[requires: ANGLE_framebuffer_multisample]
            /// Establish data storage, format, dimensions and sample count of a renderbuffer object's image
            /// </summary>
            /// <param name="target">
            /// <para>
            /// Specifies a binding to which the target of the allocation and must be GL_RENDERBUFFER.
            /// </para>
            /// </param>
            /// <param name="samples">
            /// <para>
            /// Specifies the number of samples to be used for the renderbuffer object's storage.
            /// </para>
            /// </param>
            /// <param name="internalformat">
            /// <para>
            /// Specifies the internal format to use for the renderbuffer object's image.
            /// </para>
            /// </param>
            /// <param name="width">
            /// <para>
            /// Specifies the width of the renderbuffer, in pixels.
            /// </para>
            /// </param>
            /// <param name="height">
            /// <para>
            /// Specifies the height of the renderbuffer, in pixels.
            /// </para>
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "ANGLE_framebuffer_multisample", Version = "", EntryPoint = "glRenderbufferStorageMultisampleANGLE")]
            public static void RenderbufferStorageMultisample(OpenTK.Graphics.ES30.All target, Int32 samples, OpenTK.Graphics.ES30.All internalformat, Int32 width, Int32 height) { throw new NotImplementedException(); }

            /// <summary>[requires: ANGLE_framebuffer_multisample]
            /// Establish data storage, format, dimensions and sample count of a renderbuffer object's image
            /// </summary>
            /// <param name="target">
            /// <para>
            /// Specifies a binding to which the target of the allocation and must be GL_RENDERBUFFER.
            /// </para>
            /// </param>
            /// <param name="samples">
            /// <para>
            /// Specifies the number of samples to be used for the renderbuffer object's storage.
            /// </para>
            /// </param>
            /// <param name="internalformat">
            /// <para>
            /// Specifies the internal format to use for the renderbuffer object's image.
            /// </para>
            /// </param>
            /// <param name="width">
            /// <para>
            /// Specifies the width of the renderbuffer, in pixels.
            /// </para>
            /// </param>
            /// <param name="height">
            /// <para>
            /// Specifies the height of the renderbuffer, in pixels.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "ANGLE_framebuffer_multisample", Version = "", EntryPoint = "glRenderbufferStorageMultisampleANGLE")]
            public static void RenderbufferStorageMultisample(OpenTK.Graphics.ES30.RenderbufferTarget target, Int32 samples, OpenTK.Graphics.ES30.RenderbufferInternalFormat internalformat, Int32 width, Int32 height) { throw new NotImplementedException(); }

            /// <summary>[requires: ANGLE_instanced_arrays]
            /// Modify the rate at which generic vertex attributes advance during instanced rendering
            /// </summary>
            /// <param name="index">
            /// <para>
            /// Specify the index of the generic vertex attribute.
            /// </para>
            /// </param>
            /// <param name="divisor">
            /// <para>
            /// Specify the number of instances that will pass between updates of the generic attribute at slot index.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "ANGLE_instanced_arrays", Version = "", EntryPoint = "glVertexAttribDivisorANGLE")]
            [CLSCompliant(false)]
            public static void VertexAttribDivisor(Int32 index, Int32 divisor) { throw new NotImplementedException(); }

            /// <summary>[requires: ANGLE_instanced_arrays]
            /// Modify the rate at which generic vertex attributes advance during instanced rendering
            /// </summary>
            /// <param name="index">
            /// <para>
            /// Specify the index of the generic vertex attribute.
            /// </para>
            /// </param>
            /// <param name="divisor">
            /// <para>
            /// Specify the number of instances that will pass between updates of the generic attribute at slot index.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "ANGLE_instanced_arrays", Version = "", EntryPoint = "glVertexAttribDivisorANGLE")]
            [CLSCompliant(false)]
            public static void VertexAttribDivisor(UInt32 index, UInt32 divisor) { throw new NotImplementedException(); }

        }

        public static partial class Apple
        {
            /// <summary>[requires: APPLE_sync]
            /// Block and wait for a sync object to become signaled
            /// </summary>
            /// <param name="sync">
            /// <para>
            /// The sync object whose status to wait on.
            /// </para>
            /// </param>
            /// <param name="flags">
            /// <para>
            /// A bitfield controlling the command flushing behavior. flags may be GL_SYNC_FLUSH_COMMANDS_BIT.
            /// </para>
            /// </param>
            /// <param name="timeout">
            /// <para>
            /// The timeout, specified in nanoseconds, for which the implementation should wait for sync to become signaled.
            /// </para>
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "APPLE_sync", Version = "", EntryPoint = "glClientWaitSyncAPPLE")]
            [CLSCompliant(false)]
            public static OpenTK.Graphics.ES30.WaitSyncStatus ClientWaitSync(IntPtr sync, OpenTK.Graphics.ES30.All flags, Int64 timeout) { throw new NotImplementedException(); }

            /// <summary>[requires: APPLE_sync]
            /// Block and wait for a sync object to become signaled
            /// </summary>
            /// <param name="sync">
            /// <para>
            /// The sync object whose status to wait on.
            /// </para>
            /// </param>
            /// <param name="flags">
            /// <para>
            /// A bitfield controlling the command flushing behavior. flags may be GL_SYNC_FLUSH_COMMANDS_BIT.
            /// </para>
            /// </param>
            /// <param name="timeout">
            /// <para>
            /// The timeout, specified in nanoseconds, for which the implementation should wait for sync to become signaled.
            /// </para>
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "APPLE_sync", Version = "", EntryPoint = "glClientWaitSyncAPPLE")]
            [CLSCompliant(false)]
            public static OpenTK.Graphics.ES30.WaitSyncStatus ClientWaitSync(IntPtr sync, OpenTK.Graphics.ES30.All flags, UInt64 timeout) { throw new NotImplementedException(); }

            /// <summary>[requires: APPLE_sync]
            /// Block and wait for a sync object to become signaled
            /// </summary>
            /// <param name="sync">
            /// <para>
            /// The sync object whose status to wait on.
            /// </para>
            /// </param>
            /// <param name="flags">
            /// <para>
            /// A bitfield controlling the command flushing behavior. flags may be GL_SYNC_FLUSH_COMMANDS_BIT.
            /// </para>
            /// </param>
            /// <param name="timeout">
            /// <para>
            /// The timeout, specified in nanoseconds, for which the implementation should wait for sync to become signaled.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "APPLE_sync", Version = "", EntryPoint = "glClientWaitSyncAPPLE")]
            [CLSCompliant(false)]
            public static OpenTK.Graphics.ES30.WaitSyncStatus ClientWaitSync(IntPtr sync, OpenTK.Graphics.ES30.ClientWaitSyncFlags flags, Int64 timeout) { throw new NotImplementedException(); }

            /// <summary>[requires: APPLE_sync]
            /// Block and wait for a sync object to become signaled
            /// </summary>
            /// <param name="sync">
            /// <para>
            /// The sync object whose status to wait on.
            /// </para>
            /// </param>
            /// <param name="flags">
            /// <para>
            /// A bitfield controlling the command flushing behavior. flags may be GL_SYNC_FLUSH_COMMANDS_BIT.
            /// </para>
            /// </param>
            /// <param name="timeout">
            /// <para>
            /// The timeout, specified in nanoseconds, for which the implementation should wait for sync to become signaled.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "APPLE_sync", Version = "", EntryPoint = "glClientWaitSyncAPPLE")]
            [CLSCompliant(false)]
            public static OpenTK.Graphics.ES30.WaitSyncStatus ClientWaitSync(IntPtr sync, OpenTK.Graphics.ES30.ClientWaitSyncFlags flags, UInt64 timeout) { throw new NotImplementedException(); }

            /// <summary>[requires: APPLE_copy_texture_levels]</summary>
            [AutoGenerated(Category = "APPLE_copy_texture_levels", Version = "", EntryPoint = "glCopyTextureLevelsAPPLE")]
            [CLSCompliant(false)]
            public static void CopyTextureLevel(Int32 destinationTexture, Int32 sourceTexture, Int32 sourceBaseLevel, Int32 sourceLevelCount) { throw new NotImplementedException(); }

            /// <summary>[requires: APPLE_copy_texture_levels]</summary>
            [AutoGenerated(Category = "APPLE_copy_texture_levels", Version = "", EntryPoint = "glCopyTextureLevelsAPPLE")]
            [CLSCompliant(false)]
            public static void CopyTextureLevel(UInt32 destinationTexture, UInt32 sourceTexture, Int32 sourceBaseLevel, Int32 sourceLevelCount) { throw new NotImplementedException(); }

            /// <summary>[requires: APPLE_sync]
            /// Delete a sync object
            /// </summary>
            /// <param name="sync">
            /// <para>
            /// The sync object to be deleted.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "APPLE_sync", Version = "", EntryPoint = "glDeleteSyncAPPLE")]
            public static void DeleteSync(IntPtr sync) { throw new NotImplementedException(); }

            /// <summary>[requires: APPLE_sync]
            /// Create a new sync object and insert it into the GL command stream
            /// </summary>
            /// <param name="condition">
            /// <para>
            /// Specifies the condition that must be met to set the sync object's state to signaled. condition must be GL_SYNC_GPU_COMMANDS_COMPLETE.
            /// </para>
            /// </param>
            /// <param name="flags">
            /// <para>
            /// Specifies a bitwise combination of flags controlling the behavior of the sync object. No flags are presently defined for this operation and flags must be zero. flags is a placeholder for anticipated future extensions of fence sync object capabilities.
            /// </para>
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "APPLE_sync", Version = "", EntryPoint = "glFenceSyncAPPLE")]
            public static IntPtr FenceSync(OpenTK.Graphics.ES30.All condition, OpenTK.Graphics.ES30.All flags) { throw new NotImplementedException(); }

            /// <summary>[requires: APPLE_sync]
            /// Create a new sync object and insert it into the GL command stream
            /// </summary>
            /// <param name="condition">
            /// <para>
            /// Specifies the condition that must be met to set the sync object's state to signaled. condition must be GL_SYNC_GPU_COMMANDS_COMPLETE.
            /// </para>
            /// </param>
            /// <param name="flags">
            /// <para>
            /// Specifies a bitwise combination of flags controlling the behavior of the sync object. No flags are presently defined for this operation and flags must be zero. flags is a placeholder for anticipated future extensions of fence sync object capabilities.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "APPLE_sync", Version = "", EntryPoint = "glFenceSyncAPPLE")]
            public static IntPtr FenceSync(OpenTK.Graphics.ES30.SyncCondition condition, OpenTK.Graphics.ES30.WaitSyncFlags flags) { throw new NotImplementedException(); }

            /// <summary>[requires: APPLE_sync]</summary>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "APPLE_sync", Version = "", EntryPoint = "glGetInteger64vAPPLE")]
            [CLSCompliant(false)]
            public static Int64 GetInteger64(OpenTK.Graphics.ES30.All pname) { throw new NotImplementedException(); }

            /// <summary>[requires: APPLE_sync]</summary>
            [AutoGenerated(Category = "APPLE_sync", Version = "", EntryPoint = "glGetInteger64vAPPLE")]
            [CLSCompliant(false)]
            public static Int64 GetInteger64(OpenTK.Graphics.ES30.GetPName pname) { throw new NotImplementedException(); }

            /// <summary>[requires: APPLE_sync]</summary>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "APPLE_sync", Version = "", EntryPoint = "glGetInteger64vAPPLE")]
            [CLSCompliant(false)]
            public static void GetInteger64(OpenTK.Graphics.ES30.All pname, [OutAttribute] Int64[] @params) { throw new NotImplementedException(); }

            /// <summary>[requires: APPLE_sync]</summary>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "APPLE_sync", Version = "", EntryPoint = "glGetInteger64vAPPLE")]
            [CLSCompliant(false)]
            public static void GetInteger64(OpenTK.Graphics.ES30.All pname, [OutAttribute] out Int64 @params) { throw new NotImplementedException(); }

            /// <summary>[requires: APPLE_sync]</summary>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "APPLE_sync", Version = "", EntryPoint = "glGetInteger64vAPPLE")]
            [CLSCompliant(false)]
            public static unsafe void GetInteger64(OpenTK.Graphics.ES30.All pname, [OutAttribute] Int64* @params) { throw new NotImplementedException(); }

            /// <summary>[requires: APPLE_sync]</summary>
            [AutoGenerated(Category = "APPLE_sync", Version = "", EntryPoint = "glGetInteger64vAPPLE")]
            [CLSCompliant(false)]
            public static void GetInteger64(OpenTK.Graphics.ES30.GetPName pname, [OutAttribute] Int64[] @params) { throw new NotImplementedException(); }

            /// <summary>[requires: APPLE_sync]</summary>
            [AutoGenerated(Category = "APPLE_sync", Version = "", EntryPoint = "glGetInteger64vAPPLE")]
            [CLSCompliant(false)]
            public static void GetInteger64(OpenTK.Graphics.ES30.GetPName pname, [OutAttribute] out Int64 @params) { throw new NotImplementedException(); }

            /// <summary>[requires: APPLE_sync]</summary>
            [AutoGenerated(Category = "APPLE_sync", Version = "", EntryPoint = "glGetInteger64vAPPLE")]
            [CLSCompliant(false)]
            public static unsafe void GetInteger64(OpenTK.Graphics.ES30.GetPName pname, [OutAttribute] Int64* @params) { throw new NotImplementedException(); }

            /// <summary>[requires: APPLE_sync]
            /// Query the properties of a sync object
            /// </summary>
            /// <param name="sync">
            /// <para>
            /// Specifies the sync object whose properties to query.
            /// </para>
            /// </param>
            /// <param name="pname">
            /// <para>
            /// Specifies the parameter whose value to retrieve from the sync object specified in sync.
            /// </para>
            /// </param>
            /// <param name="bufSize">
            /// <para>
            /// Specifies the size of the buffer whose address is given in values.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// Specifies the address of an variable to receive the number of integers placed in values.
            /// </para>
            /// </param>
            /// <param name="values">
            /// <para>
            /// Specifies the address of an array to receive the values of the queried parameter.
            /// </para>
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "APPLE_sync", Version = "", EntryPoint = "glGetSyncivAPPLE")]
            [CLSCompliant(false)]
            public static void GetSync(IntPtr sync, OpenTK.Graphics.ES30.All pname, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute] Int32[] values) { throw new NotImplementedException(); }

            /// <summary>[requires: APPLE_sync]
            /// Query the properties of a sync object
            /// </summary>
            /// <param name="sync">
            /// <para>
            /// Specifies the sync object whose properties to query.
            /// </para>
            /// </param>
            /// <param name="pname">
            /// <para>
            /// Specifies the parameter whose value to retrieve from the sync object specified in sync.
            /// </para>
            /// </param>
            /// <param name="bufSize">
            /// <para>
            /// Specifies the size of the buffer whose address is given in values.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// Specifies the address of an variable to receive the number of integers placed in values.
            /// </para>
            /// </param>
            /// <param name="values">
            /// <para>
            /// Specifies the address of an array to receive the values of the queried parameter.
            /// </para>
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "APPLE_sync", Version = "", EntryPoint = "glGetSyncivAPPLE")]
            [CLSCompliant(false)]
            public static void GetSync(IntPtr sync, OpenTK.Graphics.ES30.All pname, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] out Int32 values) { throw new NotImplementedException(); }

            /// <summary>[requires: APPLE_sync]
            /// Query the properties of a sync object
            /// </summary>
            /// <param name="sync">
            /// <para>
            /// Specifies the sync object whose properties to query.
            /// </para>
            /// </param>
            /// <param name="pname">
            /// <para>
            /// Specifies the parameter whose value to retrieve from the sync object specified in sync.
            /// </para>
            /// </param>
            /// <param name="bufSize">
            /// <para>
            /// Specifies the size of the buffer whose address is given in values.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// Specifies the address of an variable to receive the number of integers placed in values.
            /// </para>
            /// </param>
            /// <param name="values">
            /// <para>
            /// Specifies the address of an array to receive the values of the queried parameter.
            /// </para>
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "APPLE_sync", Version = "", EntryPoint = "glGetSyncivAPPLE")]
            [CLSCompliant(false)]
            public static unsafe void GetSync(IntPtr sync, OpenTK.Graphics.ES30.All pname, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] Int32* values) { throw new NotImplementedException(); }

            /// <summary>[requires: APPLE_sync]
            /// Query the properties of a sync object
            /// </summary>
            /// <param name="sync">
            /// <para>
            /// Specifies the sync object whose properties to query.
            /// </para>
            /// </param>
            /// <param name="pname">
            /// <para>
            /// Specifies the parameter whose value to retrieve from the sync object specified in sync.
            /// </para>
            /// </param>
            /// <param name="bufSize">
            /// <para>
            /// Specifies the size of the buffer whose address is given in values.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// Specifies the address of an variable to receive the number of integers placed in values.
            /// </para>
            /// </param>
            /// <param name="values">
            /// <para>
            /// Specifies the address of an array to receive the values of the queried parameter.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "APPLE_sync", Version = "", EntryPoint = "glGetSyncivAPPLE")]
            [CLSCompliant(false)]
            public static void GetSync(IntPtr sync, OpenTK.Graphics.ES30.SyncParameterName pname, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute] Int32[] values) { throw new NotImplementedException(); }

            /// <summary>[requires: APPLE_sync]
            /// Query the properties of a sync object
            /// </summary>
            /// <param name="sync">
            /// <para>
            /// Specifies the sync object whose properties to query.
            /// </para>
            /// </param>
            /// <param name="pname">
            /// <para>
            /// Specifies the parameter whose value to retrieve from the sync object specified in sync.
            /// </para>
            /// </param>
            /// <param name="bufSize">
            /// <para>
            /// Specifies the size of the buffer whose address is given in values.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// Specifies the address of an variable to receive the number of integers placed in values.
            /// </para>
            /// </param>
            /// <param name="values">
            /// <para>
            /// Specifies the address of an array to receive the values of the queried parameter.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "APPLE_sync", Version = "", EntryPoint = "glGetSyncivAPPLE")]
            [CLSCompliant(false)]
            public static void GetSync(IntPtr sync, OpenTK.Graphics.ES30.SyncParameterName pname, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] out Int32 values) { throw new NotImplementedException(); }

            /// <summary>[requires: APPLE_sync]
            /// Query the properties of a sync object
            /// </summary>
            /// <param name="sync">
            /// <para>
            /// Specifies the sync object whose properties to query.
            /// </para>
            /// </param>
            /// <param name="pname">
            /// <para>
            /// Specifies the parameter whose value to retrieve from the sync object specified in sync.
            /// </para>
            /// </param>
            /// <param name="bufSize">
            /// <para>
            /// Specifies the size of the buffer whose address is given in values.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// Specifies the address of an variable to receive the number of integers placed in values.
            /// </para>
            /// </param>
            /// <param name="values">
            /// <para>
            /// Specifies the address of an array to receive the values of the queried parameter.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "APPLE_sync", Version = "", EntryPoint = "glGetSyncivAPPLE")]
            [CLSCompliant(false)]
            public static unsafe void GetSync(IntPtr sync, OpenTK.Graphics.ES30.SyncParameterName pname, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] Int32* values) { throw new NotImplementedException(); }

            /// <summary>[requires: APPLE_sync]
            /// Determine if a name corresponds to a sync object
            /// </summary>
            /// <param name="sync">
            /// <para>
            /// Specifies a value that may be the name of a sync object.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "APPLE_sync", Version = "", EntryPoint = "glIsSyncAPPLE")]
            public static bool IsSync(IntPtr sync) { throw new NotImplementedException(); }

            /// <summary>[requires: APPLE_framebuffer_multisample]
            /// Establish data storage, format, dimensions and sample count of a renderbuffer object's image
            /// </summary>
            /// <param name="target">
            /// <para>
            /// Specifies a binding to which the target of the allocation and must be GL_RENDERBUFFER.
            /// </para>
            /// </param>
            /// <param name="samples">
            /// <para>
            /// Specifies the number of samples to be used for the renderbuffer object's storage.
            /// </para>
            /// </param>
            /// <param name="internalformat">
            /// <para>
            /// Specifies the internal format to use for the renderbuffer object's image.
            /// </para>
            /// </param>
            /// <param name="width">
            /// <para>
            /// Specifies the width of the renderbuffer, in pixels.
            /// </para>
            /// </param>
            /// <param name="height">
            /// <para>
            /// Specifies the height of the renderbuffer, in pixels.
            /// </para>
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "APPLE_framebuffer_multisample", Version = "", EntryPoint = "glRenderbufferStorageMultisampleAPPLE")]
            public static void RenderbufferStorageMultisample(OpenTK.Graphics.ES30.All target, Int32 samples, OpenTK.Graphics.ES30.All internalformat, Int32 width, Int32 height) { throw new NotImplementedException(); }

            /// <summary>[requires: APPLE_framebuffer_multisample]
            /// Establish data storage, format, dimensions and sample count of a renderbuffer object's image
            /// </summary>
            /// <param name="target">
            /// <para>
            /// Specifies a binding to which the target of the allocation and must be GL_RENDERBUFFER.
            /// </para>
            /// </param>
            /// <param name="samples">
            /// <para>
            /// Specifies the number of samples to be used for the renderbuffer object's storage.
            /// </para>
            /// </param>
            /// <param name="internalformat">
            /// <para>
            /// Specifies the internal format to use for the renderbuffer object's image.
            /// </para>
            /// </param>
            /// <param name="width">
            /// <para>
            /// Specifies the width of the renderbuffer, in pixels.
            /// </para>
            /// </param>
            /// <param name="height">
            /// <para>
            /// Specifies the height of the renderbuffer, in pixels.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "APPLE_framebuffer_multisample", Version = "", EntryPoint = "glRenderbufferStorageMultisampleAPPLE")]
            public static void RenderbufferStorageMultisample(OpenTK.Graphics.ES30.RenderbufferTarget target, Int32 samples, OpenTK.Graphics.ES30.RenderbufferInternalFormat internalformat, Int32 width, Int32 height) { throw new NotImplementedException(); }

            /// <summary>[requires: APPLE_framebuffer_multisample]</summary>
            [AutoGenerated(Category = "APPLE_framebuffer_multisample", Version = "", EntryPoint = "glResolveMultisampleFramebufferAPPLE")]
            public static void ResolveMultisampleFramebuffer() { throw new NotImplementedException(); }

            /// <summary>[requires: APPLE_sync]
            /// Instruct the GL server to block until the specified sync object becomes signaled
            /// </summary>
            /// <param name="sync">
            /// <para>
            /// Specifies the sync object whose status to wait on.
            /// </para>
            /// </param>
            /// <param name="flags">
            /// <para>
            /// A bitfield controlling the command flushing behavior. flags may be zero.
            /// </para>
            /// </param>
            /// <param name="timeout">
            /// <para>
            /// Specifies the timeout that the server should wait before continuing. timeout must be GL_TIMEOUT_IGNORED.
            /// </para>
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "APPLE_sync", Version = "", EntryPoint = "glWaitSyncAPPLE")]
            [CLSCompliant(false)]
            public static void WaitSync(IntPtr sync, OpenTK.Graphics.ES30.All flags, Int64 timeout) { throw new NotImplementedException(); }

            /// <summary>[requires: APPLE_sync]
            /// Instruct the GL server to block until the specified sync object becomes signaled
            /// </summary>
            /// <param name="sync">
            /// <para>
            /// Specifies the sync object whose status to wait on.
            /// </para>
            /// </param>
            /// <param name="flags">
            /// <para>
            /// A bitfield controlling the command flushing behavior. flags may be zero.
            /// </para>
            /// </param>
            /// <param name="timeout">
            /// <para>
            /// Specifies the timeout that the server should wait before continuing. timeout must be GL_TIMEOUT_IGNORED.
            /// </para>
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "APPLE_sync", Version = "", EntryPoint = "glWaitSyncAPPLE")]
            [CLSCompliant(false)]
            public static void WaitSync(IntPtr sync, OpenTK.Graphics.ES30.All flags, UInt64 timeout) { throw new NotImplementedException(); }

            /// <summary>[requires: APPLE_sync]
            /// Instruct the GL server to block until the specified sync object becomes signaled
            /// </summary>
            /// <param name="sync">
            /// <para>
            /// Specifies the sync object whose status to wait on.
            /// </para>
            /// </param>
            /// <param name="flags">
            /// <para>
            /// A bitfield controlling the command flushing behavior. flags may be zero.
            /// </para>
            /// </param>
            /// <param name="timeout">
            /// <para>
            /// Specifies the timeout that the server should wait before continuing. timeout must be GL_TIMEOUT_IGNORED.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "APPLE_sync", Version = "", EntryPoint = "glWaitSyncAPPLE")]
            [CLSCompliant(false)]
            public static void WaitSync(IntPtr sync, OpenTK.Graphics.ES30.WaitSyncFlags flags, Int64 timeout) { throw new NotImplementedException(); }

            /// <summary>[requires: APPLE_sync]
            /// Instruct the GL server to block until the specified sync object becomes signaled
            /// </summary>
            /// <param name="sync">
            /// <para>
            /// Specifies the sync object whose status to wait on.
            /// </para>
            /// </param>
            /// <param name="flags">
            /// <para>
            /// A bitfield controlling the command flushing behavior. flags may be zero.
            /// </para>
            /// </param>
            /// <param name="timeout">
            /// <para>
            /// Specifies the timeout that the server should wait before continuing. timeout must be GL_TIMEOUT_IGNORED.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "APPLE_sync", Version = "", EntryPoint = "glWaitSyncAPPLE")]
            [CLSCompliant(false)]
            public static void WaitSync(IntPtr sync, OpenTK.Graphics.ES30.WaitSyncFlags flags, UInt64 timeout) { throw new NotImplementedException(); }

        }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Select active texture unit
        /// </summary>
        /// <param name="texture">
        /// <para>
        /// Specifies which texture unit to make active. The number of texture units is implementation dependent, but must be at least 80. texture must be one of GL_TEXTUREi, where i ranges from zero to the value of GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS minus one. The initial value is GL_TEXTURE0.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glActiveTexture")]
        public static void ActiveTexture(OpenTK.Graphics.ES30.All texture) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Select active texture unit
        /// </summary>
        /// <param name="texture">
        /// <para>
        /// Specifies which texture unit to make active. The number of texture units is implementation dependent, but must be at least 80. texture must be one of GL_TEXTUREi, where i ranges from zero to the value of GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS minus one. The initial value is GL_TEXTURE0.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glActiveTexture")]
        public static void ActiveTexture(OpenTK.Graphics.ES30.TextureUnit texture) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Attaches a shader object to a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to which a shader object will be attached.
        /// </para>
        /// </param>
        /// <param name="shader">
        /// <para>
        /// Specifies the shader object that is to be attached.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glAttachShader")]
        [CLSCompliant(false)]
        public static void AttachShader(Int32 program, Int32 shader) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Attaches a shader object to a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to which a shader object will be attached.
        /// </para>
        /// </param>
        /// <param name="shader">
        /// <para>
        /// Specifies the shader object that is to be attached.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glAttachShader")]
        [CLSCompliant(false)]
        public static void AttachShader(UInt32 program, UInt32 shader) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Delimit the boundaries of a query object
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target type of query object established between glBeginQuery and the subsequent glEndQuery. The symbolic constant must be one of GL_SAMPLES_PASSED, GL_ANY_SAMPLES_PASSED, GL_ANY_SAMPLES_PASSED_CONSERVATIVE, GL_PRIMITIVES_GENERATED, GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN, or GL_TIME_ELAPSED.
        /// </para>
        /// </param>
        /// <param name="id">
        /// <para>
        /// Specifies the name of a query object.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glBeginQuery")]
        [CLSCompliant(false)]
        public static void BeginQuery(OpenTK.Graphics.ES30.All target, Int32 id) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Delimit the boundaries of a query object
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target type of query object established between glBeginQuery and the subsequent glEndQuery. The symbolic constant must be one of GL_SAMPLES_PASSED, GL_ANY_SAMPLES_PASSED, GL_ANY_SAMPLES_PASSED_CONSERVATIVE, GL_PRIMITIVES_GENERATED, GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN, or GL_TIME_ELAPSED.
        /// </para>
        /// </param>
        /// <param name="id">
        /// <para>
        /// Specifies the name of a query object.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glBeginQuery")]
        [CLSCompliant(false)]
        public static void BeginQuery(OpenTK.Graphics.ES30.All target, UInt32 id) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Delimit the boundaries of a query object
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target type of query object established between glBeginQuery and the subsequent glEndQuery. The symbolic constant must be one of GL_SAMPLES_PASSED, GL_ANY_SAMPLES_PASSED, GL_ANY_SAMPLES_PASSED_CONSERVATIVE, GL_PRIMITIVES_GENERATED, GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN, or GL_TIME_ELAPSED.
        /// </para>
        /// </param>
        /// <param name="id">
        /// <para>
        /// Specifies the name of a query object.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glBeginQuery")]
        [CLSCompliant(false)]
        public static void BeginQuery(OpenTK.Graphics.ES30.QueryTarget target, Int32 id) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Delimit the boundaries of a query object
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target type of query object established between glBeginQuery and the subsequent glEndQuery. The symbolic constant must be one of GL_SAMPLES_PASSED, GL_ANY_SAMPLES_PASSED, GL_ANY_SAMPLES_PASSED_CONSERVATIVE, GL_PRIMITIVES_GENERATED, GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN, or GL_TIME_ELAPSED.
        /// </para>
        /// </param>
        /// <param name="id">
        /// <para>
        /// Specifies the name of a query object.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glBeginQuery")]
        [CLSCompliant(false)]
        public static void BeginQuery(OpenTK.Graphics.ES30.QueryTarget target, UInt32 id) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Start transform feedback operation
        /// </summary>
        /// <param name="primitiveMode">
        /// <para>
        /// Specify the output type of the primitives that will be recorded into the buffer objects that are bound for transform feedback.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glBeginTransformFeedback")]
        public static void BeginTransformFeedback(OpenTK.Graphics.ES30.All primitiveMode) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Start transform feedback operation
        /// </summary>
        /// <param name="primitiveMode">
        /// <para>
        /// Specify the output type of the primitives that will be recorded into the buffer objects that are bound for transform feedback.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glBeginTransformFeedback")]
        public static void BeginTransformFeedback(OpenTK.Graphics.ES30.TransformFeedbackPrimitiveType primitiveMode) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Associates a generic vertex attribute index with a named attribute variable
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program object in which the association is to be made.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be bound.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// Specifies a null terminated string containing the name of the vertex shader attribute variable to which index is to be bound.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glBindAttribLocation")]
        [CLSCompliant(false)]
        public static void BindAttribLocation(Int32 program, Int32 index, String name) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Associates a generic vertex attribute index with a named attribute variable
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program object in which the association is to be made.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be bound.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// Specifies a null terminated string containing the name of the vertex shader attribute variable to which index is to be bound.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glBindAttribLocation")]
        [CLSCompliant(false)]
        public static void BindAttribLocation(UInt32 program, UInt32 index, String name) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Bind a named buffer object
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target to which the buffer object is bound. The symbolic constant must be GL_ARRAY_BUFFER, GL_ATOMIC_COUNTER_BUFFER, GL_COPY_READ_BUFFER, GL_COPY_WRITE_BUFFER, GL_DRAW_INDIRECT_BUFFER, GL_DISPATCH_INDIRECT_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, GL_PIXEL_UNPACK_BUFFER, GL_QUERY_BUFFER, GL_SHADER_STORAGE_BUFFER, GL_TEXTURE_BUFFER, GL_TRANSFORM_FEEDBACK_BUFFER, or GL_UNIFORM_BUFFER.
        /// </para>
        /// </param>
        /// <param name="buffer">
        /// <para>
        /// Specifies the name of a buffer object.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glBindBuffer")]
        [CLSCompliant(false)]
        public static void BindBuffer(OpenTK.Graphics.ES30.All target, Int32 buffer) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Bind a named buffer object
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target to which the buffer object is bound. The symbolic constant must be GL_ARRAY_BUFFER, GL_ATOMIC_COUNTER_BUFFER, GL_COPY_READ_BUFFER, GL_COPY_WRITE_BUFFER, GL_DRAW_INDIRECT_BUFFER, GL_DISPATCH_INDIRECT_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, GL_PIXEL_UNPACK_BUFFER, GL_QUERY_BUFFER, GL_SHADER_STORAGE_BUFFER, GL_TEXTURE_BUFFER, GL_TRANSFORM_FEEDBACK_BUFFER, or GL_UNIFORM_BUFFER.
        /// </para>
        /// </param>
        /// <param name="buffer">
        /// <para>
        /// Specifies the name of a buffer object.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glBindBuffer")]
        [CLSCompliant(false)]
        public static void BindBuffer(OpenTK.Graphics.ES30.All target, UInt32 buffer) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Bind a named buffer object
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target to which the buffer object is bound. The symbolic constant must be GL_ARRAY_BUFFER, GL_ATOMIC_COUNTER_BUFFER, GL_COPY_READ_BUFFER, GL_COPY_WRITE_BUFFER, GL_DRAW_INDIRECT_BUFFER, GL_DISPATCH_INDIRECT_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, GL_PIXEL_UNPACK_BUFFER, GL_QUERY_BUFFER, GL_SHADER_STORAGE_BUFFER, GL_TEXTURE_BUFFER, GL_TRANSFORM_FEEDBACK_BUFFER, or GL_UNIFORM_BUFFER.
        /// </para>
        /// </param>
        /// <param name="buffer">
        /// <para>
        /// Specifies the name of a buffer object.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glBindBuffer")]
        [CLSCompliant(false)]
        public static void BindBuffer(OpenTK.Graphics.ES30.BufferTarget target, Int32 buffer) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Bind a named buffer object
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target to which the buffer object is bound. The symbolic constant must be GL_ARRAY_BUFFER, GL_ATOMIC_COUNTER_BUFFER, GL_COPY_READ_BUFFER, GL_COPY_WRITE_BUFFER, GL_DRAW_INDIRECT_BUFFER, GL_DISPATCH_INDIRECT_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, GL_PIXEL_UNPACK_BUFFER, GL_QUERY_BUFFER, GL_SHADER_STORAGE_BUFFER, GL_TEXTURE_BUFFER, GL_TRANSFORM_FEEDBACK_BUFFER, or GL_UNIFORM_BUFFER.
        /// </para>
        /// </param>
        /// <param name="buffer">
        /// <para>
        /// Specifies the name of a buffer object.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glBindBuffer")]
        [CLSCompliant(false)]
        public static void BindBuffer(OpenTK.Graphics.ES30.BufferTarget target, UInt32 buffer) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Bind a buffer object to an indexed buffer target
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specify the target of the bind operation. target must be one of GL_ATOMIC_COUNTER_BUFFER, GL_TRANSFORM_FEEDBACK_BUFFER, GL_UNIFORM_BUFFER or GL_SHADER_STORAGE_BUFFER.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// Specify the index of the binding point within the array specified by target.
        /// </para>
        /// </param>
        /// <param name="buffer">
        /// <para>
        /// The name of a buffer object to bind to the specified binding point.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glBindBufferBase")]
        [CLSCompliant(false)]
        public static void BindBufferBase(OpenTK.Graphics.ES30.All target, Int32 index, Int32 buffer) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Bind a buffer object to an indexed buffer target
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specify the target of the bind operation. target must be one of GL_ATOMIC_COUNTER_BUFFER, GL_TRANSFORM_FEEDBACK_BUFFER, GL_UNIFORM_BUFFER or GL_SHADER_STORAGE_BUFFER.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// Specify the index of the binding point within the array specified by target.
        /// </para>
        /// </param>
        /// <param name="buffer">
        /// <para>
        /// The name of a buffer object to bind to the specified binding point.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glBindBufferBase")]
        [CLSCompliant(false)]
        public static void BindBufferBase(OpenTK.Graphics.ES30.All target, UInt32 index, UInt32 buffer) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Bind a buffer object to an indexed buffer target
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specify the target of the bind operation. target must be one of GL_ATOMIC_COUNTER_BUFFER, GL_TRANSFORM_FEEDBACK_BUFFER, GL_UNIFORM_BUFFER or GL_SHADER_STORAGE_BUFFER.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// Specify the index of the binding point within the array specified by target.
        /// </para>
        /// </param>
        /// <param name="buffer">
        /// <para>
        /// The name of a buffer object to bind to the specified binding point.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glBindBufferBase")]
        [CLSCompliant(false)]
        public static void BindBufferBase(OpenTK.Graphics.ES30.BufferRangeTarget target, Int32 index, Int32 buffer) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Bind a buffer object to an indexed buffer target
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specify the target of the bind operation. target must be one of GL_ATOMIC_COUNTER_BUFFER, GL_TRANSFORM_FEEDBACK_BUFFER, GL_UNIFORM_BUFFER or GL_SHADER_STORAGE_BUFFER.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// Specify the index of the binding point within the array specified by target.
        /// </para>
        /// </param>
        /// <param name="buffer">
        /// <para>
        /// The name of a buffer object to bind to the specified binding point.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glBindBufferBase")]
        [CLSCompliant(false)]
        public static void BindBufferBase(OpenTK.Graphics.ES30.BufferRangeTarget target, UInt32 index, UInt32 buffer) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Bind a range within a buffer object to an indexed buffer target
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specify the target of the bind operation. target must be one of GL_ATOMIC_COUNTER_BUFFER, GL_TRANSFORM_FEEDBACK_BUFFER, GL_UNIFORM_BUFFER, or GL_SHADER_STORAGE_BUFFER.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// Specify the index of the binding point within the array specified by target.
        /// </para>
        /// </param>
        /// <param name="buffer">
        /// <para>
        /// The name of a buffer object to bind to the specified binding point.
        /// </para>
        /// </param>
        /// <param name="offset">
        /// <para>
        /// The starting offset in basic machine units into the buffer object buffer.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// The amount of data in machine units that can be read from the buffet object while used as an indexed target.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glBindBufferRange")]
        [CLSCompliant(false)]
        public static void BindBufferRange(OpenTK.Graphics.ES30.All target, Int32 index, Int32 buffer, IntPtr offset, IntPtr size) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Bind a range within a buffer object to an indexed buffer target
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specify the target of the bind operation. target must be one of GL_ATOMIC_COUNTER_BUFFER, GL_TRANSFORM_FEEDBACK_BUFFER, GL_UNIFORM_BUFFER, or GL_SHADER_STORAGE_BUFFER.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// Specify the index of the binding point within the array specified by target.
        /// </para>
        /// </param>
        /// <param name="buffer">
        /// <para>
        /// The name of a buffer object to bind to the specified binding point.
        /// </para>
        /// </param>
        /// <param name="offset">
        /// <para>
        /// The starting offset in basic machine units into the buffer object buffer.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// The amount of data in machine units that can be read from the buffet object while used as an indexed target.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glBindBufferRange")]
        [CLSCompliant(false)]
        public static void BindBufferRange(OpenTK.Graphics.ES30.All target, UInt32 index, UInt32 buffer, IntPtr offset, IntPtr size) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Bind a range within a buffer object to an indexed buffer target
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specify the target of the bind operation. target must be one of GL_ATOMIC_COUNTER_BUFFER, GL_TRANSFORM_FEEDBACK_BUFFER, GL_UNIFORM_BUFFER, or GL_SHADER_STORAGE_BUFFER.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// Specify the index of the binding point within the array specified by target.
        /// </para>
        /// </param>
        /// <param name="buffer">
        /// <para>
        /// The name of a buffer object to bind to the specified binding point.
        /// </para>
        /// </param>
        /// <param name="offset">
        /// <para>
        /// The starting offset in basic machine units into the buffer object buffer.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// The amount of data in machine units that can be read from the buffet object while used as an indexed target.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glBindBufferRange")]
        [CLSCompliant(false)]
        public static void BindBufferRange(OpenTK.Graphics.ES30.BufferRangeTarget target, Int32 index, Int32 buffer, IntPtr offset, IntPtr size) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Bind a range within a buffer object to an indexed buffer target
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specify the target of the bind operation. target must be one of GL_ATOMIC_COUNTER_BUFFER, GL_TRANSFORM_FEEDBACK_BUFFER, GL_UNIFORM_BUFFER, or GL_SHADER_STORAGE_BUFFER.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// Specify the index of the binding point within the array specified by target.
        /// </para>
        /// </param>
        /// <param name="buffer">
        /// <para>
        /// The name of a buffer object to bind to the specified binding point.
        /// </para>
        /// </param>
        /// <param name="offset">
        /// <para>
        /// The starting offset in basic machine units into the buffer object buffer.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// The amount of data in machine units that can be read from the buffet object while used as an indexed target.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glBindBufferRange")]
        [CLSCompliant(false)]
        public static void BindBufferRange(OpenTK.Graphics.ES30.BufferRangeTarget target, UInt32 index, UInt32 buffer, IntPtr offset, IntPtr size) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Bind a framebuffer to a framebuffer target
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the framebuffer target of the binding operation.
        /// </para>
        /// </param>
        /// <param name="framebuffer">
        /// <para>
        /// Specifies the name of the framebuffer object to bind.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glBindFramebuffer")]
        [CLSCompliant(false)]
        public static void BindFramebuffer(OpenTK.Graphics.ES30.All target, Int32 framebuffer) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Bind a framebuffer to a framebuffer target
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the framebuffer target of the binding operation.
        /// </para>
        /// </param>
        /// <param name="framebuffer">
        /// <para>
        /// Specifies the name of the framebuffer object to bind.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glBindFramebuffer")]
        [CLSCompliant(false)]
        public static void BindFramebuffer(OpenTK.Graphics.ES30.All target, UInt32 framebuffer) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Bind a framebuffer to a framebuffer target
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the framebuffer target of the binding operation.
        /// </para>
        /// </param>
        /// <param name="framebuffer">
        /// <para>
        /// Specifies the name of the framebuffer object to bind.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glBindFramebuffer")]
        [CLSCompliant(false)]
        public static void BindFramebuffer(OpenTK.Graphics.ES30.FramebufferTarget target, Int32 framebuffer) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Bind a framebuffer to a framebuffer target
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the framebuffer target of the binding operation.
        /// </para>
        /// </param>
        /// <param name="framebuffer">
        /// <para>
        /// Specifies the name of the framebuffer object to bind.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glBindFramebuffer")]
        [CLSCompliant(false)]
        public static void BindFramebuffer(OpenTK.Graphics.ES30.FramebufferTarget target, UInt32 framebuffer) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Bind a renderbuffer to a renderbuffer target
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the renderbuffer target of the binding operation. target must be GL_RENDERBUFFER.
        /// </para>
        /// </param>
        /// <param name="renderbuffer">
        /// <para>
        /// Specifies the name of the renderbuffer object to bind.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glBindRenderbuffer")]
        [CLSCompliant(false)]
        public static void BindRenderbuffer(OpenTK.Graphics.ES30.All target, Int32 renderbuffer) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Bind a renderbuffer to a renderbuffer target
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the renderbuffer target of the binding operation. target must be GL_RENDERBUFFER.
        /// </para>
        /// </param>
        /// <param name="renderbuffer">
        /// <para>
        /// Specifies the name of the renderbuffer object to bind.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glBindRenderbuffer")]
        [CLSCompliant(false)]
        public static void BindRenderbuffer(OpenTK.Graphics.ES30.All target, UInt32 renderbuffer) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Bind a renderbuffer to a renderbuffer target
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the renderbuffer target of the binding operation. target must be GL_RENDERBUFFER.
        /// </para>
        /// </param>
        /// <param name="renderbuffer">
        /// <para>
        /// Specifies the name of the renderbuffer object to bind.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glBindRenderbuffer")]
        [CLSCompliant(false)]
        public static void BindRenderbuffer(OpenTK.Graphics.ES30.RenderbufferTarget target, Int32 renderbuffer) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Bind a renderbuffer to a renderbuffer target
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the renderbuffer target of the binding operation. target must be GL_RENDERBUFFER.
        /// </para>
        /// </param>
        /// <param name="renderbuffer">
        /// <para>
        /// Specifies the name of the renderbuffer object to bind.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glBindRenderbuffer")]
        [CLSCompliant(false)]
        public static void BindRenderbuffer(OpenTK.Graphics.ES30.RenderbufferTarget target, UInt32 renderbuffer) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Bind a named sampler to a texturing target
        /// </summary>
        /// <param name="unit">
        /// <para>
        /// Specifies the index of the texture unit to which the sampler is bound.
        /// </para>
        /// </param>
        /// <param name="sampler">
        /// <para>
        /// Specifies the name of a sampler.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glBindSampler")]
        [CLSCompliant(false)]
        public static void BindSampler(Int32 unit, Int32 sampler) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Bind a named sampler to a texturing target
        /// </summary>
        /// <param name="unit">
        /// <para>
        /// Specifies the index of the texture unit to which the sampler is bound.
        /// </para>
        /// </param>
        /// <param name="sampler">
        /// <para>
        /// Specifies the name of a sampler.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glBindSampler")]
        [CLSCompliant(false)]
        public static void BindSampler(UInt32 unit, UInt32 sampler) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Bind a named texture to a texturing target
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target to which the texture is bound. Must be one of GL_TEXTURE_1D, GL_TEXTURE_2D, GL_TEXTURE_3D, GL_TEXTURE_1D_ARRAY, GL_TEXTURE_2D_ARRAY, GL_TEXTURE_RECTANGLE, GL_TEXTURE_CUBE_MAP, GL_TEXTURE_CUBE_MAP_ARRAY, GL_TEXTURE_BUFFER, GL_TEXTURE_2D_MULTISAMPLE or GL_TEXTURE_2D_MULTISAMPLE_ARRAY.
        /// </para>
        /// </param>
        /// <param name="texture">
        /// <para>
        /// Specifies the name of a texture.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glBindTexture")]
        [CLSCompliant(false)]
        public static void BindTexture(OpenTK.Graphics.ES30.All target, Int32 texture) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Bind a named texture to a texturing target
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target to which the texture is bound. Must be one of GL_TEXTURE_1D, GL_TEXTURE_2D, GL_TEXTURE_3D, GL_TEXTURE_1D_ARRAY, GL_TEXTURE_2D_ARRAY, GL_TEXTURE_RECTANGLE, GL_TEXTURE_CUBE_MAP, GL_TEXTURE_CUBE_MAP_ARRAY, GL_TEXTURE_BUFFER, GL_TEXTURE_2D_MULTISAMPLE or GL_TEXTURE_2D_MULTISAMPLE_ARRAY.
        /// </para>
        /// </param>
        /// <param name="texture">
        /// <para>
        /// Specifies the name of a texture.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glBindTexture")]
        [CLSCompliant(false)]
        public static void BindTexture(OpenTK.Graphics.ES30.All target, UInt32 texture) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Bind a named texture to a texturing target
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target to which the texture is bound. Must be one of GL_TEXTURE_1D, GL_TEXTURE_2D, GL_TEXTURE_3D, GL_TEXTURE_1D_ARRAY, GL_TEXTURE_2D_ARRAY, GL_TEXTURE_RECTANGLE, GL_TEXTURE_CUBE_MAP, GL_TEXTURE_CUBE_MAP_ARRAY, GL_TEXTURE_BUFFER, GL_TEXTURE_2D_MULTISAMPLE or GL_TEXTURE_2D_MULTISAMPLE_ARRAY.
        /// </para>
        /// </param>
        /// <param name="texture">
        /// <para>
        /// Specifies the name of a texture.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glBindTexture")]
        [CLSCompliant(false)]
        public static void BindTexture(OpenTK.Graphics.ES30.TextureTarget target, Int32 texture) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Bind a named texture to a texturing target
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target to which the texture is bound. Must be one of GL_TEXTURE_1D, GL_TEXTURE_2D, GL_TEXTURE_3D, GL_TEXTURE_1D_ARRAY, GL_TEXTURE_2D_ARRAY, GL_TEXTURE_RECTANGLE, GL_TEXTURE_CUBE_MAP, GL_TEXTURE_CUBE_MAP_ARRAY, GL_TEXTURE_BUFFER, GL_TEXTURE_2D_MULTISAMPLE or GL_TEXTURE_2D_MULTISAMPLE_ARRAY.
        /// </para>
        /// </param>
        /// <param name="texture">
        /// <para>
        /// Specifies the name of a texture.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glBindTexture")]
        [CLSCompliant(false)]
        public static void BindTexture(OpenTK.Graphics.ES30.TextureTarget target, UInt32 texture) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Bind a transform feedback object
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target to which to bind the transform feedback object id. target must be GL_TRANSFORM_FEEDBACK.
        /// </para>
        /// </param>
        /// <param name="id">
        /// <para>
        /// Specifies the name of a transform feedback object reserved by glGenTransformFeedbacks.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glBindTransformFeedback")]
        [CLSCompliant(false)]
        public static void BindTransformFeedback(OpenTK.Graphics.ES30.All target, Int32 id) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Bind a transform feedback object
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target to which to bind the transform feedback object id. target must be GL_TRANSFORM_FEEDBACK.
        /// </para>
        /// </param>
        /// <param name="id">
        /// <para>
        /// Specifies the name of a transform feedback object reserved by glGenTransformFeedbacks.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glBindTransformFeedback")]
        [CLSCompliant(false)]
        public static void BindTransformFeedback(OpenTK.Graphics.ES30.All target, UInt32 id) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Bind a transform feedback object
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target to which to bind the transform feedback object id. target must be GL_TRANSFORM_FEEDBACK.
        /// </para>
        /// </param>
        /// <param name="id">
        /// <para>
        /// Specifies the name of a transform feedback object reserved by glGenTransformFeedbacks.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glBindTransformFeedback")]
        [CLSCompliant(false)]
        public static void BindTransformFeedback(OpenTK.Graphics.ES30.TransformFeedbackTarget target, Int32 id) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Bind a transform feedback object
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target to which to bind the transform feedback object id. target must be GL_TRANSFORM_FEEDBACK.
        /// </para>
        /// </param>
        /// <param name="id">
        /// <para>
        /// Specifies the name of a transform feedback object reserved by glGenTransformFeedbacks.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glBindTransformFeedback")]
        [CLSCompliant(false)]
        public static void BindTransformFeedback(OpenTK.Graphics.ES30.TransformFeedbackTarget target, UInt32 id) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Bind a vertex array object
        /// </summary>
        /// <param name="array">
        /// <para>
        /// Specifies the name of the vertex array to bind.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glBindVertexArray")]
        [CLSCompliant(false)]
        public static void BindVertexArray(Int32 array) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Bind a vertex array object
        /// </summary>
        /// <param name="array">
        /// <para>
        /// Specifies the name of the vertex array to bind.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glBindVertexArray")]
        [CLSCompliant(false)]
        public static void BindVertexArray(UInt32 array) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Set the blend color
        /// </summary>
        /// <param name="red">
        /// <para>
        /// specify the components of GL_BLEND_COLOR
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glBlendColor")]
        public static void BlendColor(Single red, Single green, Single blue, Single alpha) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Specify the equation used for both the RGB blend equation and the Alpha blend equation
        /// </summary>
        /// <param name="buf">
        /// <para>
        /// for glBlendEquationi, specifies the index of the draw buffer for which to set the blend equation.
        /// </para>
        /// </param>
        /// <param name="mode">
        /// <para>
        /// specifies how source and destination colors are combined. It must be GL_FUNC_ADD, GL_FUNC_SUBTRACT, GL_FUNC_REVERSE_SUBTRACT, GL_MIN, GL_MAX.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glBlendEquation")]
        public static void BlendEquation(OpenTK.Graphics.ES30.All mode) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Specify the equation used for both the RGB blend equation and the Alpha blend equation
        /// </summary>
        /// <param name="buf">
        /// <para>
        /// for glBlendEquationi, specifies the index of the draw buffer for which to set the blend equation.
        /// </para>
        /// </param>
        /// <param name="mode">
        /// <para>
        /// specifies how source and destination colors are combined. It must be GL_FUNC_ADD, GL_FUNC_SUBTRACT, GL_FUNC_REVERSE_SUBTRACT, GL_MIN, GL_MAX.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glBlendEquation")]
        public static void BlendEquation(OpenTK.Graphics.ES30.BlendEquationMode mode) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Set the RGB blend equation and the alpha blend equation separately
        /// </summary>
        /// <param name="buf">
        /// <para>
        /// for glBlendEquationSeparatei, specifies the index of the draw buffer for which to set the blend equations.
        /// </para>
        /// </param>
        /// <param name="modeRGB">
        /// <para>
        /// specifies the RGB blend equation, how the red, green, and blue components of the source and destination colors are combined. It must be GL_FUNC_ADD, GL_FUNC_SUBTRACT, GL_FUNC_REVERSE_SUBTRACT, GL_MIN, GL_MAX.
        /// </para>
        /// </param>
        /// <param name="modeAlpha">
        /// <para>
        /// specifies the alpha blend equation, how the alpha component of the source and destination colors are combined. It must be GL_FUNC_ADD, GL_FUNC_SUBTRACT, GL_FUNC_REVERSE_SUBTRACT, GL_MIN, GL_MAX.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glBlendEquationSeparate")]
        public static void BlendEquationSeparate(OpenTK.Graphics.ES30.All modeRGB, OpenTK.Graphics.ES30.All modeAlpha) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Set the RGB blend equation and the alpha blend equation separately
        /// </summary>
        /// <param name="buf">
        /// <para>
        /// for glBlendEquationSeparatei, specifies the index of the draw buffer for which to set the blend equations.
        /// </para>
        /// </param>
        /// <param name="modeRGB">
        /// <para>
        /// specifies the RGB blend equation, how the red, green, and blue components of the source and destination colors are combined. It must be GL_FUNC_ADD, GL_FUNC_SUBTRACT, GL_FUNC_REVERSE_SUBTRACT, GL_MIN, GL_MAX.
        /// </para>
        /// </param>
        /// <param name="modeAlpha">
        /// <para>
        /// specifies the alpha blend equation, how the alpha component of the source and destination colors are combined. It must be GL_FUNC_ADD, GL_FUNC_SUBTRACT, GL_FUNC_REVERSE_SUBTRACT, GL_MIN, GL_MAX.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glBlendEquationSeparate")]
        public static void BlendEquationSeparate(OpenTK.Graphics.ES30.BlendEquationMode modeRGB, OpenTK.Graphics.ES30.BlendEquationMode modeAlpha) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Specify pixel arithmetic
        /// </summary>
        /// <param name="buf">
        /// <para>
        /// For glBlendFunci, specifies the index of the draw buffer for which to set the blend function.
        /// </para>
        /// </param>
        /// <param name="sfactor">
        /// <para>
        /// Specifies how the red, green, blue, and alpha source blending factors are computed. The initial value is GL_ONE.
        /// </para>
        /// </param>
        /// <param name="dfactor">
        /// <para>
        /// Specifies how the red, green, blue, and alpha destination blending factors are computed. The following symbolic constants are accepted: GL_ZERO, GL_ONE, GL_SRC_COLOR, GL_ONE_MINUS_SRC_COLOR, GL_DST_COLOR, GL_ONE_MINUS_DST_COLOR, GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA, GL_DST_ALPHA, GL_ONE_MINUS_DST_ALPHA. GL_CONSTANT_COLOR, GL_ONE_MINUS_CONSTANT_COLOR, GL_CONSTANT_ALPHA, and GL_ONE_MINUS_CONSTANT_ALPHA. The initial value is GL_ZERO.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glBlendFunc")]
        public static void BlendFunc(OpenTK.Graphics.ES30.All sfactor, OpenTK.Graphics.ES30.All dfactor) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Specify pixel arithmetic
        /// </summary>
        /// <param name="buf">
        /// <para>
        /// For glBlendFunci, specifies the index of the draw buffer for which to set the blend function.
        /// </para>
        /// </param>
        /// <param name="sfactor">
        /// <para>
        /// Specifies how the red, green, blue, and alpha source blending factors are computed. The initial value is GL_ONE.
        /// </para>
        /// </param>
        /// <param name="dfactor">
        /// <para>
        /// Specifies how the red, green, blue, and alpha destination blending factors are computed. The following symbolic constants are accepted: GL_ZERO, GL_ONE, GL_SRC_COLOR, GL_ONE_MINUS_SRC_COLOR, GL_DST_COLOR, GL_ONE_MINUS_DST_COLOR, GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA, GL_DST_ALPHA, GL_ONE_MINUS_DST_ALPHA. GL_CONSTANT_COLOR, GL_ONE_MINUS_CONSTANT_COLOR, GL_CONSTANT_ALPHA, and GL_ONE_MINUS_CONSTANT_ALPHA. The initial value is GL_ZERO.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glBlendFunc")]
        public static void BlendFunc(OpenTK.Graphics.ES30.BlendingFactorSrc sfactor, OpenTK.Graphics.ES30.BlendingFactorDest dfactor) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Specify pixel arithmetic for RGB and alpha components separately
        /// </summary>
        /// <param name="buf">
        /// <para>
        /// For glBlendFuncSeparatei, specifies the index of the draw buffer for which to set the blend functions.
        /// </para>
        /// </param>
        /// <param name="srcRGB">
        /// <para>
        /// Specifies how the red, green, and blue blending factors are computed. The initial value is GL_ONE.
        /// </para>
        /// </param>
        /// <param name="dstRGB">
        /// <para>
        /// Specifies how the red, green, and blue destination blending factors are computed. The initial value is GL_ZERO.
        /// </para>
        /// </param>
        /// <param name="srcAlpha">
        /// <para>
        /// Specified how the alpha source blending factor is computed. The initial value is GL_ONE.
        /// </para>
        /// </param>
        /// <param name="dstAlpha">
        /// <para>
        /// Specified how the alpha destination blending factor is computed. The initial value is GL_ZERO.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glBlendFuncSeparate")]
        public static void BlendFuncSeparate(OpenTK.Graphics.ES30.All sfactorRGB, OpenTK.Graphics.ES30.All dfactorRGB, OpenTK.Graphics.ES30.All sfactorAlpha, OpenTK.Graphics.ES30.All dfactorAlpha) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Specify pixel arithmetic for RGB and alpha components separately
        /// </summary>
        /// <param name="buf">
        /// <para>
        /// For glBlendFuncSeparatei, specifies the index of the draw buffer for which to set the blend functions.
        /// </para>
        /// </param>
        /// <param name="srcRGB">
        /// <para>
        /// Specifies how the red, green, and blue blending factors are computed. The initial value is GL_ONE.
        /// </para>
        /// </param>
        /// <param name="dstRGB">
        /// <para>
        /// Specifies how the red, green, and blue destination blending factors are computed. The initial value is GL_ZERO.
        /// </para>
        /// </param>
        /// <param name="srcAlpha">
        /// <para>
        /// Specified how the alpha source blending factor is computed. The initial value is GL_ONE.
        /// </para>
        /// </param>
        /// <param name="dstAlpha">
        /// <para>
        /// Specified how the alpha destination blending factor is computed. The initial value is GL_ZERO.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glBlendFuncSeparate")]
        public static void BlendFuncSeparate(OpenTK.Graphics.ES30.BlendingFactorSrc sfactorRGB, OpenTK.Graphics.ES30.BlendingFactorDest dfactorRGB, OpenTK.Graphics.ES30.BlendingFactorSrc sfactorAlpha, OpenTK.Graphics.ES30.BlendingFactorDest dfactorAlpha) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Copy a block of pixels from the read framebuffer to the draw framebuffer
        /// </summary>
        /// <param name="srcX0">
        /// <para>
        /// Specify the bounds of the source rectangle within the read buffer of the read framebuffer.
        /// </para>
        /// </param>
        /// <param name="dstX0">
        /// <para>
        /// Specify the bounds of the destination rectangle within the write buffer of the write framebuffer.
        /// </para>
        /// </param>
        /// <param name="mask">
        /// <para>
        /// The bitwise OR of the flags indicating which buffers are to be copied. The allowed flags are GL_COLOR_BUFFER_BIT, GL_DEPTH_BUFFER_BIT and GL_STENCIL_BUFFER_BIT.
        /// </para>
        /// </param>
        /// <param name="filter">
        /// <para>
        /// Specifies the interpolation to be applied if the image is stretched. Must be GL_NEAREST or GL_LINEAR.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glBlitFramebuffer")]
        public static void BlitFramebuffer(Int32 srcX0, Int32 srcY0, Int32 srcX1, Int32 srcY1, Int32 dstX0, Int32 dstY0, Int32 dstX1, Int32 dstY1, OpenTK.Graphics.ES30.All mask, OpenTK.Graphics.ES30.All filter) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Copy a block of pixels from the read framebuffer to the draw framebuffer
        /// </summary>
        /// <param name="srcX0">
        /// <para>
        /// Specify the bounds of the source rectangle within the read buffer of the read framebuffer.
        /// </para>
        /// </param>
        /// <param name="dstX0">
        /// <para>
        /// Specify the bounds of the destination rectangle within the write buffer of the write framebuffer.
        /// </para>
        /// </param>
        /// <param name="mask">
        /// <para>
        /// The bitwise OR of the flags indicating which buffers are to be copied. The allowed flags are GL_COLOR_BUFFER_BIT, GL_DEPTH_BUFFER_BIT and GL_STENCIL_BUFFER_BIT.
        /// </para>
        /// </param>
        /// <param name="filter">
        /// <para>
        /// Specifies the interpolation to be applied if the image is stretched. Must be GL_NEAREST or GL_LINEAR.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glBlitFramebuffer")]
        public static void BlitFramebuffer(Int32 srcX0, Int32 srcY0, Int32 srcX1, Int32 srcY1, Int32 dstX0, Int32 dstY0, Int32 dstX1, Int32 dstY1, OpenTK.Graphics.ES30.ClearBufferMask mask, OpenTK.Graphics.ES30.BlitFramebufferFilter filter) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Creates and initializes a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ATOMIC_COUNTER_BUFFER, GL_COPY_READ_BUFFER, GL_COPY_WRITE_BUFFER, GL_DRAW_INDIRECT_BUFFER, GL_DISPATCH_INDIRECT_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, GL_PIXEL_UNPACK_BUFFER, GL_QUERY_BUFFER, GL_SHADER_STORAGE_BUFFER, GL_TEXTURE_BUFFER, GL_TRANSFORM_FEEDBACK_BUFFER, or GL_UNIFORM_BUFFER.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to data that will be copied into the data store for initialization, or NULL if no data is to be copied.
        /// </para>
        /// </param>
        /// <param name="usage">
        /// <para>
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be GL_STREAM_DRAW, GL_STREAM_READ, GL_STREAM_COPY, GL_STATIC_DRAW, GL_STATIC_READ, GL_STATIC_COPY, GL_DYNAMIC_DRAW, GL_DYNAMIC_READ, or GL_DYNAMIC_COPY.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glBufferData")]
        public static void BufferData(OpenTK.Graphics.ES30.All target, IntPtr size, IntPtr data, OpenTK.Graphics.ES30.All usage) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Creates and initializes a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ATOMIC_COUNTER_BUFFER, GL_COPY_READ_BUFFER, GL_COPY_WRITE_BUFFER, GL_DRAW_INDIRECT_BUFFER, GL_DISPATCH_INDIRECT_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, GL_PIXEL_UNPACK_BUFFER, GL_QUERY_BUFFER, GL_SHADER_STORAGE_BUFFER, GL_TEXTURE_BUFFER, GL_TRANSFORM_FEEDBACK_BUFFER, or GL_UNIFORM_BUFFER.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to data that will be copied into the data store for initialization, or NULL if no data is to be copied.
        /// </para>
        /// </param>
        /// <param name="usage">
        /// <para>
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be GL_STREAM_DRAW, GL_STREAM_READ, GL_STREAM_COPY, GL_STATIC_DRAW, GL_STATIC_READ, GL_STATIC_COPY, GL_DYNAMIC_DRAW, GL_DYNAMIC_READ, or GL_DYNAMIC_COPY.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glBufferData")]
        [CLSCompliant(false)]
        public static void BufferData<T2>(OpenTK.Graphics.ES30.All target, IntPtr size, [InAttribute, OutAttribute] T2[] data, OpenTK.Graphics.ES30.All usage)
            where T2 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Creates and initializes a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ATOMIC_COUNTER_BUFFER, GL_COPY_READ_BUFFER, GL_COPY_WRITE_BUFFER, GL_DRAW_INDIRECT_BUFFER, GL_DISPATCH_INDIRECT_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, GL_PIXEL_UNPACK_BUFFER, GL_QUERY_BUFFER, GL_SHADER_STORAGE_BUFFER, GL_TEXTURE_BUFFER, GL_TRANSFORM_FEEDBACK_BUFFER, or GL_UNIFORM_BUFFER.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to data that will be copied into the data store for initialization, or NULL if no data is to be copied.
        /// </para>
        /// </param>
        /// <param name="usage">
        /// <para>
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be GL_STREAM_DRAW, GL_STREAM_READ, GL_STREAM_COPY, GL_STATIC_DRAW, GL_STATIC_READ, GL_STATIC_COPY, GL_DYNAMIC_DRAW, GL_DYNAMIC_READ, or GL_DYNAMIC_COPY.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glBufferData")]
        [CLSCompliant(false)]
        public static void BufferData<T2>(OpenTK.Graphics.ES30.All target, IntPtr size, [InAttribute, OutAttribute] T2[,] data, OpenTK.Graphics.ES30.All usage)
            where T2 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Creates and initializes a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ATOMIC_COUNTER_BUFFER, GL_COPY_READ_BUFFER, GL_COPY_WRITE_BUFFER, GL_DRAW_INDIRECT_BUFFER, GL_DISPATCH_INDIRECT_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, GL_PIXEL_UNPACK_BUFFER, GL_QUERY_BUFFER, GL_SHADER_STORAGE_BUFFER, GL_TEXTURE_BUFFER, GL_TRANSFORM_FEEDBACK_BUFFER, or GL_UNIFORM_BUFFER.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to data that will be copied into the data store for initialization, or NULL if no data is to be copied.
        /// </para>
        /// </param>
        /// <param name="usage">
        /// <para>
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be GL_STREAM_DRAW, GL_STREAM_READ, GL_STREAM_COPY, GL_STATIC_DRAW, GL_STATIC_READ, GL_STATIC_COPY, GL_DYNAMIC_DRAW, GL_DYNAMIC_READ, or GL_DYNAMIC_COPY.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glBufferData")]
        [CLSCompliant(false)]
        public static void BufferData<T2>(OpenTK.Graphics.ES30.All target, IntPtr size, [InAttribute, OutAttribute] T2[,,] data, OpenTK.Graphics.ES30.All usage)
            where T2 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Creates and initializes a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ATOMIC_COUNTER_BUFFER, GL_COPY_READ_BUFFER, GL_COPY_WRITE_BUFFER, GL_DRAW_INDIRECT_BUFFER, GL_DISPATCH_INDIRECT_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, GL_PIXEL_UNPACK_BUFFER, GL_QUERY_BUFFER, GL_SHADER_STORAGE_BUFFER, GL_TEXTURE_BUFFER, GL_TRANSFORM_FEEDBACK_BUFFER, or GL_UNIFORM_BUFFER.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to data that will be copied into the data store for initialization, or NULL if no data is to be copied.
        /// </para>
        /// </param>
        /// <param name="usage">
        /// <para>
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be GL_STREAM_DRAW, GL_STREAM_READ, GL_STREAM_COPY, GL_STATIC_DRAW, GL_STATIC_READ, GL_STATIC_COPY, GL_DYNAMIC_DRAW, GL_DYNAMIC_READ, or GL_DYNAMIC_COPY.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glBufferData")]
        public static void BufferData<T2>(OpenTK.Graphics.ES30.All target, IntPtr size, [InAttribute, OutAttribute] ref T2 data, OpenTK.Graphics.ES30.All usage)
            where T2 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Creates and initializes a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ATOMIC_COUNTER_BUFFER, GL_COPY_READ_BUFFER, GL_COPY_WRITE_BUFFER, GL_DRAW_INDIRECT_BUFFER, GL_DISPATCH_INDIRECT_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, GL_PIXEL_UNPACK_BUFFER, GL_QUERY_BUFFER, GL_SHADER_STORAGE_BUFFER, GL_TEXTURE_BUFFER, GL_TRANSFORM_FEEDBACK_BUFFER, or GL_UNIFORM_BUFFER.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to data that will be copied into the data store for initialization, or NULL if no data is to be copied.
        /// </para>
        /// </param>
        /// <param name="usage">
        /// <para>
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be GL_STREAM_DRAW, GL_STREAM_READ, GL_STREAM_COPY, GL_STATIC_DRAW, GL_STATIC_READ, GL_STATIC_COPY, GL_DYNAMIC_DRAW, GL_DYNAMIC_READ, or GL_DYNAMIC_COPY.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glBufferData")]
        public static void BufferData(OpenTK.Graphics.ES30.BufferTarget target, IntPtr size, IntPtr data, OpenTK.Graphics.ES30.BufferUsageHint usage) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Creates and initializes a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ATOMIC_COUNTER_BUFFER, GL_COPY_READ_BUFFER, GL_COPY_WRITE_BUFFER, GL_DRAW_INDIRECT_BUFFER, GL_DISPATCH_INDIRECT_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, GL_PIXEL_UNPACK_BUFFER, GL_QUERY_BUFFER, GL_SHADER_STORAGE_BUFFER, GL_TEXTURE_BUFFER, GL_TRANSFORM_FEEDBACK_BUFFER, or GL_UNIFORM_BUFFER.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to data that will be copied into the data store for initialization, or NULL if no data is to be copied.
        /// </para>
        /// </param>
        /// <param name="usage">
        /// <para>
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be GL_STREAM_DRAW, GL_STREAM_READ, GL_STREAM_COPY, GL_STATIC_DRAW, GL_STATIC_READ, GL_STATIC_COPY, GL_DYNAMIC_DRAW, GL_DYNAMIC_READ, or GL_DYNAMIC_COPY.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glBufferData")]
        [CLSCompliant(false)]
        public static void BufferData<T2>(OpenTK.Graphics.ES30.BufferTarget target, IntPtr size, [InAttribute, OutAttribute] T2[] data, OpenTK.Graphics.ES30.BufferUsageHint usage)
            where T2 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Creates and initializes a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ATOMIC_COUNTER_BUFFER, GL_COPY_READ_BUFFER, GL_COPY_WRITE_BUFFER, GL_DRAW_INDIRECT_BUFFER, GL_DISPATCH_INDIRECT_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, GL_PIXEL_UNPACK_BUFFER, GL_QUERY_BUFFER, GL_SHADER_STORAGE_BUFFER, GL_TEXTURE_BUFFER, GL_TRANSFORM_FEEDBACK_BUFFER, or GL_UNIFORM_BUFFER.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to data that will be copied into the data store for initialization, or NULL if no data is to be copied.
        /// </para>
        /// </param>
        /// <param name="usage">
        /// <para>
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be GL_STREAM_DRAW, GL_STREAM_READ, GL_STREAM_COPY, GL_STATIC_DRAW, GL_STATIC_READ, GL_STATIC_COPY, GL_DYNAMIC_DRAW, GL_DYNAMIC_READ, or GL_DYNAMIC_COPY.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glBufferData")]
        [CLSCompliant(false)]
        public static void BufferData<T2>(OpenTK.Graphics.ES30.BufferTarget target, IntPtr size, [InAttribute, OutAttribute] T2[,] data, OpenTK.Graphics.ES30.BufferUsageHint usage)
            where T2 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Creates and initializes a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ATOMIC_COUNTER_BUFFER, GL_COPY_READ_BUFFER, GL_COPY_WRITE_BUFFER, GL_DRAW_INDIRECT_BUFFER, GL_DISPATCH_INDIRECT_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, GL_PIXEL_UNPACK_BUFFER, GL_QUERY_BUFFER, GL_SHADER_STORAGE_BUFFER, GL_TEXTURE_BUFFER, GL_TRANSFORM_FEEDBACK_BUFFER, or GL_UNIFORM_BUFFER.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to data that will be copied into the data store for initialization, or NULL if no data is to be copied.
        /// </para>
        /// </param>
        /// <param name="usage">
        /// <para>
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be GL_STREAM_DRAW, GL_STREAM_READ, GL_STREAM_COPY, GL_STATIC_DRAW, GL_STATIC_READ, GL_STATIC_COPY, GL_DYNAMIC_DRAW, GL_DYNAMIC_READ, or GL_DYNAMIC_COPY.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glBufferData")]
        [CLSCompliant(false)]
        public static void BufferData<T2>(OpenTK.Graphics.ES30.BufferTarget target, IntPtr size, [InAttribute, OutAttribute] T2[,,] data, OpenTK.Graphics.ES30.BufferUsageHint usage)
            where T2 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Creates and initializes a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ATOMIC_COUNTER_BUFFER, GL_COPY_READ_BUFFER, GL_COPY_WRITE_BUFFER, GL_DRAW_INDIRECT_BUFFER, GL_DISPATCH_INDIRECT_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, GL_PIXEL_UNPACK_BUFFER, GL_QUERY_BUFFER, GL_SHADER_STORAGE_BUFFER, GL_TEXTURE_BUFFER, GL_TRANSFORM_FEEDBACK_BUFFER, or GL_UNIFORM_BUFFER.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to data that will be copied into the data store for initialization, or NULL if no data is to be copied.
        /// </para>
        /// </param>
        /// <param name="usage">
        /// <para>
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be GL_STREAM_DRAW, GL_STREAM_READ, GL_STREAM_COPY, GL_STATIC_DRAW, GL_STATIC_READ, GL_STATIC_COPY, GL_DYNAMIC_DRAW, GL_DYNAMIC_READ, or GL_DYNAMIC_COPY.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glBufferData")]
        public static void BufferData<T2>(OpenTK.Graphics.ES30.BufferTarget target, IntPtr size, [InAttribute, OutAttribute] ref T2 data, OpenTK.Graphics.ES30.BufferUsageHint usage)
            where T2 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Updates a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ATOMIC_COUNTER_BUFFER, GL_COPY_READ_BUFFER, GL_COPY_WRITE_BUFFER, GL_DRAW_INDIRECT_BUFFER, GL_DISPATCH_INDIRECT_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, GL_PIXEL_UNPACK_BUFFER, GL_QUERY_BUFFER, GL_SHADER_STORAGE_BUFFER, GL_TEXTURE_BUFFER, GL_TRANSFORM_FEEDBACK_BUFFER, or GL_UNIFORM_BUFFER.
        /// </para>
        /// </param>
        /// <param name="offset">
        /// <para>
        /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Specifies the size in bytes of the data store region being replaced.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the new data that will be copied into the data store.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glBufferSubData")]
        public static void BufferSubData(OpenTK.Graphics.ES30.All target, IntPtr offset, IntPtr size, IntPtr data) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Updates a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ATOMIC_COUNTER_BUFFER, GL_COPY_READ_BUFFER, GL_COPY_WRITE_BUFFER, GL_DRAW_INDIRECT_BUFFER, GL_DISPATCH_INDIRECT_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, GL_PIXEL_UNPACK_BUFFER, GL_QUERY_BUFFER, GL_SHADER_STORAGE_BUFFER, GL_TEXTURE_BUFFER, GL_TRANSFORM_FEEDBACK_BUFFER, or GL_UNIFORM_BUFFER.
        /// </para>
        /// </param>
        /// <param name="offset">
        /// <para>
        /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Specifies the size in bytes of the data store region being replaced.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the new data that will be copied into the data store.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glBufferSubData")]
        [CLSCompliant(false)]
        public static void BufferSubData<T3>(OpenTK.Graphics.ES30.All target, IntPtr offset, IntPtr size, [InAttribute, OutAttribute] T3[] data)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Updates a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ATOMIC_COUNTER_BUFFER, GL_COPY_READ_BUFFER, GL_COPY_WRITE_BUFFER, GL_DRAW_INDIRECT_BUFFER, GL_DISPATCH_INDIRECT_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, GL_PIXEL_UNPACK_BUFFER, GL_QUERY_BUFFER, GL_SHADER_STORAGE_BUFFER, GL_TEXTURE_BUFFER, GL_TRANSFORM_FEEDBACK_BUFFER, or GL_UNIFORM_BUFFER.
        /// </para>
        /// </param>
        /// <param name="offset">
        /// <para>
        /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Specifies the size in bytes of the data store region being replaced.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the new data that will be copied into the data store.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glBufferSubData")]
        [CLSCompliant(false)]
        public static void BufferSubData<T3>(OpenTK.Graphics.ES30.All target, IntPtr offset, IntPtr size, [InAttribute, OutAttribute] T3[,] data)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Updates a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ATOMIC_COUNTER_BUFFER, GL_COPY_READ_BUFFER, GL_COPY_WRITE_BUFFER, GL_DRAW_INDIRECT_BUFFER, GL_DISPATCH_INDIRECT_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, GL_PIXEL_UNPACK_BUFFER, GL_QUERY_BUFFER, GL_SHADER_STORAGE_BUFFER, GL_TEXTURE_BUFFER, GL_TRANSFORM_FEEDBACK_BUFFER, or GL_UNIFORM_BUFFER.
        /// </para>
        /// </param>
        /// <param name="offset">
        /// <para>
        /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Specifies the size in bytes of the data store region being replaced.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the new data that will be copied into the data store.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glBufferSubData")]
        [CLSCompliant(false)]
        public static void BufferSubData<T3>(OpenTK.Graphics.ES30.All target, IntPtr offset, IntPtr size, [InAttribute, OutAttribute] T3[,,] data)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Updates a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ATOMIC_COUNTER_BUFFER, GL_COPY_READ_BUFFER, GL_COPY_WRITE_BUFFER, GL_DRAW_INDIRECT_BUFFER, GL_DISPATCH_INDIRECT_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, GL_PIXEL_UNPACK_BUFFER, GL_QUERY_BUFFER, GL_SHADER_STORAGE_BUFFER, GL_TEXTURE_BUFFER, GL_TRANSFORM_FEEDBACK_BUFFER, or GL_UNIFORM_BUFFER.
        /// </para>
        /// </param>
        /// <param name="offset">
        /// <para>
        /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Specifies the size in bytes of the data store region being replaced.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the new data that will be copied into the data store.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glBufferSubData")]
        public static void BufferSubData<T3>(OpenTK.Graphics.ES30.All target, IntPtr offset, IntPtr size, [InAttribute, OutAttribute] ref T3 data)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Updates a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ATOMIC_COUNTER_BUFFER, GL_COPY_READ_BUFFER, GL_COPY_WRITE_BUFFER, GL_DRAW_INDIRECT_BUFFER, GL_DISPATCH_INDIRECT_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, GL_PIXEL_UNPACK_BUFFER, GL_QUERY_BUFFER, GL_SHADER_STORAGE_BUFFER, GL_TEXTURE_BUFFER, GL_TRANSFORM_FEEDBACK_BUFFER, or GL_UNIFORM_BUFFER.
        /// </para>
        /// </param>
        /// <param name="offset">
        /// <para>
        /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Specifies the size in bytes of the data store region being replaced.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the new data that will be copied into the data store.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glBufferSubData")]
        public static void BufferSubData(OpenTK.Graphics.ES30.BufferTarget target, IntPtr offset, IntPtr size, IntPtr data) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Updates a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ATOMIC_COUNTER_BUFFER, GL_COPY_READ_BUFFER, GL_COPY_WRITE_BUFFER, GL_DRAW_INDIRECT_BUFFER, GL_DISPATCH_INDIRECT_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, GL_PIXEL_UNPACK_BUFFER, GL_QUERY_BUFFER, GL_SHADER_STORAGE_BUFFER, GL_TEXTURE_BUFFER, GL_TRANSFORM_FEEDBACK_BUFFER, or GL_UNIFORM_BUFFER.
        /// </para>
        /// </param>
        /// <param name="offset">
        /// <para>
        /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Specifies the size in bytes of the data store region being replaced.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the new data that will be copied into the data store.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glBufferSubData")]
        [CLSCompliant(false)]
        public static void BufferSubData<T3>(OpenTK.Graphics.ES30.BufferTarget target, IntPtr offset, IntPtr size, [InAttribute, OutAttribute] T3[] data)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Updates a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ATOMIC_COUNTER_BUFFER, GL_COPY_READ_BUFFER, GL_COPY_WRITE_BUFFER, GL_DRAW_INDIRECT_BUFFER, GL_DISPATCH_INDIRECT_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, GL_PIXEL_UNPACK_BUFFER, GL_QUERY_BUFFER, GL_SHADER_STORAGE_BUFFER, GL_TEXTURE_BUFFER, GL_TRANSFORM_FEEDBACK_BUFFER, or GL_UNIFORM_BUFFER.
        /// </para>
        /// </param>
        /// <param name="offset">
        /// <para>
        /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Specifies the size in bytes of the data store region being replaced.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the new data that will be copied into the data store.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glBufferSubData")]
        [CLSCompliant(false)]
        public static void BufferSubData<T3>(OpenTK.Graphics.ES30.BufferTarget target, IntPtr offset, IntPtr size, [InAttribute, OutAttribute] T3[,] data)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Updates a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ATOMIC_COUNTER_BUFFER, GL_COPY_READ_BUFFER, GL_COPY_WRITE_BUFFER, GL_DRAW_INDIRECT_BUFFER, GL_DISPATCH_INDIRECT_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, GL_PIXEL_UNPACK_BUFFER, GL_QUERY_BUFFER, GL_SHADER_STORAGE_BUFFER, GL_TEXTURE_BUFFER, GL_TRANSFORM_FEEDBACK_BUFFER, or GL_UNIFORM_BUFFER.
        /// </para>
        /// </param>
        /// <param name="offset">
        /// <para>
        /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Specifies the size in bytes of the data store region being replaced.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the new data that will be copied into the data store.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glBufferSubData")]
        [CLSCompliant(false)]
        public static void BufferSubData<T3>(OpenTK.Graphics.ES30.BufferTarget target, IntPtr offset, IntPtr size, [InAttribute, OutAttribute] T3[,,] data)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Updates a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ATOMIC_COUNTER_BUFFER, GL_COPY_READ_BUFFER, GL_COPY_WRITE_BUFFER, GL_DRAW_INDIRECT_BUFFER, GL_DISPATCH_INDIRECT_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, GL_PIXEL_UNPACK_BUFFER, GL_QUERY_BUFFER, GL_SHADER_STORAGE_BUFFER, GL_TEXTURE_BUFFER, GL_TRANSFORM_FEEDBACK_BUFFER, or GL_UNIFORM_BUFFER.
        /// </para>
        /// </param>
        /// <param name="offset">
        /// <para>
        /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Specifies the size in bytes of the data store region being replaced.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the new data that will be copied into the data store.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glBufferSubData")]
        public static void BufferSubData<T3>(OpenTK.Graphics.ES30.BufferTarget target, IntPtr offset, IntPtr size, [InAttribute, OutAttribute] ref T3 data)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Check the completeness status of a framebuffer
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specify the target of the framebuffer completeness check.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glCheckFramebufferStatus")]
        public static OpenTK.Graphics.ES30.FramebufferErrorCode CheckFramebufferStatus(OpenTK.Graphics.ES30.All target) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Check the completeness status of a framebuffer
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specify the target of the framebuffer completeness check.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glCheckFramebufferStatus")]
        public static OpenTK.Graphics.ES30.FramebufferErrorCode CheckFramebufferStatus(OpenTK.Graphics.ES30.FramebufferTarget target) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Clear buffers to preset values
        /// </summary>
        /// <param name="mask">
        /// <para>
        /// Bitwise OR of masks that indicate the buffers to be cleared. The three masks are GL_COLOR_BUFFER_BIT, GL_DEPTH_BUFFER_BIT, and GL_STENCIL_BUFFER_BIT.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glClear")]
        public static void Clear(OpenTK.Graphics.ES30.All mask) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Clear buffers to preset values
        /// </summary>
        /// <param name="mask">
        /// <para>
        /// Bitwise OR of masks that indicate the buffers to be cleared. The three masks are GL_COLOR_BUFFER_BIT, GL_DEPTH_BUFFER_BIT, and GL_STENCIL_BUFFER_BIT.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glClear")]
        public static void Clear(OpenTK.Graphics.ES30.ClearBufferMask mask) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Clear individual buffers of the currently bound draw framebuffer
        /// </summary>
        /// <param name="buffer">
        /// <para>
        /// Specify the buffer to clear.
        /// </para>
        /// </param>
        /// <param name="drawBuffer">
        /// <para>
        /// Specify a particular draw buffer to clear.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For color buffers, a pointer to a four-element vector specifying R, G, B and A values to clear the buffer to. For depth buffers, a pointer to a single depth value to clear the buffer to. For stencil buffers, a pointer to a single stencil value to clear the buffer to.
        /// </para>
        /// </param>
        /// <param name="depth">
        /// <para>
        /// The value to clear a depth render buffer to.
        /// </para>
        /// </param>
        /// <param name="stencil">
        /// <para>
        /// The value to clear a stencil render buffer to.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glClearBufferfi")]
        public static void ClearBuffer(OpenTK.Graphics.ES30.All buffer, Int32 drawbuffer, Single depth, Int32 stencil) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Clear individual buffers of the currently bound draw framebuffer
        /// </summary>
        /// <param name="buffer">
        /// <para>
        /// Specify the buffer to clear.
        /// </para>
        /// </param>
        /// <param name="drawBuffer">
        /// <para>
        /// Specify a particular draw buffer to clear.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For color buffers, a pointer to a four-element vector specifying R, G, B and A values to clear the buffer to. For depth buffers, a pointer to a single depth value to clear the buffer to. For stencil buffers, a pointer to a single stencil value to clear the buffer to.
        /// </para>
        /// </param>
        /// <param name="depth">
        /// <para>
        /// The value to clear a depth render buffer to.
        /// </para>
        /// </param>
        /// <param name="stencil">
        /// <para>
        /// The value to clear a stencil render buffer to.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glClearBufferfi")]
        public static void ClearBuffer(OpenTK.Graphics.ES30.ClearBufferCombined buffer, Int32 drawbuffer, Single depth, Int32 stencil) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Clear individual buffers of the currently bound draw framebuffer
        /// </summary>
        /// <param name="buffer">
        /// <para>
        /// Specify the buffer to clear.
        /// </para>
        /// </param>
        /// <param name="drawBuffer">
        /// <para>
        /// Specify a particular draw buffer to clear.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For color buffers, a pointer to a four-element vector specifying R, G, B and A values to clear the buffer to. For depth buffers, a pointer to a single depth value to clear the buffer to. For stencil buffers, a pointer to a single stencil value to clear the buffer to.
        /// </para>
        /// </param>
        /// <param name="depth">
        /// <para>
        /// The value to clear a depth render buffer to.
        /// </para>
        /// </param>
        /// <param name="stencil">
        /// <para>
        /// The value to clear a stencil render buffer to.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glClearBufferfv")]
        [CLSCompliant(false)]
        public static void ClearBuffer(OpenTK.Graphics.ES30.All buffer, Int32 drawbuffer, Single[] value) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Clear individual buffers of the currently bound draw framebuffer
        /// </summary>
        /// <param name="buffer">
        /// <para>
        /// Specify the buffer to clear.
        /// </para>
        /// </param>
        /// <param name="drawBuffer">
        /// <para>
        /// Specify a particular draw buffer to clear.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For color buffers, a pointer to a four-element vector specifying R, G, B and A values to clear the buffer to. For depth buffers, a pointer to a single depth value to clear the buffer to. For stencil buffers, a pointer to a single stencil value to clear the buffer to.
        /// </para>
        /// </param>
        /// <param name="depth">
        /// <para>
        /// The value to clear a depth render buffer to.
        /// </para>
        /// </param>
        /// <param name="stencil">
        /// <para>
        /// The value to clear a stencil render buffer to.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glClearBufferfv")]
        [CLSCompliant(false)]
        public static void ClearBuffer(OpenTK.Graphics.ES30.All buffer, Int32 drawbuffer, ref Single value) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Clear individual buffers of the currently bound draw framebuffer
        /// </summary>
        /// <param name="buffer">
        /// <para>
        /// Specify the buffer to clear.
        /// </para>
        /// </param>
        /// <param name="drawBuffer">
        /// <para>
        /// Specify a particular draw buffer to clear.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For color buffers, a pointer to a four-element vector specifying R, G, B and A values to clear the buffer to. For depth buffers, a pointer to a single depth value to clear the buffer to. For stencil buffers, a pointer to a single stencil value to clear the buffer to.
        /// </para>
        /// </param>
        /// <param name="depth">
        /// <para>
        /// The value to clear a depth render buffer to.
        /// </para>
        /// </param>
        /// <param name="stencil">
        /// <para>
        /// The value to clear a stencil render buffer to.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glClearBufferfv")]
        [CLSCompliant(false)]
        public static unsafe void ClearBuffer(OpenTK.Graphics.ES30.All buffer, Int32 drawbuffer, Single* value) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Clear individual buffers of the currently bound draw framebuffer
        /// </summary>
        /// <param name="buffer">
        /// <para>
        /// Specify the buffer to clear.
        /// </para>
        /// </param>
        /// <param name="drawBuffer">
        /// <para>
        /// Specify a particular draw buffer to clear.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For color buffers, a pointer to a four-element vector specifying R, G, B and A values to clear the buffer to. For depth buffers, a pointer to a single depth value to clear the buffer to. For stencil buffers, a pointer to a single stencil value to clear the buffer to.
        /// </para>
        /// </param>
        /// <param name="depth">
        /// <para>
        /// The value to clear a depth render buffer to.
        /// </para>
        /// </param>
        /// <param name="stencil">
        /// <para>
        /// The value to clear a stencil render buffer to.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glClearBufferfv")]
        [CLSCompliant(false)]
        public static void ClearBuffer(OpenTK.Graphics.ES30.ClearBuffer buffer, Int32 drawbuffer, Single[] value) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Clear individual buffers of the currently bound draw framebuffer
        /// </summary>
        /// <param name="buffer">
        /// <para>
        /// Specify the buffer to clear.
        /// </para>
        /// </param>
        /// <param name="drawBuffer">
        /// <para>
        /// Specify a particular draw buffer to clear.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For color buffers, a pointer to a four-element vector specifying R, G, B and A values to clear the buffer to. For depth buffers, a pointer to a single depth value to clear the buffer to. For stencil buffers, a pointer to a single stencil value to clear the buffer to.
        /// </para>
        /// </param>
        /// <param name="depth">
        /// <para>
        /// The value to clear a depth render buffer to.
        /// </para>
        /// </param>
        /// <param name="stencil">
        /// <para>
        /// The value to clear a stencil render buffer to.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glClearBufferfv")]
        [CLSCompliant(false)]
        public static void ClearBuffer(OpenTK.Graphics.ES30.ClearBuffer buffer, Int32 drawbuffer, ref Single value) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Clear individual buffers of the currently bound draw framebuffer
        /// </summary>
        /// <param name="buffer">
        /// <para>
        /// Specify the buffer to clear.
        /// </para>
        /// </param>
        /// <param name="drawBuffer">
        /// <para>
        /// Specify a particular draw buffer to clear.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For color buffers, a pointer to a four-element vector specifying R, G, B and A values to clear the buffer to. For depth buffers, a pointer to a single depth value to clear the buffer to. For stencil buffers, a pointer to a single stencil value to clear the buffer to.
        /// </para>
        /// </param>
        /// <param name="depth">
        /// <para>
        /// The value to clear a depth render buffer to.
        /// </para>
        /// </param>
        /// <param name="stencil">
        /// <para>
        /// The value to clear a stencil render buffer to.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glClearBufferfv")]
        [CLSCompliant(false)]
        public static unsafe void ClearBuffer(OpenTK.Graphics.ES30.ClearBuffer buffer, Int32 drawbuffer, Single* value) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Clear individual buffers of the currently bound draw framebuffer
        /// </summary>
        /// <param name="buffer">
        /// <para>
        /// Specify the buffer to clear.
        /// </para>
        /// </param>
        /// <param name="drawBuffer">
        /// <para>
        /// Specify a particular draw buffer to clear.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For color buffers, a pointer to a four-element vector specifying R, G, B and A values to clear the buffer to. For depth buffers, a pointer to a single depth value to clear the buffer to. For stencil buffers, a pointer to a single stencil value to clear the buffer to.
        /// </para>
        /// </param>
        /// <param name="depth">
        /// <para>
        /// The value to clear a depth render buffer to.
        /// </para>
        /// </param>
        /// <param name="stencil">
        /// <para>
        /// The value to clear a stencil render buffer to.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glClearBufferiv")]
        [CLSCompliant(false)]
        public static void ClearBuffer(OpenTK.Graphics.ES30.All buffer, Int32 drawbuffer, Int32[] value) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Clear individual buffers of the currently bound draw framebuffer
        /// </summary>
        /// <param name="buffer">
        /// <para>
        /// Specify the buffer to clear.
        /// </para>
        /// </param>
        /// <param name="drawBuffer">
        /// <para>
        /// Specify a particular draw buffer to clear.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For color buffers, a pointer to a four-element vector specifying R, G, B and A values to clear the buffer to. For depth buffers, a pointer to a single depth value to clear the buffer to. For stencil buffers, a pointer to a single stencil value to clear the buffer to.
        /// </para>
        /// </param>
        /// <param name="depth">
        /// <para>
        /// The value to clear a depth render buffer to.
        /// </para>
        /// </param>
        /// <param name="stencil">
        /// <para>
        /// The value to clear a stencil render buffer to.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glClearBufferiv")]
        [CLSCompliant(false)]
        public static void ClearBuffer(OpenTK.Graphics.ES30.All buffer, Int32 drawbuffer, ref Int32 value) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Clear individual buffers of the currently bound draw framebuffer
        /// </summary>
        /// <param name="buffer">
        /// <para>
        /// Specify the buffer to clear.
        /// </para>
        /// </param>
        /// <param name="drawBuffer">
        /// <para>
        /// Specify a particular draw buffer to clear.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For color buffers, a pointer to a four-element vector specifying R, G, B and A values to clear the buffer to. For depth buffers, a pointer to a single depth value to clear the buffer to. For stencil buffers, a pointer to a single stencil value to clear the buffer to.
        /// </para>
        /// </param>
        /// <param name="depth">
        /// <para>
        /// The value to clear a depth render buffer to.
        /// </para>
        /// </param>
        /// <param name="stencil">
        /// <para>
        /// The value to clear a stencil render buffer to.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glClearBufferiv")]
        [CLSCompliant(false)]
        public static unsafe void ClearBuffer(OpenTK.Graphics.ES30.All buffer, Int32 drawbuffer, Int32* value) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Clear individual buffers of the currently bound draw framebuffer
        /// </summary>
        /// <param name="buffer">
        /// <para>
        /// Specify the buffer to clear.
        /// </para>
        /// </param>
        /// <param name="drawBuffer">
        /// <para>
        /// Specify a particular draw buffer to clear.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For color buffers, a pointer to a four-element vector specifying R, G, B and A values to clear the buffer to. For depth buffers, a pointer to a single depth value to clear the buffer to. For stencil buffers, a pointer to a single stencil value to clear the buffer to.
        /// </para>
        /// </param>
        /// <param name="depth">
        /// <para>
        /// The value to clear a depth render buffer to.
        /// </para>
        /// </param>
        /// <param name="stencil">
        /// <para>
        /// The value to clear a stencil render buffer to.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glClearBufferiv")]
        [CLSCompliant(false)]
        public static void ClearBuffer(OpenTK.Graphics.ES30.ClearBuffer buffer, Int32 drawbuffer, Int32[] value) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Clear individual buffers of the currently bound draw framebuffer
        /// </summary>
        /// <param name="buffer">
        /// <para>
        /// Specify the buffer to clear.
        /// </para>
        /// </param>
        /// <param name="drawBuffer">
        /// <para>
        /// Specify a particular draw buffer to clear.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For color buffers, a pointer to a four-element vector specifying R, G, B and A values to clear the buffer to. For depth buffers, a pointer to a single depth value to clear the buffer to. For stencil buffers, a pointer to a single stencil value to clear the buffer to.
        /// </para>
        /// </param>
        /// <param name="depth">
        /// <para>
        /// The value to clear a depth render buffer to.
        /// </para>
        /// </param>
        /// <param name="stencil">
        /// <para>
        /// The value to clear a stencil render buffer to.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glClearBufferiv")]
        [CLSCompliant(false)]
        public static void ClearBuffer(OpenTK.Graphics.ES30.ClearBuffer buffer, Int32 drawbuffer, ref Int32 value) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Clear individual buffers of the currently bound draw framebuffer
        /// </summary>
        /// <param name="buffer">
        /// <para>
        /// Specify the buffer to clear.
        /// </para>
        /// </param>
        /// <param name="drawBuffer">
        /// <para>
        /// Specify a particular draw buffer to clear.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For color buffers, a pointer to a four-element vector specifying R, G, B and A values to clear the buffer to. For depth buffers, a pointer to a single depth value to clear the buffer to. For stencil buffers, a pointer to a single stencil value to clear the buffer to.
        /// </para>
        /// </param>
        /// <param name="depth">
        /// <para>
        /// The value to clear a depth render buffer to.
        /// </para>
        /// </param>
        /// <param name="stencil">
        /// <para>
        /// The value to clear a stencil render buffer to.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glClearBufferiv")]
        [CLSCompliant(false)]
        public static unsafe void ClearBuffer(OpenTK.Graphics.ES30.ClearBuffer buffer, Int32 drawbuffer, Int32* value) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Clear individual buffers of the currently bound draw framebuffer
        /// </summary>
        /// <param name="buffer">
        /// <para>
        /// Specify the buffer to clear.
        /// </para>
        /// </param>
        /// <param name="drawBuffer">
        /// <para>
        /// Specify a particular draw buffer to clear.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For color buffers, a pointer to a four-element vector specifying R, G, B and A values to clear the buffer to. For depth buffers, a pointer to a single depth value to clear the buffer to. For stencil buffers, a pointer to a single stencil value to clear the buffer to.
        /// </para>
        /// </param>
        /// <param name="depth">
        /// <para>
        /// The value to clear a depth render buffer to.
        /// </para>
        /// </param>
        /// <param name="stencil">
        /// <para>
        /// The value to clear a stencil render buffer to.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glClearBufferuiv")]
        [CLSCompliant(false)]
        public static void ClearBuffer(OpenTK.Graphics.ES30.All buffer, Int32 drawbuffer, UInt32[] value) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Clear individual buffers of the currently bound draw framebuffer
        /// </summary>
        /// <param name="buffer">
        /// <para>
        /// Specify the buffer to clear.
        /// </para>
        /// </param>
        /// <param name="drawBuffer">
        /// <para>
        /// Specify a particular draw buffer to clear.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For color buffers, a pointer to a four-element vector specifying R, G, B and A values to clear the buffer to. For depth buffers, a pointer to a single depth value to clear the buffer to. For stencil buffers, a pointer to a single stencil value to clear the buffer to.
        /// </para>
        /// </param>
        /// <param name="depth">
        /// <para>
        /// The value to clear a depth render buffer to.
        /// </para>
        /// </param>
        /// <param name="stencil">
        /// <para>
        /// The value to clear a stencil render buffer to.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glClearBufferuiv")]
        [CLSCompliant(false)]
        public static void ClearBuffer(OpenTK.Graphics.ES30.All buffer, Int32 drawbuffer, ref UInt32 value) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Clear individual buffers of the currently bound draw framebuffer
        /// </summary>
        /// <param name="buffer">
        /// <para>
        /// Specify the buffer to clear.
        /// </para>
        /// </param>
        /// <param name="drawBuffer">
        /// <para>
        /// Specify a particular draw buffer to clear.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For color buffers, a pointer to a four-element vector specifying R, G, B and A values to clear the buffer to. For depth buffers, a pointer to a single depth value to clear the buffer to. For stencil buffers, a pointer to a single stencil value to clear the buffer to.
        /// </para>
        /// </param>
        /// <param name="depth">
        /// <para>
        /// The value to clear a depth render buffer to.
        /// </para>
        /// </param>
        /// <param name="stencil">
        /// <para>
        /// The value to clear a stencil render buffer to.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glClearBufferuiv")]
        [CLSCompliant(false)]
        public static unsafe void ClearBuffer(OpenTK.Graphics.ES30.All buffer, Int32 drawbuffer, UInt32* value) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Clear individual buffers of the currently bound draw framebuffer
        /// </summary>
        /// <param name="buffer">
        /// <para>
        /// Specify the buffer to clear.
        /// </para>
        /// </param>
        /// <param name="drawBuffer">
        /// <para>
        /// Specify a particular draw buffer to clear.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For color buffers, a pointer to a four-element vector specifying R, G, B and A values to clear the buffer to. For depth buffers, a pointer to a single depth value to clear the buffer to. For stencil buffers, a pointer to a single stencil value to clear the buffer to.
        /// </para>
        /// </param>
        /// <param name="depth">
        /// <para>
        /// The value to clear a depth render buffer to.
        /// </para>
        /// </param>
        /// <param name="stencil">
        /// <para>
        /// The value to clear a stencil render buffer to.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glClearBufferuiv")]
        [CLSCompliant(false)]
        public static void ClearBuffer(OpenTK.Graphics.ES30.ClearBuffer buffer, Int32 drawbuffer, UInt32[] value) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Clear individual buffers of the currently bound draw framebuffer
        /// </summary>
        /// <param name="buffer">
        /// <para>
        /// Specify the buffer to clear.
        /// </para>
        /// </param>
        /// <param name="drawBuffer">
        /// <para>
        /// Specify a particular draw buffer to clear.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For color buffers, a pointer to a four-element vector specifying R, G, B and A values to clear the buffer to. For depth buffers, a pointer to a single depth value to clear the buffer to. For stencil buffers, a pointer to a single stencil value to clear the buffer to.
        /// </para>
        /// </param>
        /// <param name="depth">
        /// <para>
        /// The value to clear a depth render buffer to.
        /// </para>
        /// </param>
        /// <param name="stencil">
        /// <para>
        /// The value to clear a stencil render buffer to.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glClearBufferuiv")]
        [CLSCompliant(false)]
        public static void ClearBuffer(OpenTK.Graphics.ES30.ClearBuffer buffer, Int32 drawbuffer, ref UInt32 value) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Clear individual buffers of the currently bound draw framebuffer
        /// </summary>
        /// <param name="buffer">
        /// <para>
        /// Specify the buffer to clear.
        /// </para>
        /// </param>
        /// <param name="drawBuffer">
        /// <para>
        /// Specify a particular draw buffer to clear.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For color buffers, a pointer to a four-element vector specifying R, G, B and A values to clear the buffer to. For depth buffers, a pointer to a single depth value to clear the buffer to. For stencil buffers, a pointer to a single stencil value to clear the buffer to.
        /// </para>
        /// </param>
        /// <param name="depth">
        /// <para>
        /// The value to clear a depth render buffer to.
        /// </para>
        /// </param>
        /// <param name="stencil">
        /// <para>
        /// The value to clear a stencil render buffer to.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glClearBufferuiv")]
        [CLSCompliant(false)]
        public static unsafe void ClearBuffer(OpenTK.Graphics.ES30.ClearBuffer buffer, Int32 drawbuffer, UInt32* value) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Specify clear values for the color buffers
        /// </summary>
        /// <param name="red">
        /// <para>
        /// Specify the red, green, blue, and alpha values used when the color buffers are cleared. The initial values are all 0.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glClearColor")]
        public static void ClearColor(Single red, Single green, Single blue, Single alpha) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Specify the clear value for the depth buffer
        /// </summary>
        /// <param name="depth">
        /// <para>
        /// Specifies the depth value used when the depth buffer is cleared. The initial value is 1.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glClearDepthf")]
        public static void ClearDepth(Single d) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Specify the clear value for the stencil buffer
        /// </summary>
        /// <param name="s">
        /// <para>
        /// Specifies the index used when the stencil buffer is cleared. The initial value is 0.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glClearStencil")]
        public static void ClearStencil(Int32 s) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Block and wait for a sync object to become signaled
        /// </summary>
        /// <param name="sync">
        /// <para>
        /// The sync object whose status to wait on.
        /// </para>
        /// </param>
        /// <param name="flags">
        /// <para>
        /// A bitfield controlling the command flushing behavior. flags may be GL_SYNC_FLUSH_COMMANDS_BIT.
        /// </para>
        /// </param>
        /// <param name="timeout">
        /// <para>
        /// The timeout, specified in nanoseconds, for which the implementation should wait for sync to become signaled.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glClientWaitSync")]
        [CLSCompliant(false)]
        public static OpenTK.Graphics.ES30.WaitSyncStatus ClientWaitSync(IntPtr sync, OpenTK.Graphics.ES30.All flags, Int64 timeout) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Block and wait for a sync object to become signaled
        /// </summary>
        /// <param name="sync">
        /// <para>
        /// The sync object whose status to wait on.
        /// </para>
        /// </param>
        /// <param name="flags">
        /// <para>
        /// A bitfield controlling the command flushing behavior. flags may be GL_SYNC_FLUSH_COMMANDS_BIT.
        /// </para>
        /// </param>
        /// <param name="timeout">
        /// <para>
        /// The timeout, specified in nanoseconds, for which the implementation should wait for sync to become signaled.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glClientWaitSync")]
        [CLSCompliant(false)]
        public static OpenTK.Graphics.ES30.WaitSyncStatus ClientWaitSync(IntPtr sync, OpenTK.Graphics.ES30.All flags, UInt64 timeout) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Block and wait for a sync object to become signaled
        /// </summary>
        /// <param name="sync">
        /// <para>
        /// The sync object whose status to wait on.
        /// </para>
        /// </param>
        /// <param name="flags">
        /// <para>
        /// A bitfield controlling the command flushing behavior. flags may be GL_SYNC_FLUSH_COMMANDS_BIT.
        /// </para>
        /// </param>
        /// <param name="timeout">
        /// <para>
        /// The timeout, specified in nanoseconds, for which the implementation should wait for sync to become signaled.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glClientWaitSync")]
        [CLSCompliant(false)]
        public static OpenTK.Graphics.ES30.WaitSyncStatus ClientWaitSync(IntPtr sync, OpenTK.Graphics.ES30.ClientWaitSyncFlags flags, Int64 timeout) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Block and wait for a sync object to become signaled
        /// </summary>
        /// <param name="sync">
        /// <para>
        /// The sync object whose status to wait on.
        /// </para>
        /// </param>
        /// <param name="flags">
        /// <para>
        /// A bitfield controlling the command flushing behavior. flags may be GL_SYNC_FLUSH_COMMANDS_BIT.
        /// </para>
        /// </param>
        /// <param name="timeout">
        /// <para>
        /// The timeout, specified in nanoseconds, for which the implementation should wait for sync to become signaled.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glClientWaitSync")]
        [CLSCompliant(false)]
        public static OpenTK.Graphics.ES30.WaitSyncStatus ClientWaitSync(IntPtr sync, OpenTK.Graphics.ES30.ClientWaitSyncFlags flags, UInt64 timeout) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Enable and disable writing of frame buffer color components
        /// </summary>
        /// <param name="buf">
        /// <para>
        /// For glColorMaski, specifies the index of the draw buffer whose color mask to set.
        /// </para>
        /// </param>
        /// <param name="red">
        /// <para>
        /// Specify whether red, green, blue, and alpha are to be written into the frame buffer. The initial values are all GL_TRUE, indicating that the color components are written.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glColorMask")]
        public static void ColorMask(bool red, bool green, bool blue, bool alpha) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Compiles a shader object
        /// </summary>
        /// <param name="shader">
        /// <para>
        /// Specifies the shader object to be compiled.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glCompileShader")]
        [CLSCompliant(false)]
        public static void CompileShader(Int32 shader) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Compiles a shader object
        /// </summary>
        /// <param name="shader">
        /// <para>
        /// Specifies the shader object to be compiled.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glCompileShader")]
        [CLSCompliant(false)]
        public static void CompileShader(UInt32 shader) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Specify a two-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_2D, GL_PROXY_TEXTURE_2D, GL_TEXTURE_1D_ARRAY, GL_PROXY_TEXTURE_1D_ARRAY, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, GL_TEXTURE_CUBE_MAP_NEGATIVE_Z, or GL_PROXY_TEXTURE_CUBE_MAP.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// Specifies the format of the compressed image data stored at address data.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture image. All implementations support 2D texture and cube map texture images that are at least 16384 texels wide.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture image. All implementations support 2D texture and cube map texture images that are at least 16384 texels high.
        /// </para>
        /// </param>
        /// <param name="border">
        /// <para>
        /// This value must be 0.
        /// </para>
        /// </param>
        /// <param name="imageSize">
        /// <para>
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the compressed image data in memory.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glCompressedTexImage2D")]
        public static void CompressedTexImage2D(OpenTK.Graphics.ES30.All target, Int32 level, OpenTK.Graphics.ES30.All internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, IntPtr data) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Specify a two-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_2D, GL_PROXY_TEXTURE_2D, GL_TEXTURE_1D_ARRAY, GL_PROXY_TEXTURE_1D_ARRAY, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, GL_TEXTURE_CUBE_MAP_NEGATIVE_Z, or GL_PROXY_TEXTURE_CUBE_MAP.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// Specifies the format of the compressed image data stored at address data.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture image. All implementations support 2D texture and cube map texture images that are at least 16384 texels wide.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture image. All implementations support 2D texture and cube map texture images that are at least 16384 texels high.
        /// </para>
        /// </param>
        /// <param name="border">
        /// <para>
        /// This value must be 0.
        /// </para>
        /// </param>
        /// <param name="imageSize">
        /// <para>
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the compressed image data in memory.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glCompressedTexImage2D")]
        [CLSCompliant(false)]
        public static void CompressedTexImage2D<T7>(OpenTK.Graphics.ES30.All target, Int32 level, OpenTK.Graphics.ES30.All internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T7[] data)
            where T7 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Specify a two-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_2D, GL_PROXY_TEXTURE_2D, GL_TEXTURE_1D_ARRAY, GL_PROXY_TEXTURE_1D_ARRAY, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, GL_TEXTURE_CUBE_MAP_NEGATIVE_Z, or GL_PROXY_TEXTURE_CUBE_MAP.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// Specifies the format of the compressed image data stored at address data.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture image. All implementations support 2D texture and cube map texture images that are at least 16384 texels wide.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture image. All implementations support 2D texture and cube map texture images that are at least 16384 texels high.
        /// </para>
        /// </param>
        /// <param name="border">
        /// <para>
        /// This value must be 0.
        /// </para>
        /// </param>
        /// <param name="imageSize">
        /// <para>
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the compressed image data in memory.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glCompressedTexImage2D")]
        [CLSCompliant(false)]
        public static void CompressedTexImage2D<T7>(OpenTK.Graphics.ES30.All target, Int32 level, OpenTK.Graphics.ES30.All internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T7[,] data)
            where T7 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Specify a two-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_2D, GL_PROXY_TEXTURE_2D, GL_TEXTURE_1D_ARRAY, GL_PROXY_TEXTURE_1D_ARRAY, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, GL_TEXTURE_CUBE_MAP_NEGATIVE_Z, or GL_PROXY_TEXTURE_CUBE_MAP.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// Specifies the format of the compressed image data stored at address data.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture image. All implementations support 2D texture and cube map texture images that are at least 16384 texels wide.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture image. All implementations support 2D texture and cube map texture images that are at least 16384 texels high.
        /// </para>
        /// </param>
        /// <param name="border">
        /// <para>
        /// This value must be 0.
        /// </para>
        /// </param>
        /// <param name="imageSize">
        /// <para>
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the compressed image data in memory.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glCompressedTexImage2D")]
        [CLSCompliant(false)]
        public static void CompressedTexImage2D<T7>(OpenTK.Graphics.ES30.All target, Int32 level, OpenTK.Graphics.ES30.All internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T7[,,] data)
            where T7 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Specify a two-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_2D, GL_PROXY_TEXTURE_2D, GL_TEXTURE_1D_ARRAY, GL_PROXY_TEXTURE_1D_ARRAY, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, GL_TEXTURE_CUBE_MAP_NEGATIVE_Z, or GL_PROXY_TEXTURE_CUBE_MAP.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// Specifies the format of the compressed image data stored at address data.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture image. All implementations support 2D texture and cube map texture images that are at least 16384 texels wide.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture image. All implementations support 2D texture and cube map texture images that are at least 16384 texels high.
        /// </para>
        /// </param>
        /// <param name="border">
        /// <para>
        /// This value must be 0.
        /// </para>
        /// </param>
        /// <param name="imageSize">
        /// <para>
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the compressed image data in memory.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glCompressedTexImage2D")]
        public static void CompressedTexImage2D<T7>(OpenTK.Graphics.ES30.All target, Int32 level, OpenTK.Graphics.ES30.All internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] ref T7 data)
            where T7 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Specify a two-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_2D, GL_PROXY_TEXTURE_2D, GL_TEXTURE_1D_ARRAY, GL_PROXY_TEXTURE_1D_ARRAY, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, GL_TEXTURE_CUBE_MAP_NEGATIVE_Z, or GL_PROXY_TEXTURE_CUBE_MAP.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// Specifies the format of the compressed image data stored at address data.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture image. All implementations support 2D texture and cube map texture images that are at least 16384 texels wide.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture image. All implementations support 2D texture and cube map texture images that are at least 16384 texels high.
        /// </para>
        /// </param>
        /// <param name="border">
        /// <para>
        /// This value must be 0.
        /// </para>
        /// </param>
        /// <param name="imageSize">
        /// <para>
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the compressed image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glCompressedTexImage2D")]
        public static void CompressedTexImage2D(OpenTK.Graphics.ES30.TextureTarget2d target, Int32 level, OpenTK.Graphics.ES30.CompressedInternalFormat internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, IntPtr data) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Specify a two-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_2D, GL_PROXY_TEXTURE_2D, GL_TEXTURE_1D_ARRAY, GL_PROXY_TEXTURE_1D_ARRAY, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, GL_TEXTURE_CUBE_MAP_NEGATIVE_Z, or GL_PROXY_TEXTURE_CUBE_MAP.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// Specifies the format of the compressed image data stored at address data.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture image. All implementations support 2D texture and cube map texture images that are at least 16384 texels wide.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture image. All implementations support 2D texture and cube map texture images that are at least 16384 texels high.
        /// </para>
        /// </param>
        /// <param name="border">
        /// <para>
        /// This value must be 0.
        /// </para>
        /// </param>
        /// <param name="imageSize">
        /// <para>
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the compressed image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glCompressedTexImage2D")]
        [CLSCompliant(false)]
        public static void CompressedTexImage2D<T7>(OpenTK.Graphics.ES30.TextureTarget2d target, Int32 level, OpenTK.Graphics.ES30.CompressedInternalFormat internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T7[] data)
            where T7 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Specify a two-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_2D, GL_PROXY_TEXTURE_2D, GL_TEXTURE_1D_ARRAY, GL_PROXY_TEXTURE_1D_ARRAY, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, GL_TEXTURE_CUBE_MAP_NEGATIVE_Z, or GL_PROXY_TEXTURE_CUBE_MAP.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// Specifies the format of the compressed image data stored at address data.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture image. All implementations support 2D texture and cube map texture images that are at least 16384 texels wide.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture image. All implementations support 2D texture and cube map texture images that are at least 16384 texels high.
        /// </para>
        /// </param>
        /// <param name="border">
        /// <para>
        /// This value must be 0.
        /// </para>
        /// </param>
        /// <param name="imageSize">
        /// <para>
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the compressed image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glCompressedTexImage2D")]
        [CLSCompliant(false)]
        public static void CompressedTexImage2D<T7>(OpenTK.Graphics.ES30.TextureTarget2d target, Int32 level, OpenTK.Graphics.ES30.CompressedInternalFormat internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T7[,] data)
            where T7 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Specify a two-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_2D, GL_PROXY_TEXTURE_2D, GL_TEXTURE_1D_ARRAY, GL_PROXY_TEXTURE_1D_ARRAY, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, GL_TEXTURE_CUBE_MAP_NEGATIVE_Z, or GL_PROXY_TEXTURE_CUBE_MAP.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// Specifies the format of the compressed image data stored at address data.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture image. All implementations support 2D texture and cube map texture images that are at least 16384 texels wide.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture image. All implementations support 2D texture and cube map texture images that are at least 16384 texels high.
        /// </para>
        /// </param>
        /// <param name="border">
        /// <para>
        /// This value must be 0.
        /// </para>
        /// </param>
        /// <param name="imageSize">
        /// <para>
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the compressed image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glCompressedTexImage2D")]
        [CLSCompliant(false)]
        public static void CompressedTexImage2D<T7>(OpenTK.Graphics.ES30.TextureTarget2d target, Int32 level, OpenTK.Graphics.ES30.CompressedInternalFormat internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T7[,,] data)
            where T7 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Specify a two-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_2D, GL_PROXY_TEXTURE_2D, GL_TEXTURE_1D_ARRAY, GL_PROXY_TEXTURE_1D_ARRAY, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, GL_TEXTURE_CUBE_MAP_NEGATIVE_Z, or GL_PROXY_TEXTURE_CUBE_MAP.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// Specifies the format of the compressed image data stored at address data.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture image. All implementations support 2D texture and cube map texture images that are at least 16384 texels wide.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture image. All implementations support 2D texture and cube map texture images that are at least 16384 texels high.
        /// </para>
        /// </param>
        /// <param name="border">
        /// <para>
        /// This value must be 0.
        /// </para>
        /// </param>
        /// <param name="imageSize">
        /// <para>
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the compressed image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glCompressedTexImage2D")]
        public static void CompressedTexImage2D<T7>(OpenTK.Graphics.ES30.TextureTarget2d target, Int32 level, OpenTK.Graphics.ES30.CompressedInternalFormat internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] ref T7 data)
            where T7 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Specify a three-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_3D, GL_PROXY_TEXTURE_3D, GL_TEXTURE_2D_ARRAY or GL_PROXY_TEXTURE_2D_ARRAY.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// Specifies the format of the compressed image data stored at address data.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture image. All implementations support 3D texture images that are at least 16 texels wide.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture image. All implementations support 3D texture images that are at least 16 texels high.
        /// </para>
        /// </param>
        /// <param name="depth">
        /// <para>
        /// Specifies the depth of the texture image. All implementations support 3D texture images that are at least 16 texels deep.
        /// </para>
        /// </param>
        /// <param name="border">
        /// <para>
        /// This value must be 0.
        /// </para>
        /// </param>
        /// <param name="imageSize">
        /// <para>
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the compressed image data in memory.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glCompressedTexImage3D")]
        public static void CompressedTexImage3D(OpenTK.Graphics.ES30.All target, Int32 level, OpenTK.Graphics.ES30.All internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, IntPtr data) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Specify a three-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_3D, GL_PROXY_TEXTURE_3D, GL_TEXTURE_2D_ARRAY or GL_PROXY_TEXTURE_2D_ARRAY.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// Specifies the format of the compressed image data stored at address data.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture image. All implementations support 3D texture images that are at least 16 texels wide.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture image. All implementations support 3D texture images that are at least 16 texels high.
        /// </para>
        /// </param>
        /// <param name="depth">
        /// <para>
        /// Specifies the depth of the texture image. All implementations support 3D texture images that are at least 16 texels deep.
        /// </para>
        /// </param>
        /// <param name="border">
        /// <para>
        /// This value must be 0.
        /// </para>
        /// </param>
        /// <param name="imageSize">
        /// <para>
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the compressed image data in memory.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glCompressedTexImage3D")]
        [CLSCompliant(false)]
        public static void CompressedTexImage3D<T8>(OpenTK.Graphics.ES30.All target, Int32 level, OpenTK.Graphics.ES30.All internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T8[] data)
            where T8 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Specify a three-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_3D, GL_PROXY_TEXTURE_3D, GL_TEXTURE_2D_ARRAY or GL_PROXY_TEXTURE_2D_ARRAY.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// Specifies the format of the compressed image data stored at address data.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture image. All implementations support 3D texture images that are at least 16 texels wide.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture image. All implementations support 3D texture images that are at least 16 texels high.
        /// </para>
        /// </param>
        /// <param name="depth">
        /// <para>
        /// Specifies the depth of the texture image. All implementations support 3D texture images that are at least 16 texels deep.
        /// </para>
        /// </param>
        /// <param name="border">
        /// <para>
        /// This value must be 0.
        /// </para>
        /// </param>
        /// <param name="imageSize">
        /// <para>
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the compressed image data in memory.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glCompressedTexImage3D")]
        [CLSCompliant(false)]
        public static void CompressedTexImage3D<T8>(OpenTK.Graphics.ES30.All target, Int32 level, OpenTK.Graphics.ES30.All internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T8[,] data)
            where T8 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Specify a three-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_3D, GL_PROXY_TEXTURE_3D, GL_TEXTURE_2D_ARRAY or GL_PROXY_TEXTURE_2D_ARRAY.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// Specifies the format of the compressed image data stored at address data.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture image. All implementations support 3D texture images that are at least 16 texels wide.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture image. All implementations support 3D texture images that are at least 16 texels high.
        /// </para>
        /// </param>
        /// <param name="depth">
        /// <para>
        /// Specifies the depth of the texture image. All implementations support 3D texture images that are at least 16 texels deep.
        /// </para>
        /// </param>
        /// <param name="border">
        /// <para>
        /// This value must be 0.
        /// </para>
        /// </param>
        /// <param name="imageSize">
        /// <para>
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the compressed image data in memory.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glCompressedTexImage3D")]
        [CLSCompliant(false)]
        public static void CompressedTexImage3D<T8>(OpenTK.Graphics.ES30.All target, Int32 level, OpenTK.Graphics.ES30.All internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T8[,,] data)
            where T8 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Specify a three-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_3D, GL_PROXY_TEXTURE_3D, GL_TEXTURE_2D_ARRAY or GL_PROXY_TEXTURE_2D_ARRAY.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// Specifies the format of the compressed image data stored at address data.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture image. All implementations support 3D texture images that are at least 16 texels wide.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture image. All implementations support 3D texture images that are at least 16 texels high.
        /// </para>
        /// </param>
        /// <param name="depth">
        /// <para>
        /// Specifies the depth of the texture image. All implementations support 3D texture images that are at least 16 texels deep.
        /// </para>
        /// </param>
        /// <param name="border">
        /// <para>
        /// This value must be 0.
        /// </para>
        /// </param>
        /// <param name="imageSize">
        /// <para>
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the compressed image data in memory.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glCompressedTexImage3D")]
        public static void CompressedTexImage3D<T8>(OpenTK.Graphics.ES30.All target, Int32 level, OpenTK.Graphics.ES30.All internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] ref T8 data)
            where T8 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Specify a three-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_3D, GL_PROXY_TEXTURE_3D, GL_TEXTURE_2D_ARRAY or GL_PROXY_TEXTURE_2D_ARRAY.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// Specifies the format of the compressed image data stored at address data.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture image. All implementations support 3D texture images that are at least 16 texels wide.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture image. All implementations support 3D texture images that are at least 16 texels high.
        /// </para>
        /// </param>
        /// <param name="depth">
        /// <para>
        /// Specifies the depth of the texture image. All implementations support 3D texture images that are at least 16 texels deep.
        /// </para>
        /// </param>
        /// <param name="border">
        /// <para>
        /// This value must be 0.
        /// </para>
        /// </param>
        /// <param name="imageSize">
        /// <para>
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the compressed image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glCompressedTexImage3D")]
        public static void CompressedTexImage3D(OpenTK.Graphics.ES30.TextureTarget3d target, Int32 level, OpenTK.Graphics.ES30.CompressedInternalFormat internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, IntPtr data) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Specify a three-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_3D, GL_PROXY_TEXTURE_3D, GL_TEXTURE_2D_ARRAY or GL_PROXY_TEXTURE_2D_ARRAY.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// Specifies the format of the compressed image data stored at address data.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture image. All implementations support 3D texture images that are at least 16 texels wide.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture image. All implementations support 3D texture images that are at least 16 texels high.
        /// </para>
        /// </param>
        /// <param name="depth">
        /// <para>
        /// Specifies the depth of the texture image. All implementations support 3D texture images that are at least 16 texels deep.
        /// </para>
        /// </param>
        /// <param name="border">
        /// <para>
        /// This value must be 0.
        /// </para>
        /// </param>
        /// <param name="imageSize">
        /// <para>
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the compressed image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glCompressedTexImage3D")]
        [CLSCompliant(false)]
        public static void CompressedTexImage3D<T8>(OpenTK.Graphics.ES30.TextureTarget3d target, Int32 level, OpenTK.Graphics.ES30.CompressedInternalFormat internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T8[] data)
            where T8 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Specify a three-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_3D, GL_PROXY_TEXTURE_3D, GL_TEXTURE_2D_ARRAY or GL_PROXY_TEXTURE_2D_ARRAY.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// Specifies the format of the compressed image data stored at address data.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture image. All implementations support 3D texture images that are at least 16 texels wide.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture image. All implementations support 3D texture images that are at least 16 texels high.
        /// </para>
        /// </param>
        /// <param name="depth">
        /// <para>
        /// Specifies the depth of the texture image. All implementations support 3D texture images that are at least 16 texels deep.
        /// </para>
        /// </param>
        /// <param name="border">
        /// <para>
        /// This value must be 0.
        /// </para>
        /// </param>
        /// <param name="imageSize">
        /// <para>
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the compressed image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glCompressedTexImage3D")]
        [CLSCompliant(false)]
        public static void CompressedTexImage3D<T8>(OpenTK.Graphics.ES30.TextureTarget3d target, Int32 level, OpenTK.Graphics.ES30.CompressedInternalFormat internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T8[,] data)
            where T8 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Specify a three-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_3D, GL_PROXY_TEXTURE_3D, GL_TEXTURE_2D_ARRAY or GL_PROXY_TEXTURE_2D_ARRAY.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// Specifies the format of the compressed image data stored at address data.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture image. All implementations support 3D texture images that are at least 16 texels wide.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture image. All implementations support 3D texture images that are at least 16 texels high.
        /// </para>
        /// </param>
        /// <param name="depth">
        /// <para>
        /// Specifies the depth of the texture image. All implementations support 3D texture images that are at least 16 texels deep.
        /// </para>
        /// </param>
        /// <param name="border">
        /// <para>
        /// This value must be 0.
        /// </para>
        /// </param>
        /// <param name="imageSize">
        /// <para>
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the compressed image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glCompressedTexImage3D")]
        [CLSCompliant(false)]
        public static void CompressedTexImage3D<T8>(OpenTK.Graphics.ES30.TextureTarget3d target, Int32 level, OpenTK.Graphics.ES30.CompressedInternalFormat internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T8[,,] data)
            where T8 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Specify a three-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_3D, GL_PROXY_TEXTURE_3D, GL_TEXTURE_2D_ARRAY or GL_PROXY_TEXTURE_2D_ARRAY.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// Specifies the format of the compressed image data stored at address data.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture image. All implementations support 3D texture images that are at least 16 texels wide.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture image. All implementations support 3D texture images that are at least 16 texels high.
        /// </para>
        /// </param>
        /// <param name="depth">
        /// <para>
        /// Specifies the depth of the texture image. All implementations support 3D texture images that are at least 16 texels deep.
        /// </para>
        /// </param>
        /// <param name="border">
        /// <para>
        /// This value must be 0.
        /// </para>
        /// </param>
        /// <param name="imageSize">
        /// <para>
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the compressed image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glCompressedTexImage3D")]
        public static void CompressedTexImage3D<T8>(OpenTK.Graphics.ES30.TextureTarget3d target, Int32 level, OpenTK.Graphics.ES30.CompressedInternalFormat internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] ref T8 data)
            where T8 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Specify a two-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_2D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, or GL_TEXTURE_CUBE_MAP_NEGATIVE_Z.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="xoffset">
        /// <para>
        /// Specifies a texel offset in the x direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="yoffset">
        /// <para>
        /// Specifies a texel offset in the y direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the compressed image data stored at address data.
        /// </para>
        /// </param>
        /// <param name="imageSize">
        /// <para>
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the compressed image data in memory.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glCompressedTexSubImage2D")]
        public static void CompressedTexSubImage2D(OpenTK.Graphics.ES30.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.ES30.All format, Int32 imageSize, IntPtr data) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Specify a two-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_2D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, or GL_TEXTURE_CUBE_MAP_NEGATIVE_Z.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="xoffset">
        /// <para>
        /// Specifies a texel offset in the x direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="yoffset">
        /// <para>
        /// Specifies a texel offset in the y direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the compressed image data stored at address data.
        /// </para>
        /// </param>
        /// <param name="imageSize">
        /// <para>
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the compressed image data in memory.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glCompressedTexSubImage2D")]
        [CLSCompliant(false)]
        public static void CompressedTexSubImage2D<T8>(OpenTK.Graphics.ES30.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.ES30.All format, Int32 imageSize, [InAttribute, OutAttribute] T8[] data)
            where T8 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Specify a two-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_2D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, or GL_TEXTURE_CUBE_MAP_NEGATIVE_Z.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="xoffset">
        /// <para>
        /// Specifies a texel offset in the x direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="yoffset">
        /// <para>
        /// Specifies a texel offset in the y direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the compressed image data stored at address data.
        /// </para>
        /// </param>
        /// <param name="imageSize">
        /// <para>
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the compressed image data in memory.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glCompressedTexSubImage2D")]
        [CLSCompliant(false)]
        public static void CompressedTexSubImage2D<T8>(OpenTK.Graphics.ES30.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.ES30.All format, Int32 imageSize, [InAttribute, OutAttribute] T8[,] data)
            where T8 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Specify a two-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_2D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, or GL_TEXTURE_CUBE_MAP_NEGATIVE_Z.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="xoffset">
        /// <para>
        /// Specifies a texel offset in the x direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="yoffset">
        /// <para>
        /// Specifies a texel offset in the y direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the compressed image data stored at address data.
        /// </para>
        /// </param>
        /// <param name="imageSize">
        /// <para>
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the compressed image data in memory.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glCompressedTexSubImage2D")]
        [CLSCompliant(false)]
        public static void CompressedTexSubImage2D<T8>(OpenTK.Graphics.ES30.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.ES30.All format, Int32 imageSize, [InAttribute, OutAttribute] T8[,,] data)
            where T8 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Specify a two-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_2D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, or GL_TEXTURE_CUBE_MAP_NEGATIVE_Z.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="xoffset">
        /// <para>
        /// Specifies a texel offset in the x direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="yoffset">
        /// <para>
        /// Specifies a texel offset in the y direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the compressed image data stored at address data.
        /// </para>
        /// </param>
        /// <param name="imageSize">
        /// <para>
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the compressed image data in memory.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glCompressedTexSubImage2D")]
        public static void CompressedTexSubImage2D<T8>(OpenTK.Graphics.ES30.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.ES30.All format, Int32 imageSize, [InAttribute, OutAttribute] ref T8 data)
            where T8 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Specify a two-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_2D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, or GL_TEXTURE_CUBE_MAP_NEGATIVE_Z.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="xoffset">
        /// <para>
        /// Specifies a texel offset in the x direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="yoffset">
        /// <para>
        /// Specifies a texel offset in the y direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the compressed image data stored at address data.
        /// </para>
        /// </param>
        /// <param name="imageSize">
        /// <para>
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the compressed image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glCompressedTexSubImage2D")]
        public static void CompressedTexSubImage2D(OpenTK.Graphics.ES30.TextureTarget2d target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.ES30.PixelFormat format, Int32 imageSize, IntPtr data) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Specify a two-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_2D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, or GL_TEXTURE_CUBE_MAP_NEGATIVE_Z.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="xoffset">
        /// <para>
        /// Specifies a texel offset in the x direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="yoffset">
        /// <para>
        /// Specifies a texel offset in the y direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the compressed image data stored at address data.
        /// </para>
        /// </param>
        /// <param name="imageSize">
        /// <para>
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the compressed image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glCompressedTexSubImage2D")]
        [CLSCompliant(false)]
        public static void CompressedTexSubImage2D<T8>(OpenTK.Graphics.ES30.TextureTarget2d target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.ES30.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] T8[] data)
            where T8 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Specify a two-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_2D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, or GL_TEXTURE_CUBE_MAP_NEGATIVE_Z.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="xoffset">
        /// <para>
        /// Specifies a texel offset in the x direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="yoffset">
        /// <para>
        /// Specifies a texel offset in the y direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the compressed image data stored at address data.
        /// </para>
        /// </param>
        /// <param name="imageSize">
        /// <para>
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the compressed image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glCompressedTexSubImage2D")]
        [CLSCompliant(false)]
        public static void CompressedTexSubImage2D<T8>(OpenTK.Graphics.ES30.TextureTarget2d target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.ES30.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] T8[,] data)
            where T8 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Specify a two-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_2D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, or GL_TEXTURE_CUBE_MAP_NEGATIVE_Z.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="xoffset">
        /// <para>
        /// Specifies a texel offset in the x direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="yoffset">
        /// <para>
        /// Specifies a texel offset in the y direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the compressed image data stored at address data.
        /// </para>
        /// </param>
        /// <param name="imageSize">
        /// <para>
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the compressed image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glCompressedTexSubImage2D")]
        [CLSCompliant(false)]
        public static void CompressedTexSubImage2D<T8>(OpenTK.Graphics.ES30.TextureTarget2d target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.ES30.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] T8[,,] data)
            where T8 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Specify a two-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_2D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, or GL_TEXTURE_CUBE_MAP_NEGATIVE_Z.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="xoffset">
        /// <para>
        /// Specifies a texel offset in the x direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="yoffset">
        /// <para>
        /// Specifies a texel offset in the y direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the compressed image data stored at address data.
        /// </para>
        /// </param>
        /// <param name="imageSize">
        /// <para>
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the compressed image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glCompressedTexSubImage2D")]
        public static void CompressedTexSubImage2D<T8>(OpenTK.Graphics.ES30.TextureTarget2d target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.ES30.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] ref T8 data)
            where T8 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Specify a three-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_3D.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="xoffset">
        /// <para>
        /// Specifies a texel offset in the x direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="yoffset">
        /// <para>
        /// Specifies a texel offset in the y direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="depth">
        /// <para>
        /// Specifies the depth of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the compressed image data stored at address data.
        /// </para>
        /// </param>
        /// <param name="imageSize">
        /// <para>
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the compressed image data in memory.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glCompressedTexSubImage3D")]
        public static void CompressedTexSubImage3D(OpenTK.Graphics.ES30.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.ES30.All format, Int32 imageSize, IntPtr data) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Specify a three-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_3D.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="xoffset">
        /// <para>
        /// Specifies a texel offset in the x direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="yoffset">
        /// <para>
        /// Specifies a texel offset in the y direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="depth">
        /// <para>
        /// Specifies the depth of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the compressed image data stored at address data.
        /// </para>
        /// </param>
        /// <param name="imageSize">
        /// <para>
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the compressed image data in memory.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glCompressedTexSubImage3D")]
        [CLSCompliant(false)]
        public static void CompressedTexSubImage3D<T10>(OpenTK.Graphics.ES30.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.ES30.All format, Int32 imageSize, [InAttribute, OutAttribute] T10[] data)
            where T10 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Specify a three-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_3D.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="xoffset">
        /// <para>
        /// Specifies a texel offset in the x direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="yoffset">
        /// <para>
        /// Specifies a texel offset in the y direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="depth">
        /// <para>
        /// Specifies the depth of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the compressed image data stored at address data.
        /// </para>
        /// </param>
        /// <param name="imageSize">
        /// <para>
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the compressed image data in memory.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glCompressedTexSubImage3D")]
        [CLSCompliant(false)]
        public static void CompressedTexSubImage3D<T10>(OpenTK.Graphics.ES30.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.ES30.All format, Int32 imageSize, [InAttribute, OutAttribute] T10[,] data)
            where T10 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Specify a three-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_3D.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="xoffset">
        /// <para>
        /// Specifies a texel offset in the x direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="yoffset">
        /// <para>
        /// Specifies a texel offset in the y direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="depth">
        /// <para>
        /// Specifies the depth of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the compressed image data stored at address data.
        /// </para>
        /// </param>
        /// <param name="imageSize">
        /// <para>
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the compressed image data in memory.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glCompressedTexSubImage3D")]
        [CLSCompliant(false)]
        public static void CompressedTexSubImage3D<T10>(OpenTK.Graphics.ES30.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.ES30.All format, Int32 imageSize, [InAttribute, OutAttribute] T10[,,] data)
            where T10 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Specify a three-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_3D.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="xoffset">
        /// <para>
        /// Specifies a texel offset in the x direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="yoffset">
        /// <para>
        /// Specifies a texel offset in the y direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="depth">
        /// <para>
        /// Specifies the depth of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the compressed image data stored at address data.
        /// </para>
        /// </param>
        /// <param name="imageSize">
        /// <para>
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the compressed image data in memory.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glCompressedTexSubImage3D")]
        public static void CompressedTexSubImage3D<T10>(OpenTK.Graphics.ES30.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.ES30.All format, Int32 imageSize, [InAttribute, OutAttribute] ref T10 data)
            where T10 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Specify a three-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_3D.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="xoffset">
        /// <para>
        /// Specifies a texel offset in the x direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="yoffset">
        /// <para>
        /// Specifies a texel offset in the y direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="depth">
        /// <para>
        /// Specifies the depth of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the compressed image data stored at address data.
        /// </para>
        /// </param>
        /// <param name="imageSize">
        /// <para>
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the compressed image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glCompressedTexSubImage3D")]
        public static void CompressedTexSubImage3D(OpenTK.Graphics.ES30.TextureTarget3d target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.ES30.PixelFormat format, Int32 imageSize, IntPtr data) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Specify a three-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_3D.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="xoffset">
        /// <para>
        /// Specifies a texel offset in the x direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="yoffset">
        /// <para>
        /// Specifies a texel offset in the y direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="depth">
        /// <para>
        /// Specifies the depth of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the compressed image data stored at address data.
        /// </para>
        /// </param>
        /// <param name="imageSize">
        /// <para>
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the compressed image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glCompressedTexSubImage3D")]
        [CLSCompliant(false)]
        public static void CompressedTexSubImage3D<T10>(OpenTK.Graphics.ES30.TextureTarget3d target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.ES30.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] T10[] data)
            where T10 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Specify a three-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_3D.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="xoffset">
        /// <para>
        /// Specifies a texel offset in the x direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="yoffset">
        /// <para>
        /// Specifies a texel offset in the y direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="depth">
        /// <para>
        /// Specifies the depth of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the compressed image data stored at address data.
        /// </para>
        /// </param>
        /// <param name="imageSize">
        /// <para>
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the compressed image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glCompressedTexSubImage3D")]
        [CLSCompliant(false)]
        public static void CompressedTexSubImage3D<T10>(OpenTK.Graphics.ES30.TextureTarget3d target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.ES30.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] T10[,] data)
            where T10 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Specify a three-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_3D.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="xoffset">
        /// <para>
        /// Specifies a texel offset in the x direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="yoffset">
        /// <para>
        /// Specifies a texel offset in the y direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="depth">
        /// <para>
        /// Specifies the depth of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the compressed image data stored at address data.
        /// </para>
        /// </param>
        /// <param name="imageSize">
        /// <para>
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the compressed image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glCompressedTexSubImage3D")]
        [CLSCompliant(false)]
        public static void CompressedTexSubImage3D<T10>(OpenTK.Graphics.ES30.TextureTarget3d target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.ES30.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] T10[,,] data)
            where T10 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Specify a three-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_3D.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="xoffset">
        /// <para>
        /// Specifies a texel offset in the x direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="yoffset">
        /// <para>
        /// Specifies a texel offset in the y direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="depth">
        /// <para>
        /// Specifies the depth of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the compressed image data stored at address data.
        /// </para>
        /// </param>
        /// <param name="imageSize">
        /// <para>
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the compressed image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glCompressedTexSubImage3D")]
        public static void CompressedTexSubImage3D<T10>(OpenTK.Graphics.ES30.TextureTarget3d target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.ES30.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] ref T10 data)
            where T10 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Copy part of the data store of a buffer object to the data store of another buffer object
        /// </summary>
        /// <param name="readtarget">
        /// <para>
        /// Specifies the target from whose data store data should be read.
        /// </para>
        /// </param>
        /// <param name="writetarget">
        /// <para>
        /// Specifies the target to whose data store data should be written.
        /// </para>
        /// </param>
        /// <param name="readoffset">
        /// <para>
        /// Specifies the offset, in basic machine units, within the data store of readtarget from which data should be read.
        /// </para>
        /// </param>
        /// <param name="writeoffset">
        /// <para>
        /// Specifies the offset, in basic machine units, within the data store of writetarget to which data should be written.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Specifies the size, in basic machine units, of the data to be copied from readtarget to writetarget.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glCopyBufferSubData")]
        public static void CopyBufferSubData(OpenTK.Graphics.ES30.All readTarget, OpenTK.Graphics.ES30.All writeTarget, IntPtr readOffset, IntPtr writeOffset, IntPtr size) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Copy part of the data store of a buffer object to the data store of another buffer object
        /// </summary>
        /// <param name="readtarget">
        /// <para>
        /// Specifies the target from whose data store data should be read.
        /// </para>
        /// </param>
        /// <param name="writetarget">
        /// <para>
        /// Specifies the target to whose data store data should be written.
        /// </para>
        /// </param>
        /// <param name="readoffset">
        /// <para>
        /// Specifies the offset, in basic machine units, within the data store of readtarget from which data should be read.
        /// </para>
        /// </param>
        /// <param name="writeoffset">
        /// <para>
        /// Specifies the offset, in basic machine units, within the data store of writetarget to which data should be written.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Specifies the size, in basic machine units, of the data to be copied from readtarget to writetarget.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glCopyBufferSubData")]
        public static void CopyBufferSubData(OpenTK.Graphics.ES30.BufferTarget readTarget, OpenTK.Graphics.ES30.BufferTarget writeTarget, IntPtr readOffset, IntPtr writeOffset, IntPtr size) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Copy pixels into a 2D texture image
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_2D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, or GL_TEXTURE_CUBE_MAP_NEGATIVE_Z.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// Specifies the internal format of the texture. Must be one of the following symbolic constants: GL_COMPRESSED_RED, GL_COMPRESSED_RG, GL_COMPRESSED_RGB, GL_COMPRESSED_RGBA. GL_COMPRESSED_SRGB, GL_COMPRESSED_SRGB_ALPHA. GL_DEPTH_COMPONENT, GL_DEPTH_COMPONENT16, GL_DEPTH_COMPONENT24, GL_DEPTH_COMPONENT32, GL_STENCIL_INDEX8, GL_RED, GL_RG, GL_RGB, GL_R3_G3_B2, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, GL_RGBA16, GL_SRGB, GL_SRGB8, GL_SRGB_ALPHA, or GL_SRGB8_ALPHA8.
        /// </para>
        /// </param>
        /// <param name="x">
        /// <para>
        /// Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture image.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture image.
        /// </para>
        /// </param>
        /// <param name="border">
        /// <para>
        /// Must be 0.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glCopyTexImage2D")]
        public static void CopyTexImage2D(OpenTK.Graphics.ES30.All target, Int32 level, OpenTK.Graphics.ES30.All internalformat, Int32 x, Int32 y, Int32 width, Int32 height, Int32 border) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Copy pixels into a 2D texture image
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_2D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, or GL_TEXTURE_CUBE_MAP_NEGATIVE_Z.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// Specifies the internal format of the texture. Must be one of the following symbolic constants: GL_COMPRESSED_RED, GL_COMPRESSED_RG, GL_COMPRESSED_RGB, GL_COMPRESSED_RGBA. GL_COMPRESSED_SRGB, GL_COMPRESSED_SRGB_ALPHA. GL_DEPTH_COMPONENT, GL_DEPTH_COMPONENT16, GL_DEPTH_COMPONENT24, GL_DEPTH_COMPONENT32, GL_STENCIL_INDEX8, GL_RED, GL_RG, GL_RGB, GL_R3_G3_B2, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, GL_RGBA16, GL_SRGB, GL_SRGB8, GL_SRGB_ALPHA, or GL_SRGB8_ALPHA8.
        /// </para>
        /// </param>
        /// <param name="x">
        /// <para>
        /// Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture image.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture image.
        /// </para>
        /// </param>
        /// <param name="border">
        /// <para>
        /// Must be 0.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glCopyTexImage2D")]
        public static void CopyTexImage2D(OpenTK.Graphics.ES30.TextureTarget2d target, Int32 level, OpenTK.Graphics.ES30.TextureCopyComponentCount internalformat, Int32 x, Int32 y, Int32 width, Int32 height, Int32 border) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Copy a two-dimensional texture subimage
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_2D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, GL_TEXTURE_CUBE_MAP_NEGATIVE_Z, or GL_TEXTURE_1D_ARRAY.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="xoffset">
        /// <para>
        /// Specifies a texel offset in the x direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="yoffset">
        /// <para>
        /// Specifies a texel offset in the y direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="x">
        /// <para>
        /// Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture subimage.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glCopyTexSubImage2D")]
        public static void CopyTexSubImage2D(OpenTK.Graphics.ES30.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 x, Int32 y, Int32 width, Int32 height) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Copy a two-dimensional texture subimage
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_2D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, GL_TEXTURE_CUBE_MAP_NEGATIVE_Z, or GL_TEXTURE_1D_ARRAY.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="xoffset">
        /// <para>
        /// Specifies a texel offset in the x direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="yoffset">
        /// <para>
        /// Specifies a texel offset in the y direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="x">
        /// <para>
        /// Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture subimage.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glCopyTexSubImage2D")]
        public static void CopyTexSubImage2D(OpenTK.Graphics.ES30.TextureTarget2d target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 x, Int32 y, Int32 width, Int32 height) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Copy a three-dimensional texture subimage
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_3D or GL_TEXTURE_2D_ARRAY.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="xoffset">
        /// <para>
        /// Specifies a texel offset in the x direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="yoffset">
        /// <para>
        /// Specifies a texel offset in the y direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="zoffset">
        /// <para>
        /// Specifies a texel offset in the z direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="x">
        /// <para>
        /// Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture subimage.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glCopyTexSubImage3D")]
        public static void CopyTexSubImage3D(OpenTK.Graphics.ES30.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 x, Int32 y, Int32 width, Int32 height) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Copy a three-dimensional texture subimage
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_3D or GL_TEXTURE_2D_ARRAY.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="xoffset">
        /// <para>
        /// Specifies a texel offset in the x direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="yoffset">
        /// <para>
        /// Specifies a texel offset in the y direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="zoffset">
        /// <para>
        /// Specifies a texel offset in the z direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="x">
        /// <para>
        /// Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture subimage.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glCopyTexSubImage3D")]
        public static void CopyTexSubImage3D(OpenTK.Graphics.ES30.TextureTarget3d target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 x, Int32 y, Int32 width, Int32 height) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Creates a program object
        /// </summary>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glCreateProgram")]
        public static Int32 CreateProgram() { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Creates a shader object
        /// </summary>
        /// <param name="shaderType">
        /// <para>
        /// Specifies the type of shader to be created. Must be one of GL_COMPUTE_SHADER, GL_VERTEX_SHADER, GL_TESS_CONTROL_SHADER, GL_TESS_EVALUATION_SHADER, GL_GEOMETRY_SHADER, or GL_FRAGMENT_SHADER.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glCreateShader")]
        public static Int32 CreateShader(OpenTK.Graphics.ES30.All type) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Creates a shader object
        /// </summary>
        /// <param name="shaderType">
        /// <para>
        /// Specifies the type of shader to be created. Must be one of GL_COMPUTE_SHADER, GL_VERTEX_SHADER, GL_TESS_CONTROL_SHADER, GL_TESS_EVALUATION_SHADER, GL_GEOMETRY_SHADER, or GL_FRAGMENT_SHADER.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glCreateShader")]
        public static Int32 CreateShader(OpenTK.Graphics.ES30.ShaderType type) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Specify whether front- or back-facing facets can be culled
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies whether front- or back-facing facets are candidates for culling. Symbolic constants GL_FRONT, GL_BACK, and GL_FRONT_AND_BACK are accepted. The initial value is GL_BACK.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glCullFace")]
        public static void CullFace(OpenTK.Graphics.ES30.All mode) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Specify whether front- or back-facing facets can be culled
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies whether front- or back-facing facets are candidates for culling. Symbolic constants GL_FRONT, GL_BACK, and GL_FRONT_AND_BACK are accepted. The initial value is GL_BACK.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glCullFace")]
        public static void CullFace(OpenTK.Graphics.ES30.CullFaceMode mode) { throw new NotImplementedException(); }

        /// <summary>
        /// Specify a callback to receive debugging messages from the GL
        /// </summary>
        /// <param name="callback">
        /// <para>
        /// The address of a callback function that will be called when a debug message is generated.
        /// </para>
        /// </param>
        /// <param name="userParam">
        /// <para>
        /// A user supplied pointer that will be passed on each invocation of callback.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageCallback")]
        public static void DebugMessageCallback(DebugProc callback, IntPtr userParam) { throw new NotImplementedException(); }

        /// <summary>
        /// Specify a callback to receive debugging messages from the GL
        /// </summary>
        /// <param name="callback">
        /// <para>
        /// The address of a callback function that will be called when a debug message is generated.
        /// </para>
        /// </param>
        /// <param name="userParam">
        /// <para>
        /// A user supplied pointer that will be passed on each invocation of callback.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageCallback")]
        [CLSCompliant(false)]
        public static void DebugMessageCallback<T1>(DebugProc callback, [InAttribute, OutAttribute] T1[] userParam)
            where T1 : struct
         { throw new NotImplementedException(); }

        /// <summary>
        /// Specify a callback to receive debugging messages from the GL
        /// </summary>
        /// <param name="callback">
        /// <para>
        /// The address of a callback function that will be called when a debug message is generated.
        /// </para>
        /// </param>
        /// <param name="userParam">
        /// <para>
        /// A user supplied pointer that will be passed on each invocation of callback.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageCallback")]
        [CLSCompliant(false)]
        public static void DebugMessageCallback<T1>(DebugProc callback, [InAttribute, OutAttribute] T1[,] userParam)
            where T1 : struct
         { throw new NotImplementedException(); }

        /// <summary>
        /// Specify a callback to receive debugging messages from the GL
        /// </summary>
        /// <param name="callback">
        /// <para>
        /// The address of a callback function that will be called when a debug message is generated.
        /// </para>
        /// </param>
        /// <param name="userParam">
        /// <para>
        /// A user supplied pointer that will be passed on each invocation of callback.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageCallback")]
        [CLSCompliant(false)]
        public static void DebugMessageCallback<T1>(DebugProc callback, [InAttribute, OutAttribute] T1[,,] userParam)
            where T1 : struct
         { throw new NotImplementedException(); }

        /// <summary>
        /// Specify a callback to receive debugging messages from the GL
        /// </summary>
        /// <param name="callback">
        /// <para>
        /// The address of a callback function that will be called when a debug message is generated.
        /// </para>
        /// </param>
        /// <param name="userParam">
        /// <para>
        /// A user supplied pointer that will be passed on each invocation of callback.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageCallback")]
        public static void DebugMessageCallback<T1>(DebugProc callback, [InAttribute, OutAttribute] ref T1 userParam)
            where T1 : struct
         { throw new NotImplementedException(); }

        /// <summary>
        /// Control the reporting of debug messages in a debug context
        /// </summary>
        /// <param name="source">
        /// <para>
        /// The source of debug messages to enable or disable.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// The type of debug messages to enable or disable.
        /// </para>
        /// </param>
        /// <param name="severity">
        /// <para>
        /// The severity of debug messages to enable or disable.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// The length of the array ids.
        /// </para>
        /// </param>
        /// <param name="ids">
        /// <para>
        /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
        /// </para>
        /// </param>
        /// <param name="enabled">
        /// <para>
        /// A Boolean flag determining whether the selected messages should be enabled or disabled.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageControl")]
        [CLSCompliant(false)]
        public static void DebugMessageControl(OpenTK.Graphics.ES30.All source, OpenTK.Graphics.ES30.All type, OpenTK.Graphics.ES30.All severity, Int32 count, Int32[] ids, bool enabled) { throw new NotImplementedException(); }

        /// <summary>
        /// Control the reporting of debug messages in a debug context
        /// </summary>
        /// <param name="source">
        /// <para>
        /// The source of debug messages to enable or disable.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// The type of debug messages to enable or disable.
        /// </para>
        /// </param>
        /// <param name="severity">
        /// <para>
        /// The severity of debug messages to enable or disable.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// The length of the array ids.
        /// </para>
        /// </param>
        /// <param name="ids">
        /// <para>
        /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
        /// </para>
        /// </param>
        /// <param name="enabled">
        /// <para>
        /// A Boolean flag determining whether the selected messages should be enabled or disabled.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageControl")]
        [CLSCompliant(false)]
        public static void DebugMessageControl(OpenTK.Graphics.ES30.All source, OpenTK.Graphics.ES30.All type, OpenTK.Graphics.ES30.All severity, Int32 count, ref Int32 ids, bool enabled) { throw new NotImplementedException(); }

        /// <summary>
        /// Control the reporting of debug messages in a debug context
        /// </summary>
        /// <param name="source">
        /// <para>
        /// The source of debug messages to enable or disable.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// The type of debug messages to enable or disable.
        /// </para>
        /// </param>
        /// <param name="severity">
        /// <para>
        /// The severity of debug messages to enable or disable.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// The length of the array ids.
        /// </para>
        /// </param>
        /// <param name="ids">
        /// <para>
        /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
        /// </para>
        /// </param>
        /// <param name="enabled">
        /// <para>
        /// A Boolean flag determining whether the selected messages should be enabled or disabled.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageControl")]
        [CLSCompliant(false)]
        public static unsafe void DebugMessageControl(OpenTK.Graphics.ES30.All source, OpenTK.Graphics.ES30.All type, OpenTK.Graphics.ES30.All severity, Int32 count, Int32* ids, bool enabled) { throw new NotImplementedException(); }

        /// <summary>
        /// Control the reporting of debug messages in a debug context
        /// </summary>
        /// <param name="source">
        /// <para>
        /// The source of debug messages to enable or disable.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// The type of debug messages to enable or disable.
        /// </para>
        /// </param>
        /// <param name="severity">
        /// <para>
        /// The severity of debug messages to enable or disable.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// The length of the array ids.
        /// </para>
        /// </param>
        /// <param name="ids">
        /// <para>
        /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
        /// </para>
        /// </param>
        /// <param name="enabled">
        /// <para>
        /// A Boolean flag determining whether the selected messages should be enabled or disabled.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageControl")]
        [CLSCompliant(false)]
        public static void DebugMessageControl(OpenTK.Graphics.ES30.All source, OpenTK.Graphics.ES30.All type, OpenTK.Graphics.ES30.All severity, Int32 count, UInt32[] ids, bool enabled) { throw new NotImplementedException(); }

        /// <summary>
        /// Control the reporting of debug messages in a debug context
        /// </summary>
        /// <param name="source">
        /// <para>
        /// The source of debug messages to enable or disable.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// The type of debug messages to enable or disable.
        /// </para>
        /// </param>
        /// <param name="severity">
        /// <para>
        /// The severity of debug messages to enable or disable.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// The length of the array ids.
        /// </para>
        /// </param>
        /// <param name="ids">
        /// <para>
        /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
        /// </para>
        /// </param>
        /// <param name="enabled">
        /// <para>
        /// A Boolean flag determining whether the selected messages should be enabled or disabled.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageControl")]
        [CLSCompliant(false)]
        public static void DebugMessageControl(OpenTK.Graphics.ES30.All source, OpenTK.Graphics.ES30.All type, OpenTK.Graphics.ES30.All severity, Int32 count, ref UInt32 ids, bool enabled) { throw new NotImplementedException(); }

        /// <summary>
        /// Control the reporting of debug messages in a debug context
        /// </summary>
        /// <param name="source">
        /// <para>
        /// The source of debug messages to enable or disable.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// The type of debug messages to enable or disable.
        /// </para>
        /// </param>
        /// <param name="severity">
        /// <para>
        /// The severity of debug messages to enable or disable.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// The length of the array ids.
        /// </para>
        /// </param>
        /// <param name="ids">
        /// <para>
        /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
        /// </para>
        /// </param>
        /// <param name="enabled">
        /// <para>
        /// A Boolean flag determining whether the selected messages should be enabled or disabled.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageControl")]
        [CLSCompliant(false)]
        public static unsafe void DebugMessageControl(OpenTK.Graphics.ES30.All source, OpenTK.Graphics.ES30.All type, OpenTK.Graphics.ES30.All severity, Int32 count, UInt32* ids, bool enabled) { throw new NotImplementedException(); }

        /// <summary>
        /// Control the reporting of debug messages in a debug context
        /// </summary>
        /// <param name="source">
        /// <para>
        /// The source of debug messages to enable or disable.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// The type of debug messages to enable or disable.
        /// </para>
        /// </param>
        /// <param name="severity">
        /// <para>
        /// The severity of debug messages to enable or disable.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// The length of the array ids.
        /// </para>
        /// </param>
        /// <param name="ids">
        /// <para>
        /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
        /// </para>
        /// </param>
        /// <param name="enabled">
        /// <para>
        /// A Boolean flag determining whether the selected messages should be enabled or disabled.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageControl")]
        [CLSCompliant(false)]
        public static void DebugMessageControl(OpenTK.Graphics.ES30.DebugSourceControl source, OpenTK.Graphics.ES30.DebugTypeControl type, OpenTK.Graphics.ES30.DebugSeverityControl severity, Int32 count, Int32[] ids, bool enabled) { throw new NotImplementedException(); }

        /// <summary>
        /// Control the reporting of debug messages in a debug context
        /// </summary>
        /// <param name="source">
        /// <para>
        /// The source of debug messages to enable or disable.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// The type of debug messages to enable or disable.
        /// </para>
        /// </param>
        /// <param name="severity">
        /// <para>
        /// The severity of debug messages to enable or disable.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// The length of the array ids.
        /// </para>
        /// </param>
        /// <param name="ids">
        /// <para>
        /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
        /// </para>
        /// </param>
        /// <param name="enabled">
        /// <para>
        /// A Boolean flag determining whether the selected messages should be enabled or disabled.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageControl")]
        [CLSCompliant(false)]
        public static void DebugMessageControl(OpenTK.Graphics.ES30.DebugSourceControl source, OpenTK.Graphics.ES30.DebugTypeControl type, OpenTK.Graphics.ES30.DebugSeverityControl severity, Int32 count, ref Int32 ids, bool enabled) { throw new NotImplementedException(); }

        /// <summary>
        /// Control the reporting of debug messages in a debug context
        /// </summary>
        /// <param name="source">
        /// <para>
        /// The source of debug messages to enable or disable.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// The type of debug messages to enable or disable.
        /// </para>
        /// </param>
        /// <param name="severity">
        /// <para>
        /// The severity of debug messages to enable or disable.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// The length of the array ids.
        /// </para>
        /// </param>
        /// <param name="ids">
        /// <para>
        /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
        /// </para>
        /// </param>
        /// <param name="enabled">
        /// <para>
        /// A Boolean flag determining whether the selected messages should be enabled or disabled.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageControl")]
        [CLSCompliant(false)]
        public static unsafe void DebugMessageControl(OpenTK.Graphics.ES30.DebugSourceControl source, OpenTK.Graphics.ES30.DebugTypeControl type, OpenTK.Graphics.ES30.DebugSeverityControl severity, Int32 count, Int32* ids, bool enabled) { throw new NotImplementedException(); }

        /// <summary>
        /// Control the reporting of debug messages in a debug context
        /// </summary>
        /// <param name="source">
        /// <para>
        /// The source of debug messages to enable or disable.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// The type of debug messages to enable or disable.
        /// </para>
        /// </param>
        /// <param name="severity">
        /// <para>
        /// The severity of debug messages to enable or disable.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// The length of the array ids.
        /// </para>
        /// </param>
        /// <param name="ids">
        /// <para>
        /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
        /// </para>
        /// </param>
        /// <param name="enabled">
        /// <para>
        /// A Boolean flag determining whether the selected messages should be enabled or disabled.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageControl")]
        [CLSCompliant(false)]
        public static void DebugMessageControl(OpenTK.Graphics.ES30.DebugSourceControl source, OpenTK.Graphics.ES30.DebugTypeControl type, OpenTK.Graphics.ES30.DebugSeverityControl severity, Int32 count, UInt32[] ids, bool enabled) { throw new NotImplementedException(); }

        /// <summary>
        /// Control the reporting of debug messages in a debug context
        /// </summary>
        /// <param name="source">
        /// <para>
        /// The source of debug messages to enable or disable.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// The type of debug messages to enable or disable.
        /// </para>
        /// </param>
        /// <param name="severity">
        /// <para>
        /// The severity of debug messages to enable or disable.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// The length of the array ids.
        /// </para>
        /// </param>
        /// <param name="ids">
        /// <para>
        /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
        /// </para>
        /// </param>
        /// <param name="enabled">
        /// <para>
        /// A Boolean flag determining whether the selected messages should be enabled or disabled.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageControl")]
        [CLSCompliant(false)]
        public static void DebugMessageControl(OpenTK.Graphics.ES30.DebugSourceControl source, OpenTK.Graphics.ES30.DebugTypeControl type, OpenTK.Graphics.ES30.DebugSeverityControl severity, Int32 count, ref UInt32 ids, bool enabled) { throw new NotImplementedException(); }

        /// <summary>
        /// Control the reporting of debug messages in a debug context
        /// </summary>
        /// <param name="source">
        /// <para>
        /// The source of debug messages to enable or disable.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// The type of debug messages to enable or disable.
        /// </para>
        /// </param>
        /// <param name="severity">
        /// <para>
        /// The severity of debug messages to enable or disable.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// The length of the array ids.
        /// </para>
        /// </param>
        /// <param name="ids">
        /// <para>
        /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
        /// </para>
        /// </param>
        /// <param name="enabled">
        /// <para>
        /// A Boolean flag determining whether the selected messages should be enabled or disabled.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageControl")]
        [CLSCompliant(false)]
        public static unsafe void DebugMessageControl(OpenTK.Graphics.ES30.DebugSourceControl source, OpenTK.Graphics.ES30.DebugTypeControl type, OpenTK.Graphics.ES30.DebugSeverityControl severity, Int32 count, UInt32* ids, bool enabled) { throw new NotImplementedException(); }

        /// <summary>
        /// Inject an application-supplied message into the debug message queue
        /// </summary>
        /// <param name="source">
        /// <para>
        /// The source of the debug message to insert.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// The type of the debug message insert.
        /// </para>
        /// </param>
        /// <param name="id">
        /// <para>
        /// The user-supplied identifier of the message to insert.
        /// </para>
        /// </param>
        /// <param name="severity">
        /// <para>
        /// The severity of the debug messages to insert.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// The length string contained in the character array whose address is given by message.
        /// </para>
        /// </param>
        /// <param name="message">
        /// <para>
        /// The address of a character array containing the message to insert.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageInsert")]
        [CLSCompliant(false)]
        public static void DebugMessageInsert(OpenTK.Graphics.ES30.All source, OpenTK.Graphics.ES30.All type, Int32 id, OpenTK.Graphics.ES30.All severity, Int32 length, String buf) { throw new NotImplementedException(); }

        /// <summary>
        /// Inject an application-supplied message into the debug message queue
        /// </summary>
        /// <param name="source">
        /// <para>
        /// The source of the debug message to insert.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// The type of the debug message insert.
        /// </para>
        /// </param>
        /// <param name="id">
        /// <para>
        /// The user-supplied identifier of the message to insert.
        /// </para>
        /// </param>
        /// <param name="severity">
        /// <para>
        /// The severity of the debug messages to insert.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// The length string contained in the character array whose address is given by message.
        /// </para>
        /// </param>
        /// <param name="message">
        /// <para>
        /// The address of a character array containing the message to insert.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageInsert")]
        [CLSCompliant(false)]
        public static void DebugMessageInsert(OpenTK.Graphics.ES30.All source, OpenTK.Graphics.ES30.All type, UInt32 id, OpenTK.Graphics.ES30.All severity, Int32 length, String buf) { throw new NotImplementedException(); }

        /// <summary>
        /// Inject an application-supplied message into the debug message queue
        /// </summary>
        /// <param name="source">
        /// <para>
        /// The source of the debug message to insert.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// The type of the debug message insert.
        /// </para>
        /// </param>
        /// <param name="id">
        /// <para>
        /// The user-supplied identifier of the message to insert.
        /// </para>
        /// </param>
        /// <param name="severity">
        /// <para>
        /// The severity of the debug messages to insert.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// The length string contained in the character array whose address is given by message.
        /// </para>
        /// </param>
        /// <param name="message">
        /// <para>
        /// The address of a character array containing the message to insert.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageInsert")]
        [CLSCompliant(false)]
        public static void DebugMessageInsert(OpenTK.Graphics.ES30.DebugSourceExternal source, OpenTK.Graphics.ES30.DebugType type, Int32 id, OpenTK.Graphics.ES30.DebugSeverity severity, Int32 length, String buf) { throw new NotImplementedException(); }

        /// <summary>
        /// Inject an application-supplied message into the debug message queue
        /// </summary>
        /// <param name="source">
        /// <para>
        /// The source of the debug message to insert.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// The type of the debug message insert.
        /// </para>
        /// </param>
        /// <param name="id">
        /// <para>
        /// The user-supplied identifier of the message to insert.
        /// </para>
        /// </param>
        /// <param name="severity">
        /// <para>
        /// The severity of the debug messages to insert.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// The length string contained in the character array whose address is given by message.
        /// </para>
        /// </param>
        /// <param name="message">
        /// <para>
        /// The address of a character array containing the message to insert.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageInsert")]
        [CLSCompliant(false)]
        public static void DebugMessageInsert(OpenTK.Graphics.ES30.DebugSourceExternal source, OpenTK.Graphics.ES30.DebugType type, UInt32 id, OpenTK.Graphics.ES30.DebugSeverity severity, Int32 length, String buf) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Delete named buffer objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of buffer objects to be deleted.
        /// </para>
        /// </param>
        /// <param name="buffers">
        /// <para>
        /// Specifies an array of buffer objects to be deleted.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDeleteBuffers")]
        [CLSCompliant(false)]
        public static void DeleteBuffer(Int32 buffers) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Delete named buffer objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of buffer objects to be deleted.
        /// </para>
        /// </param>
        /// <param name="buffers">
        /// <para>
        /// Specifies an array of buffer objects to be deleted.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDeleteBuffers")]
        [CLSCompliant(false)]
        public static void DeleteBuffer(UInt32 buffers) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Delete named buffer objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of buffer objects to be deleted.
        /// </para>
        /// </param>
        /// <param name="buffers">
        /// <para>
        /// Specifies an array of buffer objects to be deleted.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDeleteBuffers")]
        [CLSCompliant(false)]
        public static void DeleteBuffers(Int32 n, Int32[] buffers) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Delete named buffer objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of buffer objects to be deleted.
        /// </para>
        /// </param>
        /// <param name="buffers">
        /// <para>
        /// Specifies an array of buffer objects to be deleted.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDeleteBuffers")]
        [CLSCompliant(false)]
        public static void DeleteBuffers(Int32 n, ref Int32 buffers) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Delete named buffer objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of buffer objects to be deleted.
        /// </para>
        /// </param>
        /// <param name="buffers">
        /// <para>
        /// Specifies an array of buffer objects to be deleted.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDeleteBuffers")]
        [CLSCompliant(false)]
        public static unsafe void DeleteBuffers(Int32 n, Int32* buffers) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Delete named buffer objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of buffer objects to be deleted.
        /// </para>
        /// </param>
        /// <param name="buffers">
        /// <para>
        /// Specifies an array of buffer objects to be deleted.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDeleteBuffers")]
        [CLSCompliant(false)]
        public static void DeleteBuffers(Int32 n, UInt32[] buffers) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Delete named buffer objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of buffer objects to be deleted.
        /// </para>
        /// </param>
        /// <param name="buffers">
        /// <para>
        /// Specifies an array of buffer objects to be deleted.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDeleteBuffers")]
        [CLSCompliant(false)]
        public static void DeleteBuffers(Int32 n, ref UInt32 buffers) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Delete named buffer objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of buffer objects to be deleted.
        /// </para>
        /// </param>
        /// <param name="buffers">
        /// <para>
        /// Specifies an array of buffer objects to be deleted.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDeleteBuffers")]
        [CLSCompliant(false)]
        public static unsafe void DeleteBuffers(Int32 n, UInt32* buffers) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Delete framebuffer objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of framebuffer objects to be deleted.
        /// </para>
        /// </param>
        /// <param name="framebuffers">
        /// <para>
        /// A pointer to an array containing n framebuffer objects to be deleted.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDeleteFramebuffers")]
        [CLSCompliant(false)]
        public static void DeleteFramebuffer(Int32 framebuffers) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Delete framebuffer objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of framebuffer objects to be deleted.
        /// </para>
        /// </param>
        /// <param name="framebuffers">
        /// <para>
        /// A pointer to an array containing n framebuffer objects to be deleted.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDeleteFramebuffers")]
        [CLSCompliant(false)]
        public static void DeleteFramebuffer(UInt32 framebuffers) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Delete framebuffer objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of framebuffer objects to be deleted.
        /// </para>
        /// </param>
        /// <param name="framebuffers">
        /// <para>
        /// A pointer to an array containing n framebuffer objects to be deleted.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDeleteFramebuffers")]
        [CLSCompliant(false)]
        public static void DeleteFramebuffers(Int32 n, Int32[] framebuffers) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Delete framebuffer objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of framebuffer objects to be deleted.
        /// </para>
        /// </param>
        /// <param name="framebuffers">
        /// <para>
        /// A pointer to an array containing n framebuffer objects to be deleted.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDeleteFramebuffers")]
        [CLSCompliant(false)]
        public static void DeleteFramebuffers(Int32 n, ref Int32 framebuffers) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Delete framebuffer objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of framebuffer objects to be deleted.
        /// </para>
        /// </param>
        /// <param name="framebuffers">
        /// <para>
        /// A pointer to an array containing n framebuffer objects to be deleted.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDeleteFramebuffers")]
        [CLSCompliant(false)]
        public static unsafe void DeleteFramebuffers(Int32 n, Int32* framebuffers) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Delete framebuffer objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of framebuffer objects to be deleted.
        /// </para>
        /// </param>
        /// <param name="framebuffers">
        /// <para>
        /// A pointer to an array containing n framebuffer objects to be deleted.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDeleteFramebuffers")]
        [CLSCompliant(false)]
        public static void DeleteFramebuffers(Int32 n, UInt32[] framebuffers) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Delete framebuffer objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of framebuffer objects to be deleted.
        /// </para>
        /// </param>
        /// <param name="framebuffers">
        /// <para>
        /// A pointer to an array containing n framebuffer objects to be deleted.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDeleteFramebuffers")]
        [CLSCompliant(false)]
        public static void DeleteFramebuffers(Int32 n, ref UInt32 framebuffers) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Delete framebuffer objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of framebuffer objects to be deleted.
        /// </para>
        /// </param>
        /// <param name="framebuffers">
        /// <para>
        /// A pointer to an array containing n framebuffer objects to be deleted.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDeleteFramebuffers")]
        [CLSCompliant(false)]
        public static unsafe void DeleteFramebuffers(Int32 n, UInt32* framebuffers) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Deletes a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be deleted.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDeleteProgram")]
        [CLSCompliant(false)]
        public static void DeleteProgram(Int32 program) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Deletes a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be deleted.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDeleteProgram")]
        [CLSCompliant(false)]
        public static void DeleteProgram(UInt32 program) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Delete named query objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of query objects to be deleted.
        /// </para>
        /// </param>
        /// <param name="ids">
        /// <para>
        /// Specifies an array of query objects to be deleted.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glDeleteQueries")]
        [CLSCompliant(false)]
        public static void DeleteQuery(Int32 ids) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Delete named query objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of query objects to be deleted.
        /// </para>
        /// </param>
        /// <param name="ids">
        /// <para>
        /// Specifies an array of query objects to be deleted.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glDeleteQueries")]
        [CLSCompliant(false)]
        public static void DeleteQuery(UInt32 ids) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Delete named query objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of query objects to be deleted.
        /// </para>
        /// </param>
        /// <param name="ids">
        /// <para>
        /// Specifies an array of query objects to be deleted.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glDeleteQueries")]
        [CLSCompliant(false)]
        public static void DeleteQueries(Int32 n, Int32[] ids) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Delete named query objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of query objects to be deleted.
        /// </para>
        /// </param>
        /// <param name="ids">
        /// <para>
        /// Specifies an array of query objects to be deleted.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glDeleteQueries")]
        [CLSCompliant(false)]
        public static void DeleteQueries(Int32 n, ref Int32 ids) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Delete named query objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of query objects to be deleted.
        /// </para>
        /// </param>
        /// <param name="ids">
        /// <para>
        /// Specifies an array of query objects to be deleted.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glDeleteQueries")]
        [CLSCompliant(false)]
        public static unsafe void DeleteQueries(Int32 n, Int32* ids) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Delete named query objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of query objects to be deleted.
        /// </para>
        /// </param>
        /// <param name="ids">
        /// <para>
        /// Specifies an array of query objects to be deleted.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glDeleteQueries")]
        [CLSCompliant(false)]
        public static void DeleteQueries(Int32 n, UInt32[] ids) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Delete named query objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of query objects to be deleted.
        /// </para>
        /// </param>
        /// <param name="ids">
        /// <para>
        /// Specifies an array of query objects to be deleted.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glDeleteQueries")]
        [CLSCompliant(false)]
        public static void DeleteQueries(Int32 n, ref UInt32 ids) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Delete named query objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of query objects to be deleted.
        /// </para>
        /// </param>
        /// <param name="ids">
        /// <para>
        /// Specifies an array of query objects to be deleted.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glDeleteQueries")]
        [CLSCompliant(false)]
        public static unsafe void DeleteQueries(Int32 n, UInt32* ids) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Delete renderbuffer objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of renderbuffer objects to be deleted.
        /// </para>
        /// </param>
        /// <param name="renderbuffers">
        /// <para>
        /// A pointer to an array containing n renderbuffer objects to be deleted.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDeleteRenderbuffers")]
        [CLSCompliant(false)]
        public static void DeleteRenderbuffer(Int32 renderbuffers) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Delete renderbuffer objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of renderbuffer objects to be deleted.
        /// </para>
        /// </param>
        /// <param name="renderbuffers">
        /// <para>
        /// A pointer to an array containing n renderbuffer objects to be deleted.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDeleteRenderbuffers")]
        [CLSCompliant(false)]
        public static void DeleteRenderbuffer(UInt32 renderbuffers) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Delete renderbuffer objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of renderbuffer objects to be deleted.
        /// </para>
        /// </param>
        /// <param name="renderbuffers">
        /// <para>
        /// A pointer to an array containing n renderbuffer objects to be deleted.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDeleteRenderbuffers")]
        [CLSCompliant(false)]
        public static void DeleteRenderbuffers(Int32 n, Int32[] renderbuffers) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Delete renderbuffer objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of renderbuffer objects to be deleted.
        /// </para>
        /// </param>
        /// <param name="renderbuffers">
        /// <para>
        /// A pointer to an array containing n renderbuffer objects to be deleted.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDeleteRenderbuffers")]
        [CLSCompliant(false)]
        public static void DeleteRenderbuffers(Int32 n, ref Int32 renderbuffers) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Delete renderbuffer objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of renderbuffer objects to be deleted.
        /// </para>
        /// </param>
        /// <param name="renderbuffers">
        /// <para>
        /// A pointer to an array containing n renderbuffer objects to be deleted.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDeleteRenderbuffers")]
        [CLSCompliant(false)]
        public static unsafe void DeleteRenderbuffers(Int32 n, Int32* renderbuffers) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Delete renderbuffer objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of renderbuffer objects to be deleted.
        /// </para>
        /// </param>
        /// <param name="renderbuffers">
        /// <para>
        /// A pointer to an array containing n renderbuffer objects to be deleted.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDeleteRenderbuffers")]
        [CLSCompliant(false)]
        public static void DeleteRenderbuffers(Int32 n, UInt32[] renderbuffers) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Delete renderbuffer objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of renderbuffer objects to be deleted.
        /// </para>
        /// </param>
        /// <param name="renderbuffers">
        /// <para>
        /// A pointer to an array containing n renderbuffer objects to be deleted.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDeleteRenderbuffers")]
        [CLSCompliant(false)]
        public static void DeleteRenderbuffers(Int32 n, ref UInt32 renderbuffers) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Delete renderbuffer objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of renderbuffer objects to be deleted.
        /// </para>
        /// </param>
        /// <param name="renderbuffers">
        /// <para>
        /// A pointer to an array containing n renderbuffer objects to be deleted.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDeleteRenderbuffers")]
        [CLSCompliant(false)]
        public static unsafe void DeleteRenderbuffers(Int32 n, UInt32* renderbuffers) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Delete named sampler objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of sampler objects to be deleted.
        /// </para>
        /// </param>
        /// <param name="samplers">
        /// <para>
        /// Specifies an array of sampler objects to be deleted.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glDeleteSamplers")]
        [CLSCompliant(false)]
        public static void DeleteSampler(Int32 samplers) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Delete named sampler objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of sampler objects to be deleted.
        /// </para>
        /// </param>
        /// <param name="samplers">
        /// <para>
        /// Specifies an array of sampler objects to be deleted.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glDeleteSamplers")]
        [CLSCompliant(false)]
        public static void DeleteSampler(UInt32 samplers) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Delete named sampler objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of sampler objects to be deleted.
        /// </para>
        /// </param>
        /// <param name="samplers">
        /// <para>
        /// Specifies an array of sampler objects to be deleted.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glDeleteSamplers")]
        [CLSCompliant(false)]
        public static void DeleteSamplers(Int32 count, Int32[] samplers) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Delete named sampler objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of sampler objects to be deleted.
        /// </para>
        /// </param>
        /// <param name="samplers">
        /// <para>
        /// Specifies an array of sampler objects to be deleted.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glDeleteSamplers")]
        [CLSCompliant(false)]
        public static void DeleteSamplers(Int32 count, ref Int32 samplers) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Delete named sampler objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of sampler objects to be deleted.
        /// </para>
        /// </param>
        /// <param name="samplers">
        /// <para>
        /// Specifies an array of sampler objects to be deleted.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glDeleteSamplers")]
        [CLSCompliant(false)]
        public static unsafe void DeleteSamplers(Int32 count, Int32* samplers) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Delete named sampler objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of sampler objects to be deleted.
        /// </para>
        /// </param>
        /// <param name="samplers">
        /// <para>
        /// Specifies an array of sampler objects to be deleted.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glDeleteSamplers")]
        [CLSCompliant(false)]
        public static void DeleteSamplers(Int32 count, UInt32[] samplers) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Delete named sampler objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of sampler objects to be deleted.
        /// </para>
        /// </param>
        /// <param name="samplers">
        /// <para>
        /// Specifies an array of sampler objects to be deleted.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glDeleteSamplers")]
        [CLSCompliant(false)]
        public static void DeleteSamplers(Int32 count, ref UInt32 samplers) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Delete named sampler objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of sampler objects to be deleted.
        /// </para>
        /// </param>
        /// <param name="samplers">
        /// <para>
        /// Specifies an array of sampler objects to be deleted.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glDeleteSamplers")]
        [CLSCompliant(false)]
        public static unsafe void DeleteSamplers(Int32 count, UInt32* samplers) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Deletes a shader object
        /// </summary>
        /// <param name="shader">
        /// <para>
        /// Specifies the shader object to be deleted.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDeleteShader")]
        [CLSCompliant(false)]
        public static void DeleteShader(Int32 shader) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Deletes a shader object
        /// </summary>
        /// <param name="shader">
        /// <para>
        /// Specifies the shader object to be deleted.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDeleteShader")]
        [CLSCompliant(false)]
        public static void DeleteShader(UInt32 shader) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Delete a sync object
        /// </summary>
        /// <param name="sync">
        /// <para>
        /// The sync object to be deleted.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glDeleteSync")]
        public static void DeleteSync(IntPtr sync) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Delete named textures
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of textures to be deleted.
        /// </para>
        /// </param>
        /// <param name="textures">
        /// <para>
        /// Specifies an array of textures to be deleted.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDeleteTextures")]
        [CLSCompliant(false)]
        public static void DeleteTexture(Int32 textures) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Delete named textures
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of textures to be deleted.
        /// </para>
        /// </param>
        /// <param name="textures">
        /// <para>
        /// Specifies an array of textures to be deleted.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDeleteTextures")]
        [CLSCompliant(false)]
        public static void DeleteTexture(UInt32 textures) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Delete named textures
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of textures to be deleted.
        /// </para>
        /// </param>
        /// <param name="textures">
        /// <para>
        /// Specifies an array of textures to be deleted.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDeleteTextures")]
        [CLSCompliant(false)]
        public static void DeleteTextures(Int32 n, Int32[] textures) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Delete named textures
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of textures to be deleted.
        /// </para>
        /// </param>
        /// <param name="textures">
        /// <para>
        /// Specifies an array of textures to be deleted.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDeleteTextures")]
        [CLSCompliant(false)]
        public static void DeleteTextures(Int32 n, ref Int32 textures) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Delete named textures
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of textures to be deleted.
        /// </para>
        /// </param>
        /// <param name="textures">
        /// <para>
        /// Specifies an array of textures to be deleted.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDeleteTextures")]
        [CLSCompliant(false)]
        public static unsafe void DeleteTextures(Int32 n, Int32* textures) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Delete named textures
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of textures to be deleted.
        /// </para>
        /// </param>
        /// <param name="textures">
        /// <para>
        /// Specifies an array of textures to be deleted.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDeleteTextures")]
        [CLSCompliant(false)]
        public static void DeleteTextures(Int32 n, UInt32[] textures) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Delete named textures
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of textures to be deleted.
        /// </para>
        /// </param>
        /// <param name="textures">
        /// <para>
        /// Specifies an array of textures to be deleted.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDeleteTextures")]
        [CLSCompliant(false)]
        public static void DeleteTextures(Int32 n, ref UInt32 textures) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Delete named textures
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of textures to be deleted.
        /// </para>
        /// </param>
        /// <param name="textures">
        /// <para>
        /// Specifies an array of textures to be deleted.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDeleteTextures")]
        [CLSCompliant(false)]
        public static unsafe void DeleteTextures(Int32 n, UInt32* textures) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Delete transform feedback objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of transform feedback objects to delete.
        /// </para>
        /// </param>
        /// <param name="ids">
        /// <para>
        /// Specifies an array of names of transform feedback objects to delete.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glDeleteTransformFeedbacks")]
        [CLSCompliant(false)]
        public static void DeleteTransformFeedback(Int32 ids) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Delete transform feedback objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of transform feedback objects to delete.
        /// </para>
        /// </param>
        /// <param name="ids">
        /// <para>
        /// Specifies an array of names of transform feedback objects to delete.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glDeleteTransformFeedbacks")]
        [CLSCompliant(false)]
        public static void DeleteTransformFeedback(UInt32 ids) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Delete transform feedback objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of transform feedback objects to delete.
        /// </para>
        /// </param>
        /// <param name="ids">
        /// <para>
        /// Specifies an array of names of transform feedback objects to delete.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glDeleteTransformFeedbacks")]
        [CLSCompliant(false)]
        public static void DeleteTransformFeedbacks(Int32 n, Int32[] ids) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Delete transform feedback objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of transform feedback objects to delete.
        /// </para>
        /// </param>
        /// <param name="ids">
        /// <para>
        /// Specifies an array of names of transform feedback objects to delete.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glDeleteTransformFeedbacks")]
        [CLSCompliant(false)]
        public static void DeleteTransformFeedbacks(Int32 n, ref Int32 ids) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Delete transform feedback objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of transform feedback objects to delete.
        /// </para>
        /// </param>
        /// <param name="ids">
        /// <para>
        /// Specifies an array of names of transform feedback objects to delete.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glDeleteTransformFeedbacks")]
        [CLSCompliant(false)]
        public static unsafe void DeleteTransformFeedbacks(Int32 n, Int32* ids) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Delete transform feedback objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of transform feedback objects to delete.
        /// </para>
        /// </param>
        /// <param name="ids">
        /// <para>
        /// Specifies an array of names of transform feedback objects to delete.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glDeleteTransformFeedbacks")]
        [CLSCompliant(false)]
        public static void DeleteTransformFeedbacks(Int32 n, UInt32[] ids) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Delete transform feedback objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of transform feedback objects to delete.
        /// </para>
        /// </param>
        /// <param name="ids">
        /// <para>
        /// Specifies an array of names of transform feedback objects to delete.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glDeleteTransformFeedbacks")]
        [CLSCompliant(false)]
        public static void DeleteTransformFeedbacks(Int32 n, ref UInt32 ids) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Delete transform feedback objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of transform feedback objects to delete.
        /// </para>
        /// </param>
        /// <param name="ids">
        /// <para>
        /// Specifies an array of names of transform feedback objects to delete.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glDeleteTransformFeedbacks")]
        [CLSCompliant(false)]
        public static unsafe void DeleteTransformFeedbacks(Int32 n, UInt32* ids) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Delete vertex array objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of vertex array objects to be deleted.
        /// </para>
        /// </param>
        /// <param name="arrays">
        /// <para>
        /// Specifies the address of an array containing the n names of the objects to be deleted.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glDeleteVertexArrays")]
        [CLSCompliant(false)]
        public static void DeleteVertexArray(Int32 arrays) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Delete vertex array objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of vertex array objects to be deleted.
        /// </para>
        /// </param>
        /// <param name="arrays">
        /// <para>
        /// Specifies the address of an array containing the n names of the objects to be deleted.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glDeleteVertexArrays")]
        [CLSCompliant(false)]
        public static void DeleteVertexArray(UInt32 arrays) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Delete vertex array objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of vertex array objects to be deleted.
        /// </para>
        /// </param>
        /// <param name="arrays">
        /// <para>
        /// Specifies the address of an array containing the n names of the objects to be deleted.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glDeleteVertexArrays")]
        [CLSCompliant(false)]
        public static void DeleteVertexArrays(Int32 n, Int32[] arrays) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Delete vertex array objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of vertex array objects to be deleted.
        /// </para>
        /// </param>
        /// <param name="arrays">
        /// <para>
        /// Specifies the address of an array containing the n names of the objects to be deleted.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glDeleteVertexArrays")]
        [CLSCompliant(false)]
        public static void DeleteVertexArrays(Int32 n, ref Int32 arrays) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Delete vertex array objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of vertex array objects to be deleted.
        /// </para>
        /// </param>
        /// <param name="arrays">
        /// <para>
        /// Specifies the address of an array containing the n names of the objects to be deleted.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glDeleteVertexArrays")]
        [CLSCompliant(false)]
        public static unsafe void DeleteVertexArrays(Int32 n, Int32* arrays) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Delete vertex array objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of vertex array objects to be deleted.
        /// </para>
        /// </param>
        /// <param name="arrays">
        /// <para>
        /// Specifies the address of an array containing the n names of the objects to be deleted.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glDeleteVertexArrays")]
        [CLSCompliant(false)]
        public static void DeleteVertexArrays(Int32 n, UInt32[] arrays) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Delete vertex array objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of vertex array objects to be deleted.
        /// </para>
        /// </param>
        /// <param name="arrays">
        /// <para>
        /// Specifies the address of an array containing the n names of the objects to be deleted.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glDeleteVertexArrays")]
        [CLSCompliant(false)]
        public static void DeleteVertexArrays(Int32 n, ref UInt32 arrays) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Delete vertex array objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of vertex array objects to be deleted.
        /// </para>
        /// </param>
        /// <param name="arrays">
        /// <para>
        /// Specifies the address of an array containing the n names of the objects to be deleted.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glDeleteVertexArrays")]
        [CLSCompliant(false)]
        public static unsafe void DeleteVertexArrays(Int32 n, UInt32* arrays) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Specify the value used for depth buffer comparisons
        /// </summary>
        /// <param name="func">
        /// <para>
        /// Specifies the depth comparison function. Symbolic constants GL_NEVER, GL_LESS, GL_EQUAL, GL_LEQUAL, GL_GREATER, GL_NOTEQUAL, GL_GEQUAL, and GL_ALWAYS are accepted. The initial value is GL_LESS.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDepthFunc")]
        public static void DepthFunc(OpenTK.Graphics.ES30.All func) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Specify the value used for depth buffer comparisons
        /// </summary>
        /// <param name="func">
        /// <para>
        /// Specifies the depth comparison function. Symbolic constants GL_NEVER, GL_LESS, GL_EQUAL, GL_LEQUAL, GL_GREATER, GL_NOTEQUAL, GL_GEQUAL, and GL_ALWAYS are accepted. The initial value is GL_LESS.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDepthFunc")]
        public static void DepthFunc(OpenTK.Graphics.ES30.DepthFunction func) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Enable or disable writing into the depth buffer
        /// </summary>
        /// <param name="flag">
        /// <para>
        /// Specifies whether the depth buffer is enabled for writing. If flag is GL_FALSE, depth buffer writing is disabled. Otherwise, it is enabled. Initially, depth buffer writing is enabled.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDepthMask")]
        public static void DepthMask(bool flag) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Specify mapping of depth values from normalized device coordinates to window coordinates
        /// </summary>
        /// <param name="nearVal">
        /// <para>
        /// Specifies the mapping of the near clipping plane to window coordinates. The initial value is 0.
        /// </para>
        /// </param>
        /// <param name="farVal">
        /// <para>
        /// Specifies the mapping of the far clipping plane to window coordinates. The initial value is 1.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDepthRangef")]
        public static void DepthRange(Single n, Single f) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Detaches a shader object from a program object to which it is attached
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object from which to detach the shader object.
        /// </para>
        /// </param>
        /// <param name="shader">
        /// <para>
        /// Specifies the shader object to be detached.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDetachShader")]
        [CLSCompliant(false)]
        public static void DetachShader(Int32 program, Int32 shader) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Detaches a shader object from a program object to which it is attached
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object from which to detach the shader object.
        /// </para>
        /// </param>
        /// <param name="shader">
        /// <para>
        /// Specifies the shader object to be detached.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDetachShader")]
        [CLSCompliant(false)]
        public static void DetachShader(UInt32 program, UInt32 shader) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]</summary>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDisable")]
        public static void Disable(OpenTK.Graphics.ES30.All cap) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]</summary>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDisable")]
        public static void Disable(OpenTK.Graphics.ES30.EnableCap cap) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]</summary>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDisableVertexAttribArray")]
        [CLSCompliant(false)]
        public static void DisableVertexAttribArray(Int32 index) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]</summary>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDisableVertexAttribArray")]
        [CLSCompliant(false)]
        public static void DisableVertexAttribArray(UInt32 index) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="first">
        /// <para>
        /// Specifies the starting index in the enabled arrays.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of indices to be rendered.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDrawArrays")]
        public static void DrawArrays(OpenTK.Graphics.ES30.All mode, Int32 first, Int32 count) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="first">
        /// <para>
        /// Specifies the starting index in the enabled arrays.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of indices to be rendered.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDrawArrays")]
        public static void DrawArrays(OpenTK.Graphics.ES30.PrimitiveType mode, Int32 first, Int32 count) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Draw multiple instances of a range of elements
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES GL_LINES_ADJACENCY, GL_LINE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY, GL_TRIANGLE_STRIP_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="first">
        /// <para>
        /// Specifies the starting index in the enabled arrays.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of indices to be rendered.
        /// </para>
        /// </param>
        /// <param name="primcount">
        /// <para>
        /// Specifies the number of instances of the specified range of indices to be rendered.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glDrawArraysInstanced")]
        public static void DrawArraysInstanced(OpenTK.Graphics.ES30.All mode, Int32 first, Int32 count, Int32 instancecount) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Draw multiple instances of a range of elements
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES GL_LINES_ADJACENCY, GL_LINE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY, GL_TRIANGLE_STRIP_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="first">
        /// <para>
        /// Specifies the starting index in the enabled arrays.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of indices to be rendered.
        /// </para>
        /// </param>
        /// <param name="primcount">
        /// <para>
        /// Specifies the number of instances of the specified range of indices to be rendered.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glDrawArraysInstanced")]
        public static void DrawArraysInstanced(OpenTK.Graphics.ES30.PrimitiveType mode, Int32 first, Int32 count, Int32 instancecount) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Specifies a list of color buffers to be drawn into
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of buffers in bufs.
        /// </para>
        /// </param>
        /// <param name="bufs">
        /// <para>
        /// Points to an array of symbolic constants specifying the buffers into which fragment colors or data values will be written.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glDrawBuffers")]
        [CLSCompliant(false)]
        public static void DrawBuffers(Int32 n, OpenTK.Graphics.ES30.All[] bufs) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Specifies a list of color buffers to be drawn into
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of buffers in bufs.
        /// </para>
        /// </param>
        /// <param name="bufs">
        /// <para>
        /// Points to an array of symbolic constants specifying the buffers into which fragment colors or data values will be written.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glDrawBuffers")]
        [CLSCompliant(false)]
        public static void DrawBuffers(Int32 n, ref OpenTK.Graphics.ES30.All bufs) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Specifies a list of color buffers to be drawn into
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of buffers in bufs.
        /// </para>
        /// </param>
        /// <param name="bufs">
        /// <para>
        /// Points to an array of symbolic constants specifying the buffers into which fragment colors or data values will be written.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glDrawBuffers")]
        [CLSCompliant(false)]
        public static unsafe void DrawBuffers(Int32 n, OpenTK.Graphics.ES30.All* bufs) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Specifies a list of color buffers to be drawn into
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of buffers in bufs.
        /// </para>
        /// </param>
        /// <param name="bufs">
        /// <para>
        /// Points to an array of symbolic constants specifying the buffers into which fragment colors or data values will be written.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glDrawBuffers")]
        [CLSCompliant(false)]
        public static void DrawBuffers(Int32 n, OpenTK.Graphics.ES30.DrawBufferMode[] bufs) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Specifies a list of color buffers to be drawn into
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of buffers in bufs.
        /// </para>
        /// </param>
        /// <param name="bufs">
        /// <para>
        /// Points to an array of symbolic constants specifying the buffers into which fragment colors or data values will be written.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glDrawBuffers")]
        [CLSCompliant(false)]
        public static void DrawBuffers(Int32 n, ref OpenTK.Graphics.ES30.DrawBufferMode bufs) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Specifies a list of color buffers to be drawn into
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of buffers in bufs.
        /// </para>
        /// </param>
        /// <param name="bufs">
        /// <para>
        /// Points to an array of symbolic constants specifying the buffers into which fragment colors or data values will be written.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glDrawBuffers")]
        [CLSCompliant(false)]
        public static unsafe void DrawBuffers(Int32 n, OpenTK.Graphics.ES30.DrawBufferMode* bufs) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements to be rendered.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDrawElements")]
        public static void DrawElements(OpenTK.Graphics.ES30.All mode, Int32 count, OpenTK.Graphics.ES30.All type, IntPtr indices) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements to be rendered.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDrawElements")]
        [CLSCompliant(false)]
        public static void DrawElements<T3>(OpenTK.Graphics.ES30.All mode, Int32 count, OpenTK.Graphics.ES30.All type, [InAttribute, OutAttribute] T3[] indices)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements to be rendered.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDrawElements")]
        [CLSCompliant(false)]
        public static void DrawElements<T3>(OpenTK.Graphics.ES30.All mode, Int32 count, OpenTK.Graphics.ES30.All type, [InAttribute, OutAttribute] T3[,] indices)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements to be rendered.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDrawElements")]
        [CLSCompliant(false)]
        public static void DrawElements<T3>(OpenTK.Graphics.ES30.All mode, Int32 count, OpenTK.Graphics.ES30.All type, [InAttribute, OutAttribute] T3[,,] indices)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements to be rendered.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDrawElements")]
        public static void DrawElements<T3>(OpenTK.Graphics.ES30.All mode, Int32 count, OpenTK.Graphics.ES30.All type, [InAttribute, OutAttribute] ref T3 indices)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements to be rendered.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDrawElements")]
        public static void DrawElements(OpenTK.Graphics.ES30.PrimitiveType mode, Int32 count, OpenTK.Graphics.ES30.DrawElementsType type, IntPtr indices) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements to be rendered.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDrawElements")]
        [CLSCompliant(false)]
        public static void DrawElements<T3>(OpenTK.Graphics.ES30.PrimitiveType mode, Int32 count, OpenTK.Graphics.ES30.DrawElementsType type, [InAttribute, OutAttribute] T3[] indices)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements to be rendered.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDrawElements")]
        [CLSCompliant(false)]
        public static void DrawElements<T3>(OpenTK.Graphics.ES30.PrimitiveType mode, Int32 count, OpenTK.Graphics.ES30.DrawElementsType type, [InAttribute, OutAttribute] T3[,] indices)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements to be rendered.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDrawElements")]
        [CLSCompliant(false)]
        public static void DrawElements<T3>(OpenTK.Graphics.ES30.PrimitiveType mode, Int32 count, OpenTK.Graphics.ES30.DrawElementsType type, [InAttribute, OutAttribute] T3[,,] indices)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements to be rendered.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDrawElements")]
        public static void DrawElements<T3>(OpenTK.Graphics.ES30.PrimitiveType mode, Int32 count, OpenTK.Graphics.ES30.DrawElementsType type, [InAttribute, OutAttribute] ref T3 indices)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Draw multiple instances of a set of elements
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements to be rendered.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        /// <param name="primcount">
        /// <para>
        /// Specifies the number of instances of the specified range of indices to be rendered.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glDrawElementsInstanced")]
        public static void DrawElementsInstanced(OpenTK.Graphics.ES30.All mode, Int32 count, OpenTK.Graphics.ES30.All type, IntPtr indices, Int32 instancecount) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Draw multiple instances of a set of elements
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements to be rendered.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        /// <param name="primcount">
        /// <para>
        /// Specifies the number of instances of the specified range of indices to be rendered.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glDrawElementsInstanced")]
        [CLSCompliant(false)]
        public static void DrawElementsInstanced<T3>(OpenTK.Graphics.ES30.All mode, Int32 count, OpenTK.Graphics.ES30.All type, [InAttribute, OutAttribute] T3[] indices, Int32 instancecount)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Draw multiple instances of a set of elements
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements to be rendered.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        /// <param name="primcount">
        /// <para>
        /// Specifies the number of instances of the specified range of indices to be rendered.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glDrawElementsInstanced")]
        [CLSCompliant(false)]
        public static void DrawElementsInstanced<T3>(OpenTK.Graphics.ES30.All mode, Int32 count, OpenTK.Graphics.ES30.All type, [InAttribute, OutAttribute] T3[,] indices, Int32 instancecount)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Draw multiple instances of a set of elements
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements to be rendered.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        /// <param name="primcount">
        /// <para>
        /// Specifies the number of instances of the specified range of indices to be rendered.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glDrawElementsInstanced")]
        [CLSCompliant(false)]
        public static void DrawElementsInstanced<T3>(OpenTK.Graphics.ES30.All mode, Int32 count, OpenTK.Graphics.ES30.All type, [InAttribute, OutAttribute] T3[,,] indices, Int32 instancecount)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Draw multiple instances of a set of elements
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements to be rendered.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        /// <param name="primcount">
        /// <para>
        /// Specifies the number of instances of the specified range of indices to be rendered.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glDrawElementsInstanced")]
        public static void DrawElementsInstanced<T3>(OpenTK.Graphics.ES30.All mode, Int32 count, OpenTK.Graphics.ES30.All type, [InAttribute, OutAttribute] ref T3 indices, Int32 instancecount)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Draw multiple instances of a set of elements
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements to be rendered.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        /// <param name="primcount">
        /// <para>
        /// Specifies the number of instances of the specified range of indices to be rendered.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glDrawElementsInstanced")]
        public static void DrawElementsInstanced(OpenTK.Graphics.ES30.PrimitiveType mode, Int32 count, OpenTK.Graphics.ES30.DrawElementsType type, IntPtr indices, Int32 instancecount) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Draw multiple instances of a set of elements
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements to be rendered.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        /// <param name="primcount">
        /// <para>
        /// Specifies the number of instances of the specified range of indices to be rendered.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glDrawElementsInstanced")]
        [CLSCompliant(false)]
        public static void DrawElementsInstanced<T3>(OpenTK.Graphics.ES30.PrimitiveType mode, Int32 count, OpenTK.Graphics.ES30.DrawElementsType type, [InAttribute, OutAttribute] T3[] indices, Int32 instancecount)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Draw multiple instances of a set of elements
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements to be rendered.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        /// <param name="primcount">
        /// <para>
        /// Specifies the number of instances of the specified range of indices to be rendered.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glDrawElementsInstanced")]
        [CLSCompliant(false)]
        public static void DrawElementsInstanced<T3>(OpenTK.Graphics.ES30.PrimitiveType mode, Int32 count, OpenTK.Graphics.ES30.DrawElementsType type, [InAttribute, OutAttribute] T3[,] indices, Int32 instancecount)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Draw multiple instances of a set of elements
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements to be rendered.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        /// <param name="primcount">
        /// <para>
        /// Specifies the number of instances of the specified range of indices to be rendered.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glDrawElementsInstanced")]
        [CLSCompliant(false)]
        public static void DrawElementsInstanced<T3>(OpenTK.Graphics.ES30.PrimitiveType mode, Int32 count, OpenTK.Graphics.ES30.DrawElementsType type, [InAttribute, OutAttribute] T3[,,] indices, Int32 instancecount)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Draw multiple instances of a set of elements
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements to be rendered.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        /// <param name="primcount">
        /// <para>
        /// Specifies the number of instances of the specified range of indices to be rendered.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glDrawElementsInstanced")]
        public static void DrawElementsInstanced<T3>(OpenTK.Graphics.ES30.PrimitiveType mode, Int32 count, OpenTK.Graphics.ES30.DrawElementsType type, [InAttribute, OutAttribute] ref T3 indices, Int32 instancecount)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="start">
        /// <para>
        /// Specifies the minimum array index contained in indices.
        /// </para>
        /// </param>
        /// <param name="end">
        /// <para>
        /// Specifies the maximum array index contained in indices.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements to be rendered.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glDrawRangeElements")]
        [CLSCompliant(false)]
        public static void DrawRangeElements(OpenTK.Graphics.ES30.All mode, Int32 start, Int32 end, Int32 count, OpenTK.Graphics.ES30.All type, IntPtr indices) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="start">
        /// <para>
        /// Specifies the minimum array index contained in indices.
        /// </para>
        /// </param>
        /// <param name="end">
        /// <para>
        /// Specifies the maximum array index contained in indices.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements to be rendered.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glDrawRangeElements")]
        [CLSCompliant(false)]
        public static void DrawRangeElements<T5>(OpenTK.Graphics.ES30.All mode, Int32 start, Int32 end, Int32 count, OpenTK.Graphics.ES30.All type, [InAttribute, OutAttribute] T5[] indices)
            where T5 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="start">
        /// <para>
        /// Specifies the minimum array index contained in indices.
        /// </para>
        /// </param>
        /// <param name="end">
        /// <para>
        /// Specifies the maximum array index contained in indices.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements to be rendered.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glDrawRangeElements")]
        [CLSCompliant(false)]
        public static void DrawRangeElements<T5>(OpenTK.Graphics.ES30.All mode, Int32 start, Int32 end, Int32 count, OpenTK.Graphics.ES30.All type, [InAttribute, OutAttribute] T5[,] indices)
            where T5 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="start">
        /// <para>
        /// Specifies the minimum array index contained in indices.
        /// </para>
        /// </param>
        /// <param name="end">
        /// <para>
        /// Specifies the maximum array index contained in indices.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements to be rendered.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glDrawRangeElements")]
        [CLSCompliant(false)]
        public static void DrawRangeElements<T5>(OpenTK.Graphics.ES30.All mode, Int32 start, Int32 end, Int32 count, OpenTK.Graphics.ES30.All type, [InAttribute, OutAttribute] T5[,,] indices)
            where T5 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="start">
        /// <para>
        /// Specifies the minimum array index contained in indices.
        /// </para>
        /// </param>
        /// <param name="end">
        /// <para>
        /// Specifies the maximum array index contained in indices.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements to be rendered.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glDrawRangeElements")]
        [CLSCompliant(false)]
        public static void DrawRangeElements<T5>(OpenTK.Graphics.ES30.All mode, Int32 start, Int32 end, Int32 count, OpenTK.Graphics.ES30.All type, [InAttribute, OutAttribute] ref T5 indices)
            where T5 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="start">
        /// <para>
        /// Specifies the minimum array index contained in indices.
        /// </para>
        /// </param>
        /// <param name="end">
        /// <para>
        /// Specifies the maximum array index contained in indices.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements to be rendered.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glDrawRangeElements")]
        [CLSCompliant(false)]
        public static void DrawRangeElements(OpenTK.Graphics.ES30.All mode, UInt32 start, UInt32 end, Int32 count, OpenTK.Graphics.ES30.All type, IntPtr indices) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="start">
        /// <para>
        /// Specifies the minimum array index contained in indices.
        /// </para>
        /// </param>
        /// <param name="end">
        /// <para>
        /// Specifies the maximum array index contained in indices.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements to be rendered.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glDrawRangeElements")]
        [CLSCompliant(false)]
        public static void DrawRangeElements<T5>(OpenTK.Graphics.ES30.All mode, UInt32 start, UInt32 end, Int32 count, OpenTK.Graphics.ES30.All type, [InAttribute, OutAttribute] T5[] indices)
            where T5 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="start">
        /// <para>
        /// Specifies the minimum array index contained in indices.
        /// </para>
        /// </param>
        /// <param name="end">
        /// <para>
        /// Specifies the maximum array index contained in indices.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements to be rendered.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glDrawRangeElements")]
        [CLSCompliant(false)]
        public static void DrawRangeElements<T5>(OpenTK.Graphics.ES30.All mode, UInt32 start, UInt32 end, Int32 count, OpenTK.Graphics.ES30.All type, [InAttribute, OutAttribute] T5[,] indices)
            where T5 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="start">
        /// <para>
        /// Specifies the minimum array index contained in indices.
        /// </para>
        /// </param>
        /// <param name="end">
        /// <para>
        /// Specifies the maximum array index contained in indices.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements to be rendered.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glDrawRangeElements")]
        [CLSCompliant(false)]
        public static void DrawRangeElements<T5>(OpenTK.Graphics.ES30.All mode, UInt32 start, UInt32 end, Int32 count, OpenTK.Graphics.ES30.All type, [InAttribute, OutAttribute] T5[,,] indices)
            where T5 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="start">
        /// <para>
        /// Specifies the minimum array index contained in indices.
        /// </para>
        /// </param>
        /// <param name="end">
        /// <para>
        /// Specifies the maximum array index contained in indices.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements to be rendered.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glDrawRangeElements")]
        [CLSCompliant(false)]
        public static void DrawRangeElements<T5>(OpenTK.Graphics.ES30.All mode, UInt32 start, UInt32 end, Int32 count, OpenTK.Graphics.ES30.All type, [InAttribute, OutAttribute] ref T5 indices)
            where T5 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="start">
        /// <para>
        /// Specifies the minimum array index contained in indices.
        /// </para>
        /// </param>
        /// <param name="end">
        /// <para>
        /// Specifies the maximum array index contained in indices.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements to be rendered.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glDrawRangeElements")]
        [CLSCompliant(false)]
        public static void DrawRangeElements(OpenTK.Graphics.ES30.PrimitiveType mode, Int32 start, Int32 end, Int32 count, OpenTK.Graphics.ES30.DrawElementsType type, IntPtr indices) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="start">
        /// <para>
        /// Specifies the minimum array index contained in indices.
        /// </para>
        /// </param>
        /// <param name="end">
        /// <para>
        /// Specifies the maximum array index contained in indices.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements to be rendered.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glDrawRangeElements")]
        [CLSCompliant(false)]
        public static void DrawRangeElements<T5>(OpenTK.Graphics.ES30.PrimitiveType mode, Int32 start, Int32 end, Int32 count, OpenTK.Graphics.ES30.DrawElementsType type, [InAttribute, OutAttribute] T5[] indices)
            where T5 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="start">
        /// <para>
        /// Specifies the minimum array index contained in indices.
        /// </para>
        /// </param>
        /// <param name="end">
        /// <para>
        /// Specifies the maximum array index contained in indices.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements to be rendered.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glDrawRangeElements")]
        [CLSCompliant(false)]
        public static void DrawRangeElements<T5>(OpenTK.Graphics.ES30.PrimitiveType mode, Int32 start, Int32 end, Int32 count, OpenTK.Graphics.ES30.DrawElementsType type, [InAttribute, OutAttribute] T5[,] indices)
            where T5 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="start">
        /// <para>
        /// Specifies the minimum array index contained in indices.
        /// </para>
        /// </param>
        /// <param name="end">
        /// <para>
        /// Specifies the maximum array index contained in indices.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements to be rendered.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glDrawRangeElements")]
        [CLSCompliant(false)]
        public static void DrawRangeElements<T5>(OpenTK.Graphics.ES30.PrimitiveType mode, Int32 start, Int32 end, Int32 count, OpenTK.Graphics.ES30.DrawElementsType type, [InAttribute, OutAttribute] T5[,,] indices)
            where T5 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="start">
        /// <para>
        /// Specifies the minimum array index contained in indices.
        /// </para>
        /// </param>
        /// <param name="end">
        /// <para>
        /// Specifies the maximum array index contained in indices.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements to be rendered.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glDrawRangeElements")]
        [CLSCompliant(false)]
        public static void DrawRangeElements<T5>(OpenTK.Graphics.ES30.PrimitiveType mode, Int32 start, Int32 end, Int32 count, OpenTK.Graphics.ES30.DrawElementsType type, [InAttribute, OutAttribute] ref T5 indices)
            where T5 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="start">
        /// <para>
        /// Specifies the minimum array index contained in indices.
        /// </para>
        /// </param>
        /// <param name="end">
        /// <para>
        /// Specifies the maximum array index contained in indices.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements to be rendered.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glDrawRangeElements")]
        [CLSCompliant(false)]
        public static void DrawRangeElements(OpenTK.Graphics.ES30.PrimitiveType mode, UInt32 start, UInt32 end, Int32 count, OpenTK.Graphics.ES30.DrawElementsType type, IntPtr indices) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="start">
        /// <para>
        /// Specifies the minimum array index contained in indices.
        /// </para>
        /// </param>
        /// <param name="end">
        /// <para>
        /// Specifies the maximum array index contained in indices.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements to be rendered.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glDrawRangeElements")]
        [CLSCompliant(false)]
        public static void DrawRangeElements<T5>(OpenTK.Graphics.ES30.PrimitiveType mode, UInt32 start, UInt32 end, Int32 count, OpenTK.Graphics.ES30.DrawElementsType type, [InAttribute, OutAttribute] T5[] indices)
            where T5 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="start">
        /// <para>
        /// Specifies the minimum array index contained in indices.
        /// </para>
        /// </param>
        /// <param name="end">
        /// <para>
        /// Specifies the maximum array index contained in indices.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements to be rendered.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glDrawRangeElements")]
        [CLSCompliant(false)]
        public static void DrawRangeElements<T5>(OpenTK.Graphics.ES30.PrimitiveType mode, UInt32 start, UInt32 end, Int32 count, OpenTK.Graphics.ES30.DrawElementsType type, [InAttribute, OutAttribute] T5[,] indices)
            where T5 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="start">
        /// <para>
        /// Specifies the minimum array index contained in indices.
        /// </para>
        /// </param>
        /// <param name="end">
        /// <para>
        /// Specifies the maximum array index contained in indices.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements to be rendered.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glDrawRangeElements")]
        [CLSCompliant(false)]
        public static void DrawRangeElements<T5>(OpenTK.Graphics.ES30.PrimitiveType mode, UInt32 start, UInt32 end, Int32 count, OpenTK.Graphics.ES30.DrawElementsType type, [InAttribute, OutAttribute] T5[,,] indices)
            where T5 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
        /// </para>
        /// </param>
        /// <param name="start">
        /// <para>
        /// Specifies the minimum array index contained in indices.
        /// </para>
        /// </param>
        /// <param name="end">
        /// <para>
        /// Specifies the maximum array index contained in indices.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements to be rendered.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glDrawRangeElements")]
        [CLSCompliant(false)]
        public static void DrawRangeElements<T5>(OpenTK.Graphics.ES30.PrimitiveType mode, UInt32 start, UInt32 end, Int32 count, OpenTK.Graphics.ES30.DrawElementsType type, [InAttribute, OutAttribute] ref T5 indices)
            where T5 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Enable or disable server-side GL capabilities
        /// </summary>
        /// <param name="cap">
        /// <para>
        /// Specifies a symbolic constant indicating a GL capability.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the switch to disable (for glEnablei and glDisablei only).
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glEnable")]
        public static void Enable(OpenTK.Graphics.ES30.All cap) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Enable or disable server-side GL capabilities
        /// </summary>
        /// <param name="cap">
        /// <para>
        /// Specifies a symbolic constant indicating a GL capability.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the switch to disable (for glEnablei and glDisablei only).
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glEnable")]
        public static void Enable(OpenTK.Graphics.ES30.EnableCap cap) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Enable or disable a generic vertex attribute array
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be enabled or disabled.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glEnableVertexAttribArray")]
        [CLSCompliant(false)]
        public static void EnableVertexAttribArray(Int32 index) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Enable or disable a generic vertex attribute array
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be enabled or disabled.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glEnableVertexAttribArray")]
        [CLSCompliant(false)]
        public static void EnableVertexAttribArray(UInt32 index) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]</summary>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glEndQuery")]
        public static void EndQuery(OpenTK.Graphics.ES30.All target) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]</summary>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glEndQuery")]
        public static void EndQuery(OpenTK.Graphics.ES30.QueryTarget target) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]</summary>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glEndTransformFeedback")]
        public static void EndTransformFeedback() { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Create a new sync object and insert it into the GL command stream
        /// </summary>
        /// <param name="condition">
        /// <para>
        /// Specifies the condition that must be met to set the sync object's state to signaled. condition must be GL_SYNC_GPU_COMMANDS_COMPLETE.
        /// </para>
        /// </param>
        /// <param name="flags">
        /// <para>
        /// Specifies a bitwise combination of flags controlling the behavior of the sync object. No flags are presently defined for this operation and flags must be zero. flags is a placeholder for anticipated future extensions of fence sync object capabilities.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glFenceSync")]
        public static IntPtr FenceSync(OpenTK.Graphics.ES30.All condition, OpenTK.Graphics.ES30.All flags) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Create a new sync object and insert it into the GL command stream
        /// </summary>
        /// <param name="condition">
        /// <para>
        /// Specifies the condition that must be met to set the sync object's state to signaled. condition must be GL_SYNC_GPU_COMMANDS_COMPLETE.
        /// </para>
        /// </param>
        /// <param name="flags">
        /// <para>
        /// Specifies a bitwise combination of flags controlling the behavior of the sync object. No flags are presently defined for this operation and flags must be zero. flags is a placeholder for anticipated future extensions of fence sync object capabilities.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glFenceSync")]
        public static IntPtr FenceSync(OpenTK.Graphics.ES30.SyncCondition condition, OpenTK.Graphics.ES30.WaitSyncFlags flags) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Block until all GL execution is complete
        /// </summary>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glFinish")]
        public static void Finish() { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Force execution of GL commands in finite time
        /// </summary>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glFlush")]
        public static void Flush() { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Indicate modifications to a range of a mapped buffer
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target of the flush operation. target must be GL_ARRAY_BUFFER, GL_COPY_READ_BUFFER, GL_COPY_WRITE_BUFFER, GL_DISPATCH_INDIRECT_BUFFER, GL_DRAW_INDIRECT_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, GL_PIXEL_UNPACK_BUFFER, GL_QUERY_BUFFER, GL_SHADER_STORAGE_BUFFER, GL_TEXTURE_BUFFER, GL_TRANSFORM_FEEDBACK_BUFFER, or GL_UNIFORM_BUFFER.
        /// </para>
        /// </param>
        /// <param name="offset">
        /// <para>
        /// Specifies the start of the buffer subrange, in basic machine units.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the length of the buffer subrange, in basic machine units.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glFlushMappedBufferRange")]
        public static void FlushMappedBufferRange(OpenTK.Graphics.ES30.All target, IntPtr offset, IntPtr length) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Indicate modifications to a range of a mapped buffer
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target of the flush operation. target must be GL_ARRAY_BUFFER, GL_COPY_READ_BUFFER, GL_COPY_WRITE_BUFFER, GL_DISPATCH_INDIRECT_BUFFER, GL_DRAW_INDIRECT_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, GL_PIXEL_UNPACK_BUFFER, GL_QUERY_BUFFER, GL_SHADER_STORAGE_BUFFER, GL_TEXTURE_BUFFER, GL_TRANSFORM_FEEDBACK_BUFFER, or GL_UNIFORM_BUFFER.
        /// </para>
        /// </param>
        /// <param name="offset">
        /// <para>
        /// Specifies the start of the buffer subrange, in basic machine units.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the length of the buffer subrange, in basic machine units.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glFlushMappedBufferRange")]
        public static void FlushMappedBufferRange(OpenTK.Graphics.ES30.BufferTarget target, IntPtr offset, IntPtr length) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Attach a renderbuffer as a logical buffer to the currently bound framebuffer object
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the framebuffer target. target must be GL_DRAW_FRAMEBUFFER, GL_READ_FRAMEBUFFER, or GL_FRAMEBUFFER. GL_FRAMEBUFFER is equivalent to GL_DRAW_FRAMEBUFFER.
        /// </para>
        /// </param>
        /// <param name="attachment">
        /// <para>
        /// Specifies the attachment point of the framebuffer.
        /// </para>
        /// </param>
        /// <param name="renderbuffertarget">
        /// <para>
        /// Specifies the renderbuffer target and must be GL_RENDERBUFFER.
        /// </para>
        /// </param>
        /// <param name="renderbuffer">
        /// <para>
        /// Specifies the name of an existing renderbuffer object of type renderbuffertarget to attach.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glFramebufferRenderbuffer")]
        [CLSCompliant(false)]
        public static void FramebufferRenderbuffer(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All attachment, OpenTK.Graphics.ES30.All renderbuffertarget, Int32 renderbuffer) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Attach a renderbuffer as a logical buffer to the currently bound framebuffer object
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the framebuffer target. target must be GL_DRAW_FRAMEBUFFER, GL_READ_FRAMEBUFFER, or GL_FRAMEBUFFER. GL_FRAMEBUFFER is equivalent to GL_DRAW_FRAMEBUFFER.
        /// </para>
        /// </param>
        /// <param name="attachment">
        /// <para>
        /// Specifies the attachment point of the framebuffer.
        /// </para>
        /// </param>
        /// <param name="renderbuffertarget">
        /// <para>
        /// Specifies the renderbuffer target and must be GL_RENDERBUFFER.
        /// </para>
        /// </param>
        /// <param name="renderbuffer">
        /// <para>
        /// Specifies the name of an existing renderbuffer object of type renderbuffertarget to attach.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glFramebufferRenderbuffer")]
        [CLSCompliant(false)]
        public static void FramebufferRenderbuffer(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All attachment, OpenTK.Graphics.ES30.All renderbuffertarget, UInt32 renderbuffer) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Attach a renderbuffer as a logical buffer to the currently bound framebuffer object
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the framebuffer target. target must be GL_DRAW_FRAMEBUFFER, GL_READ_FRAMEBUFFER, or GL_FRAMEBUFFER. GL_FRAMEBUFFER is equivalent to GL_DRAW_FRAMEBUFFER.
        /// </para>
        /// </param>
        /// <param name="attachment">
        /// <para>
        /// Specifies the attachment point of the framebuffer.
        /// </para>
        /// </param>
        /// <param name="renderbuffertarget">
        /// <para>
        /// Specifies the renderbuffer target and must be GL_RENDERBUFFER.
        /// </para>
        /// </param>
        /// <param name="renderbuffer">
        /// <para>
        /// Specifies the name of an existing renderbuffer object of type renderbuffertarget to attach.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glFramebufferRenderbuffer")]
        [CLSCompliant(false)]
        public static void FramebufferRenderbuffer(OpenTK.Graphics.ES30.FramebufferTarget target, OpenTK.Graphics.ES30.FramebufferAttachment attachment, OpenTK.Graphics.ES30.RenderbufferTarget renderbuffertarget, Int32 renderbuffer) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Attach a renderbuffer as a logical buffer to the currently bound framebuffer object
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the framebuffer target. target must be GL_DRAW_FRAMEBUFFER, GL_READ_FRAMEBUFFER, or GL_FRAMEBUFFER. GL_FRAMEBUFFER is equivalent to GL_DRAW_FRAMEBUFFER.
        /// </para>
        /// </param>
        /// <param name="attachment">
        /// <para>
        /// Specifies the attachment point of the framebuffer.
        /// </para>
        /// </param>
        /// <param name="renderbuffertarget">
        /// <para>
        /// Specifies the renderbuffer target and must be GL_RENDERBUFFER.
        /// </para>
        /// </param>
        /// <param name="renderbuffer">
        /// <para>
        /// Specifies the name of an existing renderbuffer object of type renderbuffertarget to attach.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glFramebufferRenderbuffer")]
        [CLSCompliant(false)]
        public static void FramebufferRenderbuffer(OpenTK.Graphics.ES30.FramebufferTarget target, OpenTK.Graphics.ES30.FramebufferAttachment attachment, OpenTK.Graphics.ES30.RenderbufferTarget renderbuffertarget, UInt32 renderbuffer) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]</summary>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glFramebufferTexture2D")]
        [CLSCompliant(false)]
        public static void FramebufferTexture2D(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All attachment, OpenTK.Graphics.ES30.All textarget, Int32 texture, Int32 level) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]</summary>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glFramebufferTexture2D")]
        [CLSCompliant(false)]
        public static void FramebufferTexture2D(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All attachment, OpenTK.Graphics.ES30.All textarget, UInt32 texture, Int32 level) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]</summary>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glFramebufferTexture2D")]
        [CLSCompliant(false)]
        public static void FramebufferTexture2D(OpenTK.Graphics.ES30.FramebufferTarget target, OpenTK.Graphics.ES30.FramebufferAttachment attachment, OpenTK.Graphics.ES30.TextureTarget2d textarget, Int32 texture, Int32 level) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]</summary>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glFramebufferTexture2D")]
        [CLSCompliant(false)]
        public static void FramebufferTexture2D(OpenTK.Graphics.ES30.FramebufferTarget target, OpenTK.Graphics.ES30.FramebufferAttachment attachment, OpenTK.Graphics.ES30.TextureTarget2d textarget, UInt32 texture, Int32 level) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Attach a single layer of a texture to a framebuffer
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the framebuffer target. target must be GL_DRAW_FRAMEBUFFER, GL_READ_FRAMEBUFFER, or GL_FRAMEBUFFER. GL_FRAMEBUFFER is equivalent to GL_DRAW_FRAMEBUFFER.
        /// </para>
        /// </param>
        /// <param name="attachment">
        /// <para>
        /// Specifies the attachment point of the framebuffer. attachment must be GL_COLOR_ATTACHMENTi, GL_DEPTH_ATTACHMENT, GL_STENCIL_ATTACHMENT or GL_DEPTH_STENCIL_ATTACHMENT.
        /// </para>
        /// </param>
        /// <param name="texture">
        /// <para>
        /// Specifies the texture object to attach to the framebuffer attachment point named by attachment.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the mipmap level of texture to attach.
        /// </para>
        /// </param>
        /// <param name="layer">
        /// <para>
        /// Specifies the layer of texture to attach.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glFramebufferTextureLayer")]
        [CLSCompliant(false)]
        public static void FramebufferTextureLayer(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All attachment, Int32 texture, Int32 level, Int32 layer) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Attach a single layer of a texture to a framebuffer
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the framebuffer target. target must be GL_DRAW_FRAMEBUFFER, GL_READ_FRAMEBUFFER, or GL_FRAMEBUFFER. GL_FRAMEBUFFER is equivalent to GL_DRAW_FRAMEBUFFER.
        /// </para>
        /// </param>
        /// <param name="attachment">
        /// <para>
        /// Specifies the attachment point of the framebuffer. attachment must be GL_COLOR_ATTACHMENTi, GL_DEPTH_ATTACHMENT, GL_STENCIL_ATTACHMENT or GL_DEPTH_STENCIL_ATTACHMENT.
        /// </para>
        /// </param>
        /// <param name="texture">
        /// <para>
        /// Specifies the texture object to attach to the framebuffer attachment point named by attachment.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the mipmap level of texture to attach.
        /// </para>
        /// </param>
        /// <param name="layer">
        /// <para>
        /// Specifies the layer of texture to attach.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glFramebufferTextureLayer")]
        [CLSCompliant(false)]
        public static void FramebufferTextureLayer(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All attachment, UInt32 texture, Int32 level, Int32 layer) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Attach a single layer of a texture to a framebuffer
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the framebuffer target. target must be GL_DRAW_FRAMEBUFFER, GL_READ_FRAMEBUFFER, or GL_FRAMEBUFFER. GL_FRAMEBUFFER is equivalent to GL_DRAW_FRAMEBUFFER.
        /// </para>
        /// </param>
        /// <param name="attachment">
        /// <para>
        /// Specifies the attachment point of the framebuffer. attachment must be GL_COLOR_ATTACHMENTi, GL_DEPTH_ATTACHMENT, GL_STENCIL_ATTACHMENT or GL_DEPTH_STENCIL_ATTACHMENT.
        /// </para>
        /// </param>
        /// <param name="texture">
        /// <para>
        /// Specifies the texture object to attach to the framebuffer attachment point named by attachment.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the mipmap level of texture to attach.
        /// </para>
        /// </param>
        /// <param name="layer">
        /// <para>
        /// Specifies the layer of texture to attach.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glFramebufferTextureLayer")]
        [CLSCompliant(false)]
        public static void FramebufferTextureLayer(OpenTK.Graphics.ES30.FramebufferTarget target, OpenTK.Graphics.ES30.FramebufferAttachment attachment, Int32 texture, Int32 level, Int32 layer) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Attach a single layer of a texture to a framebuffer
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the framebuffer target. target must be GL_DRAW_FRAMEBUFFER, GL_READ_FRAMEBUFFER, or GL_FRAMEBUFFER. GL_FRAMEBUFFER is equivalent to GL_DRAW_FRAMEBUFFER.
        /// </para>
        /// </param>
        /// <param name="attachment">
        /// <para>
        /// Specifies the attachment point of the framebuffer. attachment must be GL_COLOR_ATTACHMENTi, GL_DEPTH_ATTACHMENT, GL_STENCIL_ATTACHMENT or GL_DEPTH_STENCIL_ATTACHMENT.
        /// </para>
        /// </param>
        /// <param name="texture">
        /// <para>
        /// Specifies the texture object to attach to the framebuffer attachment point named by attachment.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the mipmap level of texture to attach.
        /// </para>
        /// </param>
        /// <param name="layer">
        /// <para>
        /// Specifies the layer of texture to attach.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glFramebufferTextureLayer")]
        [CLSCompliant(false)]
        public static void FramebufferTextureLayer(OpenTK.Graphics.ES30.FramebufferTarget target, OpenTK.Graphics.ES30.FramebufferAttachment attachment, UInt32 texture, Int32 level, Int32 layer) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Define front- and back-facing polygons
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies the orientation of front-facing polygons. GL_CW and GL_CCW are accepted. The initial value is GL_CCW.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glFrontFace")]
        public static void FrontFace(OpenTK.Graphics.ES30.All mode) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Define front- and back-facing polygons
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies the orientation of front-facing polygons. GL_CW and GL_CCW are accepted. The initial value is GL_CCW.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glFrontFace")]
        public static void FrontFace(OpenTK.Graphics.ES30.FrontFaceDirection mode) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Generate buffer object names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of buffer object names to be generated.
        /// </para>
        /// </param>
        /// <param name="buffers">
        /// <para>
        /// Specifies an array in which the generated buffer object names are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGenBuffers")]
        [CLSCompliant(false)]
        public static Int32 GenBuffer() { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Generate buffer object names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of buffer object names to be generated.
        /// </para>
        /// </param>
        /// <param name="buffers">
        /// <para>
        /// Specifies an array in which the generated buffer object names are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGenBuffers")]
        [CLSCompliant(false)]
        public static void GenBuffers(Int32 n, [OutAttribute] Int32[] buffers) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Generate buffer object names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of buffer object names to be generated.
        /// </para>
        /// </param>
        /// <param name="buffers">
        /// <para>
        /// Specifies an array in which the generated buffer object names are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGenBuffers")]
        [CLSCompliant(false)]
        public static void GenBuffers(Int32 n, [OutAttribute] out Int32 buffers) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Generate buffer object names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of buffer object names to be generated.
        /// </para>
        /// </param>
        /// <param name="buffers">
        /// <para>
        /// Specifies an array in which the generated buffer object names are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGenBuffers")]
        [CLSCompliant(false)]
        public static unsafe void GenBuffers(Int32 n, [OutAttribute] Int32* buffers) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Generate buffer object names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of buffer object names to be generated.
        /// </para>
        /// </param>
        /// <param name="buffers">
        /// <para>
        /// Specifies an array in which the generated buffer object names are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGenBuffers")]
        [CLSCompliant(false)]
        public static void GenBuffers(Int32 n, [OutAttribute] UInt32[] buffers) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Generate buffer object names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of buffer object names to be generated.
        /// </para>
        /// </param>
        /// <param name="buffers">
        /// <para>
        /// Specifies an array in which the generated buffer object names are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGenBuffers")]
        [CLSCompliant(false)]
        public static void GenBuffers(Int32 n, [OutAttribute] out UInt32 buffers) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Generate buffer object names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of buffer object names to be generated.
        /// </para>
        /// </param>
        /// <param name="buffers">
        /// <para>
        /// Specifies an array in which the generated buffer object names are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGenBuffers")]
        [CLSCompliant(false)]
        public static unsafe void GenBuffers(Int32 n, [OutAttribute] UInt32* buffers) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Generate mipmaps for a specified texture target
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target to which the texture whose mimaps to generate is bound. target must be GL_TEXTURE_1D, GL_TEXTURE_2D, GL_TEXTURE_3D, GL_TEXTURE_1D_ARRAY, GL_TEXTURE_2D_ARRAY or GL_TEXTURE_CUBE_MAP.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGenerateMipmap")]
        public static void GenerateMipmap(OpenTK.Graphics.ES30.All target) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Generate mipmaps for a specified texture target
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target to which the texture whose mimaps to generate is bound. target must be GL_TEXTURE_1D, GL_TEXTURE_2D, GL_TEXTURE_3D, GL_TEXTURE_1D_ARRAY, GL_TEXTURE_2D_ARRAY or GL_TEXTURE_CUBE_MAP.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGenerateMipmap")]
        public static void GenerateMipmap(OpenTK.Graphics.ES30.TextureTarget target) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Generate framebuffer object names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of framebuffer object names to generate.
        /// </para>
        /// </param>
        /// <param name="ids">
        /// <para>
        /// Specifies an array in which the generated framebuffer object names are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGenFramebuffers")]
        [CLSCompliant(false)]
        public static Int32 GenFramebuffer() { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Generate framebuffer object names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of framebuffer object names to generate.
        /// </para>
        /// </param>
        /// <param name="ids">
        /// <para>
        /// Specifies an array in which the generated framebuffer object names are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGenFramebuffers")]
        [CLSCompliant(false)]
        public static void GenFramebuffers(Int32 n, [OutAttribute] Int32[] framebuffers) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Generate framebuffer object names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of framebuffer object names to generate.
        /// </para>
        /// </param>
        /// <param name="ids">
        /// <para>
        /// Specifies an array in which the generated framebuffer object names are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGenFramebuffers")]
        [CLSCompliant(false)]
        public static void GenFramebuffers(Int32 n, [OutAttribute] out Int32 framebuffers) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Generate framebuffer object names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of framebuffer object names to generate.
        /// </para>
        /// </param>
        /// <param name="ids">
        /// <para>
        /// Specifies an array in which the generated framebuffer object names are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGenFramebuffers")]
        [CLSCompliant(false)]
        public static unsafe void GenFramebuffers(Int32 n, [OutAttribute] Int32* framebuffers) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Generate framebuffer object names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of framebuffer object names to generate.
        /// </para>
        /// </param>
        /// <param name="ids">
        /// <para>
        /// Specifies an array in which the generated framebuffer object names are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGenFramebuffers")]
        [CLSCompliant(false)]
        public static void GenFramebuffers(Int32 n, [OutAttribute] UInt32[] framebuffers) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Generate framebuffer object names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of framebuffer object names to generate.
        /// </para>
        /// </param>
        /// <param name="ids">
        /// <para>
        /// Specifies an array in which the generated framebuffer object names are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGenFramebuffers")]
        [CLSCompliant(false)]
        public static void GenFramebuffers(Int32 n, [OutAttribute] out UInt32 framebuffers) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Generate framebuffer object names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of framebuffer object names to generate.
        /// </para>
        /// </param>
        /// <param name="ids">
        /// <para>
        /// Specifies an array in which the generated framebuffer object names are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGenFramebuffers")]
        [CLSCompliant(false)]
        public static unsafe void GenFramebuffers(Int32 n, [OutAttribute] UInt32* framebuffers) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Generate query object names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of query object names to be generated.
        /// </para>
        /// </param>
        /// <param name="ids">
        /// <para>
        /// Specifies an array in which the generated query object names are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGenQueries")]
        [CLSCompliant(false)]
        public static Int32 GenQuery() { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Generate query object names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of query object names to be generated.
        /// </para>
        /// </param>
        /// <param name="ids">
        /// <para>
        /// Specifies an array in which the generated query object names are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGenQueries")]
        [CLSCompliant(false)]
        public static void GenQueries(Int32 n, [OutAttribute] Int32[] ids) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Generate query object names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of query object names to be generated.
        /// </para>
        /// </param>
        /// <param name="ids">
        /// <para>
        /// Specifies an array in which the generated query object names are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGenQueries")]
        [CLSCompliant(false)]
        public static void GenQueries(Int32 n, [OutAttribute] out Int32 ids) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Generate query object names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of query object names to be generated.
        /// </para>
        /// </param>
        /// <param name="ids">
        /// <para>
        /// Specifies an array in which the generated query object names are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGenQueries")]
        [CLSCompliant(false)]
        public static unsafe void GenQueries(Int32 n, [OutAttribute] Int32* ids) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Generate query object names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of query object names to be generated.
        /// </para>
        /// </param>
        /// <param name="ids">
        /// <para>
        /// Specifies an array in which the generated query object names are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGenQueries")]
        [CLSCompliant(false)]
        public static void GenQueries(Int32 n, [OutAttribute] UInt32[] ids) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Generate query object names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of query object names to be generated.
        /// </para>
        /// </param>
        /// <param name="ids">
        /// <para>
        /// Specifies an array in which the generated query object names are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGenQueries")]
        [CLSCompliant(false)]
        public static void GenQueries(Int32 n, [OutAttribute] out UInt32 ids) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Generate query object names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of query object names to be generated.
        /// </para>
        /// </param>
        /// <param name="ids">
        /// <para>
        /// Specifies an array in which the generated query object names are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGenQueries")]
        [CLSCompliant(false)]
        public static unsafe void GenQueries(Int32 n, [OutAttribute] UInt32* ids) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Generate renderbuffer object names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of renderbuffer object names to generate.
        /// </para>
        /// </param>
        /// <param name="renderbuffers">
        /// <para>
        /// Specifies an array in which the generated renderbuffer object names are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGenRenderbuffers")]
        [CLSCompliant(false)]
        public static Int32 GenRenderbuffer() { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Generate renderbuffer object names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of renderbuffer object names to generate.
        /// </para>
        /// </param>
        /// <param name="renderbuffers">
        /// <para>
        /// Specifies an array in which the generated renderbuffer object names are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGenRenderbuffers")]
        [CLSCompliant(false)]
        public static void GenRenderbuffers(Int32 n, [OutAttribute] Int32[] renderbuffers) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Generate renderbuffer object names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of renderbuffer object names to generate.
        /// </para>
        /// </param>
        /// <param name="renderbuffers">
        /// <para>
        /// Specifies an array in which the generated renderbuffer object names are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGenRenderbuffers")]
        [CLSCompliant(false)]
        public static void GenRenderbuffers(Int32 n, [OutAttribute] out Int32 renderbuffers) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Generate renderbuffer object names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of renderbuffer object names to generate.
        /// </para>
        /// </param>
        /// <param name="renderbuffers">
        /// <para>
        /// Specifies an array in which the generated renderbuffer object names are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGenRenderbuffers")]
        [CLSCompliant(false)]
        public static unsafe void GenRenderbuffers(Int32 n, [OutAttribute] Int32* renderbuffers) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Generate renderbuffer object names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of renderbuffer object names to generate.
        /// </para>
        /// </param>
        /// <param name="renderbuffers">
        /// <para>
        /// Specifies an array in which the generated renderbuffer object names are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGenRenderbuffers")]
        [CLSCompliant(false)]
        public static void GenRenderbuffers(Int32 n, [OutAttribute] UInt32[] renderbuffers) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Generate renderbuffer object names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of renderbuffer object names to generate.
        /// </para>
        /// </param>
        /// <param name="renderbuffers">
        /// <para>
        /// Specifies an array in which the generated renderbuffer object names are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGenRenderbuffers")]
        [CLSCompliant(false)]
        public static void GenRenderbuffers(Int32 n, [OutAttribute] out UInt32 renderbuffers) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Generate renderbuffer object names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of renderbuffer object names to generate.
        /// </para>
        /// </param>
        /// <param name="renderbuffers">
        /// <para>
        /// Specifies an array in which the generated renderbuffer object names are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGenRenderbuffers")]
        [CLSCompliant(false)]
        public static unsafe void GenRenderbuffers(Int32 n, [OutAttribute] UInt32* renderbuffers) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Generate sampler object names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of sampler object names to generate.
        /// </para>
        /// </param>
        /// <param name="samplers">
        /// <para>
        /// Specifies an array in which the generated sampler object names are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGenSamplers")]
        [CLSCompliant(false)]
        public static Int32 GenSampler() { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Generate sampler object names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of sampler object names to generate.
        /// </para>
        /// </param>
        /// <param name="samplers">
        /// <para>
        /// Specifies an array in which the generated sampler object names are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGenSamplers")]
        [CLSCompliant(false)]
        public static void GenSamplers(Int32 count, [OutAttribute] Int32[] samplers) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Generate sampler object names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of sampler object names to generate.
        /// </para>
        /// </param>
        /// <param name="samplers">
        /// <para>
        /// Specifies an array in which the generated sampler object names are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGenSamplers")]
        [CLSCompliant(false)]
        public static void GenSamplers(Int32 count, [OutAttribute] out Int32 samplers) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Generate sampler object names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of sampler object names to generate.
        /// </para>
        /// </param>
        /// <param name="samplers">
        /// <para>
        /// Specifies an array in which the generated sampler object names are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGenSamplers")]
        [CLSCompliant(false)]
        public static unsafe void GenSamplers(Int32 count, [OutAttribute] Int32* samplers) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Generate sampler object names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of sampler object names to generate.
        /// </para>
        /// </param>
        /// <param name="samplers">
        /// <para>
        /// Specifies an array in which the generated sampler object names are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGenSamplers")]
        [CLSCompliant(false)]
        public static void GenSamplers(Int32 count, [OutAttribute] UInt32[] samplers) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Generate sampler object names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of sampler object names to generate.
        /// </para>
        /// </param>
        /// <param name="samplers">
        /// <para>
        /// Specifies an array in which the generated sampler object names are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGenSamplers")]
        [CLSCompliant(false)]
        public static void GenSamplers(Int32 count, [OutAttribute] out UInt32 samplers) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Generate sampler object names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of sampler object names to generate.
        /// </para>
        /// </param>
        /// <param name="samplers">
        /// <para>
        /// Specifies an array in which the generated sampler object names are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGenSamplers")]
        [CLSCompliant(false)]
        public static unsafe void GenSamplers(Int32 count, [OutAttribute] UInt32* samplers) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Generate texture names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of texture names to be generated.
        /// </para>
        /// </param>
        /// <param name="textures">
        /// <para>
        /// Specifies an array in which the generated texture names are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGenTextures")]
        [CLSCompliant(false)]
        public static Int32 GenTexture() { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Generate texture names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of texture names to be generated.
        /// </para>
        /// </param>
        /// <param name="textures">
        /// <para>
        /// Specifies an array in which the generated texture names are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGenTextures")]
        [CLSCompliant(false)]
        public static void GenTextures(Int32 n, [OutAttribute] Int32[] textures) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Generate texture names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of texture names to be generated.
        /// </para>
        /// </param>
        /// <param name="textures">
        /// <para>
        /// Specifies an array in which the generated texture names are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGenTextures")]
        [CLSCompliant(false)]
        public static void GenTextures(Int32 n, [OutAttribute] out Int32 textures) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Generate texture names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of texture names to be generated.
        /// </para>
        /// </param>
        /// <param name="textures">
        /// <para>
        /// Specifies an array in which the generated texture names are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGenTextures")]
        [CLSCompliant(false)]
        public static unsafe void GenTextures(Int32 n, [OutAttribute] Int32* textures) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Generate texture names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of texture names to be generated.
        /// </para>
        /// </param>
        /// <param name="textures">
        /// <para>
        /// Specifies an array in which the generated texture names are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGenTextures")]
        [CLSCompliant(false)]
        public static void GenTextures(Int32 n, [OutAttribute] UInt32[] textures) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Generate texture names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of texture names to be generated.
        /// </para>
        /// </param>
        /// <param name="textures">
        /// <para>
        /// Specifies an array in which the generated texture names are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGenTextures")]
        [CLSCompliant(false)]
        public static void GenTextures(Int32 n, [OutAttribute] out UInt32 textures) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Generate texture names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of texture names to be generated.
        /// </para>
        /// </param>
        /// <param name="textures">
        /// <para>
        /// Specifies an array in which the generated texture names are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGenTextures")]
        [CLSCompliant(false)]
        public static unsafe void GenTextures(Int32 n, [OutAttribute] UInt32* textures) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Reserve transform feedback object names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of transform feedback object names to reserve.
        /// </para>
        /// </param>
        /// <param name="ids">
        /// <para>
        /// Specifies an array of into which the reserved names will be written.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGenTransformFeedbacks")]
        [CLSCompliant(false)]
        public static Int32 GenTransformFeedback() { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Reserve transform feedback object names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of transform feedback object names to reserve.
        /// </para>
        /// </param>
        /// <param name="ids">
        /// <para>
        /// Specifies an array of into which the reserved names will be written.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGenTransformFeedbacks")]
        [CLSCompliant(false)]
        public static void GenTransformFeedbacks(Int32 n, [OutAttribute] Int32[] ids) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Reserve transform feedback object names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of transform feedback object names to reserve.
        /// </para>
        /// </param>
        /// <param name="ids">
        /// <para>
        /// Specifies an array of into which the reserved names will be written.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGenTransformFeedbacks")]
        [CLSCompliant(false)]
        public static void GenTransformFeedbacks(Int32 n, [OutAttribute] out Int32 ids) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Reserve transform feedback object names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of transform feedback object names to reserve.
        /// </para>
        /// </param>
        /// <param name="ids">
        /// <para>
        /// Specifies an array of into which the reserved names will be written.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGenTransformFeedbacks")]
        [CLSCompliant(false)]
        public static unsafe void GenTransformFeedbacks(Int32 n, [OutAttribute] Int32* ids) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Reserve transform feedback object names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of transform feedback object names to reserve.
        /// </para>
        /// </param>
        /// <param name="ids">
        /// <para>
        /// Specifies an array of into which the reserved names will be written.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGenTransformFeedbacks")]
        [CLSCompliant(false)]
        public static void GenTransformFeedbacks(Int32 n, [OutAttribute] UInt32[] ids) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Reserve transform feedback object names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of transform feedback object names to reserve.
        /// </para>
        /// </param>
        /// <param name="ids">
        /// <para>
        /// Specifies an array of into which the reserved names will be written.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGenTransformFeedbacks")]
        [CLSCompliant(false)]
        public static void GenTransformFeedbacks(Int32 n, [OutAttribute] out UInt32 ids) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Reserve transform feedback object names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of transform feedback object names to reserve.
        /// </para>
        /// </param>
        /// <param name="ids">
        /// <para>
        /// Specifies an array of into which the reserved names will be written.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGenTransformFeedbacks")]
        [CLSCompliant(false)]
        public static unsafe void GenTransformFeedbacks(Int32 n, [OutAttribute] UInt32* ids) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Generate vertex array object names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of vertex array object names to generate.
        /// </para>
        /// </param>
        /// <param name="arrays">
        /// <para>
        /// Specifies an array in which the generated vertex array object names are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGenVertexArrays")]
        [CLSCompliant(false)]
        public static Int32 GenVertexArray() { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Generate vertex array object names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of vertex array object names to generate.
        /// </para>
        /// </param>
        /// <param name="arrays">
        /// <para>
        /// Specifies an array in which the generated vertex array object names are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGenVertexArrays")]
        [CLSCompliant(false)]
        public static void GenVertexArrays(Int32 n, [OutAttribute] Int32[] arrays) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Generate vertex array object names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of vertex array object names to generate.
        /// </para>
        /// </param>
        /// <param name="arrays">
        /// <para>
        /// Specifies an array in which the generated vertex array object names are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGenVertexArrays")]
        [CLSCompliant(false)]
        public static void GenVertexArrays(Int32 n, [OutAttribute] out Int32 arrays) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Generate vertex array object names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of vertex array object names to generate.
        /// </para>
        /// </param>
        /// <param name="arrays">
        /// <para>
        /// Specifies an array in which the generated vertex array object names are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGenVertexArrays")]
        [CLSCompliant(false)]
        public static unsafe void GenVertexArrays(Int32 n, [OutAttribute] Int32* arrays) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Generate vertex array object names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of vertex array object names to generate.
        /// </para>
        /// </param>
        /// <param name="arrays">
        /// <para>
        /// Specifies an array in which the generated vertex array object names are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGenVertexArrays")]
        [CLSCompliant(false)]
        public static void GenVertexArrays(Int32 n, [OutAttribute] UInt32[] arrays) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Generate vertex array object names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of vertex array object names to generate.
        /// </para>
        /// </param>
        /// <param name="arrays">
        /// <para>
        /// Specifies an array in which the generated vertex array object names are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGenVertexArrays")]
        [CLSCompliant(false)]
        public static void GenVertexArrays(Int32 n, [OutAttribute] out UInt32 arrays) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Generate vertex array object names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of vertex array object names to generate.
        /// </para>
        /// </param>
        /// <param name="arrays">
        /// <para>
        /// Specifies an array in which the generated vertex array object names are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGenVertexArrays")]
        [CLSCompliant(false)]
        public static unsafe void GenVertexArrays(Int32 n, [OutAttribute] UInt32* arrays) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Returns information about an active attribute variable for the specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the attribute variable to be queried.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than NULL is passed.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Returns the size of the attribute variable.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Returns the data type of the attribute variable.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// Returns a null terminated string containing the name of the attribute variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetActiveAttrib")]
        [CLSCompliant(false)]
        public static void GetActiveAttrib(Int32 program, Int32 index, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] out Int32 size, [OutAttribute] out OpenTK.Graphics.ES30.ActiveAttribType type, [OutAttribute] StringBuilder name) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Returns information about an active attribute variable for the specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the attribute variable to be queried.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than NULL is passed.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Returns the size of the attribute variable.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Returns the data type of the attribute variable.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// Returns a null terminated string containing the name of the attribute variable.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetActiveAttrib")]
        [CLSCompliant(false)]
        public static void GetActiveAttrib(Int32 program, Int32 index, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] out Int32 size, [OutAttribute] out OpenTK.Graphics.ES30.All type, [OutAttribute] StringBuilder name) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Returns information about an active attribute variable for the specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the attribute variable to be queried.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than NULL is passed.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Returns the size of the attribute variable.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Returns the data type of the attribute variable.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// Returns a null terminated string containing the name of the attribute variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetActiveAttrib")]
        [CLSCompliant(false)]
        public static unsafe void GetActiveAttrib(Int32 program, Int32 index, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] Int32* size, [OutAttribute] OpenTK.Graphics.ES30.ActiveAttribType* type, [OutAttribute] StringBuilder name) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Returns information about an active attribute variable for the specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the attribute variable to be queried.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than NULL is passed.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Returns the size of the attribute variable.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Returns the data type of the attribute variable.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// Returns a null terminated string containing the name of the attribute variable.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetActiveAttrib")]
        [CLSCompliant(false)]
        public static unsafe void GetActiveAttrib(Int32 program, Int32 index, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] Int32* size, [OutAttribute] OpenTK.Graphics.ES30.All* type, [OutAttribute] StringBuilder name) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Returns information about an active attribute variable for the specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the attribute variable to be queried.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than NULL is passed.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Returns the size of the attribute variable.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Returns the data type of the attribute variable.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// Returns a null terminated string containing the name of the attribute variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetActiveAttrib")]
        [CLSCompliant(false)]
        public static void GetActiveAttrib(UInt32 program, UInt32 index, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] out Int32 size, [OutAttribute] out OpenTK.Graphics.ES30.ActiveAttribType type, [OutAttribute] StringBuilder name) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Returns information about an active attribute variable for the specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the attribute variable to be queried.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than NULL is passed.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Returns the size of the attribute variable.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Returns the data type of the attribute variable.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// Returns a null terminated string containing the name of the attribute variable.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetActiveAttrib")]
        [CLSCompliant(false)]
        public static void GetActiveAttrib(UInt32 program, UInt32 index, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] out Int32 size, [OutAttribute] out OpenTK.Graphics.ES30.All type, [OutAttribute] StringBuilder name) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Returns information about an active attribute variable for the specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the attribute variable to be queried.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than NULL is passed.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Returns the size of the attribute variable.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Returns the data type of the attribute variable.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// Returns a null terminated string containing the name of the attribute variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetActiveAttrib")]
        [CLSCompliant(false)]
        public static unsafe void GetActiveAttrib(UInt32 program, UInt32 index, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] Int32* size, [OutAttribute] OpenTK.Graphics.ES30.ActiveAttribType* type, [OutAttribute] StringBuilder name) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Returns information about an active attribute variable for the specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the attribute variable to be queried.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than NULL is passed.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Returns the size of the attribute variable.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Returns the data type of the attribute variable.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// Returns a null terminated string containing the name of the attribute variable.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetActiveAttrib")]
        [CLSCompliant(false)]
        public static unsafe void GetActiveAttrib(UInt32 program, UInt32 index, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] Int32* size, [OutAttribute] OpenTK.Graphics.ES30.All* type, [OutAttribute] StringBuilder name) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Returns information about an active uniform variable for the specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the uniform variable to be queried.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than NULL is passed.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Returns the size of the uniform variable.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Returns the data type of the uniform variable.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// Returns a null terminated string containing the name of the uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetActiveUniform")]
        [CLSCompliant(false)]
        public static void GetActiveUniform(Int32 program, Int32 index, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] out Int32 size, [OutAttribute] out OpenTK.Graphics.ES30.ActiveUniformType type, [OutAttribute] StringBuilder name) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Returns information about an active uniform variable for the specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the uniform variable to be queried.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than NULL is passed.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Returns the size of the uniform variable.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Returns the data type of the uniform variable.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// Returns a null terminated string containing the name of the uniform variable.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetActiveUniform")]
        [CLSCompliant(false)]
        public static void GetActiveUniform(Int32 program, Int32 index, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] out Int32 size, [OutAttribute] out OpenTK.Graphics.ES30.All type, [OutAttribute] StringBuilder name) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Returns information about an active uniform variable for the specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the uniform variable to be queried.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than NULL is passed.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Returns the size of the uniform variable.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Returns the data type of the uniform variable.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// Returns a null terminated string containing the name of the uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetActiveUniform")]
        [CLSCompliant(false)]
        public static unsafe void GetActiveUniform(Int32 program, Int32 index, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] Int32* size, [OutAttribute] OpenTK.Graphics.ES30.ActiveUniformType* type, [OutAttribute] StringBuilder name) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Returns information about an active uniform variable for the specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the uniform variable to be queried.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than NULL is passed.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Returns the size of the uniform variable.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Returns the data type of the uniform variable.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// Returns a null terminated string containing the name of the uniform variable.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetActiveUniform")]
        [CLSCompliant(false)]
        public static unsafe void GetActiveUniform(Int32 program, Int32 index, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] Int32* size, [OutAttribute] OpenTK.Graphics.ES30.All* type, [OutAttribute] StringBuilder name) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Returns information about an active uniform variable for the specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the uniform variable to be queried.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than NULL is passed.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Returns the size of the uniform variable.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Returns the data type of the uniform variable.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// Returns a null terminated string containing the name of the uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetActiveUniform")]
        [CLSCompliant(false)]
        public static void GetActiveUniform(UInt32 program, UInt32 index, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] out Int32 size, [OutAttribute] out OpenTK.Graphics.ES30.ActiveUniformType type, [OutAttribute] StringBuilder name) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Returns information about an active uniform variable for the specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the uniform variable to be queried.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than NULL is passed.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Returns the size of the uniform variable.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Returns the data type of the uniform variable.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// Returns a null terminated string containing the name of the uniform variable.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetActiveUniform")]
        [CLSCompliant(false)]
        public static void GetActiveUniform(UInt32 program, UInt32 index, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] out Int32 size, [OutAttribute] out OpenTK.Graphics.ES30.All type, [OutAttribute] StringBuilder name) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Returns information about an active uniform variable for the specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the uniform variable to be queried.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than NULL is passed.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Returns the size of the uniform variable.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Returns the data type of the uniform variable.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// Returns a null terminated string containing the name of the uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetActiveUniform")]
        [CLSCompliant(false)]
        public static unsafe void GetActiveUniform(UInt32 program, UInt32 index, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] Int32* size, [OutAttribute] OpenTK.Graphics.ES30.ActiveUniformType* type, [OutAttribute] StringBuilder name) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Returns information about an active uniform variable for the specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the uniform variable to be queried.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than NULL is passed.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Returns the size of the uniform variable.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Returns the data type of the uniform variable.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// Returns a null terminated string containing the name of the uniform variable.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetActiveUniform")]
        [CLSCompliant(false)]
        public static unsafe void GetActiveUniform(UInt32 program, UInt32 index, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] Int32* size, [OutAttribute] OpenTK.Graphics.ES30.All* type, [OutAttribute] StringBuilder name) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Query information about an active uniform block
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the name of a program containing the uniform block.
        /// </para>
        /// </param>
        /// <param name="uniformBlockIndex">
        /// <para>
        /// Specifies the index of the uniform block within program.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the name of the parameter to query.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Specifies the address of a variable to receive the result of the query.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetActiveUniformBlockiv")]
        [CLSCompliant(false)]
        public static void GetActiveUniformBlock(Int32 program, Int32 uniformBlockIndex, OpenTK.Graphics.ES30.ActiveUniformBlockParameter pname, [OutAttribute] Int32[] @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Query information about an active uniform block
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the name of a program containing the uniform block.
        /// </para>
        /// </param>
        /// <param name="uniformBlockIndex">
        /// <para>
        /// Specifies the index of the uniform block within program.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the name of the parameter to query.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Specifies the address of a variable to receive the result of the query.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetActiveUniformBlockiv")]
        [CLSCompliant(false)]
        public static void GetActiveUniformBlock(Int32 program, Int32 uniformBlockIndex, OpenTK.Graphics.ES30.ActiveUniformBlockParameter pname, [OutAttribute] out Int32 @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Query information about an active uniform block
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the name of a program containing the uniform block.
        /// </para>
        /// </param>
        /// <param name="uniformBlockIndex">
        /// <para>
        /// Specifies the index of the uniform block within program.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the name of the parameter to query.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Specifies the address of a variable to receive the result of the query.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetActiveUniformBlockiv")]
        [CLSCompliant(false)]
        public static unsafe void GetActiveUniformBlock(Int32 program, Int32 uniformBlockIndex, OpenTK.Graphics.ES30.ActiveUniformBlockParameter pname, [OutAttribute] Int32* @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Query information about an active uniform block
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the name of a program containing the uniform block.
        /// </para>
        /// </param>
        /// <param name="uniformBlockIndex">
        /// <para>
        /// Specifies the index of the uniform block within program.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the name of the parameter to query.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Specifies the address of a variable to receive the result of the query.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetActiveUniformBlockiv")]
        [CLSCompliant(false)]
        public static void GetActiveUniformBlock(Int32 program, Int32 uniformBlockIndex, OpenTK.Graphics.ES30.All pname, [OutAttribute] Int32[] @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Query information about an active uniform block
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the name of a program containing the uniform block.
        /// </para>
        /// </param>
        /// <param name="uniformBlockIndex">
        /// <para>
        /// Specifies the index of the uniform block within program.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the name of the parameter to query.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Specifies the address of a variable to receive the result of the query.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetActiveUniformBlockiv")]
        [CLSCompliant(false)]
        public static void GetActiveUniformBlock(Int32 program, Int32 uniformBlockIndex, OpenTK.Graphics.ES30.All pname, [OutAttribute] out Int32 @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Query information about an active uniform block
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the name of a program containing the uniform block.
        /// </para>
        /// </param>
        /// <param name="uniformBlockIndex">
        /// <para>
        /// Specifies the index of the uniform block within program.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the name of the parameter to query.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Specifies the address of a variable to receive the result of the query.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetActiveUniformBlockiv")]
        [CLSCompliant(false)]
        public static unsafe void GetActiveUniformBlock(Int32 program, Int32 uniformBlockIndex, OpenTK.Graphics.ES30.All pname, [OutAttribute] Int32* @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Query information about an active uniform block
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the name of a program containing the uniform block.
        /// </para>
        /// </param>
        /// <param name="uniformBlockIndex">
        /// <para>
        /// Specifies the index of the uniform block within program.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the name of the parameter to query.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Specifies the address of a variable to receive the result of the query.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetActiveUniformBlockiv")]
        [CLSCompliant(false)]
        public static void GetActiveUniformBlock(UInt32 program, UInt32 uniformBlockIndex, OpenTK.Graphics.ES30.ActiveUniformBlockParameter pname, [OutAttribute] Int32[] @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Query information about an active uniform block
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the name of a program containing the uniform block.
        /// </para>
        /// </param>
        /// <param name="uniformBlockIndex">
        /// <para>
        /// Specifies the index of the uniform block within program.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the name of the parameter to query.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Specifies the address of a variable to receive the result of the query.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetActiveUniformBlockiv")]
        [CLSCompliant(false)]
        public static void GetActiveUniformBlock(UInt32 program, UInt32 uniformBlockIndex, OpenTK.Graphics.ES30.ActiveUniformBlockParameter pname, [OutAttribute] out Int32 @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Query information about an active uniform block
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the name of a program containing the uniform block.
        /// </para>
        /// </param>
        /// <param name="uniformBlockIndex">
        /// <para>
        /// Specifies the index of the uniform block within program.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the name of the parameter to query.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Specifies the address of a variable to receive the result of the query.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetActiveUniformBlockiv")]
        [CLSCompliant(false)]
        public static unsafe void GetActiveUniformBlock(UInt32 program, UInt32 uniformBlockIndex, OpenTK.Graphics.ES30.ActiveUniformBlockParameter pname, [OutAttribute] Int32* @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Query information about an active uniform block
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the name of a program containing the uniform block.
        /// </para>
        /// </param>
        /// <param name="uniformBlockIndex">
        /// <para>
        /// Specifies the index of the uniform block within program.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the name of the parameter to query.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Specifies the address of a variable to receive the result of the query.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetActiveUniformBlockiv")]
        [CLSCompliant(false)]
        public static void GetActiveUniformBlock(UInt32 program, UInt32 uniformBlockIndex, OpenTK.Graphics.ES30.All pname, [OutAttribute] Int32[] @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Query information about an active uniform block
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the name of a program containing the uniform block.
        /// </para>
        /// </param>
        /// <param name="uniformBlockIndex">
        /// <para>
        /// Specifies the index of the uniform block within program.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the name of the parameter to query.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Specifies the address of a variable to receive the result of the query.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetActiveUniformBlockiv")]
        [CLSCompliant(false)]
        public static void GetActiveUniformBlock(UInt32 program, UInt32 uniformBlockIndex, OpenTK.Graphics.ES30.All pname, [OutAttribute] out Int32 @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Query information about an active uniform block
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the name of a program containing the uniform block.
        /// </para>
        /// </param>
        /// <param name="uniformBlockIndex">
        /// <para>
        /// Specifies the index of the uniform block within program.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the name of the parameter to query.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Specifies the address of a variable to receive the result of the query.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetActiveUniformBlockiv")]
        [CLSCompliant(false)]
        public static unsafe void GetActiveUniformBlock(UInt32 program, UInt32 uniformBlockIndex, OpenTK.Graphics.ES30.All pname, [OutAttribute] Int32* @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Retrieve the name of an active uniform block
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the name of a program containing the uniform block.
        /// </para>
        /// </param>
        /// <param name="uniformBlockIndex">
        /// <para>
        /// Specifies the index of the uniform block within program.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the size of the buffer addressed by uniformBlockName.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the address of a variable to receive the number of characters that were written to uniformBlockName.
        /// </para>
        /// </param>
        /// <param name="uniformBlockName">
        /// <para>
        /// Specifies the address an array of characters to receive the name of the uniform block at uniformBlockIndex.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetActiveUniformBlockName")]
        [CLSCompliant(false)]
        public static void GetActiveUniformBlockName(Int32 program, Int32 uniformBlockIndex, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder uniformBlockName) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Retrieve the name of an active uniform block
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the name of a program containing the uniform block.
        /// </para>
        /// </param>
        /// <param name="uniformBlockIndex">
        /// <para>
        /// Specifies the index of the uniform block within program.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the size of the buffer addressed by uniformBlockName.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the address of a variable to receive the number of characters that were written to uniformBlockName.
        /// </para>
        /// </param>
        /// <param name="uniformBlockName">
        /// <para>
        /// Specifies the address an array of characters to receive the name of the uniform block at uniformBlockIndex.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetActiveUniformBlockName")]
        [CLSCompliant(false)]
        public static unsafe void GetActiveUniformBlockName(Int32 program, Int32 uniformBlockIndex, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder uniformBlockName) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Retrieve the name of an active uniform block
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the name of a program containing the uniform block.
        /// </para>
        /// </param>
        /// <param name="uniformBlockIndex">
        /// <para>
        /// Specifies the index of the uniform block within program.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the size of the buffer addressed by uniformBlockName.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the address of a variable to receive the number of characters that were written to uniformBlockName.
        /// </para>
        /// </param>
        /// <param name="uniformBlockName">
        /// <para>
        /// Specifies the address an array of characters to receive the name of the uniform block at uniformBlockIndex.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetActiveUniformBlockName")]
        [CLSCompliant(false)]
        public static void GetActiveUniformBlockName(UInt32 program, UInt32 uniformBlockIndex, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder uniformBlockName) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Retrieve the name of an active uniform block
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the name of a program containing the uniform block.
        /// </para>
        /// </param>
        /// <param name="uniformBlockIndex">
        /// <para>
        /// Specifies the index of the uniform block within program.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the size of the buffer addressed by uniformBlockName.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the address of a variable to receive the number of characters that were written to uniformBlockName.
        /// </para>
        /// </param>
        /// <param name="uniformBlockName">
        /// <para>
        /// Specifies the address an array of characters to receive the name of the uniform block at uniformBlockIndex.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetActiveUniformBlockName")]
        [CLSCompliant(false)]
        public static unsafe void GetActiveUniformBlockName(UInt32 program, UInt32 uniformBlockIndex, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder uniformBlockName) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Returns information about several active uniform variables for the specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="uniformCount">
        /// <para>
        /// Specifies both the number of elements in the array of indices uniformIndices and the number of parameters written to params upon successful return.
        /// </para>
        /// </param>
        /// <param name="uniformIndices">
        /// <para>
        /// Specifies the address of an array of uniformCount integers containing the indices of uniforms within program whose parameter pname should be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the property of each uniform in uniformIndices that should be written into the corresponding element of params.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Specifies the address of an array of uniformCount integers which are to receive the value of pname for each uniform in uniformIndices.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetActiveUniformsiv")]
        [CLSCompliant(false)]
        public static void GetActiveUniforms(Int32 program, Int32 uniformCount, Int32[] uniformIndices, OpenTK.Graphics.ES30.ActiveUniformParameter pname, [OutAttribute] Int32[] @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Returns information about several active uniform variables for the specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="uniformCount">
        /// <para>
        /// Specifies both the number of elements in the array of indices uniformIndices and the number of parameters written to params upon successful return.
        /// </para>
        /// </param>
        /// <param name="uniformIndices">
        /// <para>
        /// Specifies the address of an array of uniformCount integers containing the indices of uniforms within program whose parameter pname should be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the property of each uniform in uniformIndices that should be written into the corresponding element of params.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Specifies the address of an array of uniformCount integers which are to receive the value of pname for each uniform in uniformIndices.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetActiveUniformsiv")]
        [CLSCompliant(false)]
        public static void GetActiveUniforms(Int32 program, Int32 uniformCount, Int32[] uniformIndices, OpenTK.Graphics.ES30.All pname, [OutAttribute] Int32[] @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Returns information about several active uniform variables for the specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="uniformCount">
        /// <para>
        /// Specifies both the number of elements in the array of indices uniformIndices and the number of parameters written to params upon successful return.
        /// </para>
        /// </param>
        /// <param name="uniformIndices">
        /// <para>
        /// Specifies the address of an array of uniformCount integers containing the indices of uniforms within program whose parameter pname should be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the property of each uniform in uniformIndices that should be written into the corresponding element of params.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Specifies the address of an array of uniformCount integers which are to receive the value of pname for each uniform in uniformIndices.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetActiveUniformsiv")]
        [CLSCompliant(false)]
        public static void GetActiveUniforms(Int32 program, Int32 uniformCount, ref Int32 uniformIndices, OpenTK.Graphics.ES30.ActiveUniformParameter pname, [OutAttribute] out Int32 @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Returns information about several active uniform variables for the specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="uniformCount">
        /// <para>
        /// Specifies both the number of elements in the array of indices uniformIndices and the number of parameters written to params upon successful return.
        /// </para>
        /// </param>
        /// <param name="uniformIndices">
        /// <para>
        /// Specifies the address of an array of uniformCount integers containing the indices of uniforms within program whose parameter pname should be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the property of each uniform in uniformIndices that should be written into the corresponding element of params.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Specifies the address of an array of uniformCount integers which are to receive the value of pname for each uniform in uniformIndices.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetActiveUniformsiv")]
        [CLSCompliant(false)]
        public static void GetActiveUniforms(Int32 program, Int32 uniformCount, ref Int32 uniformIndices, OpenTK.Graphics.ES30.All pname, [OutAttribute] out Int32 @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Returns information about several active uniform variables for the specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="uniformCount">
        /// <para>
        /// Specifies both the number of elements in the array of indices uniformIndices and the number of parameters written to params upon successful return.
        /// </para>
        /// </param>
        /// <param name="uniformIndices">
        /// <para>
        /// Specifies the address of an array of uniformCount integers containing the indices of uniforms within program whose parameter pname should be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the property of each uniform in uniformIndices that should be written into the corresponding element of params.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Specifies the address of an array of uniformCount integers which are to receive the value of pname for each uniform in uniformIndices.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetActiveUniformsiv")]
        [CLSCompliant(false)]
        public static unsafe void GetActiveUniforms(Int32 program, Int32 uniformCount, Int32* uniformIndices, OpenTK.Graphics.ES30.ActiveUniformParameter pname, [OutAttribute] Int32* @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Returns information about several active uniform variables for the specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="uniformCount">
        /// <para>
        /// Specifies both the number of elements in the array of indices uniformIndices and the number of parameters written to params upon successful return.
        /// </para>
        /// </param>
        /// <param name="uniformIndices">
        /// <para>
        /// Specifies the address of an array of uniformCount integers containing the indices of uniforms within program whose parameter pname should be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the property of each uniform in uniformIndices that should be written into the corresponding element of params.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Specifies the address of an array of uniformCount integers which are to receive the value of pname for each uniform in uniformIndices.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetActiveUniformsiv")]
        [CLSCompliant(false)]
        public static unsafe void GetActiveUniforms(Int32 program, Int32 uniformCount, Int32* uniformIndices, OpenTK.Graphics.ES30.All pname, [OutAttribute] Int32* @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Returns information about several active uniform variables for the specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="uniformCount">
        /// <para>
        /// Specifies both the number of elements in the array of indices uniformIndices and the number of parameters written to params upon successful return.
        /// </para>
        /// </param>
        /// <param name="uniformIndices">
        /// <para>
        /// Specifies the address of an array of uniformCount integers containing the indices of uniforms within program whose parameter pname should be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the property of each uniform in uniformIndices that should be written into the corresponding element of params.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Specifies the address of an array of uniformCount integers which are to receive the value of pname for each uniform in uniformIndices.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetActiveUniformsiv")]
        [CLSCompliant(false)]
        public static void GetActiveUniforms(UInt32 program, Int32 uniformCount, UInt32[] uniformIndices, OpenTK.Graphics.ES30.ActiveUniformParameter pname, [OutAttribute] Int32[] @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Returns information about several active uniform variables for the specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="uniformCount">
        /// <para>
        /// Specifies both the number of elements in the array of indices uniformIndices and the number of parameters written to params upon successful return.
        /// </para>
        /// </param>
        /// <param name="uniformIndices">
        /// <para>
        /// Specifies the address of an array of uniformCount integers containing the indices of uniforms within program whose parameter pname should be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the property of each uniform in uniformIndices that should be written into the corresponding element of params.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Specifies the address of an array of uniformCount integers which are to receive the value of pname for each uniform in uniformIndices.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetActiveUniformsiv")]
        [CLSCompliant(false)]
        public static void GetActiveUniforms(UInt32 program, Int32 uniformCount, UInt32[] uniformIndices, OpenTK.Graphics.ES30.All pname, [OutAttribute] Int32[] @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Returns information about several active uniform variables for the specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="uniformCount">
        /// <para>
        /// Specifies both the number of elements in the array of indices uniformIndices and the number of parameters written to params upon successful return.
        /// </para>
        /// </param>
        /// <param name="uniformIndices">
        /// <para>
        /// Specifies the address of an array of uniformCount integers containing the indices of uniforms within program whose parameter pname should be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the property of each uniform in uniformIndices that should be written into the corresponding element of params.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Specifies the address of an array of uniformCount integers which are to receive the value of pname for each uniform in uniformIndices.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetActiveUniformsiv")]
        [CLSCompliant(false)]
        public static void GetActiveUniforms(UInt32 program, Int32 uniformCount, ref UInt32 uniformIndices, OpenTK.Graphics.ES30.ActiveUniformParameter pname, [OutAttribute] out Int32 @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Returns information about several active uniform variables for the specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="uniformCount">
        /// <para>
        /// Specifies both the number of elements in the array of indices uniformIndices and the number of parameters written to params upon successful return.
        /// </para>
        /// </param>
        /// <param name="uniformIndices">
        /// <para>
        /// Specifies the address of an array of uniformCount integers containing the indices of uniforms within program whose parameter pname should be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the property of each uniform in uniformIndices that should be written into the corresponding element of params.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Specifies the address of an array of uniformCount integers which are to receive the value of pname for each uniform in uniformIndices.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetActiveUniformsiv")]
        [CLSCompliant(false)]
        public static void GetActiveUniforms(UInt32 program, Int32 uniformCount, ref UInt32 uniformIndices, OpenTK.Graphics.ES30.All pname, [OutAttribute] out Int32 @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Returns information about several active uniform variables for the specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="uniformCount">
        /// <para>
        /// Specifies both the number of elements in the array of indices uniformIndices and the number of parameters written to params upon successful return.
        /// </para>
        /// </param>
        /// <param name="uniformIndices">
        /// <para>
        /// Specifies the address of an array of uniformCount integers containing the indices of uniforms within program whose parameter pname should be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the property of each uniform in uniformIndices that should be written into the corresponding element of params.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Specifies the address of an array of uniformCount integers which are to receive the value of pname for each uniform in uniformIndices.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetActiveUniformsiv")]
        [CLSCompliant(false)]
        public static unsafe void GetActiveUniforms(UInt32 program, Int32 uniformCount, UInt32* uniformIndices, OpenTK.Graphics.ES30.ActiveUniformParameter pname, [OutAttribute] Int32* @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Returns information about several active uniform variables for the specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="uniformCount">
        /// <para>
        /// Specifies both the number of elements in the array of indices uniformIndices and the number of parameters written to params upon successful return.
        /// </para>
        /// </param>
        /// <param name="uniformIndices">
        /// <para>
        /// Specifies the address of an array of uniformCount integers containing the indices of uniforms within program whose parameter pname should be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the property of each uniform in uniformIndices that should be written into the corresponding element of params.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Specifies the address of an array of uniformCount integers which are to receive the value of pname for each uniform in uniformIndices.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetActiveUniformsiv")]
        [CLSCompliant(false)]
        public static unsafe void GetActiveUniforms(UInt32 program, Int32 uniformCount, UInt32* uniformIndices, OpenTK.Graphics.ES30.All pname, [OutAttribute] Int32* @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Returns the handles of the shader objects attached to a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="maxCount">
        /// <para>
        /// Specifies the size of the array for storing the returned object names.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Returns the number of names actually returned in shaders.
        /// </para>
        /// </param>
        /// <param name="shaders">
        /// <para>
        /// Specifies an array that is used to return the names of attached shader objects.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetAttachedShaders")]
        [CLSCompliant(false)]
        public static void GetAttachedShaders(Int32 program, Int32 maxCount, [OutAttribute] out Int32 count, [OutAttribute] Int32[] shaders) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Returns the handles of the shader objects attached to a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="maxCount">
        /// <para>
        /// Specifies the size of the array for storing the returned object names.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Returns the number of names actually returned in shaders.
        /// </para>
        /// </param>
        /// <param name="shaders">
        /// <para>
        /// Specifies an array that is used to return the names of attached shader objects.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetAttachedShaders")]
        [CLSCompliant(false)]
        public static void GetAttachedShaders(Int32 program, Int32 maxCount, [OutAttribute] out Int32 count, [OutAttribute] out Int32 shaders) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Returns the handles of the shader objects attached to a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="maxCount">
        /// <para>
        /// Specifies the size of the array for storing the returned object names.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Returns the number of names actually returned in shaders.
        /// </para>
        /// </param>
        /// <param name="shaders">
        /// <para>
        /// Specifies an array that is used to return the names of attached shader objects.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetAttachedShaders")]
        [CLSCompliant(false)]
        public static unsafe void GetAttachedShaders(Int32 program, Int32 maxCount, [OutAttribute] Int32* count, [OutAttribute] Int32* shaders) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Returns the handles of the shader objects attached to a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="maxCount">
        /// <para>
        /// Specifies the size of the array for storing the returned object names.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Returns the number of names actually returned in shaders.
        /// </para>
        /// </param>
        /// <param name="shaders">
        /// <para>
        /// Specifies an array that is used to return the names of attached shader objects.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetAttachedShaders")]
        [CLSCompliant(false)]
        public static void GetAttachedShaders(UInt32 program, Int32 maxCount, [OutAttribute] out Int32 count, [OutAttribute] UInt32[] shaders) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Returns the handles of the shader objects attached to a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="maxCount">
        /// <para>
        /// Specifies the size of the array for storing the returned object names.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Returns the number of names actually returned in shaders.
        /// </para>
        /// </param>
        /// <param name="shaders">
        /// <para>
        /// Specifies an array that is used to return the names of attached shader objects.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetAttachedShaders")]
        [CLSCompliant(false)]
        public static void GetAttachedShaders(UInt32 program, Int32 maxCount, [OutAttribute] out Int32 count, [OutAttribute] out UInt32 shaders) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Returns the handles of the shader objects attached to a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="maxCount">
        /// <para>
        /// Specifies the size of the array for storing the returned object names.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Returns the number of names actually returned in shaders.
        /// </para>
        /// </param>
        /// <param name="shaders">
        /// <para>
        /// Specifies an array that is used to return the names of attached shader objects.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetAttachedShaders")]
        [CLSCompliant(false)]
        public static unsafe void GetAttachedShaders(UInt32 program, Int32 maxCount, [OutAttribute] Int32* count, [OutAttribute] UInt32* shaders) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Returns the location of an attribute variable
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// Points to a null terminated string containing the name of the attribute variable whose location is to be queried.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetAttribLocation")]
        [CLSCompliant(false)]
        public static Int32 GetAttribLocation(Int32 program, String name) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Returns the location of an attribute variable
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// Points to a null terminated string containing the name of the attribute variable whose location is to be queried.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetAttribLocation")]
        [CLSCompliant(false)]
        public static Int32 GetAttribLocation(UInt32 program, String name) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]</summary>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetBooleanv")]
        [CLSCompliant(false)]
        public static bool GetBoolean(OpenTK.Graphics.ES30.All pname) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]</summary>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetBooleanv")]
        [CLSCompliant(false)]
        public static bool GetBoolean(OpenTK.Graphics.ES30.GetPName pname) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]</summary>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetBooleanv")]
        [CLSCompliant(false)]
        public static void GetBoolean(OpenTK.Graphics.ES30.All pname, [OutAttribute] bool[] data) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]</summary>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetBooleanv")]
        [CLSCompliant(false)]
        public static void GetBoolean(OpenTK.Graphics.ES30.All pname, [OutAttribute] out bool data) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]</summary>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetBooleanv")]
        [CLSCompliant(false)]
        public static unsafe void GetBoolean(OpenTK.Graphics.ES30.All pname, [OutAttribute] bool* data) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]</summary>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetBooleanv")]
        [CLSCompliant(false)]
        public static void GetBoolean(OpenTK.Graphics.ES30.GetPName pname, [OutAttribute] bool[] data) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]</summary>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetBooleanv")]
        [CLSCompliant(false)]
        public static void GetBoolean(OpenTK.Graphics.ES30.GetPName pname, [OutAttribute] out bool data) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]</summary>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetBooleanv")]
        [CLSCompliant(false)]
        public static unsafe void GetBoolean(OpenTK.Graphics.ES30.GetPName pname, [OutAttribute] bool* data) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Return parameters of a buffer object
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ATOMIC_COUNTER_BUFFER, GL_COPY_READ_BUFFER, GL_COPY_WRITE_BUFFER, GL_DRAW_INDIRECT_BUFFER, GL_DISPATCH_INDIRECT_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, GL_PIXEL_UNPACK_BUFFER, GL_QUERY_BUFFER, GL_SHADER_STORAGE_BUFFER, GL_TEXTURE_BUFFER, GL_TRANSFORM_FEEDBACK_BUFFER, or GL_UNIFORM_BUFFER.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// Specifies the symbolic name of a buffer object parameter. Accepted values are GL_BUFFER_ACCESS, GL_BUFFER_MAPPED, GL_BUFFER_SIZE, or GL_BUFFER_USAGE.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Returns the requested parameter.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetBufferParameteri64v")]
        [CLSCompliant(false)]
        public static void GetBufferParameter(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All pname, [OutAttribute] Int64[] @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Return parameters of a buffer object
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ATOMIC_COUNTER_BUFFER, GL_COPY_READ_BUFFER, GL_COPY_WRITE_BUFFER, GL_DRAW_INDIRECT_BUFFER, GL_DISPATCH_INDIRECT_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, GL_PIXEL_UNPACK_BUFFER, GL_QUERY_BUFFER, GL_SHADER_STORAGE_BUFFER, GL_TEXTURE_BUFFER, GL_TRANSFORM_FEEDBACK_BUFFER, or GL_UNIFORM_BUFFER.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// Specifies the symbolic name of a buffer object parameter. Accepted values are GL_BUFFER_ACCESS, GL_BUFFER_MAPPED, GL_BUFFER_SIZE, or GL_BUFFER_USAGE.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Returns the requested parameter.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetBufferParameteri64v")]
        [CLSCompliant(false)]
        public static void GetBufferParameter(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All pname, [OutAttribute] out Int64 @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Return parameters of a buffer object
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ATOMIC_COUNTER_BUFFER, GL_COPY_READ_BUFFER, GL_COPY_WRITE_BUFFER, GL_DRAW_INDIRECT_BUFFER, GL_DISPATCH_INDIRECT_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, GL_PIXEL_UNPACK_BUFFER, GL_QUERY_BUFFER, GL_SHADER_STORAGE_BUFFER, GL_TEXTURE_BUFFER, GL_TRANSFORM_FEEDBACK_BUFFER, or GL_UNIFORM_BUFFER.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// Specifies the symbolic name of a buffer object parameter. Accepted values are GL_BUFFER_ACCESS, GL_BUFFER_MAPPED, GL_BUFFER_SIZE, or GL_BUFFER_USAGE.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Returns the requested parameter.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetBufferParameteri64v")]
        [CLSCompliant(false)]
        public static unsafe void GetBufferParameter(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All pname, [OutAttribute] Int64* @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Return parameters of a buffer object
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ATOMIC_COUNTER_BUFFER, GL_COPY_READ_BUFFER, GL_COPY_WRITE_BUFFER, GL_DRAW_INDIRECT_BUFFER, GL_DISPATCH_INDIRECT_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, GL_PIXEL_UNPACK_BUFFER, GL_QUERY_BUFFER, GL_SHADER_STORAGE_BUFFER, GL_TEXTURE_BUFFER, GL_TRANSFORM_FEEDBACK_BUFFER, or GL_UNIFORM_BUFFER.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// Specifies the symbolic name of a buffer object parameter. Accepted values are GL_BUFFER_ACCESS, GL_BUFFER_MAPPED, GL_BUFFER_SIZE, or GL_BUFFER_USAGE.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Returns the requested parameter.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetBufferParameteri64v")]
        [CLSCompliant(false)]
        public static void GetBufferParameter(OpenTK.Graphics.ES30.BufferTarget target, OpenTK.Graphics.ES30.BufferParameterName pname, [OutAttribute] Int64[] @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Return parameters of a buffer object
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ATOMIC_COUNTER_BUFFER, GL_COPY_READ_BUFFER, GL_COPY_WRITE_BUFFER, GL_DRAW_INDIRECT_BUFFER, GL_DISPATCH_INDIRECT_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, GL_PIXEL_UNPACK_BUFFER, GL_QUERY_BUFFER, GL_SHADER_STORAGE_BUFFER, GL_TEXTURE_BUFFER, GL_TRANSFORM_FEEDBACK_BUFFER, or GL_UNIFORM_BUFFER.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// Specifies the symbolic name of a buffer object parameter. Accepted values are GL_BUFFER_ACCESS, GL_BUFFER_MAPPED, GL_BUFFER_SIZE, or GL_BUFFER_USAGE.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Returns the requested parameter.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetBufferParameteri64v")]
        [CLSCompliant(false)]
        public static void GetBufferParameter(OpenTK.Graphics.ES30.BufferTarget target, OpenTK.Graphics.ES30.BufferParameterName pname, [OutAttribute] out Int64 @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Return parameters of a buffer object
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ATOMIC_COUNTER_BUFFER, GL_COPY_READ_BUFFER, GL_COPY_WRITE_BUFFER, GL_DRAW_INDIRECT_BUFFER, GL_DISPATCH_INDIRECT_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, GL_PIXEL_UNPACK_BUFFER, GL_QUERY_BUFFER, GL_SHADER_STORAGE_BUFFER, GL_TEXTURE_BUFFER, GL_TRANSFORM_FEEDBACK_BUFFER, or GL_UNIFORM_BUFFER.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// Specifies the symbolic name of a buffer object parameter. Accepted values are GL_BUFFER_ACCESS, GL_BUFFER_MAPPED, GL_BUFFER_SIZE, or GL_BUFFER_USAGE.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Returns the requested parameter.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetBufferParameteri64v")]
        [CLSCompliant(false)]
        public static unsafe void GetBufferParameter(OpenTK.Graphics.ES30.BufferTarget target, OpenTK.Graphics.ES30.BufferParameterName pname, [OutAttribute] Int64* @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Return parameters of a buffer object
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, or GL_PIXEL_UNPACK_BUFFER.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// Specifies the symbolic name of a buffer object parameter. Accepted values are GL_BUFFER_ACCESS, GL_BUFFER_MAPPED, GL_BUFFER_SIZE, or GL_BUFFER_USAGE.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Returns the requested parameter.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetBufferParameteriv")]
        [CLSCompliant(false)]
        public static void GetBufferParameter(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All pname, [OutAttribute] Int32[] @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Return parameters of a buffer object
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, or GL_PIXEL_UNPACK_BUFFER.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// Specifies the symbolic name of a buffer object parameter. Accepted values are GL_BUFFER_ACCESS, GL_BUFFER_MAPPED, GL_BUFFER_SIZE, or GL_BUFFER_USAGE.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Returns the requested parameter.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetBufferParameteriv")]
        [CLSCompliant(false)]
        public static void GetBufferParameter(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All pname, [OutAttribute] out Int32 @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Return parameters of a buffer object
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, or GL_PIXEL_UNPACK_BUFFER.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// Specifies the symbolic name of a buffer object parameter. Accepted values are GL_BUFFER_ACCESS, GL_BUFFER_MAPPED, GL_BUFFER_SIZE, or GL_BUFFER_USAGE.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Returns the requested parameter.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetBufferParameteriv")]
        [CLSCompliant(false)]
        public static unsafe void GetBufferParameter(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All pname, [OutAttribute] Int32* @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Return parameters of a buffer object
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, or GL_PIXEL_UNPACK_BUFFER.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// Specifies the symbolic name of a buffer object parameter. Accepted values are GL_BUFFER_ACCESS, GL_BUFFER_MAPPED, GL_BUFFER_SIZE, or GL_BUFFER_USAGE.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Returns the requested parameter.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetBufferParameteriv")]
        [CLSCompliant(false)]
        public static void GetBufferParameter(OpenTK.Graphics.ES30.BufferTarget target, OpenTK.Graphics.ES30.BufferParameterName pname, [OutAttribute] Int32[] @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Return parameters of a buffer object
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, or GL_PIXEL_UNPACK_BUFFER.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// Specifies the symbolic name of a buffer object parameter. Accepted values are GL_BUFFER_ACCESS, GL_BUFFER_MAPPED, GL_BUFFER_SIZE, or GL_BUFFER_USAGE.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Returns the requested parameter.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetBufferParameteriv")]
        [CLSCompliant(false)]
        public static void GetBufferParameter(OpenTK.Graphics.ES30.BufferTarget target, OpenTK.Graphics.ES30.BufferParameterName pname, [OutAttribute] out Int32 @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Return parameters of a buffer object
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, or GL_PIXEL_UNPACK_BUFFER.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// Specifies the symbolic name of a buffer object parameter. Accepted values are GL_BUFFER_ACCESS, GL_BUFFER_MAPPED, GL_BUFFER_SIZE, or GL_BUFFER_USAGE.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Returns the requested parameter.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetBufferParameteriv")]
        [CLSCompliant(false)]
        public static unsafe void GetBufferParameter(OpenTK.Graphics.ES30.BufferTarget target, OpenTK.Graphics.ES30.BufferParameterName pname, [OutAttribute] Int32* @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Return the pointer to a mapped buffer object's data store
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ATOMIC_COUNTER_BUFFER, GL_COPY_READ_BUFFER, GL_COPY_WRITE_BUFFER, GL_DRAW_INDIRECT_BUFFER, GL_DISPATCH_INDIRECT_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, GL_PIXEL_UNPACK_BUFFER, GL_QUERY_BUFFER, GL_SHADER_STORAGE_BUFFER, GL_TEXTURE_BUFFER, GL_TRANSFORM_FEEDBACK_BUFFER, or GL_UNIFORM_BUFFER.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the pointer to be returned. The symbolic constant must be GL_BUFFER_MAP_POINTER.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the pointer value specified by pname.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetBufferPointerv")]
        public static void GetBufferPointer(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All pname, [OutAttribute] IntPtr @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Return the pointer to a mapped buffer object's data store
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ATOMIC_COUNTER_BUFFER, GL_COPY_READ_BUFFER, GL_COPY_WRITE_BUFFER, GL_DRAW_INDIRECT_BUFFER, GL_DISPATCH_INDIRECT_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, GL_PIXEL_UNPACK_BUFFER, GL_QUERY_BUFFER, GL_SHADER_STORAGE_BUFFER, GL_TEXTURE_BUFFER, GL_TRANSFORM_FEEDBACK_BUFFER, or GL_UNIFORM_BUFFER.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the pointer to be returned. The symbolic constant must be GL_BUFFER_MAP_POINTER.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the pointer value specified by pname.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetBufferPointerv")]
        [CLSCompliant(false)]
        public static void GetBufferPointer<T2>(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All pname, [InAttribute, OutAttribute] T2[] @params)
            where T2 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Return the pointer to a mapped buffer object's data store
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ATOMIC_COUNTER_BUFFER, GL_COPY_READ_BUFFER, GL_COPY_WRITE_BUFFER, GL_DRAW_INDIRECT_BUFFER, GL_DISPATCH_INDIRECT_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, GL_PIXEL_UNPACK_BUFFER, GL_QUERY_BUFFER, GL_SHADER_STORAGE_BUFFER, GL_TEXTURE_BUFFER, GL_TRANSFORM_FEEDBACK_BUFFER, or GL_UNIFORM_BUFFER.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the pointer to be returned. The symbolic constant must be GL_BUFFER_MAP_POINTER.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the pointer value specified by pname.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetBufferPointerv")]
        [CLSCompliant(false)]
        public static void GetBufferPointer<T2>(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All pname, [InAttribute, OutAttribute] T2[,] @params)
            where T2 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Return the pointer to a mapped buffer object's data store
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ATOMIC_COUNTER_BUFFER, GL_COPY_READ_BUFFER, GL_COPY_WRITE_BUFFER, GL_DRAW_INDIRECT_BUFFER, GL_DISPATCH_INDIRECT_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, GL_PIXEL_UNPACK_BUFFER, GL_QUERY_BUFFER, GL_SHADER_STORAGE_BUFFER, GL_TEXTURE_BUFFER, GL_TRANSFORM_FEEDBACK_BUFFER, or GL_UNIFORM_BUFFER.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the pointer to be returned. The symbolic constant must be GL_BUFFER_MAP_POINTER.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the pointer value specified by pname.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetBufferPointerv")]
        [CLSCompliant(false)]
        public static void GetBufferPointer<T2>(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All pname, [InAttribute, OutAttribute] T2[,,] @params)
            where T2 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Return the pointer to a mapped buffer object's data store
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ATOMIC_COUNTER_BUFFER, GL_COPY_READ_BUFFER, GL_COPY_WRITE_BUFFER, GL_DRAW_INDIRECT_BUFFER, GL_DISPATCH_INDIRECT_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, GL_PIXEL_UNPACK_BUFFER, GL_QUERY_BUFFER, GL_SHADER_STORAGE_BUFFER, GL_TEXTURE_BUFFER, GL_TRANSFORM_FEEDBACK_BUFFER, or GL_UNIFORM_BUFFER.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the pointer to be returned. The symbolic constant must be GL_BUFFER_MAP_POINTER.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the pointer value specified by pname.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetBufferPointerv")]
        public static void GetBufferPointer<T2>(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All pname, [InAttribute, OutAttribute] ref T2 @params)
            where T2 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Return the pointer to a mapped buffer object's data store
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ATOMIC_COUNTER_BUFFER, GL_COPY_READ_BUFFER, GL_COPY_WRITE_BUFFER, GL_DRAW_INDIRECT_BUFFER, GL_DISPATCH_INDIRECT_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, GL_PIXEL_UNPACK_BUFFER, GL_QUERY_BUFFER, GL_SHADER_STORAGE_BUFFER, GL_TEXTURE_BUFFER, GL_TRANSFORM_FEEDBACK_BUFFER, or GL_UNIFORM_BUFFER.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the pointer to be returned. The symbolic constant must be GL_BUFFER_MAP_POINTER.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the pointer value specified by pname.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetBufferPointerv")]
        public static void GetBufferPointer(OpenTK.Graphics.ES30.BufferTarget target, OpenTK.Graphics.ES30.BufferPointer pname, [OutAttribute] IntPtr @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Return the pointer to a mapped buffer object's data store
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ATOMIC_COUNTER_BUFFER, GL_COPY_READ_BUFFER, GL_COPY_WRITE_BUFFER, GL_DRAW_INDIRECT_BUFFER, GL_DISPATCH_INDIRECT_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, GL_PIXEL_UNPACK_BUFFER, GL_QUERY_BUFFER, GL_SHADER_STORAGE_BUFFER, GL_TEXTURE_BUFFER, GL_TRANSFORM_FEEDBACK_BUFFER, or GL_UNIFORM_BUFFER.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the pointer to be returned. The symbolic constant must be GL_BUFFER_MAP_POINTER.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the pointer value specified by pname.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetBufferPointerv")]
        [CLSCompliant(false)]
        public static void GetBufferPointer<T2>(OpenTK.Graphics.ES30.BufferTarget target, OpenTK.Graphics.ES30.BufferPointer pname, [InAttribute, OutAttribute] T2[] @params)
            where T2 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Return the pointer to a mapped buffer object's data store
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ATOMIC_COUNTER_BUFFER, GL_COPY_READ_BUFFER, GL_COPY_WRITE_BUFFER, GL_DRAW_INDIRECT_BUFFER, GL_DISPATCH_INDIRECT_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, GL_PIXEL_UNPACK_BUFFER, GL_QUERY_BUFFER, GL_SHADER_STORAGE_BUFFER, GL_TEXTURE_BUFFER, GL_TRANSFORM_FEEDBACK_BUFFER, or GL_UNIFORM_BUFFER.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the pointer to be returned. The symbolic constant must be GL_BUFFER_MAP_POINTER.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the pointer value specified by pname.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetBufferPointerv")]
        [CLSCompliant(false)]
        public static void GetBufferPointer<T2>(OpenTK.Graphics.ES30.BufferTarget target, OpenTK.Graphics.ES30.BufferPointer pname, [InAttribute, OutAttribute] T2[,] @params)
            where T2 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Return the pointer to a mapped buffer object's data store
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ATOMIC_COUNTER_BUFFER, GL_COPY_READ_BUFFER, GL_COPY_WRITE_BUFFER, GL_DRAW_INDIRECT_BUFFER, GL_DISPATCH_INDIRECT_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, GL_PIXEL_UNPACK_BUFFER, GL_QUERY_BUFFER, GL_SHADER_STORAGE_BUFFER, GL_TEXTURE_BUFFER, GL_TRANSFORM_FEEDBACK_BUFFER, or GL_UNIFORM_BUFFER.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the pointer to be returned. The symbolic constant must be GL_BUFFER_MAP_POINTER.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the pointer value specified by pname.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetBufferPointerv")]
        [CLSCompliant(false)]
        public static void GetBufferPointer<T2>(OpenTK.Graphics.ES30.BufferTarget target, OpenTK.Graphics.ES30.BufferPointer pname, [InAttribute, OutAttribute] T2[,,] @params)
            where T2 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Return the pointer to a mapped buffer object's data store
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ATOMIC_COUNTER_BUFFER, GL_COPY_READ_BUFFER, GL_COPY_WRITE_BUFFER, GL_DRAW_INDIRECT_BUFFER, GL_DISPATCH_INDIRECT_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, GL_PIXEL_UNPACK_BUFFER, GL_QUERY_BUFFER, GL_SHADER_STORAGE_BUFFER, GL_TEXTURE_BUFFER, GL_TRANSFORM_FEEDBACK_BUFFER, or GL_UNIFORM_BUFFER.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the pointer to be returned. The symbolic constant must be GL_BUFFER_MAP_POINTER.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the pointer value specified by pname.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetBufferPointerv")]
        public static void GetBufferPointer<T2>(OpenTK.Graphics.ES30.BufferTarget target, OpenTK.Graphics.ES30.BufferPointer pname, [InAttribute, OutAttribute] ref T2 @params)
            where T2 : struct
         { throw new NotImplementedException(); }

        /// <summary>
        /// Retrieve messages from the debug message log
        /// </summary>
        /// <param name="count">
        /// <para>
        /// The number of debug messages to retrieve from the log.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// The size of the buffer whose address is given by messageLog.
        /// </para>
        /// </param>
        /// <param name="sources">
        /// <para>
        /// The address of an array of variables to receive the sources of the retrieved messages.
        /// </para>
        /// </param>
        /// <param name="types">
        /// <para>
        /// The address of an array of variables to receive the types of the retrieved messages.
        /// </para>
        /// </param>
        /// <param name="ids">
        /// <para>
        /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
        /// </para>
        /// </param>
        /// <param name="severities">
        /// <para>
        /// The address of an array of variables to receive the severites of the retrieved messages.
        /// </para>
        /// </param>
        /// <param name="lengths">
        /// <para>
        /// The address of an array of variables to receive the lengths of the received messages.
        /// </para>
        /// </param>
        /// <param name="messageLog">
        /// <para>
        /// The address of an array of characters that will receive the messages.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetDebugMessageLog")]
        [CLSCompliant(false)]
        public static Int32 GetDebugMessageLog(Int32 count, Int32 bufSize, [OutAttribute] OpenTK.Graphics.ES30.All[] sources, [OutAttribute] OpenTK.Graphics.ES30.All[] types, [OutAttribute] Int32[] ids, [OutAttribute] OpenTK.Graphics.ES30.All[] severities, [OutAttribute] Int32[] lengths, [OutAttribute] StringBuilder messageLog) { throw new NotImplementedException(); }

        /// <summary>
        /// Retrieve messages from the debug message log
        /// </summary>
        /// <param name="count">
        /// <para>
        /// The number of debug messages to retrieve from the log.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// The size of the buffer whose address is given by messageLog.
        /// </para>
        /// </param>
        /// <param name="sources">
        /// <para>
        /// The address of an array of variables to receive the sources of the retrieved messages.
        /// </para>
        /// </param>
        /// <param name="types">
        /// <para>
        /// The address of an array of variables to receive the types of the retrieved messages.
        /// </para>
        /// </param>
        /// <param name="ids">
        /// <para>
        /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
        /// </para>
        /// </param>
        /// <param name="severities">
        /// <para>
        /// The address of an array of variables to receive the severites of the retrieved messages.
        /// </para>
        /// </param>
        /// <param name="lengths">
        /// <para>
        /// The address of an array of variables to receive the lengths of the received messages.
        /// </para>
        /// </param>
        /// <param name="messageLog">
        /// <para>
        /// The address of an array of characters that will receive the messages.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetDebugMessageLog")]
        [CLSCompliant(false)]
        public static Int32 GetDebugMessageLog(Int32 count, Int32 bufSize, [OutAttribute] out OpenTK.Graphics.ES30.All sources, [OutAttribute] out OpenTK.Graphics.ES30.All types, [OutAttribute] out Int32 ids, [OutAttribute] out OpenTK.Graphics.ES30.All severities, [OutAttribute] out Int32 lengths, [OutAttribute] StringBuilder messageLog) { throw new NotImplementedException(); }

        /// <summary>
        /// Retrieve messages from the debug message log
        /// </summary>
        /// <param name="count">
        /// <para>
        /// The number of debug messages to retrieve from the log.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// The size of the buffer whose address is given by messageLog.
        /// </para>
        /// </param>
        /// <param name="sources">
        /// <para>
        /// The address of an array of variables to receive the sources of the retrieved messages.
        /// </para>
        /// </param>
        /// <param name="types">
        /// <para>
        /// The address of an array of variables to receive the types of the retrieved messages.
        /// </para>
        /// </param>
        /// <param name="ids">
        /// <para>
        /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
        /// </para>
        /// </param>
        /// <param name="severities">
        /// <para>
        /// The address of an array of variables to receive the severites of the retrieved messages.
        /// </para>
        /// </param>
        /// <param name="lengths">
        /// <para>
        /// The address of an array of variables to receive the lengths of the received messages.
        /// </para>
        /// </param>
        /// <param name="messageLog">
        /// <para>
        /// The address of an array of characters that will receive the messages.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetDebugMessageLog")]
        [CLSCompliant(false)]
        public static unsafe Int32 GetDebugMessageLog(Int32 count, Int32 bufSize, [OutAttribute] OpenTK.Graphics.ES30.All* sources, [OutAttribute] OpenTK.Graphics.ES30.All* types, [OutAttribute] Int32* ids, [OutAttribute] OpenTK.Graphics.ES30.All* severities, [OutAttribute] Int32* lengths, [OutAttribute] StringBuilder messageLog) { throw new NotImplementedException(); }

        /// <summary>
        /// Retrieve messages from the debug message log
        /// </summary>
        /// <param name="count">
        /// <para>
        /// The number of debug messages to retrieve from the log.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// The size of the buffer whose address is given by messageLog.
        /// </para>
        /// </param>
        /// <param name="sources">
        /// <para>
        /// The address of an array of variables to receive the sources of the retrieved messages.
        /// </para>
        /// </param>
        /// <param name="types">
        /// <para>
        /// The address of an array of variables to receive the types of the retrieved messages.
        /// </para>
        /// </param>
        /// <param name="ids">
        /// <para>
        /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
        /// </para>
        /// </param>
        /// <param name="severities">
        /// <para>
        /// The address of an array of variables to receive the severites of the retrieved messages.
        /// </para>
        /// </param>
        /// <param name="lengths">
        /// <para>
        /// The address of an array of variables to receive the lengths of the received messages.
        /// </para>
        /// </param>
        /// <param name="messageLog">
        /// <para>
        /// The address of an array of characters that will receive the messages.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetDebugMessageLog")]
        [CLSCompliant(false)]
        public static Int32 GetDebugMessageLog(Int32 count, Int32 bufSize, [OutAttribute] OpenTK.Graphics.ES30.DebugSourceExternal[] sources, [OutAttribute] OpenTK.Graphics.ES30.DebugType[] types, [OutAttribute] Int32[] ids, [OutAttribute] OpenTK.Graphics.ES30.DebugSeverity[] severities, [OutAttribute] Int32[] lengths, [OutAttribute] StringBuilder messageLog) { throw new NotImplementedException(); }

        /// <summary>
        /// Retrieve messages from the debug message log
        /// </summary>
        /// <param name="count">
        /// <para>
        /// The number of debug messages to retrieve from the log.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// The size of the buffer whose address is given by messageLog.
        /// </para>
        /// </param>
        /// <param name="sources">
        /// <para>
        /// The address of an array of variables to receive the sources of the retrieved messages.
        /// </para>
        /// </param>
        /// <param name="types">
        /// <para>
        /// The address of an array of variables to receive the types of the retrieved messages.
        /// </para>
        /// </param>
        /// <param name="ids">
        /// <para>
        /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
        /// </para>
        /// </param>
        /// <param name="severities">
        /// <para>
        /// The address of an array of variables to receive the severites of the retrieved messages.
        /// </para>
        /// </param>
        /// <param name="lengths">
        /// <para>
        /// The address of an array of variables to receive the lengths of the received messages.
        /// </para>
        /// </param>
        /// <param name="messageLog">
        /// <para>
        /// The address of an array of characters that will receive the messages.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetDebugMessageLog")]
        [CLSCompliant(false)]
        public static Int32 GetDebugMessageLog(Int32 count, Int32 bufSize, [OutAttribute] out OpenTK.Graphics.ES30.DebugSourceExternal sources, [OutAttribute] out OpenTK.Graphics.ES30.DebugType types, [OutAttribute] out Int32 ids, [OutAttribute] out OpenTK.Graphics.ES30.DebugSeverity severities, [OutAttribute] out Int32 lengths, [OutAttribute] StringBuilder messageLog) { throw new NotImplementedException(); }

        /// <summary>
        /// Retrieve messages from the debug message log
        /// </summary>
        /// <param name="count">
        /// <para>
        /// The number of debug messages to retrieve from the log.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// The size of the buffer whose address is given by messageLog.
        /// </para>
        /// </param>
        /// <param name="sources">
        /// <para>
        /// The address of an array of variables to receive the sources of the retrieved messages.
        /// </para>
        /// </param>
        /// <param name="types">
        /// <para>
        /// The address of an array of variables to receive the types of the retrieved messages.
        /// </para>
        /// </param>
        /// <param name="ids">
        /// <para>
        /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
        /// </para>
        /// </param>
        /// <param name="severities">
        /// <para>
        /// The address of an array of variables to receive the severites of the retrieved messages.
        /// </para>
        /// </param>
        /// <param name="lengths">
        /// <para>
        /// The address of an array of variables to receive the lengths of the received messages.
        /// </para>
        /// </param>
        /// <param name="messageLog">
        /// <para>
        /// The address of an array of characters that will receive the messages.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetDebugMessageLog")]
        [CLSCompliant(false)]
        public static unsafe Int32 GetDebugMessageLog(Int32 count, Int32 bufSize, [OutAttribute] OpenTK.Graphics.ES30.DebugSourceExternal* sources, [OutAttribute] OpenTK.Graphics.ES30.DebugType* types, [OutAttribute] Int32* ids, [OutAttribute] OpenTK.Graphics.ES30.DebugSeverity* severities, [OutAttribute] Int32* lengths, [OutAttribute] StringBuilder messageLog) { throw new NotImplementedException(); }

        /// <summary>
        /// Retrieve messages from the debug message log
        /// </summary>
        /// <param name="count">
        /// <para>
        /// The number of debug messages to retrieve from the log.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// The size of the buffer whose address is given by messageLog.
        /// </para>
        /// </param>
        /// <param name="sources">
        /// <para>
        /// The address of an array of variables to receive the sources of the retrieved messages.
        /// </para>
        /// </param>
        /// <param name="types">
        /// <para>
        /// The address of an array of variables to receive the types of the retrieved messages.
        /// </para>
        /// </param>
        /// <param name="ids">
        /// <para>
        /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
        /// </para>
        /// </param>
        /// <param name="severities">
        /// <para>
        /// The address of an array of variables to receive the severites of the retrieved messages.
        /// </para>
        /// </param>
        /// <param name="lengths">
        /// <para>
        /// The address of an array of variables to receive the lengths of the received messages.
        /// </para>
        /// </param>
        /// <param name="messageLog">
        /// <para>
        /// The address of an array of characters that will receive the messages.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetDebugMessageLog")]
        [CLSCompliant(false)]
        public static Int32 GetDebugMessageLog(UInt32 count, Int32 bufSize, [OutAttribute] OpenTK.Graphics.ES30.All[] sources, [OutAttribute] OpenTK.Graphics.ES30.All[] types, [OutAttribute] UInt32[] ids, [OutAttribute] OpenTK.Graphics.ES30.All[] severities, [OutAttribute] Int32[] lengths, [OutAttribute] StringBuilder messageLog) { throw new NotImplementedException(); }

        /// <summary>
        /// Retrieve messages from the debug message log
        /// </summary>
        /// <param name="count">
        /// <para>
        /// The number of debug messages to retrieve from the log.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// The size of the buffer whose address is given by messageLog.
        /// </para>
        /// </param>
        /// <param name="sources">
        /// <para>
        /// The address of an array of variables to receive the sources of the retrieved messages.
        /// </para>
        /// </param>
        /// <param name="types">
        /// <para>
        /// The address of an array of variables to receive the types of the retrieved messages.
        /// </para>
        /// </param>
        /// <param name="ids">
        /// <para>
        /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
        /// </para>
        /// </param>
        /// <param name="severities">
        /// <para>
        /// The address of an array of variables to receive the severites of the retrieved messages.
        /// </para>
        /// </param>
        /// <param name="lengths">
        /// <para>
        /// The address of an array of variables to receive the lengths of the received messages.
        /// </para>
        /// </param>
        /// <param name="messageLog">
        /// <para>
        /// The address of an array of characters that will receive the messages.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetDebugMessageLog")]
        [CLSCompliant(false)]
        public static Int32 GetDebugMessageLog(UInt32 count, Int32 bufSize, [OutAttribute] out OpenTK.Graphics.ES30.All sources, [OutAttribute] out OpenTK.Graphics.ES30.All types, [OutAttribute] out UInt32 ids, [OutAttribute] out OpenTK.Graphics.ES30.All severities, [OutAttribute] out Int32 lengths, [OutAttribute] StringBuilder messageLog) { throw new NotImplementedException(); }

        /// <summary>
        /// Retrieve messages from the debug message log
        /// </summary>
        /// <param name="count">
        /// <para>
        /// The number of debug messages to retrieve from the log.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// The size of the buffer whose address is given by messageLog.
        /// </para>
        /// </param>
        /// <param name="sources">
        /// <para>
        /// The address of an array of variables to receive the sources of the retrieved messages.
        /// </para>
        /// </param>
        /// <param name="types">
        /// <para>
        /// The address of an array of variables to receive the types of the retrieved messages.
        /// </para>
        /// </param>
        /// <param name="ids">
        /// <para>
        /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
        /// </para>
        /// </param>
        /// <param name="severities">
        /// <para>
        /// The address of an array of variables to receive the severites of the retrieved messages.
        /// </para>
        /// </param>
        /// <param name="lengths">
        /// <para>
        /// The address of an array of variables to receive the lengths of the received messages.
        /// </para>
        /// </param>
        /// <param name="messageLog">
        /// <para>
        /// The address of an array of characters that will receive the messages.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetDebugMessageLog")]
        [CLSCompliant(false)]
        public static unsafe Int32 GetDebugMessageLog(UInt32 count, Int32 bufSize, [OutAttribute] OpenTK.Graphics.ES30.All* sources, [OutAttribute] OpenTK.Graphics.ES30.All* types, [OutAttribute] UInt32* ids, [OutAttribute] OpenTK.Graphics.ES30.All* severities, [OutAttribute] Int32* lengths, [OutAttribute] StringBuilder messageLog) { throw new NotImplementedException(); }

        /// <summary>
        /// Retrieve messages from the debug message log
        /// </summary>
        /// <param name="count">
        /// <para>
        /// The number of debug messages to retrieve from the log.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// The size of the buffer whose address is given by messageLog.
        /// </para>
        /// </param>
        /// <param name="sources">
        /// <para>
        /// The address of an array of variables to receive the sources of the retrieved messages.
        /// </para>
        /// </param>
        /// <param name="types">
        /// <para>
        /// The address of an array of variables to receive the types of the retrieved messages.
        /// </para>
        /// </param>
        /// <param name="ids">
        /// <para>
        /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
        /// </para>
        /// </param>
        /// <param name="severities">
        /// <para>
        /// The address of an array of variables to receive the severites of the retrieved messages.
        /// </para>
        /// </param>
        /// <param name="lengths">
        /// <para>
        /// The address of an array of variables to receive the lengths of the received messages.
        /// </para>
        /// </param>
        /// <param name="messageLog">
        /// <para>
        /// The address of an array of characters that will receive the messages.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetDebugMessageLog")]
        [CLSCompliant(false)]
        public static Int32 GetDebugMessageLog(UInt32 count, Int32 bufSize, [OutAttribute] OpenTK.Graphics.ES30.DebugSourceExternal[] sources, [OutAttribute] OpenTK.Graphics.ES30.DebugType[] types, [OutAttribute] UInt32[] ids, [OutAttribute] OpenTK.Graphics.ES30.DebugSeverity[] severities, [OutAttribute] Int32[] lengths, [OutAttribute] StringBuilder messageLog) { throw new NotImplementedException(); }

        /// <summary>
        /// Retrieve messages from the debug message log
        /// </summary>
        /// <param name="count">
        /// <para>
        /// The number of debug messages to retrieve from the log.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// The size of the buffer whose address is given by messageLog.
        /// </para>
        /// </param>
        /// <param name="sources">
        /// <para>
        /// The address of an array of variables to receive the sources of the retrieved messages.
        /// </para>
        /// </param>
        /// <param name="types">
        /// <para>
        /// The address of an array of variables to receive the types of the retrieved messages.
        /// </para>
        /// </param>
        /// <param name="ids">
        /// <para>
        /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
        /// </para>
        /// </param>
        /// <param name="severities">
        /// <para>
        /// The address of an array of variables to receive the severites of the retrieved messages.
        /// </para>
        /// </param>
        /// <param name="lengths">
        /// <para>
        /// The address of an array of variables to receive the lengths of the received messages.
        /// </para>
        /// </param>
        /// <param name="messageLog">
        /// <para>
        /// The address of an array of characters that will receive the messages.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetDebugMessageLog")]
        [CLSCompliant(false)]
        public static Int32 GetDebugMessageLog(UInt32 count, Int32 bufSize, [OutAttribute] out OpenTK.Graphics.ES30.DebugSourceExternal sources, [OutAttribute] out OpenTK.Graphics.ES30.DebugType types, [OutAttribute] out UInt32 ids, [OutAttribute] out OpenTK.Graphics.ES30.DebugSeverity severities, [OutAttribute] out Int32 lengths, [OutAttribute] StringBuilder messageLog) { throw new NotImplementedException(); }

        /// <summary>
        /// Retrieve messages from the debug message log
        /// </summary>
        /// <param name="count">
        /// <para>
        /// The number of debug messages to retrieve from the log.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// The size of the buffer whose address is given by messageLog.
        /// </para>
        /// </param>
        /// <param name="sources">
        /// <para>
        /// The address of an array of variables to receive the sources of the retrieved messages.
        /// </para>
        /// </param>
        /// <param name="types">
        /// <para>
        /// The address of an array of variables to receive the types of the retrieved messages.
        /// </para>
        /// </param>
        /// <param name="ids">
        /// <para>
        /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
        /// </para>
        /// </param>
        /// <param name="severities">
        /// <para>
        /// The address of an array of variables to receive the severites of the retrieved messages.
        /// </para>
        /// </param>
        /// <param name="lengths">
        /// <para>
        /// The address of an array of variables to receive the lengths of the received messages.
        /// </para>
        /// </param>
        /// <param name="messageLog">
        /// <para>
        /// The address of an array of characters that will receive the messages.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetDebugMessageLog")]
        [CLSCompliant(false)]
        public static unsafe Int32 GetDebugMessageLog(UInt32 count, Int32 bufSize, [OutAttribute] OpenTK.Graphics.ES30.DebugSourceExternal* sources, [OutAttribute] OpenTK.Graphics.ES30.DebugType* types, [OutAttribute] UInt32* ids, [OutAttribute] OpenTK.Graphics.ES30.DebugSeverity* severities, [OutAttribute] Int32* lengths, [OutAttribute] StringBuilder messageLog) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Return error information
        /// </summary>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetError")]
        public static OpenTK.Graphics.ES30.ErrorCode GetError() { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]</summary>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetFloatv")]
        [CLSCompliant(false)]
        public static Single GetFloat(OpenTK.Graphics.ES30.All pname) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]</summary>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetFloatv")]
        [CLSCompliant(false)]
        public static Single GetFloat(OpenTK.Graphics.ES30.GetPName pname) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]</summary>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetFloatv")]
        [CLSCompliant(false)]
        public static void GetFloat(OpenTK.Graphics.ES30.All pname, [OutAttribute] Single[] data) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]</summary>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetFloatv")]
        [CLSCompliant(false)]
        public static void GetFloat(OpenTK.Graphics.ES30.All pname, [OutAttribute] out Single data) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]</summary>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetFloatv")]
        [CLSCompliant(false)]
        public static unsafe void GetFloat(OpenTK.Graphics.ES30.All pname, [OutAttribute] Single* data) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]</summary>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetFloatv")]
        [CLSCompliant(false)]
        public static void GetFloat(OpenTK.Graphics.ES30.GetPName pname, [OutAttribute] Single[] data) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]</summary>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetFloatv")]
        [CLSCompliant(false)]
        public static void GetFloat(OpenTK.Graphics.ES30.GetPName pname, [OutAttribute] out Single data) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]</summary>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetFloatv")]
        [CLSCompliant(false)]
        public static unsafe void GetFloat(OpenTK.Graphics.ES30.GetPName pname, [OutAttribute] Single* data) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Query the bindings of color numbers to user-defined varying out variables
        /// </summary>
        /// <param name="program">
        /// <para>
        /// The name of the program containing varying out variable whose binding to query
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// The name of the user-defined varying out variable whose binding to query
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetFragDataLocation")]
        [CLSCompliant(false)]
        public static Int32 GetFragDataLocation(Int32 program, String name) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Query the bindings of color numbers to user-defined varying out variables
        /// </summary>
        /// <param name="program">
        /// <para>
        /// The name of the program containing varying out variable whose binding to query
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// The name of the user-defined varying out variable whose binding to query
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetFragDataLocation")]
        [CLSCompliant(false)]
        public static Int32 GetFragDataLocation(UInt32 program, String name) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Retrieve information about attachments of a bound framebuffer object
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target of the query operation.
        /// </para>
        /// </param>
        /// <param name="attachment">
        /// <para>
        /// Specifies the attachment within target
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the parameter of attachment to query.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Specifies the address of a variable receive the value of pname for attachment.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetFramebufferAttachmentParameteriv")]
        [CLSCompliant(false)]
        public static void GetFramebufferAttachmentParameter(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All attachment, OpenTK.Graphics.ES30.All pname, [OutAttribute] Int32[] @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Retrieve information about attachments of a bound framebuffer object
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target of the query operation.
        /// </para>
        /// </param>
        /// <param name="attachment">
        /// <para>
        /// Specifies the attachment within target
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the parameter of attachment to query.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Specifies the address of a variable receive the value of pname for attachment.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetFramebufferAttachmentParameteriv")]
        [CLSCompliant(false)]
        public static void GetFramebufferAttachmentParameter(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All attachment, OpenTK.Graphics.ES30.All pname, [OutAttribute] out Int32 @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Retrieve information about attachments of a bound framebuffer object
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target of the query operation.
        /// </para>
        /// </param>
        /// <param name="attachment">
        /// <para>
        /// Specifies the attachment within target
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the parameter of attachment to query.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Specifies the address of a variable receive the value of pname for attachment.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetFramebufferAttachmentParameteriv")]
        [CLSCompliant(false)]
        public static unsafe void GetFramebufferAttachmentParameter(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All attachment, OpenTK.Graphics.ES30.All pname, [OutAttribute] Int32* @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Retrieve information about attachments of a bound framebuffer object
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target of the query operation.
        /// </para>
        /// </param>
        /// <param name="attachment">
        /// <para>
        /// Specifies the attachment within target
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the parameter of attachment to query.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Specifies the address of a variable receive the value of pname for attachment.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetFramebufferAttachmentParameteriv")]
        [CLSCompliant(false)]
        public static void GetFramebufferAttachmentParameter(OpenTK.Graphics.ES30.FramebufferTarget target, OpenTK.Graphics.ES30.FramebufferAttachment attachment, OpenTK.Graphics.ES30.FramebufferParameterName pname, [OutAttribute] Int32[] @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Retrieve information about attachments of a bound framebuffer object
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target of the query operation.
        /// </para>
        /// </param>
        /// <param name="attachment">
        /// <para>
        /// Specifies the attachment within target
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the parameter of attachment to query.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Specifies the address of a variable receive the value of pname for attachment.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetFramebufferAttachmentParameteriv")]
        [CLSCompliant(false)]
        public static void GetFramebufferAttachmentParameter(OpenTK.Graphics.ES30.FramebufferTarget target, OpenTK.Graphics.ES30.FramebufferAttachment attachment, OpenTK.Graphics.ES30.FramebufferParameterName pname, [OutAttribute] out Int32 @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Retrieve information about attachments of a bound framebuffer object
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target of the query operation.
        /// </para>
        /// </param>
        /// <param name="attachment">
        /// <para>
        /// Specifies the attachment within target
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the parameter of attachment to query.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Specifies the address of a variable receive the value of pname for attachment.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetFramebufferAttachmentParameteriv")]
        [CLSCompliant(false)]
        public static unsafe void GetFramebufferAttachmentParameter(OpenTK.Graphics.ES30.FramebufferTarget target, OpenTK.Graphics.ES30.FramebufferAttachment attachment, OpenTK.Graphics.ES30.FramebufferParameterName pname, [OutAttribute] Int32* @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]</summary>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetInteger64i_v")]
        [CLSCompliant(false)]
        public static void GetInteger64(OpenTK.Graphics.ES30.All target, Int32 index, [OutAttribute] Int64[] data) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]</summary>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetInteger64i_v")]
        [CLSCompliant(false)]
        public static void GetInteger64(OpenTK.Graphics.ES30.All target, Int32 index, [OutAttribute] out Int64 data) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]</summary>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetInteger64i_v")]
        [CLSCompliant(false)]
        public static unsafe void GetInteger64(OpenTK.Graphics.ES30.All target, Int32 index, [OutAttribute] Int64* data) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]</summary>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetInteger64i_v")]
        [CLSCompliant(false)]
        public static void GetInteger64(OpenTK.Graphics.ES30.All target, UInt32 index, [OutAttribute] Int64[] data) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]</summary>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetInteger64i_v")]
        [CLSCompliant(false)]
        public static void GetInteger64(OpenTK.Graphics.ES30.All target, UInt32 index, [OutAttribute] out Int64 data) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]</summary>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetInteger64i_v")]
        [CLSCompliant(false)]
        public static unsafe void GetInteger64(OpenTK.Graphics.ES30.All target, UInt32 index, [OutAttribute] Int64* data) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]</summary>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetInteger64i_v")]
        [CLSCompliant(false)]
        public static void GetInteger64(OpenTK.Graphics.ES30.GetIndexedPName target, Int32 index, [OutAttribute] Int64[] data) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]</summary>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetInteger64i_v")]
        [CLSCompliant(false)]
        public static void GetInteger64(OpenTK.Graphics.ES30.GetIndexedPName target, Int32 index, [OutAttribute] out Int64 data) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]</summary>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetInteger64i_v")]
        [CLSCompliant(false)]
        public static unsafe void GetInteger64(OpenTK.Graphics.ES30.GetIndexedPName target, Int32 index, [OutAttribute] Int64* data) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]</summary>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetInteger64i_v")]
        [CLSCompliant(false)]
        public static void GetInteger64(OpenTK.Graphics.ES30.GetIndexedPName target, UInt32 index, [OutAttribute] Int64[] data) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]</summary>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetInteger64i_v")]
        [CLSCompliant(false)]
        public static void GetInteger64(OpenTK.Graphics.ES30.GetIndexedPName target, UInt32 index, [OutAttribute] out Int64 data) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]</summary>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetInteger64i_v")]
        [CLSCompliant(false)]
        public static unsafe void GetInteger64(OpenTK.Graphics.ES30.GetIndexedPName target, UInt32 index, [OutAttribute] Int64* data) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]</summary>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetInteger64v")]
        [CLSCompliant(false)]
        public static Int64 GetInteger64(OpenTK.Graphics.ES30.All pname) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]</summary>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetInteger64v")]
        [CLSCompliant(false)]
        public static Int64 GetInteger64(OpenTK.Graphics.ES30.GetPName pname) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]</summary>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetInteger64v")]
        [CLSCompliant(false)]
        public static void GetInteger64(OpenTK.Graphics.ES30.All pname, [OutAttribute] Int64[] data) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]</summary>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetInteger64v")]
        [CLSCompliant(false)]
        public static void GetInteger64(OpenTK.Graphics.ES30.All pname, [OutAttribute] out Int64 data) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]</summary>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetInteger64v")]
        [CLSCompliant(false)]
        public static unsafe void GetInteger64(OpenTK.Graphics.ES30.All pname, [OutAttribute] Int64* data) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]</summary>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetInteger64v")]
        [CLSCompliant(false)]
        public static void GetInteger64(OpenTK.Graphics.ES30.GetPName pname, [OutAttribute] Int64[] data) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]</summary>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetInteger64v")]
        [CLSCompliant(false)]
        public static void GetInteger64(OpenTK.Graphics.ES30.GetPName pname, [OutAttribute] out Int64 data) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]</summary>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetInteger64v")]
        [CLSCompliant(false)]
        public static unsafe void GetInteger64(OpenTK.Graphics.ES30.GetPName pname, [OutAttribute] Int64* data) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]</summary>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetIntegeri_v")]
        [CLSCompliant(false)]
        public static void GetInteger(OpenTK.Graphics.ES30.All target, Int32 index, [OutAttribute] Int32[] data) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]</summary>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetIntegeri_v")]
        [CLSCompliant(false)]
        public static void GetInteger(OpenTK.Graphics.ES30.All target, Int32 index, [OutAttribute] out Int32 data) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]</summary>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetIntegeri_v")]
        [CLSCompliant(false)]
        public static unsafe void GetInteger(OpenTK.Graphics.ES30.All target, Int32 index, [OutAttribute] Int32* data) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]</summary>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetIntegeri_v")]
        [CLSCompliant(false)]
        public static void GetInteger(OpenTK.Graphics.ES30.All target, UInt32 index, [OutAttribute] Int32[] data) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]</summary>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetIntegeri_v")]
        [CLSCompliant(false)]
        public static void GetInteger(OpenTK.Graphics.ES30.All target, UInt32 index, [OutAttribute] out Int32 data) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]</summary>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetIntegeri_v")]
        [CLSCompliant(false)]
        public static unsafe void GetInteger(OpenTK.Graphics.ES30.All target, UInt32 index, [OutAttribute] Int32* data) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]</summary>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetIntegeri_v")]
        [CLSCompliant(false)]
        public static void GetInteger(OpenTK.Graphics.ES30.GetIndexedPName target, Int32 index, [OutAttribute] Int32[] data) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]</summary>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetIntegeri_v")]
        [CLSCompliant(false)]
        public static void GetInteger(OpenTK.Graphics.ES30.GetIndexedPName target, Int32 index, [OutAttribute] out Int32 data) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]</summary>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetIntegeri_v")]
        [CLSCompliant(false)]
        public static unsafe void GetInteger(OpenTK.Graphics.ES30.GetIndexedPName target, Int32 index, [OutAttribute] Int32* data) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]</summary>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetIntegeri_v")]
        [CLSCompliant(false)]
        public static void GetInteger(OpenTK.Graphics.ES30.GetIndexedPName target, UInt32 index, [OutAttribute] Int32[] data) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]</summary>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetIntegeri_v")]
        [CLSCompliant(false)]
        public static void GetInteger(OpenTK.Graphics.ES30.GetIndexedPName target, UInt32 index, [OutAttribute] out Int32 data) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]</summary>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetIntegeri_v")]
        [CLSCompliant(false)]
        public static unsafe void GetInteger(OpenTK.Graphics.ES30.GetIndexedPName target, UInt32 index, [OutAttribute] Int32* data) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]</summary>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetIntegerv")]
        [CLSCompliant(false)]
        public static Int32 GetInteger(OpenTK.Graphics.ES30.All pname) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]</summary>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetIntegerv")]
        [CLSCompliant(false)]
        public static Int32 GetInteger(OpenTK.Graphics.ES30.GetPName pname) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]</summary>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetIntegerv")]
        [CLSCompliant(false)]
        public static void GetInteger(OpenTK.Graphics.ES30.All pname, [OutAttribute] Int32[] data) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]</summary>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetIntegerv")]
        [CLSCompliant(false)]
        public static void GetInteger(OpenTK.Graphics.ES30.All pname, [OutAttribute] out Int32 data) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]</summary>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetIntegerv")]
        [CLSCompliant(false)]
        public static unsafe void GetInteger(OpenTK.Graphics.ES30.All pname, [OutAttribute] Int32* data) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]</summary>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetIntegerv")]
        [CLSCompliant(false)]
        public static void GetInteger(OpenTK.Graphics.ES30.GetPName pname, [OutAttribute] Int32[] data) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]</summary>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetIntegerv")]
        [CLSCompliant(false)]
        public static void GetInteger(OpenTK.Graphics.ES30.GetPName pname, [OutAttribute] out Int32 data) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]</summary>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetIntegerv")]
        [CLSCompliant(false)]
        public static unsafe void GetInteger(OpenTK.Graphics.ES30.GetPName pname, [OutAttribute] Int32* data) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Retrieve information about implementation-dependent support for internal formats
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Indicates the usage of the internal format. target must be GL_TEXTURE_1D, GL_TEXTURE_1D_ARRAY, GL_TEXTURE_2D, GL_TEXTURE_2D_ARRAY, GL_TEXTURE_3D, GL_TEXTURE_CUBE_MAP, GL_TEXTURE_CUBE_MAP_ARRAY, GL_TEXTURE_RECTANGLE, GL_TEXTURE_BUFFER, GL_RENDERBUFFER, GL_TEXTURE_2D_MULTISAMPLE or GL_TEXTURE_2D_MULTISAMPLE_ARRAY.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// Specifies the internal format about which to retrieve information.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the type of information to query.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the maximum number of basic machine units that may be written to params by the function.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Specifies the address of a variable into which to write the retrieved information.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetInternalformativ")]
        [CLSCompliant(false)]
        public static void GetInternalformat(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All internalformat, OpenTK.Graphics.ES30.All pname, Int32 bufSize, [OutAttribute] Int32[] @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Retrieve information about implementation-dependent support for internal formats
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Indicates the usage of the internal format. target must be GL_TEXTURE_1D, GL_TEXTURE_1D_ARRAY, GL_TEXTURE_2D, GL_TEXTURE_2D_ARRAY, GL_TEXTURE_3D, GL_TEXTURE_CUBE_MAP, GL_TEXTURE_CUBE_MAP_ARRAY, GL_TEXTURE_RECTANGLE, GL_TEXTURE_BUFFER, GL_RENDERBUFFER, GL_TEXTURE_2D_MULTISAMPLE or GL_TEXTURE_2D_MULTISAMPLE_ARRAY.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// Specifies the internal format about which to retrieve information.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the type of information to query.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the maximum number of basic machine units that may be written to params by the function.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Specifies the address of a variable into which to write the retrieved information.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetInternalformativ")]
        [CLSCompliant(false)]
        public static void GetInternalformat(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All internalformat, OpenTK.Graphics.ES30.All pname, Int32 bufSize, [OutAttribute] out Int32 @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Retrieve information about implementation-dependent support for internal formats
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Indicates the usage of the internal format. target must be GL_TEXTURE_1D, GL_TEXTURE_1D_ARRAY, GL_TEXTURE_2D, GL_TEXTURE_2D_ARRAY, GL_TEXTURE_3D, GL_TEXTURE_CUBE_MAP, GL_TEXTURE_CUBE_MAP_ARRAY, GL_TEXTURE_RECTANGLE, GL_TEXTURE_BUFFER, GL_RENDERBUFFER, GL_TEXTURE_2D_MULTISAMPLE or GL_TEXTURE_2D_MULTISAMPLE_ARRAY.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// Specifies the internal format about which to retrieve information.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the type of information to query.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the maximum number of basic machine units that may be written to params by the function.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Specifies the address of a variable into which to write the retrieved information.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetInternalformativ")]
        [CLSCompliant(false)]
        public static unsafe void GetInternalformat(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All internalformat, OpenTK.Graphics.ES30.All pname, Int32 bufSize, [OutAttribute] Int32* @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Retrieve information about implementation-dependent support for internal formats
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Indicates the usage of the internal format. target must be GL_TEXTURE_1D, GL_TEXTURE_1D_ARRAY, GL_TEXTURE_2D, GL_TEXTURE_2D_ARRAY, GL_TEXTURE_3D, GL_TEXTURE_CUBE_MAP, GL_TEXTURE_CUBE_MAP_ARRAY, GL_TEXTURE_RECTANGLE, GL_TEXTURE_BUFFER, GL_RENDERBUFFER, GL_TEXTURE_2D_MULTISAMPLE or GL_TEXTURE_2D_MULTISAMPLE_ARRAY.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// Specifies the internal format about which to retrieve information.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the type of information to query.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the maximum number of basic machine units that may be written to params by the function.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Specifies the address of a variable into which to write the retrieved information.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetInternalformativ")]
        [CLSCompliant(false)]
        public static void GetInternalformat(OpenTK.Graphics.ES30.ImageTarget target, OpenTK.Graphics.ES30.SizedInternalFormat internalformat, OpenTK.Graphics.ES30.InternalFormatParameter pname, Int32 bufSize, [OutAttribute] Int32[] @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Retrieve information about implementation-dependent support for internal formats
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Indicates the usage of the internal format. target must be GL_TEXTURE_1D, GL_TEXTURE_1D_ARRAY, GL_TEXTURE_2D, GL_TEXTURE_2D_ARRAY, GL_TEXTURE_3D, GL_TEXTURE_CUBE_MAP, GL_TEXTURE_CUBE_MAP_ARRAY, GL_TEXTURE_RECTANGLE, GL_TEXTURE_BUFFER, GL_RENDERBUFFER, GL_TEXTURE_2D_MULTISAMPLE or GL_TEXTURE_2D_MULTISAMPLE_ARRAY.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// Specifies the internal format about which to retrieve information.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the type of information to query.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the maximum number of basic machine units that may be written to params by the function.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Specifies the address of a variable into which to write the retrieved information.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetInternalformativ")]
        [CLSCompliant(false)]
        public static void GetInternalformat(OpenTK.Graphics.ES30.ImageTarget target, OpenTK.Graphics.ES30.SizedInternalFormat internalformat, OpenTK.Graphics.ES30.InternalFormatParameter pname, Int32 bufSize, [OutAttribute] out Int32 @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Retrieve information about implementation-dependent support for internal formats
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Indicates the usage of the internal format. target must be GL_TEXTURE_1D, GL_TEXTURE_1D_ARRAY, GL_TEXTURE_2D, GL_TEXTURE_2D_ARRAY, GL_TEXTURE_3D, GL_TEXTURE_CUBE_MAP, GL_TEXTURE_CUBE_MAP_ARRAY, GL_TEXTURE_RECTANGLE, GL_TEXTURE_BUFFER, GL_RENDERBUFFER, GL_TEXTURE_2D_MULTISAMPLE or GL_TEXTURE_2D_MULTISAMPLE_ARRAY.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// Specifies the internal format about which to retrieve information.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the type of information to query.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the maximum number of basic machine units that may be written to params by the function.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Specifies the address of a variable into which to write the retrieved information.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetInternalformativ")]
        [CLSCompliant(false)]
        public static unsafe void GetInternalformat(OpenTK.Graphics.ES30.ImageTarget target, OpenTK.Graphics.ES30.SizedInternalFormat internalformat, OpenTK.Graphics.ES30.InternalFormatParameter pname, Int32 bufSize, [OutAttribute] Int32* @params) { throw new NotImplementedException(); }

        /// <summary>
        /// Retrieve the label of a named object identified within a namespace
        /// </summary>
        /// <param name="identifier">
        /// <para>
        /// The namespace from which the name of the object is allocated.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// The name of the object whose label to retrieve.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// The length of the buffer whose address is in label.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// The address of a variable to receive the length of the object label.
        /// </para>
        /// </param>
        /// <param name="label">
        /// <para>
        /// The address of a string that will receive the object label.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectLabel")]
        [CLSCompliant(false)]
        public static void GetObjectLabel(OpenTK.Graphics.ES30.All identifier, Int32 name, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute] StringBuilder label) { throw new NotImplementedException(); }

        /// <summary>
        /// Retrieve the label of a named object identified within a namespace
        /// </summary>
        /// <param name="identifier">
        /// <para>
        /// The namespace from which the name of the object is allocated.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// The name of the object whose label to retrieve.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// The length of the buffer whose address is in label.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// The address of a variable to receive the length of the object label.
        /// </para>
        /// </param>
        /// <param name="label">
        /// <para>
        /// The address of a string that will receive the object label.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectLabel")]
        [CLSCompliant(false)]
        public static void GetObjectLabel(OpenTK.Graphics.ES30.All identifier, Int32 name, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder label) { throw new NotImplementedException(); }

        /// <summary>
        /// Retrieve the label of a named object identified within a namespace
        /// </summary>
        /// <param name="identifier">
        /// <para>
        /// The namespace from which the name of the object is allocated.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// The name of the object whose label to retrieve.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// The length of the buffer whose address is in label.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// The address of a variable to receive the length of the object label.
        /// </para>
        /// </param>
        /// <param name="label">
        /// <para>
        /// The address of a string that will receive the object label.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectLabel")]
        [CLSCompliant(false)]
        public static unsafe void GetObjectLabel(OpenTK.Graphics.ES30.All identifier, Int32 name, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder label) { throw new NotImplementedException(); }

        /// <summary>
        /// Retrieve the label of a named object identified within a namespace
        /// </summary>
        /// <param name="identifier">
        /// <para>
        /// The namespace from which the name of the object is allocated.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// The name of the object whose label to retrieve.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// The length of the buffer whose address is in label.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// The address of a variable to receive the length of the object label.
        /// </para>
        /// </param>
        /// <param name="label">
        /// <para>
        /// The address of a string that will receive the object label.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectLabel")]
        [CLSCompliant(false)]
        public static void GetObjectLabel(OpenTK.Graphics.ES30.All identifier, UInt32 name, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute] StringBuilder label) { throw new NotImplementedException(); }

        /// <summary>
        /// Retrieve the label of a named object identified within a namespace
        /// </summary>
        /// <param name="identifier">
        /// <para>
        /// The namespace from which the name of the object is allocated.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// The name of the object whose label to retrieve.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// The length of the buffer whose address is in label.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// The address of a variable to receive the length of the object label.
        /// </para>
        /// </param>
        /// <param name="label">
        /// <para>
        /// The address of a string that will receive the object label.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectLabel")]
        [CLSCompliant(false)]
        public static void GetObjectLabel(OpenTK.Graphics.ES30.All identifier, UInt32 name, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder label) { throw new NotImplementedException(); }

        /// <summary>
        /// Retrieve the label of a named object identified within a namespace
        /// </summary>
        /// <param name="identifier">
        /// <para>
        /// The namespace from which the name of the object is allocated.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// The name of the object whose label to retrieve.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// The length of the buffer whose address is in label.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// The address of a variable to receive the length of the object label.
        /// </para>
        /// </param>
        /// <param name="label">
        /// <para>
        /// The address of a string that will receive the object label.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectLabel")]
        [CLSCompliant(false)]
        public static unsafe void GetObjectLabel(OpenTK.Graphics.ES30.All identifier, UInt32 name, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder label) { throw new NotImplementedException(); }

        /// <summary>
        /// Retrieve the label of a named object identified within a namespace
        /// </summary>
        /// <param name="identifier">
        /// <para>
        /// The namespace from which the name of the object is allocated.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// The name of the object whose label to retrieve.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// The length of the buffer whose address is in label.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// The address of a variable to receive the length of the object label.
        /// </para>
        /// </param>
        /// <param name="label">
        /// <para>
        /// The address of a string that will receive the object label.
        /// </para>
        /// </param>
        [Obsolete("Use out overload instead")]
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectLabel")]
        [CLSCompliant(false)]
        public static void GetObjectLabel(OpenTK.Graphics.ES30.ObjectLabelIdentifier identifier, Int32 name, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute] StringBuilder label) { throw new NotImplementedException(); }

        /// <summary>
        /// Retrieve the label of a named object identified within a namespace
        /// </summary>
        /// <param name="identifier">
        /// <para>
        /// The namespace from which the name of the object is allocated.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// The name of the object whose label to retrieve.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// The length of the buffer whose address is in label.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// The address of a variable to receive the length of the object label.
        /// </para>
        /// </param>
        /// <param name="label">
        /// <para>
        /// The address of a string that will receive the object label.
        /// </para>
        /// </param>
        [Obsolete("Use out overload instead")]
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectLabel")]
        [CLSCompliant(false)]
        public static void GetObjectLabel(OpenTK.Graphics.ES30.ObjectLabelIdentifier identifier, Int32 name, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder label) { throw new NotImplementedException(); }

        /// <summary>
        /// Retrieve the label of a named object identified within a namespace
        /// </summary>
        /// <param name="identifier">
        /// <para>
        /// The namespace from which the name of the object is allocated.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// The name of the object whose label to retrieve.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// The length of the buffer whose address is in label.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// The address of a variable to receive the length of the object label.
        /// </para>
        /// </param>
        /// <param name="label">
        /// <para>
        /// The address of a string that will receive the object label.
        /// </para>
        /// </param>
        [Obsolete("Use out overload instead")]
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectLabel")]
        [CLSCompliant(false)]
        public static unsafe void GetObjectLabel(OpenTK.Graphics.ES30.ObjectLabelIdentifier identifier, Int32 name, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder label) { throw new NotImplementedException(); }

        /// <summary>
        /// Retrieve the label of a named object identified within a namespace
        /// </summary>
        /// <param name="identifier">
        /// <para>
        /// The namespace from which the name of the object is allocated.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// The name of the object whose label to retrieve.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// The length of the buffer whose address is in label.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// The address of a variable to receive the length of the object label.
        /// </para>
        /// </param>
        /// <param name="label">
        /// <para>
        /// The address of a string that will receive the object label.
        /// </para>
        /// </param>
        [Obsolete("Use out overload instead")]
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectLabel")]
        [CLSCompliant(false)]
        public static void GetObjectLabel(OpenTK.Graphics.ES30.ObjectLabelIdentifier identifier, UInt32 name, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute] StringBuilder label) { throw new NotImplementedException(); }

        /// <summary>
        /// Retrieve the label of a named object identified within a namespace
        /// </summary>
        /// <param name="identifier">
        /// <para>
        /// The namespace from which the name of the object is allocated.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// The name of the object whose label to retrieve.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// The length of the buffer whose address is in label.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// The address of a variable to receive the length of the object label.
        /// </para>
        /// </param>
        /// <param name="label">
        /// <para>
        /// The address of a string that will receive the object label.
        /// </para>
        /// </param>
        [Obsolete("Use out overload instead")]
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectLabel")]
        [CLSCompliant(false)]
        public static void GetObjectLabel(OpenTK.Graphics.ES30.ObjectLabelIdentifier identifier, UInt32 name, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder label) { throw new NotImplementedException(); }

        /// <summary>
        /// Retrieve the label of a named object identified within a namespace
        /// </summary>
        /// <param name="identifier">
        /// <para>
        /// The namespace from which the name of the object is allocated.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// The name of the object whose label to retrieve.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// The length of the buffer whose address is in label.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// The address of a variable to receive the length of the object label.
        /// </para>
        /// </param>
        /// <param name="label">
        /// <para>
        /// The address of a string that will receive the object label.
        /// </para>
        /// </param>
        [Obsolete("Use out overload instead")]
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectLabel")]
        [CLSCompliant(false)]
        public static unsafe void GetObjectLabel(OpenTK.Graphics.ES30.ObjectLabelIdentifier identifier, UInt32 name, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder label) { throw new NotImplementedException(); }

        /// <summary>
        /// Retrieve the label of a sync object identified by a pointer
        /// </summary>
        /// <param name="ptr">
        /// <para>
        /// The name of the sync object whose label to retrieve.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// The length of the buffer whose address is in label.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// The address of a variable to receive the length of the object label.
        /// </para>
        /// </param>
        /// <param name="label">
        /// <para>
        /// The address of a string that will receive the object label.
        /// </para>
        /// </param>
        [Obsolete("Use out overload instead")]
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectPtrLabel")]
        [CLSCompliant(false)]
        public static void GetObjectPtrLabel(IntPtr ptr, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute] StringBuilder label) { throw new NotImplementedException(); }

        /// <summary>
        /// Retrieve the label of a sync object identified by a pointer
        /// </summary>
        /// <param name="ptr">
        /// <para>
        /// The name of the sync object whose label to retrieve.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// The length of the buffer whose address is in label.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// The address of a variable to receive the length of the object label.
        /// </para>
        /// </param>
        /// <param name="label">
        /// <para>
        /// The address of a string that will receive the object label.
        /// </para>
        /// </param>
        [Obsolete("Use out overload instead")]
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectPtrLabel")]
        [CLSCompliant(false)]
        public static void GetObjectPtrLabel(IntPtr ptr, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder label) { throw new NotImplementedException(); }

        /// <summary>
        /// Retrieve the label of a sync object identified by a pointer
        /// </summary>
        /// <param name="ptr">
        /// <para>
        /// The name of the sync object whose label to retrieve.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// The length of the buffer whose address is in label.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// The address of a variable to receive the length of the object label.
        /// </para>
        /// </param>
        /// <param name="label">
        /// <para>
        /// The address of a string that will receive the object label.
        /// </para>
        /// </param>
        [Obsolete("Use out overload instead")]
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectPtrLabel")]
        [CLSCompliant(false)]
        public static unsafe void GetObjectPtrLabel(IntPtr ptr, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder label) { throw new NotImplementedException(); }

        /// <summary>
        /// Retrieve the label of a sync object identified by a pointer
        /// </summary>
        /// <param name="ptr">
        /// <para>
        /// The name of the sync object whose label to retrieve.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// The length of the buffer whose address is in label.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// The address of a variable to receive the length of the object label.
        /// </para>
        /// </param>
        /// <param name="label">
        /// <para>
        /// The address of a string that will receive the object label.
        /// </para>
        /// </param>
        [Obsolete("Use out overload instead")]
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectPtrLabel")]
        [CLSCompliant(false)]
        public static void GetObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[] ptr, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute] StringBuilder label)
            where T0 : struct
         { throw new NotImplementedException(); }

        /// <summary>
        /// Retrieve the label of a sync object identified by a pointer
        /// </summary>
        /// <param name="ptr">
        /// <para>
        /// The name of the sync object whose label to retrieve.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// The length of the buffer whose address is in label.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// The address of a variable to receive the length of the object label.
        /// </para>
        /// </param>
        /// <param name="label">
        /// <para>
        /// The address of a string that will receive the object label.
        /// </para>
        /// </param>
        [Obsolete("Use out overload instead")]
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectPtrLabel")]
        [CLSCompliant(false)]
        public static void GetObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[] ptr, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder label)
            where T0 : struct
         { throw new NotImplementedException(); }

        /// <summary>
        /// Retrieve the label of a sync object identified by a pointer
        /// </summary>
        /// <param name="ptr">
        /// <para>
        /// The name of the sync object whose label to retrieve.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// The length of the buffer whose address is in label.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// The address of a variable to receive the length of the object label.
        /// </para>
        /// </param>
        /// <param name="label">
        /// <para>
        /// The address of a string that will receive the object label.
        /// </para>
        /// </param>
        [Obsolete("Use out overload instead")]
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectPtrLabel")]
        [CLSCompliant(false)]
        public static unsafe void GetObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[] ptr, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder label)
            where T0 : struct
         { throw new NotImplementedException(); }

        /// <summary>
        /// Retrieve the label of a sync object identified by a pointer
        /// </summary>
        /// <param name="ptr">
        /// <para>
        /// The name of the sync object whose label to retrieve.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// The length of the buffer whose address is in label.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// The address of a variable to receive the length of the object label.
        /// </para>
        /// </param>
        /// <param name="label">
        /// <para>
        /// The address of a string that will receive the object label.
        /// </para>
        /// </param>
        [Obsolete("Use out overload instead")]
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectPtrLabel")]
        [CLSCompliant(false)]
        public static void GetObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[,] ptr, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute] StringBuilder label)
            where T0 : struct
         { throw new NotImplementedException(); }

        /// <summary>
        /// Retrieve the label of a sync object identified by a pointer
        /// </summary>
        /// <param name="ptr">
        /// <para>
        /// The name of the sync object whose label to retrieve.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// The length of the buffer whose address is in label.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// The address of a variable to receive the length of the object label.
        /// </para>
        /// </param>
        /// <param name="label">
        /// <para>
        /// The address of a string that will receive the object label.
        /// </para>
        /// </param>
        [Obsolete("Use out overload instead")]
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectPtrLabel")]
        [CLSCompliant(false)]
        public static void GetObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[,] ptr, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder label)
            where T0 : struct
         { throw new NotImplementedException(); }

        /// <summary>
        /// Retrieve the label of a sync object identified by a pointer
        /// </summary>
        /// <param name="ptr">
        /// <para>
        /// The name of the sync object whose label to retrieve.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// The length of the buffer whose address is in label.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// The address of a variable to receive the length of the object label.
        /// </para>
        /// </param>
        /// <param name="label">
        /// <para>
        /// The address of a string that will receive the object label.
        /// </para>
        /// </param>
        [Obsolete("Use out overload instead")]
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectPtrLabel")]
        [CLSCompliant(false)]
        public static unsafe void GetObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[,] ptr, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder label)
            where T0 : struct
         { throw new NotImplementedException(); }

        /// <summary>
        /// Retrieve the label of a sync object identified by a pointer
        /// </summary>
        /// <param name="ptr">
        /// <para>
        /// The name of the sync object whose label to retrieve.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// The length of the buffer whose address is in label.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// The address of a variable to receive the length of the object label.
        /// </para>
        /// </param>
        /// <param name="label">
        /// <para>
        /// The address of a string that will receive the object label.
        /// </para>
        /// </param>
        [Obsolete("Use out overload instead")]
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectPtrLabel")]
        [CLSCompliant(false)]
        public static void GetObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[,,] ptr, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute] StringBuilder label)
            where T0 : struct
         { throw new NotImplementedException(); }

        /// <summary>
        /// Retrieve the label of a sync object identified by a pointer
        /// </summary>
        /// <param name="ptr">
        /// <para>
        /// The name of the sync object whose label to retrieve.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// The length of the buffer whose address is in label.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// The address of a variable to receive the length of the object label.
        /// </para>
        /// </param>
        /// <param name="label">
        /// <para>
        /// The address of a string that will receive the object label.
        /// </para>
        /// </param>
        [Obsolete("Use out overload instead")]
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectPtrLabel")]
        [CLSCompliant(false)]
        public static void GetObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[,,] ptr, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder label)
            where T0 : struct
         { throw new NotImplementedException(); }

        /// <summary>
        /// Retrieve the label of a sync object identified by a pointer
        /// </summary>
        /// <param name="ptr">
        /// <para>
        /// The name of the sync object whose label to retrieve.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// The length of the buffer whose address is in label.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// The address of a variable to receive the length of the object label.
        /// </para>
        /// </param>
        /// <param name="label">
        /// <para>
        /// The address of a string that will receive the object label.
        /// </para>
        /// </param>
        [Obsolete("Use out overload instead")]
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectPtrLabel")]
        [CLSCompliant(false)]
        public static unsafe void GetObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[,,] ptr, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder label)
            where T0 : struct
         { throw new NotImplementedException(); }

        /// <summary>
        /// Retrieve the label of a sync object identified by a pointer
        /// </summary>
        /// <param name="ptr">
        /// <para>
        /// The name of the sync object whose label to retrieve.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// The length of the buffer whose address is in label.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// The address of a variable to receive the length of the object label.
        /// </para>
        /// </param>
        /// <param name="label">
        /// <para>
        /// The address of a string that will receive the object label.
        /// </para>
        /// </param>
        [Obsolete("Use out overload instead")]
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectPtrLabel")]
        [CLSCompliant(false)]
        public static void GetObjectPtrLabel<T0>([InAttribute, OutAttribute] ref T0 ptr, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute] StringBuilder label)
            where T0 : struct
         { throw new NotImplementedException(); }

        /// <summary>
        /// Retrieve the label of a sync object identified by a pointer
        /// </summary>
        /// <param name="ptr">
        /// <para>
        /// The name of the sync object whose label to retrieve.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// The length of the buffer whose address is in label.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// The address of a variable to receive the length of the object label.
        /// </para>
        /// </param>
        /// <param name="label">
        /// <para>
        /// The address of a string that will receive the object label.
        /// </para>
        /// </param>
        [Obsolete("Use out overload instead")]
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectPtrLabel")]
        [CLSCompliant(false)]
        public static void GetObjectPtrLabel<T0>([InAttribute, OutAttribute] ref T0 ptr, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder label)
            where T0 : struct
         { throw new NotImplementedException(); }

        /// <summary>
        /// Retrieve the label of a sync object identified by a pointer
        /// </summary>
        /// <param name="ptr">
        /// <para>
        /// The name of the sync object whose label to retrieve.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// The length of the buffer whose address is in label.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// The address of a variable to receive the length of the object label.
        /// </para>
        /// </param>
        /// <param name="label">
        /// <para>
        /// The address of a string that will receive the object label.
        /// </para>
        /// </param>
        [Obsolete("Use out overload instead")]
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectPtrLabel")]
        [CLSCompliant(false)]
        public static unsafe void GetObjectPtrLabel<T0>([InAttribute, OutAttribute] ref T0 ptr, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder label)
            where T0 : struct
         { throw new NotImplementedException(); }

        /// <summary>
        /// Return the address of the specified pointer
        /// </summary>
        /// <param name="pname">
        /// <para>
        /// Specifies the array or buffer pointer to be returned. Symbolic constants GL_COLOR_ARRAY_POINTER, GL_EDGE_FLAG_ARRAY_POINTER, GL_FOG_COORD_ARRAY_POINTER, GL_FEEDBACK_BUFFER_POINTER, GL_INDEX_ARRAY_POINTER, GL_NORMAL_ARRAY_POINTER, GL_SECONDARY_COLOR_ARRAY_POINTER, GL_SELECTION_BUFFER_POINTER, GL_TEXTURE_COORD_ARRAY_POINTER, or GL_VERTEX_ARRAY_POINTER are accepted.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the pointer value specified by pname.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetPointerv")]
        public static void GetPointer(OpenTK.Graphics.ES30.All pname, [OutAttribute] IntPtr @params) { throw new NotImplementedException(); }

        /// <summary>
        /// Return the address of the specified pointer
        /// </summary>
        /// <param name="pname">
        /// <para>
        /// Specifies the array or buffer pointer to be returned. Symbolic constants GL_COLOR_ARRAY_POINTER, GL_EDGE_FLAG_ARRAY_POINTER, GL_FOG_COORD_ARRAY_POINTER, GL_FEEDBACK_BUFFER_POINTER, GL_INDEX_ARRAY_POINTER, GL_NORMAL_ARRAY_POINTER, GL_SECONDARY_COLOR_ARRAY_POINTER, GL_SELECTION_BUFFER_POINTER, GL_TEXTURE_COORD_ARRAY_POINTER, or GL_VERTEX_ARRAY_POINTER are accepted.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the pointer value specified by pname.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetPointerv")]
        [CLSCompliant(false)]
        public static void GetPointer<T1>(OpenTK.Graphics.ES30.All pname, [InAttribute, OutAttribute] T1[] @params)
            where T1 : struct
         { throw new NotImplementedException(); }

        /// <summary>
        /// Return the address of the specified pointer
        /// </summary>
        /// <param name="pname">
        /// <para>
        /// Specifies the array or buffer pointer to be returned. Symbolic constants GL_COLOR_ARRAY_POINTER, GL_EDGE_FLAG_ARRAY_POINTER, GL_FOG_COORD_ARRAY_POINTER, GL_FEEDBACK_BUFFER_POINTER, GL_INDEX_ARRAY_POINTER, GL_NORMAL_ARRAY_POINTER, GL_SECONDARY_COLOR_ARRAY_POINTER, GL_SELECTION_BUFFER_POINTER, GL_TEXTURE_COORD_ARRAY_POINTER, or GL_VERTEX_ARRAY_POINTER are accepted.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the pointer value specified by pname.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetPointerv")]
        [CLSCompliant(false)]
        public static void GetPointer<T1>(OpenTK.Graphics.ES30.All pname, [InAttribute, OutAttribute] T1[,] @params)
            where T1 : struct
         { throw new NotImplementedException(); }

        /// <summary>
        /// Return the address of the specified pointer
        /// </summary>
        /// <param name="pname">
        /// <para>
        /// Specifies the array or buffer pointer to be returned. Symbolic constants GL_COLOR_ARRAY_POINTER, GL_EDGE_FLAG_ARRAY_POINTER, GL_FOG_COORD_ARRAY_POINTER, GL_FEEDBACK_BUFFER_POINTER, GL_INDEX_ARRAY_POINTER, GL_NORMAL_ARRAY_POINTER, GL_SECONDARY_COLOR_ARRAY_POINTER, GL_SELECTION_BUFFER_POINTER, GL_TEXTURE_COORD_ARRAY_POINTER, or GL_VERTEX_ARRAY_POINTER are accepted.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the pointer value specified by pname.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetPointerv")]
        [CLSCompliant(false)]
        public static void GetPointer<T1>(OpenTK.Graphics.ES30.All pname, [InAttribute, OutAttribute] T1[,,] @params)
            where T1 : struct
         { throw new NotImplementedException(); }

        /// <summary>
        /// Return the address of the specified pointer
        /// </summary>
        /// <param name="pname">
        /// <para>
        /// Specifies the array or buffer pointer to be returned. Symbolic constants GL_COLOR_ARRAY_POINTER, GL_EDGE_FLAG_ARRAY_POINTER, GL_FOG_COORD_ARRAY_POINTER, GL_FEEDBACK_BUFFER_POINTER, GL_INDEX_ARRAY_POINTER, GL_NORMAL_ARRAY_POINTER, GL_SECONDARY_COLOR_ARRAY_POINTER, GL_SELECTION_BUFFER_POINTER, GL_TEXTURE_COORD_ARRAY_POINTER, or GL_VERTEX_ARRAY_POINTER are accepted.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the pointer value specified by pname.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetPointerv")]
        public static void GetPointer<T1>(OpenTK.Graphics.ES30.All pname, [InAttribute, OutAttribute] ref T1 @params)
            where T1 : struct
         { throw new NotImplementedException(); }

        /// <summary>
        /// Return the address of the specified pointer
        /// </summary>
        /// <param name="pname">
        /// <para>
        /// Specifies the array or buffer pointer to be returned. Symbolic constants GL_COLOR_ARRAY_POINTER, GL_EDGE_FLAG_ARRAY_POINTER, GL_FOG_COORD_ARRAY_POINTER, GL_FEEDBACK_BUFFER_POINTER, GL_INDEX_ARRAY_POINTER, GL_NORMAL_ARRAY_POINTER, GL_SECONDARY_COLOR_ARRAY_POINTER, GL_SELECTION_BUFFER_POINTER, GL_TEXTURE_COORD_ARRAY_POINTER, or GL_VERTEX_ARRAY_POINTER are accepted.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the pointer value specified by pname.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetPointerv")]
        public static void GetPointer(OpenTK.Graphics.ES30.GetPointervPName pname, [OutAttribute] IntPtr @params) { throw new NotImplementedException(); }

        /// <summary>
        /// Return the address of the specified pointer
        /// </summary>
        /// <param name="pname">
        /// <para>
        /// Specifies the array or buffer pointer to be returned. Symbolic constants GL_COLOR_ARRAY_POINTER, GL_EDGE_FLAG_ARRAY_POINTER, GL_FOG_COORD_ARRAY_POINTER, GL_FEEDBACK_BUFFER_POINTER, GL_INDEX_ARRAY_POINTER, GL_NORMAL_ARRAY_POINTER, GL_SECONDARY_COLOR_ARRAY_POINTER, GL_SELECTION_BUFFER_POINTER, GL_TEXTURE_COORD_ARRAY_POINTER, or GL_VERTEX_ARRAY_POINTER are accepted.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the pointer value specified by pname.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetPointerv")]
        [CLSCompliant(false)]
        public static void GetPointer<T1>(OpenTK.Graphics.ES30.GetPointervPName pname, [InAttribute, OutAttribute] T1[] @params)
            where T1 : struct
         { throw new NotImplementedException(); }

        /// <summary>
        /// Return the address of the specified pointer
        /// </summary>
        /// <param name="pname">
        /// <para>
        /// Specifies the array or buffer pointer to be returned. Symbolic constants GL_COLOR_ARRAY_POINTER, GL_EDGE_FLAG_ARRAY_POINTER, GL_FOG_COORD_ARRAY_POINTER, GL_FEEDBACK_BUFFER_POINTER, GL_INDEX_ARRAY_POINTER, GL_NORMAL_ARRAY_POINTER, GL_SECONDARY_COLOR_ARRAY_POINTER, GL_SELECTION_BUFFER_POINTER, GL_TEXTURE_COORD_ARRAY_POINTER, or GL_VERTEX_ARRAY_POINTER are accepted.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the pointer value specified by pname.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetPointerv")]
        [CLSCompliant(false)]
        public static void GetPointer<T1>(OpenTK.Graphics.ES30.GetPointervPName pname, [InAttribute, OutAttribute] T1[,] @params)
            where T1 : struct
         { throw new NotImplementedException(); }

        /// <summary>
        /// Return the address of the specified pointer
        /// </summary>
        /// <param name="pname">
        /// <para>
        /// Specifies the array or buffer pointer to be returned. Symbolic constants GL_COLOR_ARRAY_POINTER, GL_EDGE_FLAG_ARRAY_POINTER, GL_FOG_COORD_ARRAY_POINTER, GL_FEEDBACK_BUFFER_POINTER, GL_INDEX_ARRAY_POINTER, GL_NORMAL_ARRAY_POINTER, GL_SECONDARY_COLOR_ARRAY_POINTER, GL_SELECTION_BUFFER_POINTER, GL_TEXTURE_COORD_ARRAY_POINTER, or GL_VERTEX_ARRAY_POINTER are accepted.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the pointer value specified by pname.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetPointerv")]
        [CLSCompliant(false)]
        public static void GetPointer<T1>(OpenTK.Graphics.ES30.GetPointervPName pname, [InAttribute, OutAttribute] T1[,,] @params)
            where T1 : struct
         { throw new NotImplementedException(); }

        /// <summary>
        /// Return the address of the specified pointer
        /// </summary>
        /// <param name="pname">
        /// <para>
        /// Specifies the array or buffer pointer to be returned. Symbolic constants GL_COLOR_ARRAY_POINTER, GL_EDGE_FLAG_ARRAY_POINTER, GL_FOG_COORD_ARRAY_POINTER, GL_FEEDBACK_BUFFER_POINTER, GL_INDEX_ARRAY_POINTER, GL_NORMAL_ARRAY_POINTER, GL_SECONDARY_COLOR_ARRAY_POINTER, GL_SELECTION_BUFFER_POINTER, GL_TEXTURE_COORD_ARRAY_POINTER, or GL_VERTEX_ARRAY_POINTER are accepted.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the pointer value specified by pname.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetPointerv")]
        public static void GetPointer<T1>(OpenTK.Graphics.ES30.GetPointervPName pname, [InAttribute, OutAttribute] ref T1 @params)
            where T1 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Return a binary representation of a program object's compiled and linked executable source
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the name of a program object whose binary representation to retrieve.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the size of the buffer whose address is given by binary.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the address of a variable to receive the number of bytes written into binary.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address an array into which the GL will return program's binary representation.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetProgramBinary")]
        [CLSCompliant(false)]
        public static void GetProgramBinary(Int32 program, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] out OpenTK.Graphics.ES30.All binaryFormat, [OutAttribute] IntPtr binary) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Return a binary representation of a program object's compiled and linked executable source
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the name of a program object whose binary representation to retrieve.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the size of the buffer whose address is given by binary.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the address of a variable to receive the number of bytes written into binary.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address an array into which the GL will return program's binary representation.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetProgramBinary")]
        [CLSCompliant(false)]
        public static void GetProgramBinary<T4>(Int32 program, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] out OpenTK.Graphics.ES30.All binaryFormat, [InAttribute, OutAttribute] T4[] binary)
            where T4 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Return a binary representation of a program object's compiled and linked executable source
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the name of a program object whose binary representation to retrieve.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the size of the buffer whose address is given by binary.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the address of a variable to receive the number of bytes written into binary.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address an array into which the GL will return program's binary representation.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetProgramBinary")]
        [CLSCompliant(false)]
        public static void GetProgramBinary<T4>(Int32 program, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] out OpenTK.Graphics.ES30.All binaryFormat, [InAttribute, OutAttribute] T4[,] binary)
            where T4 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Return a binary representation of a program object's compiled and linked executable source
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the name of a program object whose binary representation to retrieve.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the size of the buffer whose address is given by binary.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the address of a variable to receive the number of bytes written into binary.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address an array into which the GL will return program's binary representation.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetProgramBinary")]
        [CLSCompliant(false)]
        public static void GetProgramBinary<T4>(Int32 program, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] out OpenTK.Graphics.ES30.All binaryFormat, [InAttribute, OutAttribute] T4[,,] binary)
            where T4 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Return a binary representation of a program object's compiled and linked executable source
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the name of a program object whose binary representation to retrieve.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the size of the buffer whose address is given by binary.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the address of a variable to receive the number of bytes written into binary.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address an array into which the GL will return program's binary representation.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetProgramBinary")]
        [CLSCompliant(false)]
        public static void GetProgramBinary<T4>(Int32 program, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] out OpenTK.Graphics.ES30.All binaryFormat, [InAttribute, OutAttribute] ref T4 binary)
            where T4 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Return a binary representation of a program object's compiled and linked executable source
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the name of a program object whose binary representation to retrieve.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the size of the buffer whose address is given by binary.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the address of a variable to receive the number of bytes written into binary.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address an array into which the GL will return program's binary representation.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetProgramBinary")]
        [CLSCompliant(false)]
        public static unsafe void GetProgramBinary(Int32 program, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] OpenTK.Graphics.ES30.All* binaryFormat, [OutAttribute] IntPtr binary) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Return a binary representation of a program object's compiled and linked executable source
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the name of a program object whose binary representation to retrieve.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the size of the buffer whose address is given by binary.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the address of a variable to receive the number of bytes written into binary.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address an array into which the GL will return program's binary representation.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetProgramBinary")]
        [CLSCompliant(false)]
        public static unsafe void GetProgramBinary<T4>(Int32 program, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] OpenTK.Graphics.ES30.All* binaryFormat, [InAttribute, OutAttribute] T4[] binary)
            where T4 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Return a binary representation of a program object's compiled and linked executable source
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the name of a program object whose binary representation to retrieve.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the size of the buffer whose address is given by binary.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the address of a variable to receive the number of bytes written into binary.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address an array into which the GL will return program's binary representation.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetProgramBinary")]
        [CLSCompliant(false)]
        public static unsafe void GetProgramBinary<T4>(Int32 program, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] OpenTK.Graphics.ES30.All* binaryFormat, [InAttribute, OutAttribute] T4[,] binary)
            where T4 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Return a binary representation of a program object's compiled and linked executable source
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the name of a program object whose binary representation to retrieve.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the size of the buffer whose address is given by binary.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the address of a variable to receive the number of bytes written into binary.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address an array into which the GL will return program's binary representation.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetProgramBinary")]
        [CLSCompliant(false)]
        public static unsafe void GetProgramBinary<T4>(Int32 program, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] OpenTK.Graphics.ES30.All* binaryFormat, [InAttribute, OutAttribute] T4[,,] binary)
            where T4 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Return a binary representation of a program object's compiled and linked executable source
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the name of a program object whose binary representation to retrieve.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the size of the buffer whose address is given by binary.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the address of a variable to receive the number of bytes written into binary.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address an array into which the GL will return program's binary representation.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetProgramBinary")]
        [CLSCompliant(false)]
        public static unsafe void GetProgramBinary<T4>(Int32 program, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] OpenTK.Graphics.ES30.All* binaryFormat, [InAttribute, OutAttribute] ref T4 binary)
            where T4 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Return a binary representation of a program object's compiled and linked executable source
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the name of a program object whose binary representation to retrieve.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the size of the buffer whose address is given by binary.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the address of a variable to receive the number of bytes written into binary.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address an array into which the GL will return program's binary representation.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetProgramBinary")]
        [CLSCompliant(false)]
        public static void GetProgramBinary(UInt32 program, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] out OpenTK.Graphics.ES30.All binaryFormat, [OutAttribute] IntPtr binary) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Return a binary representation of a program object's compiled and linked executable source
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the name of a program object whose binary representation to retrieve.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the size of the buffer whose address is given by binary.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the address of a variable to receive the number of bytes written into binary.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address an array into which the GL will return program's binary representation.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetProgramBinary")]
        [CLSCompliant(false)]
        public static void GetProgramBinary<T4>(UInt32 program, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] out OpenTK.Graphics.ES30.All binaryFormat, [InAttribute, OutAttribute] T4[] binary)
            where T4 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Return a binary representation of a program object's compiled and linked executable source
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the name of a program object whose binary representation to retrieve.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the size of the buffer whose address is given by binary.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the address of a variable to receive the number of bytes written into binary.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address an array into which the GL will return program's binary representation.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetProgramBinary")]
        [CLSCompliant(false)]
        public static void GetProgramBinary<T4>(UInt32 program, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] out OpenTK.Graphics.ES30.All binaryFormat, [InAttribute, OutAttribute] T4[,] binary)
            where T4 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Return a binary representation of a program object's compiled and linked executable source
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the name of a program object whose binary representation to retrieve.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the size of the buffer whose address is given by binary.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the address of a variable to receive the number of bytes written into binary.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address an array into which the GL will return program's binary representation.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetProgramBinary")]
        [CLSCompliant(false)]
        public static void GetProgramBinary<T4>(UInt32 program, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] out OpenTK.Graphics.ES30.All binaryFormat, [InAttribute, OutAttribute] T4[,,] binary)
            where T4 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Return a binary representation of a program object's compiled and linked executable source
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the name of a program object whose binary representation to retrieve.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the size of the buffer whose address is given by binary.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the address of a variable to receive the number of bytes written into binary.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address an array into which the GL will return program's binary representation.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetProgramBinary")]
        [CLSCompliant(false)]
        public static void GetProgramBinary<T4>(UInt32 program, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] out OpenTK.Graphics.ES30.All binaryFormat, [InAttribute, OutAttribute] ref T4 binary)
            where T4 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Return a binary representation of a program object's compiled and linked executable source
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the name of a program object whose binary representation to retrieve.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the size of the buffer whose address is given by binary.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the address of a variable to receive the number of bytes written into binary.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address an array into which the GL will return program's binary representation.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetProgramBinary")]
        [CLSCompliant(false)]
        public static unsafe void GetProgramBinary(UInt32 program, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] OpenTK.Graphics.ES30.All* binaryFormat, [OutAttribute] IntPtr binary) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Return a binary representation of a program object's compiled and linked executable source
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the name of a program object whose binary representation to retrieve.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the size of the buffer whose address is given by binary.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the address of a variable to receive the number of bytes written into binary.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address an array into which the GL will return program's binary representation.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetProgramBinary")]
        [CLSCompliant(false)]
        public static unsafe void GetProgramBinary<T4>(UInt32 program, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] OpenTK.Graphics.ES30.All* binaryFormat, [InAttribute, OutAttribute] T4[] binary)
            where T4 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Return a binary representation of a program object's compiled and linked executable source
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the name of a program object whose binary representation to retrieve.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the size of the buffer whose address is given by binary.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the address of a variable to receive the number of bytes written into binary.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address an array into which the GL will return program's binary representation.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetProgramBinary")]
        [CLSCompliant(false)]
        public static unsafe void GetProgramBinary<T4>(UInt32 program, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] OpenTK.Graphics.ES30.All* binaryFormat, [InAttribute, OutAttribute] T4[,] binary)
            where T4 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Return a binary representation of a program object's compiled and linked executable source
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the name of a program object whose binary representation to retrieve.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the size of the buffer whose address is given by binary.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the address of a variable to receive the number of bytes written into binary.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address an array into which the GL will return program's binary representation.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetProgramBinary")]
        [CLSCompliant(false)]
        public static unsafe void GetProgramBinary<T4>(UInt32 program, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] OpenTK.Graphics.ES30.All* binaryFormat, [InAttribute, OutAttribute] T4[,,] binary)
            where T4 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Return a binary representation of a program object's compiled and linked executable source
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the name of a program object whose binary representation to retrieve.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the size of the buffer whose address is given by binary.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the address of a variable to receive the number of bytes written into binary.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address an array into which the GL will return program's binary representation.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetProgramBinary")]
        [CLSCompliant(false)]
        public static unsafe void GetProgramBinary<T4>(UInt32 program, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] OpenTK.Graphics.ES30.All* binaryFormat, [InAttribute, OutAttribute] ref T4 binary)
            where T4 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Returns the information log for a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object whose information log is to be queried.
        /// </para>
        /// </param>
        /// <param name="maxLength">
        /// <para>
        /// Specifies the size of the character buffer for storing the returned information log.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Returns the length of the string returned in infoLog (excluding the null terminator).
        /// </para>
        /// </param>
        /// <param name="infoLog">
        /// <para>
        /// Specifies an array of characters that is used to return the information log.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetProgramInfoLog")]
        [CLSCompliant(false)]
        public static void GetProgramInfoLog(Int32 program, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder infoLog) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Returns the information log for a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object whose information log is to be queried.
        /// </para>
        /// </param>
        /// <param name="maxLength">
        /// <para>
        /// Specifies the size of the character buffer for storing the returned information log.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Returns the length of the string returned in infoLog (excluding the null terminator).
        /// </para>
        /// </param>
        /// <param name="infoLog">
        /// <para>
        /// Specifies an array of characters that is used to return the information log.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetProgramInfoLog")]
        [CLSCompliant(false)]
        public static unsafe void GetProgramInfoLog(Int32 program, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder infoLog) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Returns the information log for a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object whose information log is to be queried.
        /// </para>
        /// </param>
        /// <param name="maxLength">
        /// <para>
        /// Specifies the size of the character buffer for storing the returned information log.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Returns the length of the string returned in infoLog (excluding the null terminator).
        /// </para>
        /// </param>
        /// <param name="infoLog">
        /// <para>
        /// Specifies an array of characters that is used to return the information log.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetProgramInfoLog")]
        [CLSCompliant(false)]
        public static void GetProgramInfoLog(UInt32 program, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder infoLog) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Returns the information log for a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object whose information log is to be queried.
        /// </para>
        /// </param>
        /// <param name="maxLength">
        /// <para>
        /// Specifies the size of the character buffer for storing the returned information log.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Returns the length of the string returned in infoLog (excluding the null terminator).
        /// </para>
        /// </param>
        /// <param name="infoLog">
        /// <para>
        /// Specifies an array of characters that is used to return the information log.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetProgramInfoLog")]
        [CLSCompliant(false)]
        public static unsafe void GetProgramInfoLog(UInt32 program, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder infoLog) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Returns a parameter from a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the object parameter. Accepted symbolic names are GL_DELETE_STATUS, GL_LINK_STATUS, GL_VALIDATE_STATUS, GL_INFO_LOG_LENGTH, GL_ATTACHED_SHADERS, GL_ACTIVE_ATOMIC_COUNTER_BUFFERS, GL_ACTIVE_ATTRIBUTES, GL_ACTIVE_ATTRIBUTE_MAX_LENGTH, GL_ACTIVE_UNIFORMS, GL_ACTIVE_UNIFORM_BLOCKS, GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH, GL_ACTIVE_UNIFORM_MAX_LENGTH, GL_COMPUTE_WORK_GROUP_SIZE GL_PROGRAM_BINARY_LENGTH, GL_TRANSFORM_FEEDBACK_BUFFER_MODE, GL_TRANSFORM_FEEDBACK_VARYINGS, GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH, GL_GEOMETRY_VERTICES_OUT, GL_GEOMETRY_INPUT_TYPE, and GL_GEOMETRY_OUTPUT_TYPE.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested object parameter.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetProgramiv")]
        [CLSCompliant(false)]
        public static void GetProgram(Int32 program, OpenTK.Graphics.ES30.All pname, [OutAttribute] Int32[] @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Returns a parameter from a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the object parameter. Accepted symbolic names are GL_DELETE_STATUS, GL_LINK_STATUS, GL_VALIDATE_STATUS, GL_INFO_LOG_LENGTH, GL_ATTACHED_SHADERS, GL_ACTIVE_ATOMIC_COUNTER_BUFFERS, GL_ACTIVE_ATTRIBUTES, GL_ACTIVE_ATTRIBUTE_MAX_LENGTH, GL_ACTIVE_UNIFORMS, GL_ACTIVE_UNIFORM_BLOCKS, GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH, GL_ACTIVE_UNIFORM_MAX_LENGTH, GL_COMPUTE_WORK_GROUP_SIZE GL_PROGRAM_BINARY_LENGTH, GL_TRANSFORM_FEEDBACK_BUFFER_MODE, GL_TRANSFORM_FEEDBACK_VARYINGS, GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH, GL_GEOMETRY_VERTICES_OUT, GL_GEOMETRY_INPUT_TYPE, and GL_GEOMETRY_OUTPUT_TYPE.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested object parameter.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetProgramiv")]
        [CLSCompliant(false)]
        public static void GetProgram(Int32 program, OpenTK.Graphics.ES30.All pname, [OutAttribute] out Int32 @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Returns a parameter from a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the object parameter. Accepted symbolic names are GL_DELETE_STATUS, GL_LINK_STATUS, GL_VALIDATE_STATUS, GL_INFO_LOG_LENGTH, GL_ATTACHED_SHADERS, GL_ACTIVE_ATOMIC_COUNTER_BUFFERS, GL_ACTIVE_ATTRIBUTES, GL_ACTIVE_ATTRIBUTE_MAX_LENGTH, GL_ACTIVE_UNIFORMS, GL_ACTIVE_UNIFORM_BLOCKS, GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH, GL_ACTIVE_UNIFORM_MAX_LENGTH, GL_COMPUTE_WORK_GROUP_SIZE GL_PROGRAM_BINARY_LENGTH, GL_TRANSFORM_FEEDBACK_BUFFER_MODE, GL_TRANSFORM_FEEDBACK_VARYINGS, GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH, GL_GEOMETRY_VERTICES_OUT, GL_GEOMETRY_INPUT_TYPE, and GL_GEOMETRY_OUTPUT_TYPE.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested object parameter.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetProgramiv")]
        [CLSCompliant(false)]
        public static unsafe void GetProgram(Int32 program, OpenTK.Graphics.ES30.All pname, [OutAttribute] Int32* @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Returns a parameter from a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the object parameter. Accepted symbolic names are GL_DELETE_STATUS, GL_LINK_STATUS, GL_VALIDATE_STATUS, GL_INFO_LOG_LENGTH, GL_ATTACHED_SHADERS, GL_ACTIVE_ATOMIC_COUNTER_BUFFERS, GL_ACTIVE_ATTRIBUTES, GL_ACTIVE_ATTRIBUTE_MAX_LENGTH, GL_ACTIVE_UNIFORMS, GL_ACTIVE_UNIFORM_BLOCKS, GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH, GL_ACTIVE_UNIFORM_MAX_LENGTH, GL_COMPUTE_WORK_GROUP_SIZE GL_PROGRAM_BINARY_LENGTH, GL_TRANSFORM_FEEDBACK_BUFFER_MODE, GL_TRANSFORM_FEEDBACK_VARYINGS, GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH, GL_GEOMETRY_VERTICES_OUT, GL_GEOMETRY_INPUT_TYPE, and GL_GEOMETRY_OUTPUT_TYPE.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested object parameter.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetProgramiv")]
        [CLSCompliant(false)]
        public static void GetProgram(Int32 program, OpenTK.Graphics.ES30.GetProgramParameterName pname, [OutAttribute] Int32[] @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Returns a parameter from a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the object parameter. Accepted symbolic names are GL_DELETE_STATUS, GL_LINK_STATUS, GL_VALIDATE_STATUS, GL_INFO_LOG_LENGTH, GL_ATTACHED_SHADERS, GL_ACTIVE_ATOMIC_COUNTER_BUFFERS, GL_ACTIVE_ATTRIBUTES, GL_ACTIVE_ATTRIBUTE_MAX_LENGTH, GL_ACTIVE_UNIFORMS, GL_ACTIVE_UNIFORM_BLOCKS, GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH, GL_ACTIVE_UNIFORM_MAX_LENGTH, GL_COMPUTE_WORK_GROUP_SIZE GL_PROGRAM_BINARY_LENGTH, GL_TRANSFORM_FEEDBACK_BUFFER_MODE, GL_TRANSFORM_FEEDBACK_VARYINGS, GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH, GL_GEOMETRY_VERTICES_OUT, GL_GEOMETRY_INPUT_TYPE, and GL_GEOMETRY_OUTPUT_TYPE.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested object parameter.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetProgramiv")]
        [CLSCompliant(false)]
        public static void GetProgram(Int32 program, OpenTK.Graphics.ES30.GetProgramParameterName pname, [OutAttribute] out Int32 @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Returns a parameter from a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the object parameter. Accepted symbolic names are GL_DELETE_STATUS, GL_LINK_STATUS, GL_VALIDATE_STATUS, GL_INFO_LOG_LENGTH, GL_ATTACHED_SHADERS, GL_ACTIVE_ATOMIC_COUNTER_BUFFERS, GL_ACTIVE_ATTRIBUTES, GL_ACTIVE_ATTRIBUTE_MAX_LENGTH, GL_ACTIVE_UNIFORMS, GL_ACTIVE_UNIFORM_BLOCKS, GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH, GL_ACTIVE_UNIFORM_MAX_LENGTH, GL_COMPUTE_WORK_GROUP_SIZE GL_PROGRAM_BINARY_LENGTH, GL_TRANSFORM_FEEDBACK_BUFFER_MODE, GL_TRANSFORM_FEEDBACK_VARYINGS, GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH, GL_GEOMETRY_VERTICES_OUT, GL_GEOMETRY_INPUT_TYPE, and GL_GEOMETRY_OUTPUT_TYPE.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested object parameter.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetProgramiv")]
        [CLSCompliant(false)]
        public static unsafe void GetProgram(Int32 program, OpenTK.Graphics.ES30.GetProgramParameterName pname, [OutAttribute] Int32* @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Returns a parameter from a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the object parameter. Accepted symbolic names are GL_DELETE_STATUS, GL_LINK_STATUS, GL_VALIDATE_STATUS, GL_INFO_LOG_LENGTH, GL_ATTACHED_SHADERS, GL_ACTIVE_ATOMIC_COUNTER_BUFFERS, GL_ACTIVE_ATTRIBUTES, GL_ACTIVE_ATTRIBUTE_MAX_LENGTH, GL_ACTIVE_UNIFORMS, GL_ACTIVE_UNIFORM_BLOCKS, GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH, GL_ACTIVE_UNIFORM_MAX_LENGTH, GL_COMPUTE_WORK_GROUP_SIZE GL_PROGRAM_BINARY_LENGTH, GL_TRANSFORM_FEEDBACK_BUFFER_MODE, GL_TRANSFORM_FEEDBACK_VARYINGS, GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH, GL_GEOMETRY_VERTICES_OUT, GL_GEOMETRY_INPUT_TYPE, and GL_GEOMETRY_OUTPUT_TYPE.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested object parameter.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetProgramiv")]
        [CLSCompliant(false)]
        public static void GetProgram(UInt32 program, OpenTK.Graphics.ES30.All pname, [OutAttribute] Int32[] @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Returns a parameter from a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the object parameter. Accepted symbolic names are GL_DELETE_STATUS, GL_LINK_STATUS, GL_VALIDATE_STATUS, GL_INFO_LOG_LENGTH, GL_ATTACHED_SHADERS, GL_ACTIVE_ATOMIC_COUNTER_BUFFERS, GL_ACTIVE_ATTRIBUTES, GL_ACTIVE_ATTRIBUTE_MAX_LENGTH, GL_ACTIVE_UNIFORMS, GL_ACTIVE_UNIFORM_BLOCKS, GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH, GL_ACTIVE_UNIFORM_MAX_LENGTH, GL_COMPUTE_WORK_GROUP_SIZE GL_PROGRAM_BINARY_LENGTH, GL_TRANSFORM_FEEDBACK_BUFFER_MODE, GL_TRANSFORM_FEEDBACK_VARYINGS, GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH, GL_GEOMETRY_VERTICES_OUT, GL_GEOMETRY_INPUT_TYPE, and GL_GEOMETRY_OUTPUT_TYPE.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested object parameter.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetProgramiv")]
        [CLSCompliant(false)]
        public static void GetProgram(UInt32 program, OpenTK.Graphics.ES30.All pname, [OutAttribute] out Int32 @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Returns a parameter from a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the object parameter. Accepted symbolic names are GL_DELETE_STATUS, GL_LINK_STATUS, GL_VALIDATE_STATUS, GL_INFO_LOG_LENGTH, GL_ATTACHED_SHADERS, GL_ACTIVE_ATOMIC_COUNTER_BUFFERS, GL_ACTIVE_ATTRIBUTES, GL_ACTIVE_ATTRIBUTE_MAX_LENGTH, GL_ACTIVE_UNIFORMS, GL_ACTIVE_UNIFORM_BLOCKS, GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH, GL_ACTIVE_UNIFORM_MAX_LENGTH, GL_COMPUTE_WORK_GROUP_SIZE GL_PROGRAM_BINARY_LENGTH, GL_TRANSFORM_FEEDBACK_BUFFER_MODE, GL_TRANSFORM_FEEDBACK_VARYINGS, GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH, GL_GEOMETRY_VERTICES_OUT, GL_GEOMETRY_INPUT_TYPE, and GL_GEOMETRY_OUTPUT_TYPE.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested object parameter.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetProgramiv")]
        [CLSCompliant(false)]
        public static unsafe void GetProgram(UInt32 program, OpenTK.Graphics.ES30.All pname, [OutAttribute] Int32* @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Returns a parameter from a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the object parameter. Accepted symbolic names are GL_DELETE_STATUS, GL_LINK_STATUS, GL_VALIDATE_STATUS, GL_INFO_LOG_LENGTH, GL_ATTACHED_SHADERS, GL_ACTIVE_ATOMIC_COUNTER_BUFFERS, GL_ACTIVE_ATTRIBUTES, GL_ACTIVE_ATTRIBUTE_MAX_LENGTH, GL_ACTIVE_UNIFORMS, GL_ACTIVE_UNIFORM_BLOCKS, GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH, GL_ACTIVE_UNIFORM_MAX_LENGTH, GL_COMPUTE_WORK_GROUP_SIZE GL_PROGRAM_BINARY_LENGTH, GL_TRANSFORM_FEEDBACK_BUFFER_MODE, GL_TRANSFORM_FEEDBACK_VARYINGS, GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH, GL_GEOMETRY_VERTICES_OUT, GL_GEOMETRY_INPUT_TYPE, and GL_GEOMETRY_OUTPUT_TYPE.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested object parameter.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetProgramiv")]
        [CLSCompliant(false)]
        public static void GetProgram(UInt32 program, OpenTK.Graphics.ES30.GetProgramParameterName pname, [OutAttribute] Int32[] @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Returns a parameter from a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the object parameter. Accepted symbolic names are GL_DELETE_STATUS, GL_LINK_STATUS, GL_VALIDATE_STATUS, GL_INFO_LOG_LENGTH, GL_ATTACHED_SHADERS, GL_ACTIVE_ATOMIC_COUNTER_BUFFERS, GL_ACTIVE_ATTRIBUTES, GL_ACTIVE_ATTRIBUTE_MAX_LENGTH, GL_ACTIVE_UNIFORMS, GL_ACTIVE_UNIFORM_BLOCKS, GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH, GL_ACTIVE_UNIFORM_MAX_LENGTH, GL_COMPUTE_WORK_GROUP_SIZE GL_PROGRAM_BINARY_LENGTH, GL_TRANSFORM_FEEDBACK_BUFFER_MODE, GL_TRANSFORM_FEEDBACK_VARYINGS, GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH, GL_GEOMETRY_VERTICES_OUT, GL_GEOMETRY_INPUT_TYPE, and GL_GEOMETRY_OUTPUT_TYPE.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested object parameter.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetProgramiv")]
        [CLSCompliant(false)]
        public static void GetProgram(UInt32 program, OpenTK.Graphics.ES30.GetProgramParameterName pname, [OutAttribute] out Int32 @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Returns a parameter from a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the object parameter. Accepted symbolic names are GL_DELETE_STATUS, GL_LINK_STATUS, GL_VALIDATE_STATUS, GL_INFO_LOG_LENGTH, GL_ATTACHED_SHADERS, GL_ACTIVE_ATOMIC_COUNTER_BUFFERS, GL_ACTIVE_ATTRIBUTES, GL_ACTIVE_ATTRIBUTE_MAX_LENGTH, GL_ACTIVE_UNIFORMS, GL_ACTIVE_UNIFORM_BLOCKS, GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH, GL_ACTIVE_UNIFORM_MAX_LENGTH, GL_COMPUTE_WORK_GROUP_SIZE GL_PROGRAM_BINARY_LENGTH, GL_TRANSFORM_FEEDBACK_BUFFER_MODE, GL_TRANSFORM_FEEDBACK_VARYINGS, GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH, GL_GEOMETRY_VERTICES_OUT, GL_GEOMETRY_INPUT_TYPE, and GL_GEOMETRY_OUTPUT_TYPE.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested object parameter.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetProgramiv")]
        [CLSCompliant(false)]
        public static unsafe void GetProgram(UInt32 program, OpenTK.Graphics.ES30.GetProgramParameterName pname, [OutAttribute] Int32* @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Return parameters of a query object target
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies a query object target. Must be GL_SAMPLES_PASSED, GL_ANY_SAMPLES_PASSED, GL_ANY_SAMPLES_PASSED_CONSERVATIVE GL_PRIMITIVES_GENERATED, GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN, GL_TIME_ELAPSED, or GL_TIMESTAMP.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a query object target parameter. Accepted values are GL_CURRENT_QUERY or GL_QUERY_COUNTER_BITS.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested data.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetQueryiv")]
        [CLSCompliant(false)]
        public static void GetQuery(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All pname, [OutAttribute] Int32[] @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Return parameters of a query object target
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies a query object target. Must be GL_SAMPLES_PASSED, GL_ANY_SAMPLES_PASSED, GL_ANY_SAMPLES_PASSED_CONSERVATIVE GL_PRIMITIVES_GENERATED, GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN, GL_TIME_ELAPSED, or GL_TIMESTAMP.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a query object target parameter. Accepted values are GL_CURRENT_QUERY or GL_QUERY_COUNTER_BITS.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested data.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetQueryiv")]
        [CLSCompliant(false)]
        public static void GetQuery(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All pname, [OutAttribute] out Int32 @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Return parameters of a query object target
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies a query object target. Must be GL_SAMPLES_PASSED, GL_ANY_SAMPLES_PASSED, GL_ANY_SAMPLES_PASSED_CONSERVATIVE GL_PRIMITIVES_GENERATED, GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN, GL_TIME_ELAPSED, or GL_TIMESTAMP.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a query object target parameter. Accepted values are GL_CURRENT_QUERY or GL_QUERY_COUNTER_BITS.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested data.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetQueryiv")]
        [CLSCompliant(false)]
        public static unsafe void GetQuery(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All pname, [OutAttribute] Int32* @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Return parameters of a query object target
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies a query object target. Must be GL_SAMPLES_PASSED, GL_ANY_SAMPLES_PASSED, GL_ANY_SAMPLES_PASSED_CONSERVATIVE GL_PRIMITIVES_GENERATED, GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN, GL_TIME_ELAPSED, or GL_TIMESTAMP.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a query object target parameter. Accepted values are GL_CURRENT_QUERY or GL_QUERY_COUNTER_BITS.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested data.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetQueryiv")]
        [CLSCompliant(false)]
        public static void GetQuery(OpenTK.Graphics.ES30.QueryTarget target, OpenTK.Graphics.ES30.GetQueryParam pname, [OutAttribute] Int32[] @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Return parameters of a query object target
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies a query object target. Must be GL_SAMPLES_PASSED, GL_ANY_SAMPLES_PASSED, GL_ANY_SAMPLES_PASSED_CONSERVATIVE GL_PRIMITIVES_GENERATED, GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN, GL_TIME_ELAPSED, or GL_TIMESTAMP.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a query object target parameter. Accepted values are GL_CURRENT_QUERY or GL_QUERY_COUNTER_BITS.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested data.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetQueryiv")]
        [CLSCompliant(false)]
        public static void GetQuery(OpenTK.Graphics.ES30.QueryTarget target, OpenTK.Graphics.ES30.GetQueryParam pname, [OutAttribute] out Int32 @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Return parameters of a query object target
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies a query object target. Must be GL_SAMPLES_PASSED, GL_ANY_SAMPLES_PASSED, GL_ANY_SAMPLES_PASSED_CONSERVATIVE GL_PRIMITIVES_GENERATED, GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN, GL_TIME_ELAPSED, or GL_TIMESTAMP.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a query object target parameter. Accepted values are GL_CURRENT_QUERY or GL_QUERY_COUNTER_BITS.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested data.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetQueryiv")]
        [CLSCompliant(false)]
        public static unsafe void GetQuery(OpenTK.Graphics.ES30.QueryTarget target, OpenTK.Graphics.ES30.GetQueryParam pname, [OutAttribute] Int32* @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Return parameters of a query object
        /// </summary>
        /// <param name="id">
        /// <para>
        /// Specifies the name of a query object.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a query object parameter. Accepted values are GL_QUERY_RESULT or GL_QUERY_RESULT_AVAILABLE.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// If a buffer is bound to the GL_QUERY_RESULT_BUFFER target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to GL_QUERY_RESULT_BUFFER, then params is treated as an address in client memory of a variable to receive the resulting data.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetQueryObjectuiv")]
        [CLSCompliant(false)]
        public static void GetQueryObject(Int32 id, OpenTK.Graphics.ES30.All pname, [OutAttribute] Int32[] @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Return parameters of a query object
        /// </summary>
        /// <param name="id">
        /// <para>
        /// Specifies the name of a query object.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a query object parameter. Accepted values are GL_QUERY_RESULT or GL_QUERY_RESULT_AVAILABLE.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// If a buffer is bound to the GL_QUERY_RESULT_BUFFER target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to GL_QUERY_RESULT_BUFFER, then params is treated as an address in client memory of a variable to receive the resulting data.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetQueryObjectuiv")]
        [CLSCompliant(false)]
        public static void GetQueryObject(Int32 id, OpenTK.Graphics.ES30.All pname, [OutAttribute] out Int32 @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Return parameters of a query object
        /// </summary>
        /// <param name="id">
        /// <para>
        /// Specifies the name of a query object.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a query object parameter. Accepted values are GL_QUERY_RESULT or GL_QUERY_RESULT_AVAILABLE.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// If a buffer is bound to the GL_QUERY_RESULT_BUFFER target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to GL_QUERY_RESULT_BUFFER, then params is treated as an address in client memory of a variable to receive the resulting data.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetQueryObjectuiv")]
        [CLSCompliant(false)]
        public static unsafe void GetQueryObject(Int32 id, OpenTK.Graphics.ES30.All pname, [OutAttribute] Int32* @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Return parameters of a query object
        /// </summary>
        /// <param name="id">
        /// <para>
        /// Specifies the name of a query object.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a query object parameter. Accepted values are GL_QUERY_RESULT or GL_QUERY_RESULT_AVAILABLE.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// If a buffer is bound to the GL_QUERY_RESULT_BUFFER target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to GL_QUERY_RESULT_BUFFER, then params is treated as an address in client memory of a variable to receive the resulting data.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetQueryObjectuiv")]
        [CLSCompliant(false)]
        public static void GetQueryObject(Int32 id, OpenTK.Graphics.ES30.GetQueryObjectParam pname, [OutAttribute] Int32[] @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Return parameters of a query object
        /// </summary>
        /// <param name="id">
        /// <para>
        /// Specifies the name of a query object.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a query object parameter. Accepted values are GL_QUERY_RESULT or GL_QUERY_RESULT_AVAILABLE.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// If a buffer is bound to the GL_QUERY_RESULT_BUFFER target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to GL_QUERY_RESULT_BUFFER, then params is treated as an address in client memory of a variable to receive the resulting data.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetQueryObjectuiv")]
        [CLSCompliant(false)]
        public static void GetQueryObject(Int32 id, OpenTK.Graphics.ES30.GetQueryObjectParam pname, [OutAttribute] out Int32 @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Return parameters of a query object
        /// </summary>
        /// <param name="id">
        /// <para>
        /// Specifies the name of a query object.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a query object parameter. Accepted values are GL_QUERY_RESULT or GL_QUERY_RESULT_AVAILABLE.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// If a buffer is bound to the GL_QUERY_RESULT_BUFFER target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to GL_QUERY_RESULT_BUFFER, then params is treated as an address in client memory of a variable to receive the resulting data.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetQueryObjectuiv")]
        [CLSCompliant(false)]
        public static unsafe void GetQueryObject(Int32 id, OpenTK.Graphics.ES30.GetQueryObjectParam pname, [OutAttribute] Int32* @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Return parameters of a query object
        /// </summary>
        /// <param name="id">
        /// <para>
        /// Specifies the name of a query object.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a query object parameter. Accepted values are GL_QUERY_RESULT or GL_QUERY_RESULT_AVAILABLE.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// If a buffer is bound to the GL_QUERY_RESULT_BUFFER target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to GL_QUERY_RESULT_BUFFER, then params is treated as an address in client memory of a variable to receive the resulting data.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetQueryObjectuiv")]
        [CLSCompliant(false)]
        public static void GetQueryObject(UInt32 id, OpenTK.Graphics.ES30.All pname, [OutAttribute] UInt32[] @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Return parameters of a query object
        /// </summary>
        /// <param name="id">
        /// <para>
        /// Specifies the name of a query object.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a query object parameter. Accepted values are GL_QUERY_RESULT or GL_QUERY_RESULT_AVAILABLE.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// If a buffer is bound to the GL_QUERY_RESULT_BUFFER target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to GL_QUERY_RESULT_BUFFER, then params is treated as an address in client memory of a variable to receive the resulting data.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetQueryObjectuiv")]
        [CLSCompliant(false)]
        public static void GetQueryObject(UInt32 id, OpenTK.Graphics.ES30.All pname, [OutAttribute] out UInt32 @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Return parameters of a query object
        /// </summary>
        /// <param name="id">
        /// <para>
        /// Specifies the name of a query object.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a query object parameter. Accepted values are GL_QUERY_RESULT or GL_QUERY_RESULT_AVAILABLE.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// If a buffer is bound to the GL_QUERY_RESULT_BUFFER target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to GL_QUERY_RESULT_BUFFER, then params is treated as an address in client memory of a variable to receive the resulting data.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetQueryObjectuiv")]
        [CLSCompliant(false)]
        public static unsafe void GetQueryObject(UInt32 id, OpenTK.Graphics.ES30.All pname, [OutAttribute] UInt32* @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Return parameters of a query object
        /// </summary>
        /// <param name="id">
        /// <para>
        /// Specifies the name of a query object.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a query object parameter. Accepted values are GL_QUERY_RESULT or GL_QUERY_RESULT_AVAILABLE.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// If a buffer is bound to the GL_QUERY_RESULT_BUFFER target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to GL_QUERY_RESULT_BUFFER, then params is treated as an address in client memory of a variable to receive the resulting data.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetQueryObjectuiv")]
        [CLSCompliant(false)]
        public static void GetQueryObject(UInt32 id, OpenTK.Graphics.ES30.GetQueryObjectParam pname, [OutAttribute] UInt32[] @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Return parameters of a query object
        /// </summary>
        /// <param name="id">
        /// <para>
        /// Specifies the name of a query object.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a query object parameter. Accepted values are GL_QUERY_RESULT or GL_QUERY_RESULT_AVAILABLE.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// If a buffer is bound to the GL_QUERY_RESULT_BUFFER target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to GL_QUERY_RESULT_BUFFER, then params is treated as an address in client memory of a variable to receive the resulting data.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetQueryObjectuiv")]
        [CLSCompliant(false)]
        public static void GetQueryObject(UInt32 id, OpenTK.Graphics.ES30.GetQueryObjectParam pname, [OutAttribute] out UInt32 @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Return parameters of a query object
        /// </summary>
        /// <param name="id">
        /// <para>
        /// Specifies the name of a query object.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a query object parameter. Accepted values are GL_QUERY_RESULT or GL_QUERY_RESULT_AVAILABLE.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// If a buffer is bound to the GL_QUERY_RESULT_BUFFER target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to GL_QUERY_RESULT_BUFFER, then params is treated as an address in client memory of a variable to receive the resulting data.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetQueryObjectuiv")]
        [CLSCompliant(false)]
        public static unsafe void GetQueryObject(UInt32 id, OpenTK.Graphics.ES30.GetQueryObjectParam pname, [OutAttribute] UInt32* @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Retrieve information about a bound renderbuffer object
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target of the query operation. target must be GL_RENDERBUFFER.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the parameter whose value to retrieve from the renderbuffer bound to target.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Specifies the address of an array to receive the value of the queried parameter.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetRenderbufferParameteriv")]
        [CLSCompliant(false)]
        public static void GetRenderbufferParameter(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All pname, [OutAttribute] Int32[] @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Retrieve information about a bound renderbuffer object
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target of the query operation. target must be GL_RENDERBUFFER.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the parameter whose value to retrieve from the renderbuffer bound to target.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Specifies the address of an array to receive the value of the queried parameter.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetRenderbufferParameteriv")]
        [CLSCompliant(false)]
        public static void GetRenderbufferParameter(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All pname, [OutAttribute] out Int32 @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Retrieve information about a bound renderbuffer object
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target of the query operation. target must be GL_RENDERBUFFER.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the parameter whose value to retrieve from the renderbuffer bound to target.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Specifies the address of an array to receive the value of the queried parameter.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetRenderbufferParameteriv")]
        [CLSCompliant(false)]
        public static unsafe void GetRenderbufferParameter(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All pname, [OutAttribute] Int32* @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Retrieve information about a bound renderbuffer object
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target of the query operation. target must be GL_RENDERBUFFER.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the parameter whose value to retrieve from the renderbuffer bound to target.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Specifies the address of an array to receive the value of the queried parameter.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetRenderbufferParameteriv")]
        [CLSCompliant(false)]
        public static void GetRenderbufferParameter(OpenTK.Graphics.ES30.RenderbufferTarget target, OpenTK.Graphics.ES30.RenderbufferParameterName pname, [OutAttribute] Int32[] @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Retrieve information about a bound renderbuffer object
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target of the query operation. target must be GL_RENDERBUFFER.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the parameter whose value to retrieve from the renderbuffer bound to target.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Specifies the address of an array to receive the value of the queried parameter.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetRenderbufferParameteriv")]
        [CLSCompliant(false)]
        public static void GetRenderbufferParameter(OpenTK.Graphics.ES30.RenderbufferTarget target, OpenTK.Graphics.ES30.RenderbufferParameterName pname, [OutAttribute] out Int32 @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Retrieve information about a bound renderbuffer object
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target of the query operation. target must be GL_RENDERBUFFER.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the parameter whose value to retrieve from the renderbuffer bound to target.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Specifies the address of an array to receive the value of the queried parameter.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetRenderbufferParameteriv")]
        [CLSCompliant(false)]
        public static unsafe void GetRenderbufferParameter(OpenTK.Graphics.ES30.RenderbufferTarget target, OpenTK.Graphics.ES30.RenderbufferParameterName pname, [OutAttribute] Int32* @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Return sampler parameter values
        /// </summary>
        /// <param name="sampler">
        /// <para>
        /// Specifies name of the sampler object from which to retrieve parameters.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a sampler parameter. GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, GL_TEXTURE_LOD_BIAS, GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, GL_TEXTURE_WRAP_R, GL_TEXTURE_BORDER_COLOR, GL_TEXTURE_COMPARE_MODE, and GL_TEXTURE_COMPARE_FUNC are accepted.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the sampler parameters.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetSamplerParameterfv")]
        [CLSCompliant(false)]
        public static void GetSamplerParameter(Int32 sampler, OpenTK.Graphics.ES30.All pname, [OutAttribute] Single[] @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Return sampler parameter values
        /// </summary>
        /// <param name="sampler">
        /// <para>
        /// Specifies name of the sampler object from which to retrieve parameters.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a sampler parameter. GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, GL_TEXTURE_LOD_BIAS, GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, GL_TEXTURE_WRAP_R, GL_TEXTURE_BORDER_COLOR, GL_TEXTURE_COMPARE_MODE, and GL_TEXTURE_COMPARE_FUNC are accepted.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the sampler parameters.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetSamplerParameterfv")]
        [CLSCompliant(false)]
        public static void GetSamplerParameter(Int32 sampler, OpenTK.Graphics.ES30.All pname, [OutAttribute] out Single @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Return sampler parameter values
        /// </summary>
        /// <param name="sampler">
        /// <para>
        /// Specifies name of the sampler object from which to retrieve parameters.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a sampler parameter. GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, GL_TEXTURE_LOD_BIAS, GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, GL_TEXTURE_WRAP_R, GL_TEXTURE_BORDER_COLOR, GL_TEXTURE_COMPARE_MODE, and GL_TEXTURE_COMPARE_FUNC are accepted.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the sampler parameters.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetSamplerParameterfv")]
        [CLSCompliant(false)]
        public static unsafe void GetSamplerParameter(Int32 sampler, OpenTK.Graphics.ES30.All pname, [OutAttribute] Single* @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Return sampler parameter values
        /// </summary>
        /// <param name="sampler">
        /// <para>
        /// Specifies name of the sampler object from which to retrieve parameters.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a sampler parameter. GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, GL_TEXTURE_LOD_BIAS, GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, GL_TEXTURE_WRAP_R, GL_TEXTURE_BORDER_COLOR, GL_TEXTURE_COMPARE_MODE, and GL_TEXTURE_COMPARE_FUNC are accepted.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the sampler parameters.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetSamplerParameterfv")]
        [CLSCompliant(false)]
        public static void GetSamplerParameter(Int32 sampler, OpenTK.Graphics.ES30.SamplerParameterName pname, [OutAttribute] Single[] @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Return sampler parameter values
        /// </summary>
        /// <param name="sampler">
        /// <para>
        /// Specifies name of the sampler object from which to retrieve parameters.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a sampler parameter. GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, GL_TEXTURE_LOD_BIAS, GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, GL_TEXTURE_WRAP_R, GL_TEXTURE_BORDER_COLOR, GL_TEXTURE_COMPARE_MODE, and GL_TEXTURE_COMPARE_FUNC are accepted.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the sampler parameters.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetSamplerParameterfv")]
        [CLSCompliant(false)]
        public static void GetSamplerParameter(Int32 sampler, OpenTK.Graphics.ES30.SamplerParameterName pname, [OutAttribute] out Single @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Return sampler parameter values
        /// </summary>
        /// <param name="sampler">
        /// <para>
        /// Specifies name of the sampler object from which to retrieve parameters.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a sampler parameter. GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, GL_TEXTURE_LOD_BIAS, GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, GL_TEXTURE_WRAP_R, GL_TEXTURE_BORDER_COLOR, GL_TEXTURE_COMPARE_MODE, and GL_TEXTURE_COMPARE_FUNC are accepted.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the sampler parameters.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetSamplerParameterfv")]
        [CLSCompliant(false)]
        public static unsafe void GetSamplerParameter(Int32 sampler, OpenTK.Graphics.ES30.SamplerParameterName pname, [OutAttribute] Single* @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Return sampler parameter values
        /// </summary>
        /// <param name="sampler">
        /// <para>
        /// Specifies name of the sampler object from which to retrieve parameters.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a sampler parameter. GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, GL_TEXTURE_LOD_BIAS, GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, GL_TEXTURE_WRAP_R, GL_TEXTURE_BORDER_COLOR, GL_TEXTURE_COMPARE_MODE, and GL_TEXTURE_COMPARE_FUNC are accepted.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the sampler parameters.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetSamplerParameterfv")]
        [CLSCompliant(false)]
        public static void GetSamplerParameter(UInt32 sampler, OpenTK.Graphics.ES30.All pname, [OutAttribute] Single[] @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Return sampler parameter values
        /// </summary>
        /// <param name="sampler">
        /// <para>
        /// Specifies name of the sampler object from which to retrieve parameters.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a sampler parameter. GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, GL_TEXTURE_LOD_BIAS, GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, GL_TEXTURE_WRAP_R, GL_TEXTURE_BORDER_COLOR, GL_TEXTURE_COMPARE_MODE, and GL_TEXTURE_COMPARE_FUNC are accepted.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the sampler parameters.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetSamplerParameterfv")]
        [CLSCompliant(false)]
        public static void GetSamplerParameter(UInt32 sampler, OpenTK.Graphics.ES30.All pname, [OutAttribute] out Single @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Return sampler parameter values
        /// </summary>
        /// <param name="sampler">
        /// <para>
        /// Specifies name of the sampler object from which to retrieve parameters.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a sampler parameter. GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, GL_TEXTURE_LOD_BIAS, GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, GL_TEXTURE_WRAP_R, GL_TEXTURE_BORDER_COLOR, GL_TEXTURE_COMPARE_MODE, and GL_TEXTURE_COMPARE_FUNC are accepted.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the sampler parameters.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetSamplerParameterfv")]
        [CLSCompliant(false)]
        public static unsafe void GetSamplerParameter(UInt32 sampler, OpenTK.Graphics.ES30.All pname, [OutAttribute] Single* @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Return sampler parameter values
        /// </summary>
        /// <param name="sampler">
        /// <para>
        /// Specifies name of the sampler object from which to retrieve parameters.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a sampler parameter. GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, GL_TEXTURE_LOD_BIAS, GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, GL_TEXTURE_WRAP_R, GL_TEXTURE_BORDER_COLOR, GL_TEXTURE_COMPARE_MODE, and GL_TEXTURE_COMPARE_FUNC are accepted.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the sampler parameters.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetSamplerParameterfv")]
        [CLSCompliant(false)]
        public static void GetSamplerParameter(UInt32 sampler, OpenTK.Graphics.ES30.SamplerParameterName pname, [OutAttribute] Single[] @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Return sampler parameter values
        /// </summary>
        /// <param name="sampler">
        /// <para>
        /// Specifies name of the sampler object from which to retrieve parameters.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a sampler parameter. GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, GL_TEXTURE_LOD_BIAS, GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, GL_TEXTURE_WRAP_R, GL_TEXTURE_BORDER_COLOR, GL_TEXTURE_COMPARE_MODE, and GL_TEXTURE_COMPARE_FUNC are accepted.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the sampler parameters.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetSamplerParameterfv")]
        [CLSCompliant(false)]
        public static void GetSamplerParameter(UInt32 sampler, OpenTK.Graphics.ES30.SamplerParameterName pname, [OutAttribute] out Single @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Return sampler parameter values
        /// </summary>
        /// <param name="sampler">
        /// <para>
        /// Specifies name of the sampler object from which to retrieve parameters.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a sampler parameter. GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, GL_TEXTURE_LOD_BIAS, GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, GL_TEXTURE_WRAP_R, GL_TEXTURE_BORDER_COLOR, GL_TEXTURE_COMPARE_MODE, and GL_TEXTURE_COMPARE_FUNC are accepted.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the sampler parameters.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetSamplerParameterfv")]
        [CLSCompliant(false)]
        public static unsafe void GetSamplerParameter(UInt32 sampler, OpenTK.Graphics.ES30.SamplerParameterName pname, [OutAttribute] Single* @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Return sampler parameter values
        /// </summary>
        /// <param name="sampler">
        /// <para>
        /// Specifies name of the sampler object from which to retrieve parameters.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a sampler parameter. GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, GL_TEXTURE_LOD_BIAS, GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, GL_TEXTURE_WRAP_R, GL_TEXTURE_BORDER_COLOR, GL_TEXTURE_COMPARE_MODE, and GL_TEXTURE_COMPARE_FUNC are accepted.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the sampler parameters.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetSamplerParameteriv")]
        [CLSCompliant(false)]
        public static void GetSamplerParameter(Int32 sampler, OpenTK.Graphics.ES30.All pname, [OutAttribute] Int32[] @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Return sampler parameter values
        /// </summary>
        /// <param name="sampler">
        /// <para>
        /// Specifies name of the sampler object from which to retrieve parameters.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a sampler parameter. GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, GL_TEXTURE_LOD_BIAS, GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, GL_TEXTURE_WRAP_R, GL_TEXTURE_BORDER_COLOR, GL_TEXTURE_COMPARE_MODE, and GL_TEXTURE_COMPARE_FUNC are accepted.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the sampler parameters.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetSamplerParameteriv")]
        [CLSCompliant(false)]
        public static void GetSamplerParameter(Int32 sampler, OpenTK.Graphics.ES30.All pname, [OutAttribute] out Int32 @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Return sampler parameter values
        /// </summary>
        /// <param name="sampler">
        /// <para>
        /// Specifies name of the sampler object from which to retrieve parameters.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a sampler parameter. GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, GL_TEXTURE_LOD_BIAS, GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, GL_TEXTURE_WRAP_R, GL_TEXTURE_BORDER_COLOR, GL_TEXTURE_COMPARE_MODE, and GL_TEXTURE_COMPARE_FUNC are accepted.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the sampler parameters.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetSamplerParameteriv")]
        [CLSCompliant(false)]
        public static unsafe void GetSamplerParameter(Int32 sampler, OpenTK.Graphics.ES30.All pname, [OutAttribute] Int32* @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Return sampler parameter values
        /// </summary>
        /// <param name="sampler">
        /// <para>
        /// Specifies name of the sampler object from which to retrieve parameters.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a sampler parameter. GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, GL_TEXTURE_LOD_BIAS, GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, GL_TEXTURE_WRAP_R, GL_TEXTURE_BORDER_COLOR, GL_TEXTURE_COMPARE_MODE, and GL_TEXTURE_COMPARE_FUNC are accepted.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the sampler parameters.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetSamplerParameteriv")]
        [CLSCompliant(false)]
        public static void GetSamplerParameter(Int32 sampler, OpenTK.Graphics.ES30.SamplerParameterName pname, [OutAttribute] Int32[] @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Return sampler parameter values
        /// </summary>
        /// <param name="sampler">
        /// <para>
        /// Specifies name of the sampler object from which to retrieve parameters.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a sampler parameter. GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, GL_TEXTURE_LOD_BIAS, GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, GL_TEXTURE_WRAP_R, GL_TEXTURE_BORDER_COLOR, GL_TEXTURE_COMPARE_MODE, and GL_TEXTURE_COMPARE_FUNC are accepted.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the sampler parameters.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetSamplerParameteriv")]
        [CLSCompliant(false)]
        public static void GetSamplerParameter(Int32 sampler, OpenTK.Graphics.ES30.SamplerParameterName pname, [OutAttribute] out Int32 @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Return sampler parameter values
        /// </summary>
        /// <param name="sampler">
        /// <para>
        /// Specifies name of the sampler object from which to retrieve parameters.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a sampler parameter. GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, GL_TEXTURE_LOD_BIAS, GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, GL_TEXTURE_WRAP_R, GL_TEXTURE_BORDER_COLOR, GL_TEXTURE_COMPARE_MODE, and GL_TEXTURE_COMPARE_FUNC are accepted.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the sampler parameters.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetSamplerParameteriv")]
        [CLSCompliant(false)]
        public static unsafe void GetSamplerParameter(Int32 sampler, OpenTK.Graphics.ES30.SamplerParameterName pname, [OutAttribute] Int32* @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Return sampler parameter values
        /// </summary>
        /// <param name="sampler">
        /// <para>
        /// Specifies name of the sampler object from which to retrieve parameters.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a sampler parameter. GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, GL_TEXTURE_LOD_BIAS, GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, GL_TEXTURE_WRAP_R, GL_TEXTURE_BORDER_COLOR, GL_TEXTURE_COMPARE_MODE, and GL_TEXTURE_COMPARE_FUNC are accepted.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the sampler parameters.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetSamplerParameteriv")]
        [CLSCompliant(false)]
        public static void GetSamplerParameter(UInt32 sampler, OpenTK.Graphics.ES30.All pname, [OutAttribute] Int32[] @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Return sampler parameter values
        /// </summary>
        /// <param name="sampler">
        /// <para>
        /// Specifies name of the sampler object from which to retrieve parameters.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a sampler parameter. GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, GL_TEXTURE_LOD_BIAS, GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, GL_TEXTURE_WRAP_R, GL_TEXTURE_BORDER_COLOR, GL_TEXTURE_COMPARE_MODE, and GL_TEXTURE_COMPARE_FUNC are accepted.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the sampler parameters.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetSamplerParameteriv")]
        [CLSCompliant(false)]
        public static void GetSamplerParameter(UInt32 sampler, OpenTK.Graphics.ES30.All pname, [OutAttribute] out Int32 @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Return sampler parameter values
        /// </summary>
        /// <param name="sampler">
        /// <para>
        /// Specifies name of the sampler object from which to retrieve parameters.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a sampler parameter. GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, GL_TEXTURE_LOD_BIAS, GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, GL_TEXTURE_WRAP_R, GL_TEXTURE_BORDER_COLOR, GL_TEXTURE_COMPARE_MODE, and GL_TEXTURE_COMPARE_FUNC are accepted.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the sampler parameters.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetSamplerParameteriv")]
        [CLSCompliant(false)]
        public static unsafe void GetSamplerParameter(UInt32 sampler, OpenTK.Graphics.ES30.All pname, [OutAttribute] Int32* @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Return sampler parameter values
        /// </summary>
        /// <param name="sampler">
        /// <para>
        /// Specifies name of the sampler object from which to retrieve parameters.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a sampler parameter. GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, GL_TEXTURE_LOD_BIAS, GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, GL_TEXTURE_WRAP_R, GL_TEXTURE_BORDER_COLOR, GL_TEXTURE_COMPARE_MODE, and GL_TEXTURE_COMPARE_FUNC are accepted.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the sampler parameters.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetSamplerParameteriv")]
        [CLSCompliant(false)]
        public static void GetSamplerParameter(UInt32 sampler, OpenTK.Graphics.ES30.SamplerParameterName pname, [OutAttribute] Int32[] @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Return sampler parameter values
        /// </summary>
        /// <param name="sampler">
        /// <para>
        /// Specifies name of the sampler object from which to retrieve parameters.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a sampler parameter. GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, GL_TEXTURE_LOD_BIAS, GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, GL_TEXTURE_WRAP_R, GL_TEXTURE_BORDER_COLOR, GL_TEXTURE_COMPARE_MODE, and GL_TEXTURE_COMPARE_FUNC are accepted.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the sampler parameters.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetSamplerParameteriv")]
        [CLSCompliant(false)]
        public static void GetSamplerParameter(UInt32 sampler, OpenTK.Graphics.ES30.SamplerParameterName pname, [OutAttribute] out Int32 @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Return sampler parameter values
        /// </summary>
        /// <param name="sampler">
        /// <para>
        /// Specifies name of the sampler object from which to retrieve parameters.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a sampler parameter. GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, GL_TEXTURE_LOD_BIAS, GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, GL_TEXTURE_WRAP_R, GL_TEXTURE_BORDER_COLOR, GL_TEXTURE_COMPARE_MODE, and GL_TEXTURE_COMPARE_FUNC are accepted.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the sampler parameters.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetSamplerParameteriv")]
        [CLSCompliant(false)]
        public static unsafe void GetSamplerParameter(UInt32 sampler, OpenTK.Graphics.ES30.SamplerParameterName pname, [OutAttribute] Int32* @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Returns the information log for a shader object
        /// </summary>
        /// <param name="shader">
        /// <para>
        /// Specifies the shader object whose information log is to be queried.
        /// </para>
        /// </param>
        /// <param name="maxLength">
        /// <para>
        /// Specifies the size of the character buffer for storing the returned information log.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Returns the length of the string returned in infoLog (excluding the null terminator).
        /// </para>
        /// </param>
        /// <param name="infoLog">
        /// <para>
        /// Specifies an array of characters that is used to return the information log.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderInfoLog")]
        [CLSCompliant(false)]
        public static void GetShaderInfoLog(Int32 shader, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder infoLog) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Returns the information log for a shader object
        /// </summary>
        /// <param name="shader">
        /// <para>
        /// Specifies the shader object whose information log is to be queried.
        /// </para>
        /// </param>
        /// <param name="maxLength">
        /// <para>
        /// Specifies the size of the character buffer for storing the returned information log.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Returns the length of the string returned in infoLog (excluding the null terminator).
        /// </para>
        /// </param>
        /// <param name="infoLog">
        /// <para>
        /// Specifies an array of characters that is used to return the information log.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderInfoLog")]
        [CLSCompliant(false)]
        public static unsafe void GetShaderInfoLog(Int32 shader, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder infoLog) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Returns the information log for a shader object
        /// </summary>
        /// <param name="shader">
        /// <para>
        /// Specifies the shader object whose information log is to be queried.
        /// </para>
        /// </param>
        /// <param name="maxLength">
        /// <para>
        /// Specifies the size of the character buffer for storing the returned information log.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Returns the length of the string returned in infoLog (excluding the null terminator).
        /// </para>
        /// </param>
        /// <param name="infoLog">
        /// <para>
        /// Specifies an array of characters that is used to return the information log.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderInfoLog")]
        [CLSCompliant(false)]
        public static void GetShaderInfoLog(UInt32 shader, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder infoLog) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Returns the information log for a shader object
        /// </summary>
        /// <param name="shader">
        /// <para>
        /// Specifies the shader object whose information log is to be queried.
        /// </para>
        /// </param>
        /// <param name="maxLength">
        /// <para>
        /// Specifies the size of the character buffer for storing the returned information log.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Returns the length of the string returned in infoLog (excluding the null terminator).
        /// </para>
        /// </param>
        /// <param name="infoLog">
        /// <para>
        /// Specifies an array of characters that is used to return the information log.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderInfoLog")]
        [CLSCompliant(false)]
        public static unsafe void GetShaderInfoLog(UInt32 shader, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder infoLog) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Returns a parameter from a shader object
        /// </summary>
        /// <param name="shader">
        /// <para>
        /// Specifies the shader object to be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the object parameter. Accepted symbolic names are GL_SHADER_TYPE, GL_DELETE_STATUS, GL_COMPILE_STATUS, GL_INFO_LOG_LENGTH, GL_SHADER_SOURCE_LENGTH.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested object parameter.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderiv")]
        [CLSCompliant(false)]
        public static void GetShader(Int32 shader, OpenTK.Graphics.ES30.All pname, [OutAttribute] Int32[] @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Returns a parameter from a shader object
        /// </summary>
        /// <param name="shader">
        /// <para>
        /// Specifies the shader object to be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the object parameter. Accepted symbolic names are GL_SHADER_TYPE, GL_DELETE_STATUS, GL_COMPILE_STATUS, GL_INFO_LOG_LENGTH, GL_SHADER_SOURCE_LENGTH.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested object parameter.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderiv")]
        [CLSCompliant(false)]
        public static void GetShader(Int32 shader, OpenTK.Graphics.ES30.All pname, [OutAttribute] out Int32 @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Returns a parameter from a shader object
        /// </summary>
        /// <param name="shader">
        /// <para>
        /// Specifies the shader object to be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the object parameter. Accepted symbolic names are GL_SHADER_TYPE, GL_DELETE_STATUS, GL_COMPILE_STATUS, GL_INFO_LOG_LENGTH, GL_SHADER_SOURCE_LENGTH.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested object parameter.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderiv")]
        [CLSCompliant(false)]
        public static unsafe void GetShader(Int32 shader, OpenTK.Graphics.ES30.All pname, [OutAttribute] Int32* @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Returns a parameter from a shader object
        /// </summary>
        /// <param name="shader">
        /// <para>
        /// Specifies the shader object to be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the object parameter. Accepted symbolic names are GL_SHADER_TYPE, GL_DELETE_STATUS, GL_COMPILE_STATUS, GL_INFO_LOG_LENGTH, GL_SHADER_SOURCE_LENGTH.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested object parameter.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderiv")]
        [CLSCompliant(false)]
        public static void GetShader(Int32 shader, OpenTK.Graphics.ES30.ShaderParameter pname, [OutAttribute] Int32[] @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Returns a parameter from a shader object
        /// </summary>
        /// <param name="shader">
        /// <para>
        /// Specifies the shader object to be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the object parameter. Accepted symbolic names are GL_SHADER_TYPE, GL_DELETE_STATUS, GL_COMPILE_STATUS, GL_INFO_LOG_LENGTH, GL_SHADER_SOURCE_LENGTH.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested object parameter.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderiv")]
        [CLSCompliant(false)]
        public static void GetShader(Int32 shader, OpenTK.Graphics.ES30.ShaderParameter pname, [OutAttribute] out Int32 @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Returns a parameter from a shader object
        /// </summary>
        /// <param name="shader">
        /// <para>
        /// Specifies the shader object to be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the object parameter. Accepted symbolic names are GL_SHADER_TYPE, GL_DELETE_STATUS, GL_COMPILE_STATUS, GL_INFO_LOG_LENGTH, GL_SHADER_SOURCE_LENGTH.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested object parameter.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderiv")]
        [CLSCompliant(false)]
        public static unsafe void GetShader(Int32 shader, OpenTK.Graphics.ES30.ShaderParameter pname, [OutAttribute] Int32* @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Returns a parameter from a shader object
        /// </summary>
        /// <param name="shader">
        /// <para>
        /// Specifies the shader object to be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the object parameter. Accepted symbolic names are GL_SHADER_TYPE, GL_DELETE_STATUS, GL_COMPILE_STATUS, GL_INFO_LOG_LENGTH, GL_SHADER_SOURCE_LENGTH.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested object parameter.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderiv")]
        [CLSCompliant(false)]
        public static void GetShader(UInt32 shader, OpenTK.Graphics.ES30.All pname, [OutAttribute] Int32[] @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Returns a parameter from a shader object
        /// </summary>
        /// <param name="shader">
        /// <para>
        /// Specifies the shader object to be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the object parameter. Accepted symbolic names are GL_SHADER_TYPE, GL_DELETE_STATUS, GL_COMPILE_STATUS, GL_INFO_LOG_LENGTH, GL_SHADER_SOURCE_LENGTH.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested object parameter.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderiv")]
        [CLSCompliant(false)]
        public static void GetShader(UInt32 shader, OpenTK.Graphics.ES30.All pname, [OutAttribute] out Int32 @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Returns a parameter from a shader object
        /// </summary>
        /// <param name="shader">
        /// <para>
        /// Specifies the shader object to be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the object parameter. Accepted symbolic names are GL_SHADER_TYPE, GL_DELETE_STATUS, GL_COMPILE_STATUS, GL_INFO_LOG_LENGTH, GL_SHADER_SOURCE_LENGTH.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested object parameter.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderiv")]
        [CLSCompliant(false)]
        public static unsafe void GetShader(UInt32 shader, OpenTK.Graphics.ES30.All pname, [OutAttribute] Int32* @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Returns a parameter from a shader object
        /// </summary>
        /// <param name="shader">
        /// <para>
        /// Specifies the shader object to be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the object parameter. Accepted symbolic names are GL_SHADER_TYPE, GL_DELETE_STATUS, GL_COMPILE_STATUS, GL_INFO_LOG_LENGTH, GL_SHADER_SOURCE_LENGTH.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested object parameter.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderiv")]
        [CLSCompliant(false)]
        public static void GetShader(UInt32 shader, OpenTK.Graphics.ES30.ShaderParameter pname, [OutAttribute] Int32[] @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Returns a parameter from a shader object
        /// </summary>
        /// <param name="shader">
        /// <para>
        /// Specifies the shader object to be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the object parameter. Accepted symbolic names are GL_SHADER_TYPE, GL_DELETE_STATUS, GL_COMPILE_STATUS, GL_INFO_LOG_LENGTH, GL_SHADER_SOURCE_LENGTH.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested object parameter.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderiv")]
        [CLSCompliant(false)]
        public static void GetShader(UInt32 shader, OpenTK.Graphics.ES30.ShaderParameter pname, [OutAttribute] out Int32 @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Returns a parameter from a shader object
        /// </summary>
        /// <param name="shader">
        /// <para>
        /// Specifies the shader object to be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the object parameter. Accepted symbolic names are GL_SHADER_TYPE, GL_DELETE_STATUS, GL_COMPILE_STATUS, GL_INFO_LOG_LENGTH, GL_SHADER_SOURCE_LENGTH.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested object parameter.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderiv")]
        [CLSCompliant(false)]
        public static unsafe void GetShader(UInt32 shader, OpenTK.Graphics.ES30.ShaderParameter pname, [OutAttribute] Int32* @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Retrieve the range and precision for numeric formats supported by the shader compiler
        /// </summary>
        /// <param name="shaderType">
        /// <para>
        /// Specifies the type of shader whose precision to query. shaderType must be GL_VERTEX_SHADER or GL_FRAGMENT_SHADER.
        /// </para>
        /// </param>
        /// <param name="precisionType">
        /// <para>
        /// Specifies the numeric format whose precision and range to query.
        /// </para>
        /// </param>
        /// <param name="range">
        /// <para>
        /// Specifies the address of array of two integers into which encodings of the implementation's numeric range are returned.
        /// </para>
        /// </param>
        /// <param name="precision">
        /// <para>
        /// Specifies the address of an integer into which the numeric precision of the implementation is written.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderPrecisionFormat")]
        [CLSCompliant(false)]
        public static void GetShaderPrecisionFormat(OpenTK.Graphics.ES30.All shadertype, OpenTK.Graphics.ES30.All precisiontype, [OutAttribute] Int32[] range, [OutAttribute] Int32[] precision) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Retrieve the range and precision for numeric formats supported by the shader compiler
        /// </summary>
        /// <param name="shaderType">
        /// <para>
        /// Specifies the type of shader whose precision to query. shaderType must be GL_VERTEX_SHADER or GL_FRAGMENT_SHADER.
        /// </para>
        /// </param>
        /// <param name="precisionType">
        /// <para>
        /// Specifies the numeric format whose precision and range to query.
        /// </para>
        /// </param>
        /// <param name="range">
        /// <para>
        /// Specifies the address of array of two integers into which encodings of the implementation's numeric range are returned.
        /// </para>
        /// </param>
        /// <param name="precision">
        /// <para>
        /// Specifies the address of an integer into which the numeric precision of the implementation is written.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderPrecisionFormat")]
        [CLSCompliant(false)]
        public static void GetShaderPrecisionFormat(OpenTK.Graphics.ES30.All shadertype, OpenTK.Graphics.ES30.All precisiontype, [OutAttribute] out Int32 range, [OutAttribute] out Int32 precision) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Retrieve the range and precision for numeric formats supported by the shader compiler
        /// </summary>
        /// <param name="shaderType">
        /// <para>
        /// Specifies the type of shader whose precision to query. shaderType must be GL_VERTEX_SHADER or GL_FRAGMENT_SHADER.
        /// </para>
        /// </param>
        /// <param name="precisionType">
        /// <para>
        /// Specifies the numeric format whose precision and range to query.
        /// </para>
        /// </param>
        /// <param name="range">
        /// <para>
        /// Specifies the address of array of two integers into which encodings of the implementation's numeric range are returned.
        /// </para>
        /// </param>
        /// <param name="precision">
        /// <para>
        /// Specifies the address of an integer into which the numeric precision of the implementation is written.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderPrecisionFormat")]
        [CLSCompliant(false)]
        public static unsafe void GetShaderPrecisionFormat(OpenTK.Graphics.ES30.All shadertype, OpenTK.Graphics.ES30.All precisiontype, [OutAttribute] Int32* range, [OutAttribute] Int32* precision) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Retrieve the range and precision for numeric formats supported by the shader compiler
        /// </summary>
        /// <param name="shaderType">
        /// <para>
        /// Specifies the type of shader whose precision to query. shaderType must be GL_VERTEX_SHADER or GL_FRAGMENT_SHADER.
        /// </para>
        /// </param>
        /// <param name="precisionType">
        /// <para>
        /// Specifies the numeric format whose precision and range to query.
        /// </para>
        /// </param>
        /// <param name="range">
        /// <para>
        /// Specifies the address of array of two integers into which encodings of the implementation's numeric range are returned.
        /// </para>
        /// </param>
        /// <param name="precision">
        /// <para>
        /// Specifies the address of an integer into which the numeric precision of the implementation is written.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderPrecisionFormat")]
        [CLSCompliant(false)]
        public static void GetShaderPrecisionFormat(OpenTK.Graphics.ES30.ShaderType shadertype, OpenTK.Graphics.ES30.ShaderPrecision precisiontype, [OutAttribute] Int32[] range, [OutAttribute] Int32[] precision) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Retrieve the range and precision for numeric formats supported by the shader compiler
        /// </summary>
        /// <param name="shaderType">
        /// <para>
        /// Specifies the type of shader whose precision to query. shaderType must be GL_VERTEX_SHADER or GL_FRAGMENT_SHADER.
        /// </para>
        /// </param>
        /// <param name="precisionType">
        /// <para>
        /// Specifies the numeric format whose precision and range to query.
        /// </para>
        /// </param>
        /// <param name="range">
        /// <para>
        /// Specifies the address of array of two integers into which encodings of the implementation's numeric range are returned.
        /// </para>
        /// </param>
        /// <param name="precision">
        /// <para>
        /// Specifies the address of an integer into which the numeric precision of the implementation is written.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderPrecisionFormat")]
        [CLSCompliant(false)]
        public static void GetShaderPrecisionFormat(OpenTK.Graphics.ES30.ShaderType shadertype, OpenTK.Graphics.ES30.ShaderPrecision precisiontype, [OutAttribute] out Int32 range, [OutAttribute] out Int32 precision) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Retrieve the range and precision for numeric formats supported by the shader compiler
        /// </summary>
        /// <param name="shaderType">
        /// <para>
        /// Specifies the type of shader whose precision to query. shaderType must be GL_VERTEX_SHADER or GL_FRAGMENT_SHADER.
        /// </para>
        /// </param>
        /// <param name="precisionType">
        /// <para>
        /// Specifies the numeric format whose precision and range to query.
        /// </para>
        /// </param>
        /// <param name="range">
        /// <para>
        /// Specifies the address of array of two integers into which encodings of the implementation's numeric range are returned.
        /// </para>
        /// </param>
        /// <param name="precision">
        /// <para>
        /// Specifies the address of an integer into which the numeric precision of the implementation is written.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderPrecisionFormat")]
        [CLSCompliant(false)]
        public static unsafe void GetShaderPrecisionFormat(OpenTK.Graphics.ES30.ShaderType shadertype, OpenTK.Graphics.ES30.ShaderPrecision precisiontype, [OutAttribute] Int32* range, [OutAttribute] Int32* precision) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Returns the source code string from a shader object
        /// </summary>
        /// <param name="shader">
        /// <para>
        /// Specifies the shader object to be queried.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the size of the character buffer for storing the returned source code string.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Returns the length of the string returned in source (excluding the null terminator).
        /// </para>
        /// </param>
        /// <param name="source">
        /// <para>
        /// Specifies an array of characters that is used to return the source code string.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderSource")]
        [CLSCompliant(false)]
        public static void GetShaderSource(Int32 shader, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder source) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Returns the source code string from a shader object
        /// </summary>
        /// <param name="shader">
        /// <para>
        /// Specifies the shader object to be queried.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the size of the character buffer for storing the returned source code string.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Returns the length of the string returned in source (excluding the null terminator).
        /// </para>
        /// </param>
        /// <param name="source">
        /// <para>
        /// Specifies an array of characters that is used to return the source code string.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderSource")]
        [CLSCompliant(false)]
        public static unsafe void GetShaderSource(Int32 shader, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder source) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Returns the source code string from a shader object
        /// </summary>
        /// <param name="shader">
        /// <para>
        /// Specifies the shader object to be queried.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the size of the character buffer for storing the returned source code string.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Returns the length of the string returned in source (excluding the null terminator).
        /// </para>
        /// </param>
        /// <param name="source">
        /// <para>
        /// Specifies an array of characters that is used to return the source code string.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderSource")]
        [CLSCompliant(false)]
        public static void GetShaderSource(UInt32 shader, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder source) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Returns the source code string from a shader object
        /// </summary>
        /// <param name="shader">
        /// <para>
        /// Specifies the shader object to be queried.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the size of the character buffer for storing the returned source code string.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Returns the length of the string returned in source (excluding the null terminator).
        /// </para>
        /// </param>
        /// <param name="source">
        /// <para>
        /// Specifies an array of characters that is used to return the source code string.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderSource")]
        [CLSCompliant(false)]
        public static unsafe void GetShaderSource(UInt32 shader, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder source) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Return a string describing the current GL connection
        /// </summary>
        /// <param name="name">
        /// <para>
        /// Specifies a symbolic constant, one of GL_VENDOR, GL_RENDERER, GL_VERSION, or GL_SHADING_LANGUAGE_VERSION. Additionally, glGetStringi accepts the GL_EXTENSIONS token.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// For glGetStringi, specifies the index of the string to return.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetString")]
        public static String GetString(OpenTK.Graphics.ES30.All name) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Return a string describing the current GL connection
        /// </summary>
        /// <param name="name">
        /// <para>
        /// Specifies a symbolic constant, one of GL_VENDOR, GL_RENDERER, GL_VERSION, or GL_SHADING_LANGUAGE_VERSION. Additionally, glGetStringi accepts the GL_EXTENSIONS token.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// For glGetStringi, specifies the index of the string to return.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetString")]
        public static String GetString(OpenTK.Graphics.ES30.StringName name) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Return a string describing the current GL connection
        /// </summary>
        /// <param name="name">
        /// <para>
        /// Specifies a symbolic constant, one of GL_VENDOR, GL_RENDERER, GL_VERSION, or GL_SHADING_LANGUAGE_VERSION. Additionally, glGetStringi accepts the GL_EXTENSIONS token.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// For glGetStringi, specifies the index of the string to return.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetStringi")]
        [CLSCompliant(false)]
        public static String GetString(OpenTK.Graphics.ES30.All name, Int32 index) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Return a string describing the current GL connection
        /// </summary>
        /// <param name="name">
        /// <para>
        /// Specifies a symbolic constant, one of GL_VENDOR, GL_RENDERER, GL_VERSION, or GL_SHADING_LANGUAGE_VERSION. Additionally, glGetStringi accepts the GL_EXTENSIONS token.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// For glGetStringi, specifies the index of the string to return.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetStringi")]
        [CLSCompliant(false)]
        public static String GetString(OpenTK.Graphics.ES30.All name, UInt32 index) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Return a string describing the current GL connection
        /// </summary>
        /// <param name="name">
        /// <para>
        /// Specifies a symbolic constant, one of GL_VENDOR, GL_RENDERER, GL_VERSION, or GL_SHADING_LANGUAGE_VERSION. Additionally, glGetStringi accepts the GL_EXTENSIONS token.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// For glGetStringi, specifies the index of the string to return.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetStringi")]
        [CLSCompliant(false)]
        public static String GetString(OpenTK.Graphics.ES30.StringNameIndexed name, Int32 index) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Return a string describing the current GL connection
        /// </summary>
        /// <param name="name">
        /// <para>
        /// Specifies a symbolic constant, one of GL_VENDOR, GL_RENDERER, GL_VERSION, or GL_SHADING_LANGUAGE_VERSION. Additionally, glGetStringi accepts the GL_EXTENSIONS token.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// For glGetStringi, specifies the index of the string to return.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetStringi")]
        [CLSCompliant(false)]
        public static String GetString(OpenTK.Graphics.ES30.StringNameIndexed name, UInt32 index) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Query the properties of a sync object
        /// </summary>
        /// <param name="sync">
        /// <para>
        /// Specifies the sync object whose properties to query.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the parameter whose value to retrieve from the sync object specified in sync.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the size of the buffer whose address is given in values.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the address of an variable to receive the number of integers placed in values.
        /// </para>
        /// </param>
        /// <param name="values">
        /// <para>
        /// Specifies the address of an array to receive the values of the queried parameter.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetSynciv")]
        [CLSCompliant(false)]
        public static void GetSync(IntPtr sync, OpenTK.Graphics.ES30.All pname, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] Int32[] values) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Query the properties of a sync object
        /// </summary>
        /// <param name="sync">
        /// <para>
        /// Specifies the sync object whose properties to query.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the parameter whose value to retrieve from the sync object specified in sync.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the size of the buffer whose address is given in values.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the address of an variable to receive the number of integers placed in values.
        /// </para>
        /// </param>
        /// <param name="values">
        /// <para>
        /// Specifies the address of an array to receive the values of the queried parameter.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetSynciv")]
        [CLSCompliant(false)]
        public static void GetSync(IntPtr sync, OpenTK.Graphics.ES30.All pname, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] out Int32 values) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Query the properties of a sync object
        /// </summary>
        /// <param name="sync">
        /// <para>
        /// Specifies the sync object whose properties to query.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the parameter whose value to retrieve from the sync object specified in sync.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the size of the buffer whose address is given in values.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the address of an variable to receive the number of integers placed in values.
        /// </para>
        /// </param>
        /// <param name="values">
        /// <para>
        /// Specifies the address of an array to receive the values of the queried parameter.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetSynciv")]
        [CLSCompliant(false)]
        public static unsafe void GetSync(IntPtr sync, OpenTK.Graphics.ES30.All pname, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] Int32* values) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Query the properties of a sync object
        /// </summary>
        /// <param name="sync">
        /// <para>
        /// Specifies the sync object whose properties to query.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the parameter whose value to retrieve from the sync object specified in sync.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the size of the buffer whose address is given in values.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the address of an variable to receive the number of integers placed in values.
        /// </para>
        /// </param>
        /// <param name="values">
        /// <para>
        /// Specifies the address of an array to receive the values of the queried parameter.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetSynciv")]
        [CLSCompliant(false)]
        public static void GetSync(IntPtr sync, OpenTK.Graphics.ES30.SyncParameterName pname, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] Int32[] values) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Query the properties of a sync object
        /// </summary>
        /// <param name="sync">
        /// <para>
        /// Specifies the sync object whose properties to query.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the parameter whose value to retrieve from the sync object specified in sync.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the size of the buffer whose address is given in values.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the address of an variable to receive the number of integers placed in values.
        /// </para>
        /// </param>
        /// <param name="values">
        /// <para>
        /// Specifies the address of an array to receive the values of the queried parameter.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetSynciv")]
        [CLSCompliant(false)]
        public static void GetSync(IntPtr sync, OpenTK.Graphics.ES30.SyncParameterName pname, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] out Int32 values) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Query the properties of a sync object
        /// </summary>
        /// <param name="sync">
        /// <para>
        /// Specifies the sync object whose properties to query.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the parameter whose value to retrieve from the sync object specified in sync.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the size of the buffer whose address is given in values.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the address of an variable to receive the number of integers placed in values.
        /// </para>
        /// </param>
        /// <param name="values">
        /// <para>
        /// Specifies the address of an array to receive the values of the queried parameter.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetSynciv")]
        [CLSCompliant(false)]
        public static unsafe void GetSync(IntPtr sync, OpenTK.Graphics.ES30.SyncParameterName pname, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] Int32* values) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Return texture parameter values
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the symbolic name of the target texture. GL_TEXTURE_1D, GL_TEXTURE_2D, GL_TEXTURE_1D_ARRAY, GL_TEXTURE_2D_ARRAY, GL_TEXTURE_3D, GL_TEXTURE_RECTANGLE, GL_TEXTURE_CUBE_MAP, and GL_TEXTURE_CUBE_MAP_ARRAY are accepted.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a texture parameter. GL_DEPTH_STENCIL_TEXTURE_MODE, GL_TEXTURE_BASE_LEVEL, GL_TEXTURE_BORDER_COLOR, GL_TEXTURE_COMPARE_MODE, GL_TEXTURE_COMPARE_FUNC, GL_TEXTURE_IMMUTABLE_FORMAT, GL_TEXTURE_IMMUTABLE_LEVELS, GL_TEXTURE_LOD_BIAS, GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MAX_LEVEL, GL_TEXTURE_MAX_LOD, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_SWIZZLE_R, GL_TEXTURE_SWIZZLE_G, GL_TEXTURE_SWIZZLE_B, GL_TEXTURE_SWIZZLE_A, GL_TEXTURE_SWIZZLE_RGBA, GL_TEXTURE_VIEW_MIN_LAYER, GL_TEXTURE_VIEW_MIN_LEVEL, GL_TEXTURE_VIEW_NUM_LAYERS, GL_TEXTURE_VIEW_NUM_LEVELS, GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, and GL_TEXTURE_WRAP_R are accepted.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the texture parameters.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetTexParameterfv")]
        [CLSCompliant(false)]
        public static void GetTexParameter(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All pname, [OutAttribute] Single[] @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Return texture parameter values
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the symbolic name of the target texture. GL_TEXTURE_1D, GL_TEXTURE_2D, GL_TEXTURE_1D_ARRAY, GL_TEXTURE_2D_ARRAY, GL_TEXTURE_3D, GL_TEXTURE_RECTANGLE, GL_TEXTURE_CUBE_MAP, and GL_TEXTURE_CUBE_MAP_ARRAY are accepted.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a texture parameter. GL_DEPTH_STENCIL_TEXTURE_MODE, GL_TEXTURE_BASE_LEVEL, GL_TEXTURE_BORDER_COLOR, GL_TEXTURE_COMPARE_MODE, GL_TEXTURE_COMPARE_FUNC, GL_TEXTURE_IMMUTABLE_FORMAT, GL_TEXTURE_IMMUTABLE_LEVELS, GL_TEXTURE_LOD_BIAS, GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MAX_LEVEL, GL_TEXTURE_MAX_LOD, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_SWIZZLE_R, GL_TEXTURE_SWIZZLE_G, GL_TEXTURE_SWIZZLE_B, GL_TEXTURE_SWIZZLE_A, GL_TEXTURE_SWIZZLE_RGBA, GL_TEXTURE_VIEW_MIN_LAYER, GL_TEXTURE_VIEW_MIN_LEVEL, GL_TEXTURE_VIEW_NUM_LAYERS, GL_TEXTURE_VIEW_NUM_LEVELS, GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, and GL_TEXTURE_WRAP_R are accepted.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the texture parameters.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetTexParameterfv")]
        [CLSCompliant(false)]
        public static void GetTexParameter(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All pname, [OutAttribute] out Single @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Return texture parameter values
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the symbolic name of the target texture. GL_TEXTURE_1D, GL_TEXTURE_2D, GL_TEXTURE_1D_ARRAY, GL_TEXTURE_2D_ARRAY, GL_TEXTURE_3D, GL_TEXTURE_RECTANGLE, GL_TEXTURE_CUBE_MAP, and GL_TEXTURE_CUBE_MAP_ARRAY are accepted.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a texture parameter. GL_DEPTH_STENCIL_TEXTURE_MODE, GL_TEXTURE_BASE_LEVEL, GL_TEXTURE_BORDER_COLOR, GL_TEXTURE_COMPARE_MODE, GL_TEXTURE_COMPARE_FUNC, GL_TEXTURE_IMMUTABLE_FORMAT, GL_TEXTURE_IMMUTABLE_LEVELS, GL_TEXTURE_LOD_BIAS, GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MAX_LEVEL, GL_TEXTURE_MAX_LOD, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_SWIZZLE_R, GL_TEXTURE_SWIZZLE_G, GL_TEXTURE_SWIZZLE_B, GL_TEXTURE_SWIZZLE_A, GL_TEXTURE_SWIZZLE_RGBA, GL_TEXTURE_VIEW_MIN_LAYER, GL_TEXTURE_VIEW_MIN_LEVEL, GL_TEXTURE_VIEW_NUM_LAYERS, GL_TEXTURE_VIEW_NUM_LEVELS, GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, and GL_TEXTURE_WRAP_R are accepted.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the texture parameters.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetTexParameterfv")]
        [CLSCompliant(false)]
        public static unsafe void GetTexParameter(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All pname, [OutAttribute] Single* @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Return texture parameter values
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the symbolic name of the target texture. GL_TEXTURE_1D, GL_TEXTURE_2D, GL_TEXTURE_1D_ARRAY, GL_TEXTURE_2D_ARRAY, GL_TEXTURE_3D, GL_TEXTURE_RECTANGLE, GL_TEXTURE_CUBE_MAP, and GL_TEXTURE_CUBE_MAP_ARRAY are accepted.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a texture parameter. GL_DEPTH_STENCIL_TEXTURE_MODE, GL_TEXTURE_BASE_LEVEL, GL_TEXTURE_BORDER_COLOR, GL_TEXTURE_COMPARE_MODE, GL_TEXTURE_COMPARE_FUNC, GL_TEXTURE_IMMUTABLE_FORMAT, GL_TEXTURE_IMMUTABLE_LEVELS, GL_TEXTURE_LOD_BIAS, GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MAX_LEVEL, GL_TEXTURE_MAX_LOD, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_SWIZZLE_R, GL_TEXTURE_SWIZZLE_G, GL_TEXTURE_SWIZZLE_B, GL_TEXTURE_SWIZZLE_A, GL_TEXTURE_SWIZZLE_RGBA, GL_TEXTURE_VIEW_MIN_LAYER, GL_TEXTURE_VIEW_MIN_LEVEL, GL_TEXTURE_VIEW_NUM_LAYERS, GL_TEXTURE_VIEW_NUM_LEVELS, GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, and GL_TEXTURE_WRAP_R are accepted.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the texture parameters.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetTexParameterfv")]
        [CLSCompliant(false)]
        public static void GetTexParameter(OpenTK.Graphics.ES30.TextureTarget target, OpenTK.Graphics.ES30.GetTextureParameterName pname, [OutAttribute] Single[] @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Return texture parameter values
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the symbolic name of the target texture. GL_TEXTURE_1D, GL_TEXTURE_2D, GL_TEXTURE_1D_ARRAY, GL_TEXTURE_2D_ARRAY, GL_TEXTURE_3D, GL_TEXTURE_RECTANGLE, GL_TEXTURE_CUBE_MAP, and GL_TEXTURE_CUBE_MAP_ARRAY are accepted.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a texture parameter. GL_DEPTH_STENCIL_TEXTURE_MODE, GL_TEXTURE_BASE_LEVEL, GL_TEXTURE_BORDER_COLOR, GL_TEXTURE_COMPARE_MODE, GL_TEXTURE_COMPARE_FUNC, GL_TEXTURE_IMMUTABLE_FORMAT, GL_TEXTURE_IMMUTABLE_LEVELS, GL_TEXTURE_LOD_BIAS, GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MAX_LEVEL, GL_TEXTURE_MAX_LOD, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_SWIZZLE_R, GL_TEXTURE_SWIZZLE_G, GL_TEXTURE_SWIZZLE_B, GL_TEXTURE_SWIZZLE_A, GL_TEXTURE_SWIZZLE_RGBA, GL_TEXTURE_VIEW_MIN_LAYER, GL_TEXTURE_VIEW_MIN_LEVEL, GL_TEXTURE_VIEW_NUM_LAYERS, GL_TEXTURE_VIEW_NUM_LEVELS, GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, and GL_TEXTURE_WRAP_R are accepted.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the texture parameters.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetTexParameterfv")]
        [CLSCompliant(false)]
        public static void GetTexParameter(OpenTK.Graphics.ES30.TextureTarget target, OpenTK.Graphics.ES30.GetTextureParameterName pname, [OutAttribute] out Single @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Return texture parameter values
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the symbolic name of the target texture. GL_TEXTURE_1D, GL_TEXTURE_2D, GL_TEXTURE_1D_ARRAY, GL_TEXTURE_2D_ARRAY, GL_TEXTURE_3D, GL_TEXTURE_RECTANGLE, GL_TEXTURE_CUBE_MAP, and GL_TEXTURE_CUBE_MAP_ARRAY are accepted.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a texture parameter. GL_DEPTH_STENCIL_TEXTURE_MODE, GL_TEXTURE_BASE_LEVEL, GL_TEXTURE_BORDER_COLOR, GL_TEXTURE_COMPARE_MODE, GL_TEXTURE_COMPARE_FUNC, GL_TEXTURE_IMMUTABLE_FORMAT, GL_TEXTURE_IMMUTABLE_LEVELS, GL_TEXTURE_LOD_BIAS, GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MAX_LEVEL, GL_TEXTURE_MAX_LOD, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_SWIZZLE_R, GL_TEXTURE_SWIZZLE_G, GL_TEXTURE_SWIZZLE_B, GL_TEXTURE_SWIZZLE_A, GL_TEXTURE_SWIZZLE_RGBA, GL_TEXTURE_VIEW_MIN_LAYER, GL_TEXTURE_VIEW_MIN_LEVEL, GL_TEXTURE_VIEW_NUM_LAYERS, GL_TEXTURE_VIEW_NUM_LEVELS, GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, and GL_TEXTURE_WRAP_R are accepted.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the texture parameters.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetTexParameterfv")]
        [CLSCompliant(false)]
        public static unsafe void GetTexParameter(OpenTK.Graphics.ES30.TextureTarget target, OpenTK.Graphics.ES30.GetTextureParameterName pname, [OutAttribute] Single* @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Return texture parameter values
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the symbolic name of the target texture. GL_TEXTURE_1D, GL_TEXTURE_2D, GL_TEXTURE_1D_ARRAY, GL_TEXTURE_2D_ARRAY, GL_TEXTURE_3D, GL_TEXTURE_RECTANGLE, GL_TEXTURE_CUBE_MAP, and GL_TEXTURE_CUBE_MAP_ARRAY are accepted.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a texture parameter. GL_DEPTH_STENCIL_TEXTURE_MODE, GL_TEXTURE_BASE_LEVEL, GL_TEXTURE_BORDER_COLOR, GL_TEXTURE_COMPARE_MODE, GL_TEXTURE_COMPARE_FUNC, GL_TEXTURE_IMMUTABLE_FORMAT, GL_TEXTURE_IMMUTABLE_LEVELS, GL_TEXTURE_LOD_BIAS, GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MAX_LEVEL, GL_TEXTURE_MAX_LOD, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_SWIZZLE_R, GL_TEXTURE_SWIZZLE_G, GL_TEXTURE_SWIZZLE_B, GL_TEXTURE_SWIZZLE_A, GL_TEXTURE_SWIZZLE_RGBA, GL_TEXTURE_VIEW_MIN_LAYER, GL_TEXTURE_VIEW_MIN_LEVEL, GL_TEXTURE_VIEW_NUM_LAYERS, GL_TEXTURE_VIEW_NUM_LEVELS, GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, and GL_TEXTURE_WRAP_R are accepted.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the texture parameters.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetTexParameteriv")]
        [CLSCompliant(false)]
        public static void GetTexParameter(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All pname, [OutAttribute] Int32[] @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Return texture parameter values
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the symbolic name of the target texture. GL_TEXTURE_1D, GL_TEXTURE_2D, GL_TEXTURE_1D_ARRAY, GL_TEXTURE_2D_ARRAY, GL_TEXTURE_3D, GL_TEXTURE_RECTANGLE, GL_TEXTURE_CUBE_MAP, and GL_TEXTURE_CUBE_MAP_ARRAY are accepted.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a texture parameter. GL_DEPTH_STENCIL_TEXTURE_MODE, GL_TEXTURE_BASE_LEVEL, GL_TEXTURE_BORDER_COLOR, GL_TEXTURE_COMPARE_MODE, GL_TEXTURE_COMPARE_FUNC, GL_TEXTURE_IMMUTABLE_FORMAT, GL_TEXTURE_IMMUTABLE_LEVELS, GL_TEXTURE_LOD_BIAS, GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MAX_LEVEL, GL_TEXTURE_MAX_LOD, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_SWIZZLE_R, GL_TEXTURE_SWIZZLE_G, GL_TEXTURE_SWIZZLE_B, GL_TEXTURE_SWIZZLE_A, GL_TEXTURE_SWIZZLE_RGBA, GL_TEXTURE_VIEW_MIN_LAYER, GL_TEXTURE_VIEW_MIN_LEVEL, GL_TEXTURE_VIEW_NUM_LAYERS, GL_TEXTURE_VIEW_NUM_LEVELS, GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, and GL_TEXTURE_WRAP_R are accepted.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the texture parameters.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetTexParameteriv")]
        [CLSCompliant(false)]
        public static void GetTexParameter(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All pname, [OutAttribute] out Int32 @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Return texture parameter values
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the symbolic name of the target texture. GL_TEXTURE_1D, GL_TEXTURE_2D, GL_TEXTURE_1D_ARRAY, GL_TEXTURE_2D_ARRAY, GL_TEXTURE_3D, GL_TEXTURE_RECTANGLE, GL_TEXTURE_CUBE_MAP, and GL_TEXTURE_CUBE_MAP_ARRAY are accepted.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a texture parameter. GL_DEPTH_STENCIL_TEXTURE_MODE, GL_TEXTURE_BASE_LEVEL, GL_TEXTURE_BORDER_COLOR, GL_TEXTURE_COMPARE_MODE, GL_TEXTURE_COMPARE_FUNC, GL_TEXTURE_IMMUTABLE_FORMAT, GL_TEXTURE_IMMUTABLE_LEVELS, GL_TEXTURE_LOD_BIAS, GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MAX_LEVEL, GL_TEXTURE_MAX_LOD, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_SWIZZLE_R, GL_TEXTURE_SWIZZLE_G, GL_TEXTURE_SWIZZLE_B, GL_TEXTURE_SWIZZLE_A, GL_TEXTURE_SWIZZLE_RGBA, GL_TEXTURE_VIEW_MIN_LAYER, GL_TEXTURE_VIEW_MIN_LEVEL, GL_TEXTURE_VIEW_NUM_LAYERS, GL_TEXTURE_VIEW_NUM_LEVELS, GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, and GL_TEXTURE_WRAP_R are accepted.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the texture parameters.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetTexParameteriv")]
        [CLSCompliant(false)]
        public static unsafe void GetTexParameter(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All pname, [OutAttribute] Int32* @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Return texture parameter values
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the symbolic name of the target texture. GL_TEXTURE_1D, GL_TEXTURE_2D, GL_TEXTURE_1D_ARRAY, GL_TEXTURE_2D_ARRAY, GL_TEXTURE_3D, GL_TEXTURE_RECTANGLE, GL_TEXTURE_CUBE_MAP, and GL_TEXTURE_CUBE_MAP_ARRAY are accepted.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a texture parameter. GL_DEPTH_STENCIL_TEXTURE_MODE, GL_TEXTURE_BASE_LEVEL, GL_TEXTURE_BORDER_COLOR, GL_TEXTURE_COMPARE_MODE, GL_TEXTURE_COMPARE_FUNC, GL_TEXTURE_IMMUTABLE_FORMAT, GL_TEXTURE_IMMUTABLE_LEVELS, GL_TEXTURE_LOD_BIAS, GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MAX_LEVEL, GL_TEXTURE_MAX_LOD, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_SWIZZLE_R, GL_TEXTURE_SWIZZLE_G, GL_TEXTURE_SWIZZLE_B, GL_TEXTURE_SWIZZLE_A, GL_TEXTURE_SWIZZLE_RGBA, GL_TEXTURE_VIEW_MIN_LAYER, GL_TEXTURE_VIEW_MIN_LEVEL, GL_TEXTURE_VIEW_NUM_LAYERS, GL_TEXTURE_VIEW_NUM_LEVELS, GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, and GL_TEXTURE_WRAP_R are accepted.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the texture parameters.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetTexParameteriv")]
        [CLSCompliant(false)]
        public static void GetTexParameter(OpenTK.Graphics.ES30.TextureTarget target, OpenTK.Graphics.ES30.GetTextureParameterName pname, [OutAttribute] Int32[] @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Return texture parameter values
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the symbolic name of the target texture. GL_TEXTURE_1D, GL_TEXTURE_2D, GL_TEXTURE_1D_ARRAY, GL_TEXTURE_2D_ARRAY, GL_TEXTURE_3D, GL_TEXTURE_RECTANGLE, GL_TEXTURE_CUBE_MAP, and GL_TEXTURE_CUBE_MAP_ARRAY are accepted.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a texture parameter. GL_DEPTH_STENCIL_TEXTURE_MODE, GL_TEXTURE_BASE_LEVEL, GL_TEXTURE_BORDER_COLOR, GL_TEXTURE_COMPARE_MODE, GL_TEXTURE_COMPARE_FUNC, GL_TEXTURE_IMMUTABLE_FORMAT, GL_TEXTURE_IMMUTABLE_LEVELS, GL_TEXTURE_LOD_BIAS, GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MAX_LEVEL, GL_TEXTURE_MAX_LOD, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_SWIZZLE_R, GL_TEXTURE_SWIZZLE_G, GL_TEXTURE_SWIZZLE_B, GL_TEXTURE_SWIZZLE_A, GL_TEXTURE_SWIZZLE_RGBA, GL_TEXTURE_VIEW_MIN_LAYER, GL_TEXTURE_VIEW_MIN_LEVEL, GL_TEXTURE_VIEW_NUM_LAYERS, GL_TEXTURE_VIEW_NUM_LEVELS, GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, and GL_TEXTURE_WRAP_R are accepted.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the texture parameters.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetTexParameteriv")]
        [CLSCompliant(false)]
        public static void GetTexParameter(OpenTK.Graphics.ES30.TextureTarget target, OpenTK.Graphics.ES30.GetTextureParameterName pname, [OutAttribute] out Int32 @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Return texture parameter values
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the symbolic name of the target texture. GL_TEXTURE_1D, GL_TEXTURE_2D, GL_TEXTURE_1D_ARRAY, GL_TEXTURE_2D_ARRAY, GL_TEXTURE_3D, GL_TEXTURE_RECTANGLE, GL_TEXTURE_CUBE_MAP, and GL_TEXTURE_CUBE_MAP_ARRAY are accepted.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a texture parameter. GL_DEPTH_STENCIL_TEXTURE_MODE, GL_TEXTURE_BASE_LEVEL, GL_TEXTURE_BORDER_COLOR, GL_TEXTURE_COMPARE_MODE, GL_TEXTURE_COMPARE_FUNC, GL_TEXTURE_IMMUTABLE_FORMAT, GL_TEXTURE_IMMUTABLE_LEVELS, GL_TEXTURE_LOD_BIAS, GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MAX_LEVEL, GL_TEXTURE_MAX_LOD, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_SWIZZLE_R, GL_TEXTURE_SWIZZLE_G, GL_TEXTURE_SWIZZLE_B, GL_TEXTURE_SWIZZLE_A, GL_TEXTURE_SWIZZLE_RGBA, GL_TEXTURE_VIEW_MIN_LAYER, GL_TEXTURE_VIEW_MIN_LEVEL, GL_TEXTURE_VIEW_NUM_LAYERS, GL_TEXTURE_VIEW_NUM_LEVELS, GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, and GL_TEXTURE_WRAP_R are accepted.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the texture parameters.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetTexParameteriv")]
        [CLSCompliant(false)]
        public static unsafe void GetTexParameter(OpenTK.Graphics.ES30.TextureTarget target, OpenTK.Graphics.ES30.GetTextureParameterName pname, [OutAttribute] Int32* @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Retrieve information about varying variables selected for transform feedback
        /// </summary>
        /// <param name="program">
        /// <para>
        /// The name of the target program object.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// The index of the varying variable whose information to retrieve.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// The maximum number of characters, including the null terminator, that may be written into name.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// The address of a variable which will receive the number of characters written into name, excluding the null-terminator. If length is NULL no length is returned.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// The address of a variable that will receive the size of the varying.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// The address of a variable that will recieve the type of the varying.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// The address of a buffer into which will be written the name of the varying.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetTransformFeedbackVarying")]
        [CLSCompliant(false)]
        public static void GetTransformFeedbackVarying(Int32 program, Int32 index, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] out Int32 size, [OutAttribute] out OpenTK.Graphics.ES30.All type, [OutAttribute] StringBuilder name) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Retrieve information about varying variables selected for transform feedback
        /// </summary>
        /// <param name="program">
        /// <para>
        /// The name of the target program object.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// The index of the varying variable whose information to retrieve.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// The maximum number of characters, including the null terminator, that may be written into name.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// The address of a variable which will receive the number of characters written into name, excluding the null-terminator. If length is NULL no length is returned.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// The address of a variable that will receive the size of the varying.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// The address of a variable that will recieve the type of the varying.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// The address of a buffer into which will be written the name of the varying.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetTransformFeedbackVarying")]
        [CLSCompliant(false)]
        public static void GetTransformFeedbackVarying(Int32 program, Int32 index, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] out Int32 size, [OutAttribute] out OpenTK.Graphics.ES30.TransformFeedbackType type, [OutAttribute] StringBuilder name) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Retrieve information about varying variables selected for transform feedback
        /// </summary>
        /// <param name="program">
        /// <para>
        /// The name of the target program object.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// The index of the varying variable whose information to retrieve.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// The maximum number of characters, including the null terminator, that may be written into name.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// The address of a variable which will receive the number of characters written into name, excluding the null-terminator. If length is NULL no length is returned.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// The address of a variable that will receive the size of the varying.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// The address of a variable that will recieve the type of the varying.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// The address of a buffer into which will be written the name of the varying.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetTransformFeedbackVarying")]
        [CLSCompliant(false)]
        public static unsafe void GetTransformFeedbackVarying(Int32 program, Int32 index, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] Int32* size, [OutAttribute] OpenTK.Graphics.ES30.All* type, [OutAttribute] StringBuilder name) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Retrieve information about varying variables selected for transform feedback
        /// </summary>
        /// <param name="program">
        /// <para>
        /// The name of the target program object.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// The index of the varying variable whose information to retrieve.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// The maximum number of characters, including the null terminator, that may be written into name.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// The address of a variable which will receive the number of characters written into name, excluding the null-terminator. If length is NULL no length is returned.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// The address of a variable that will receive the size of the varying.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// The address of a variable that will recieve the type of the varying.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// The address of a buffer into which will be written the name of the varying.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetTransformFeedbackVarying")]
        [CLSCompliant(false)]
        public static unsafe void GetTransformFeedbackVarying(Int32 program, Int32 index, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] Int32* size, [OutAttribute] OpenTK.Graphics.ES30.TransformFeedbackType* type, [OutAttribute] StringBuilder name) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Retrieve information about varying variables selected for transform feedback
        /// </summary>
        /// <param name="program">
        /// <para>
        /// The name of the target program object.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// The index of the varying variable whose information to retrieve.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// The maximum number of characters, including the null terminator, that may be written into name.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// The address of a variable which will receive the number of characters written into name, excluding the null-terminator. If length is NULL no length is returned.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// The address of a variable that will receive the size of the varying.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// The address of a variable that will recieve the type of the varying.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// The address of a buffer into which will be written the name of the varying.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetTransformFeedbackVarying")]
        [CLSCompliant(false)]
        public static void GetTransformFeedbackVarying(UInt32 program, UInt32 index, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] out Int32 size, [OutAttribute] out OpenTK.Graphics.ES30.All type, [OutAttribute] StringBuilder name) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Retrieve information about varying variables selected for transform feedback
        /// </summary>
        /// <param name="program">
        /// <para>
        /// The name of the target program object.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// The index of the varying variable whose information to retrieve.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// The maximum number of characters, including the null terminator, that may be written into name.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// The address of a variable which will receive the number of characters written into name, excluding the null-terminator. If length is NULL no length is returned.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// The address of a variable that will receive the size of the varying.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// The address of a variable that will recieve the type of the varying.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// The address of a buffer into which will be written the name of the varying.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetTransformFeedbackVarying")]
        [CLSCompliant(false)]
        public static void GetTransformFeedbackVarying(UInt32 program, UInt32 index, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] out Int32 size, [OutAttribute] out OpenTK.Graphics.ES30.TransformFeedbackType type, [OutAttribute] StringBuilder name) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Retrieve information about varying variables selected for transform feedback
        /// </summary>
        /// <param name="program">
        /// <para>
        /// The name of the target program object.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// The index of the varying variable whose information to retrieve.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// The maximum number of characters, including the null terminator, that may be written into name.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// The address of a variable which will receive the number of characters written into name, excluding the null-terminator. If length is NULL no length is returned.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// The address of a variable that will receive the size of the varying.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// The address of a variable that will recieve the type of the varying.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// The address of a buffer into which will be written the name of the varying.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetTransformFeedbackVarying")]
        [CLSCompliant(false)]
        public static unsafe void GetTransformFeedbackVarying(UInt32 program, UInt32 index, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] Int32* size, [OutAttribute] OpenTK.Graphics.ES30.All* type, [OutAttribute] StringBuilder name) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Retrieve information about varying variables selected for transform feedback
        /// </summary>
        /// <param name="program">
        /// <para>
        /// The name of the target program object.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// The index of the varying variable whose information to retrieve.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// The maximum number of characters, including the null terminator, that may be written into name.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// The address of a variable which will receive the number of characters written into name, excluding the null-terminator. If length is NULL no length is returned.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// The address of a variable that will receive the size of the varying.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// The address of a variable that will recieve the type of the varying.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// The address of a buffer into which will be written the name of the varying.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetTransformFeedbackVarying")]
        [CLSCompliant(false)]
        public static unsafe void GetTransformFeedbackVarying(UInt32 program, UInt32 index, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] Int32* size, [OutAttribute] OpenTK.Graphics.ES30.TransformFeedbackType* type, [OutAttribute] StringBuilder name) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Retrieve the index of a named uniform block
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the name of a program containing the uniform block.
        /// </para>
        /// </param>
        /// <param name="uniformBlockName">
        /// <para>
        /// Specifies the address an array of characters to containing the name of the uniform block whose index to retrieve.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetUniformBlockIndex")]
        [CLSCompliant(false)]
        public static Int32 GetUniformBlockIndex(Int32 program, String uniformBlockName) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Retrieve the index of a named uniform block
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the name of a program containing the uniform block.
        /// </para>
        /// </param>
        /// <param name="uniformBlockName">
        /// <para>
        /// Specifies the address an array of characters to containing the name of the uniform block whose index to retrieve.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetUniformBlockIndex")]
        [CLSCompliant(false)]
        public static Int32 GetUniformBlockIndex(UInt32 program, String uniformBlockName) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Returns the value of a uniform variable
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be queried.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the value of the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetUniformfv")]
        [CLSCompliant(false)]
        public static void GetUniform(Int32 program, Int32 location, [OutAttribute] Single[] @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Returns the value of a uniform variable
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be queried.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the value of the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetUniformfv")]
        [CLSCompliant(false)]
        public static void GetUniform(Int32 program, Int32 location, [OutAttribute] out Single @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Returns the value of a uniform variable
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be queried.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the value of the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetUniformfv")]
        [CLSCompliant(false)]
        public static unsafe void GetUniform(Int32 program, Int32 location, [OutAttribute] Single* @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Returns the value of a uniform variable
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be queried.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the value of the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetUniformfv")]
        [CLSCompliant(false)]
        public static void GetUniform(UInt32 program, Int32 location, [OutAttribute] Single[] @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Returns the value of a uniform variable
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be queried.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the value of the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetUniformfv")]
        [CLSCompliant(false)]
        public static void GetUniform(UInt32 program, Int32 location, [OutAttribute] out Single @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Returns the value of a uniform variable
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be queried.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the value of the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetUniformfv")]
        [CLSCompliant(false)]
        public static unsafe void GetUniform(UInt32 program, Int32 location, [OutAttribute] Single* @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Retrieve the index of a named uniform block
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the name of a program containing uniforms whose indices to query.
        /// </para>
        /// </param>
        /// <param name="uniformCount">
        /// <para>
        /// Specifies the number of uniforms whose indices to query.
        /// </para>
        /// </param>
        /// <param name="uniformNames">
        /// <para>
        /// Specifies the address of an array of pointers to buffers containing the names of the queried uniforms.
        /// </para>
        /// </param>
        /// <param name="uniformIndices">
        /// <para>
        /// Specifies the address of an array that will receive the indices of the uniforms.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetUniformIndices")]
        [CLSCompliant(false)]
        public static void GetUniformIndices(Int32 program, Int32 uniformCount, String[] uniformNames, [OutAttribute] Int32[] uniformIndices) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Retrieve the index of a named uniform block
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the name of a program containing uniforms whose indices to query.
        /// </para>
        /// </param>
        /// <param name="uniformCount">
        /// <para>
        /// Specifies the number of uniforms whose indices to query.
        /// </para>
        /// </param>
        /// <param name="uniformNames">
        /// <para>
        /// Specifies the address of an array of pointers to buffers containing the names of the queried uniforms.
        /// </para>
        /// </param>
        /// <param name="uniformIndices">
        /// <para>
        /// Specifies the address of an array that will receive the indices of the uniforms.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetUniformIndices")]
        [CLSCompliant(false)]
        public static void GetUniformIndices(Int32 program, Int32 uniformCount, String[] uniformNames, [OutAttribute] out Int32 uniformIndices) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Retrieve the index of a named uniform block
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the name of a program containing uniforms whose indices to query.
        /// </para>
        /// </param>
        /// <param name="uniformCount">
        /// <para>
        /// Specifies the number of uniforms whose indices to query.
        /// </para>
        /// </param>
        /// <param name="uniformNames">
        /// <para>
        /// Specifies the address of an array of pointers to buffers containing the names of the queried uniforms.
        /// </para>
        /// </param>
        /// <param name="uniformIndices">
        /// <para>
        /// Specifies the address of an array that will receive the indices of the uniforms.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetUniformIndices")]
        [CLSCompliant(false)]
        public static unsafe void GetUniformIndices(Int32 program, Int32 uniformCount, String[] uniformNames, [OutAttribute] Int32* uniformIndices) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Retrieve the index of a named uniform block
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the name of a program containing uniforms whose indices to query.
        /// </para>
        /// </param>
        /// <param name="uniformCount">
        /// <para>
        /// Specifies the number of uniforms whose indices to query.
        /// </para>
        /// </param>
        /// <param name="uniformNames">
        /// <para>
        /// Specifies the address of an array of pointers to buffers containing the names of the queried uniforms.
        /// </para>
        /// </param>
        /// <param name="uniformIndices">
        /// <para>
        /// Specifies the address of an array that will receive the indices of the uniforms.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetUniformIndices")]
        [CLSCompliant(false)]
        public static void GetUniformIndices(UInt32 program, Int32 uniformCount, String[] uniformNames, [OutAttribute] UInt32[] uniformIndices) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Retrieve the index of a named uniform block
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the name of a program containing uniforms whose indices to query.
        /// </para>
        /// </param>
        /// <param name="uniformCount">
        /// <para>
        /// Specifies the number of uniforms whose indices to query.
        /// </para>
        /// </param>
        /// <param name="uniformNames">
        /// <para>
        /// Specifies the address of an array of pointers to buffers containing the names of the queried uniforms.
        /// </para>
        /// </param>
        /// <param name="uniformIndices">
        /// <para>
        /// Specifies the address of an array that will receive the indices of the uniforms.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetUniformIndices")]
        [CLSCompliant(false)]
        public static void GetUniformIndices(UInt32 program, Int32 uniformCount, String[] uniformNames, [OutAttribute] out UInt32 uniformIndices) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Retrieve the index of a named uniform block
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the name of a program containing uniforms whose indices to query.
        /// </para>
        /// </param>
        /// <param name="uniformCount">
        /// <para>
        /// Specifies the number of uniforms whose indices to query.
        /// </para>
        /// </param>
        /// <param name="uniformNames">
        /// <para>
        /// Specifies the address of an array of pointers to buffers containing the names of the queried uniforms.
        /// </para>
        /// </param>
        /// <param name="uniformIndices">
        /// <para>
        /// Specifies the address of an array that will receive the indices of the uniforms.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetUniformIndices")]
        [CLSCompliant(false)]
        public static unsafe void GetUniformIndices(UInt32 program, Int32 uniformCount, String[] uniformNames, [OutAttribute] UInt32* uniformIndices) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Returns the value of a uniform variable
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be queried.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the value of the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetUniformiv")]
        [CLSCompliant(false)]
        public static void GetUniform(Int32 program, Int32 location, [OutAttribute] Int32[] @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Returns the value of a uniform variable
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be queried.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the value of the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetUniformiv")]
        [CLSCompliant(false)]
        public static void GetUniform(Int32 program, Int32 location, [OutAttribute] out Int32 @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Returns the value of a uniform variable
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be queried.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the value of the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetUniformiv")]
        [CLSCompliant(false)]
        public static unsafe void GetUniform(Int32 program, Int32 location, [OutAttribute] Int32* @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Returns the value of a uniform variable
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be queried.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the value of the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetUniformiv")]
        [CLSCompliant(false)]
        public static void GetUniform(UInt32 program, Int32 location, [OutAttribute] Int32[] @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Returns the value of a uniform variable
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be queried.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the value of the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetUniformiv")]
        [CLSCompliant(false)]
        public static void GetUniform(UInt32 program, Int32 location, [OutAttribute] out Int32 @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Returns the value of a uniform variable
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be queried.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the value of the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetUniformiv")]
        [CLSCompliant(false)]
        public static unsafe void GetUniform(UInt32 program, Int32 location, [OutAttribute] Int32* @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Returns the location of a uniform variable
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// Points to a null terminated string containing the name of the uniform variable whose location is to be queried.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetUniformLocation")]
        [CLSCompliant(false)]
        public static Int32 GetUniformLocation(Int32 program, String name) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Returns the location of a uniform variable
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// Points to a null terminated string containing the name of the uniform variable whose location is to be queried.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetUniformLocation")]
        [CLSCompliant(false)]
        public static Int32 GetUniformLocation(UInt32 program, String name) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Returns the value of a uniform variable
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be queried.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the value of the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetUniformuiv")]
        [CLSCompliant(false)]
        public static void GetUniform(UInt32 program, Int32 location, [OutAttribute] UInt32[] @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Returns the value of a uniform variable
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be queried.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the value of the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetUniformuiv")]
        [CLSCompliant(false)]
        public static void GetUniform(UInt32 program, Int32 location, [OutAttribute] out UInt32 @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Returns the value of a uniform variable
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be queried.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the value of the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetUniformuiv")]
        [CLSCompliant(false)]
        public static unsafe void GetUniform(UInt32 program, Int32 location, [OutAttribute] UInt32* @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, GL_VERTEX_ATTRIB_ARRAY_ENABLED, GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, GL_VERTEX_ATTRIB_ARRAY_TYPE, GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, GL_VERTEX_ATTRIB_ARRAY_INTEGER, GL_VERTEX_ATTRIB_ARRAY_DIVISOR, or GL_CURRENT_VERTEX_ATTRIB.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested data.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribfv")]
        [CLSCompliant(false)]
        public static void GetVertexAttrib(Int32 index, OpenTK.Graphics.ES30.All pname, [OutAttribute] Single[] @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, GL_VERTEX_ATTRIB_ARRAY_ENABLED, GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, GL_VERTEX_ATTRIB_ARRAY_TYPE, GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, GL_VERTEX_ATTRIB_ARRAY_INTEGER, GL_VERTEX_ATTRIB_ARRAY_DIVISOR, or GL_CURRENT_VERTEX_ATTRIB.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested data.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribfv")]
        [CLSCompliant(false)]
        public static void GetVertexAttrib(Int32 index, OpenTK.Graphics.ES30.All pname, [OutAttribute] out Single @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, GL_VERTEX_ATTRIB_ARRAY_ENABLED, GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, GL_VERTEX_ATTRIB_ARRAY_TYPE, GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, GL_VERTEX_ATTRIB_ARRAY_INTEGER, GL_VERTEX_ATTRIB_ARRAY_DIVISOR, or GL_CURRENT_VERTEX_ATTRIB.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested data.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribfv")]
        [CLSCompliant(false)]
        public static unsafe void GetVertexAttrib(Int32 index, OpenTK.Graphics.ES30.All pname, [OutAttribute] Single* @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, GL_VERTEX_ATTRIB_ARRAY_ENABLED, GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, GL_VERTEX_ATTRIB_ARRAY_TYPE, GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, GL_VERTEX_ATTRIB_ARRAY_INTEGER, GL_VERTEX_ATTRIB_ARRAY_DIVISOR, or GL_CURRENT_VERTEX_ATTRIB.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested data.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribfv")]
        [CLSCompliant(false)]
        public static void GetVertexAttrib(Int32 index, OpenTK.Graphics.ES30.VertexAttribParameter pname, [OutAttribute] Single[] @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, GL_VERTEX_ATTRIB_ARRAY_ENABLED, GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, GL_VERTEX_ATTRIB_ARRAY_TYPE, GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, GL_VERTEX_ATTRIB_ARRAY_INTEGER, GL_VERTEX_ATTRIB_ARRAY_DIVISOR, or GL_CURRENT_VERTEX_ATTRIB.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested data.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribfv")]
        [CLSCompliant(false)]
        public static void GetVertexAttrib(Int32 index, OpenTK.Graphics.ES30.VertexAttribParameter pname, [OutAttribute] out Single @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, GL_VERTEX_ATTRIB_ARRAY_ENABLED, GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, GL_VERTEX_ATTRIB_ARRAY_TYPE, GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, GL_VERTEX_ATTRIB_ARRAY_INTEGER, GL_VERTEX_ATTRIB_ARRAY_DIVISOR, or GL_CURRENT_VERTEX_ATTRIB.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested data.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribfv")]
        [CLSCompliant(false)]
        public static unsafe void GetVertexAttrib(Int32 index, OpenTK.Graphics.ES30.VertexAttribParameter pname, [OutAttribute] Single* @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, GL_VERTEX_ATTRIB_ARRAY_ENABLED, GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, GL_VERTEX_ATTRIB_ARRAY_TYPE, GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, GL_VERTEX_ATTRIB_ARRAY_INTEGER, GL_VERTEX_ATTRIB_ARRAY_DIVISOR, or GL_CURRENT_VERTEX_ATTRIB.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested data.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribfv")]
        [CLSCompliant(false)]
        public static void GetVertexAttrib(UInt32 index, OpenTK.Graphics.ES30.All pname, [OutAttribute] Single[] @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, GL_VERTEX_ATTRIB_ARRAY_ENABLED, GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, GL_VERTEX_ATTRIB_ARRAY_TYPE, GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, GL_VERTEX_ATTRIB_ARRAY_INTEGER, GL_VERTEX_ATTRIB_ARRAY_DIVISOR, or GL_CURRENT_VERTEX_ATTRIB.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested data.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribfv")]
        [CLSCompliant(false)]
        public static void GetVertexAttrib(UInt32 index, OpenTK.Graphics.ES30.All pname, [OutAttribute] out Single @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, GL_VERTEX_ATTRIB_ARRAY_ENABLED, GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, GL_VERTEX_ATTRIB_ARRAY_TYPE, GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, GL_VERTEX_ATTRIB_ARRAY_INTEGER, GL_VERTEX_ATTRIB_ARRAY_DIVISOR, or GL_CURRENT_VERTEX_ATTRIB.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested data.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribfv")]
        [CLSCompliant(false)]
        public static unsafe void GetVertexAttrib(UInt32 index, OpenTK.Graphics.ES30.All pname, [OutAttribute] Single* @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, GL_VERTEX_ATTRIB_ARRAY_ENABLED, GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, GL_VERTEX_ATTRIB_ARRAY_TYPE, GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, GL_VERTEX_ATTRIB_ARRAY_INTEGER, GL_VERTEX_ATTRIB_ARRAY_DIVISOR, or GL_CURRENT_VERTEX_ATTRIB.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested data.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribfv")]
        [CLSCompliant(false)]
        public static void GetVertexAttrib(UInt32 index, OpenTK.Graphics.ES30.VertexAttribParameter pname, [OutAttribute] Single[] @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, GL_VERTEX_ATTRIB_ARRAY_ENABLED, GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, GL_VERTEX_ATTRIB_ARRAY_TYPE, GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, GL_VERTEX_ATTRIB_ARRAY_INTEGER, GL_VERTEX_ATTRIB_ARRAY_DIVISOR, or GL_CURRENT_VERTEX_ATTRIB.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested data.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribfv")]
        [CLSCompliant(false)]
        public static void GetVertexAttrib(UInt32 index, OpenTK.Graphics.ES30.VertexAttribParameter pname, [OutAttribute] out Single @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, GL_VERTEX_ATTRIB_ARRAY_ENABLED, GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, GL_VERTEX_ATTRIB_ARRAY_TYPE, GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, GL_VERTEX_ATTRIB_ARRAY_INTEGER, GL_VERTEX_ATTRIB_ARRAY_DIVISOR, or GL_CURRENT_VERTEX_ATTRIB.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested data.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribfv")]
        [CLSCompliant(false)]
        public static unsafe void GetVertexAttrib(UInt32 index, OpenTK.Graphics.ES30.VertexAttribParameter pname, [OutAttribute] Single* @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]</summary>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetVertexAttribIiv")]
        [CLSCompliant(false)]
        public static void GetVertexAttribI(Int32 index, OpenTK.Graphics.ES30.All pname, [OutAttribute] out Int32 @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]</summary>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetVertexAttribIiv")]
        [CLSCompliant(false)]
        public static unsafe void GetVertexAttribI(Int32 index, OpenTK.Graphics.ES30.All pname, [OutAttribute] Int32* @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]</summary>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetVertexAttribIiv")]
        [CLSCompliant(false)]
        public static void GetVertexAttribI(UInt32 index, OpenTK.Graphics.ES30.All pname, [OutAttribute] out Int32 @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]</summary>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetVertexAttribIiv")]
        [CLSCompliant(false)]
        public static unsafe void GetVertexAttribI(UInt32 index, OpenTK.Graphics.ES30.All pname, [OutAttribute] Int32* @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]</summary>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetVertexAttribIuiv")]
        [CLSCompliant(false)]
        public static void GetVertexAttribI(UInt32 index, OpenTK.Graphics.ES30.All pname, [OutAttribute] out UInt32 @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]</summary>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glGetVertexAttribIuiv")]
        [CLSCompliant(false)]
        public static unsafe void GetVertexAttribI(UInt32 index, OpenTK.Graphics.ES30.All pname, [OutAttribute] UInt32* @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, GL_VERTEX_ATTRIB_ARRAY_ENABLED, GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, GL_VERTEX_ATTRIB_ARRAY_TYPE, GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, GL_VERTEX_ATTRIB_ARRAY_INTEGER, GL_VERTEX_ATTRIB_ARRAY_DIVISOR, or GL_CURRENT_VERTEX_ATTRIB.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested data.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribiv")]
        [CLSCompliant(false)]
        public static void GetVertexAttrib(Int32 index, OpenTK.Graphics.ES30.All pname, [OutAttribute] Int32[] @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, GL_VERTEX_ATTRIB_ARRAY_ENABLED, GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, GL_VERTEX_ATTRIB_ARRAY_TYPE, GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, GL_VERTEX_ATTRIB_ARRAY_INTEGER, GL_VERTEX_ATTRIB_ARRAY_DIVISOR, or GL_CURRENT_VERTEX_ATTRIB.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested data.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribiv")]
        [CLSCompliant(false)]
        public static void GetVertexAttrib(Int32 index, OpenTK.Graphics.ES30.All pname, [OutAttribute] out Int32 @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, GL_VERTEX_ATTRIB_ARRAY_ENABLED, GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, GL_VERTEX_ATTRIB_ARRAY_TYPE, GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, GL_VERTEX_ATTRIB_ARRAY_INTEGER, GL_VERTEX_ATTRIB_ARRAY_DIVISOR, or GL_CURRENT_VERTEX_ATTRIB.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested data.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribiv")]
        [CLSCompliant(false)]
        public static unsafe void GetVertexAttrib(Int32 index, OpenTK.Graphics.ES30.All pname, [OutAttribute] Int32* @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, GL_VERTEX_ATTRIB_ARRAY_ENABLED, GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, GL_VERTEX_ATTRIB_ARRAY_TYPE, GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, GL_VERTEX_ATTRIB_ARRAY_INTEGER, GL_VERTEX_ATTRIB_ARRAY_DIVISOR, or GL_CURRENT_VERTEX_ATTRIB.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested data.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribiv")]
        [CLSCompliant(false)]
        public static void GetVertexAttrib(Int32 index, OpenTK.Graphics.ES30.VertexAttribParameter pname, [OutAttribute] Int32[] @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, GL_VERTEX_ATTRIB_ARRAY_ENABLED, GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, GL_VERTEX_ATTRIB_ARRAY_TYPE, GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, GL_VERTEX_ATTRIB_ARRAY_INTEGER, GL_VERTEX_ATTRIB_ARRAY_DIVISOR, or GL_CURRENT_VERTEX_ATTRIB.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested data.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribiv")]
        [CLSCompliant(false)]
        public static void GetVertexAttrib(Int32 index, OpenTK.Graphics.ES30.VertexAttribParameter pname, [OutAttribute] out Int32 @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, GL_VERTEX_ATTRIB_ARRAY_ENABLED, GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, GL_VERTEX_ATTRIB_ARRAY_TYPE, GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, GL_VERTEX_ATTRIB_ARRAY_INTEGER, GL_VERTEX_ATTRIB_ARRAY_DIVISOR, or GL_CURRENT_VERTEX_ATTRIB.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested data.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribiv")]
        [CLSCompliant(false)]
        public static unsafe void GetVertexAttrib(Int32 index, OpenTK.Graphics.ES30.VertexAttribParameter pname, [OutAttribute] Int32* @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, GL_VERTEX_ATTRIB_ARRAY_ENABLED, GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, GL_VERTEX_ATTRIB_ARRAY_TYPE, GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, GL_VERTEX_ATTRIB_ARRAY_INTEGER, GL_VERTEX_ATTRIB_ARRAY_DIVISOR, or GL_CURRENT_VERTEX_ATTRIB.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested data.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribiv")]
        [CLSCompliant(false)]
        public static void GetVertexAttrib(UInt32 index, OpenTK.Graphics.ES30.All pname, [OutAttribute] Int32[] @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, GL_VERTEX_ATTRIB_ARRAY_ENABLED, GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, GL_VERTEX_ATTRIB_ARRAY_TYPE, GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, GL_VERTEX_ATTRIB_ARRAY_INTEGER, GL_VERTEX_ATTRIB_ARRAY_DIVISOR, or GL_CURRENT_VERTEX_ATTRIB.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested data.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribiv")]
        [CLSCompliant(false)]
        public static void GetVertexAttrib(UInt32 index, OpenTK.Graphics.ES30.All pname, [OutAttribute] out Int32 @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, GL_VERTEX_ATTRIB_ARRAY_ENABLED, GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, GL_VERTEX_ATTRIB_ARRAY_TYPE, GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, GL_VERTEX_ATTRIB_ARRAY_INTEGER, GL_VERTEX_ATTRIB_ARRAY_DIVISOR, or GL_CURRENT_VERTEX_ATTRIB.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested data.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribiv")]
        [CLSCompliant(false)]
        public static unsafe void GetVertexAttrib(UInt32 index, OpenTK.Graphics.ES30.All pname, [OutAttribute] Int32* @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, GL_VERTEX_ATTRIB_ARRAY_ENABLED, GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, GL_VERTEX_ATTRIB_ARRAY_TYPE, GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, GL_VERTEX_ATTRIB_ARRAY_INTEGER, GL_VERTEX_ATTRIB_ARRAY_DIVISOR, or GL_CURRENT_VERTEX_ATTRIB.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested data.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribiv")]
        [CLSCompliant(false)]
        public static void GetVertexAttrib(UInt32 index, OpenTK.Graphics.ES30.VertexAttribParameter pname, [OutAttribute] Int32[] @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, GL_VERTEX_ATTRIB_ARRAY_ENABLED, GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, GL_VERTEX_ATTRIB_ARRAY_TYPE, GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, GL_VERTEX_ATTRIB_ARRAY_INTEGER, GL_VERTEX_ATTRIB_ARRAY_DIVISOR, or GL_CURRENT_VERTEX_ATTRIB.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested data.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribiv")]
        [CLSCompliant(false)]
        public static void GetVertexAttrib(UInt32 index, OpenTK.Graphics.ES30.VertexAttribParameter pname, [OutAttribute] out Int32 @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, GL_VERTEX_ATTRIB_ARRAY_ENABLED, GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, GL_VERTEX_ATTRIB_ARRAY_TYPE, GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, GL_VERTEX_ATTRIB_ARRAY_INTEGER, GL_VERTEX_ATTRIB_ARRAY_DIVISOR, or GL_CURRENT_VERTEX_ATTRIB.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested data.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribiv")]
        [CLSCompliant(false)]
        public static unsafe void GetVertexAttrib(UInt32 index, OpenTK.Graphics.ES30.VertexAttribParameter pname, [OutAttribute] Int32* @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Return the address of the specified generic vertex attribute pointer
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the generic vertex attribute parameter to be returned.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of the generic vertex attribute parameter to be returned. Must be GL_VERTEX_ATTRIB_ARRAY_POINTER.
        /// </para>
        /// </param>
        /// <param name="pointer">
        /// <para>
        /// Returns the pointer value.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribPointerv")]
        [CLSCompliant(false)]
        public static void GetVertexAttribPointer(Int32 index, OpenTK.Graphics.ES30.All pname, [OutAttribute] IntPtr pointer) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Return the address of the specified generic vertex attribute pointer
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the generic vertex attribute parameter to be returned.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of the generic vertex attribute parameter to be returned. Must be GL_VERTEX_ATTRIB_ARRAY_POINTER.
        /// </para>
        /// </param>
        /// <param name="pointer">
        /// <para>
        /// Returns the pointer value.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribPointerv")]
        [CLSCompliant(false)]
        public static void GetVertexAttribPointer<T2>(Int32 index, OpenTK.Graphics.ES30.All pname, [InAttribute, OutAttribute] T2[] pointer)
            where T2 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Return the address of the specified generic vertex attribute pointer
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the generic vertex attribute parameter to be returned.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of the generic vertex attribute parameter to be returned. Must be GL_VERTEX_ATTRIB_ARRAY_POINTER.
        /// </para>
        /// </param>
        /// <param name="pointer">
        /// <para>
        /// Returns the pointer value.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribPointerv")]
        [CLSCompliant(false)]
        public static void GetVertexAttribPointer<T2>(Int32 index, OpenTK.Graphics.ES30.All pname, [InAttribute, OutAttribute] T2[,] pointer)
            where T2 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Return the address of the specified generic vertex attribute pointer
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the generic vertex attribute parameter to be returned.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of the generic vertex attribute parameter to be returned. Must be GL_VERTEX_ATTRIB_ARRAY_POINTER.
        /// </para>
        /// </param>
        /// <param name="pointer">
        /// <para>
        /// Returns the pointer value.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribPointerv")]
        [CLSCompliant(false)]
        public static void GetVertexAttribPointer<T2>(Int32 index, OpenTK.Graphics.ES30.All pname, [InAttribute, OutAttribute] T2[,,] pointer)
            where T2 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Return the address of the specified generic vertex attribute pointer
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the generic vertex attribute parameter to be returned.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of the generic vertex attribute parameter to be returned. Must be GL_VERTEX_ATTRIB_ARRAY_POINTER.
        /// </para>
        /// </param>
        /// <param name="pointer">
        /// <para>
        /// Returns the pointer value.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribPointerv")]
        [CLSCompliant(false)]
        public static void GetVertexAttribPointer<T2>(Int32 index, OpenTK.Graphics.ES30.All pname, [InAttribute, OutAttribute] ref T2 pointer)
            where T2 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Return the address of the specified generic vertex attribute pointer
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the generic vertex attribute parameter to be returned.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of the generic vertex attribute parameter to be returned. Must be GL_VERTEX_ATTRIB_ARRAY_POINTER.
        /// </para>
        /// </param>
        /// <param name="pointer">
        /// <para>
        /// Returns the pointer value.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribPointerv")]
        [CLSCompliant(false)]
        public static void GetVertexAttribPointer(Int32 index, OpenTK.Graphics.ES30.VertexAttribPointerParameter pname, [OutAttribute] IntPtr pointer) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Return the address of the specified generic vertex attribute pointer
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the generic vertex attribute parameter to be returned.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of the generic vertex attribute parameter to be returned. Must be GL_VERTEX_ATTRIB_ARRAY_POINTER.
        /// </para>
        /// </param>
        /// <param name="pointer">
        /// <para>
        /// Returns the pointer value.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribPointerv")]
        [CLSCompliant(false)]
        public static void GetVertexAttribPointer<T2>(Int32 index, OpenTK.Graphics.ES30.VertexAttribPointerParameter pname, [InAttribute, OutAttribute] T2[] pointer)
            where T2 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Return the address of the specified generic vertex attribute pointer
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the generic vertex attribute parameter to be returned.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of the generic vertex attribute parameter to be returned. Must be GL_VERTEX_ATTRIB_ARRAY_POINTER.
        /// </para>
        /// </param>
        /// <param name="pointer">
        /// <para>
        /// Returns the pointer value.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribPointerv")]
        [CLSCompliant(false)]
        public static void GetVertexAttribPointer<T2>(Int32 index, OpenTK.Graphics.ES30.VertexAttribPointerParameter pname, [InAttribute, OutAttribute] T2[,] pointer)
            where T2 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Return the address of the specified generic vertex attribute pointer
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the generic vertex attribute parameter to be returned.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of the generic vertex attribute parameter to be returned. Must be GL_VERTEX_ATTRIB_ARRAY_POINTER.
        /// </para>
        /// </param>
        /// <param name="pointer">
        /// <para>
        /// Returns the pointer value.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribPointerv")]
        [CLSCompliant(false)]
        public static void GetVertexAttribPointer<T2>(Int32 index, OpenTK.Graphics.ES30.VertexAttribPointerParameter pname, [InAttribute, OutAttribute] T2[,,] pointer)
            where T2 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Return the address of the specified generic vertex attribute pointer
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the generic vertex attribute parameter to be returned.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of the generic vertex attribute parameter to be returned. Must be GL_VERTEX_ATTRIB_ARRAY_POINTER.
        /// </para>
        /// </param>
        /// <param name="pointer">
        /// <para>
        /// Returns the pointer value.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribPointerv")]
        [CLSCompliant(false)]
        public static void GetVertexAttribPointer<T2>(Int32 index, OpenTK.Graphics.ES30.VertexAttribPointerParameter pname, [InAttribute, OutAttribute] ref T2 pointer)
            where T2 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Return the address of the specified generic vertex attribute pointer
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the generic vertex attribute parameter to be returned.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of the generic vertex attribute parameter to be returned. Must be GL_VERTEX_ATTRIB_ARRAY_POINTER.
        /// </para>
        /// </param>
        /// <param name="pointer">
        /// <para>
        /// Returns the pointer value.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribPointerv")]
        [CLSCompliant(false)]
        public static void GetVertexAttribPointer(UInt32 index, OpenTK.Graphics.ES30.All pname, [OutAttribute] IntPtr pointer) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Return the address of the specified generic vertex attribute pointer
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the generic vertex attribute parameter to be returned.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of the generic vertex attribute parameter to be returned. Must be GL_VERTEX_ATTRIB_ARRAY_POINTER.
        /// </para>
        /// </param>
        /// <param name="pointer">
        /// <para>
        /// Returns the pointer value.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribPointerv")]
        [CLSCompliant(false)]
        public static void GetVertexAttribPointer<T2>(UInt32 index, OpenTK.Graphics.ES30.All pname, [InAttribute, OutAttribute] T2[] pointer)
            where T2 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Return the address of the specified generic vertex attribute pointer
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the generic vertex attribute parameter to be returned.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of the generic vertex attribute parameter to be returned. Must be GL_VERTEX_ATTRIB_ARRAY_POINTER.
        /// </para>
        /// </param>
        /// <param name="pointer">
        /// <para>
        /// Returns the pointer value.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribPointerv")]
        [CLSCompliant(false)]
        public static void GetVertexAttribPointer<T2>(UInt32 index, OpenTK.Graphics.ES30.All pname, [InAttribute, OutAttribute] T2[,] pointer)
            where T2 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Return the address of the specified generic vertex attribute pointer
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the generic vertex attribute parameter to be returned.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of the generic vertex attribute parameter to be returned. Must be GL_VERTEX_ATTRIB_ARRAY_POINTER.
        /// </para>
        /// </param>
        /// <param name="pointer">
        /// <para>
        /// Returns the pointer value.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribPointerv")]
        [CLSCompliant(false)]
        public static void GetVertexAttribPointer<T2>(UInt32 index, OpenTK.Graphics.ES30.All pname, [InAttribute, OutAttribute] T2[,,] pointer)
            where T2 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Return the address of the specified generic vertex attribute pointer
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the generic vertex attribute parameter to be returned.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of the generic vertex attribute parameter to be returned. Must be GL_VERTEX_ATTRIB_ARRAY_POINTER.
        /// </para>
        /// </param>
        /// <param name="pointer">
        /// <para>
        /// Returns the pointer value.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribPointerv")]
        [CLSCompliant(false)]
        public static void GetVertexAttribPointer<T2>(UInt32 index, OpenTK.Graphics.ES30.All pname, [InAttribute, OutAttribute] ref T2 pointer)
            where T2 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Return the address of the specified generic vertex attribute pointer
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the generic vertex attribute parameter to be returned.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of the generic vertex attribute parameter to be returned. Must be GL_VERTEX_ATTRIB_ARRAY_POINTER.
        /// </para>
        /// </param>
        /// <param name="pointer">
        /// <para>
        /// Returns the pointer value.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribPointerv")]
        [CLSCompliant(false)]
        public static void GetVertexAttribPointer(UInt32 index, OpenTK.Graphics.ES30.VertexAttribPointerParameter pname, [OutAttribute] IntPtr pointer) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Return the address of the specified generic vertex attribute pointer
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the generic vertex attribute parameter to be returned.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of the generic vertex attribute parameter to be returned. Must be GL_VERTEX_ATTRIB_ARRAY_POINTER.
        /// </para>
        /// </param>
        /// <param name="pointer">
        /// <para>
        /// Returns the pointer value.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribPointerv")]
        [CLSCompliant(false)]
        public static void GetVertexAttribPointer<T2>(UInt32 index, OpenTK.Graphics.ES30.VertexAttribPointerParameter pname, [InAttribute, OutAttribute] T2[] pointer)
            where T2 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Return the address of the specified generic vertex attribute pointer
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the generic vertex attribute parameter to be returned.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of the generic vertex attribute parameter to be returned. Must be GL_VERTEX_ATTRIB_ARRAY_POINTER.
        /// </para>
        /// </param>
        /// <param name="pointer">
        /// <para>
        /// Returns the pointer value.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribPointerv")]
        [CLSCompliant(false)]
        public static void GetVertexAttribPointer<T2>(UInt32 index, OpenTK.Graphics.ES30.VertexAttribPointerParameter pname, [InAttribute, OutAttribute] T2[,] pointer)
            where T2 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Return the address of the specified generic vertex attribute pointer
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the generic vertex attribute parameter to be returned.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of the generic vertex attribute parameter to be returned. Must be GL_VERTEX_ATTRIB_ARRAY_POINTER.
        /// </para>
        /// </param>
        /// <param name="pointer">
        /// <para>
        /// Returns the pointer value.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribPointerv")]
        [CLSCompliant(false)]
        public static void GetVertexAttribPointer<T2>(UInt32 index, OpenTK.Graphics.ES30.VertexAttribPointerParameter pname, [InAttribute, OutAttribute] T2[,,] pointer)
            where T2 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Return the address of the specified generic vertex attribute pointer
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the generic vertex attribute parameter to be returned.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of the generic vertex attribute parameter to be returned. Must be GL_VERTEX_ATTRIB_ARRAY_POINTER.
        /// </para>
        /// </param>
        /// <param name="pointer">
        /// <para>
        /// Returns the pointer value.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribPointerv")]
        [CLSCompliant(false)]
        public static void GetVertexAttribPointer<T2>(UInt32 index, OpenTK.Graphics.ES30.VertexAttribPointerParameter pname, [InAttribute, OutAttribute] ref T2 pointer)
            where T2 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Specify implementation-specific hints
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies a symbolic constant indicating the behavior to be controlled. GL_LINE_SMOOTH_HINT, GL_POLYGON_SMOOTH_HINT, GL_TEXTURE_COMPRESSION_HINT, and GL_FRAGMENT_SHADER_DERIVATIVE_HINT are accepted.
        /// </para>
        /// </param>
        /// <param name="mode">
        /// <para>
        /// Specifies a symbolic constant indicating the desired behavior. GL_FASTEST, GL_NICEST, and GL_DONT_CARE are accepted.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glHint")]
        public static void Hint(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All mode) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Specify implementation-specific hints
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies a symbolic constant indicating the behavior to be controlled. GL_LINE_SMOOTH_HINT, GL_POLYGON_SMOOTH_HINT, GL_TEXTURE_COMPRESSION_HINT, and GL_FRAGMENT_SHADER_DERIVATIVE_HINT are accepted.
        /// </para>
        /// </param>
        /// <param name="mode">
        /// <para>
        /// Specifies a symbolic constant indicating the desired behavior. GL_FASTEST, GL_NICEST, and GL_DONT_CARE are accepted.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glHint")]
        public static void Hint(OpenTK.Graphics.ES30.HintTarget target, OpenTK.Graphics.ES30.HintMode mode) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Invalidate the content some or all of a framebuffer object's attachments
        /// </summary>
        /// <param name="target">
        /// <para>
        /// The target to which the framebuffer is attached. target must be GL_FRAMEBUFFER, GL_DRAW_FRAMEBUFFER, or GL_READ_FRAMEBUFFER.
        /// </para>
        /// </param>
        /// <param name="numAttachments">
        /// <para>
        /// The number of entries in the attachments array.
        /// </para>
        /// </param>
        /// <param name="attachments">
        /// <para>
        /// The address of an array identifying the attachments to be invalidated.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glInvalidateFramebuffer")]
        [CLSCompliant(false)]
        public static void InvalidateFramebuffer(OpenTK.Graphics.ES30.All target, Int32 numAttachments, OpenTK.Graphics.ES30.All[] attachments) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Invalidate the content some or all of a framebuffer object's attachments
        /// </summary>
        /// <param name="target">
        /// <para>
        /// The target to which the framebuffer is attached. target must be GL_FRAMEBUFFER, GL_DRAW_FRAMEBUFFER, or GL_READ_FRAMEBUFFER.
        /// </para>
        /// </param>
        /// <param name="numAttachments">
        /// <para>
        /// The number of entries in the attachments array.
        /// </para>
        /// </param>
        /// <param name="attachments">
        /// <para>
        /// The address of an array identifying the attachments to be invalidated.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glInvalidateFramebuffer")]
        [CLSCompliant(false)]
        public static void InvalidateFramebuffer(OpenTK.Graphics.ES30.All target, Int32 numAttachments, ref OpenTK.Graphics.ES30.All attachments) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Invalidate the content some or all of a framebuffer object's attachments
        /// </summary>
        /// <param name="target">
        /// <para>
        /// The target to which the framebuffer is attached. target must be GL_FRAMEBUFFER, GL_DRAW_FRAMEBUFFER, or GL_READ_FRAMEBUFFER.
        /// </para>
        /// </param>
        /// <param name="numAttachments">
        /// <para>
        /// The number of entries in the attachments array.
        /// </para>
        /// </param>
        /// <param name="attachments">
        /// <para>
        /// The address of an array identifying the attachments to be invalidated.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glInvalidateFramebuffer")]
        [CLSCompliant(false)]
        public static unsafe void InvalidateFramebuffer(OpenTK.Graphics.ES30.All target, Int32 numAttachments, OpenTK.Graphics.ES30.All* attachments) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Invalidate the content some or all of a framebuffer object's attachments
        /// </summary>
        /// <param name="target">
        /// <para>
        /// The target to which the framebuffer is attached. target must be GL_FRAMEBUFFER, GL_DRAW_FRAMEBUFFER, or GL_READ_FRAMEBUFFER.
        /// </para>
        /// </param>
        /// <param name="numAttachments">
        /// <para>
        /// The number of entries in the attachments array.
        /// </para>
        /// </param>
        /// <param name="attachments">
        /// <para>
        /// The address of an array identifying the attachments to be invalidated.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glInvalidateFramebuffer")]
        [CLSCompliant(false)]
        public static void InvalidateFramebuffer(OpenTK.Graphics.ES30.FramebufferTarget target, Int32 numAttachments, OpenTK.Graphics.ES30.FramebufferAttachment[] attachments) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Invalidate the content some or all of a framebuffer object's attachments
        /// </summary>
        /// <param name="target">
        /// <para>
        /// The target to which the framebuffer is attached. target must be GL_FRAMEBUFFER, GL_DRAW_FRAMEBUFFER, or GL_READ_FRAMEBUFFER.
        /// </para>
        /// </param>
        /// <param name="numAttachments">
        /// <para>
        /// The number of entries in the attachments array.
        /// </para>
        /// </param>
        /// <param name="attachments">
        /// <para>
        /// The address of an array identifying the attachments to be invalidated.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glInvalidateFramebuffer")]
        [CLSCompliant(false)]
        public static void InvalidateFramebuffer(OpenTK.Graphics.ES30.FramebufferTarget target, Int32 numAttachments, ref OpenTK.Graphics.ES30.FramebufferAttachment attachments) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Invalidate the content some or all of a framebuffer object's attachments
        /// </summary>
        /// <param name="target">
        /// <para>
        /// The target to which the framebuffer is attached. target must be GL_FRAMEBUFFER, GL_DRAW_FRAMEBUFFER, or GL_READ_FRAMEBUFFER.
        /// </para>
        /// </param>
        /// <param name="numAttachments">
        /// <para>
        /// The number of entries in the attachments array.
        /// </para>
        /// </param>
        /// <param name="attachments">
        /// <para>
        /// The address of an array identifying the attachments to be invalidated.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glInvalidateFramebuffer")]
        [CLSCompliant(false)]
        public static unsafe void InvalidateFramebuffer(OpenTK.Graphics.ES30.FramebufferTarget target, Int32 numAttachments, OpenTK.Graphics.ES30.FramebufferAttachment* attachments) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Invalidate the content of a region of some or all of a framebuffer object's attachments
        /// </summary>
        /// <param name="target">
        /// <para>
        /// The target to which the framebuffer is attached. target must be GL_FRAMEBUFFER, GL_DRAW_FRAMEBUFFER, or GL_READ_FRAMEBUFFER.
        /// </para>
        /// </param>
        /// <param name="numAttachments">
        /// <para>
        /// The number of entries in the attachments array.
        /// </para>
        /// </param>
        /// <param name="attachments">
        /// <para>
        /// The address of an array identifying the attachments to be invalidated.
        /// </para>
        /// </param>
        /// <param name="x">
        /// <para>
        /// The X offset of the region to be invalidated.
        /// </para>
        /// </param>
        /// <param name="y">
        /// <para>
        /// The Y offset of the region to be invalidated.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// The width of the region to be invalidated.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// The height of the region to be invalidated.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glInvalidateSubFramebuffer")]
        [CLSCompliant(false)]
        public static void InvalidateSubFramebuffer(OpenTK.Graphics.ES30.All target, Int32 numAttachments, OpenTK.Graphics.ES30.All[] attachments, Int32 x, Int32 y, Int32 width, Int32 height) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Invalidate the content of a region of some or all of a framebuffer object's attachments
        /// </summary>
        /// <param name="target">
        /// <para>
        /// The target to which the framebuffer is attached. target must be GL_FRAMEBUFFER, GL_DRAW_FRAMEBUFFER, or GL_READ_FRAMEBUFFER.
        /// </para>
        /// </param>
        /// <param name="numAttachments">
        /// <para>
        /// The number of entries in the attachments array.
        /// </para>
        /// </param>
        /// <param name="attachments">
        /// <para>
        /// The address of an array identifying the attachments to be invalidated.
        /// </para>
        /// </param>
        /// <param name="x">
        /// <para>
        /// The X offset of the region to be invalidated.
        /// </para>
        /// </param>
        /// <param name="y">
        /// <para>
        /// The Y offset of the region to be invalidated.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// The width of the region to be invalidated.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// The height of the region to be invalidated.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glInvalidateSubFramebuffer")]
        [CLSCompliant(false)]
        public static void InvalidateSubFramebuffer(OpenTK.Graphics.ES30.All target, Int32 numAttachments, ref OpenTK.Graphics.ES30.All attachments, Int32 x, Int32 y, Int32 width, Int32 height) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Invalidate the content of a region of some or all of a framebuffer object's attachments
        /// </summary>
        /// <param name="target">
        /// <para>
        /// The target to which the framebuffer is attached. target must be GL_FRAMEBUFFER, GL_DRAW_FRAMEBUFFER, or GL_READ_FRAMEBUFFER.
        /// </para>
        /// </param>
        /// <param name="numAttachments">
        /// <para>
        /// The number of entries in the attachments array.
        /// </para>
        /// </param>
        /// <param name="attachments">
        /// <para>
        /// The address of an array identifying the attachments to be invalidated.
        /// </para>
        /// </param>
        /// <param name="x">
        /// <para>
        /// The X offset of the region to be invalidated.
        /// </para>
        /// </param>
        /// <param name="y">
        /// <para>
        /// The Y offset of the region to be invalidated.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// The width of the region to be invalidated.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// The height of the region to be invalidated.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glInvalidateSubFramebuffer")]
        [CLSCompliant(false)]
        public static unsafe void InvalidateSubFramebuffer(OpenTK.Graphics.ES30.All target, Int32 numAttachments, OpenTK.Graphics.ES30.All* attachments, Int32 x, Int32 y, Int32 width, Int32 height) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Invalidate the content of a region of some or all of a framebuffer object's attachments
        /// </summary>
        /// <param name="target">
        /// <para>
        /// The target to which the framebuffer is attached. target must be GL_FRAMEBUFFER, GL_DRAW_FRAMEBUFFER, or GL_READ_FRAMEBUFFER.
        /// </para>
        /// </param>
        /// <param name="numAttachments">
        /// <para>
        /// The number of entries in the attachments array.
        /// </para>
        /// </param>
        /// <param name="attachments">
        /// <para>
        /// The address of an array identifying the attachments to be invalidated.
        /// </para>
        /// </param>
        /// <param name="x">
        /// <para>
        /// The X offset of the region to be invalidated.
        /// </para>
        /// </param>
        /// <param name="y">
        /// <para>
        /// The Y offset of the region to be invalidated.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// The width of the region to be invalidated.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// The height of the region to be invalidated.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glInvalidateSubFramebuffer")]
        [CLSCompliant(false)]
        public static void InvalidateSubFramebuffer(OpenTK.Graphics.ES30.FramebufferTarget target, Int32 numAttachments, OpenTK.Graphics.ES30.FramebufferAttachment[] attachments, Int32 x, Int32 y, Int32 width, Int32 height) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Invalidate the content of a region of some or all of a framebuffer object's attachments
        /// </summary>
        /// <param name="target">
        /// <para>
        /// The target to which the framebuffer is attached. target must be GL_FRAMEBUFFER, GL_DRAW_FRAMEBUFFER, or GL_READ_FRAMEBUFFER.
        /// </para>
        /// </param>
        /// <param name="numAttachments">
        /// <para>
        /// The number of entries in the attachments array.
        /// </para>
        /// </param>
        /// <param name="attachments">
        /// <para>
        /// The address of an array identifying the attachments to be invalidated.
        /// </para>
        /// </param>
        /// <param name="x">
        /// <para>
        /// The X offset of the region to be invalidated.
        /// </para>
        /// </param>
        /// <param name="y">
        /// <para>
        /// The Y offset of the region to be invalidated.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// The width of the region to be invalidated.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// The height of the region to be invalidated.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glInvalidateSubFramebuffer")]
        [CLSCompliant(false)]
        public static void InvalidateSubFramebuffer(OpenTK.Graphics.ES30.FramebufferTarget target, Int32 numAttachments, ref OpenTK.Graphics.ES30.FramebufferAttachment attachments, Int32 x, Int32 y, Int32 width, Int32 height) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Invalidate the content of a region of some or all of a framebuffer object's attachments
        /// </summary>
        /// <param name="target">
        /// <para>
        /// The target to which the framebuffer is attached. target must be GL_FRAMEBUFFER, GL_DRAW_FRAMEBUFFER, or GL_READ_FRAMEBUFFER.
        /// </para>
        /// </param>
        /// <param name="numAttachments">
        /// <para>
        /// The number of entries in the attachments array.
        /// </para>
        /// </param>
        /// <param name="attachments">
        /// <para>
        /// The address of an array identifying the attachments to be invalidated.
        /// </para>
        /// </param>
        /// <param name="x">
        /// <para>
        /// The X offset of the region to be invalidated.
        /// </para>
        /// </param>
        /// <param name="y">
        /// <para>
        /// The Y offset of the region to be invalidated.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// The width of the region to be invalidated.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// The height of the region to be invalidated.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glInvalidateSubFramebuffer")]
        [CLSCompliant(false)]
        public static unsafe void InvalidateSubFramebuffer(OpenTK.Graphics.ES30.FramebufferTarget target, Int32 numAttachments, OpenTK.Graphics.ES30.FramebufferAttachment* attachments, Int32 x, Int32 y, Int32 width, Int32 height) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Determine if a name corresponds to a buffer object
        /// </summary>
        /// <param name="buffer">
        /// <para>
        /// Specifies a value that may be the name of a buffer object.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glIsBuffer")]
        [CLSCompliant(false)]
        public static bool IsBuffer(Int32 buffer) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Determine if a name corresponds to a buffer object
        /// </summary>
        /// <param name="buffer">
        /// <para>
        /// Specifies a value that may be the name of a buffer object.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glIsBuffer")]
        [CLSCompliant(false)]
        public static bool IsBuffer(UInt32 buffer) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Test whether a capability is enabled
        /// </summary>
        /// <param name="cap">
        /// <para>
        /// Specifies a symbolic constant indicating a GL capability.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the capability.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glIsEnabled")]
        public static bool IsEnabled(OpenTK.Graphics.ES30.All cap) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Test whether a capability is enabled
        /// </summary>
        /// <param name="cap">
        /// <para>
        /// Specifies a symbolic constant indicating a GL capability.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the capability.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glIsEnabled")]
        public static bool IsEnabled(OpenTK.Graphics.ES30.EnableCap cap) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Determine if a name corresponds to a framebuffer object
        /// </summary>
        /// <param name="framebuffer">
        /// <para>
        /// Specifies a value that may be the name of a framebuffer object.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glIsFramebuffer")]
        [CLSCompliant(false)]
        public static bool IsFramebuffer(Int32 framebuffer) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Determine if a name corresponds to a framebuffer object
        /// </summary>
        /// <param name="framebuffer">
        /// <para>
        /// Specifies a value that may be the name of a framebuffer object.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glIsFramebuffer")]
        [CLSCompliant(false)]
        public static bool IsFramebuffer(UInt32 framebuffer) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Determines if a name corresponds to a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies a potential program object.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glIsProgram")]
        [CLSCompliant(false)]
        public static bool IsProgram(Int32 program) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Determines if a name corresponds to a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies a potential program object.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glIsProgram")]
        [CLSCompliant(false)]
        public static bool IsProgram(UInt32 program) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Determine if a name corresponds to a query object
        /// </summary>
        /// <param name="id">
        /// <para>
        /// Specifies a value that may be the name of a query object.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glIsQuery")]
        [CLSCompliant(false)]
        public static bool IsQuery(Int32 id) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Determine if a name corresponds to a query object
        /// </summary>
        /// <param name="id">
        /// <para>
        /// Specifies a value that may be the name of a query object.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glIsQuery")]
        [CLSCompliant(false)]
        public static bool IsQuery(UInt32 id) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Determine if a name corresponds to a renderbuffer object
        /// </summary>
        /// <param name="renderbuffer">
        /// <para>
        /// Specifies a value that may be the name of a renderbuffer object.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glIsRenderbuffer")]
        [CLSCompliant(false)]
        public static bool IsRenderbuffer(Int32 renderbuffer) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Determine if a name corresponds to a renderbuffer object
        /// </summary>
        /// <param name="renderbuffer">
        /// <para>
        /// Specifies a value that may be the name of a renderbuffer object.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glIsRenderbuffer")]
        [CLSCompliant(false)]
        public static bool IsRenderbuffer(UInt32 renderbuffer) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Determine if a name corresponds to a sampler object
        /// </summary>
        /// <param name="id">
        /// <para>
        /// Specifies a value that may be the name of a sampler object.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glIsSampler")]
        [CLSCompliant(false)]
        public static bool IsSampler(Int32 sampler) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Determine if a name corresponds to a sampler object
        /// </summary>
        /// <param name="id">
        /// <para>
        /// Specifies a value that may be the name of a sampler object.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glIsSampler")]
        [CLSCompliant(false)]
        public static bool IsSampler(UInt32 sampler) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Determines if a name corresponds to a shader object
        /// </summary>
        /// <param name="shader">
        /// <para>
        /// Specifies a potential shader object.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glIsShader")]
        [CLSCompliant(false)]
        public static bool IsShader(Int32 shader) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Determines if a name corresponds to a shader object
        /// </summary>
        /// <param name="shader">
        /// <para>
        /// Specifies a potential shader object.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glIsShader")]
        [CLSCompliant(false)]
        public static bool IsShader(UInt32 shader) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Determine if a name corresponds to a sync object
        /// </summary>
        /// <param name="sync">
        /// <para>
        /// Specifies a value that may be the name of a sync object.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glIsSync")]
        public static bool IsSync(IntPtr sync) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Determine if a name corresponds to a texture
        /// </summary>
        /// <param name="texture">
        /// <para>
        /// Specifies a value that may be the name of a texture.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glIsTexture")]
        [CLSCompliant(false)]
        public static bool IsTexture(Int32 texture) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Determine if a name corresponds to a texture
        /// </summary>
        /// <param name="texture">
        /// <para>
        /// Specifies a value that may be the name of a texture.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glIsTexture")]
        [CLSCompliant(false)]
        public static bool IsTexture(UInt32 texture) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Determine if a name corresponds to a transform feedback object
        /// </summary>
        /// <param name="id">
        /// <para>
        /// Specifies a value that may be the name of a transform feedback object.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glIsTransformFeedback")]
        [CLSCompliant(false)]
        public static bool IsTransformFeedback(Int32 id) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Determine if a name corresponds to a transform feedback object
        /// </summary>
        /// <param name="id">
        /// <para>
        /// Specifies a value that may be the name of a transform feedback object.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glIsTransformFeedback")]
        [CLSCompliant(false)]
        public static bool IsTransformFeedback(UInt32 id) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Determine if a name corresponds to a vertex array object
        /// </summary>
        /// <param name="array">
        /// <para>
        /// Specifies a value that may be the name of a vertex array object.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glIsVertexArray")]
        [CLSCompliant(false)]
        public static bool IsVertexArray(Int32 array) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Determine if a name corresponds to a vertex array object
        /// </summary>
        /// <param name="array">
        /// <para>
        /// Specifies a value that may be the name of a vertex array object.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glIsVertexArray")]
        [CLSCompliant(false)]
        public static bool IsVertexArray(UInt32 array) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Specify the width of rasterized lines
        /// </summary>
        /// <param name="width">
        /// <para>
        /// Specifies the width of rasterized lines. The initial value is 1.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glLineWidth")]
        public static void LineWidth(Single width) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Links a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program object to be linked.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glLinkProgram")]
        [CLSCompliant(false)]
        public static void LinkProgram(Int32 program) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Links a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program object to be linked.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glLinkProgram")]
        [CLSCompliant(false)]
        public static void LinkProgram(UInt32 program) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Map a section of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies a binding to which the target buffer is bound.
        /// </para>
        /// </param>
        /// <param name="offset">
        /// <para>
        /// Specifies a the starting offset within the buffer of the range to be mapped.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies a length of the range to be mapped.
        /// </para>
        /// </param>
        /// <param name="access">
        /// <para>
        /// Specifies a combination of access flags indicating the desired access to the range.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glMapBufferRange")]
        public static IntPtr MapBufferRange(OpenTK.Graphics.ES30.All target, IntPtr offset, IntPtr length, OpenTK.Graphics.ES30.All access) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Map a section of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies a binding to which the target buffer is bound.
        /// </para>
        /// </param>
        /// <param name="offset">
        /// <para>
        /// Specifies a the starting offset within the buffer of the range to be mapped.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies a length of the range to be mapped.
        /// </para>
        /// </param>
        /// <param name="access">
        /// <para>
        /// Specifies a combination of access flags indicating the desired access to the range.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glMapBufferRange")]
        public static IntPtr MapBufferRange(OpenTK.Graphics.ES30.BufferTarget target, IntPtr offset, IntPtr length, OpenTK.Graphics.ES30.BufferAccessMask access) { throw new NotImplementedException(); }

        /// <summary>
        /// Label a named object identified within a namespace
        /// </summary>
        /// <param name="identifier">
        /// <para>
        /// The namespace from which the name of the object is allocated.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// The name of the object to label.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// The length of the label to be used for the object.
        /// </para>
        /// </param>
        /// <param name="label">
        /// <para>
        /// The address of a string containing the label to assign to the object.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glObjectLabel")]
        [CLSCompliant(false)]
        public static void ObjectLabel(OpenTK.Graphics.ES30.All identifier, Int32 name, Int32 length, String label) { throw new NotImplementedException(); }

        /// <summary>
        /// Label a named object identified within a namespace
        /// </summary>
        /// <param name="identifier">
        /// <para>
        /// The namespace from which the name of the object is allocated.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// The name of the object to label.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// The length of the label to be used for the object.
        /// </para>
        /// </param>
        /// <param name="label">
        /// <para>
        /// The address of a string containing the label to assign to the object.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glObjectLabel")]
        [CLSCompliant(false)]
        public static void ObjectLabel(OpenTK.Graphics.ES30.All identifier, UInt32 name, Int32 length, String label) { throw new NotImplementedException(); }

        /// <summary>
        /// Label a named object identified within a namespace
        /// </summary>
        /// <param name="identifier">
        /// <para>
        /// The namespace from which the name of the object is allocated.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// The name of the object to label.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// The length of the label to be used for the object.
        /// </para>
        /// </param>
        /// <param name="label">
        /// <para>
        /// The address of a string containing the label to assign to the object.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glObjectLabel")]
        [CLSCompliant(false)]
        public static void ObjectLabel(OpenTK.Graphics.ES30.ObjectLabelIdentifier identifier, Int32 name, Int32 length, String label) { throw new NotImplementedException(); }

        /// <summary>
        /// Label a named object identified within a namespace
        /// </summary>
        /// <param name="identifier">
        /// <para>
        /// The namespace from which the name of the object is allocated.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// The name of the object to label.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// The length of the label to be used for the object.
        /// </para>
        /// </param>
        /// <param name="label">
        /// <para>
        /// The address of a string containing the label to assign to the object.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glObjectLabel")]
        [CLSCompliant(false)]
        public static void ObjectLabel(OpenTK.Graphics.ES30.ObjectLabelIdentifier identifier, UInt32 name, Int32 length, String label) { throw new NotImplementedException(); }

        /// <summary>
        /// Label a a sync object identified by a pointer
        /// </summary>
        /// <param name="ptr">
        /// <para>
        /// A pointer identifying a sync object.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// The length of the label to be used for the object.
        /// </para>
        /// </param>
        /// <param name="label">
        /// <para>
        /// The address of a string containing the label to assign to the object.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glObjectPtrLabel")]
        public static void ObjectPtrLabel(IntPtr ptr, Int32 length, String label) { throw new NotImplementedException(); }

        /// <summary>
        /// Label a a sync object identified by a pointer
        /// </summary>
        /// <param name="ptr">
        /// <para>
        /// A pointer identifying a sync object.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// The length of the label to be used for the object.
        /// </para>
        /// </param>
        /// <param name="label">
        /// <para>
        /// The address of a string containing the label to assign to the object.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glObjectPtrLabel")]
        [CLSCompliant(false)]
        public static void ObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[] ptr, Int32 length, String label)
            where T0 : struct
         { throw new NotImplementedException(); }

        /// <summary>
        /// Label a a sync object identified by a pointer
        /// </summary>
        /// <param name="ptr">
        /// <para>
        /// A pointer identifying a sync object.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// The length of the label to be used for the object.
        /// </para>
        /// </param>
        /// <param name="label">
        /// <para>
        /// The address of a string containing the label to assign to the object.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glObjectPtrLabel")]
        [CLSCompliant(false)]
        public static void ObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[,] ptr, Int32 length, String label)
            where T0 : struct
         { throw new NotImplementedException(); }

        /// <summary>
        /// Label a a sync object identified by a pointer
        /// </summary>
        /// <param name="ptr">
        /// <para>
        /// A pointer identifying a sync object.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// The length of the label to be used for the object.
        /// </para>
        /// </param>
        /// <param name="label">
        /// <para>
        /// The address of a string containing the label to assign to the object.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glObjectPtrLabel")]
        [CLSCompliant(false)]
        public static void ObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[,,] ptr, Int32 length, String label)
            where T0 : struct
         { throw new NotImplementedException(); }

        /// <summary>
        /// Label a a sync object identified by a pointer
        /// </summary>
        /// <param name="ptr">
        /// <para>
        /// A pointer identifying a sync object.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// The length of the label to be used for the object.
        /// </para>
        /// </param>
        /// <param name="label">
        /// <para>
        /// The address of a string containing the label to assign to the object.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glObjectPtrLabel")]
        public static void ObjectPtrLabel<T0>([InAttribute, OutAttribute] ref T0 ptr, Int32 length, String label)
            where T0 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Pause transform feedback operations
        /// </summary>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glPauseTransformFeedback")]
        public static void PauseTransformFeedback() { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Set pixel storage modes
        /// </summary>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of the parameter to be set. Six values affect the packing of pixel data into memory: GL_PACK_SWAP_BYTES, GL_PACK_LSB_FIRST, GL_PACK_ROW_LENGTH, GL_PACK_IMAGE_HEIGHT, GL_PACK_SKIP_PIXELS, GL_PACK_SKIP_ROWS, GL_PACK_SKIP_IMAGES, and GL_PACK_ALIGNMENT. Six more affect the unpacking of pixel data from memory: GL_UNPACK_SWAP_BYTES, GL_UNPACK_LSB_FIRST, GL_UNPACK_ROW_LENGTH, GL_UNPACK_IMAGE_HEIGHT, GL_UNPACK_SKIP_PIXELS, GL_UNPACK_SKIP_ROWS, GL_UNPACK_SKIP_IMAGES, and GL_UNPACK_ALIGNMENT.
        /// </para>
        /// </param>
        /// <param name="param">
        /// <para>
        /// Specifies the value that pname is set to.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glPixelStorei")]
        public static void PixelStore(OpenTK.Graphics.ES30.All pname, Int32 param) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Set pixel storage modes
        /// </summary>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of the parameter to be set. Six values affect the packing of pixel data into memory: GL_PACK_SWAP_BYTES, GL_PACK_LSB_FIRST, GL_PACK_ROW_LENGTH, GL_PACK_IMAGE_HEIGHT, GL_PACK_SKIP_PIXELS, GL_PACK_SKIP_ROWS, GL_PACK_SKIP_IMAGES, and GL_PACK_ALIGNMENT. Six more affect the unpacking of pixel data from memory: GL_UNPACK_SWAP_BYTES, GL_UNPACK_LSB_FIRST, GL_UNPACK_ROW_LENGTH, GL_UNPACK_IMAGE_HEIGHT, GL_UNPACK_SKIP_PIXELS, GL_UNPACK_SKIP_ROWS, GL_UNPACK_SKIP_IMAGES, and GL_UNPACK_ALIGNMENT.
        /// </para>
        /// </param>
        /// <param name="param">
        /// <para>
        /// Specifies the value that pname is set to.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glPixelStorei")]
        public static void PixelStore(OpenTK.Graphics.ES30.PixelStoreParameter pname, Int32 param) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Set the scale and units used to calculate depth values
        /// </summary>
        /// <param name="factor">
        /// <para>
        /// Specifies a scale factor that is used to create a variable depth offset for each polygon. The initial value is 0.
        /// </para>
        /// </param>
        /// <param name="units">
        /// <para>
        /// Is multiplied by an implementation-specific value to create a constant depth offset. The initial value is 0.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glPolygonOffset")]
        public static void PolygonOffset(Single factor, Single units) { throw new NotImplementedException(); }

        /// <summary>
        /// Pop the active debug group
        /// </summary>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glPopDebugGroup")]
        public static void PopDebugGroup() { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Load a program object with a program binary
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the name of a program object into which to load a program binary.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the format of the binary data in binary.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address an array containing the binary to be loaded into program.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the number of bytes contained in binary.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glProgramBinary")]
        [CLSCompliant(false)]
        public static void ProgramBinary(Int32 program, OpenTK.Graphics.ES30.All binaryFormat, IntPtr binary, Int32 length) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Load a program object with a program binary
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the name of a program object into which to load a program binary.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the format of the binary data in binary.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address an array containing the binary to be loaded into program.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the number of bytes contained in binary.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glProgramBinary")]
        [CLSCompliant(false)]
        public static void ProgramBinary<T2>(Int32 program, OpenTK.Graphics.ES30.All binaryFormat, [InAttribute, OutAttribute] T2[] binary, Int32 length)
            where T2 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Load a program object with a program binary
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the name of a program object into which to load a program binary.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the format of the binary data in binary.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address an array containing the binary to be loaded into program.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the number of bytes contained in binary.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glProgramBinary")]
        [CLSCompliant(false)]
        public static void ProgramBinary<T2>(Int32 program, OpenTK.Graphics.ES30.All binaryFormat, [InAttribute, OutAttribute] T2[,] binary, Int32 length)
            where T2 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Load a program object with a program binary
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the name of a program object into which to load a program binary.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the format of the binary data in binary.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address an array containing the binary to be loaded into program.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the number of bytes contained in binary.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glProgramBinary")]
        [CLSCompliant(false)]
        public static void ProgramBinary<T2>(Int32 program, OpenTK.Graphics.ES30.All binaryFormat, [InAttribute, OutAttribute] T2[,,] binary, Int32 length)
            where T2 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Load a program object with a program binary
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the name of a program object into which to load a program binary.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the format of the binary data in binary.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address an array containing the binary to be loaded into program.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the number of bytes contained in binary.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glProgramBinary")]
        [CLSCompliant(false)]
        public static void ProgramBinary<T2>(Int32 program, OpenTK.Graphics.ES30.All binaryFormat, [InAttribute, OutAttribute] ref T2 binary, Int32 length)
            where T2 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Load a program object with a program binary
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the name of a program object into which to load a program binary.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the format of the binary data in binary.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address an array containing the binary to be loaded into program.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the number of bytes contained in binary.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glProgramBinary")]
        [CLSCompliant(false)]
        public static void ProgramBinary(UInt32 program, OpenTK.Graphics.ES30.All binaryFormat, IntPtr binary, Int32 length) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Load a program object with a program binary
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the name of a program object into which to load a program binary.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the format of the binary data in binary.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address an array containing the binary to be loaded into program.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the number of bytes contained in binary.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glProgramBinary")]
        [CLSCompliant(false)]
        public static void ProgramBinary<T2>(UInt32 program, OpenTK.Graphics.ES30.All binaryFormat, [InAttribute, OutAttribute] T2[] binary, Int32 length)
            where T2 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Load a program object with a program binary
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the name of a program object into which to load a program binary.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the format of the binary data in binary.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address an array containing the binary to be loaded into program.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the number of bytes contained in binary.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glProgramBinary")]
        [CLSCompliant(false)]
        public static void ProgramBinary<T2>(UInt32 program, OpenTK.Graphics.ES30.All binaryFormat, [InAttribute, OutAttribute] T2[,] binary, Int32 length)
            where T2 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Load a program object with a program binary
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the name of a program object into which to load a program binary.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the format of the binary data in binary.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address an array containing the binary to be loaded into program.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the number of bytes contained in binary.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glProgramBinary")]
        [CLSCompliant(false)]
        public static void ProgramBinary<T2>(UInt32 program, OpenTK.Graphics.ES30.All binaryFormat, [InAttribute, OutAttribute] T2[,,] binary, Int32 length)
            where T2 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Load a program object with a program binary
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the name of a program object into which to load a program binary.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the format of the binary data in binary.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address an array containing the binary to be loaded into program.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the number of bytes contained in binary.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glProgramBinary")]
        [CLSCompliant(false)]
        public static void ProgramBinary<T2>(UInt32 program, OpenTK.Graphics.ES30.All binaryFormat, [InAttribute, OutAttribute] ref T2 binary, Int32 length)
            where T2 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Specify a parameter for a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the name of a program object whose parameter to modify.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the name of the parameter to modify.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// Specifies the new value of the parameter specified by pname for program.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glProgramParameteri")]
        [CLSCompliant(false)]
        public static void ProgramParameter(Int32 program, OpenTK.Graphics.ES30.All pname, Int32 value) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Specify a parameter for a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the name of a program object whose parameter to modify.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the name of the parameter to modify.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// Specifies the new value of the parameter specified by pname for program.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glProgramParameteri")]
        [CLSCompliant(false)]
        public static void ProgramParameter(Int32 program, OpenTK.Graphics.ES30.ProgramParameterName pname, Int32 value) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Specify a parameter for a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the name of a program object whose parameter to modify.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the name of the parameter to modify.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// Specifies the new value of the parameter specified by pname for program.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glProgramParameteri")]
        [CLSCompliant(false)]
        public static void ProgramParameter(UInt32 program, OpenTK.Graphics.ES30.All pname, Int32 value) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Specify a parameter for a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the name of a program object whose parameter to modify.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the name of the parameter to modify.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// Specifies the new value of the parameter specified by pname for program.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glProgramParameteri")]
        [CLSCompliant(false)]
        public static void ProgramParameter(UInt32 program, OpenTK.Graphics.ES30.ProgramParameterName pname, Int32 value) { throw new NotImplementedException(); }

        /// <summary>
        /// Push a named debug group into the command stream
        /// </summary>
        /// <param name="source">
        /// <para>
        /// The source of the debug message.
        /// </para>
        /// </param>
        /// <param name="id">
        /// <para>
        /// The identifier of the message.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// The length of the message to be sent to the debug output stream.
        /// </para>
        /// </param>
        /// <param name="message">
        /// <para>
        /// The a string containing the message to be sent to the debug output stream.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glPushDebugGroup")]
        [CLSCompliant(false)]
        public static void PushDebugGroup(OpenTK.Graphics.ES30.All source, Int32 id, Int32 length, String message) { throw new NotImplementedException(); }

        /// <summary>
        /// Push a named debug group into the command stream
        /// </summary>
        /// <param name="source">
        /// <para>
        /// The source of the debug message.
        /// </para>
        /// </param>
        /// <param name="id">
        /// <para>
        /// The identifier of the message.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// The length of the message to be sent to the debug output stream.
        /// </para>
        /// </param>
        /// <param name="message">
        /// <para>
        /// The a string containing the message to be sent to the debug output stream.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glPushDebugGroup")]
        [CLSCompliant(false)]
        public static void PushDebugGroup(OpenTK.Graphics.ES30.All source, UInt32 id, Int32 length, String message) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Select a color buffer source for pixels
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies a color buffer. Accepted values are GL_FRONT_LEFT, GL_FRONT_RIGHT, GL_BACK_LEFT, GL_BACK_RIGHT, GL_FRONT, GL_BACK, GL_LEFT, GL_RIGHT, and the constants GL_COLOR_ATTACHMENTi.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glReadBuffer")]
        public static void ReadBuffer(OpenTK.Graphics.ES30.All mode) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Select a color buffer source for pixels
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies a color buffer. Accepted values are GL_FRONT_LEFT, GL_FRONT_RIGHT, GL_BACK_LEFT, GL_BACK_RIGHT, GL_FRONT, GL_BACK, GL_LEFT, GL_RIGHT, and the constants GL_COLOR_ATTACHMENTi.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glReadBuffer")]
        public static void ReadBuffer(OpenTK.Graphics.ES30.ReadBufferMode mode) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Read a block of pixels from the frame buffer
        /// </summary>
        /// <param name="x">
        /// <para>
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the pixel data. The following symbolic values are accepted: GL_STENCIL_INDEX, GL_DEPTH_COMPONENT, GL_DEPTH_STENCIL, GL_RED, GL_GREEN, GL_BLUE, GL_RGB, GL_BGR, GL_RGBA, and GL_BGRA.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of the pixel data. Must be one of GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_HALF_FLOAT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, GL_UNSIGNED_INT_2_10_10_10_REV, GL_UNSIGNED_INT_24_8, GL_UNSIGNED_INT_10F_11F_11F_REV, GL_UNSIGNED_INT_5_9_9_9_REV, or GL_FLOAT_32_UNSIGNED_INT_24_8_REV.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Returns the pixel data.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glReadPixels")]
        public static void ReadPixels(Int32 x, Int32 y, Int32 width, Int32 height, OpenTK.Graphics.ES30.All format, OpenTK.Graphics.ES30.All type, [OutAttribute] IntPtr pixels) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Read a block of pixels from the frame buffer
        /// </summary>
        /// <param name="x">
        /// <para>
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the pixel data. The following symbolic values are accepted: GL_STENCIL_INDEX, GL_DEPTH_COMPONENT, GL_DEPTH_STENCIL, GL_RED, GL_GREEN, GL_BLUE, GL_RGB, GL_BGR, GL_RGBA, and GL_BGRA.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of the pixel data. Must be one of GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_HALF_FLOAT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, GL_UNSIGNED_INT_2_10_10_10_REV, GL_UNSIGNED_INT_24_8, GL_UNSIGNED_INT_10F_11F_11F_REV, GL_UNSIGNED_INT_5_9_9_9_REV, or GL_FLOAT_32_UNSIGNED_INT_24_8_REV.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Returns the pixel data.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glReadPixels")]
        [CLSCompliant(false)]
        public static void ReadPixels<T6>(Int32 x, Int32 y, Int32 width, Int32 height, OpenTK.Graphics.ES30.All format, OpenTK.Graphics.ES30.All type, [InAttribute, OutAttribute] T6[] pixels)
            where T6 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Read a block of pixels from the frame buffer
        /// </summary>
        /// <param name="x">
        /// <para>
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the pixel data. The following symbolic values are accepted: GL_STENCIL_INDEX, GL_DEPTH_COMPONENT, GL_DEPTH_STENCIL, GL_RED, GL_GREEN, GL_BLUE, GL_RGB, GL_BGR, GL_RGBA, and GL_BGRA.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of the pixel data. Must be one of GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_HALF_FLOAT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, GL_UNSIGNED_INT_2_10_10_10_REV, GL_UNSIGNED_INT_24_8, GL_UNSIGNED_INT_10F_11F_11F_REV, GL_UNSIGNED_INT_5_9_9_9_REV, or GL_FLOAT_32_UNSIGNED_INT_24_8_REV.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Returns the pixel data.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glReadPixels")]
        [CLSCompliant(false)]
        public static void ReadPixels<T6>(Int32 x, Int32 y, Int32 width, Int32 height, OpenTK.Graphics.ES30.All format, OpenTK.Graphics.ES30.All type, [InAttribute, OutAttribute] T6[,] pixels)
            where T6 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Read a block of pixels from the frame buffer
        /// </summary>
        /// <param name="x">
        /// <para>
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the pixel data. The following symbolic values are accepted: GL_STENCIL_INDEX, GL_DEPTH_COMPONENT, GL_DEPTH_STENCIL, GL_RED, GL_GREEN, GL_BLUE, GL_RGB, GL_BGR, GL_RGBA, and GL_BGRA.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of the pixel data. Must be one of GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_HALF_FLOAT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, GL_UNSIGNED_INT_2_10_10_10_REV, GL_UNSIGNED_INT_24_8, GL_UNSIGNED_INT_10F_11F_11F_REV, GL_UNSIGNED_INT_5_9_9_9_REV, or GL_FLOAT_32_UNSIGNED_INT_24_8_REV.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Returns the pixel data.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glReadPixels")]
        [CLSCompliant(false)]
        public static void ReadPixels<T6>(Int32 x, Int32 y, Int32 width, Int32 height, OpenTK.Graphics.ES30.All format, OpenTK.Graphics.ES30.All type, [InAttribute, OutAttribute] T6[,,] pixels)
            where T6 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Read a block of pixels from the frame buffer
        /// </summary>
        /// <param name="x">
        /// <para>
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the pixel data. The following symbolic values are accepted: GL_STENCIL_INDEX, GL_DEPTH_COMPONENT, GL_DEPTH_STENCIL, GL_RED, GL_GREEN, GL_BLUE, GL_RGB, GL_BGR, GL_RGBA, and GL_BGRA.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of the pixel data. Must be one of GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_HALF_FLOAT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, GL_UNSIGNED_INT_2_10_10_10_REV, GL_UNSIGNED_INT_24_8, GL_UNSIGNED_INT_10F_11F_11F_REV, GL_UNSIGNED_INT_5_9_9_9_REV, or GL_FLOAT_32_UNSIGNED_INT_24_8_REV.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Returns the pixel data.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glReadPixels")]
        public static void ReadPixels<T6>(Int32 x, Int32 y, Int32 width, Int32 height, OpenTK.Graphics.ES30.All format, OpenTK.Graphics.ES30.All type, [InAttribute, OutAttribute] ref T6 pixels)
            where T6 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Read a block of pixels from the frame buffer
        /// </summary>
        /// <param name="x">
        /// <para>
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the pixel data. The following symbolic values are accepted: GL_STENCIL_INDEX, GL_DEPTH_COMPONENT, GL_DEPTH_STENCIL, GL_RED, GL_GREEN, GL_BLUE, GL_RGB, GL_BGR, GL_RGBA, and GL_BGRA.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of the pixel data. Must be one of GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_HALF_FLOAT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, GL_UNSIGNED_INT_2_10_10_10_REV, GL_UNSIGNED_INT_24_8, GL_UNSIGNED_INT_10F_11F_11F_REV, GL_UNSIGNED_INT_5_9_9_9_REV, or GL_FLOAT_32_UNSIGNED_INT_24_8_REV.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Returns the pixel data.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glReadPixels")]
        public static void ReadPixels(Int32 x, Int32 y, Int32 width, Int32 height, OpenTK.Graphics.ES30.PixelFormat format, OpenTK.Graphics.ES30.PixelType type, [OutAttribute] IntPtr pixels) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Read a block of pixels from the frame buffer
        /// </summary>
        /// <param name="x">
        /// <para>
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the pixel data. The following symbolic values are accepted: GL_STENCIL_INDEX, GL_DEPTH_COMPONENT, GL_DEPTH_STENCIL, GL_RED, GL_GREEN, GL_BLUE, GL_RGB, GL_BGR, GL_RGBA, and GL_BGRA.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of the pixel data. Must be one of GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_HALF_FLOAT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, GL_UNSIGNED_INT_2_10_10_10_REV, GL_UNSIGNED_INT_24_8, GL_UNSIGNED_INT_10F_11F_11F_REV, GL_UNSIGNED_INT_5_9_9_9_REV, or GL_FLOAT_32_UNSIGNED_INT_24_8_REV.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Returns the pixel data.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glReadPixels")]
        [CLSCompliant(false)]
        public static void ReadPixels<T6>(Int32 x, Int32 y, Int32 width, Int32 height, OpenTK.Graphics.ES30.PixelFormat format, OpenTK.Graphics.ES30.PixelType type, [InAttribute, OutAttribute] T6[] pixels)
            where T6 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Read a block of pixels from the frame buffer
        /// </summary>
        /// <param name="x">
        /// <para>
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the pixel data. The following symbolic values are accepted: GL_STENCIL_INDEX, GL_DEPTH_COMPONENT, GL_DEPTH_STENCIL, GL_RED, GL_GREEN, GL_BLUE, GL_RGB, GL_BGR, GL_RGBA, and GL_BGRA.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of the pixel data. Must be one of GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_HALF_FLOAT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, GL_UNSIGNED_INT_2_10_10_10_REV, GL_UNSIGNED_INT_24_8, GL_UNSIGNED_INT_10F_11F_11F_REV, GL_UNSIGNED_INT_5_9_9_9_REV, or GL_FLOAT_32_UNSIGNED_INT_24_8_REV.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Returns the pixel data.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glReadPixels")]
        [CLSCompliant(false)]
        public static void ReadPixels<T6>(Int32 x, Int32 y, Int32 width, Int32 height, OpenTK.Graphics.ES30.PixelFormat format, OpenTK.Graphics.ES30.PixelType type, [InAttribute, OutAttribute] T6[,] pixels)
            where T6 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Read a block of pixels from the frame buffer
        /// </summary>
        /// <param name="x">
        /// <para>
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the pixel data. The following symbolic values are accepted: GL_STENCIL_INDEX, GL_DEPTH_COMPONENT, GL_DEPTH_STENCIL, GL_RED, GL_GREEN, GL_BLUE, GL_RGB, GL_BGR, GL_RGBA, and GL_BGRA.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of the pixel data. Must be one of GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_HALF_FLOAT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, GL_UNSIGNED_INT_2_10_10_10_REV, GL_UNSIGNED_INT_24_8, GL_UNSIGNED_INT_10F_11F_11F_REV, GL_UNSIGNED_INT_5_9_9_9_REV, or GL_FLOAT_32_UNSIGNED_INT_24_8_REV.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Returns the pixel data.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glReadPixels")]
        [CLSCompliant(false)]
        public static void ReadPixels<T6>(Int32 x, Int32 y, Int32 width, Int32 height, OpenTK.Graphics.ES30.PixelFormat format, OpenTK.Graphics.ES30.PixelType type, [InAttribute, OutAttribute] T6[,,] pixels)
            where T6 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Read a block of pixels from the frame buffer
        /// </summary>
        /// <param name="x">
        /// <para>
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the pixel data. The following symbolic values are accepted: GL_STENCIL_INDEX, GL_DEPTH_COMPONENT, GL_DEPTH_STENCIL, GL_RED, GL_GREEN, GL_BLUE, GL_RGB, GL_BGR, GL_RGBA, and GL_BGRA.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of the pixel data. Must be one of GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_HALF_FLOAT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, GL_UNSIGNED_INT_2_10_10_10_REV, GL_UNSIGNED_INT_24_8, GL_UNSIGNED_INT_10F_11F_11F_REV, GL_UNSIGNED_INT_5_9_9_9_REV, or GL_FLOAT_32_UNSIGNED_INT_24_8_REV.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Returns the pixel data.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glReadPixels")]
        public static void ReadPixels<T6>(Int32 x, Int32 y, Int32 width, Int32 height, OpenTK.Graphics.ES30.PixelFormat format, OpenTK.Graphics.ES30.PixelType type, [InAttribute, OutAttribute] ref T6 pixels)
            where T6 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Release resources consumed by the implementation's shader compiler
        /// </summary>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glReleaseShaderCompiler")]
        public static void ReleaseShaderCompiler() { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Establish data storage, format and dimensions of a renderbuffer object's image
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies a binding to which the target of the allocation and must be GL_RENDERBUFFER.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// Specifies the internal format to use for the renderbuffer object's image.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the renderbuffer, in pixels.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the renderbuffer, in pixels.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glRenderbufferStorage")]
        public static void RenderbufferStorage(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All internalformat, Int32 width, Int32 height) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Establish data storage, format and dimensions of a renderbuffer object's image
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies a binding to which the target of the allocation and must be GL_RENDERBUFFER.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// Specifies the internal format to use for the renderbuffer object's image.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the renderbuffer, in pixels.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the renderbuffer, in pixels.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glRenderbufferStorage")]
        public static void RenderbufferStorage(OpenTK.Graphics.ES30.RenderbufferTarget target, OpenTK.Graphics.ES30.RenderbufferInternalFormat internalformat, Int32 width, Int32 height) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Establish data storage, format, dimensions and sample count of a renderbuffer object's image
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies a binding to which the target of the allocation and must be GL_RENDERBUFFER.
        /// </para>
        /// </param>
        /// <param name="samples">
        /// <para>
        /// Specifies the number of samples to be used for the renderbuffer object's storage.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// Specifies the internal format to use for the renderbuffer object's image.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the renderbuffer, in pixels.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the renderbuffer, in pixels.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glRenderbufferStorageMultisample")]
        public static void RenderbufferStorageMultisample(OpenTK.Graphics.ES30.All target, Int32 samples, OpenTK.Graphics.ES30.All internalformat, Int32 width, Int32 height) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Establish data storage, format, dimensions and sample count of a renderbuffer object's image
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies a binding to which the target of the allocation and must be GL_RENDERBUFFER.
        /// </para>
        /// </param>
        /// <param name="samples">
        /// <para>
        /// Specifies the number of samples to be used for the renderbuffer object's storage.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// Specifies the internal format to use for the renderbuffer object's image.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the renderbuffer, in pixels.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the renderbuffer, in pixels.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glRenderbufferStorageMultisample")]
        public static void RenderbufferStorageMultisample(OpenTK.Graphics.ES30.RenderbufferTarget target, Int32 samples, OpenTK.Graphics.ES30.RenderbufferInternalFormat internalformat, Int32 width, Int32 height) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Resume transform feedback operations
        /// </summary>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glResumeTransformFeedback")]
        public static void ResumeTransformFeedback() { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Specify multisample coverage parameters
        /// </summary>
        /// <param name="value">
        /// <para>
        /// Specify a single floating-point sample coverage value. The value is clamped to the range [0 ,1]. The initial value is 1.0.
        /// </para>
        /// </param>
        /// <param name="invert">
        /// <para>
        /// Specify a single boolean value representing if the coverage masks should be inverted. GL_TRUE and GL_FALSE are accepted. The initial value is GL_FALSE.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glSampleCoverage")]
        public static void SampleCoverage(Single value, bool invert) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Set sampler parameters
        /// </summary>
        /// <param name="sampler">
        /// <para>
        /// Specifies the sampler object whose parameter to modify.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a sampler parameter. pname can be one of the following: GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, GL_TEXTURE_WRAP_R, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MAG_FILTER, GL_TEXTURE_BORDER_COLOR, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, GL_TEXTURE_LOD_BIAS GL_TEXTURE_COMPARE_MODE, or GL_TEXTURE_COMPARE_FUNC.
        /// </para>
        /// </param>
        /// <param name="param">
        /// <para>
        /// For the scalar commands, specifies the value of pname.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// For the vector commands (glSamplerParameter*v), specifies a pointer to an array where the value or values of pname are stored.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glSamplerParameterf")]
        [CLSCompliant(false)]
        public static void SamplerParameter(Int32 sampler, OpenTK.Graphics.ES30.All pname, Single param) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Set sampler parameters
        /// </summary>
        /// <param name="sampler">
        /// <para>
        /// Specifies the sampler object whose parameter to modify.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a sampler parameter. pname can be one of the following: GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, GL_TEXTURE_WRAP_R, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MAG_FILTER, GL_TEXTURE_BORDER_COLOR, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, GL_TEXTURE_LOD_BIAS GL_TEXTURE_COMPARE_MODE, or GL_TEXTURE_COMPARE_FUNC.
        /// </para>
        /// </param>
        /// <param name="param">
        /// <para>
        /// For the scalar commands, specifies the value of pname.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// For the vector commands (glSamplerParameter*v), specifies a pointer to an array where the value or values of pname are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glSamplerParameterf")]
        [CLSCompliant(false)]
        public static void SamplerParameter(Int32 sampler, OpenTK.Graphics.ES30.SamplerParameterName pname, Single param) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Set sampler parameters
        /// </summary>
        /// <param name="sampler">
        /// <para>
        /// Specifies the sampler object whose parameter to modify.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a sampler parameter. pname can be one of the following: GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, GL_TEXTURE_WRAP_R, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MAG_FILTER, GL_TEXTURE_BORDER_COLOR, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, GL_TEXTURE_LOD_BIAS GL_TEXTURE_COMPARE_MODE, or GL_TEXTURE_COMPARE_FUNC.
        /// </para>
        /// </param>
        /// <param name="param">
        /// <para>
        /// For the scalar commands, specifies the value of pname.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// For the vector commands (glSamplerParameter*v), specifies a pointer to an array where the value or values of pname are stored.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glSamplerParameterf")]
        [CLSCompliant(false)]
        public static void SamplerParameter(UInt32 sampler, OpenTK.Graphics.ES30.All pname, Single param) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Set sampler parameters
        /// </summary>
        /// <param name="sampler">
        /// <para>
        /// Specifies the sampler object whose parameter to modify.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a sampler parameter. pname can be one of the following: GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, GL_TEXTURE_WRAP_R, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MAG_FILTER, GL_TEXTURE_BORDER_COLOR, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, GL_TEXTURE_LOD_BIAS GL_TEXTURE_COMPARE_MODE, or GL_TEXTURE_COMPARE_FUNC.
        /// </para>
        /// </param>
        /// <param name="param">
        /// <para>
        /// For the scalar commands, specifies the value of pname.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// For the vector commands (glSamplerParameter*v), specifies a pointer to an array where the value or values of pname are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glSamplerParameterf")]
        [CLSCompliant(false)]
        public static void SamplerParameter(UInt32 sampler, OpenTK.Graphics.ES30.SamplerParameterName pname, Single param) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Set sampler parameters
        /// </summary>
        /// <param name="sampler">
        /// <para>
        /// Specifies the sampler object whose parameter to modify.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a sampler parameter. pname can be one of the following: GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, GL_TEXTURE_WRAP_R, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MAG_FILTER, GL_TEXTURE_BORDER_COLOR, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, GL_TEXTURE_LOD_BIAS GL_TEXTURE_COMPARE_MODE, or GL_TEXTURE_COMPARE_FUNC.
        /// </para>
        /// </param>
        /// <param name="param">
        /// <para>
        /// For the scalar commands, specifies the value of pname.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// For the vector commands (glSamplerParameter*v), specifies a pointer to an array where the value or values of pname are stored.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glSamplerParameterfv")]
        [CLSCompliant(false)]
        public static void SamplerParameter(Int32 sampler, OpenTK.Graphics.ES30.All pname, Single[] param) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Set sampler parameters
        /// </summary>
        /// <param name="sampler">
        /// <para>
        /// Specifies the sampler object whose parameter to modify.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a sampler parameter. pname can be one of the following: GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, GL_TEXTURE_WRAP_R, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MAG_FILTER, GL_TEXTURE_BORDER_COLOR, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, GL_TEXTURE_LOD_BIAS GL_TEXTURE_COMPARE_MODE, or GL_TEXTURE_COMPARE_FUNC.
        /// </para>
        /// </param>
        /// <param name="param">
        /// <para>
        /// For the scalar commands, specifies the value of pname.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// For the vector commands (glSamplerParameter*v), specifies a pointer to an array where the value or values of pname are stored.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glSamplerParameterfv")]
        [CLSCompliant(false)]
        public static unsafe void SamplerParameter(Int32 sampler, OpenTK.Graphics.ES30.All pname, Single* param) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Set sampler parameters
        /// </summary>
        /// <param name="sampler">
        /// <para>
        /// Specifies the sampler object whose parameter to modify.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a sampler parameter. pname can be one of the following: GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, GL_TEXTURE_WRAP_R, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MAG_FILTER, GL_TEXTURE_BORDER_COLOR, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, GL_TEXTURE_LOD_BIAS GL_TEXTURE_COMPARE_MODE, or GL_TEXTURE_COMPARE_FUNC.
        /// </para>
        /// </param>
        /// <param name="param">
        /// <para>
        /// For the scalar commands, specifies the value of pname.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// For the vector commands (glSamplerParameter*v), specifies a pointer to an array where the value or values of pname are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glSamplerParameterfv")]
        [CLSCompliant(false)]
        public static void SamplerParameter(Int32 sampler, OpenTK.Graphics.ES30.SamplerParameterName pname, Single[] param) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Set sampler parameters
        /// </summary>
        /// <param name="sampler">
        /// <para>
        /// Specifies the sampler object whose parameter to modify.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a sampler parameter. pname can be one of the following: GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, GL_TEXTURE_WRAP_R, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MAG_FILTER, GL_TEXTURE_BORDER_COLOR, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, GL_TEXTURE_LOD_BIAS GL_TEXTURE_COMPARE_MODE, or GL_TEXTURE_COMPARE_FUNC.
        /// </para>
        /// </param>
        /// <param name="param">
        /// <para>
        /// For the scalar commands, specifies the value of pname.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// For the vector commands (glSamplerParameter*v), specifies a pointer to an array where the value or values of pname are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glSamplerParameterfv")]
        [CLSCompliant(false)]
        public static unsafe void SamplerParameter(Int32 sampler, OpenTK.Graphics.ES30.SamplerParameterName pname, Single* param) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Set sampler parameters
        /// </summary>
        /// <param name="sampler">
        /// <para>
        /// Specifies the sampler object whose parameter to modify.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a sampler parameter. pname can be one of the following: GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, GL_TEXTURE_WRAP_R, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MAG_FILTER, GL_TEXTURE_BORDER_COLOR, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, GL_TEXTURE_LOD_BIAS GL_TEXTURE_COMPARE_MODE, or GL_TEXTURE_COMPARE_FUNC.
        /// </para>
        /// </param>
        /// <param name="param">
        /// <para>
        /// For the scalar commands, specifies the value of pname.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// For the vector commands (glSamplerParameter*v), specifies a pointer to an array where the value or values of pname are stored.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glSamplerParameterfv")]
        [CLSCompliant(false)]
        public static void SamplerParameter(UInt32 sampler, OpenTK.Graphics.ES30.All pname, Single[] param) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Set sampler parameters
        /// </summary>
        /// <param name="sampler">
        /// <para>
        /// Specifies the sampler object whose parameter to modify.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a sampler parameter. pname can be one of the following: GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, GL_TEXTURE_WRAP_R, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MAG_FILTER, GL_TEXTURE_BORDER_COLOR, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, GL_TEXTURE_LOD_BIAS GL_TEXTURE_COMPARE_MODE, or GL_TEXTURE_COMPARE_FUNC.
        /// </para>
        /// </param>
        /// <param name="param">
        /// <para>
        /// For the scalar commands, specifies the value of pname.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// For the vector commands (glSamplerParameter*v), specifies a pointer to an array where the value or values of pname are stored.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glSamplerParameterfv")]
        [CLSCompliant(false)]
        public static unsafe void SamplerParameter(UInt32 sampler, OpenTK.Graphics.ES30.All pname, Single* param) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Set sampler parameters
        /// </summary>
        /// <param name="sampler">
        /// <para>
        /// Specifies the sampler object whose parameter to modify.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a sampler parameter. pname can be one of the following: GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, GL_TEXTURE_WRAP_R, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MAG_FILTER, GL_TEXTURE_BORDER_COLOR, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, GL_TEXTURE_LOD_BIAS GL_TEXTURE_COMPARE_MODE, or GL_TEXTURE_COMPARE_FUNC.
        /// </para>
        /// </param>
        /// <param name="param">
        /// <para>
        /// For the scalar commands, specifies the value of pname.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// For the vector commands (glSamplerParameter*v), specifies a pointer to an array where the value or values of pname are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glSamplerParameterfv")]
        [CLSCompliant(false)]
        public static void SamplerParameter(UInt32 sampler, OpenTK.Graphics.ES30.SamplerParameterName pname, Single[] param) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Set sampler parameters
        /// </summary>
        /// <param name="sampler">
        /// <para>
        /// Specifies the sampler object whose parameter to modify.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a sampler parameter. pname can be one of the following: GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, GL_TEXTURE_WRAP_R, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MAG_FILTER, GL_TEXTURE_BORDER_COLOR, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, GL_TEXTURE_LOD_BIAS GL_TEXTURE_COMPARE_MODE, or GL_TEXTURE_COMPARE_FUNC.
        /// </para>
        /// </param>
        /// <param name="param">
        /// <para>
        /// For the scalar commands, specifies the value of pname.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// For the vector commands (glSamplerParameter*v), specifies a pointer to an array where the value or values of pname are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glSamplerParameterfv")]
        [CLSCompliant(false)]
        public static unsafe void SamplerParameter(UInt32 sampler, OpenTK.Graphics.ES30.SamplerParameterName pname, Single* param) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Set sampler parameters
        /// </summary>
        /// <param name="sampler">
        /// <para>
        /// Specifies the sampler object whose parameter to modify.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a sampler parameter. pname can be one of the following: GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, GL_TEXTURE_WRAP_R, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MAG_FILTER, GL_TEXTURE_BORDER_COLOR, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, GL_TEXTURE_LOD_BIAS GL_TEXTURE_COMPARE_MODE, or GL_TEXTURE_COMPARE_FUNC.
        /// </para>
        /// </param>
        /// <param name="param">
        /// <para>
        /// For the scalar commands, specifies the value of pname.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// For the vector commands (glSamplerParameter*v), specifies a pointer to an array where the value or values of pname are stored.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glSamplerParameteri")]
        [CLSCompliant(false)]
        public static void SamplerParameter(Int32 sampler, OpenTK.Graphics.ES30.All pname, Int32 param) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Set sampler parameters
        /// </summary>
        /// <param name="sampler">
        /// <para>
        /// Specifies the sampler object whose parameter to modify.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a sampler parameter. pname can be one of the following: GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, GL_TEXTURE_WRAP_R, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MAG_FILTER, GL_TEXTURE_BORDER_COLOR, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, GL_TEXTURE_LOD_BIAS GL_TEXTURE_COMPARE_MODE, or GL_TEXTURE_COMPARE_FUNC.
        /// </para>
        /// </param>
        /// <param name="param">
        /// <para>
        /// For the scalar commands, specifies the value of pname.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// For the vector commands (glSamplerParameter*v), specifies a pointer to an array where the value or values of pname are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glSamplerParameteri")]
        [CLSCompliant(false)]
        public static void SamplerParameter(Int32 sampler, OpenTK.Graphics.ES30.SamplerParameterName pname, Int32 param) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Set sampler parameters
        /// </summary>
        /// <param name="sampler">
        /// <para>
        /// Specifies the sampler object whose parameter to modify.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a sampler parameter. pname can be one of the following: GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, GL_TEXTURE_WRAP_R, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MAG_FILTER, GL_TEXTURE_BORDER_COLOR, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, GL_TEXTURE_LOD_BIAS GL_TEXTURE_COMPARE_MODE, or GL_TEXTURE_COMPARE_FUNC.
        /// </para>
        /// </param>
        /// <param name="param">
        /// <para>
        /// For the scalar commands, specifies the value of pname.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// For the vector commands (glSamplerParameter*v), specifies a pointer to an array where the value or values of pname are stored.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glSamplerParameteri")]
        [CLSCompliant(false)]
        public static void SamplerParameter(UInt32 sampler, OpenTK.Graphics.ES30.All pname, Int32 param) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Set sampler parameters
        /// </summary>
        /// <param name="sampler">
        /// <para>
        /// Specifies the sampler object whose parameter to modify.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a sampler parameter. pname can be one of the following: GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, GL_TEXTURE_WRAP_R, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MAG_FILTER, GL_TEXTURE_BORDER_COLOR, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, GL_TEXTURE_LOD_BIAS GL_TEXTURE_COMPARE_MODE, or GL_TEXTURE_COMPARE_FUNC.
        /// </para>
        /// </param>
        /// <param name="param">
        /// <para>
        /// For the scalar commands, specifies the value of pname.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// For the vector commands (glSamplerParameter*v), specifies a pointer to an array where the value or values of pname are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glSamplerParameteri")]
        [CLSCompliant(false)]
        public static void SamplerParameter(UInt32 sampler, OpenTK.Graphics.ES30.SamplerParameterName pname, Int32 param) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Set sampler parameters
        /// </summary>
        /// <param name="sampler">
        /// <para>
        /// Specifies the sampler object whose parameter to modify.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a sampler parameter. pname can be one of the following: GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, GL_TEXTURE_WRAP_R, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MAG_FILTER, GL_TEXTURE_BORDER_COLOR, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, GL_TEXTURE_LOD_BIAS GL_TEXTURE_COMPARE_MODE, or GL_TEXTURE_COMPARE_FUNC.
        /// </para>
        /// </param>
        /// <param name="param">
        /// <para>
        /// For the scalar commands, specifies the value of pname.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// For the vector commands (glSamplerParameter*v), specifies a pointer to an array where the value or values of pname are stored.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glSamplerParameteriv")]
        [CLSCompliant(false)]
        public static void SamplerParameter(Int32 sampler, OpenTK.Graphics.ES30.All pname, Int32[] param) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Set sampler parameters
        /// </summary>
        /// <param name="sampler">
        /// <para>
        /// Specifies the sampler object whose parameter to modify.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a sampler parameter. pname can be one of the following: GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, GL_TEXTURE_WRAP_R, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MAG_FILTER, GL_TEXTURE_BORDER_COLOR, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, GL_TEXTURE_LOD_BIAS GL_TEXTURE_COMPARE_MODE, or GL_TEXTURE_COMPARE_FUNC.
        /// </para>
        /// </param>
        /// <param name="param">
        /// <para>
        /// For the scalar commands, specifies the value of pname.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// For the vector commands (glSamplerParameter*v), specifies a pointer to an array where the value or values of pname are stored.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glSamplerParameteriv")]
        [CLSCompliant(false)]
        public static unsafe void SamplerParameter(Int32 sampler, OpenTK.Graphics.ES30.All pname, Int32* param) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Set sampler parameters
        /// </summary>
        /// <param name="sampler">
        /// <para>
        /// Specifies the sampler object whose parameter to modify.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a sampler parameter. pname can be one of the following: GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, GL_TEXTURE_WRAP_R, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MAG_FILTER, GL_TEXTURE_BORDER_COLOR, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, GL_TEXTURE_LOD_BIAS GL_TEXTURE_COMPARE_MODE, or GL_TEXTURE_COMPARE_FUNC.
        /// </para>
        /// </param>
        /// <param name="param">
        /// <para>
        /// For the scalar commands, specifies the value of pname.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// For the vector commands (glSamplerParameter*v), specifies a pointer to an array where the value or values of pname are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glSamplerParameteriv")]
        [CLSCompliant(false)]
        public static void SamplerParameter(Int32 sampler, OpenTK.Graphics.ES30.SamplerParameterName pname, Int32[] param) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Set sampler parameters
        /// </summary>
        /// <param name="sampler">
        /// <para>
        /// Specifies the sampler object whose parameter to modify.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a sampler parameter. pname can be one of the following: GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, GL_TEXTURE_WRAP_R, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MAG_FILTER, GL_TEXTURE_BORDER_COLOR, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, GL_TEXTURE_LOD_BIAS GL_TEXTURE_COMPARE_MODE, or GL_TEXTURE_COMPARE_FUNC.
        /// </para>
        /// </param>
        /// <param name="param">
        /// <para>
        /// For the scalar commands, specifies the value of pname.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// For the vector commands (glSamplerParameter*v), specifies a pointer to an array where the value or values of pname are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glSamplerParameteriv")]
        [CLSCompliant(false)]
        public static unsafe void SamplerParameter(Int32 sampler, OpenTK.Graphics.ES30.SamplerParameterName pname, Int32* param) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Set sampler parameters
        /// </summary>
        /// <param name="sampler">
        /// <para>
        /// Specifies the sampler object whose parameter to modify.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a sampler parameter. pname can be one of the following: GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, GL_TEXTURE_WRAP_R, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MAG_FILTER, GL_TEXTURE_BORDER_COLOR, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, GL_TEXTURE_LOD_BIAS GL_TEXTURE_COMPARE_MODE, or GL_TEXTURE_COMPARE_FUNC.
        /// </para>
        /// </param>
        /// <param name="param">
        /// <para>
        /// For the scalar commands, specifies the value of pname.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// For the vector commands (glSamplerParameter*v), specifies a pointer to an array where the value or values of pname are stored.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glSamplerParameteriv")]
        [CLSCompliant(false)]
        public static void SamplerParameter(UInt32 sampler, OpenTK.Graphics.ES30.All pname, Int32[] param) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Set sampler parameters
        /// </summary>
        /// <param name="sampler">
        /// <para>
        /// Specifies the sampler object whose parameter to modify.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a sampler parameter. pname can be one of the following: GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, GL_TEXTURE_WRAP_R, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MAG_FILTER, GL_TEXTURE_BORDER_COLOR, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, GL_TEXTURE_LOD_BIAS GL_TEXTURE_COMPARE_MODE, or GL_TEXTURE_COMPARE_FUNC.
        /// </para>
        /// </param>
        /// <param name="param">
        /// <para>
        /// For the scalar commands, specifies the value of pname.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// For the vector commands (glSamplerParameter*v), specifies a pointer to an array where the value or values of pname are stored.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glSamplerParameteriv")]
        [CLSCompliant(false)]
        public static unsafe void SamplerParameter(UInt32 sampler, OpenTK.Graphics.ES30.All pname, Int32* param) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Set sampler parameters
        /// </summary>
        /// <param name="sampler">
        /// <para>
        /// Specifies the sampler object whose parameter to modify.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a sampler parameter. pname can be one of the following: GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, GL_TEXTURE_WRAP_R, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MAG_FILTER, GL_TEXTURE_BORDER_COLOR, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, GL_TEXTURE_LOD_BIAS GL_TEXTURE_COMPARE_MODE, or GL_TEXTURE_COMPARE_FUNC.
        /// </para>
        /// </param>
        /// <param name="param">
        /// <para>
        /// For the scalar commands, specifies the value of pname.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// For the vector commands (glSamplerParameter*v), specifies a pointer to an array where the value or values of pname are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glSamplerParameteriv")]
        [CLSCompliant(false)]
        public static void SamplerParameter(UInt32 sampler, OpenTK.Graphics.ES30.SamplerParameterName pname, Int32[] param) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Set sampler parameters
        /// </summary>
        /// <param name="sampler">
        /// <para>
        /// Specifies the sampler object whose parameter to modify.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a sampler parameter. pname can be one of the following: GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, GL_TEXTURE_WRAP_R, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MAG_FILTER, GL_TEXTURE_BORDER_COLOR, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, GL_TEXTURE_LOD_BIAS GL_TEXTURE_COMPARE_MODE, or GL_TEXTURE_COMPARE_FUNC.
        /// </para>
        /// </param>
        /// <param name="param">
        /// <para>
        /// For the scalar commands, specifies the value of pname.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// For the vector commands (glSamplerParameter*v), specifies a pointer to an array where the value or values of pname are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glSamplerParameteriv")]
        [CLSCompliant(false)]
        public static unsafe void SamplerParameter(UInt32 sampler, OpenTK.Graphics.ES30.SamplerParameterName pname, Int32* param) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Define the scissor box
        /// </summary>
        /// <param name="x">
        /// <para>
        /// Specify the lower left corner of the scissor box. Initially (0, 0).
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specify the width and height of the scissor box. When a GL context is first attached to a window, width and height are set to the dimensions of that window.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glScissor")]
        public static void Scissor(Int32 x, Int32 y, Int32 width, Int32 height) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// <para>
        /// Specifies the number of shader object handles contained in shaders.
        /// </para>
        /// </param>
        /// <param name="shaders">
        /// <para>
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the format of the shader binaries contained in binary.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the length of the array whose address is given in binary.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glShaderBinary")]
        [CLSCompliant(false)]
        public static void ShaderBinary(Int32 count, Int32[] shaders, OpenTK.Graphics.ES30.All binaryformat, IntPtr binary, Int32 length) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// <para>
        /// Specifies the number of shader object handles contained in shaders.
        /// </para>
        /// </param>
        /// <param name="shaders">
        /// <para>
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the format of the shader binaries contained in binary.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the length of the array whose address is given in binary.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glShaderBinary")]
        [CLSCompliant(false)]
        public static void ShaderBinary<T3>(Int32 count, Int32[] shaders, OpenTK.Graphics.ES30.All binaryformat, [InAttribute, OutAttribute] T3[] binary, Int32 length)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// <para>
        /// Specifies the number of shader object handles contained in shaders.
        /// </para>
        /// </param>
        /// <param name="shaders">
        /// <para>
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the format of the shader binaries contained in binary.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the length of the array whose address is given in binary.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glShaderBinary")]
        [CLSCompliant(false)]
        public static void ShaderBinary<T3>(Int32 count, Int32[] shaders, OpenTK.Graphics.ES30.All binaryformat, [InAttribute, OutAttribute] T3[,] binary, Int32 length)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// <para>
        /// Specifies the number of shader object handles contained in shaders.
        /// </para>
        /// </param>
        /// <param name="shaders">
        /// <para>
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the format of the shader binaries contained in binary.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the length of the array whose address is given in binary.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glShaderBinary")]
        [CLSCompliant(false)]
        public static void ShaderBinary<T3>(Int32 count, Int32[] shaders, OpenTK.Graphics.ES30.All binaryformat, [InAttribute, OutAttribute] T3[,,] binary, Int32 length)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// <para>
        /// Specifies the number of shader object handles contained in shaders.
        /// </para>
        /// </param>
        /// <param name="shaders">
        /// <para>
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the format of the shader binaries contained in binary.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the length of the array whose address is given in binary.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glShaderBinary")]
        [CLSCompliant(false)]
        public static void ShaderBinary<T3>(Int32 count, Int32[] shaders, OpenTK.Graphics.ES30.All binaryformat, [InAttribute, OutAttribute] ref T3 binary, Int32 length)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// <para>
        /// Specifies the number of shader object handles contained in shaders.
        /// </para>
        /// </param>
        /// <param name="shaders">
        /// <para>
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the format of the shader binaries contained in binary.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the length of the array whose address is given in binary.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glShaderBinary")]
        [CLSCompliant(false)]
        public static void ShaderBinary(Int32 count, Int32[] shaders, OpenTK.Graphics.ES30.ShaderBinaryFormat binaryformat, IntPtr binary, Int32 length) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// <para>
        /// Specifies the number of shader object handles contained in shaders.
        /// </para>
        /// </param>
        /// <param name="shaders">
        /// <para>
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the format of the shader binaries contained in binary.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the length of the array whose address is given in binary.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glShaderBinary")]
        [CLSCompliant(false)]
        public static void ShaderBinary<T3>(Int32 count, Int32[] shaders, OpenTK.Graphics.ES30.ShaderBinaryFormat binaryformat, [InAttribute, OutAttribute] T3[] binary, Int32 length)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// <para>
        /// Specifies the number of shader object handles contained in shaders.
        /// </para>
        /// </param>
        /// <param name="shaders">
        /// <para>
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the format of the shader binaries contained in binary.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the length of the array whose address is given in binary.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glShaderBinary")]
        [CLSCompliant(false)]
        public static void ShaderBinary<T3>(Int32 count, Int32[] shaders, OpenTK.Graphics.ES30.ShaderBinaryFormat binaryformat, [InAttribute, OutAttribute] T3[,] binary, Int32 length)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// <para>
        /// Specifies the number of shader object handles contained in shaders.
        /// </para>
        /// </param>
        /// <param name="shaders">
        /// <para>
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the format of the shader binaries contained in binary.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the length of the array whose address is given in binary.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glShaderBinary")]
        [CLSCompliant(false)]
        public static void ShaderBinary<T3>(Int32 count, Int32[] shaders, OpenTK.Graphics.ES30.ShaderBinaryFormat binaryformat, [InAttribute, OutAttribute] T3[,,] binary, Int32 length)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// <para>
        /// Specifies the number of shader object handles contained in shaders.
        /// </para>
        /// </param>
        /// <param name="shaders">
        /// <para>
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the format of the shader binaries contained in binary.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the length of the array whose address is given in binary.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glShaderBinary")]
        [CLSCompliant(false)]
        public static void ShaderBinary<T3>(Int32 count, Int32[] shaders, OpenTK.Graphics.ES30.ShaderBinaryFormat binaryformat, [InAttribute, OutAttribute] ref T3 binary, Int32 length)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// <para>
        /// Specifies the number of shader object handles contained in shaders.
        /// </para>
        /// </param>
        /// <param name="shaders">
        /// <para>
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the format of the shader binaries contained in binary.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the length of the array whose address is given in binary.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glShaderBinary")]
        [CLSCompliant(false)]
        public static void ShaderBinary(Int32 count, ref Int32 shaders, OpenTK.Graphics.ES30.All binaryformat, IntPtr binary, Int32 length) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// <para>
        /// Specifies the number of shader object handles contained in shaders.
        /// </para>
        /// </param>
        /// <param name="shaders">
        /// <para>
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the format of the shader binaries contained in binary.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the length of the array whose address is given in binary.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glShaderBinary")]
        [CLSCompliant(false)]
        public static void ShaderBinary<T3>(Int32 count, ref Int32 shaders, OpenTK.Graphics.ES30.All binaryformat, [InAttribute, OutAttribute] T3[] binary, Int32 length)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// <para>
        /// Specifies the number of shader object handles contained in shaders.
        /// </para>
        /// </param>
        /// <param name="shaders">
        /// <para>
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the format of the shader binaries contained in binary.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the length of the array whose address is given in binary.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glShaderBinary")]
        [CLSCompliant(false)]
        public static void ShaderBinary<T3>(Int32 count, ref Int32 shaders, OpenTK.Graphics.ES30.All binaryformat, [InAttribute, OutAttribute] T3[,] binary, Int32 length)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// <para>
        /// Specifies the number of shader object handles contained in shaders.
        /// </para>
        /// </param>
        /// <param name="shaders">
        /// <para>
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the format of the shader binaries contained in binary.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the length of the array whose address is given in binary.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glShaderBinary")]
        [CLSCompliant(false)]
        public static void ShaderBinary<T3>(Int32 count, ref Int32 shaders, OpenTK.Graphics.ES30.All binaryformat, [InAttribute, OutAttribute] T3[,,] binary, Int32 length)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// <para>
        /// Specifies the number of shader object handles contained in shaders.
        /// </para>
        /// </param>
        /// <param name="shaders">
        /// <para>
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the format of the shader binaries contained in binary.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the length of the array whose address is given in binary.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glShaderBinary")]
        [CLSCompliant(false)]
        public static void ShaderBinary<T3>(Int32 count, ref Int32 shaders, OpenTK.Graphics.ES30.All binaryformat, [InAttribute, OutAttribute] ref T3 binary, Int32 length)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// <para>
        /// Specifies the number of shader object handles contained in shaders.
        /// </para>
        /// </param>
        /// <param name="shaders">
        /// <para>
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the format of the shader binaries contained in binary.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the length of the array whose address is given in binary.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glShaderBinary")]
        [CLSCompliant(false)]
        public static void ShaderBinary(Int32 count, ref Int32 shaders, OpenTK.Graphics.ES30.ShaderBinaryFormat binaryformat, IntPtr binary, Int32 length) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// <para>
        /// Specifies the number of shader object handles contained in shaders.
        /// </para>
        /// </param>
        /// <param name="shaders">
        /// <para>
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the format of the shader binaries contained in binary.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the length of the array whose address is given in binary.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glShaderBinary")]
        [CLSCompliant(false)]
        public static void ShaderBinary<T3>(Int32 count, ref Int32 shaders, OpenTK.Graphics.ES30.ShaderBinaryFormat binaryformat, [InAttribute, OutAttribute] T3[] binary, Int32 length)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// <para>
        /// Specifies the number of shader object handles contained in shaders.
        /// </para>
        /// </param>
        /// <param name="shaders">
        /// <para>
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the format of the shader binaries contained in binary.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the length of the array whose address is given in binary.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glShaderBinary")]
        [CLSCompliant(false)]
        public static void ShaderBinary<T3>(Int32 count, ref Int32 shaders, OpenTK.Graphics.ES30.ShaderBinaryFormat binaryformat, [InAttribute, OutAttribute] T3[,] binary, Int32 length)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// <para>
        /// Specifies the number of shader object handles contained in shaders.
        /// </para>
        /// </param>
        /// <param name="shaders">
        /// <para>
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the format of the shader binaries contained in binary.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the length of the array whose address is given in binary.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glShaderBinary")]
        [CLSCompliant(false)]
        public static void ShaderBinary<T3>(Int32 count, ref Int32 shaders, OpenTK.Graphics.ES30.ShaderBinaryFormat binaryformat, [InAttribute, OutAttribute] T3[,,] binary, Int32 length)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// <para>
        /// Specifies the number of shader object handles contained in shaders.
        /// </para>
        /// </param>
        /// <param name="shaders">
        /// <para>
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the format of the shader binaries contained in binary.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the length of the array whose address is given in binary.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glShaderBinary")]
        [CLSCompliant(false)]
        public static void ShaderBinary<T3>(Int32 count, ref Int32 shaders, OpenTK.Graphics.ES30.ShaderBinaryFormat binaryformat, [InAttribute, OutAttribute] ref T3 binary, Int32 length)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// <para>
        /// Specifies the number of shader object handles contained in shaders.
        /// </para>
        /// </param>
        /// <param name="shaders">
        /// <para>
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the format of the shader binaries contained in binary.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the length of the array whose address is given in binary.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glShaderBinary")]
        [CLSCompliant(false)]
        public static unsafe void ShaderBinary(Int32 count, Int32* shaders, OpenTK.Graphics.ES30.All binaryformat, IntPtr binary, Int32 length) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// <para>
        /// Specifies the number of shader object handles contained in shaders.
        /// </para>
        /// </param>
        /// <param name="shaders">
        /// <para>
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the format of the shader binaries contained in binary.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the length of the array whose address is given in binary.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glShaderBinary")]
        [CLSCompliant(false)]
        public static unsafe void ShaderBinary<T3>(Int32 count, Int32* shaders, OpenTK.Graphics.ES30.All binaryformat, [InAttribute, OutAttribute] T3[] binary, Int32 length)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// <para>
        /// Specifies the number of shader object handles contained in shaders.
        /// </para>
        /// </param>
        /// <param name="shaders">
        /// <para>
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the format of the shader binaries contained in binary.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the length of the array whose address is given in binary.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glShaderBinary")]
        [CLSCompliant(false)]
        public static unsafe void ShaderBinary<T3>(Int32 count, Int32* shaders, OpenTK.Graphics.ES30.All binaryformat, [InAttribute, OutAttribute] T3[,] binary, Int32 length)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// <para>
        /// Specifies the number of shader object handles contained in shaders.
        /// </para>
        /// </param>
        /// <param name="shaders">
        /// <para>
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the format of the shader binaries contained in binary.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the length of the array whose address is given in binary.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glShaderBinary")]
        [CLSCompliant(false)]
        public static unsafe void ShaderBinary<T3>(Int32 count, Int32* shaders, OpenTK.Graphics.ES30.All binaryformat, [InAttribute, OutAttribute] T3[,,] binary, Int32 length)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// <para>
        /// Specifies the number of shader object handles contained in shaders.
        /// </para>
        /// </param>
        /// <param name="shaders">
        /// <para>
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the format of the shader binaries contained in binary.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the length of the array whose address is given in binary.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glShaderBinary")]
        [CLSCompliant(false)]
        public static unsafe void ShaderBinary<T3>(Int32 count, Int32* shaders, OpenTK.Graphics.ES30.All binaryformat, [InAttribute, OutAttribute] ref T3 binary, Int32 length)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// <para>
        /// Specifies the number of shader object handles contained in shaders.
        /// </para>
        /// </param>
        /// <param name="shaders">
        /// <para>
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the format of the shader binaries contained in binary.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the length of the array whose address is given in binary.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glShaderBinary")]
        [CLSCompliant(false)]
        public static unsafe void ShaderBinary(Int32 count, Int32* shaders, OpenTK.Graphics.ES30.ShaderBinaryFormat binaryformat, IntPtr binary, Int32 length) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// <para>
        /// Specifies the number of shader object handles contained in shaders.
        /// </para>
        /// </param>
        /// <param name="shaders">
        /// <para>
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the format of the shader binaries contained in binary.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the length of the array whose address is given in binary.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glShaderBinary")]
        [CLSCompliant(false)]
        public static unsafe void ShaderBinary<T3>(Int32 count, Int32* shaders, OpenTK.Graphics.ES30.ShaderBinaryFormat binaryformat, [InAttribute, OutAttribute] T3[] binary, Int32 length)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// <para>
        /// Specifies the number of shader object handles contained in shaders.
        /// </para>
        /// </param>
        /// <param name="shaders">
        /// <para>
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the format of the shader binaries contained in binary.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the length of the array whose address is given in binary.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glShaderBinary")]
        [CLSCompliant(false)]
        public static unsafe void ShaderBinary<T3>(Int32 count, Int32* shaders, OpenTK.Graphics.ES30.ShaderBinaryFormat binaryformat, [InAttribute, OutAttribute] T3[,] binary, Int32 length)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// <para>
        /// Specifies the number of shader object handles contained in shaders.
        /// </para>
        /// </param>
        /// <param name="shaders">
        /// <para>
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the format of the shader binaries contained in binary.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the length of the array whose address is given in binary.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glShaderBinary")]
        [CLSCompliant(false)]
        public static unsafe void ShaderBinary<T3>(Int32 count, Int32* shaders, OpenTK.Graphics.ES30.ShaderBinaryFormat binaryformat, [InAttribute, OutAttribute] T3[,,] binary, Int32 length)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// <para>
        /// Specifies the number of shader object handles contained in shaders.
        /// </para>
        /// </param>
        /// <param name="shaders">
        /// <para>
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the format of the shader binaries contained in binary.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the length of the array whose address is given in binary.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glShaderBinary")]
        [CLSCompliant(false)]
        public static unsafe void ShaderBinary<T3>(Int32 count, Int32* shaders, OpenTK.Graphics.ES30.ShaderBinaryFormat binaryformat, [InAttribute, OutAttribute] ref T3 binary, Int32 length)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// <para>
        /// Specifies the number of shader object handles contained in shaders.
        /// </para>
        /// </param>
        /// <param name="shaders">
        /// <para>
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the format of the shader binaries contained in binary.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the length of the array whose address is given in binary.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glShaderBinary")]
        [CLSCompliant(false)]
        public static void ShaderBinary(Int32 count, UInt32[] shaders, OpenTK.Graphics.ES30.All binaryformat, IntPtr binary, Int32 length) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// <para>
        /// Specifies the number of shader object handles contained in shaders.
        /// </para>
        /// </param>
        /// <param name="shaders">
        /// <para>
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the format of the shader binaries contained in binary.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the length of the array whose address is given in binary.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glShaderBinary")]
        [CLSCompliant(false)]
        public static void ShaderBinary<T3>(Int32 count, UInt32[] shaders, OpenTK.Graphics.ES30.All binaryformat, [InAttribute, OutAttribute] T3[] binary, Int32 length)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// <para>
        /// Specifies the number of shader object handles contained in shaders.
        /// </para>
        /// </param>
        /// <param name="shaders">
        /// <para>
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the format of the shader binaries contained in binary.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the length of the array whose address is given in binary.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glShaderBinary")]
        [CLSCompliant(false)]
        public static void ShaderBinary<T3>(Int32 count, UInt32[] shaders, OpenTK.Graphics.ES30.All binaryformat, [InAttribute, OutAttribute] T3[,] binary, Int32 length)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// <para>
        /// Specifies the number of shader object handles contained in shaders.
        /// </para>
        /// </param>
        /// <param name="shaders">
        /// <para>
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the format of the shader binaries contained in binary.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the length of the array whose address is given in binary.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glShaderBinary")]
        [CLSCompliant(false)]
        public static void ShaderBinary<T3>(Int32 count, UInt32[] shaders, OpenTK.Graphics.ES30.All binaryformat, [InAttribute, OutAttribute] T3[,,] binary, Int32 length)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// <para>
        /// Specifies the number of shader object handles contained in shaders.
        /// </para>
        /// </param>
        /// <param name="shaders">
        /// <para>
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the format of the shader binaries contained in binary.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the length of the array whose address is given in binary.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glShaderBinary")]
        [CLSCompliant(false)]
        public static void ShaderBinary<T3>(Int32 count, UInt32[] shaders, OpenTK.Graphics.ES30.All binaryformat, [InAttribute, OutAttribute] ref T3 binary, Int32 length)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// <para>
        /// Specifies the number of shader object handles contained in shaders.
        /// </para>
        /// </param>
        /// <param name="shaders">
        /// <para>
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the format of the shader binaries contained in binary.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the length of the array whose address is given in binary.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glShaderBinary")]
        [CLSCompliant(false)]
        public static void ShaderBinary(Int32 count, UInt32[] shaders, OpenTK.Graphics.ES30.ShaderBinaryFormat binaryformat, IntPtr binary, Int32 length) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// <para>
        /// Specifies the number of shader object handles contained in shaders.
        /// </para>
        /// </param>
        /// <param name="shaders">
        /// <para>
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the format of the shader binaries contained in binary.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the length of the array whose address is given in binary.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glShaderBinary")]
        [CLSCompliant(false)]
        public static void ShaderBinary<T3>(Int32 count, UInt32[] shaders, OpenTK.Graphics.ES30.ShaderBinaryFormat binaryformat, [InAttribute, OutAttribute] T3[] binary, Int32 length)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// <para>
        /// Specifies the number of shader object handles contained in shaders.
        /// </para>
        /// </param>
        /// <param name="shaders">
        /// <para>
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the format of the shader binaries contained in binary.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the length of the array whose address is given in binary.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glShaderBinary")]
        [CLSCompliant(false)]
        public static void ShaderBinary<T3>(Int32 count, UInt32[] shaders, OpenTK.Graphics.ES30.ShaderBinaryFormat binaryformat, [InAttribute, OutAttribute] T3[,] binary, Int32 length)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// <para>
        /// Specifies the number of shader object handles contained in shaders.
        /// </para>
        /// </param>
        /// <param name="shaders">
        /// <para>
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the format of the shader binaries contained in binary.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the length of the array whose address is given in binary.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glShaderBinary")]
        [CLSCompliant(false)]
        public static void ShaderBinary<T3>(Int32 count, UInt32[] shaders, OpenTK.Graphics.ES30.ShaderBinaryFormat binaryformat, [InAttribute, OutAttribute] T3[,,] binary, Int32 length)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// <para>
        /// Specifies the number of shader object handles contained in shaders.
        /// </para>
        /// </param>
        /// <param name="shaders">
        /// <para>
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the format of the shader binaries contained in binary.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the length of the array whose address is given in binary.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glShaderBinary")]
        [CLSCompliant(false)]
        public static void ShaderBinary<T3>(Int32 count, UInt32[] shaders, OpenTK.Graphics.ES30.ShaderBinaryFormat binaryformat, [InAttribute, OutAttribute] ref T3 binary, Int32 length)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// <para>
        /// Specifies the number of shader object handles contained in shaders.
        /// </para>
        /// </param>
        /// <param name="shaders">
        /// <para>
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the format of the shader binaries contained in binary.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the length of the array whose address is given in binary.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glShaderBinary")]
        [CLSCompliant(false)]
        public static void ShaderBinary(Int32 count, ref UInt32 shaders, OpenTK.Graphics.ES30.All binaryformat, IntPtr binary, Int32 length) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// <para>
        /// Specifies the number of shader object handles contained in shaders.
        /// </para>
        /// </param>
        /// <param name="shaders">
        /// <para>
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the format of the shader binaries contained in binary.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the length of the array whose address is given in binary.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glShaderBinary")]
        [CLSCompliant(false)]
        public static void ShaderBinary<T3>(Int32 count, ref UInt32 shaders, OpenTK.Graphics.ES30.All binaryformat, [InAttribute, OutAttribute] T3[] binary, Int32 length)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// <para>
        /// Specifies the number of shader object handles contained in shaders.
        /// </para>
        /// </param>
        /// <param name="shaders">
        /// <para>
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the format of the shader binaries contained in binary.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the length of the array whose address is given in binary.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glShaderBinary")]
        [CLSCompliant(false)]
        public static void ShaderBinary<T3>(Int32 count, ref UInt32 shaders, OpenTK.Graphics.ES30.All binaryformat, [InAttribute, OutAttribute] T3[,] binary, Int32 length)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// <para>
        /// Specifies the number of shader object handles contained in shaders.
        /// </para>
        /// </param>
        /// <param name="shaders">
        /// <para>
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the format of the shader binaries contained in binary.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the length of the array whose address is given in binary.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glShaderBinary")]
        [CLSCompliant(false)]
        public static void ShaderBinary<T3>(Int32 count, ref UInt32 shaders, OpenTK.Graphics.ES30.All binaryformat, [InAttribute, OutAttribute] T3[,,] binary, Int32 length)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// <para>
        /// Specifies the number of shader object handles contained in shaders.
        /// </para>
        /// </param>
        /// <param name="shaders">
        /// <para>
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the format of the shader binaries contained in binary.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the length of the array whose address is given in binary.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glShaderBinary")]
        [CLSCompliant(false)]
        public static void ShaderBinary<T3>(Int32 count, ref UInt32 shaders, OpenTK.Graphics.ES30.All binaryformat, [InAttribute, OutAttribute] ref T3 binary, Int32 length)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// <para>
        /// Specifies the number of shader object handles contained in shaders.
        /// </para>
        /// </param>
        /// <param name="shaders">
        /// <para>
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the format of the shader binaries contained in binary.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the length of the array whose address is given in binary.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glShaderBinary")]
        [CLSCompliant(false)]
        public static void ShaderBinary(Int32 count, ref UInt32 shaders, OpenTK.Graphics.ES30.ShaderBinaryFormat binaryformat, IntPtr binary, Int32 length) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// <para>
        /// Specifies the number of shader object handles contained in shaders.
        /// </para>
        /// </param>
        /// <param name="shaders">
        /// <para>
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the format of the shader binaries contained in binary.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the length of the array whose address is given in binary.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glShaderBinary")]
        [CLSCompliant(false)]
        public static void ShaderBinary<T3>(Int32 count, ref UInt32 shaders, OpenTK.Graphics.ES30.ShaderBinaryFormat binaryformat, [InAttribute, OutAttribute] T3[] binary, Int32 length)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// <para>
        /// Specifies the number of shader object handles contained in shaders.
        /// </para>
        /// </param>
        /// <param name="shaders">
        /// <para>
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the format of the shader binaries contained in binary.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the length of the array whose address is given in binary.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glShaderBinary")]
        [CLSCompliant(false)]
        public static void ShaderBinary<T3>(Int32 count, ref UInt32 shaders, OpenTK.Graphics.ES30.ShaderBinaryFormat binaryformat, [InAttribute, OutAttribute] T3[,] binary, Int32 length)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// <para>
        /// Specifies the number of shader object handles contained in shaders.
        /// </para>
        /// </param>
        /// <param name="shaders">
        /// <para>
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the format of the shader binaries contained in binary.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the length of the array whose address is given in binary.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glShaderBinary")]
        [CLSCompliant(false)]
        public static void ShaderBinary<T3>(Int32 count, ref UInt32 shaders, OpenTK.Graphics.ES30.ShaderBinaryFormat binaryformat, [InAttribute, OutAttribute] T3[,,] binary, Int32 length)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// <para>
        /// Specifies the number of shader object handles contained in shaders.
        /// </para>
        /// </param>
        /// <param name="shaders">
        /// <para>
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the format of the shader binaries contained in binary.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the length of the array whose address is given in binary.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glShaderBinary")]
        [CLSCompliant(false)]
        public static void ShaderBinary<T3>(Int32 count, ref UInt32 shaders, OpenTK.Graphics.ES30.ShaderBinaryFormat binaryformat, [InAttribute, OutAttribute] ref T3 binary, Int32 length)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// <para>
        /// Specifies the number of shader object handles contained in shaders.
        /// </para>
        /// </param>
        /// <param name="shaders">
        /// <para>
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the format of the shader binaries contained in binary.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the length of the array whose address is given in binary.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glShaderBinary")]
        [CLSCompliant(false)]
        public static unsafe void ShaderBinary(Int32 count, UInt32* shaders, OpenTK.Graphics.ES30.All binaryformat, IntPtr binary, Int32 length) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// <para>
        /// Specifies the number of shader object handles contained in shaders.
        /// </para>
        /// </param>
        /// <param name="shaders">
        /// <para>
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the format of the shader binaries contained in binary.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the length of the array whose address is given in binary.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glShaderBinary")]
        [CLSCompliant(false)]
        public static unsafe void ShaderBinary<T3>(Int32 count, UInt32* shaders, OpenTK.Graphics.ES30.All binaryformat, [InAttribute, OutAttribute] T3[] binary, Int32 length)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// <para>
        /// Specifies the number of shader object handles contained in shaders.
        /// </para>
        /// </param>
        /// <param name="shaders">
        /// <para>
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the format of the shader binaries contained in binary.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the length of the array whose address is given in binary.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glShaderBinary")]
        [CLSCompliant(false)]
        public static unsafe void ShaderBinary<T3>(Int32 count, UInt32* shaders, OpenTK.Graphics.ES30.All binaryformat, [InAttribute, OutAttribute] T3[,] binary, Int32 length)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// <para>
        /// Specifies the number of shader object handles contained in shaders.
        /// </para>
        /// </param>
        /// <param name="shaders">
        /// <para>
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the format of the shader binaries contained in binary.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the length of the array whose address is given in binary.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glShaderBinary")]
        [CLSCompliant(false)]
        public static unsafe void ShaderBinary<T3>(Int32 count, UInt32* shaders, OpenTK.Graphics.ES30.All binaryformat, [InAttribute, OutAttribute] T3[,,] binary, Int32 length)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// <para>
        /// Specifies the number of shader object handles contained in shaders.
        /// </para>
        /// </param>
        /// <param name="shaders">
        /// <para>
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the format of the shader binaries contained in binary.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the length of the array whose address is given in binary.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glShaderBinary")]
        [CLSCompliant(false)]
        public static unsafe void ShaderBinary<T3>(Int32 count, UInt32* shaders, OpenTK.Graphics.ES30.All binaryformat, [InAttribute, OutAttribute] ref T3 binary, Int32 length)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// <para>
        /// Specifies the number of shader object handles contained in shaders.
        /// </para>
        /// </param>
        /// <param name="shaders">
        /// <para>
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the format of the shader binaries contained in binary.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the length of the array whose address is given in binary.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glShaderBinary")]
        [CLSCompliant(false)]
        public static unsafe void ShaderBinary(Int32 count, UInt32* shaders, OpenTK.Graphics.ES30.ShaderBinaryFormat binaryformat, IntPtr binary, Int32 length) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// <para>
        /// Specifies the number of shader object handles contained in shaders.
        /// </para>
        /// </param>
        /// <param name="shaders">
        /// <para>
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the format of the shader binaries contained in binary.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the length of the array whose address is given in binary.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glShaderBinary")]
        [CLSCompliant(false)]
        public static unsafe void ShaderBinary<T3>(Int32 count, UInt32* shaders, OpenTK.Graphics.ES30.ShaderBinaryFormat binaryformat, [InAttribute, OutAttribute] T3[] binary, Int32 length)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// <para>
        /// Specifies the number of shader object handles contained in shaders.
        /// </para>
        /// </param>
        /// <param name="shaders">
        /// <para>
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the format of the shader binaries contained in binary.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the length of the array whose address is given in binary.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glShaderBinary")]
        [CLSCompliant(false)]
        public static unsafe void ShaderBinary<T3>(Int32 count, UInt32* shaders, OpenTK.Graphics.ES30.ShaderBinaryFormat binaryformat, [InAttribute, OutAttribute] T3[,] binary, Int32 length)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// <para>
        /// Specifies the number of shader object handles contained in shaders.
        /// </para>
        /// </param>
        /// <param name="shaders">
        /// <para>
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the format of the shader binaries contained in binary.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the length of the array whose address is given in binary.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glShaderBinary")]
        [CLSCompliant(false)]
        public static unsafe void ShaderBinary<T3>(Int32 count, UInt32* shaders, OpenTK.Graphics.ES30.ShaderBinaryFormat binaryformat, [InAttribute, OutAttribute] T3[,,] binary, Int32 length)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// <para>
        /// Specifies the number of shader object handles contained in shaders.
        /// </para>
        /// </param>
        /// <param name="shaders">
        /// <para>
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </para>
        /// </param>
        /// <param name="binaryFormat">
        /// <para>
        /// Specifies the format of the shader binaries contained in binary.
        /// </para>
        /// </param>
        /// <param name="binary">
        /// <para>
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies the length of the array whose address is given in binary.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glShaderBinary")]
        [CLSCompliant(false)]
        public static unsafe void ShaderBinary<T3>(Int32 count, UInt32* shaders, OpenTK.Graphics.ES30.ShaderBinaryFormat binaryformat, [InAttribute, OutAttribute] ref T3 binary, Int32 length)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Replaces the source code in a shader object
        /// </summary>
        /// <param name="shader">
        /// <para>
        /// Specifies the handle of the shader object whose source code is to be replaced.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements in the string and length arrays.
        /// </para>
        /// </param>
        /// <param name="string">
        /// <para>
        /// Specifies an array of pointers to strings containing the source code to be loaded into the shader.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies an array of string lengths.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glShaderSource")]
        [CLSCompliant(false)]
        public static void ShaderSource(Int32 shader, Int32 count, String[] @string, Int32[] length) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Replaces the source code in a shader object
        /// </summary>
        /// <param name="shader">
        /// <para>
        /// Specifies the handle of the shader object whose source code is to be replaced.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements in the string and length arrays.
        /// </para>
        /// </param>
        /// <param name="string">
        /// <para>
        /// Specifies an array of pointers to strings containing the source code to be loaded into the shader.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies an array of string lengths.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glShaderSource")]
        [CLSCompliant(false)]
        public static void ShaderSource(Int32 shader, Int32 count, String[] @string, ref Int32 length) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Replaces the source code in a shader object
        /// </summary>
        /// <param name="shader">
        /// <para>
        /// Specifies the handle of the shader object whose source code is to be replaced.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements in the string and length arrays.
        /// </para>
        /// </param>
        /// <param name="string">
        /// <para>
        /// Specifies an array of pointers to strings containing the source code to be loaded into the shader.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies an array of string lengths.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glShaderSource")]
        [CLSCompliant(false)]
        public static unsafe void ShaderSource(Int32 shader, Int32 count, String[] @string, Int32* length) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Replaces the source code in a shader object
        /// </summary>
        /// <param name="shader">
        /// <para>
        /// Specifies the handle of the shader object whose source code is to be replaced.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements in the string and length arrays.
        /// </para>
        /// </param>
        /// <param name="string">
        /// <para>
        /// Specifies an array of pointers to strings containing the source code to be loaded into the shader.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies an array of string lengths.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glShaderSource")]
        [CLSCompliant(false)]
        public static void ShaderSource(UInt32 shader, Int32 count, String[] @string, Int32[] length) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Replaces the source code in a shader object
        /// </summary>
        /// <param name="shader">
        /// <para>
        /// Specifies the handle of the shader object whose source code is to be replaced.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements in the string and length arrays.
        /// </para>
        /// </param>
        /// <param name="string">
        /// <para>
        /// Specifies an array of pointers to strings containing the source code to be loaded into the shader.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies an array of string lengths.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glShaderSource")]
        [CLSCompliant(false)]
        public static void ShaderSource(UInt32 shader, Int32 count, String[] @string, ref Int32 length) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Replaces the source code in a shader object
        /// </summary>
        /// <param name="shader">
        /// <para>
        /// Specifies the handle of the shader object whose source code is to be replaced.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements in the string and length arrays.
        /// </para>
        /// </param>
        /// <param name="string">
        /// <para>
        /// Specifies an array of pointers to strings containing the source code to be loaded into the shader.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies an array of string lengths.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glShaderSource")]
        [CLSCompliant(false)]
        public static unsafe void ShaderSource(UInt32 shader, Int32 count, String[] @string, Int32* length) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Set front and back function and reference value for stencil testing
        /// </summary>
        /// <param name="func">
        /// <para>
        /// Specifies the test function. Eight symbolic constants are valid: GL_NEVER, GL_LESS, GL_LEQUAL, GL_GREATER, GL_GEQUAL, GL_EQUAL, GL_NOTEQUAL, and GL_ALWAYS. The initial value is GL_ALWAYS.
        /// </para>
        /// </param>
        /// <param name="ref">
        /// <para>
        /// Specifies the reference value for the stencil test. ref is clamped to the range [0, 2 sup n - 1], where is the number of bitplanes in the stencil buffer. The initial value is 0.
        /// </para>
        /// </param>
        /// <param name="mask">
        /// <para>
        /// Specifies a mask that is ANDed with both the reference value and the stored stencil value when the test is done. The initial value is all 1's.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glStencilFunc")]
        [CLSCompliant(false)]
        public static void StencilFunc(OpenTK.Graphics.ES30.All func, Int32 @ref, Int32 mask) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Set front and back function and reference value for stencil testing
        /// </summary>
        /// <param name="func">
        /// <para>
        /// Specifies the test function. Eight symbolic constants are valid: GL_NEVER, GL_LESS, GL_LEQUAL, GL_GREATER, GL_GEQUAL, GL_EQUAL, GL_NOTEQUAL, and GL_ALWAYS. The initial value is GL_ALWAYS.
        /// </para>
        /// </param>
        /// <param name="ref">
        /// <para>
        /// Specifies the reference value for the stencil test. ref is clamped to the range [0, 2 sup n - 1], where is the number of bitplanes in the stencil buffer. The initial value is 0.
        /// </para>
        /// </param>
        /// <param name="mask">
        /// <para>
        /// Specifies a mask that is ANDed with both the reference value and the stored stencil value when the test is done. The initial value is all 1's.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glStencilFunc")]
        [CLSCompliant(false)]
        public static void StencilFunc(OpenTK.Graphics.ES30.All func, Int32 @ref, UInt32 mask) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Set front and back function and reference value for stencil testing
        /// </summary>
        /// <param name="func">
        /// <para>
        /// Specifies the test function. Eight symbolic constants are valid: GL_NEVER, GL_LESS, GL_LEQUAL, GL_GREATER, GL_GEQUAL, GL_EQUAL, GL_NOTEQUAL, and GL_ALWAYS. The initial value is GL_ALWAYS.
        /// </para>
        /// </param>
        /// <param name="ref">
        /// <para>
        /// Specifies the reference value for the stencil test. ref is clamped to the range [0, 2 sup n - 1], where is the number of bitplanes in the stencil buffer. The initial value is 0.
        /// </para>
        /// </param>
        /// <param name="mask">
        /// <para>
        /// Specifies a mask that is ANDed with both the reference value and the stored stencil value when the test is done. The initial value is all 1's.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glStencilFunc")]
        [CLSCompliant(false)]
        public static void StencilFunc(OpenTK.Graphics.ES30.StencilFunction func, Int32 @ref, Int32 mask) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Set front and back function and reference value for stencil testing
        /// </summary>
        /// <param name="func">
        /// <para>
        /// Specifies the test function. Eight symbolic constants are valid: GL_NEVER, GL_LESS, GL_LEQUAL, GL_GREATER, GL_GEQUAL, GL_EQUAL, GL_NOTEQUAL, and GL_ALWAYS. The initial value is GL_ALWAYS.
        /// </para>
        /// </param>
        /// <param name="ref">
        /// <para>
        /// Specifies the reference value for the stencil test. ref is clamped to the range [0, 2 sup n - 1], where is the number of bitplanes in the stencil buffer. The initial value is 0.
        /// </para>
        /// </param>
        /// <param name="mask">
        /// <para>
        /// Specifies a mask that is ANDed with both the reference value and the stored stencil value when the test is done. The initial value is all 1's.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glStencilFunc")]
        [CLSCompliant(false)]
        public static void StencilFunc(OpenTK.Graphics.ES30.StencilFunction func, Int32 @ref, UInt32 mask) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Set front and/or back function and reference value for stencil testing
        /// </summary>
        /// <param name="face">
        /// <para>
        /// Specifies whether front and/or back stencil state is updated. Three symbolic constants are valid: GL_FRONT, GL_BACK, and GL_FRONT_AND_BACK.
        /// </para>
        /// </param>
        /// <param name="func">
        /// <para>
        /// Specifies the test function. Eight symbolic constants are valid: GL_NEVER, GL_LESS, GL_LEQUAL, GL_GREATER, GL_GEQUAL, GL_EQUAL, GL_NOTEQUAL, and GL_ALWAYS. The initial value is GL_ALWAYS.
        /// </para>
        /// </param>
        /// <param name="ref">
        /// <para>
        /// Specifies the reference value for the stencil test. ref is clamped to the range [0, 2 sup n - 1], where is the number of bitplanes in the stencil buffer. The initial value is 0.
        /// </para>
        /// </param>
        /// <param name="mask">
        /// <para>
        /// Specifies a mask that is ANDed with both the reference value and the stored stencil value when the test is done. The initial value is all 1's.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glStencilFuncSeparate")]
        [CLSCompliant(false)]
        public static void StencilFuncSeparate(OpenTK.Graphics.ES30.All face, OpenTK.Graphics.ES30.All func, Int32 @ref, Int32 mask) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Set front and/or back function and reference value for stencil testing
        /// </summary>
        /// <param name="face">
        /// <para>
        /// Specifies whether front and/or back stencil state is updated. Three symbolic constants are valid: GL_FRONT, GL_BACK, and GL_FRONT_AND_BACK.
        /// </para>
        /// </param>
        /// <param name="func">
        /// <para>
        /// Specifies the test function. Eight symbolic constants are valid: GL_NEVER, GL_LESS, GL_LEQUAL, GL_GREATER, GL_GEQUAL, GL_EQUAL, GL_NOTEQUAL, and GL_ALWAYS. The initial value is GL_ALWAYS.
        /// </para>
        /// </param>
        /// <param name="ref">
        /// <para>
        /// Specifies the reference value for the stencil test. ref is clamped to the range [0, 2 sup n - 1], where is the number of bitplanes in the stencil buffer. The initial value is 0.
        /// </para>
        /// </param>
        /// <param name="mask">
        /// <para>
        /// Specifies a mask that is ANDed with both the reference value and the stored stencil value when the test is done. The initial value is all 1's.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glStencilFuncSeparate")]
        [CLSCompliant(false)]
        public static void StencilFuncSeparate(OpenTK.Graphics.ES30.All face, OpenTK.Graphics.ES30.All func, Int32 @ref, UInt32 mask) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Set front and/or back function and reference value for stencil testing
        /// </summary>
        /// <param name="face">
        /// <para>
        /// Specifies whether front and/or back stencil state is updated. Three symbolic constants are valid: GL_FRONT, GL_BACK, and GL_FRONT_AND_BACK.
        /// </para>
        /// </param>
        /// <param name="func">
        /// <para>
        /// Specifies the test function. Eight symbolic constants are valid: GL_NEVER, GL_LESS, GL_LEQUAL, GL_GREATER, GL_GEQUAL, GL_EQUAL, GL_NOTEQUAL, and GL_ALWAYS. The initial value is GL_ALWAYS.
        /// </para>
        /// </param>
        /// <param name="ref">
        /// <para>
        /// Specifies the reference value for the stencil test. ref is clamped to the range [0, 2 sup n - 1], where is the number of bitplanes in the stencil buffer. The initial value is 0.
        /// </para>
        /// </param>
        /// <param name="mask">
        /// <para>
        /// Specifies a mask that is ANDed with both the reference value and the stored stencil value when the test is done. The initial value is all 1's.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glStencilFuncSeparate")]
        [CLSCompliant(false)]
        public static void StencilFuncSeparate(OpenTK.Graphics.ES30.StencilFace face, OpenTK.Graphics.ES30.StencilFunction func, Int32 @ref, Int32 mask) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Set front and/or back function and reference value for stencil testing
        /// </summary>
        /// <param name="face">
        /// <para>
        /// Specifies whether front and/or back stencil state is updated. Three symbolic constants are valid: GL_FRONT, GL_BACK, and GL_FRONT_AND_BACK.
        /// </para>
        /// </param>
        /// <param name="func">
        /// <para>
        /// Specifies the test function. Eight symbolic constants are valid: GL_NEVER, GL_LESS, GL_LEQUAL, GL_GREATER, GL_GEQUAL, GL_EQUAL, GL_NOTEQUAL, and GL_ALWAYS. The initial value is GL_ALWAYS.
        /// </para>
        /// </param>
        /// <param name="ref">
        /// <para>
        /// Specifies the reference value for the stencil test. ref is clamped to the range [0, 2 sup n - 1], where is the number of bitplanes in the stencil buffer. The initial value is 0.
        /// </para>
        /// </param>
        /// <param name="mask">
        /// <para>
        /// Specifies a mask that is ANDed with both the reference value and the stored stencil value when the test is done. The initial value is all 1's.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glStencilFuncSeparate")]
        [CLSCompliant(false)]
        public static void StencilFuncSeparate(OpenTK.Graphics.ES30.StencilFace face, OpenTK.Graphics.ES30.StencilFunction func, Int32 @ref, UInt32 mask) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Control the front and back writing of individual bits in the stencil planes
        /// </summary>
        /// <param name="mask">
        /// <para>
        /// Specifies a bit mask to enable and disable writing of individual bits in the stencil planes. Initially, the mask is all 1's.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glStencilMask")]
        [CLSCompliant(false)]
        public static void StencilMask(Int32 mask) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Control the front and back writing of individual bits in the stencil planes
        /// </summary>
        /// <param name="mask">
        /// <para>
        /// Specifies a bit mask to enable and disable writing of individual bits in the stencil planes. Initially, the mask is all 1's.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glStencilMask")]
        [CLSCompliant(false)]
        public static void StencilMask(UInt32 mask) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Control the front and/or back writing of individual bits in the stencil planes
        /// </summary>
        /// <param name="face">
        /// <para>
        /// Specifies whether the front and/or back stencil writemask is updated. Three symbolic constants are valid: GL_FRONT, GL_BACK, and GL_FRONT_AND_BACK.
        /// </para>
        /// </param>
        /// <param name="mask">
        /// <para>
        /// Specifies a bit mask to enable and disable writing of individual bits in the stencil planes. Initially, the mask is all 1's.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glStencilMaskSeparate")]
        [CLSCompliant(false)]
        public static void StencilMaskSeparate(OpenTK.Graphics.ES30.All face, Int32 mask) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Control the front and/or back writing of individual bits in the stencil planes
        /// </summary>
        /// <param name="face">
        /// <para>
        /// Specifies whether the front and/or back stencil writemask is updated. Three symbolic constants are valid: GL_FRONT, GL_BACK, and GL_FRONT_AND_BACK.
        /// </para>
        /// </param>
        /// <param name="mask">
        /// <para>
        /// Specifies a bit mask to enable and disable writing of individual bits in the stencil planes. Initially, the mask is all 1's.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glStencilMaskSeparate")]
        [CLSCompliant(false)]
        public static void StencilMaskSeparate(OpenTK.Graphics.ES30.All face, UInt32 mask) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Control the front and/or back writing of individual bits in the stencil planes
        /// </summary>
        /// <param name="face">
        /// <para>
        /// Specifies whether the front and/or back stencil writemask is updated. Three symbolic constants are valid: GL_FRONT, GL_BACK, and GL_FRONT_AND_BACK.
        /// </para>
        /// </param>
        /// <param name="mask">
        /// <para>
        /// Specifies a bit mask to enable and disable writing of individual bits in the stencil planes. Initially, the mask is all 1's.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glStencilMaskSeparate")]
        [CLSCompliant(false)]
        public static void StencilMaskSeparate(OpenTK.Graphics.ES30.StencilFace face, Int32 mask) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Control the front and/or back writing of individual bits in the stencil planes
        /// </summary>
        /// <param name="face">
        /// <para>
        /// Specifies whether the front and/or back stencil writemask is updated. Three symbolic constants are valid: GL_FRONT, GL_BACK, and GL_FRONT_AND_BACK.
        /// </para>
        /// </param>
        /// <param name="mask">
        /// <para>
        /// Specifies a bit mask to enable and disable writing of individual bits in the stencil planes. Initially, the mask is all 1's.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glStencilMaskSeparate")]
        [CLSCompliant(false)]
        public static void StencilMaskSeparate(OpenTK.Graphics.ES30.StencilFace face, UInt32 mask) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Set front and back stencil test actions
        /// </summary>
        /// <param name="sfail">
        /// <para>
        /// Specifies the action to take when the stencil test fails. Eight symbolic constants are accepted: GL_KEEP, GL_ZERO, GL_REPLACE, GL_INCR, GL_INCR_WRAP, GL_DECR, GL_DECR_WRAP, and GL_INVERT. The initial value is GL_KEEP.
        /// </para>
        /// </param>
        /// <param name="dpfail">
        /// <para>
        /// Specifies the stencil action when the stencil test passes, but the depth test fails. dpfail accepts the same symbolic constants as sfail. The initial value is GL_KEEP.
        /// </para>
        /// </param>
        /// <param name="dppass">
        /// <para>
        /// Specifies the stencil action when both the stencil test and the depth test pass, or when the stencil test passes and either there is no depth buffer or depth testing is not enabled. dppass accepts the same symbolic constants as sfail. The initial value is GL_KEEP.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glStencilOp")]
        public static void StencilOp(OpenTK.Graphics.ES30.All fail, OpenTK.Graphics.ES30.All zfail, OpenTK.Graphics.ES30.All zpass) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Set front and back stencil test actions
        /// </summary>
        /// <param name="sfail">
        /// <para>
        /// Specifies the action to take when the stencil test fails. Eight symbolic constants are accepted: GL_KEEP, GL_ZERO, GL_REPLACE, GL_INCR, GL_INCR_WRAP, GL_DECR, GL_DECR_WRAP, and GL_INVERT. The initial value is GL_KEEP.
        /// </para>
        /// </param>
        /// <param name="dpfail">
        /// <para>
        /// Specifies the stencil action when the stencil test passes, but the depth test fails. dpfail accepts the same symbolic constants as sfail. The initial value is GL_KEEP.
        /// </para>
        /// </param>
        /// <param name="dppass">
        /// <para>
        /// Specifies the stencil action when both the stencil test and the depth test pass, or when the stencil test passes and either there is no depth buffer or depth testing is not enabled. dppass accepts the same symbolic constants as sfail. The initial value is GL_KEEP.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glStencilOp")]
        public static void StencilOp(OpenTK.Graphics.ES30.StencilOp fail, OpenTK.Graphics.ES30.StencilOp zfail, OpenTK.Graphics.ES30.StencilOp zpass) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Set front and/or back stencil test actions
        /// </summary>
        /// <param name="face">
        /// <para>
        /// Specifies whether front and/or back stencil state is updated. Three symbolic constants are valid: GL_FRONT, GL_BACK, and GL_FRONT_AND_BACK.
        /// </para>
        /// </param>
        /// <param name="sfail">
        /// <para>
        /// Specifies the action to take when the stencil test fails. Eight symbolic constants are accepted: GL_KEEP, GL_ZERO, GL_REPLACE, GL_INCR, GL_INCR_WRAP, GL_DECR, GL_DECR_WRAP, and GL_INVERT. The initial value is GL_KEEP.
        /// </para>
        /// </param>
        /// <param name="dpfail">
        /// <para>
        /// Specifies the stencil action when the stencil test passes, but the depth test fails. dpfail accepts the same symbolic constants as sfail. The initial value is GL_KEEP.
        /// </para>
        /// </param>
        /// <param name="dppass">
        /// <para>
        /// Specifies the stencil action when both the stencil test and the depth test pass, or when the stencil test passes and either there is no depth buffer or depth testing is not enabled. dppass accepts the same symbolic constants as sfail. The initial value is GL_KEEP.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glStencilOpSeparate")]
        public static void StencilOpSeparate(OpenTK.Graphics.ES30.All face, OpenTK.Graphics.ES30.All sfail, OpenTK.Graphics.ES30.All dpfail, OpenTK.Graphics.ES30.All dppass) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Set front and/or back stencil test actions
        /// </summary>
        /// <param name="face">
        /// <para>
        /// Specifies whether front and/or back stencil state is updated. Three symbolic constants are valid: GL_FRONT, GL_BACK, and GL_FRONT_AND_BACK.
        /// </para>
        /// </param>
        /// <param name="sfail">
        /// <para>
        /// Specifies the action to take when the stencil test fails. Eight symbolic constants are accepted: GL_KEEP, GL_ZERO, GL_REPLACE, GL_INCR, GL_INCR_WRAP, GL_DECR, GL_DECR_WRAP, and GL_INVERT. The initial value is GL_KEEP.
        /// </para>
        /// </param>
        /// <param name="dpfail">
        /// <para>
        /// Specifies the stencil action when the stencil test passes, but the depth test fails. dpfail accepts the same symbolic constants as sfail. The initial value is GL_KEEP.
        /// </para>
        /// </param>
        /// <param name="dppass">
        /// <para>
        /// Specifies the stencil action when both the stencil test and the depth test pass, or when the stencil test passes and either there is no depth buffer or depth testing is not enabled. dppass accepts the same symbolic constants as sfail. The initial value is GL_KEEP.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glStencilOpSeparate")]
        public static void StencilOpSeparate(OpenTK.Graphics.ES30.StencilFace face, OpenTK.Graphics.ES30.StencilOp sfail, OpenTK.Graphics.ES30.StencilOp dpfail, OpenTK.Graphics.ES30.StencilOp dppass) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Specify a two-dimensional texture image
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_2D, GL_PROXY_TEXTURE_2D, GL_TEXTURE_1D_ARRAY, GL_PROXY_TEXTURE_1D_ARRAY, GL_TEXTURE_RECTANGLE, GL_PROXY_TEXTURE_RECTANGLE, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, GL_TEXTURE_CUBE_MAP_NEGATIVE_Z, or GL_PROXY_TEXTURE_CUBE_MAP.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image. If target is GL_TEXTURE_RECTANGLE or GL_PROXY_TEXTURE_RECTANGLE, level must be 0.
        /// </para>
        /// </param>
        /// <param name="internalFormat">
        /// <para>
        /// Specifies the number of color components in the texture. Must be one of base internal formats given in Table 1, one of the sized internal formats given in Table 2, or one of the compressed internal formats given in Table 3, below.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture image. All implementations support texture images that are at least 1024 texels wide.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture image, or the number of layers in a texture array, in the case of the GL_TEXTURE_1D_ARRAY and GL_PROXY_TEXTURE_1D_ARRAY targets. All implementations support 2D texture images that are at least 1024 texels high, and texture arrays that are at least 256 layers deep.
        /// </para>
        /// </param>
        /// <param name="border">
        /// <para>
        /// This value must be 0.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the pixel data. The following symbolic values are accepted: GL_RED, GL_RG, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_RED_INTEGER, GL_RG_INTEGER, GL_RGB_INTEGER, GL_BGR_INTEGER, GL_RGBA_INTEGER, GL_BGRA_INTEGER, GL_STENCIL_INDEX, GL_DEPTH_COMPONENT, GL_DEPTH_STENCIL.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the image data in memory.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glTexImage2D")]
        public static void TexImage2D(OpenTK.Graphics.ES30.All target, Int32 level, OpenTK.Graphics.ES30.All internalformat, Int32 width, Int32 height, Int32 border, OpenTK.Graphics.ES30.All format, OpenTK.Graphics.ES30.All type, IntPtr pixels) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Specify a two-dimensional texture image
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_2D, GL_PROXY_TEXTURE_2D, GL_TEXTURE_1D_ARRAY, GL_PROXY_TEXTURE_1D_ARRAY, GL_TEXTURE_RECTANGLE, GL_PROXY_TEXTURE_RECTANGLE, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, GL_TEXTURE_CUBE_MAP_NEGATIVE_Z, or GL_PROXY_TEXTURE_CUBE_MAP.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image. If target is GL_TEXTURE_RECTANGLE or GL_PROXY_TEXTURE_RECTANGLE, level must be 0.
        /// </para>
        /// </param>
        /// <param name="internalFormat">
        /// <para>
        /// Specifies the number of color components in the texture. Must be one of base internal formats given in Table 1, one of the sized internal formats given in Table 2, or one of the compressed internal formats given in Table 3, below.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture image. All implementations support texture images that are at least 1024 texels wide.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture image, or the number of layers in a texture array, in the case of the GL_TEXTURE_1D_ARRAY and GL_PROXY_TEXTURE_1D_ARRAY targets. All implementations support 2D texture images that are at least 1024 texels high, and texture arrays that are at least 256 layers deep.
        /// </para>
        /// </param>
        /// <param name="border">
        /// <para>
        /// This value must be 0.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the pixel data. The following symbolic values are accepted: GL_RED, GL_RG, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_RED_INTEGER, GL_RG_INTEGER, GL_RGB_INTEGER, GL_BGR_INTEGER, GL_RGBA_INTEGER, GL_BGRA_INTEGER, GL_STENCIL_INDEX, GL_DEPTH_COMPONENT, GL_DEPTH_STENCIL.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the image data in memory.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glTexImage2D")]
        [CLSCompliant(false)]
        public static void TexImage2D<T8>(OpenTK.Graphics.ES30.All target, Int32 level, OpenTK.Graphics.ES30.All internalformat, Int32 width, Int32 height, Int32 border, OpenTK.Graphics.ES30.All format, OpenTK.Graphics.ES30.All type, [InAttribute, OutAttribute] T8[] pixels)
            where T8 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Specify a two-dimensional texture image
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_2D, GL_PROXY_TEXTURE_2D, GL_TEXTURE_1D_ARRAY, GL_PROXY_TEXTURE_1D_ARRAY, GL_TEXTURE_RECTANGLE, GL_PROXY_TEXTURE_RECTANGLE, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, GL_TEXTURE_CUBE_MAP_NEGATIVE_Z, or GL_PROXY_TEXTURE_CUBE_MAP.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image. If target is GL_TEXTURE_RECTANGLE or GL_PROXY_TEXTURE_RECTANGLE, level must be 0.
        /// </para>
        /// </param>
        /// <param name="internalFormat">
        /// <para>
        /// Specifies the number of color components in the texture. Must be one of base internal formats given in Table 1, one of the sized internal formats given in Table 2, or one of the compressed internal formats given in Table 3, below.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture image. All implementations support texture images that are at least 1024 texels wide.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture image, or the number of layers in a texture array, in the case of the GL_TEXTURE_1D_ARRAY and GL_PROXY_TEXTURE_1D_ARRAY targets. All implementations support 2D texture images that are at least 1024 texels high, and texture arrays that are at least 256 layers deep.
        /// </para>
        /// </param>
        /// <param name="border">
        /// <para>
        /// This value must be 0.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the pixel data. The following symbolic values are accepted: GL_RED, GL_RG, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_RED_INTEGER, GL_RG_INTEGER, GL_RGB_INTEGER, GL_BGR_INTEGER, GL_RGBA_INTEGER, GL_BGRA_INTEGER, GL_STENCIL_INDEX, GL_DEPTH_COMPONENT, GL_DEPTH_STENCIL.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the image data in memory.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glTexImage2D")]
        [CLSCompliant(false)]
        public static void TexImage2D<T8>(OpenTK.Graphics.ES30.All target, Int32 level, OpenTK.Graphics.ES30.All internalformat, Int32 width, Int32 height, Int32 border, OpenTK.Graphics.ES30.All format, OpenTK.Graphics.ES30.All type, [InAttribute, OutAttribute] T8[,] pixels)
            where T8 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Specify a two-dimensional texture image
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_2D, GL_PROXY_TEXTURE_2D, GL_TEXTURE_1D_ARRAY, GL_PROXY_TEXTURE_1D_ARRAY, GL_TEXTURE_RECTANGLE, GL_PROXY_TEXTURE_RECTANGLE, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, GL_TEXTURE_CUBE_MAP_NEGATIVE_Z, or GL_PROXY_TEXTURE_CUBE_MAP.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image. If target is GL_TEXTURE_RECTANGLE or GL_PROXY_TEXTURE_RECTANGLE, level must be 0.
        /// </para>
        /// </param>
        /// <param name="internalFormat">
        /// <para>
        /// Specifies the number of color components in the texture. Must be one of base internal formats given in Table 1, one of the sized internal formats given in Table 2, or one of the compressed internal formats given in Table 3, below.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture image. All implementations support texture images that are at least 1024 texels wide.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture image, or the number of layers in a texture array, in the case of the GL_TEXTURE_1D_ARRAY and GL_PROXY_TEXTURE_1D_ARRAY targets. All implementations support 2D texture images that are at least 1024 texels high, and texture arrays that are at least 256 layers deep.
        /// </para>
        /// </param>
        /// <param name="border">
        /// <para>
        /// This value must be 0.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the pixel data. The following symbolic values are accepted: GL_RED, GL_RG, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_RED_INTEGER, GL_RG_INTEGER, GL_RGB_INTEGER, GL_BGR_INTEGER, GL_RGBA_INTEGER, GL_BGRA_INTEGER, GL_STENCIL_INDEX, GL_DEPTH_COMPONENT, GL_DEPTH_STENCIL.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the image data in memory.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glTexImage2D")]
        [CLSCompliant(false)]
        public static void TexImage2D<T8>(OpenTK.Graphics.ES30.All target, Int32 level, OpenTK.Graphics.ES30.All internalformat, Int32 width, Int32 height, Int32 border, OpenTK.Graphics.ES30.All format, OpenTK.Graphics.ES30.All type, [InAttribute, OutAttribute] T8[,,] pixels)
            where T8 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Specify a two-dimensional texture image
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_2D, GL_PROXY_TEXTURE_2D, GL_TEXTURE_1D_ARRAY, GL_PROXY_TEXTURE_1D_ARRAY, GL_TEXTURE_RECTANGLE, GL_PROXY_TEXTURE_RECTANGLE, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, GL_TEXTURE_CUBE_MAP_NEGATIVE_Z, or GL_PROXY_TEXTURE_CUBE_MAP.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image. If target is GL_TEXTURE_RECTANGLE or GL_PROXY_TEXTURE_RECTANGLE, level must be 0.
        /// </para>
        /// </param>
        /// <param name="internalFormat">
        /// <para>
        /// Specifies the number of color components in the texture. Must be one of base internal formats given in Table 1, one of the sized internal formats given in Table 2, or one of the compressed internal formats given in Table 3, below.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture image. All implementations support texture images that are at least 1024 texels wide.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture image, or the number of layers in a texture array, in the case of the GL_TEXTURE_1D_ARRAY and GL_PROXY_TEXTURE_1D_ARRAY targets. All implementations support 2D texture images that are at least 1024 texels high, and texture arrays that are at least 256 layers deep.
        /// </para>
        /// </param>
        /// <param name="border">
        /// <para>
        /// This value must be 0.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the pixel data. The following symbolic values are accepted: GL_RED, GL_RG, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_RED_INTEGER, GL_RG_INTEGER, GL_RGB_INTEGER, GL_BGR_INTEGER, GL_RGBA_INTEGER, GL_BGRA_INTEGER, GL_STENCIL_INDEX, GL_DEPTH_COMPONENT, GL_DEPTH_STENCIL.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the image data in memory.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glTexImage2D")]
        public static void TexImage2D<T8>(OpenTK.Graphics.ES30.All target, Int32 level, OpenTK.Graphics.ES30.All internalformat, Int32 width, Int32 height, Int32 border, OpenTK.Graphics.ES30.All format, OpenTK.Graphics.ES30.All type, [InAttribute, OutAttribute] ref T8 pixels)
            where T8 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Specify a two-dimensional texture image
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_2D, GL_PROXY_TEXTURE_2D, GL_TEXTURE_1D_ARRAY, GL_PROXY_TEXTURE_1D_ARRAY, GL_TEXTURE_RECTANGLE, GL_PROXY_TEXTURE_RECTANGLE, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, GL_TEXTURE_CUBE_MAP_NEGATIVE_Z, or GL_PROXY_TEXTURE_CUBE_MAP.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image. If target is GL_TEXTURE_RECTANGLE or GL_PROXY_TEXTURE_RECTANGLE, level must be 0.
        /// </para>
        /// </param>
        /// <param name="internalFormat">
        /// <para>
        /// Specifies the number of color components in the texture. Must be one of base internal formats given in Table 1, one of the sized internal formats given in Table 2, or one of the compressed internal formats given in Table 3, below.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture image. All implementations support texture images that are at least 1024 texels wide.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture image, or the number of layers in a texture array, in the case of the GL_TEXTURE_1D_ARRAY and GL_PROXY_TEXTURE_1D_ARRAY targets. All implementations support 2D texture images that are at least 1024 texels high, and texture arrays that are at least 256 layers deep.
        /// </para>
        /// </param>
        /// <param name="border">
        /// <para>
        /// This value must be 0.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the pixel data. The following symbolic values are accepted: GL_RED, GL_RG, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_RED_INTEGER, GL_RG_INTEGER, GL_RGB_INTEGER, GL_BGR_INTEGER, GL_RGBA_INTEGER, GL_BGRA_INTEGER, GL_STENCIL_INDEX, GL_DEPTH_COMPONENT, GL_DEPTH_STENCIL.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glTexImage2D")]
        public static void TexImage2D(OpenTK.Graphics.ES30.TextureTarget2d target, Int32 level, OpenTK.Graphics.ES30.TextureComponentCount internalformat, Int32 width, Int32 height, Int32 border, OpenTK.Graphics.ES30.PixelFormat format, OpenTK.Graphics.ES30.PixelType type, IntPtr pixels) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Specify a two-dimensional texture image
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_2D, GL_PROXY_TEXTURE_2D, GL_TEXTURE_1D_ARRAY, GL_PROXY_TEXTURE_1D_ARRAY, GL_TEXTURE_RECTANGLE, GL_PROXY_TEXTURE_RECTANGLE, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, GL_TEXTURE_CUBE_MAP_NEGATIVE_Z, or GL_PROXY_TEXTURE_CUBE_MAP.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image. If target is GL_TEXTURE_RECTANGLE or GL_PROXY_TEXTURE_RECTANGLE, level must be 0.
        /// </para>
        /// </param>
        /// <param name="internalFormat">
        /// <para>
        /// Specifies the number of color components in the texture. Must be one of base internal formats given in Table 1, one of the sized internal formats given in Table 2, or one of the compressed internal formats given in Table 3, below.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture image. All implementations support texture images that are at least 1024 texels wide.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture image, or the number of layers in a texture array, in the case of the GL_TEXTURE_1D_ARRAY and GL_PROXY_TEXTURE_1D_ARRAY targets. All implementations support 2D texture images that are at least 1024 texels high, and texture arrays that are at least 256 layers deep.
        /// </para>
        /// </param>
        /// <param name="border">
        /// <para>
        /// This value must be 0.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the pixel data. The following symbolic values are accepted: GL_RED, GL_RG, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_RED_INTEGER, GL_RG_INTEGER, GL_RGB_INTEGER, GL_BGR_INTEGER, GL_RGBA_INTEGER, GL_BGRA_INTEGER, GL_STENCIL_INDEX, GL_DEPTH_COMPONENT, GL_DEPTH_STENCIL.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glTexImage2D")]
        [CLSCompliant(false)]
        public static void TexImage2D<T8>(OpenTK.Graphics.ES30.TextureTarget2d target, Int32 level, OpenTK.Graphics.ES30.TextureComponentCount internalformat, Int32 width, Int32 height, Int32 border, OpenTK.Graphics.ES30.PixelFormat format, OpenTK.Graphics.ES30.PixelType type, [InAttribute, OutAttribute] T8[] pixels)
            where T8 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Specify a two-dimensional texture image
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_2D, GL_PROXY_TEXTURE_2D, GL_TEXTURE_1D_ARRAY, GL_PROXY_TEXTURE_1D_ARRAY, GL_TEXTURE_RECTANGLE, GL_PROXY_TEXTURE_RECTANGLE, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, GL_TEXTURE_CUBE_MAP_NEGATIVE_Z, or GL_PROXY_TEXTURE_CUBE_MAP.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image. If target is GL_TEXTURE_RECTANGLE or GL_PROXY_TEXTURE_RECTANGLE, level must be 0.
        /// </para>
        /// </param>
        /// <param name="internalFormat">
        /// <para>
        /// Specifies the number of color components in the texture. Must be one of base internal formats given in Table 1, one of the sized internal formats given in Table 2, or one of the compressed internal formats given in Table 3, below.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture image. All implementations support texture images that are at least 1024 texels wide.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture image, or the number of layers in a texture array, in the case of the GL_TEXTURE_1D_ARRAY and GL_PROXY_TEXTURE_1D_ARRAY targets. All implementations support 2D texture images that are at least 1024 texels high, and texture arrays that are at least 256 layers deep.
        /// </para>
        /// </param>
        /// <param name="border">
        /// <para>
        /// This value must be 0.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the pixel data. The following symbolic values are accepted: GL_RED, GL_RG, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_RED_INTEGER, GL_RG_INTEGER, GL_RGB_INTEGER, GL_BGR_INTEGER, GL_RGBA_INTEGER, GL_BGRA_INTEGER, GL_STENCIL_INDEX, GL_DEPTH_COMPONENT, GL_DEPTH_STENCIL.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glTexImage2D")]
        [CLSCompliant(false)]
        public static void TexImage2D<T8>(OpenTK.Graphics.ES30.TextureTarget2d target, Int32 level, OpenTK.Graphics.ES30.TextureComponentCount internalformat, Int32 width, Int32 height, Int32 border, OpenTK.Graphics.ES30.PixelFormat format, OpenTK.Graphics.ES30.PixelType type, [InAttribute, OutAttribute] T8[,] pixels)
            where T8 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Specify a two-dimensional texture image
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_2D, GL_PROXY_TEXTURE_2D, GL_TEXTURE_1D_ARRAY, GL_PROXY_TEXTURE_1D_ARRAY, GL_TEXTURE_RECTANGLE, GL_PROXY_TEXTURE_RECTANGLE, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, GL_TEXTURE_CUBE_MAP_NEGATIVE_Z, or GL_PROXY_TEXTURE_CUBE_MAP.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image. If target is GL_TEXTURE_RECTANGLE or GL_PROXY_TEXTURE_RECTANGLE, level must be 0.
        /// </para>
        /// </param>
        /// <param name="internalFormat">
        /// <para>
        /// Specifies the number of color components in the texture. Must be one of base internal formats given in Table 1, one of the sized internal formats given in Table 2, or one of the compressed internal formats given in Table 3, below.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture image. All implementations support texture images that are at least 1024 texels wide.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture image, or the number of layers in a texture array, in the case of the GL_TEXTURE_1D_ARRAY and GL_PROXY_TEXTURE_1D_ARRAY targets. All implementations support 2D texture images that are at least 1024 texels high, and texture arrays that are at least 256 layers deep.
        /// </para>
        /// </param>
        /// <param name="border">
        /// <para>
        /// This value must be 0.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the pixel data. The following symbolic values are accepted: GL_RED, GL_RG, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_RED_INTEGER, GL_RG_INTEGER, GL_RGB_INTEGER, GL_BGR_INTEGER, GL_RGBA_INTEGER, GL_BGRA_INTEGER, GL_STENCIL_INDEX, GL_DEPTH_COMPONENT, GL_DEPTH_STENCIL.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glTexImage2D")]
        [CLSCompliant(false)]
        public static void TexImage2D<T8>(OpenTK.Graphics.ES30.TextureTarget2d target, Int32 level, OpenTK.Graphics.ES30.TextureComponentCount internalformat, Int32 width, Int32 height, Int32 border, OpenTK.Graphics.ES30.PixelFormat format, OpenTK.Graphics.ES30.PixelType type, [InAttribute, OutAttribute] T8[,,] pixels)
            where T8 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Specify a two-dimensional texture image
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_2D, GL_PROXY_TEXTURE_2D, GL_TEXTURE_1D_ARRAY, GL_PROXY_TEXTURE_1D_ARRAY, GL_TEXTURE_RECTANGLE, GL_PROXY_TEXTURE_RECTANGLE, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, GL_TEXTURE_CUBE_MAP_NEGATIVE_Z, or GL_PROXY_TEXTURE_CUBE_MAP.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image. If target is GL_TEXTURE_RECTANGLE or GL_PROXY_TEXTURE_RECTANGLE, level must be 0.
        /// </para>
        /// </param>
        /// <param name="internalFormat">
        /// <para>
        /// Specifies the number of color components in the texture. Must be one of base internal formats given in Table 1, one of the sized internal formats given in Table 2, or one of the compressed internal formats given in Table 3, below.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture image. All implementations support texture images that are at least 1024 texels wide.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture image, or the number of layers in a texture array, in the case of the GL_TEXTURE_1D_ARRAY and GL_PROXY_TEXTURE_1D_ARRAY targets. All implementations support 2D texture images that are at least 1024 texels high, and texture arrays that are at least 256 layers deep.
        /// </para>
        /// </param>
        /// <param name="border">
        /// <para>
        /// This value must be 0.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the pixel data. The following symbolic values are accepted: GL_RED, GL_RG, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_RED_INTEGER, GL_RG_INTEGER, GL_RGB_INTEGER, GL_BGR_INTEGER, GL_RGBA_INTEGER, GL_BGRA_INTEGER, GL_STENCIL_INDEX, GL_DEPTH_COMPONENT, GL_DEPTH_STENCIL.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glTexImage2D")]
        public static void TexImage2D<T8>(OpenTK.Graphics.ES30.TextureTarget2d target, Int32 level, OpenTK.Graphics.ES30.TextureComponentCount internalformat, Int32 width, Int32 height, Int32 border, OpenTK.Graphics.ES30.PixelFormat format, OpenTK.Graphics.ES30.PixelType type, [InAttribute, OutAttribute] ref T8 pixels)
            where T8 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Specify a three-dimensional texture image
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be one of GL_TEXTURE_3D, GL_PROXY_TEXTURE_3D, GL_TEXTURE_2D_ARRAY or GL_PROXY_TEXTURE_2D_ARRAY.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level is the n sup th mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="internalFormat">
        /// <para>
        /// Specifies the number of color components in the texture. Must be one of base internal formats given in Table 1, one of the sized internal formats given in Table 2, or one of the compressed internal formats given in Table 3, below.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture image. All implementations support 3D texture images that are at least 16 texels wide.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture image. All implementations support 3D texture images that are at least 256 texels high.
        /// </para>
        /// </param>
        /// <param name="depth">
        /// <para>
        /// Specifies the depth of the texture image, or the number of layers in a texture array. All implementations support 3D texture images that are at least 256 texels deep, and texture arrays that are at least 256 layers deep.
        /// </para>
        /// </param>
        /// <param name="border">
        /// <para>
        /// This value must be 0.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the pixel data. The following symbolic values are accepted: GL_RED, GL_RG, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_RED_INTEGER, GL_RG_INTEGER, GL_RGB_INTEGER, GL_BGR_INTEGER, GL_RGBA_INTEGER, GL_BGRA_INTEGER, GL_STENCIL_INDEX, GL_DEPTH_COMPONENT, GL_DEPTH_STENCIL.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the image data in memory.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glTexImage3D")]
        public static void TexImage3D(OpenTK.Graphics.ES30.All target, Int32 level, OpenTK.Graphics.ES30.All internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, OpenTK.Graphics.ES30.All format, OpenTK.Graphics.ES30.All type, IntPtr pixels) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Specify a three-dimensional texture image
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be one of GL_TEXTURE_3D, GL_PROXY_TEXTURE_3D, GL_TEXTURE_2D_ARRAY or GL_PROXY_TEXTURE_2D_ARRAY.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level is the n sup th mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="internalFormat">
        /// <para>
        /// Specifies the number of color components in the texture. Must be one of base internal formats given in Table 1, one of the sized internal formats given in Table 2, or one of the compressed internal formats given in Table 3, below.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture image. All implementations support 3D texture images that are at least 16 texels wide.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture image. All implementations support 3D texture images that are at least 256 texels high.
        /// </para>
        /// </param>
        /// <param name="depth">
        /// <para>
        /// Specifies the depth of the texture image, or the number of layers in a texture array. All implementations support 3D texture images that are at least 256 texels deep, and texture arrays that are at least 256 layers deep.
        /// </para>
        /// </param>
        /// <param name="border">
        /// <para>
        /// This value must be 0.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the pixel data. The following symbolic values are accepted: GL_RED, GL_RG, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_RED_INTEGER, GL_RG_INTEGER, GL_RGB_INTEGER, GL_BGR_INTEGER, GL_RGBA_INTEGER, GL_BGRA_INTEGER, GL_STENCIL_INDEX, GL_DEPTH_COMPONENT, GL_DEPTH_STENCIL.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the image data in memory.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glTexImage3D")]
        [CLSCompliant(false)]
        public static void TexImage3D<T9>(OpenTK.Graphics.ES30.All target, Int32 level, OpenTK.Graphics.ES30.All internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, OpenTK.Graphics.ES30.All format, OpenTK.Graphics.ES30.All type, [InAttribute, OutAttribute] T9[] pixels)
            where T9 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Specify a three-dimensional texture image
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be one of GL_TEXTURE_3D, GL_PROXY_TEXTURE_3D, GL_TEXTURE_2D_ARRAY or GL_PROXY_TEXTURE_2D_ARRAY.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level is the n sup th mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="internalFormat">
        /// <para>
        /// Specifies the number of color components in the texture. Must be one of base internal formats given in Table 1, one of the sized internal formats given in Table 2, or one of the compressed internal formats given in Table 3, below.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture image. All implementations support 3D texture images that are at least 16 texels wide.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture image. All implementations support 3D texture images that are at least 256 texels high.
        /// </para>
        /// </param>
        /// <param name="depth">
        /// <para>
        /// Specifies the depth of the texture image, or the number of layers in a texture array. All implementations support 3D texture images that are at least 256 texels deep, and texture arrays that are at least 256 layers deep.
        /// </para>
        /// </param>
        /// <param name="border">
        /// <para>
        /// This value must be 0.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the pixel data. The following symbolic values are accepted: GL_RED, GL_RG, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_RED_INTEGER, GL_RG_INTEGER, GL_RGB_INTEGER, GL_BGR_INTEGER, GL_RGBA_INTEGER, GL_BGRA_INTEGER, GL_STENCIL_INDEX, GL_DEPTH_COMPONENT, GL_DEPTH_STENCIL.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the image data in memory.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glTexImage3D")]
        [CLSCompliant(false)]
        public static void TexImage3D<T9>(OpenTK.Graphics.ES30.All target, Int32 level, OpenTK.Graphics.ES30.All internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, OpenTK.Graphics.ES30.All format, OpenTK.Graphics.ES30.All type, [InAttribute, OutAttribute] T9[,] pixels)
            where T9 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Specify a three-dimensional texture image
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be one of GL_TEXTURE_3D, GL_PROXY_TEXTURE_3D, GL_TEXTURE_2D_ARRAY or GL_PROXY_TEXTURE_2D_ARRAY.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level is the n sup th mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="internalFormat">
        /// <para>
        /// Specifies the number of color components in the texture. Must be one of base internal formats given in Table 1, one of the sized internal formats given in Table 2, or one of the compressed internal formats given in Table 3, below.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture image. All implementations support 3D texture images that are at least 16 texels wide.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture image. All implementations support 3D texture images that are at least 256 texels high.
        /// </para>
        /// </param>
        /// <param name="depth">
        /// <para>
        /// Specifies the depth of the texture image, or the number of layers in a texture array. All implementations support 3D texture images that are at least 256 texels deep, and texture arrays that are at least 256 layers deep.
        /// </para>
        /// </param>
        /// <param name="border">
        /// <para>
        /// This value must be 0.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the pixel data. The following symbolic values are accepted: GL_RED, GL_RG, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_RED_INTEGER, GL_RG_INTEGER, GL_RGB_INTEGER, GL_BGR_INTEGER, GL_RGBA_INTEGER, GL_BGRA_INTEGER, GL_STENCIL_INDEX, GL_DEPTH_COMPONENT, GL_DEPTH_STENCIL.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the image data in memory.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glTexImage3D")]
        [CLSCompliant(false)]
        public static void TexImage3D<T9>(OpenTK.Graphics.ES30.All target, Int32 level, OpenTK.Graphics.ES30.All internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, OpenTK.Graphics.ES30.All format, OpenTK.Graphics.ES30.All type, [InAttribute, OutAttribute] T9[,,] pixels)
            where T9 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Specify a three-dimensional texture image
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be one of GL_TEXTURE_3D, GL_PROXY_TEXTURE_3D, GL_TEXTURE_2D_ARRAY or GL_PROXY_TEXTURE_2D_ARRAY.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level is the n sup th mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="internalFormat">
        /// <para>
        /// Specifies the number of color components in the texture. Must be one of base internal formats given in Table 1, one of the sized internal formats given in Table 2, or one of the compressed internal formats given in Table 3, below.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture image. All implementations support 3D texture images that are at least 16 texels wide.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture image. All implementations support 3D texture images that are at least 256 texels high.
        /// </para>
        /// </param>
        /// <param name="depth">
        /// <para>
        /// Specifies the depth of the texture image, or the number of layers in a texture array. All implementations support 3D texture images that are at least 256 texels deep, and texture arrays that are at least 256 layers deep.
        /// </para>
        /// </param>
        /// <param name="border">
        /// <para>
        /// This value must be 0.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the pixel data. The following symbolic values are accepted: GL_RED, GL_RG, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_RED_INTEGER, GL_RG_INTEGER, GL_RGB_INTEGER, GL_BGR_INTEGER, GL_RGBA_INTEGER, GL_BGRA_INTEGER, GL_STENCIL_INDEX, GL_DEPTH_COMPONENT, GL_DEPTH_STENCIL.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the image data in memory.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glTexImage3D")]
        public static void TexImage3D<T9>(OpenTK.Graphics.ES30.All target, Int32 level, OpenTK.Graphics.ES30.All internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, OpenTK.Graphics.ES30.All format, OpenTK.Graphics.ES30.All type, [InAttribute, OutAttribute] ref T9 pixels)
            where T9 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Specify a three-dimensional texture image
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be one of GL_TEXTURE_3D, GL_PROXY_TEXTURE_3D, GL_TEXTURE_2D_ARRAY or GL_PROXY_TEXTURE_2D_ARRAY.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level is the n sup th mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="internalFormat">
        /// <para>
        /// Specifies the number of color components in the texture. Must be one of base internal formats given in Table 1, one of the sized internal formats given in Table 2, or one of the compressed internal formats given in Table 3, below.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture image. All implementations support 3D texture images that are at least 16 texels wide.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture image. All implementations support 3D texture images that are at least 256 texels high.
        /// </para>
        /// </param>
        /// <param name="depth">
        /// <para>
        /// Specifies the depth of the texture image, or the number of layers in a texture array. All implementations support 3D texture images that are at least 256 texels deep, and texture arrays that are at least 256 layers deep.
        /// </para>
        /// </param>
        /// <param name="border">
        /// <para>
        /// This value must be 0.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the pixel data. The following symbolic values are accepted: GL_RED, GL_RG, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_RED_INTEGER, GL_RG_INTEGER, GL_RGB_INTEGER, GL_BGR_INTEGER, GL_RGBA_INTEGER, GL_BGRA_INTEGER, GL_STENCIL_INDEX, GL_DEPTH_COMPONENT, GL_DEPTH_STENCIL.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glTexImage3D")]
        public static void TexImage3D(OpenTK.Graphics.ES30.TextureTarget3d target, Int32 level, OpenTK.Graphics.ES30.TextureComponentCount internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, OpenTK.Graphics.ES30.PixelFormat format, OpenTK.Graphics.ES30.PixelType type, IntPtr pixels) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Specify a three-dimensional texture image
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be one of GL_TEXTURE_3D, GL_PROXY_TEXTURE_3D, GL_TEXTURE_2D_ARRAY or GL_PROXY_TEXTURE_2D_ARRAY.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level is the n sup th mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="internalFormat">
        /// <para>
        /// Specifies the number of color components in the texture. Must be one of base internal formats given in Table 1, one of the sized internal formats given in Table 2, or one of the compressed internal formats given in Table 3, below.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture image. All implementations support 3D texture images that are at least 16 texels wide.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture image. All implementations support 3D texture images that are at least 256 texels high.
        /// </para>
        /// </param>
        /// <param name="depth">
        /// <para>
        /// Specifies the depth of the texture image, or the number of layers in a texture array. All implementations support 3D texture images that are at least 256 texels deep, and texture arrays that are at least 256 layers deep.
        /// </para>
        /// </param>
        /// <param name="border">
        /// <para>
        /// This value must be 0.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the pixel data. The following symbolic values are accepted: GL_RED, GL_RG, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_RED_INTEGER, GL_RG_INTEGER, GL_RGB_INTEGER, GL_BGR_INTEGER, GL_RGBA_INTEGER, GL_BGRA_INTEGER, GL_STENCIL_INDEX, GL_DEPTH_COMPONENT, GL_DEPTH_STENCIL.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glTexImage3D")]
        [CLSCompliant(false)]
        public static void TexImage3D<T9>(OpenTK.Graphics.ES30.TextureTarget3d target, Int32 level, OpenTK.Graphics.ES30.TextureComponentCount internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, OpenTK.Graphics.ES30.PixelFormat format, OpenTK.Graphics.ES30.PixelType type, [InAttribute, OutAttribute] T9[] pixels)
            where T9 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Specify a three-dimensional texture image
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be one of GL_TEXTURE_3D, GL_PROXY_TEXTURE_3D, GL_TEXTURE_2D_ARRAY or GL_PROXY_TEXTURE_2D_ARRAY.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level is the n sup th mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="internalFormat">
        /// <para>
        /// Specifies the number of color components in the texture. Must be one of base internal formats given in Table 1, one of the sized internal formats given in Table 2, or one of the compressed internal formats given in Table 3, below.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture image. All implementations support 3D texture images that are at least 16 texels wide.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture image. All implementations support 3D texture images that are at least 256 texels high.
        /// </para>
        /// </param>
        /// <param name="depth">
        /// <para>
        /// Specifies the depth of the texture image, or the number of layers in a texture array. All implementations support 3D texture images that are at least 256 texels deep, and texture arrays that are at least 256 layers deep.
        /// </para>
        /// </param>
        /// <param name="border">
        /// <para>
        /// This value must be 0.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the pixel data. The following symbolic values are accepted: GL_RED, GL_RG, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_RED_INTEGER, GL_RG_INTEGER, GL_RGB_INTEGER, GL_BGR_INTEGER, GL_RGBA_INTEGER, GL_BGRA_INTEGER, GL_STENCIL_INDEX, GL_DEPTH_COMPONENT, GL_DEPTH_STENCIL.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glTexImage3D")]
        [CLSCompliant(false)]
        public static void TexImage3D<T9>(OpenTK.Graphics.ES30.TextureTarget3d target, Int32 level, OpenTK.Graphics.ES30.TextureComponentCount internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, OpenTK.Graphics.ES30.PixelFormat format, OpenTK.Graphics.ES30.PixelType type, [InAttribute, OutAttribute] T9[,] pixels)
            where T9 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Specify a three-dimensional texture image
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be one of GL_TEXTURE_3D, GL_PROXY_TEXTURE_3D, GL_TEXTURE_2D_ARRAY or GL_PROXY_TEXTURE_2D_ARRAY.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level is the n sup th mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="internalFormat">
        /// <para>
        /// Specifies the number of color components in the texture. Must be one of base internal formats given in Table 1, one of the sized internal formats given in Table 2, or one of the compressed internal formats given in Table 3, below.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture image. All implementations support 3D texture images that are at least 16 texels wide.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture image. All implementations support 3D texture images that are at least 256 texels high.
        /// </para>
        /// </param>
        /// <param name="depth">
        /// <para>
        /// Specifies the depth of the texture image, or the number of layers in a texture array. All implementations support 3D texture images that are at least 256 texels deep, and texture arrays that are at least 256 layers deep.
        /// </para>
        /// </param>
        /// <param name="border">
        /// <para>
        /// This value must be 0.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the pixel data. The following symbolic values are accepted: GL_RED, GL_RG, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_RED_INTEGER, GL_RG_INTEGER, GL_RGB_INTEGER, GL_BGR_INTEGER, GL_RGBA_INTEGER, GL_BGRA_INTEGER, GL_STENCIL_INDEX, GL_DEPTH_COMPONENT, GL_DEPTH_STENCIL.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glTexImage3D")]
        [CLSCompliant(false)]
        public static void TexImage3D<T9>(OpenTK.Graphics.ES30.TextureTarget3d target, Int32 level, OpenTK.Graphics.ES30.TextureComponentCount internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, OpenTK.Graphics.ES30.PixelFormat format, OpenTK.Graphics.ES30.PixelType type, [InAttribute, OutAttribute] T9[,,] pixels)
            where T9 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Specify a three-dimensional texture image
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be one of GL_TEXTURE_3D, GL_PROXY_TEXTURE_3D, GL_TEXTURE_2D_ARRAY or GL_PROXY_TEXTURE_2D_ARRAY.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level is the n sup th mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="internalFormat">
        /// <para>
        /// Specifies the number of color components in the texture. Must be one of base internal formats given in Table 1, one of the sized internal formats given in Table 2, or one of the compressed internal formats given in Table 3, below.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture image. All implementations support 3D texture images that are at least 16 texels wide.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture image. All implementations support 3D texture images that are at least 256 texels high.
        /// </para>
        /// </param>
        /// <param name="depth">
        /// <para>
        /// Specifies the depth of the texture image, or the number of layers in a texture array. All implementations support 3D texture images that are at least 256 texels deep, and texture arrays that are at least 256 layers deep.
        /// </para>
        /// </param>
        /// <param name="border">
        /// <para>
        /// This value must be 0.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the pixel data. The following symbolic values are accepted: GL_RED, GL_RG, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_RED_INTEGER, GL_RG_INTEGER, GL_RGB_INTEGER, GL_BGR_INTEGER, GL_RGBA_INTEGER, GL_BGRA_INTEGER, GL_STENCIL_INDEX, GL_DEPTH_COMPONENT, GL_DEPTH_STENCIL.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glTexImage3D")]
        public static void TexImage3D<T9>(OpenTK.Graphics.ES30.TextureTarget3d target, Int32 level, OpenTK.Graphics.ES30.TextureComponentCount internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, OpenTK.Graphics.ES30.PixelFormat format, OpenTK.Graphics.ES30.PixelType type, [InAttribute, OutAttribute] ref T9 pixels)
            where T9 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Set texture parameters
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture, which must be either GL_TEXTURE_1D, GL_TEXTURE_2D, GL_TEXTURE_3D, GL_TEXTURE_1D_ARRAY, GL_TEXTURE_2D_ARRAY, GL_TEXTURE_RECTANGLE, or GL_TEXTURE_CUBE_MAP.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a single-valued texture parameter. pname can be one of the following: GL_DEPTH_STENCIL_TEXTURE_MODE, GL_TEXTURE_BASE_LEVEL, GL_TEXTURE_COMPARE_FUNC, GL_TEXTURE_COMPARE_MODE, GL_TEXTURE_LOD_BIAS, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, GL_TEXTURE_MAX_LEVEL, GL_TEXTURE_SWIZZLE_R, GL_TEXTURE_SWIZZLE_G, GL_TEXTURE_SWIZZLE_B, GL_TEXTURE_SWIZZLE_A, GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, or GL_TEXTURE_WRAP_R.
        /// </para>
        /// <para>
        /// For the vector commands (glTexParameter*v), pname can also be one of GL_TEXTURE_BORDER_COLOR or GL_TEXTURE_SWIZZLE_RGBA.
        /// </para>
        /// </param>
        /// <param name="param">
        /// <para>
        /// For the scalar commands, specifies the value of pname.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// For the vector commands, specifies a pointer to an array where the value or values of pname are stored.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glTexParameterf")]
        public static void TexParameter(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All pname, Single param) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Set texture parameters
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture, which must be either GL_TEXTURE_1D, GL_TEXTURE_2D, GL_TEXTURE_3D, GL_TEXTURE_1D_ARRAY, GL_TEXTURE_2D_ARRAY, GL_TEXTURE_RECTANGLE, or GL_TEXTURE_CUBE_MAP.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a single-valued texture parameter. pname can be one of the following: GL_DEPTH_STENCIL_TEXTURE_MODE, GL_TEXTURE_BASE_LEVEL, GL_TEXTURE_COMPARE_FUNC, GL_TEXTURE_COMPARE_MODE, GL_TEXTURE_LOD_BIAS, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, GL_TEXTURE_MAX_LEVEL, GL_TEXTURE_SWIZZLE_R, GL_TEXTURE_SWIZZLE_G, GL_TEXTURE_SWIZZLE_B, GL_TEXTURE_SWIZZLE_A, GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, or GL_TEXTURE_WRAP_R.
        /// </para>
        /// <para>
        /// For the vector commands (glTexParameter*v), pname can also be one of GL_TEXTURE_BORDER_COLOR or GL_TEXTURE_SWIZZLE_RGBA.
        /// </para>
        /// </param>
        /// <param name="param">
        /// <para>
        /// For the scalar commands, specifies the value of pname.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// For the vector commands, specifies a pointer to an array where the value or values of pname are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glTexParameterf")]
        public static void TexParameter(OpenTK.Graphics.ES30.TextureTarget target, OpenTK.Graphics.ES30.TextureParameterName pname, Single param) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Set texture parameters
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture, which must be either GL_TEXTURE_1D, GL_TEXTURE_2D, GL_TEXTURE_3D, GL_TEXTURE_1D_ARRAY, GL_TEXTURE_2D_ARRAY, GL_TEXTURE_RECTANGLE, or GL_TEXTURE_CUBE_MAP.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a single-valued texture parameter. pname can be one of the following: GL_DEPTH_STENCIL_TEXTURE_MODE, GL_TEXTURE_BASE_LEVEL, GL_TEXTURE_COMPARE_FUNC, GL_TEXTURE_COMPARE_MODE, GL_TEXTURE_LOD_BIAS, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, GL_TEXTURE_MAX_LEVEL, GL_TEXTURE_SWIZZLE_R, GL_TEXTURE_SWIZZLE_G, GL_TEXTURE_SWIZZLE_B, GL_TEXTURE_SWIZZLE_A, GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, or GL_TEXTURE_WRAP_R.
        /// </para>
        /// <para>
        /// For the vector commands (glTexParameter*v), pname can also be one of GL_TEXTURE_BORDER_COLOR or GL_TEXTURE_SWIZZLE_RGBA.
        /// </para>
        /// </param>
        /// <param name="param">
        /// <para>
        /// For the scalar commands, specifies the value of pname.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// For the vector commands, specifies a pointer to an array where the value or values of pname are stored.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glTexParameterfv")]
        [CLSCompliant(false)]
        public static void TexParameter(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All pname, Single[] @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Set texture parameters
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture, which must be either GL_TEXTURE_1D, GL_TEXTURE_2D, GL_TEXTURE_3D, GL_TEXTURE_1D_ARRAY, GL_TEXTURE_2D_ARRAY, GL_TEXTURE_RECTANGLE, or GL_TEXTURE_CUBE_MAP.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a single-valued texture parameter. pname can be one of the following: GL_DEPTH_STENCIL_TEXTURE_MODE, GL_TEXTURE_BASE_LEVEL, GL_TEXTURE_COMPARE_FUNC, GL_TEXTURE_COMPARE_MODE, GL_TEXTURE_LOD_BIAS, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, GL_TEXTURE_MAX_LEVEL, GL_TEXTURE_SWIZZLE_R, GL_TEXTURE_SWIZZLE_G, GL_TEXTURE_SWIZZLE_B, GL_TEXTURE_SWIZZLE_A, GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, or GL_TEXTURE_WRAP_R.
        /// </para>
        /// <para>
        /// For the vector commands (glTexParameter*v), pname can also be one of GL_TEXTURE_BORDER_COLOR or GL_TEXTURE_SWIZZLE_RGBA.
        /// </para>
        /// </param>
        /// <param name="param">
        /// <para>
        /// For the scalar commands, specifies the value of pname.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// For the vector commands, specifies a pointer to an array where the value or values of pname are stored.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glTexParameterfv")]
        [CLSCompliant(false)]
        public static unsafe void TexParameter(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All pname, Single* @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Set texture parameters
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture, which must be either GL_TEXTURE_1D, GL_TEXTURE_2D, GL_TEXTURE_3D, GL_TEXTURE_1D_ARRAY, GL_TEXTURE_2D_ARRAY, GL_TEXTURE_RECTANGLE, or GL_TEXTURE_CUBE_MAP.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a single-valued texture parameter. pname can be one of the following: GL_DEPTH_STENCIL_TEXTURE_MODE, GL_TEXTURE_BASE_LEVEL, GL_TEXTURE_COMPARE_FUNC, GL_TEXTURE_COMPARE_MODE, GL_TEXTURE_LOD_BIAS, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, GL_TEXTURE_MAX_LEVEL, GL_TEXTURE_SWIZZLE_R, GL_TEXTURE_SWIZZLE_G, GL_TEXTURE_SWIZZLE_B, GL_TEXTURE_SWIZZLE_A, GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, or GL_TEXTURE_WRAP_R.
        /// </para>
        /// <para>
        /// For the vector commands (glTexParameter*v), pname can also be one of GL_TEXTURE_BORDER_COLOR or GL_TEXTURE_SWIZZLE_RGBA.
        /// </para>
        /// </param>
        /// <param name="param">
        /// <para>
        /// For the scalar commands, specifies the value of pname.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// For the vector commands, specifies a pointer to an array where the value or values of pname are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glTexParameterfv")]
        [CLSCompliant(false)]
        public static void TexParameter(OpenTK.Graphics.ES30.TextureTarget target, OpenTK.Graphics.ES30.TextureParameterName pname, Single[] @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Set texture parameters
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture, which must be either GL_TEXTURE_1D, GL_TEXTURE_2D, GL_TEXTURE_3D, GL_TEXTURE_1D_ARRAY, GL_TEXTURE_2D_ARRAY, GL_TEXTURE_RECTANGLE, or GL_TEXTURE_CUBE_MAP.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a single-valued texture parameter. pname can be one of the following: GL_DEPTH_STENCIL_TEXTURE_MODE, GL_TEXTURE_BASE_LEVEL, GL_TEXTURE_COMPARE_FUNC, GL_TEXTURE_COMPARE_MODE, GL_TEXTURE_LOD_BIAS, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, GL_TEXTURE_MAX_LEVEL, GL_TEXTURE_SWIZZLE_R, GL_TEXTURE_SWIZZLE_G, GL_TEXTURE_SWIZZLE_B, GL_TEXTURE_SWIZZLE_A, GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, or GL_TEXTURE_WRAP_R.
        /// </para>
        /// <para>
        /// For the vector commands (glTexParameter*v), pname can also be one of GL_TEXTURE_BORDER_COLOR or GL_TEXTURE_SWIZZLE_RGBA.
        /// </para>
        /// </param>
        /// <param name="param">
        /// <para>
        /// For the scalar commands, specifies the value of pname.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// For the vector commands, specifies a pointer to an array where the value or values of pname are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glTexParameterfv")]
        [CLSCompliant(false)]
        public static unsafe void TexParameter(OpenTK.Graphics.ES30.TextureTarget target, OpenTK.Graphics.ES30.TextureParameterName pname, Single* @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Set texture parameters
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture, which must be either GL_TEXTURE_1D, GL_TEXTURE_2D, GL_TEXTURE_3D, GL_TEXTURE_1D_ARRAY, GL_TEXTURE_2D_ARRAY, GL_TEXTURE_RECTANGLE, or GL_TEXTURE_CUBE_MAP.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a single-valued texture parameter. pname can be one of the following: GL_DEPTH_STENCIL_TEXTURE_MODE, GL_TEXTURE_BASE_LEVEL, GL_TEXTURE_COMPARE_FUNC, GL_TEXTURE_COMPARE_MODE, GL_TEXTURE_LOD_BIAS, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, GL_TEXTURE_MAX_LEVEL, GL_TEXTURE_SWIZZLE_R, GL_TEXTURE_SWIZZLE_G, GL_TEXTURE_SWIZZLE_B, GL_TEXTURE_SWIZZLE_A, GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, or GL_TEXTURE_WRAP_R.
        /// </para>
        /// <para>
        /// For the vector commands (glTexParameter*v), pname can also be one of GL_TEXTURE_BORDER_COLOR or GL_TEXTURE_SWIZZLE_RGBA.
        /// </para>
        /// </param>
        /// <param name="param">
        /// <para>
        /// For the scalar commands, specifies the value of pname.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// For the vector commands, specifies a pointer to an array where the value or values of pname are stored.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glTexParameteri")]
        public static void TexParameter(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All pname, Int32 param) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Set texture parameters
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture, which must be either GL_TEXTURE_1D, GL_TEXTURE_2D, GL_TEXTURE_3D, GL_TEXTURE_1D_ARRAY, GL_TEXTURE_2D_ARRAY, GL_TEXTURE_RECTANGLE, or GL_TEXTURE_CUBE_MAP.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a single-valued texture parameter. pname can be one of the following: GL_DEPTH_STENCIL_TEXTURE_MODE, GL_TEXTURE_BASE_LEVEL, GL_TEXTURE_COMPARE_FUNC, GL_TEXTURE_COMPARE_MODE, GL_TEXTURE_LOD_BIAS, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, GL_TEXTURE_MAX_LEVEL, GL_TEXTURE_SWIZZLE_R, GL_TEXTURE_SWIZZLE_G, GL_TEXTURE_SWIZZLE_B, GL_TEXTURE_SWIZZLE_A, GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, or GL_TEXTURE_WRAP_R.
        /// </para>
        /// <para>
        /// For the vector commands (glTexParameter*v), pname can also be one of GL_TEXTURE_BORDER_COLOR or GL_TEXTURE_SWIZZLE_RGBA.
        /// </para>
        /// </param>
        /// <param name="param">
        /// <para>
        /// For the scalar commands, specifies the value of pname.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// For the vector commands, specifies a pointer to an array where the value or values of pname are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glTexParameteri")]
        public static void TexParameter(OpenTK.Graphics.ES30.TextureTarget target, OpenTK.Graphics.ES30.TextureParameterName pname, Int32 param) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Set texture parameters
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture, which must be either GL_TEXTURE_1D, GL_TEXTURE_2D, GL_TEXTURE_3D, GL_TEXTURE_1D_ARRAY, GL_TEXTURE_2D_ARRAY, GL_TEXTURE_RECTANGLE, or GL_TEXTURE_CUBE_MAP.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a single-valued texture parameter. pname can be one of the following: GL_DEPTH_STENCIL_TEXTURE_MODE, GL_TEXTURE_BASE_LEVEL, GL_TEXTURE_COMPARE_FUNC, GL_TEXTURE_COMPARE_MODE, GL_TEXTURE_LOD_BIAS, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, GL_TEXTURE_MAX_LEVEL, GL_TEXTURE_SWIZZLE_R, GL_TEXTURE_SWIZZLE_G, GL_TEXTURE_SWIZZLE_B, GL_TEXTURE_SWIZZLE_A, GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, or GL_TEXTURE_WRAP_R.
        /// </para>
        /// <para>
        /// For the vector commands (glTexParameter*v), pname can also be one of GL_TEXTURE_BORDER_COLOR or GL_TEXTURE_SWIZZLE_RGBA.
        /// </para>
        /// </param>
        /// <param name="param">
        /// <para>
        /// For the scalar commands, specifies the value of pname.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// For the vector commands, specifies a pointer to an array where the value or values of pname are stored.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glTexParameteriv")]
        [CLSCompliant(false)]
        public static void TexParameter(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All pname, Int32[] @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Set texture parameters
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture, which must be either GL_TEXTURE_1D, GL_TEXTURE_2D, GL_TEXTURE_3D, GL_TEXTURE_1D_ARRAY, GL_TEXTURE_2D_ARRAY, GL_TEXTURE_RECTANGLE, or GL_TEXTURE_CUBE_MAP.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a single-valued texture parameter. pname can be one of the following: GL_DEPTH_STENCIL_TEXTURE_MODE, GL_TEXTURE_BASE_LEVEL, GL_TEXTURE_COMPARE_FUNC, GL_TEXTURE_COMPARE_MODE, GL_TEXTURE_LOD_BIAS, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, GL_TEXTURE_MAX_LEVEL, GL_TEXTURE_SWIZZLE_R, GL_TEXTURE_SWIZZLE_G, GL_TEXTURE_SWIZZLE_B, GL_TEXTURE_SWIZZLE_A, GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, or GL_TEXTURE_WRAP_R.
        /// </para>
        /// <para>
        /// For the vector commands (glTexParameter*v), pname can also be one of GL_TEXTURE_BORDER_COLOR or GL_TEXTURE_SWIZZLE_RGBA.
        /// </para>
        /// </param>
        /// <param name="param">
        /// <para>
        /// For the scalar commands, specifies the value of pname.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// For the vector commands, specifies a pointer to an array where the value or values of pname are stored.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glTexParameteriv")]
        [CLSCompliant(false)]
        public static unsafe void TexParameter(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All pname, Int32* @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Set texture parameters
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture, which must be either GL_TEXTURE_1D, GL_TEXTURE_2D, GL_TEXTURE_3D, GL_TEXTURE_1D_ARRAY, GL_TEXTURE_2D_ARRAY, GL_TEXTURE_RECTANGLE, or GL_TEXTURE_CUBE_MAP.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a single-valued texture parameter. pname can be one of the following: GL_DEPTH_STENCIL_TEXTURE_MODE, GL_TEXTURE_BASE_LEVEL, GL_TEXTURE_COMPARE_FUNC, GL_TEXTURE_COMPARE_MODE, GL_TEXTURE_LOD_BIAS, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, GL_TEXTURE_MAX_LEVEL, GL_TEXTURE_SWIZZLE_R, GL_TEXTURE_SWIZZLE_G, GL_TEXTURE_SWIZZLE_B, GL_TEXTURE_SWIZZLE_A, GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, or GL_TEXTURE_WRAP_R.
        /// </para>
        /// <para>
        /// For the vector commands (glTexParameter*v), pname can also be one of GL_TEXTURE_BORDER_COLOR or GL_TEXTURE_SWIZZLE_RGBA.
        /// </para>
        /// </param>
        /// <param name="param">
        /// <para>
        /// For the scalar commands, specifies the value of pname.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// For the vector commands, specifies a pointer to an array where the value or values of pname are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glTexParameteriv")]
        [CLSCompliant(false)]
        public static void TexParameter(OpenTK.Graphics.ES30.TextureTarget target, OpenTK.Graphics.ES30.TextureParameterName pname, Int32[] @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Set texture parameters
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture, which must be either GL_TEXTURE_1D, GL_TEXTURE_2D, GL_TEXTURE_3D, GL_TEXTURE_1D_ARRAY, GL_TEXTURE_2D_ARRAY, GL_TEXTURE_RECTANGLE, or GL_TEXTURE_CUBE_MAP.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a single-valued texture parameter. pname can be one of the following: GL_DEPTH_STENCIL_TEXTURE_MODE, GL_TEXTURE_BASE_LEVEL, GL_TEXTURE_COMPARE_FUNC, GL_TEXTURE_COMPARE_MODE, GL_TEXTURE_LOD_BIAS, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, GL_TEXTURE_MAX_LEVEL, GL_TEXTURE_SWIZZLE_R, GL_TEXTURE_SWIZZLE_G, GL_TEXTURE_SWIZZLE_B, GL_TEXTURE_SWIZZLE_A, GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, or GL_TEXTURE_WRAP_R.
        /// </para>
        /// <para>
        /// For the vector commands (glTexParameter*v), pname can also be one of GL_TEXTURE_BORDER_COLOR or GL_TEXTURE_SWIZZLE_RGBA.
        /// </para>
        /// </param>
        /// <param name="param">
        /// <para>
        /// For the scalar commands, specifies the value of pname.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// For the vector commands, specifies a pointer to an array where the value or values of pname are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glTexParameteriv")]
        [CLSCompliant(false)]
        public static unsafe void TexParameter(OpenTK.Graphics.ES30.TextureTarget target, OpenTK.Graphics.ES30.TextureParameterName pname, Int32* @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Simultaneously specify storage for all levels of a two-dimensional or one-dimensional array texture
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specify the target of the operation. target must be one of GL_TEXTURE_2D, GL_PROXY_TEXTURE_2D, GL_TEXTURE_1D_ARRAY, GL_PROXY_TEXTURE_1D_ARRAY, GL_TEXTURE_RECTANGLE, GL_PROXY_TEXTURE_RECTANGLE, or GL_PROXY_TEXTURE_CUBE_MAP.
        /// </para>
        /// </param>
        /// <param name="levels">
        /// <para>
        /// Specify the number of texture levels.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// Specifies the sized internal format to be used to store texture image data.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture, in texels.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture, in texels.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glTexStorage2D")]
        public static void TexStorage2D(OpenTK.Graphics.ES30.All target, Int32 levels, OpenTK.Graphics.ES30.All internalformat, Int32 width, Int32 height) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Simultaneously specify storage for all levels of a two-dimensional or one-dimensional array texture
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specify the target of the operation. target must be one of GL_TEXTURE_2D, GL_PROXY_TEXTURE_2D, GL_TEXTURE_1D_ARRAY, GL_PROXY_TEXTURE_1D_ARRAY, GL_TEXTURE_RECTANGLE, GL_PROXY_TEXTURE_RECTANGLE, or GL_PROXY_TEXTURE_CUBE_MAP.
        /// </para>
        /// </param>
        /// <param name="levels">
        /// <para>
        /// Specify the number of texture levels.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// Specifies the sized internal format to be used to store texture image data.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture, in texels.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture, in texels.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glTexStorage2D")]
        public static void TexStorage2D(OpenTK.Graphics.ES30.TextureTarget2d target, Int32 levels, OpenTK.Graphics.ES30.SizedInternalFormat internalformat, Int32 width, Int32 height) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Simultaneously specify storage for all levels of a three-dimensional, two-dimensional array or cube-map array texture
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specify the target of the operation. target must be one of GL_TEXTURE_3D, GL_PROXY_TEXTURE_3D, GL_TEXTURE_2D_ARRAY, GL_PROXY_TEXTURE_2D_ARRAY, GL_TEXTURE_CUBE_ARRAY, or GL_PROXY_TEXTURE_CUBE_ARRAY.
        /// </para>
        /// </param>
        /// <param name="levels">
        /// <para>
        /// Specify the number of texture levels.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// Specifies the sized internal format to be used to store texture image data.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture, in texels.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture, in texels.
        /// </para>
        /// </param>
        /// <param name="depth">
        /// <para>
        /// Specifies the depth of the texture, in texels.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glTexStorage3D")]
        public static void TexStorage3D(OpenTK.Graphics.ES30.All target, Int32 levels, OpenTK.Graphics.ES30.All internalformat, Int32 width, Int32 height, Int32 depth) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Simultaneously specify storage for all levels of a three-dimensional, two-dimensional array or cube-map array texture
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specify the target of the operation. target must be one of GL_TEXTURE_3D, GL_PROXY_TEXTURE_3D, GL_TEXTURE_2D_ARRAY, GL_PROXY_TEXTURE_2D_ARRAY, GL_TEXTURE_CUBE_ARRAY, or GL_PROXY_TEXTURE_CUBE_ARRAY.
        /// </para>
        /// </param>
        /// <param name="levels">
        /// <para>
        /// Specify the number of texture levels.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// Specifies the sized internal format to be used to store texture image data.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture, in texels.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture, in texels.
        /// </para>
        /// </param>
        /// <param name="depth">
        /// <para>
        /// Specifies the depth of the texture, in texels.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glTexStorage3D")]
        public static void TexStorage3D(OpenTK.Graphics.ES30.TextureTarget3d target, Int32 levels, OpenTK.Graphics.ES30.SizedInternalFormat internalformat, Int32 width, Int32 height, Int32 depth) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Specify a two-dimensional texture subimage
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_2D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, GL_TEXTURE_CUBE_MAP_NEGATIVE_Z, or GL_TEXTURE_1D_ARRAY.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="xoffset">
        /// <para>
        /// Specifies a texel offset in the x direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="yoffset">
        /// <para>
        /// Specifies a texel offset in the y direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the pixel data. The following symbolic values are accepted: GL_RED, GL_RG, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_DEPTH_COMPONENT, and GL_STENCIL_INDEX.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the image data in memory.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glTexSubImage2D")]
        public static void TexSubImage2D(OpenTK.Graphics.ES30.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.ES30.All format, OpenTK.Graphics.ES30.All type, IntPtr pixels) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Specify a two-dimensional texture subimage
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_2D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, GL_TEXTURE_CUBE_MAP_NEGATIVE_Z, or GL_TEXTURE_1D_ARRAY.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="xoffset">
        /// <para>
        /// Specifies a texel offset in the x direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="yoffset">
        /// <para>
        /// Specifies a texel offset in the y direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the pixel data. The following symbolic values are accepted: GL_RED, GL_RG, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_DEPTH_COMPONENT, and GL_STENCIL_INDEX.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the image data in memory.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glTexSubImage2D")]
        [CLSCompliant(false)]
        public static void TexSubImage2D<T8>(OpenTK.Graphics.ES30.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.ES30.All format, OpenTK.Graphics.ES30.All type, [InAttribute, OutAttribute] T8[] pixels)
            where T8 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Specify a two-dimensional texture subimage
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_2D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, GL_TEXTURE_CUBE_MAP_NEGATIVE_Z, or GL_TEXTURE_1D_ARRAY.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="xoffset">
        /// <para>
        /// Specifies a texel offset in the x direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="yoffset">
        /// <para>
        /// Specifies a texel offset in the y direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the pixel data. The following symbolic values are accepted: GL_RED, GL_RG, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_DEPTH_COMPONENT, and GL_STENCIL_INDEX.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the image data in memory.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glTexSubImage2D")]
        [CLSCompliant(false)]
        public static void TexSubImage2D<T8>(OpenTK.Graphics.ES30.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.ES30.All format, OpenTK.Graphics.ES30.All type, [InAttribute, OutAttribute] T8[,] pixels)
            where T8 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Specify a two-dimensional texture subimage
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_2D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, GL_TEXTURE_CUBE_MAP_NEGATIVE_Z, or GL_TEXTURE_1D_ARRAY.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="xoffset">
        /// <para>
        /// Specifies a texel offset in the x direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="yoffset">
        /// <para>
        /// Specifies a texel offset in the y direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the pixel data. The following symbolic values are accepted: GL_RED, GL_RG, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_DEPTH_COMPONENT, and GL_STENCIL_INDEX.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the image data in memory.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glTexSubImage2D")]
        [CLSCompliant(false)]
        public static void TexSubImage2D<T8>(OpenTK.Graphics.ES30.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.ES30.All format, OpenTK.Graphics.ES30.All type, [InAttribute, OutAttribute] T8[,,] pixels)
            where T8 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Specify a two-dimensional texture subimage
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_2D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, GL_TEXTURE_CUBE_MAP_NEGATIVE_Z, or GL_TEXTURE_1D_ARRAY.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="xoffset">
        /// <para>
        /// Specifies a texel offset in the x direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="yoffset">
        /// <para>
        /// Specifies a texel offset in the y direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the pixel data. The following symbolic values are accepted: GL_RED, GL_RG, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_DEPTH_COMPONENT, and GL_STENCIL_INDEX.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the image data in memory.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glTexSubImage2D")]
        public static void TexSubImage2D<T8>(OpenTK.Graphics.ES30.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.ES30.All format, OpenTK.Graphics.ES30.All type, [InAttribute, OutAttribute] ref T8 pixels)
            where T8 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Specify a two-dimensional texture subimage
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_2D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, GL_TEXTURE_CUBE_MAP_NEGATIVE_Z, or GL_TEXTURE_1D_ARRAY.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="xoffset">
        /// <para>
        /// Specifies a texel offset in the x direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="yoffset">
        /// <para>
        /// Specifies a texel offset in the y direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the pixel data. The following symbolic values are accepted: GL_RED, GL_RG, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_DEPTH_COMPONENT, and GL_STENCIL_INDEX.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glTexSubImage2D")]
        public static void TexSubImage2D(OpenTK.Graphics.ES30.TextureTarget2d target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.ES30.PixelFormat format, OpenTK.Graphics.ES30.PixelType type, IntPtr pixels) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Specify a two-dimensional texture subimage
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_2D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, GL_TEXTURE_CUBE_MAP_NEGATIVE_Z, or GL_TEXTURE_1D_ARRAY.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="xoffset">
        /// <para>
        /// Specifies a texel offset in the x direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="yoffset">
        /// <para>
        /// Specifies a texel offset in the y direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the pixel data. The following symbolic values are accepted: GL_RED, GL_RG, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_DEPTH_COMPONENT, and GL_STENCIL_INDEX.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glTexSubImage2D")]
        [CLSCompliant(false)]
        public static void TexSubImage2D<T8>(OpenTK.Graphics.ES30.TextureTarget2d target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.ES30.PixelFormat format, OpenTK.Graphics.ES30.PixelType type, [InAttribute, OutAttribute] T8[] pixels)
            where T8 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Specify a two-dimensional texture subimage
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_2D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, GL_TEXTURE_CUBE_MAP_NEGATIVE_Z, or GL_TEXTURE_1D_ARRAY.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="xoffset">
        /// <para>
        /// Specifies a texel offset in the x direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="yoffset">
        /// <para>
        /// Specifies a texel offset in the y direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the pixel data. The following symbolic values are accepted: GL_RED, GL_RG, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_DEPTH_COMPONENT, and GL_STENCIL_INDEX.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glTexSubImage2D")]
        [CLSCompliant(false)]
        public static void TexSubImage2D<T8>(OpenTK.Graphics.ES30.TextureTarget2d target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.ES30.PixelFormat format, OpenTK.Graphics.ES30.PixelType type, [InAttribute, OutAttribute] T8[,] pixels)
            where T8 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Specify a two-dimensional texture subimage
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_2D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, GL_TEXTURE_CUBE_MAP_NEGATIVE_Z, or GL_TEXTURE_1D_ARRAY.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="xoffset">
        /// <para>
        /// Specifies a texel offset in the x direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="yoffset">
        /// <para>
        /// Specifies a texel offset in the y direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the pixel data. The following symbolic values are accepted: GL_RED, GL_RG, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_DEPTH_COMPONENT, and GL_STENCIL_INDEX.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glTexSubImage2D")]
        [CLSCompliant(false)]
        public static void TexSubImage2D<T8>(OpenTK.Graphics.ES30.TextureTarget2d target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.ES30.PixelFormat format, OpenTK.Graphics.ES30.PixelType type, [InAttribute, OutAttribute] T8[,,] pixels)
            where T8 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Specify a two-dimensional texture subimage
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_2D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, GL_TEXTURE_CUBE_MAP_NEGATIVE_Z, or GL_TEXTURE_1D_ARRAY.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="xoffset">
        /// <para>
        /// Specifies a texel offset in the x direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="yoffset">
        /// <para>
        /// Specifies a texel offset in the y direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the pixel data. The following symbolic values are accepted: GL_RED, GL_RG, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_DEPTH_COMPONENT, and GL_STENCIL_INDEX.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glTexSubImage2D")]
        public static void TexSubImage2D<T8>(OpenTK.Graphics.ES30.TextureTarget2d target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.ES30.PixelFormat format, OpenTK.Graphics.ES30.PixelType type, [InAttribute, OutAttribute] ref T8 pixels)
            where T8 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Specify a three-dimensional texture subimage
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_3D or GL_TEXTURE_2D_ARRAY.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="xoffset">
        /// <para>
        /// Specifies a texel offset in the x direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="yoffset">
        /// <para>
        /// Specifies a texel offset in the y direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="zoffset">
        /// <para>
        /// Specifies a texel offset in the z direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="depth">
        /// <para>
        /// Specifies the depth of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the pixel data. The following symbolic values are accepted: GL_RED, GL_RG, GL_RGB, GL_BGR, GL_RGBA, GL_DEPTH_COMPONENT, and GL_STENCIL_INDEX.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the image data in memory.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glTexSubImage3D")]
        public static void TexSubImage3D(OpenTK.Graphics.ES30.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.ES30.All format, OpenTK.Graphics.ES30.All type, IntPtr pixels) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Specify a three-dimensional texture subimage
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_3D or GL_TEXTURE_2D_ARRAY.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="xoffset">
        /// <para>
        /// Specifies a texel offset in the x direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="yoffset">
        /// <para>
        /// Specifies a texel offset in the y direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="zoffset">
        /// <para>
        /// Specifies a texel offset in the z direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="depth">
        /// <para>
        /// Specifies the depth of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the pixel data. The following symbolic values are accepted: GL_RED, GL_RG, GL_RGB, GL_BGR, GL_RGBA, GL_DEPTH_COMPONENT, and GL_STENCIL_INDEX.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the image data in memory.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glTexSubImage3D")]
        [CLSCompliant(false)]
        public static void TexSubImage3D<T10>(OpenTK.Graphics.ES30.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.ES30.All format, OpenTK.Graphics.ES30.All type, [InAttribute, OutAttribute] T10[] pixels)
            where T10 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Specify a three-dimensional texture subimage
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_3D or GL_TEXTURE_2D_ARRAY.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="xoffset">
        /// <para>
        /// Specifies a texel offset in the x direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="yoffset">
        /// <para>
        /// Specifies a texel offset in the y direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="zoffset">
        /// <para>
        /// Specifies a texel offset in the z direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="depth">
        /// <para>
        /// Specifies the depth of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the pixel data. The following symbolic values are accepted: GL_RED, GL_RG, GL_RGB, GL_BGR, GL_RGBA, GL_DEPTH_COMPONENT, and GL_STENCIL_INDEX.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the image data in memory.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glTexSubImage3D")]
        [CLSCompliant(false)]
        public static void TexSubImage3D<T10>(OpenTK.Graphics.ES30.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.ES30.All format, OpenTK.Graphics.ES30.All type, [InAttribute, OutAttribute] T10[,] pixels)
            where T10 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Specify a three-dimensional texture subimage
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_3D or GL_TEXTURE_2D_ARRAY.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="xoffset">
        /// <para>
        /// Specifies a texel offset in the x direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="yoffset">
        /// <para>
        /// Specifies a texel offset in the y direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="zoffset">
        /// <para>
        /// Specifies a texel offset in the z direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="depth">
        /// <para>
        /// Specifies the depth of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the pixel data. The following symbolic values are accepted: GL_RED, GL_RG, GL_RGB, GL_BGR, GL_RGBA, GL_DEPTH_COMPONENT, and GL_STENCIL_INDEX.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the image data in memory.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glTexSubImage3D")]
        [CLSCompliant(false)]
        public static void TexSubImage3D<T10>(OpenTK.Graphics.ES30.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.ES30.All format, OpenTK.Graphics.ES30.All type, [InAttribute, OutAttribute] T10[,,] pixels)
            where T10 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Specify a three-dimensional texture subimage
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_3D or GL_TEXTURE_2D_ARRAY.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="xoffset">
        /// <para>
        /// Specifies a texel offset in the x direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="yoffset">
        /// <para>
        /// Specifies a texel offset in the y direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="zoffset">
        /// <para>
        /// Specifies a texel offset in the z direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="depth">
        /// <para>
        /// Specifies the depth of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the pixel data. The following symbolic values are accepted: GL_RED, GL_RG, GL_RGB, GL_BGR, GL_RGBA, GL_DEPTH_COMPONENT, and GL_STENCIL_INDEX.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the image data in memory.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glTexSubImage3D")]
        public static void TexSubImage3D<T10>(OpenTK.Graphics.ES30.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.ES30.All format, OpenTK.Graphics.ES30.All type, [InAttribute, OutAttribute] ref T10 pixels)
            where T10 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Specify a three-dimensional texture subimage
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_3D or GL_TEXTURE_2D_ARRAY.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="xoffset">
        /// <para>
        /// Specifies a texel offset in the x direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="yoffset">
        /// <para>
        /// Specifies a texel offset in the y direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="zoffset">
        /// <para>
        /// Specifies a texel offset in the z direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="depth">
        /// <para>
        /// Specifies the depth of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the pixel data. The following symbolic values are accepted: GL_RED, GL_RG, GL_RGB, GL_BGR, GL_RGBA, GL_DEPTH_COMPONENT, and GL_STENCIL_INDEX.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glTexSubImage3D")]
        public static void TexSubImage3D(OpenTK.Graphics.ES30.TextureTarget3d target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.ES30.PixelFormat format, OpenTK.Graphics.ES30.PixelType type, IntPtr pixels) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Specify a three-dimensional texture subimage
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_3D or GL_TEXTURE_2D_ARRAY.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="xoffset">
        /// <para>
        /// Specifies a texel offset in the x direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="yoffset">
        /// <para>
        /// Specifies a texel offset in the y direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="zoffset">
        /// <para>
        /// Specifies a texel offset in the z direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="depth">
        /// <para>
        /// Specifies the depth of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the pixel data. The following symbolic values are accepted: GL_RED, GL_RG, GL_RGB, GL_BGR, GL_RGBA, GL_DEPTH_COMPONENT, and GL_STENCIL_INDEX.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glTexSubImage3D")]
        [CLSCompliant(false)]
        public static void TexSubImage3D<T10>(OpenTK.Graphics.ES30.TextureTarget3d target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.ES30.PixelFormat format, OpenTK.Graphics.ES30.PixelType type, [InAttribute, OutAttribute] T10[] pixels)
            where T10 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Specify a three-dimensional texture subimage
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_3D or GL_TEXTURE_2D_ARRAY.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="xoffset">
        /// <para>
        /// Specifies a texel offset in the x direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="yoffset">
        /// <para>
        /// Specifies a texel offset in the y direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="zoffset">
        /// <para>
        /// Specifies a texel offset in the z direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="depth">
        /// <para>
        /// Specifies the depth of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the pixel data. The following symbolic values are accepted: GL_RED, GL_RG, GL_RGB, GL_BGR, GL_RGBA, GL_DEPTH_COMPONENT, and GL_STENCIL_INDEX.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glTexSubImage3D")]
        [CLSCompliant(false)]
        public static void TexSubImage3D<T10>(OpenTK.Graphics.ES30.TextureTarget3d target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.ES30.PixelFormat format, OpenTK.Graphics.ES30.PixelType type, [InAttribute, OutAttribute] T10[,] pixels)
            where T10 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Specify a three-dimensional texture subimage
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_3D or GL_TEXTURE_2D_ARRAY.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="xoffset">
        /// <para>
        /// Specifies a texel offset in the x direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="yoffset">
        /// <para>
        /// Specifies a texel offset in the y direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="zoffset">
        /// <para>
        /// Specifies a texel offset in the z direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="depth">
        /// <para>
        /// Specifies the depth of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the pixel data. The following symbolic values are accepted: GL_RED, GL_RG, GL_RGB, GL_BGR, GL_RGBA, GL_DEPTH_COMPONENT, and GL_STENCIL_INDEX.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glTexSubImage3D")]
        [CLSCompliant(false)]
        public static void TexSubImage3D<T10>(OpenTK.Graphics.ES30.TextureTarget3d target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.ES30.PixelFormat format, OpenTK.Graphics.ES30.PixelType type, [InAttribute, OutAttribute] T10[,,] pixels)
            where T10 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Specify a three-dimensional texture subimage
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_3D or GL_TEXTURE_2D_ARRAY.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="xoffset">
        /// <para>
        /// Specifies a texel offset in the x direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="yoffset">
        /// <para>
        /// Specifies a texel offset in the y direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="zoffset">
        /// <para>
        /// Specifies a texel offset in the z direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="depth">
        /// <para>
        /// Specifies the depth of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the pixel data. The following symbolic values are accepted: GL_RED, GL_RG, GL_RGB, GL_BGR, GL_RGBA, GL_DEPTH_COMPONENT, and GL_STENCIL_INDEX.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glTexSubImage3D")]
        public static void TexSubImage3D<T10>(OpenTK.Graphics.ES30.TextureTarget3d target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.ES30.PixelFormat format, OpenTK.Graphics.ES30.PixelType type, [InAttribute, OutAttribute] ref T10 pixels)
            where T10 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Specify values to record in transform feedback buffers
        /// </summary>
        /// <param name="program">
        /// <para>
        /// The name of the target program object.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// The number of varying variables used for transform feedback.
        /// </para>
        /// </param>
        /// <param name="varyings">
        /// <para>
        /// An array of count zero-terminated strings specifying the names of the varying variables to use for transform feedback.
        /// </para>
        /// </param>
        /// <param name="bufferMode">
        /// <para>
        /// Identifies the mode used to capture the varying variables when transform feedback is active. bufferMode must be GL_INTERLEAVED_ATTRIBS or GL_SEPARATE_ATTRIBS.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glTransformFeedbackVaryings")]
        [CLSCompliant(false)]
        public static void TransformFeedbackVaryings(Int32 program, Int32 count, String[] varyings, OpenTK.Graphics.ES30.All bufferMode) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Specify values to record in transform feedback buffers
        /// </summary>
        /// <param name="program">
        /// <para>
        /// The name of the target program object.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// The number of varying variables used for transform feedback.
        /// </para>
        /// </param>
        /// <param name="varyings">
        /// <para>
        /// An array of count zero-terminated strings specifying the names of the varying variables to use for transform feedback.
        /// </para>
        /// </param>
        /// <param name="bufferMode">
        /// <para>
        /// Identifies the mode used to capture the varying variables when transform feedback is active. bufferMode must be GL_INTERLEAVED_ATTRIBS or GL_SEPARATE_ATTRIBS.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glTransformFeedbackVaryings")]
        [CLSCompliant(false)]
        public static void TransformFeedbackVaryings(Int32 program, Int32 count, String[] varyings, OpenTK.Graphics.ES30.TransformFeedbackMode bufferMode) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Specify values to record in transform feedback buffers
        /// </summary>
        /// <param name="program">
        /// <para>
        /// The name of the target program object.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// The number of varying variables used for transform feedback.
        /// </para>
        /// </param>
        /// <param name="varyings">
        /// <para>
        /// An array of count zero-terminated strings specifying the names of the varying variables to use for transform feedback.
        /// </para>
        /// </param>
        /// <param name="bufferMode">
        /// <para>
        /// Identifies the mode used to capture the varying variables when transform feedback is active. bufferMode must be GL_INTERLEAVED_ATTRIBS or GL_SEPARATE_ATTRIBS.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glTransformFeedbackVaryings")]
        [CLSCompliant(false)]
        public static void TransformFeedbackVaryings(UInt32 program, Int32 count, String[] varyings, OpenTK.Graphics.ES30.All bufferMode) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Specify values to record in transform feedback buffers
        /// </summary>
        /// <param name="program">
        /// <para>
        /// The name of the target program object.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// The number of varying variables used for transform feedback.
        /// </para>
        /// </param>
        /// <param name="varyings">
        /// <para>
        /// An array of count zero-terminated strings specifying the names of the varying variables to use for transform feedback.
        /// </para>
        /// </param>
        /// <param name="bufferMode">
        /// <para>
        /// Identifies the mode used to capture the varying variables when transform feedback is active. bufferMode must be GL_INTERLEAVED_ATTRIBS or GL_SEPARATE_ATTRIBS.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glTransformFeedbackVaryings")]
        [CLSCompliant(false)]
        public static void TransformFeedbackVaryings(UInt32 program, Int32 count, String[] varyings, OpenTK.Graphics.ES30.TransformFeedbackMode bufferMode) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniform1f")]
        public static void Uniform1(Int32 location, Single v0) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniform1fv")]
        [CLSCompliant(false)]
        public static void Uniform1(Int32 location, Int32 count, Single[] value) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniform1fv")]
        [CLSCompliant(false)]
        public static void Uniform1(Int32 location, Int32 count, ref Single value) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniform1fv")]
        [CLSCompliant(false)]
        public static unsafe void Uniform1(Int32 location, Int32 count, Single* value) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniform1i")]
        public static void Uniform1(Int32 location, Int32 v0) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniform1iv")]
        [CLSCompliant(false)]
        public static void Uniform1(Int32 location, Int32 count, Int32[] value) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniform1iv")]
        [CLSCompliant(false)]
        public static void Uniform1(Int32 location, Int32 count, ref Int32 value) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniform1iv")]
        [CLSCompliant(false)]
        public static unsafe void Uniform1(Int32 location, Int32 count, Int32* value) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glUniform1ui")]
        [CLSCompliant(false)]
        public static void Uniform1(Int32 location, UInt32 v0) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glUniform1uiv")]
        [CLSCompliant(false)]
        public static void Uniform1(Int32 location, Int32 count, UInt32[] value) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glUniform1uiv")]
        [CLSCompliant(false)]
        public static void Uniform1(Int32 location, Int32 count, ref UInt32 value) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glUniform1uiv")]
        [CLSCompliant(false)]
        public static unsafe void Uniform1(Int32 location, Int32 count, UInt32* value) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniform2f")]
        public static void Uniform2(Int32 location, Single v0, Single v1) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniform2fv")]
        [CLSCompliant(false)]
        public static void Uniform2(Int32 location, Int32 count, Single[] value) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniform2fv")]
        [CLSCompliant(false)]
        public static void Uniform2(Int32 location, Int32 count, ref Single value) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniform2fv")]
        [CLSCompliant(false)]
        public static unsafe void Uniform2(Int32 location, Int32 count, Single* value) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniform2i")]
        public static void Uniform2(Int32 location, Int32 v0, Int32 v1) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniform2iv")]
        [CLSCompliant(false)]
        public static void Uniform2(Int32 location, Int32 count, Int32[] value) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniform2iv")]
        [CLSCompliant(false)]
        public static unsafe void Uniform2(Int32 location, Int32 count, Int32* value) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glUniform2ui")]
        [CLSCompliant(false)]
        public static void Uniform2(Int32 location, UInt32 v0, UInt32 v1) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glUniform2uiv")]
        [CLSCompliant(false)]
        public static void Uniform2(Int32 location, Int32 count, UInt32[] value) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glUniform2uiv")]
        [CLSCompliant(false)]
        public static void Uniform2(Int32 location, Int32 count, ref UInt32 value) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glUniform2uiv")]
        [CLSCompliant(false)]
        public static unsafe void Uniform2(Int32 location, Int32 count, UInt32* value) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniform3f")]
        public static void Uniform3(Int32 location, Single v0, Single v1, Single v2) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniform3fv")]
        [CLSCompliant(false)]
        public static void Uniform3(Int32 location, Int32 count, Single[] value) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniform3fv")]
        [CLSCompliant(false)]
        public static void Uniform3(Int32 location, Int32 count, ref Single value) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniform3fv")]
        [CLSCompliant(false)]
        public static unsafe void Uniform3(Int32 location, Int32 count, Single* value) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniform3i")]
        public static void Uniform3(Int32 location, Int32 v0, Int32 v1, Int32 v2) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniform3iv")]
        [CLSCompliant(false)]
        public static void Uniform3(Int32 location, Int32 count, Int32[] value) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniform3iv")]
        [CLSCompliant(false)]
        public static void Uniform3(Int32 location, Int32 count, ref Int32 value) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniform3iv")]
        [CLSCompliant(false)]
        public static unsafe void Uniform3(Int32 location, Int32 count, Int32* value) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glUniform3ui")]
        [CLSCompliant(false)]
        public static void Uniform3(Int32 location, UInt32 v0, UInt32 v1, UInt32 v2) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glUniform3uiv")]
        [CLSCompliant(false)]
        public static void Uniform3(Int32 location, Int32 count, UInt32[] value) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glUniform3uiv")]
        [CLSCompliant(false)]
        public static void Uniform3(Int32 location, Int32 count, ref UInt32 value) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glUniform3uiv")]
        [CLSCompliant(false)]
        public static unsafe void Uniform3(Int32 location, Int32 count, UInt32* value) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniform4f")]
        public static void Uniform4(Int32 location, Single v0, Single v1, Single v2, Single v3) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniform4fv")]
        [CLSCompliant(false)]
        public static void Uniform4(Int32 location, Int32 count, Single[] value) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniform4fv")]
        [CLSCompliant(false)]
        public static void Uniform4(Int32 location, Int32 count, ref Single value) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniform4fv")]
        [CLSCompliant(false)]
        public static unsafe void Uniform4(Int32 location, Int32 count, Single* value) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniform4i")]
        public static void Uniform4(Int32 location, Int32 v0, Int32 v1, Int32 v2, Int32 v3) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniform4iv")]
        [CLSCompliant(false)]
        public static void Uniform4(Int32 location, Int32 count, Int32[] value) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniform4iv")]
        [CLSCompliant(false)]
        public static void Uniform4(Int32 location, Int32 count, ref Int32 value) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniform4iv")]
        [CLSCompliant(false)]
        public static unsafe void Uniform4(Int32 location, Int32 count, Int32* value) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glUniform4ui")]
        [CLSCompliant(false)]
        public static void Uniform4(Int32 location, UInt32 v0, UInt32 v1, UInt32 v2, UInt32 v3) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glUniform4uiv")]
        [CLSCompliant(false)]
        public static void Uniform4(Int32 location, Int32 count, UInt32[] value) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glUniform4uiv")]
        [CLSCompliant(false)]
        public static void Uniform4(Int32 location, Int32 count, ref UInt32 value) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
        /// </para>
        /// <para>
        /// For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </para>
        /// </param>
        /// <param name="transpose">
        /// <para>
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glUniform4uiv")]
        [CLSCompliant(false)]
        public static unsafe void Uniform4(Int32 location, Int32 count, UInt32* value) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Assign a binding point to an active uniform block
        /// </summary>
        /// <param name="program">
        /// <para>
        /// The name of a program object containing the active uniform block whose binding to assign.
        /// </para>
        /// </param>
        /// <param name="uniformBlockIndex">
        /// <para>
        /// The index of the active uniform block within program whose binding to assign.
        /// </para>
        /// </param>
        /// <param name="uniformBlockBinding">
        /// <para>
        /// Specifies the binding point to which to bind the uniform block with index uniformBlockIndex within program.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glUniformBlockBinding")]
        [CLSCompliant(false)]
        public static void UniformBlockBinding(Int32 program, Int32 uniformBlockIndex, Int32 uniformBlockBinding) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Assign a binding point to an active uniform block
        /// </summary>
        /// <param name="program">
        /// <para>
        /// The name of a program object containing the active uniform block whose binding to assign.
        /// </para>
        /// </param>
        /// <param name="uniformBlockIndex">
        /// <para>
        /// The index of the active uniform block within program whose binding to assign.
        /// </para>
        /// </param>
        /// <param name="uniformBlockBinding">
        /// <para>
        /// Specifies the binding point to which to bind the uniform block with index uniformBlockIndex within program.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glUniformBlockBinding")]
        [CLSCompliant(false)]
        public static void UniformBlockBinding(UInt32 program, UInt32 uniformBlockIndex, UInt32 uniformBlockBinding) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]</summary>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniformMatrix2fv")]
        [CLSCompliant(false)]
        public static void UniformMatrix2(Int32 location, Int32 count, bool transpose, Single[] value) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]</summary>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniformMatrix2fv")]
        [CLSCompliant(false)]
        public static void UniformMatrix2(Int32 location, Int32 count, bool transpose, ref Single value) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]</summary>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniformMatrix2fv")]
        [CLSCompliant(false)]
        public static unsafe void UniformMatrix2(Int32 location, Int32 count, bool transpose, Single* value) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]</summary>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glUniformMatrix2x3fv")]
        [CLSCompliant(false)]
        public static void UniformMatrix2x3(Int32 location, Int32 count, bool transpose, Single[] value) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]</summary>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glUniformMatrix2x3fv")]
        [CLSCompliant(false)]
        public static void UniformMatrix2x3(Int32 location, Int32 count, bool transpose, ref Single value) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]</summary>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glUniformMatrix2x3fv")]
        [CLSCompliant(false)]
        public static unsafe void UniformMatrix2x3(Int32 location, Int32 count, bool transpose, Single* value) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]</summary>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glUniformMatrix2x4fv")]
        [CLSCompliant(false)]
        public static void UniformMatrix2x4(Int32 location, Int32 count, bool transpose, Single[] value) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]</summary>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glUniformMatrix2x4fv")]
        [CLSCompliant(false)]
        public static void UniformMatrix2x4(Int32 location, Int32 count, bool transpose, ref Single value) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]</summary>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glUniformMatrix2x4fv")]
        [CLSCompliant(false)]
        public static unsafe void UniformMatrix2x4(Int32 location, Int32 count, bool transpose, Single* value) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]</summary>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniformMatrix3fv")]
        [CLSCompliant(false)]
        public static void UniformMatrix3(Int32 location, Int32 count, bool transpose, Single[] value) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]</summary>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniformMatrix3fv")]
        [CLSCompliant(false)]
        public static void UniformMatrix3(Int32 location, Int32 count, bool transpose, ref Single value) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]</summary>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniformMatrix3fv")]
        [CLSCompliant(false)]
        public static unsafe void UniformMatrix3(Int32 location, Int32 count, bool transpose, Single* value) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]</summary>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glUniformMatrix3x2fv")]
        [CLSCompliant(false)]
        public static void UniformMatrix3x2(Int32 location, Int32 count, bool transpose, Single[] value) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]</summary>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glUniformMatrix3x2fv")]
        [CLSCompliant(false)]
        public static void UniformMatrix3x2(Int32 location, Int32 count, bool transpose, ref Single value) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]</summary>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glUniformMatrix3x2fv")]
        [CLSCompliant(false)]
        public static unsafe void UniformMatrix3x2(Int32 location, Int32 count, bool transpose, Single* value) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]</summary>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glUniformMatrix3x4fv")]
        [CLSCompliant(false)]
        public static void UniformMatrix3x4(Int32 location, Int32 count, bool transpose, Single[] value) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]</summary>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glUniformMatrix3x4fv")]
        [CLSCompliant(false)]
        public static void UniformMatrix3x4(Int32 location, Int32 count, bool transpose, ref Single value) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]</summary>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glUniformMatrix3x4fv")]
        [CLSCompliant(false)]
        public static unsafe void UniformMatrix3x4(Int32 location, Int32 count, bool transpose, Single* value) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]</summary>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniformMatrix4fv")]
        [CLSCompliant(false)]
        public static void UniformMatrix4(Int32 location, Int32 count, bool transpose, Single[] value) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]</summary>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniformMatrix4fv")]
        [CLSCompliant(false)]
        public static void UniformMatrix4(Int32 location, Int32 count, bool transpose, ref Single value) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]</summary>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniformMatrix4fv")]
        [CLSCompliant(false)]
        public static unsafe void UniformMatrix4(Int32 location, Int32 count, bool transpose, Single* value) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]</summary>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glUniformMatrix4x2fv")]
        [CLSCompliant(false)]
        public static void UniformMatrix4x2(Int32 location, Int32 count, bool transpose, Single[] value) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]</summary>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glUniformMatrix4x2fv")]
        [CLSCompliant(false)]
        public static void UniformMatrix4x2(Int32 location, Int32 count, bool transpose, ref Single value) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]</summary>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glUniformMatrix4x2fv")]
        [CLSCompliant(false)]
        public static unsafe void UniformMatrix4x2(Int32 location, Int32 count, bool transpose, Single* value) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]</summary>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glUniformMatrix4x3fv")]
        [CLSCompliant(false)]
        public static void UniformMatrix4x3(Int32 location, Int32 count, bool transpose, Single[] value) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]</summary>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glUniformMatrix4x3fv")]
        [CLSCompliant(false)]
        public static void UniformMatrix4x3(Int32 location, Int32 count, bool transpose, ref Single value) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]</summary>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glUniformMatrix4x3fv")]
        [CLSCompliant(false)]
        public static unsafe void UniformMatrix4x3(Int32 location, Int32 count, bool transpose, Single* value) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]</summary>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glUnmapBuffer")]
        public static bool UnmapBuffer(OpenTK.Graphics.ES30.All target) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]</summary>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glUnmapBuffer")]
        public static bool UnmapBuffer(OpenTK.Graphics.ES30.BufferTarget target) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Installs a program object as part of current rendering state
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program object whose executables are to be used as part of current rendering state.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUseProgram")]
        [CLSCompliant(false)]
        public static void UseProgram(Int32 program) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Installs a program object as part of current rendering state
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program object whose executables are to be used as part of current rendering state.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUseProgram")]
        [CLSCompliant(false)]
        public static void UseProgram(UInt32 program) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Validates a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program object to be validated.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glValidateProgram")]
        [CLSCompliant(false)]
        public static void ValidateProgram(Int32 program) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Validates a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program object to be validated.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glValidateProgram")]
        [CLSCompliant(false)]
        public static void ValidateProgram(UInt32 program) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// For the packed commands (glVertexAttribP*), specified the type of packing used on the data. This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, to specify signed or unsigned data, respectively, or GL_UNSIGNED_INT_10F_11F_11F_REV to specify floating point data.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For the packed commands, if GL_TRUE, then the values are to be converted to floating point values by normalizing. Otherwise, they are converted directly to floating-point values. If type indicates a floating-pont format, then normalized value must be GL_FALSE.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the packed commands, specifies the new packed value to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib1f")]
        [CLSCompliant(false)]
        public static void VertexAttrib1(Int32 index, Single x) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// For the packed commands (glVertexAttribP*), specified the type of packing used on the data. This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, to specify signed or unsigned data, respectively, or GL_UNSIGNED_INT_10F_11F_11F_REV to specify floating point data.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For the packed commands, if GL_TRUE, then the values are to be converted to floating point values by normalizing. Otherwise, they are converted directly to floating-point values. If type indicates a floating-pont format, then normalized value must be GL_FALSE.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the packed commands, specifies the new packed value to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib1f")]
        [CLSCompliant(false)]
        public static void VertexAttrib1(UInt32 index, Single x) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// For the packed commands (glVertexAttribP*), specified the type of packing used on the data. This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, to specify signed or unsigned data, respectively, or GL_UNSIGNED_INT_10F_11F_11F_REV to specify floating point data.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For the packed commands, if GL_TRUE, then the values are to be converted to floating point values by normalizing. Otherwise, they are converted directly to floating-point values. If type indicates a floating-pont format, then normalized value must be GL_FALSE.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the packed commands, specifies the new packed value to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib1fv")]
        [CLSCompliant(false)]
        public static unsafe void VertexAttrib1(Int32 index, Single* v) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// For the packed commands (glVertexAttribP*), specified the type of packing used on the data. This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, to specify signed or unsigned data, respectively, or GL_UNSIGNED_INT_10F_11F_11F_REV to specify floating point data.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For the packed commands, if GL_TRUE, then the values are to be converted to floating point values by normalizing. Otherwise, they are converted directly to floating-point values. If type indicates a floating-pont format, then normalized value must be GL_FALSE.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the packed commands, specifies the new packed value to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib1fv")]
        [CLSCompliant(false)]
        public static unsafe void VertexAttrib1(UInt32 index, Single* v) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// For the packed commands (glVertexAttribP*), specified the type of packing used on the data. This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, to specify signed or unsigned data, respectively, or GL_UNSIGNED_INT_10F_11F_11F_REV to specify floating point data.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For the packed commands, if GL_TRUE, then the values are to be converted to floating point values by normalizing. Otherwise, they are converted directly to floating-point values. If type indicates a floating-pont format, then normalized value must be GL_FALSE.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the packed commands, specifies the new packed value to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib2f")]
        [CLSCompliant(false)]
        public static void VertexAttrib2(Int32 index, Single x, Single y) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// For the packed commands (glVertexAttribP*), specified the type of packing used on the data. This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, to specify signed or unsigned data, respectively, or GL_UNSIGNED_INT_10F_11F_11F_REV to specify floating point data.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For the packed commands, if GL_TRUE, then the values are to be converted to floating point values by normalizing. Otherwise, they are converted directly to floating-point values. If type indicates a floating-pont format, then normalized value must be GL_FALSE.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the packed commands, specifies the new packed value to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib2f")]
        [CLSCompliant(false)]
        public static void VertexAttrib2(UInt32 index, Single x, Single y) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// For the packed commands (glVertexAttribP*), specified the type of packing used on the data. This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, to specify signed or unsigned data, respectively, or GL_UNSIGNED_INT_10F_11F_11F_REV to specify floating point data.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For the packed commands, if GL_TRUE, then the values are to be converted to floating point values by normalizing. Otherwise, they are converted directly to floating-point values. If type indicates a floating-pont format, then normalized value must be GL_FALSE.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the packed commands, specifies the new packed value to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib2fv")]
        [CLSCompliant(false)]
        public static void VertexAttrib2(Int32 index, Single[] v) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// For the packed commands (glVertexAttribP*), specified the type of packing used on the data. This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, to specify signed or unsigned data, respectively, or GL_UNSIGNED_INT_10F_11F_11F_REV to specify floating point data.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For the packed commands, if GL_TRUE, then the values are to be converted to floating point values by normalizing. Otherwise, they are converted directly to floating-point values. If type indicates a floating-pont format, then normalized value must be GL_FALSE.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the packed commands, specifies the new packed value to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib2fv")]
        [CLSCompliant(false)]
        public static void VertexAttrib2(Int32 index, ref Single v) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// For the packed commands (glVertexAttribP*), specified the type of packing used on the data. This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, to specify signed or unsigned data, respectively, or GL_UNSIGNED_INT_10F_11F_11F_REV to specify floating point data.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For the packed commands, if GL_TRUE, then the values are to be converted to floating point values by normalizing. Otherwise, they are converted directly to floating-point values. If type indicates a floating-pont format, then normalized value must be GL_FALSE.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the packed commands, specifies the new packed value to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib2fv")]
        [CLSCompliant(false)]
        public static unsafe void VertexAttrib2(Int32 index, Single* v) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// For the packed commands (glVertexAttribP*), specified the type of packing used on the data. This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, to specify signed or unsigned data, respectively, or GL_UNSIGNED_INT_10F_11F_11F_REV to specify floating point data.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For the packed commands, if GL_TRUE, then the values are to be converted to floating point values by normalizing. Otherwise, they are converted directly to floating-point values. If type indicates a floating-pont format, then normalized value must be GL_FALSE.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the packed commands, specifies the new packed value to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib2fv")]
        [CLSCompliant(false)]
        public static void VertexAttrib2(UInt32 index, Single[] v) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// For the packed commands (glVertexAttribP*), specified the type of packing used on the data. This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, to specify signed or unsigned data, respectively, or GL_UNSIGNED_INT_10F_11F_11F_REV to specify floating point data.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For the packed commands, if GL_TRUE, then the values are to be converted to floating point values by normalizing. Otherwise, they are converted directly to floating-point values. If type indicates a floating-pont format, then normalized value must be GL_FALSE.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the packed commands, specifies the new packed value to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib2fv")]
        [CLSCompliant(false)]
        public static void VertexAttrib2(UInt32 index, ref Single v) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// For the packed commands (glVertexAttribP*), specified the type of packing used on the data. This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, to specify signed or unsigned data, respectively, or GL_UNSIGNED_INT_10F_11F_11F_REV to specify floating point data.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For the packed commands, if GL_TRUE, then the values are to be converted to floating point values by normalizing. Otherwise, they are converted directly to floating-point values. If type indicates a floating-pont format, then normalized value must be GL_FALSE.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the packed commands, specifies the new packed value to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib2fv")]
        [CLSCompliant(false)]
        public static unsafe void VertexAttrib2(UInt32 index, Single* v) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// For the packed commands (glVertexAttribP*), specified the type of packing used on the data. This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, to specify signed or unsigned data, respectively, or GL_UNSIGNED_INT_10F_11F_11F_REV to specify floating point data.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For the packed commands, if GL_TRUE, then the values are to be converted to floating point values by normalizing. Otherwise, they are converted directly to floating-point values. If type indicates a floating-pont format, then normalized value must be GL_FALSE.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the packed commands, specifies the new packed value to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib3f")]
        [CLSCompliant(false)]
        public static void VertexAttrib3(Int32 index, Single x, Single y, Single z) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// For the packed commands (glVertexAttribP*), specified the type of packing used on the data. This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, to specify signed or unsigned data, respectively, or GL_UNSIGNED_INT_10F_11F_11F_REV to specify floating point data.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For the packed commands, if GL_TRUE, then the values are to be converted to floating point values by normalizing. Otherwise, they are converted directly to floating-point values. If type indicates a floating-pont format, then normalized value must be GL_FALSE.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the packed commands, specifies the new packed value to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib3f")]
        [CLSCompliant(false)]
        public static void VertexAttrib3(UInt32 index, Single x, Single y, Single z) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// For the packed commands (glVertexAttribP*), specified the type of packing used on the data. This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, to specify signed or unsigned data, respectively, or GL_UNSIGNED_INT_10F_11F_11F_REV to specify floating point data.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For the packed commands, if GL_TRUE, then the values are to be converted to floating point values by normalizing. Otherwise, they are converted directly to floating-point values. If type indicates a floating-pont format, then normalized value must be GL_FALSE.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the packed commands, specifies the new packed value to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib3fv")]
        [CLSCompliant(false)]
        public static void VertexAttrib3(Int32 index, Single[] v) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// For the packed commands (glVertexAttribP*), specified the type of packing used on the data. This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, to specify signed or unsigned data, respectively, or GL_UNSIGNED_INT_10F_11F_11F_REV to specify floating point data.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For the packed commands, if GL_TRUE, then the values are to be converted to floating point values by normalizing. Otherwise, they are converted directly to floating-point values. If type indicates a floating-pont format, then normalized value must be GL_FALSE.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the packed commands, specifies the new packed value to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib3fv")]
        [CLSCompliant(false)]
        public static void VertexAttrib3(Int32 index, ref Single v) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// For the packed commands (glVertexAttribP*), specified the type of packing used on the data. This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, to specify signed or unsigned data, respectively, or GL_UNSIGNED_INT_10F_11F_11F_REV to specify floating point data.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For the packed commands, if GL_TRUE, then the values are to be converted to floating point values by normalizing. Otherwise, they are converted directly to floating-point values. If type indicates a floating-pont format, then normalized value must be GL_FALSE.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the packed commands, specifies the new packed value to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib3fv")]
        [CLSCompliant(false)]
        public static unsafe void VertexAttrib3(Int32 index, Single* v) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// For the packed commands (glVertexAttribP*), specified the type of packing used on the data. This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, to specify signed or unsigned data, respectively, or GL_UNSIGNED_INT_10F_11F_11F_REV to specify floating point data.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For the packed commands, if GL_TRUE, then the values are to be converted to floating point values by normalizing. Otherwise, they are converted directly to floating-point values. If type indicates a floating-pont format, then normalized value must be GL_FALSE.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the packed commands, specifies the new packed value to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib3fv")]
        [CLSCompliant(false)]
        public static void VertexAttrib3(UInt32 index, Single[] v) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// For the packed commands (glVertexAttribP*), specified the type of packing used on the data. This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, to specify signed or unsigned data, respectively, or GL_UNSIGNED_INT_10F_11F_11F_REV to specify floating point data.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For the packed commands, if GL_TRUE, then the values are to be converted to floating point values by normalizing. Otherwise, they are converted directly to floating-point values. If type indicates a floating-pont format, then normalized value must be GL_FALSE.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the packed commands, specifies the new packed value to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib3fv")]
        [CLSCompliant(false)]
        public static void VertexAttrib3(UInt32 index, ref Single v) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// For the packed commands (glVertexAttribP*), specified the type of packing used on the data. This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, to specify signed or unsigned data, respectively, or GL_UNSIGNED_INT_10F_11F_11F_REV to specify floating point data.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For the packed commands, if GL_TRUE, then the values are to be converted to floating point values by normalizing. Otherwise, they are converted directly to floating-point values. If type indicates a floating-pont format, then normalized value must be GL_FALSE.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the packed commands, specifies the new packed value to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib3fv")]
        [CLSCompliant(false)]
        public static unsafe void VertexAttrib3(UInt32 index, Single* v) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// For the packed commands (glVertexAttribP*), specified the type of packing used on the data. This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, to specify signed or unsigned data, respectively, or GL_UNSIGNED_INT_10F_11F_11F_REV to specify floating point data.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For the packed commands, if GL_TRUE, then the values are to be converted to floating point values by normalizing. Otherwise, they are converted directly to floating-point values. If type indicates a floating-pont format, then normalized value must be GL_FALSE.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the packed commands, specifies the new packed value to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4f")]
        [CLSCompliant(false)]
        public static void VertexAttrib4(Int32 index, Single x, Single y, Single z, Single w) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// For the packed commands (glVertexAttribP*), specified the type of packing used on the data. This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, to specify signed or unsigned data, respectively, or GL_UNSIGNED_INT_10F_11F_11F_REV to specify floating point data.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For the packed commands, if GL_TRUE, then the values are to be converted to floating point values by normalizing. Otherwise, they are converted directly to floating-point values. If type indicates a floating-pont format, then normalized value must be GL_FALSE.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the packed commands, specifies the new packed value to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4f")]
        [CLSCompliant(false)]
        public static void VertexAttrib4(UInt32 index, Single x, Single y, Single z, Single w) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// For the packed commands (glVertexAttribP*), specified the type of packing used on the data. This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, to specify signed or unsigned data, respectively, or GL_UNSIGNED_INT_10F_11F_11F_REV to specify floating point data.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For the packed commands, if GL_TRUE, then the values are to be converted to floating point values by normalizing. Otherwise, they are converted directly to floating-point values. If type indicates a floating-pont format, then normalized value must be GL_FALSE.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the packed commands, specifies the new packed value to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4fv")]
        [CLSCompliant(false)]
        public static void VertexAttrib4(Int32 index, Single[] v) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// For the packed commands (glVertexAttribP*), specified the type of packing used on the data. This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, to specify signed or unsigned data, respectively, or GL_UNSIGNED_INT_10F_11F_11F_REV to specify floating point data.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For the packed commands, if GL_TRUE, then the values are to be converted to floating point values by normalizing. Otherwise, they are converted directly to floating-point values. If type indicates a floating-pont format, then normalized value must be GL_FALSE.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the packed commands, specifies the new packed value to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4fv")]
        [CLSCompliant(false)]
        public static void VertexAttrib4(Int32 index, ref Single v) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// For the packed commands (glVertexAttribP*), specified the type of packing used on the data. This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, to specify signed or unsigned data, respectively, or GL_UNSIGNED_INT_10F_11F_11F_REV to specify floating point data.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For the packed commands, if GL_TRUE, then the values are to be converted to floating point values by normalizing. Otherwise, they are converted directly to floating-point values. If type indicates a floating-pont format, then normalized value must be GL_FALSE.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the packed commands, specifies the new packed value to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4fv")]
        [CLSCompliant(false)]
        public static unsafe void VertexAttrib4(Int32 index, Single* v) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// For the packed commands (glVertexAttribP*), specified the type of packing used on the data. This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, to specify signed or unsigned data, respectively, or GL_UNSIGNED_INT_10F_11F_11F_REV to specify floating point data.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For the packed commands, if GL_TRUE, then the values are to be converted to floating point values by normalizing. Otherwise, they are converted directly to floating-point values. If type indicates a floating-pont format, then normalized value must be GL_FALSE.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the packed commands, specifies the new packed value to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4fv")]
        [CLSCompliant(false)]
        public static void VertexAttrib4(UInt32 index, Single[] v) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// For the packed commands (glVertexAttribP*), specified the type of packing used on the data. This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, to specify signed or unsigned data, respectively, or GL_UNSIGNED_INT_10F_11F_11F_REV to specify floating point data.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For the packed commands, if GL_TRUE, then the values are to be converted to floating point values by normalizing. Otherwise, they are converted directly to floating-point values. If type indicates a floating-pont format, then normalized value must be GL_FALSE.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the packed commands, specifies the new packed value to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4fv")]
        [CLSCompliant(false)]
        public static void VertexAttrib4(UInt32 index, ref Single v) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        /// <param name="v">
        /// <para>
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// For the packed commands (glVertexAttribP*), specified the type of packing used on the data. This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, to specify signed or unsigned data, respectively, or GL_UNSIGNED_INT_10F_11F_11F_REV to specify floating point data.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For the packed commands, if GL_TRUE, then the values are to be converted to floating point values by normalizing. Otherwise, they are converted directly to floating-point values. If type indicates a floating-pont format, then normalized value must be GL_FALSE.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// For the packed commands, specifies the new packed value to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4fv")]
        [CLSCompliant(false)]
        public static unsafe void VertexAttrib4(UInt32 index, Single* v) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Modify the rate at which generic vertex attributes advance during instanced rendering
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specify the index of the generic vertex attribute.
        /// </para>
        /// </param>
        /// <param name="divisor">
        /// <para>
        /// Specify the number of instances that will pass between updates of the generic attribute at slot index.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribDivisor")]
        [CLSCompliant(false)]
        public static void VertexAttribDivisor(Int32 index, Int32 divisor) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Modify the rate at which generic vertex attributes advance during instanced rendering
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specify the index of the generic vertex attribute.
        /// </para>
        /// </param>
        /// <param name="divisor">
        /// <para>
        /// Specify the number of instances that will pass between updates of the generic attribute at slot index.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribDivisor")]
        [CLSCompliant(false)]
        public static void VertexAttribDivisor(UInt32 index, UInt32 divisor) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]</summary>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4i")]
        [CLSCompliant(false)]
        public static void VertexAttribI4(Int32 index, Int32 x, Int32 y, Int32 z, Int32 w) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]</summary>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4i")]
        [CLSCompliant(false)]
        public static void VertexAttribI4(UInt32 index, Int32 x, Int32 y, Int32 z, Int32 w) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]</summary>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4iv")]
        [CLSCompliant(false)]
        public static void VertexAttribI4(Int32 index, Int32[] v) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]</summary>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4iv")]
        [CLSCompliant(false)]
        public static void VertexAttribI4(Int32 index, ref Int32 v) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]</summary>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4iv")]
        [CLSCompliant(false)]
        public static unsafe void VertexAttribI4(Int32 index, Int32* v) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]</summary>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4iv")]
        [CLSCompliant(false)]
        public static void VertexAttribI4(UInt32 index, Int32[] v) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]</summary>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4iv")]
        [CLSCompliant(false)]
        public static void VertexAttribI4(UInt32 index, ref Int32 v) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]</summary>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4iv")]
        [CLSCompliant(false)]
        public static unsafe void VertexAttribI4(UInt32 index, Int32* v) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]</summary>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4ui")]
        [CLSCompliant(false)]
        public static void VertexAttribI4(UInt32 index, UInt32 x, UInt32 y, UInt32 z, UInt32 w) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]</summary>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4uiv")]
        [CLSCompliant(false)]
        public static void VertexAttribI4(UInt32 index, UInt32[] v) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]</summary>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4uiv")]
        [CLSCompliant(false)]
        public static void VertexAttribI4(UInt32 index, ref UInt32 v) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]</summary>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4uiv")]
        [CLSCompliant(false)]
        public static unsafe void VertexAttribI4(UInt32 index, UInt32* v) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]</summary>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribIPointer")]
        [CLSCompliant(false)]
        public static void VertexAttribIPointer(Int32 index, Int32 size, OpenTK.Graphics.ES30.All type, Int32 stride, IntPtr pointer) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]</summary>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribIPointer")]
        [CLSCompliant(false)]
        public static void VertexAttribIPointer<T4>(Int32 index, Int32 size, OpenTK.Graphics.ES30.All type, Int32 stride, [InAttribute, OutAttribute] T4[] pointer)
            where T4 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]</summary>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribIPointer")]
        [CLSCompliant(false)]
        public static void VertexAttribIPointer<T4>(Int32 index, Int32 size, OpenTK.Graphics.ES30.All type, Int32 stride, [InAttribute, OutAttribute] T4[,] pointer)
            where T4 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]</summary>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribIPointer")]
        [CLSCompliant(false)]
        public static void VertexAttribIPointer<T4>(Int32 index, Int32 size, OpenTK.Graphics.ES30.All type, Int32 stride, [InAttribute, OutAttribute] T4[,,] pointer)
            where T4 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]</summary>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribIPointer")]
        [CLSCompliant(false)]
        public static void VertexAttribIPointer<T4>(Int32 index, Int32 size, OpenTK.Graphics.ES30.All type, Int32 stride, [InAttribute, OutAttribute] ref T4 pointer)
            where T4 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]</summary>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribIPointer")]
        [CLSCompliant(false)]
        public static void VertexAttribIPointer(Int32 index, Int32 size, OpenTK.Graphics.ES30.VertexAttribIntegerType type, Int32 stride, IntPtr pointer) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]</summary>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribIPointer")]
        [CLSCompliant(false)]
        public static void VertexAttribIPointer<T4>(Int32 index, Int32 size, OpenTK.Graphics.ES30.VertexAttribIntegerType type, Int32 stride, [InAttribute, OutAttribute] T4[] pointer)
            where T4 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]</summary>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribIPointer")]
        [CLSCompliant(false)]
        public static void VertexAttribIPointer<T4>(Int32 index, Int32 size, OpenTK.Graphics.ES30.VertexAttribIntegerType type, Int32 stride, [InAttribute, OutAttribute] T4[,] pointer)
            where T4 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]</summary>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribIPointer")]
        [CLSCompliant(false)]
        public static void VertexAttribIPointer<T4>(Int32 index, Int32 size, OpenTK.Graphics.ES30.VertexAttribIntegerType type, Int32 stride, [InAttribute, OutAttribute] T4[,,] pointer)
            where T4 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]</summary>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribIPointer")]
        [CLSCompliant(false)]
        public static void VertexAttribIPointer<T4>(Int32 index, Int32 size, OpenTK.Graphics.ES30.VertexAttribIntegerType type, Int32 stride, [InAttribute, OutAttribute] ref T4 pointer)
            where T4 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]</summary>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribIPointer")]
        [CLSCompliant(false)]
        public static void VertexAttribIPointer(UInt32 index, Int32 size, OpenTK.Graphics.ES30.All type, Int32 stride, IntPtr pointer) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]</summary>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribIPointer")]
        [CLSCompliant(false)]
        public static void VertexAttribIPointer<T4>(UInt32 index, Int32 size, OpenTK.Graphics.ES30.All type, Int32 stride, [InAttribute, OutAttribute] T4[] pointer)
            where T4 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]</summary>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribIPointer")]
        [CLSCompliant(false)]
        public static void VertexAttribIPointer<T4>(UInt32 index, Int32 size, OpenTK.Graphics.ES30.All type, Int32 stride, [InAttribute, OutAttribute] T4[,] pointer)
            where T4 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]</summary>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribIPointer")]
        [CLSCompliant(false)]
        public static void VertexAttribIPointer<T4>(UInt32 index, Int32 size, OpenTK.Graphics.ES30.All type, Int32 stride, [InAttribute, OutAttribute] T4[,,] pointer)
            where T4 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]</summary>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribIPointer")]
        [CLSCompliant(false)]
        public static void VertexAttribIPointer<T4>(UInt32 index, Int32 size, OpenTK.Graphics.ES30.All type, Int32 stride, [InAttribute, OutAttribute] ref T4 pointer)
            where T4 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]</summary>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribIPointer")]
        [CLSCompliant(false)]
        public static void VertexAttribIPointer(UInt32 index, Int32 size, OpenTK.Graphics.ES30.VertexAttribIntegerType type, Int32 stride, IntPtr pointer) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]</summary>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribIPointer")]
        [CLSCompliant(false)]
        public static void VertexAttribIPointer<T4>(UInt32 index, Int32 size, OpenTK.Graphics.ES30.VertexAttribIntegerType type, Int32 stride, [InAttribute, OutAttribute] T4[] pointer)
            where T4 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]</summary>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribIPointer")]
        [CLSCompliant(false)]
        public static void VertexAttribIPointer<T4>(UInt32 index, Int32 size, OpenTK.Graphics.ES30.VertexAttribIntegerType type, Int32 stride, [InAttribute, OutAttribute] T4[,] pointer)
            where T4 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]</summary>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribIPointer")]
        [CLSCompliant(false)]
        public static void VertexAttribIPointer<T4>(UInt32 index, Int32 size, OpenTK.Graphics.ES30.VertexAttribIntegerType type, Int32 stride, [InAttribute, OutAttribute] T4[,,] pointer)
            where T4 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]</summary>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribIPointer")]
        [CLSCompliant(false)]
        public static void VertexAttribIPointer<T4>(UInt32 index, Int32 size, OpenTK.Graphics.ES30.VertexAttribIntegerType type, Int32 stride, [InAttribute, OutAttribute] ref T4 pointer)
            where T4 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Define an array of generic vertex attribute data
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, 4. Additionally, the symbolic constant GL_BGRA is accepted by glVertexAttribPointer. The initial value is 4.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of each component in the array. The symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, and GL_UNSIGNED_INT are accepted by glVertexAttribPointer and glVertexAttribIPointer. Additionally GL_HALF_FLOAT, GL_FLOAT, GL_DOUBLE, GL_FIXED, GL_INT_2_10_10_10_REV, GL_UNSIGNED_INT_2_10_10_10_REV and GL_UNSIGNED_INT_10F_11F_11F_REV are accepted by glVertexAttribPointer. GL_DOUBLE is also accepted by glVertexAttribLPointer and is the only token accepted by the type parameter for that function. The initial value is GL_FLOAT.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For glVertexAttribPointer, specifies whether fixed-point data values should be normalized (GL_TRUE) or converted directly as fixed-point values (GL_FALSE) when they are accessed.
        /// </para>
        /// </param>
        /// <param name="stride">
        /// <para>
        /// Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
        /// </para>
        /// </param>
        /// <param name="pointer">
        /// <para>
        /// Specifies a offset of the first component of the first generic vertex attribute in the array in the data store of the buffer currently bound to the GL_ARRAY_BUFFER target. The initial value is 0.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttribPointer")]
        [CLSCompliant(false)]
        public static void VertexAttribPointer(Int32 index, Int32 size, OpenTK.Graphics.ES30.All type, bool normalized, Int32 stride, IntPtr pointer) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Define an array of generic vertex attribute data
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, 4. Additionally, the symbolic constant GL_BGRA is accepted by glVertexAttribPointer. The initial value is 4.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of each component in the array. The symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, and GL_UNSIGNED_INT are accepted by glVertexAttribPointer and glVertexAttribIPointer. Additionally GL_HALF_FLOAT, GL_FLOAT, GL_DOUBLE, GL_FIXED, GL_INT_2_10_10_10_REV, GL_UNSIGNED_INT_2_10_10_10_REV and GL_UNSIGNED_INT_10F_11F_11F_REV are accepted by glVertexAttribPointer. GL_DOUBLE is also accepted by glVertexAttribLPointer and is the only token accepted by the type parameter for that function. The initial value is GL_FLOAT.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For glVertexAttribPointer, specifies whether fixed-point data values should be normalized (GL_TRUE) or converted directly as fixed-point values (GL_FALSE) when they are accessed.
        /// </para>
        /// </param>
        /// <param name="stride">
        /// <para>
        /// Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
        /// </para>
        /// </param>
        /// <param name="pointer">
        /// <para>
        /// Specifies a offset of the first component of the first generic vertex attribute in the array in the data store of the buffer currently bound to the GL_ARRAY_BUFFER target. The initial value is 0.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttribPointer")]
        [CLSCompliant(false)]
        public static void VertexAttribPointer<T5>(Int32 index, Int32 size, OpenTK.Graphics.ES30.All type, bool normalized, Int32 stride, [InAttribute, OutAttribute] T5[] pointer)
            where T5 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Define an array of generic vertex attribute data
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, 4. Additionally, the symbolic constant GL_BGRA is accepted by glVertexAttribPointer. The initial value is 4.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of each component in the array. The symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, and GL_UNSIGNED_INT are accepted by glVertexAttribPointer and glVertexAttribIPointer. Additionally GL_HALF_FLOAT, GL_FLOAT, GL_DOUBLE, GL_FIXED, GL_INT_2_10_10_10_REV, GL_UNSIGNED_INT_2_10_10_10_REV and GL_UNSIGNED_INT_10F_11F_11F_REV are accepted by glVertexAttribPointer. GL_DOUBLE is also accepted by glVertexAttribLPointer and is the only token accepted by the type parameter for that function. The initial value is GL_FLOAT.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For glVertexAttribPointer, specifies whether fixed-point data values should be normalized (GL_TRUE) or converted directly as fixed-point values (GL_FALSE) when they are accessed.
        /// </para>
        /// </param>
        /// <param name="stride">
        /// <para>
        /// Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
        /// </para>
        /// </param>
        /// <param name="pointer">
        /// <para>
        /// Specifies a offset of the first component of the first generic vertex attribute in the array in the data store of the buffer currently bound to the GL_ARRAY_BUFFER target. The initial value is 0.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttribPointer")]
        [CLSCompliant(false)]
        public static void VertexAttribPointer<T5>(Int32 index, Int32 size, OpenTK.Graphics.ES30.All type, bool normalized, Int32 stride, [InAttribute, OutAttribute] T5[,] pointer)
            where T5 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Define an array of generic vertex attribute data
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, 4. Additionally, the symbolic constant GL_BGRA is accepted by glVertexAttribPointer. The initial value is 4.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of each component in the array. The symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, and GL_UNSIGNED_INT are accepted by glVertexAttribPointer and glVertexAttribIPointer. Additionally GL_HALF_FLOAT, GL_FLOAT, GL_DOUBLE, GL_FIXED, GL_INT_2_10_10_10_REV, GL_UNSIGNED_INT_2_10_10_10_REV and GL_UNSIGNED_INT_10F_11F_11F_REV are accepted by glVertexAttribPointer. GL_DOUBLE is also accepted by glVertexAttribLPointer and is the only token accepted by the type parameter for that function. The initial value is GL_FLOAT.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For glVertexAttribPointer, specifies whether fixed-point data values should be normalized (GL_TRUE) or converted directly as fixed-point values (GL_FALSE) when they are accessed.
        /// </para>
        /// </param>
        /// <param name="stride">
        /// <para>
        /// Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
        /// </para>
        /// </param>
        /// <param name="pointer">
        /// <para>
        /// Specifies a offset of the first component of the first generic vertex attribute in the array in the data store of the buffer currently bound to the GL_ARRAY_BUFFER target. The initial value is 0.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttribPointer")]
        [CLSCompliant(false)]
        public static void VertexAttribPointer<T5>(Int32 index, Int32 size, OpenTK.Graphics.ES30.All type, bool normalized, Int32 stride, [InAttribute, OutAttribute] T5[,,] pointer)
            where T5 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Define an array of generic vertex attribute data
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, 4. Additionally, the symbolic constant GL_BGRA is accepted by glVertexAttribPointer. The initial value is 4.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of each component in the array. The symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, and GL_UNSIGNED_INT are accepted by glVertexAttribPointer and glVertexAttribIPointer. Additionally GL_HALF_FLOAT, GL_FLOAT, GL_DOUBLE, GL_FIXED, GL_INT_2_10_10_10_REV, GL_UNSIGNED_INT_2_10_10_10_REV and GL_UNSIGNED_INT_10F_11F_11F_REV are accepted by glVertexAttribPointer. GL_DOUBLE is also accepted by glVertexAttribLPointer and is the only token accepted by the type parameter for that function. The initial value is GL_FLOAT.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For glVertexAttribPointer, specifies whether fixed-point data values should be normalized (GL_TRUE) or converted directly as fixed-point values (GL_FALSE) when they are accessed.
        /// </para>
        /// </param>
        /// <param name="stride">
        /// <para>
        /// Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
        /// </para>
        /// </param>
        /// <param name="pointer">
        /// <para>
        /// Specifies a offset of the first component of the first generic vertex attribute in the array in the data store of the buffer currently bound to the GL_ARRAY_BUFFER target. The initial value is 0.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttribPointer")]
        [CLSCompliant(false)]
        public static void VertexAttribPointer<T5>(Int32 index, Int32 size, OpenTK.Graphics.ES30.All type, bool normalized, Int32 stride, [InAttribute, OutAttribute] ref T5 pointer)
            where T5 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Define an array of generic vertex attribute data
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, 4. Additionally, the symbolic constant GL_BGRA is accepted by glVertexAttribPointer. The initial value is 4.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of each component in the array. The symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, and GL_UNSIGNED_INT are accepted by glVertexAttribPointer and glVertexAttribIPointer. Additionally GL_HALF_FLOAT, GL_FLOAT, GL_DOUBLE, GL_FIXED, GL_INT_2_10_10_10_REV, GL_UNSIGNED_INT_2_10_10_10_REV and GL_UNSIGNED_INT_10F_11F_11F_REV are accepted by glVertexAttribPointer. GL_DOUBLE is also accepted by glVertexAttribLPointer and is the only token accepted by the type parameter for that function. The initial value is GL_FLOAT.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For glVertexAttribPointer, specifies whether fixed-point data values should be normalized (GL_TRUE) or converted directly as fixed-point values (GL_FALSE) when they are accessed.
        /// </para>
        /// </param>
        /// <param name="stride">
        /// <para>
        /// Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
        /// </para>
        /// </param>
        /// <param name="pointer">
        /// <para>
        /// Specifies a offset of the first component of the first generic vertex attribute in the array in the data store of the buffer currently bound to the GL_ARRAY_BUFFER target. The initial value is 0.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttribPointer")]
        [CLSCompliant(false)]
        public static void VertexAttribPointer(Int32 index, Int32 size, OpenTK.Graphics.ES30.VertexAttribPointerType type, bool normalized, Int32 stride, IntPtr pointer) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Define an array of generic vertex attribute data
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, 4. Additionally, the symbolic constant GL_BGRA is accepted by glVertexAttribPointer. The initial value is 4.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of each component in the array. The symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, and GL_UNSIGNED_INT are accepted by glVertexAttribPointer and glVertexAttribIPointer. Additionally GL_HALF_FLOAT, GL_FLOAT, GL_DOUBLE, GL_FIXED, GL_INT_2_10_10_10_REV, GL_UNSIGNED_INT_2_10_10_10_REV and GL_UNSIGNED_INT_10F_11F_11F_REV are accepted by glVertexAttribPointer. GL_DOUBLE is also accepted by glVertexAttribLPointer and is the only token accepted by the type parameter for that function. The initial value is GL_FLOAT.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For glVertexAttribPointer, specifies whether fixed-point data values should be normalized (GL_TRUE) or converted directly as fixed-point values (GL_FALSE) when they are accessed.
        /// </para>
        /// </param>
        /// <param name="stride">
        /// <para>
        /// Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
        /// </para>
        /// </param>
        /// <param name="pointer">
        /// <para>
        /// Specifies a offset of the first component of the first generic vertex attribute in the array in the data store of the buffer currently bound to the GL_ARRAY_BUFFER target. The initial value is 0.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttribPointer")]
        [CLSCompliant(false)]
        public static void VertexAttribPointer<T5>(Int32 index, Int32 size, OpenTK.Graphics.ES30.VertexAttribPointerType type, bool normalized, Int32 stride, [InAttribute, OutAttribute] T5[] pointer)
            where T5 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Define an array of generic vertex attribute data
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, 4. Additionally, the symbolic constant GL_BGRA is accepted by glVertexAttribPointer. The initial value is 4.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of each component in the array. The symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, and GL_UNSIGNED_INT are accepted by glVertexAttribPointer and glVertexAttribIPointer. Additionally GL_HALF_FLOAT, GL_FLOAT, GL_DOUBLE, GL_FIXED, GL_INT_2_10_10_10_REV, GL_UNSIGNED_INT_2_10_10_10_REV and GL_UNSIGNED_INT_10F_11F_11F_REV are accepted by glVertexAttribPointer. GL_DOUBLE is also accepted by glVertexAttribLPointer and is the only token accepted by the type parameter for that function. The initial value is GL_FLOAT.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For glVertexAttribPointer, specifies whether fixed-point data values should be normalized (GL_TRUE) or converted directly as fixed-point values (GL_FALSE) when they are accessed.
        /// </para>
        /// </param>
        /// <param name="stride">
        /// <para>
        /// Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
        /// </para>
        /// </param>
        /// <param name="pointer">
        /// <para>
        /// Specifies a offset of the first component of the first generic vertex attribute in the array in the data store of the buffer currently bound to the GL_ARRAY_BUFFER target. The initial value is 0.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttribPointer")]
        [CLSCompliant(false)]
        public static void VertexAttribPointer<T5>(Int32 index, Int32 size, OpenTK.Graphics.ES30.VertexAttribPointerType type, bool normalized, Int32 stride, [InAttribute, OutAttribute] T5[,] pointer)
            where T5 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Define an array of generic vertex attribute data
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, 4. Additionally, the symbolic constant GL_BGRA is accepted by glVertexAttribPointer. The initial value is 4.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of each component in the array. The symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, and GL_UNSIGNED_INT are accepted by glVertexAttribPointer and glVertexAttribIPointer. Additionally GL_HALF_FLOAT, GL_FLOAT, GL_DOUBLE, GL_FIXED, GL_INT_2_10_10_10_REV, GL_UNSIGNED_INT_2_10_10_10_REV and GL_UNSIGNED_INT_10F_11F_11F_REV are accepted by glVertexAttribPointer. GL_DOUBLE is also accepted by glVertexAttribLPointer and is the only token accepted by the type parameter for that function. The initial value is GL_FLOAT.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For glVertexAttribPointer, specifies whether fixed-point data values should be normalized (GL_TRUE) or converted directly as fixed-point values (GL_FALSE) when they are accessed.
        /// </para>
        /// </param>
        /// <param name="stride">
        /// <para>
        /// Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
        /// </para>
        /// </param>
        /// <param name="pointer">
        /// <para>
        /// Specifies a offset of the first component of the first generic vertex attribute in the array in the data store of the buffer currently bound to the GL_ARRAY_BUFFER target. The initial value is 0.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttribPointer")]
        [CLSCompliant(false)]
        public static void VertexAttribPointer<T5>(Int32 index, Int32 size, OpenTK.Graphics.ES30.VertexAttribPointerType type, bool normalized, Int32 stride, [InAttribute, OutAttribute] T5[,,] pointer)
            where T5 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Define an array of generic vertex attribute data
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, 4. Additionally, the symbolic constant GL_BGRA is accepted by glVertexAttribPointer. The initial value is 4.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of each component in the array. The symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, and GL_UNSIGNED_INT are accepted by glVertexAttribPointer and glVertexAttribIPointer. Additionally GL_HALF_FLOAT, GL_FLOAT, GL_DOUBLE, GL_FIXED, GL_INT_2_10_10_10_REV, GL_UNSIGNED_INT_2_10_10_10_REV and GL_UNSIGNED_INT_10F_11F_11F_REV are accepted by glVertexAttribPointer. GL_DOUBLE is also accepted by glVertexAttribLPointer and is the only token accepted by the type parameter for that function. The initial value is GL_FLOAT.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For glVertexAttribPointer, specifies whether fixed-point data values should be normalized (GL_TRUE) or converted directly as fixed-point values (GL_FALSE) when they are accessed.
        /// </para>
        /// </param>
        /// <param name="stride">
        /// <para>
        /// Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
        /// </para>
        /// </param>
        /// <param name="pointer">
        /// <para>
        /// Specifies a offset of the first component of the first generic vertex attribute in the array in the data store of the buffer currently bound to the GL_ARRAY_BUFFER target. The initial value is 0.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttribPointer")]
        [CLSCompliant(false)]
        public static void VertexAttribPointer<T5>(Int32 index, Int32 size, OpenTK.Graphics.ES30.VertexAttribPointerType type, bool normalized, Int32 stride, [InAttribute, OutAttribute] ref T5 pointer)
            where T5 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Define an array of generic vertex attribute data
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, 4. Additionally, the symbolic constant GL_BGRA is accepted by glVertexAttribPointer. The initial value is 4.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of each component in the array. The symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, and GL_UNSIGNED_INT are accepted by glVertexAttribPointer and glVertexAttribIPointer. Additionally GL_HALF_FLOAT, GL_FLOAT, GL_DOUBLE, GL_FIXED, GL_INT_2_10_10_10_REV, GL_UNSIGNED_INT_2_10_10_10_REV and GL_UNSIGNED_INT_10F_11F_11F_REV are accepted by glVertexAttribPointer. GL_DOUBLE is also accepted by glVertexAttribLPointer and is the only token accepted by the type parameter for that function. The initial value is GL_FLOAT.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For glVertexAttribPointer, specifies whether fixed-point data values should be normalized (GL_TRUE) or converted directly as fixed-point values (GL_FALSE) when they are accessed.
        /// </para>
        /// </param>
        /// <param name="stride">
        /// <para>
        /// Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
        /// </para>
        /// </param>
        /// <param name="pointer">
        /// <para>
        /// Specifies a offset of the first component of the first generic vertex attribute in the array in the data store of the buffer currently bound to the GL_ARRAY_BUFFER target. The initial value is 0.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttribPointer")]
        [CLSCompliant(false)]
        public static void VertexAttribPointer(UInt32 index, Int32 size, OpenTK.Graphics.ES30.All type, bool normalized, Int32 stride, IntPtr pointer) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Define an array of generic vertex attribute data
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, 4. Additionally, the symbolic constant GL_BGRA is accepted by glVertexAttribPointer. The initial value is 4.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of each component in the array. The symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, and GL_UNSIGNED_INT are accepted by glVertexAttribPointer and glVertexAttribIPointer. Additionally GL_HALF_FLOAT, GL_FLOAT, GL_DOUBLE, GL_FIXED, GL_INT_2_10_10_10_REV, GL_UNSIGNED_INT_2_10_10_10_REV and GL_UNSIGNED_INT_10F_11F_11F_REV are accepted by glVertexAttribPointer. GL_DOUBLE is also accepted by glVertexAttribLPointer and is the only token accepted by the type parameter for that function. The initial value is GL_FLOAT.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For glVertexAttribPointer, specifies whether fixed-point data values should be normalized (GL_TRUE) or converted directly as fixed-point values (GL_FALSE) when they are accessed.
        /// </para>
        /// </param>
        /// <param name="stride">
        /// <para>
        /// Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
        /// </para>
        /// </param>
        /// <param name="pointer">
        /// <para>
        /// Specifies a offset of the first component of the first generic vertex attribute in the array in the data store of the buffer currently bound to the GL_ARRAY_BUFFER target. The initial value is 0.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttribPointer")]
        [CLSCompliant(false)]
        public static void VertexAttribPointer<T5>(UInt32 index, Int32 size, OpenTK.Graphics.ES30.All type, bool normalized, Int32 stride, [InAttribute, OutAttribute] T5[] pointer)
            where T5 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Define an array of generic vertex attribute data
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, 4. Additionally, the symbolic constant GL_BGRA is accepted by glVertexAttribPointer. The initial value is 4.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of each component in the array. The symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, and GL_UNSIGNED_INT are accepted by glVertexAttribPointer and glVertexAttribIPointer. Additionally GL_HALF_FLOAT, GL_FLOAT, GL_DOUBLE, GL_FIXED, GL_INT_2_10_10_10_REV, GL_UNSIGNED_INT_2_10_10_10_REV and GL_UNSIGNED_INT_10F_11F_11F_REV are accepted by glVertexAttribPointer. GL_DOUBLE is also accepted by glVertexAttribLPointer and is the only token accepted by the type parameter for that function. The initial value is GL_FLOAT.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For glVertexAttribPointer, specifies whether fixed-point data values should be normalized (GL_TRUE) or converted directly as fixed-point values (GL_FALSE) when they are accessed.
        /// </para>
        /// </param>
        /// <param name="stride">
        /// <para>
        /// Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
        /// </para>
        /// </param>
        /// <param name="pointer">
        /// <para>
        /// Specifies a offset of the first component of the first generic vertex attribute in the array in the data store of the buffer currently bound to the GL_ARRAY_BUFFER target. The initial value is 0.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttribPointer")]
        [CLSCompliant(false)]
        public static void VertexAttribPointer<T5>(UInt32 index, Int32 size, OpenTK.Graphics.ES30.All type, bool normalized, Int32 stride, [InAttribute, OutAttribute] T5[,] pointer)
            where T5 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Define an array of generic vertex attribute data
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, 4. Additionally, the symbolic constant GL_BGRA is accepted by glVertexAttribPointer. The initial value is 4.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of each component in the array. The symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, and GL_UNSIGNED_INT are accepted by glVertexAttribPointer and glVertexAttribIPointer. Additionally GL_HALF_FLOAT, GL_FLOAT, GL_DOUBLE, GL_FIXED, GL_INT_2_10_10_10_REV, GL_UNSIGNED_INT_2_10_10_10_REV and GL_UNSIGNED_INT_10F_11F_11F_REV are accepted by glVertexAttribPointer. GL_DOUBLE is also accepted by glVertexAttribLPointer and is the only token accepted by the type parameter for that function. The initial value is GL_FLOAT.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For glVertexAttribPointer, specifies whether fixed-point data values should be normalized (GL_TRUE) or converted directly as fixed-point values (GL_FALSE) when they are accessed.
        /// </para>
        /// </param>
        /// <param name="stride">
        /// <para>
        /// Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
        /// </para>
        /// </param>
        /// <param name="pointer">
        /// <para>
        /// Specifies a offset of the first component of the first generic vertex attribute in the array in the data store of the buffer currently bound to the GL_ARRAY_BUFFER target. The initial value is 0.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttribPointer")]
        [CLSCompliant(false)]
        public static void VertexAttribPointer<T5>(UInt32 index, Int32 size, OpenTK.Graphics.ES30.All type, bool normalized, Int32 stride, [InAttribute, OutAttribute] T5[,,] pointer)
            where T5 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Define an array of generic vertex attribute data
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, 4. Additionally, the symbolic constant GL_BGRA is accepted by glVertexAttribPointer. The initial value is 4.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of each component in the array. The symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, and GL_UNSIGNED_INT are accepted by glVertexAttribPointer and glVertexAttribIPointer. Additionally GL_HALF_FLOAT, GL_FLOAT, GL_DOUBLE, GL_FIXED, GL_INT_2_10_10_10_REV, GL_UNSIGNED_INT_2_10_10_10_REV and GL_UNSIGNED_INT_10F_11F_11F_REV are accepted by glVertexAttribPointer. GL_DOUBLE is also accepted by glVertexAttribLPointer and is the only token accepted by the type parameter for that function. The initial value is GL_FLOAT.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For glVertexAttribPointer, specifies whether fixed-point data values should be normalized (GL_TRUE) or converted directly as fixed-point values (GL_FALSE) when they are accessed.
        /// </para>
        /// </param>
        /// <param name="stride">
        /// <para>
        /// Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
        /// </para>
        /// </param>
        /// <param name="pointer">
        /// <para>
        /// Specifies a offset of the first component of the first generic vertex attribute in the array in the data store of the buffer currently bound to the GL_ARRAY_BUFFER target. The initial value is 0.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttribPointer")]
        [CLSCompliant(false)]
        public static void VertexAttribPointer<T5>(UInt32 index, Int32 size, OpenTK.Graphics.ES30.All type, bool normalized, Int32 stride, [InAttribute, OutAttribute] ref T5 pointer)
            where T5 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Define an array of generic vertex attribute data
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, 4. Additionally, the symbolic constant GL_BGRA is accepted by glVertexAttribPointer. The initial value is 4.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of each component in the array. The symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, and GL_UNSIGNED_INT are accepted by glVertexAttribPointer and glVertexAttribIPointer. Additionally GL_HALF_FLOAT, GL_FLOAT, GL_DOUBLE, GL_FIXED, GL_INT_2_10_10_10_REV, GL_UNSIGNED_INT_2_10_10_10_REV and GL_UNSIGNED_INT_10F_11F_11F_REV are accepted by glVertexAttribPointer. GL_DOUBLE is also accepted by glVertexAttribLPointer and is the only token accepted by the type parameter for that function. The initial value is GL_FLOAT.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For glVertexAttribPointer, specifies whether fixed-point data values should be normalized (GL_TRUE) or converted directly as fixed-point values (GL_FALSE) when they are accessed.
        /// </para>
        /// </param>
        /// <param name="stride">
        /// <para>
        /// Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
        /// </para>
        /// </param>
        /// <param name="pointer">
        /// <para>
        /// Specifies a offset of the first component of the first generic vertex attribute in the array in the data store of the buffer currently bound to the GL_ARRAY_BUFFER target. The initial value is 0.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttribPointer")]
        [CLSCompliant(false)]
        public static void VertexAttribPointer(UInt32 index, Int32 size, OpenTK.Graphics.ES30.VertexAttribPointerType type, bool normalized, Int32 stride, IntPtr pointer) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Define an array of generic vertex attribute data
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, 4. Additionally, the symbolic constant GL_BGRA is accepted by glVertexAttribPointer. The initial value is 4.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of each component in the array. The symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, and GL_UNSIGNED_INT are accepted by glVertexAttribPointer and glVertexAttribIPointer. Additionally GL_HALF_FLOAT, GL_FLOAT, GL_DOUBLE, GL_FIXED, GL_INT_2_10_10_10_REV, GL_UNSIGNED_INT_2_10_10_10_REV and GL_UNSIGNED_INT_10F_11F_11F_REV are accepted by glVertexAttribPointer. GL_DOUBLE is also accepted by glVertexAttribLPointer and is the only token accepted by the type parameter for that function. The initial value is GL_FLOAT.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For glVertexAttribPointer, specifies whether fixed-point data values should be normalized (GL_TRUE) or converted directly as fixed-point values (GL_FALSE) when they are accessed.
        /// </para>
        /// </param>
        /// <param name="stride">
        /// <para>
        /// Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
        /// </para>
        /// </param>
        /// <param name="pointer">
        /// <para>
        /// Specifies a offset of the first component of the first generic vertex attribute in the array in the data store of the buffer currently bound to the GL_ARRAY_BUFFER target. The initial value is 0.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttribPointer")]
        [CLSCompliant(false)]
        public static void VertexAttribPointer<T5>(UInt32 index, Int32 size, OpenTK.Graphics.ES30.VertexAttribPointerType type, bool normalized, Int32 stride, [InAttribute, OutAttribute] T5[] pointer)
            where T5 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Define an array of generic vertex attribute data
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, 4. Additionally, the symbolic constant GL_BGRA is accepted by glVertexAttribPointer. The initial value is 4.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of each component in the array. The symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, and GL_UNSIGNED_INT are accepted by glVertexAttribPointer and glVertexAttribIPointer. Additionally GL_HALF_FLOAT, GL_FLOAT, GL_DOUBLE, GL_FIXED, GL_INT_2_10_10_10_REV, GL_UNSIGNED_INT_2_10_10_10_REV and GL_UNSIGNED_INT_10F_11F_11F_REV are accepted by glVertexAttribPointer. GL_DOUBLE is also accepted by glVertexAttribLPointer and is the only token accepted by the type parameter for that function. The initial value is GL_FLOAT.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For glVertexAttribPointer, specifies whether fixed-point data values should be normalized (GL_TRUE) or converted directly as fixed-point values (GL_FALSE) when they are accessed.
        /// </para>
        /// </param>
        /// <param name="stride">
        /// <para>
        /// Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
        /// </para>
        /// </param>
        /// <param name="pointer">
        /// <para>
        /// Specifies a offset of the first component of the first generic vertex attribute in the array in the data store of the buffer currently bound to the GL_ARRAY_BUFFER target. The initial value is 0.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttribPointer")]
        [CLSCompliant(false)]
        public static void VertexAttribPointer<T5>(UInt32 index, Int32 size, OpenTK.Graphics.ES30.VertexAttribPointerType type, bool normalized, Int32 stride, [InAttribute, OutAttribute] T5[,] pointer)
            where T5 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Define an array of generic vertex attribute data
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, 4. Additionally, the symbolic constant GL_BGRA is accepted by glVertexAttribPointer. The initial value is 4.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of each component in the array. The symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, and GL_UNSIGNED_INT are accepted by glVertexAttribPointer and glVertexAttribIPointer. Additionally GL_HALF_FLOAT, GL_FLOAT, GL_DOUBLE, GL_FIXED, GL_INT_2_10_10_10_REV, GL_UNSIGNED_INT_2_10_10_10_REV and GL_UNSIGNED_INT_10F_11F_11F_REV are accepted by glVertexAttribPointer. GL_DOUBLE is also accepted by glVertexAttribLPointer and is the only token accepted by the type parameter for that function. The initial value is GL_FLOAT.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For glVertexAttribPointer, specifies whether fixed-point data values should be normalized (GL_TRUE) or converted directly as fixed-point values (GL_FALSE) when they are accessed.
        /// </para>
        /// </param>
        /// <param name="stride">
        /// <para>
        /// Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
        /// </para>
        /// </param>
        /// <param name="pointer">
        /// <para>
        /// Specifies a offset of the first component of the first generic vertex attribute in the array in the data store of the buffer currently bound to the GL_ARRAY_BUFFER target. The initial value is 0.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttribPointer")]
        [CLSCompliant(false)]
        public static void VertexAttribPointer<T5>(UInt32 index, Int32 size, OpenTK.Graphics.ES30.VertexAttribPointerType type, bool normalized, Int32 stride, [InAttribute, OutAttribute] T5[,,] pointer)
            where T5 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Define an array of generic vertex attribute data
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, 4. Additionally, the symbolic constant GL_BGRA is accepted by glVertexAttribPointer. The initial value is 4.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of each component in the array. The symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, and GL_UNSIGNED_INT are accepted by glVertexAttribPointer and glVertexAttribIPointer. Additionally GL_HALF_FLOAT, GL_FLOAT, GL_DOUBLE, GL_FIXED, GL_INT_2_10_10_10_REV, GL_UNSIGNED_INT_2_10_10_10_REV and GL_UNSIGNED_INT_10F_11F_11F_REV are accepted by glVertexAttribPointer. GL_DOUBLE is also accepted by glVertexAttribLPointer and is the only token accepted by the type parameter for that function. The initial value is GL_FLOAT.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// For glVertexAttribPointer, specifies whether fixed-point data values should be normalized (GL_TRUE) or converted directly as fixed-point values (GL_FALSE) when they are accessed.
        /// </para>
        /// </param>
        /// <param name="stride">
        /// <para>
        /// Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
        /// </para>
        /// </param>
        /// <param name="pointer">
        /// <para>
        /// Specifies a offset of the first component of the first generic vertex attribute in the array in the data store of the buffer currently bound to the GL_ARRAY_BUFFER target. The initial value is 0.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttribPointer")]
        [CLSCompliant(false)]
        public static void VertexAttribPointer<T5>(UInt32 index, Int32 size, OpenTK.Graphics.ES30.VertexAttribPointerType type, bool normalized, Int32 stride, [InAttribute, OutAttribute] ref T5 pointer)
            where T5 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 and ES_VERSION_2_0]
        /// Set the viewport
        /// </summary>
        /// <param name="x">
        /// <para>
        /// Specify the lower left corner of the viewport rectangle, in pixels. The initial value is (0,0).
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specify the width and height of the viewport. When a GL context is first attached to a window, width and height are set to the dimensions of that window.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glViewport")]
        public static void Viewport(Int32 x, Int32 y, Int32 width, Int32 height) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Instruct the GL server to block until the specified sync object becomes signaled
        /// </summary>
        /// <param name="sync">
        /// <para>
        /// Specifies the sync object whose status to wait on.
        /// </para>
        /// </param>
        /// <param name="flags">
        /// <para>
        /// A bitfield controlling the command flushing behavior. flags may be zero.
        /// </para>
        /// </param>
        /// <param name="timeout">
        /// <para>
        /// Specifies the timeout that the server should wait before continuing. timeout must be GL_TIMEOUT_IGNORED.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glWaitSync")]
        [CLSCompliant(false)]
        public static void WaitSync(IntPtr sync, OpenTK.Graphics.ES30.All flags, Int64 timeout) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Instruct the GL server to block until the specified sync object becomes signaled
        /// </summary>
        /// <param name="sync">
        /// <para>
        /// Specifies the sync object whose status to wait on.
        /// </para>
        /// </param>
        /// <param name="flags">
        /// <para>
        /// A bitfield controlling the command flushing behavior. flags may be zero.
        /// </para>
        /// </param>
        /// <param name="timeout">
        /// <para>
        /// Specifies the timeout that the server should wait before continuing. timeout must be GL_TIMEOUT_IGNORED.
        /// </para>
        /// </param>
        [Obsolete("Use strongly-typed overload instead")]
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glWaitSync")]
        [CLSCompliant(false)]
        public static void WaitSync(IntPtr sync, OpenTK.Graphics.ES30.All flags, UInt64 timeout) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Instruct the GL server to block until the specified sync object becomes signaled
        /// </summary>
        /// <param name="sync">
        /// <para>
        /// Specifies the sync object whose status to wait on.
        /// </para>
        /// </param>
        /// <param name="flags">
        /// <para>
        /// A bitfield controlling the command flushing behavior. flags may be zero.
        /// </para>
        /// </param>
        /// <param name="timeout">
        /// <para>
        /// Specifies the timeout that the server should wait before continuing. timeout must be GL_TIMEOUT_IGNORED.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glWaitSync")]
        [CLSCompliant(false)]
        public static void WaitSync(IntPtr sync, OpenTK.Graphics.ES30.WaitSyncFlags flags, Int64 timeout) { throw new NotImplementedException(); }

        /// <summary>[requires: v3.0 and ES_VERSION_3_0]
        /// Instruct the GL server to block until the specified sync object becomes signaled
        /// </summary>
        /// <param name="sync">
        /// <para>
        /// Specifies the sync object whose status to wait on.
        /// </para>
        /// </param>
        /// <param name="flags">
        /// <para>
        /// A bitfield controlling the command flushing behavior. flags may be zero.
        /// </para>
        /// </param>
        /// <param name="timeout">
        /// <para>
        /// Specifies the timeout that the server should wait before continuing. timeout must be GL_TIMEOUT_IGNORED.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_3_0", Version = "3.0", EntryPoint = "glWaitSync")]
        [CLSCompliant(false)]
        public static void WaitSync(IntPtr sync, OpenTK.Graphics.ES30.WaitSyncFlags flags, UInt64 timeout) { throw new NotImplementedException(); }

        public static partial class Ext
        {
            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glActiveProgramEXT")]
            [CLSCompliant(false)]
            public static void ActiveProgram(Int32 program) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glActiveProgramEXT")]
            [CLSCompliant(false)]
            public static void ActiveProgram(UInt32 program) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Set the active program object for a program pipeline object
            /// </summary>
            /// <param name="pipeline">
            /// <para>
            /// Specifies the program pipeline object to set the active program object for.
            /// </para>
            /// </param>
            /// <param name="program">
            /// <para>
            /// Specifies the program object to set as the active program pipeline object pipeline.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glActiveShaderProgramEXT")]
            [CLSCompliant(false)]
            public static void ActiveShaderProgram(Int32 pipeline, Int32 program) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Set the active program object for a program pipeline object
            /// </summary>
            /// <param name="pipeline">
            /// <para>
            /// Specifies the program pipeline object to set the active program object for.
            /// </para>
            /// </param>
            /// <param name="program">
            /// <para>
            /// Specifies the program object to set as the active program pipeline object pipeline.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glActiveShaderProgramEXT")]
            [CLSCompliant(false)]
            public static void ActiveShaderProgram(UInt32 pipeline, UInt32 program) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_disjoint_timer_query|EXT_occlusion_query_boolean]
            /// Delimit the boundaries of a query object
            /// </summary>
            /// <param name="target">
            /// <para>
            /// Specifies the target type of query object established between glBeginQuery and the subsequent glEndQuery. The symbolic constant must be one of GL_SAMPLES_PASSED, GL_ANY_SAMPLES_PASSED, GL_ANY_SAMPLES_PASSED_CONSERVATIVE, GL_PRIMITIVES_GENERATED, GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN, or GL_TIME_ELAPSED.
            /// </para>
            /// </param>
            /// <param name="id">
            /// <para>
            /// Specifies the name of a query object.
            /// </para>
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_disjoint_timer_query|EXT_occlusion_query_boolean", Version = "", EntryPoint = "glBeginQueryEXT")]
            [CLSCompliant(false)]
            public static void BeginQuery(OpenTK.Graphics.ES30.All target, Int32 id) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_disjoint_timer_query|EXT_occlusion_query_boolean]
            /// Delimit the boundaries of a query object
            /// </summary>
            /// <param name="target">
            /// <para>
            /// Specifies the target type of query object established between glBeginQuery and the subsequent glEndQuery. The symbolic constant must be one of GL_SAMPLES_PASSED, GL_ANY_SAMPLES_PASSED, GL_ANY_SAMPLES_PASSED_CONSERVATIVE, GL_PRIMITIVES_GENERATED, GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN, or GL_TIME_ELAPSED.
            /// </para>
            /// </param>
            /// <param name="id">
            /// <para>
            /// Specifies the name of a query object.
            /// </para>
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_disjoint_timer_query|EXT_occlusion_query_boolean", Version = "", EntryPoint = "glBeginQueryEXT")]
            [CLSCompliant(false)]
            public static void BeginQuery(OpenTK.Graphics.ES30.All target, UInt32 id) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_disjoint_timer_query|EXT_occlusion_query_boolean]
            /// Delimit the boundaries of a query object
            /// </summary>
            /// <param name="target">
            /// <para>
            /// Specifies the target type of query object established between glBeginQuery and the subsequent glEndQuery. The symbolic constant must be one of GL_SAMPLES_PASSED, GL_ANY_SAMPLES_PASSED, GL_ANY_SAMPLES_PASSED_CONSERVATIVE, GL_PRIMITIVES_GENERATED, GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN, or GL_TIME_ELAPSED.
            /// </para>
            /// </param>
            /// <param name="id">
            /// <para>
            /// Specifies the name of a query object.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_disjoint_timer_query|EXT_occlusion_query_boolean", Version = "", EntryPoint = "glBeginQueryEXT")]
            [CLSCompliant(false)]
            public static void BeginQuery(OpenTK.Graphics.ES30.QueryTarget target, Int32 id) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_disjoint_timer_query|EXT_occlusion_query_boolean]
            /// Delimit the boundaries of a query object
            /// </summary>
            /// <param name="target">
            /// <para>
            /// Specifies the target type of query object established between glBeginQuery and the subsequent glEndQuery. The symbolic constant must be one of GL_SAMPLES_PASSED, GL_ANY_SAMPLES_PASSED, GL_ANY_SAMPLES_PASSED_CONSERVATIVE, GL_PRIMITIVES_GENERATED, GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN, or GL_TIME_ELAPSED.
            /// </para>
            /// </param>
            /// <param name="id">
            /// <para>
            /// Specifies the name of a query object.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_disjoint_timer_query|EXT_occlusion_query_boolean", Version = "", EntryPoint = "glBeginQueryEXT")]
            [CLSCompliant(false)]
            public static void BeginQuery(OpenTK.Graphics.ES30.QueryTarget target, UInt32 id) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Bind a program pipeline to the current context
            /// </summary>
            /// <param name="pipeline">
            /// <para>
            /// Specifies the name of the pipeline object to bind to the context.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glBindProgramPipelineEXT")]
            [CLSCompliant(false)]
            public static void BindProgramPipeline(Int32 pipeline) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Bind a program pipeline to the current context
            /// </summary>
            /// <param name="pipeline">
            /// <para>
            /// Specifies the name of the pipeline object to bind to the context.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glBindProgramPipelineEXT")]
            [CLSCompliant(false)]
            public static void BindProgramPipeline(UInt32 pipeline) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_blend_minmax]
            /// Specify the equation used for both the RGB blend equation and the Alpha blend equation
            /// </summary>
            /// <param name="buf">
            /// <para>
            /// for glBlendEquationi, specifies the index of the draw buffer for which to set the blend equation.
            /// </para>
            /// </param>
            /// <param name="mode">
            /// <para>
            /// specifies how source and destination colors are combined. It must be GL_FUNC_ADD, GL_FUNC_SUBTRACT, GL_FUNC_REVERSE_SUBTRACT, GL_MIN, GL_MAX.
            /// </para>
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_blend_minmax", Version = "", EntryPoint = "glBlendEquationEXT")]
            public static void BlendEquation(OpenTK.Graphics.ES30.All mode) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_blend_minmax]
            /// Specify the equation used for both the RGB blend equation and the Alpha blend equation
            /// </summary>
            /// <param name="buf">
            /// <para>
            /// for glBlendEquationi, specifies the index of the draw buffer for which to set the blend equation.
            /// </para>
            /// </param>
            /// <param name="mode">
            /// <para>
            /// specifies how source and destination colors are combined. It must be GL_FUNC_ADD, GL_FUNC_SUBTRACT, GL_FUNC_REVERSE_SUBTRACT, GL_MIN, GL_MAX.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_blend_minmax", Version = "", EntryPoint = "glBlendEquationEXT")]
            public static void BlendEquation(OpenTK.Graphics.ES30.BlendEquationMode mode) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Create a stand-alone program from an array of null-terminated source code strings
            /// </summary>
            /// <param name="type">
            /// <para>
            /// Specifies the type of shader to create.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// Specifies the number of source code strings in the array strings.
            /// </para>
            /// </param>
            /// <param name="strings">
            /// <para>
            /// Specifies the address of an array of pointers to source code strings from which to create the program object.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glCreateShaderProgramEXT")]
            public static Int32 CreateShaderProgram(OpenTK.Graphics.ES30.All type, String @string) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Create a stand-alone program from an array of null-terminated source code strings
            /// </summary>
            /// <param name="type">
            /// <para>
            /// Specifies the type of shader to create.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// Specifies the number of source code strings in the array strings.
            /// </para>
            /// </param>
            /// <param name="strings">
            /// <para>
            /// Specifies the address of an array of pointers to source code strings from which to create the program object.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glCreateShaderProgramvEXT")]
            public static Int32 CreateShaderProgram(OpenTK.Graphics.ES30.All type, Int32 count, String[] strings) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glDeleteProgramPipelinesEXT")]
            [CLSCompliant(false)]
            public static void DeleteProgramPipeline(Int32 pipelines) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glDeleteProgramPipelinesEXT")]
            [CLSCompliant(false)]
            public static void DeleteProgramPipeline(UInt32 pipelines) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Delete program pipeline objects
            /// </summary>
            /// <param name="n">
            /// <para>
            /// Specifies the number of program pipeline objects to delete.
            /// </para>
            /// </param>
            /// <param name="pipelines">
            /// <para>
            /// Specifies an array of names of program pipeline objects to delete.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glDeleteProgramPipelinesEXT")]
            [CLSCompliant(false)]
            public static void DeleteProgramPipelines(Int32 n, Int32[] pipelines) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Delete program pipeline objects
            /// </summary>
            /// <param name="n">
            /// <para>
            /// Specifies the number of program pipeline objects to delete.
            /// </para>
            /// </param>
            /// <param name="pipelines">
            /// <para>
            /// Specifies an array of names of program pipeline objects to delete.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glDeleteProgramPipelinesEXT")]
            [CLSCompliant(false)]
            public static void DeleteProgramPipelines(Int32 n, ref Int32 pipelines) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Delete program pipeline objects
            /// </summary>
            /// <param name="n">
            /// <para>
            /// Specifies the number of program pipeline objects to delete.
            /// </para>
            /// </param>
            /// <param name="pipelines">
            /// <para>
            /// Specifies an array of names of program pipeline objects to delete.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glDeleteProgramPipelinesEXT")]
            [CLSCompliant(false)]
            public static unsafe void DeleteProgramPipelines(Int32 n, Int32* pipelines) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Delete program pipeline objects
            /// </summary>
            /// <param name="n">
            /// <para>
            /// Specifies the number of program pipeline objects to delete.
            /// </para>
            /// </param>
            /// <param name="pipelines">
            /// <para>
            /// Specifies an array of names of program pipeline objects to delete.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glDeleteProgramPipelinesEXT")]
            [CLSCompliant(false)]
            public static void DeleteProgramPipelines(Int32 n, UInt32[] pipelines) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Delete program pipeline objects
            /// </summary>
            /// <param name="n">
            /// <para>
            /// Specifies the number of program pipeline objects to delete.
            /// </para>
            /// </param>
            /// <param name="pipelines">
            /// <para>
            /// Specifies an array of names of program pipeline objects to delete.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glDeleteProgramPipelinesEXT")]
            [CLSCompliant(false)]
            public static void DeleteProgramPipelines(Int32 n, ref UInt32 pipelines) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Delete program pipeline objects
            /// </summary>
            /// <param name="n">
            /// <para>
            /// Specifies the number of program pipeline objects to delete.
            /// </para>
            /// </param>
            /// <param name="pipelines">
            /// <para>
            /// Specifies an array of names of program pipeline objects to delete.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glDeleteProgramPipelinesEXT")]
            [CLSCompliant(false)]
            public static unsafe void DeleteProgramPipelines(Int32 n, UInt32* pipelines) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_disjoint_timer_query|EXT_occlusion_query_boolean]</summary>
            [AutoGenerated(Category = "EXT_disjoint_timer_query|EXT_occlusion_query_boolean", Version = "", EntryPoint = "glDeleteQueriesEXT")]
            [CLSCompliant(false)]
            public static void DeleteQuery(Int32 ids) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_disjoint_timer_query|EXT_occlusion_query_boolean]</summary>
            [AutoGenerated(Category = "EXT_disjoint_timer_query|EXT_occlusion_query_boolean", Version = "", EntryPoint = "glDeleteQueriesEXT")]
            [CLSCompliant(false)]
            public static void DeleteQuery(UInt32 ids) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_disjoint_timer_query|EXT_occlusion_query_boolean]
            /// Delete named query objects
            /// </summary>
            /// <param name="n">
            /// <para>
            /// Specifies the number of query objects to be deleted.
            /// </para>
            /// </param>
            /// <param name="ids">
            /// <para>
            /// Specifies an array of query objects to be deleted.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_disjoint_timer_query|EXT_occlusion_query_boolean", Version = "", EntryPoint = "glDeleteQueriesEXT")]
            [CLSCompliant(false)]
            public static void DeleteQueries(Int32 n, Int32[] ids) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_disjoint_timer_query|EXT_occlusion_query_boolean]
            /// Delete named query objects
            /// </summary>
            /// <param name="n">
            /// <para>
            /// Specifies the number of query objects to be deleted.
            /// </para>
            /// </param>
            /// <param name="ids">
            /// <para>
            /// Specifies an array of query objects to be deleted.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_disjoint_timer_query|EXT_occlusion_query_boolean", Version = "", EntryPoint = "glDeleteQueriesEXT")]
            [CLSCompliant(false)]
            public static void DeleteQueries(Int32 n, ref Int32 ids) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_disjoint_timer_query|EXT_occlusion_query_boolean]
            /// Delete named query objects
            /// </summary>
            /// <param name="n">
            /// <para>
            /// Specifies the number of query objects to be deleted.
            /// </para>
            /// </param>
            /// <param name="ids">
            /// <para>
            /// Specifies an array of query objects to be deleted.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_disjoint_timer_query|EXT_occlusion_query_boolean", Version = "", EntryPoint = "glDeleteQueriesEXT")]
            [CLSCompliant(false)]
            public static unsafe void DeleteQueries(Int32 n, Int32* ids) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_disjoint_timer_query|EXT_occlusion_query_boolean]
            /// Delete named query objects
            /// </summary>
            /// <param name="n">
            /// <para>
            /// Specifies the number of query objects to be deleted.
            /// </para>
            /// </param>
            /// <param name="ids">
            /// <para>
            /// Specifies an array of query objects to be deleted.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_disjoint_timer_query|EXT_occlusion_query_boolean", Version = "", EntryPoint = "glDeleteQueriesEXT")]
            [CLSCompliant(false)]
            public static void DeleteQueries(Int32 n, UInt32[] ids) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_disjoint_timer_query|EXT_occlusion_query_boolean]
            /// Delete named query objects
            /// </summary>
            /// <param name="n">
            /// <para>
            /// Specifies the number of query objects to be deleted.
            /// </para>
            /// </param>
            /// <param name="ids">
            /// <para>
            /// Specifies an array of query objects to be deleted.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_disjoint_timer_query|EXT_occlusion_query_boolean", Version = "", EntryPoint = "glDeleteQueriesEXT")]
            [CLSCompliant(false)]
            public static void DeleteQueries(Int32 n, ref UInt32 ids) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_disjoint_timer_query|EXT_occlusion_query_boolean]
            /// Delete named query objects
            /// </summary>
            /// <param name="n">
            /// <para>
            /// Specifies the number of query objects to be deleted.
            /// </para>
            /// </param>
            /// <param name="ids">
            /// <para>
            /// Specifies an array of query objects to be deleted.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_disjoint_timer_query|EXT_occlusion_query_boolean", Version = "", EntryPoint = "glDeleteQueriesEXT")]
            [CLSCompliant(false)]
            public static unsafe void DeleteQueries(Int32 n, UInt32* ids) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_discard_framebuffer]</summary>
            [AutoGenerated(Category = "EXT_discard_framebuffer", Version = "", EntryPoint = "glDiscardFramebufferEXT")]
            [CLSCompliant(false)]
            public static void DiscardFramebuffer(OpenTK.Graphics.ES30.All target, Int32 numAttachments, OpenTK.Graphics.ES30.All[] attachments) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_discard_framebuffer]</summary>
            [AutoGenerated(Category = "EXT_discard_framebuffer", Version = "", EntryPoint = "glDiscardFramebufferEXT")]
            [CLSCompliant(false)]
            public static void DiscardFramebuffer(OpenTK.Graphics.ES30.All target, Int32 numAttachments, ref OpenTK.Graphics.ES30.All attachments) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_discard_framebuffer]</summary>
            [AutoGenerated(Category = "EXT_discard_framebuffer", Version = "", EntryPoint = "glDiscardFramebufferEXT")]
            [CLSCompliant(false)]
            public static unsafe void DiscardFramebuffer(OpenTK.Graphics.ES30.All target, Int32 numAttachments, OpenTK.Graphics.ES30.All* attachments) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_draw_instanced|EXT_instanced_arrays]
            /// Draw multiple instances of a range of elements
            /// </summary>
            /// <param name="mode">
            /// <para>
            /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES GL_LINES_ADJACENCY, GL_LINE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY, GL_TRIANGLE_STRIP_ADJACENCY and GL_PATCHES are accepted.
            /// </para>
            /// </param>
            /// <param name="first">
            /// <para>
            /// Specifies the starting index in the enabled arrays.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// Specifies the number of indices to be rendered.
            /// </para>
            /// </param>
            /// <param name="primcount">
            /// <para>
            /// Specifies the number of instances of the specified range of indices to be rendered.
            /// </para>
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_draw_instanced|EXT_instanced_arrays", Version = "", EntryPoint = "glDrawArraysInstancedEXT")]
            public static void DrawArraysInstanced(OpenTK.Graphics.ES30.All mode, Int32 start, Int32 count, Int32 primcount) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_draw_instanced|EXT_instanced_arrays]
            /// Draw multiple instances of a range of elements
            /// </summary>
            /// <param name="mode">
            /// <para>
            /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES GL_LINES_ADJACENCY, GL_LINE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY, GL_TRIANGLE_STRIP_ADJACENCY and GL_PATCHES are accepted.
            /// </para>
            /// </param>
            /// <param name="first">
            /// <para>
            /// Specifies the starting index in the enabled arrays.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// Specifies the number of indices to be rendered.
            /// </para>
            /// </param>
            /// <param name="primcount">
            /// <para>
            /// Specifies the number of instances of the specified range of indices to be rendered.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_draw_instanced|EXT_instanced_arrays", Version = "", EntryPoint = "glDrawArraysInstancedEXT")]
            public static void DrawArraysInstanced(OpenTK.Graphics.ES30.PrimitiveType mode, Int32 start, Int32 count, Int32 primcount) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_draw_buffers]
            /// Specifies a list of color buffers to be drawn into
            /// </summary>
            /// <param name="n">
            /// <para>
            /// Specifies the number of buffers in bufs.
            /// </para>
            /// </param>
            /// <param name="bufs">
            /// <para>
            /// Points to an array of symbolic constants specifying the buffers into which fragment colors or data values will be written.
            /// </para>
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_draw_buffers", Version = "", EntryPoint = "glDrawBuffersEXT")]
            [CLSCompliant(false)]
            public static void DrawBuffers(Int32 n, OpenTK.Graphics.ES30.All[] bufs) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_draw_buffers]
            /// Specifies a list of color buffers to be drawn into
            /// </summary>
            /// <param name="n">
            /// <para>
            /// Specifies the number of buffers in bufs.
            /// </para>
            /// </param>
            /// <param name="bufs">
            /// <para>
            /// Points to an array of symbolic constants specifying the buffers into which fragment colors or data values will be written.
            /// </para>
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_draw_buffers", Version = "", EntryPoint = "glDrawBuffersEXT")]
            [CLSCompliant(false)]
            public static void DrawBuffers(Int32 n, ref OpenTK.Graphics.ES30.All bufs) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_draw_buffers]
            /// Specifies a list of color buffers to be drawn into
            /// </summary>
            /// <param name="n">
            /// <para>
            /// Specifies the number of buffers in bufs.
            /// </para>
            /// </param>
            /// <param name="bufs">
            /// <para>
            /// Points to an array of symbolic constants specifying the buffers into which fragment colors or data values will be written.
            /// </para>
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_draw_buffers", Version = "", EntryPoint = "glDrawBuffersEXT")]
            [CLSCompliant(false)]
            public static unsafe void DrawBuffers(Int32 n, OpenTK.Graphics.ES30.All* bufs) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_draw_buffers]
            /// Specifies a list of color buffers to be drawn into
            /// </summary>
            /// <param name="n">
            /// <para>
            /// Specifies the number of buffers in bufs.
            /// </para>
            /// </param>
            /// <param name="bufs">
            /// <para>
            /// Points to an array of symbolic constants specifying the buffers into which fragment colors or data values will be written.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_draw_buffers", Version = "", EntryPoint = "glDrawBuffersEXT")]
            [CLSCompliant(false)]
            public static void DrawBuffers(Int32 n, OpenTK.Graphics.ES30.DrawBufferMode[] bufs) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_draw_buffers]
            /// Specifies a list of color buffers to be drawn into
            /// </summary>
            /// <param name="n">
            /// <para>
            /// Specifies the number of buffers in bufs.
            /// </para>
            /// </param>
            /// <param name="bufs">
            /// <para>
            /// Points to an array of symbolic constants specifying the buffers into which fragment colors or data values will be written.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_draw_buffers", Version = "", EntryPoint = "glDrawBuffersEXT")]
            [CLSCompliant(false)]
            public static void DrawBuffers(Int32 n, ref OpenTK.Graphics.ES30.DrawBufferMode bufs) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_draw_buffers]
            /// Specifies a list of color buffers to be drawn into
            /// </summary>
            /// <param name="n">
            /// <para>
            /// Specifies the number of buffers in bufs.
            /// </para>
            /// </param>
            /// <param name="bufs">
            /// <para>
            /// Points to an array of symbolic constants specifying the buffers into which fragment colors or data values will be written.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_draw_buffers", Version = "", EntryPoint = "glDrawBuffersEXT")]
            [CLSCompliant(false)]
            public static unsafe void DrawBuffers(Int32 n, OpenTK.Graphics.ES30.DrawBufferMode* bufs) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_multiview_draw_buffers]</summary>
            [AutoGenerated(Category = "EXT_multiview_draw_buffers", Version = "", EntryPoint = "glDrawBuffersIndexedEXT")]
            [CLSCompliant(false)]
            public static void DrawBuffersIndexed(Int32 n, OpenTK.Graphics.ES30.All[] location, Int32[] indices) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_multiview_draw_buffers]</summary>
            [AutoGenerated(Category = "EXT_multiview_draw_buffers", Version = "", EntryPoint = "glDrawBuffersIndexedEXT")]
            [CLSCompliant(false)]
            public static void DrawBuffersIndexed(Int32 n, ref OpenTK.Graphics.ES30.All location, ref Int32 indices) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_multiview_draw_buffers]</summary>
            [AutoGenerated(Category = "EXT_multiview_draw_buffers", Version = "", EntryPoint = "glDrawBuffersIndexedEXT")]
            [CLSCompliant(false)]
            public static unsafe void DrawBuffersIndexed(Int32 n, OpenTK.Graphics.ES30.All* location, Int32* indices) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_draw_instanced|EXT_instanced_arrays]
            /// Draw multiple instances of a set of elements
            /// </summary>
            /// <param name="mode">
            /// <para>
            /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// Specifies the number of elements to be rendered.
            /// </para>
            /// </param>
            /// <param name="type">
            /// <para>
            /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
            /// </para>
            /// </param>
            /// <param name="indices">
            /// <para>
            /// Specifies a pointer to the location where the indices are stored.
            /// </para>
            /// </param>
            /// <param name="primcount">
            /// <para>
            /// Specifies the number of instances of the specified range of indices to be rendered.
            /// </para>
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_draw_instanced|EXT_instanced_arrays", Version = "", EntryPoint = "glDrawElementsInstancedEXT")]
            public static void DrawElementsInstanced(OpenTK.Graphics.ES30.All mode, Int32 count, OpenTK.Graphics.ES30.All type, IntPtr indices, Int32 primcount) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_draw_instanced|EXT_instanced_arrays]
            /// Draw multiple instances of a set of elements
            /// </summary>
            /// <param name="mode">
            /// <para>
            /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// Specifies the number of elements to be rendered.
            /// </para>
            /// </param>
            /// <param name="type">
            /// <para>
            /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
            /// </para>
            /// </param>
            /// <param name="indices">
            /// <para>
            /// Specifies a pointer to the location where the indices are stored.
            /// </para>
            /// </param>
            /// <param name="primcount">
            /// <para>
            /// Specifies the number of instances of the specified range of indices to be rendered.
            /// </para>
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_draw_instanced|EXT_instanced_arrays", Version = "", EntryPoint = "glDrawElementsInstancedEXT")]
            [CLSCompliant(false)]
            public static void DrawElementsInstanced<T3>(OpenTK.Graphics.ES30.All mode, Int32 count, OpenTK.Graphics.ES30.All type, [InAttribute, OutAttribute] T3[] indices, Int32 primcount)
                where T3 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_draw_instanced|EXT_instanced_arrays]
            /// Draw multiple instances of a set of elements
            /// </summary>
            /// <param name="mode">
            /// <para>
            /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// Specifies the number of elements to be rendered.
            /// </para>
            /// </param>
            /// <param name="type">
            /// <para>
            /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
            /// </para>
            /// </param>
            /// <param name="indices">
            /// <para>
            /// Specifies a pointer to the location where the indices are stored.
            /// </para>
            /// </param>
            /// <param name="primcount">
            /// <para>
            /// Specifies the number of instances of the specified range of indices to be rendered.
            /// </para>
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_draw_instanced|EXT_instanced_arrays", Version = "", EntryPoint = "glDrawElementsInstancedEXT")]
            [CLSCompliant(false)]
            public static void DrawElementsInstanced<T3>(OpenTK.Graphics.ES30.All mode, Int32 count, OpenTK.Graphics.ES30.All type, [InAttribute, OutAttribute] T3[,] indices, Int32 primcount)
                where T3 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_draw_instanced|EXT_instanced_arrays]
            /// Draw multiple instances of a set of elements
            /// </summary>
            /// <param name="mode">
            /// <para>
            /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// Specifies the number of elements to be rendered.
            /// </para>
            /// </param>
            /// <param name="type">
            /// <para>
            /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
            /// </para>
            /// </param>
            /// <param name="indices">
            /// <para>
            /// Specifies a pointer to the location where the indices are stored.
            /// </para>
            /// </param>
            /// <param name="primcount">
            /// <para>
            /// Specifies the number of instances of the specified range of indices to be rendered.
            /// </para>
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_draw_instanced|EXT_instanced_arrays", Version = "", EntryPoint = "glDrawElementsInstancedEXT")]
            [CLSCompliant(false)]
            public static void DrawElementsInstanced<T3>(OpenTK.Graphics.ES30.All mode, Int32 count, OpenTK.Graphics.ES30.All type, [InAttribute, OutAttribute] T3[,,] indices, Int32 primcount)
                where T3 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_draw_instanced|EXT_instanced_arrays]
            /// Draw multiple instances of a set of elements
            /// </summary>
            /// <param name="mode">
            /// <para>
            /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// Specifies the number of elements to be rendered.
            /// </para>
            /// </param>
            /// <param name="type">
            /// <para>
            /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
            /// </para>
            /// </param>
            /// <param name="indices">
            /// <para>
            /// Specifies a pointer to the location where the indices are stored.
            /// </para>
            /// </param>
            /// <param name="primcount">
            /// <para>
            /// Specifies the number of instances of the specified range of indices to be rendered.
            /// </para>
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_draw_instanced|EXT_instanced_arrays", Version = "", EntryPoint = "glDrawElementsInstancedEXT")]
            public static void DrawElementsInstanced<T3>(OpenTK.Graphics.ES30.All mode, Int32 count, OpenTK.Graphics.ES30.All type, [InAttribute, OutAttribute] ref T3 indices, Int32 primcount)
                where T3 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_draw_instanced|EXT_instanced_arrays]
            /// Draw multiple instances of a set of elements
            /// </summary>
            /// <param name="mode">
            /// <para>
            /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// Specifies the number of elements to be rendered.
            /// </para>
            /// </param>
            /// <param name="type">
            /// <para>
            /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
            /// </para>
            /// </param>
            /// <param name="indices">
            /// <para>
            /// Specifies a pointer to the location where the indices are stored.
            /// </para>
            /// </param>
            /// <param name="primcount">
            /// <para>
            /// Specifies the number of instances of the specified range of indices to be rendered.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_draw_instanced|EXT_instanced_arrays", Version = "", EntryPoint = "glDrawElementsInstancedEXT")]
            public static void DrawElementsInstanced(OpenTK.Graphics.ES30.PrimitiveType mode, Int32 count, OpenTK.Graphics.ES30.DrawElementsType type, IntPtr indices, Int32 primcount) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_draw_instanced|EXT_instanced_arrays]
            /// Draw multiple instances of a set of elements
            /// </summary>
            /// <param name="mode">
            /// <para>
            /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// Specifies the number of elements to be rendered.
            /// </para>
            /// </param>
            /// <param name="type">
            /// <para>
            /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
            /// </para>
            /// </param>
            /// <param name="indices">
            /// <para>
            /// Specifies a pointer to the location where the indices are stored.
            /// </para>
            /// </param>
            /// <param name="primcount">
            /// <para>
            /// Specifies the number of instances of the specified range of indices to be rendered.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_draw_instanced|EXT_instanced_arrays", Version = "", EntryPoint = "glDrawElementsInstancedEXT")]
            [CLSCompliant(false)]
            public static void DrawElementsInstanced<T3>(OpenTK.Graphics.ES30.PrimitiveType mode, Int32 count, OpenTK.Graphics.ES30.DrawElementsType type, [InAttribute, OutAttribute] T3[] indices, Int32 primcount)
                where T3 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_draw_instanced|EXT_instanced_arrays]
            /// Draw multiple instances of a set of elements
            /// </summary>
            /// <param name="mode">
            /// <para>
            /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// Specifies the number of elements to be rendered.
            /// </para>
            /// </param>
            /// <param name="type">
            /// <para>
            /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
            /// </para>
            /// </param>
            /// <param name="indices">
            /// <para>
            /// Specifies a pointer to the location where the indices are stored.
            /// </para>
            /// </param>
            /// <param name="primcount">
            /// <para>
            /// Specifies the number of instances of the specified range of indices to be rendered.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_draw_instanced|EXT_instanced_arrays", Version = "", EntryPoint = "glDrawElementsInstancedEXT")]
            [CLSCompliant(false)]
            public static void DrawElementsInstanced<T3>(OpenTK.Graphics.ES30.PrimitiveType mode, Int32 count, OpenTK.Graphics.ES30.DrawElementsType type, [InAttribute, OutAttribute] T3[,] indices, Int32 primcount)
                where T3 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_draw_instanced|EXT_instanced_arrays]
            /// Draw multiple instances of a set of elements
            /// </summary>
            /// <param name="mode">
            /// <para>
            /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// Specifies the number of elements to be rendered.
            /// </para>
            /// </param>
            /// <param name="type">
            /// <para>
            /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
            /// </para>
            /// </param>
            /// <param name="indices">
            /// <para>
            /// Specifies a pointer to the location where the indices are stored.
            /// </para>
            /// </param>
            /// <param name="primcount">
            /// <para>
            /// Specifies the number of instances of the specified range of indices to be rendered.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_draw_instanced|EXT_instanced_arrays", Version = "", EntryPoint = "glDrawElementsInstancedEXT")]
            [CLSCompliant(false)]
            public static void DrawElementsInstanced<T3>(OpenTK.Graphics.ES30.PrimitiveType mode, Int32 count, OpenTK.Graphics.ES30.DrawElementsType type, [InAttribute, OutAttribute] T3[,,] indices, Int32 primcount)
                where T3 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_draw_instanced|EXT_instanced_arrays]
            /// Draw multiple instances of a set of elements
            /// </summary>
            /// <param name="mode">
            /// <para>
            /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// Specifies the number of elements to be rendered.
            /// </para>
            /// </param>
            /// <param name="type">
            /// <para>
            /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
            /// </para>
            /// </param>
            /// <param name="indices">
            /// <para>
            /// Specifies a pointer to the location where the indices are stored.
            /// </para>
            /// </param>
            /// <param name="primcount">
            /// <para>
            /// Specifies the number of instances of the specified range of indices to be rendered.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_draw_instanced|EXT_instanced_arrays", Version = "", EntryPoint = "glDrawElementsInstancedEXT")]
            public static void DrawElementsInstanced<T3>(OpenTK.Graphics.ES30.PrimitiveType mode, Int32 count, OpenTK.Graphics.ES30.DrawElementsType type, [InAttribute, OutAttribute] ref T3 indices, Int32 primcount)
                where T3 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_disjoint_timer_query|EXT_occlusion_query_boolean]</summary>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_disjoint_timer_query|EXT_occlusion_query_boolean", Version = "", EntryPoint = "glEndQueryEXT")]
            public static void EndQuery(OpenTK.Graphics.ES30.All target) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_disjoint_timer_query|EXT_occlusion_query_boolean]</summary>
            [AutoGenerated(Category = "EXT_disjoint_timer_query|EXT_occlusion_query_boolean", Version = "", EntryPoint = "glEndQueryEXT")]
            public static void EndQuery(OpenTK.Graphics.ES30.QueryTarget target) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_map_buffer_range]
            /// Indicate modifications to a range of a mapped buffer
            /// </summary>
            /// <param name="target">
            /// <para>
            /// Specifies the target of the flush operation. target must be GL_ARRAY_BUFFER, GL_COPY_READ_BUFFER, GL_COPY_WRITE_BUFFER, GL_DISPATCH_INDIRECT_BUFFER, GL_DRAW_INDIRECT_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, GL_PIXEL_UNPACK_BUFFER, GL_QUERY_BUFFER, GL_SHADER_STORAGE_BUFFER, GL_TEXTURE_BUFFER, GL_TRANSFORM_FEEDBACK_BUFFER, or GL_UNIFORM_BUFFER.
            /// </para>
            /// </param>
            /// <param name="offset">
            /// <para>
            /// Specifies the start of the buffer subrange, in basic machine units.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// Specifies the length of the buffer subrange, in basic machine units.
            /// </para>
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_map_buffer_range", Version = "", EntryPoint = "glFlushMappedBufferRangeEXT")]
            public static void FlushMappedBufferRange(OpenTK.Graphics.ES30.All target, IntPtr offset, IntPtr length) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_map_buffer_range]
            /// Indicate modifications to a range of a mapped buffer
            /// </summary>
            /// <param name="target">
            /// <para>
            /// Specifies the target of the flush operation. target must be GL_ARRAY_BUFFER, GL_COPY_READ_BUFFER, GL_COPY_WRITE_BUFFER, GL_DISPATCH_INDIRECT_BUFFER, GL_DRAW_INDIRECT_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, GL_PIXEL_UNPACK_BUFFER, GL_QUERY_BUFFER, GL_SHADER_STORAGE_BUFFER, GL_TEXTURE_BUFFER, GL_TRANSFORM_FEEDBACK_BUFFER, or GL_UNIFORM_BUFFER.
            /// </para>
            /// </param>
            /// <param name="offset">
            /// <para>
            /// Specifies the start of the buffer subrange, in basic machine units.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// Specifies the length of the buffer subrange, in basic machine units.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_map_buffer_range", Version = "", EntryPoint = "glFlushMappedBufferRangeEXT")]
            public static void FlushMappedBufferRange(OpenTK.Graphics.ES30.BufferTarget target, IntPtr offset, IntPtr length) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_multisampled_render_to_texture]</summary>
            [AutoGenerated(Category = "EXT_multisampled_render_to_texture", Version = "", EntryPoint = "glFramebufferTexture2DMultisampleEXT")]
            [CLSCompliant(false)]
            public static void FramebufferTexture2DMultisample(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All attachment, OpenTK.Graphics.ES30.All textarget, Int32 texture, Int32 level, Int32 samples) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_multisampled_render_to_texture]</summary>
            [AutoGenerated(Category = "EXT_multisampled_render_to_texture", Version = "", EntryPoint = "glFramebufferTexture2DMultisampleEXT")]
            [CLSCompliant(false)]
            public static void FramebufferTexture2DMultisample(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All attachment, OpenTK.Graphics.ES30.All textarget, UInt32 texture, Int32 level, Int32 samples) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glGenProgramPipelinesEXT")]
            [CLSCompliant(false)]
            public static Int32 GenProgramPipeline() { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Reserve program pipeline object names
            /// </summary>
            /// <param name="n">
            /// <para>
            /// Specifies the number of program pipeline object names to reserve.
            /// </para>
            /// </param>
            /// <param name="pipelines">
            /// <para>
            /// Specifies an array of into which the reserved names will be written.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glGenProgramPipelinesEXT")]
            [CLSCompliant(false)]
            public static void GenProgramPipelines(Int32 n, [OutAttribute] Int32[] pipelines) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Reserve program pipeline object names
            /// </summary>
            /// <param name="n">
            /// <para>
            /// Specifies the number of program pipeline object names to reserve.
            /// </para>
            /// </param>
            /// <param name="pipelines">
            /// <para>
            /// Specifies an array of into which the reserved names will be written.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glGenProgramPipelinesEXT")]
            [CLSCompliant(false)]
            public static void GenProgramPipelines(Int32 n, [OutAttribute] out Int32 pipelines) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Reserve program pipeline object names
            /// </summary>
            /// <param name="n">
            /// <para>
            /// Specifies the number of program pipeline object names to reserve.
            /// </para>
            /// </param>
            /// <param name="pipelines">
            /// <para>
            /// Specifies an array of into which the reserved names will be written.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glGenProgramPipelinesEXT")]
            [CLSCompliant(false)]
            public static unsafe void GenProgramPipelines(Int32 n, [OutAttribute] Int32* pipelines) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Reserve program pipeline object names
            /// </summary>
            /// <param name="n">
            /// <para>
            /// Specifies the number of program pipeline object names to reserve.
            /// </para>
            /// </param>
            /// <param name="pipelines">
            /// <para>
            /// Specifies an array of into which the reserved names will be written.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glGenProgramPipelinesEXT")]
            [CLSCompliant(false)]
            public static void GenProgramPipelines(Int32 n, [OutAttribute] UInt32[] pipelines) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Reserve program pipeline object names
            /// </summary>
            /// <param name="n">
            /// <para>
            /// Specifies the number of program pipeline object names to reserve.
            /// </para>
            /// </param>
            /// <param name="pipelines">
            /// <para>
            /// Specifies an array of into which the reserved names will be written.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glGenProgramPipelinesEXT")]
            [CLSCompliant(false)]
            public static void GenProgramPipelines(Int32 n, [OutAttribute] out UInt32 pipelines) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Reserve program pipeline object names
            /// </summary>
            /// <param name="n">
            /// <para>
            /// Specifies the number of program pipeline object names to reserve.
            /// </para>
            /// </param>
            /// <param name="pipelines">
            /// <para>
            /// Specifies an array of into which the reserved names will be written.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glGenProgramPipelinesEXT")]
            [CLSCompliant(false)]
            public static unsafe void GenProgramPipelines(Int32 n, [OutAttribute] UInt32* pipelines) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_disjoint_timer_query|EXT_occlusion_query_boolean]</summary>
            [AutoGenerated(Category = "EXT_disjoint_timer_query|EXT_occlusion_query_boolean", Version = "", EntryPoint = "glGenQueriesEXT")]
            [CLSCompliant(false)]
            public static Int32 GenQuery() { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_disjoint_timer_query|EXT_occlusion_query_boolean]
            /// Generate query object names
            /// </summary>
            /// <param name="n">
            /// <para>
            /// Specifies the number of query object names to be generated.
            /// </para>
            /// </param>
            /// <param name="ids">
            /// <para>
            /// Specifies an array in which the generated query object names are stored.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_disjoint_timer_query|EXT_occlusion_query_boolean", Version = "", EntryPoint = "glGenQueriesEXT")]
            [CLSCompliant(false)]
            public static void GenQueries(Int32 n, [OutAttribute] Int32[] ids) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_disjoint_timer_query|EXT_occlusion_query_boolean]
            /// Generate query object names
            /// </summary>
            /// <param name="n">
            /// <para>
            /// Specifies the number of query object names to be generated.
            /// </para>
            /// </param>
            /// <param name="ids">
            /// <para>
            /// Specifies an array in which the generated query object names are stored.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_disjoint_timer_query|EXT_occlusion_query_boolean", Version = "", EntryPoint = "glGenQueriesEXT")]
            [CLSCompliant(false)]
            public static void GenQueries(Int32 n, [OutAttribute] out Int32 ids) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_disjoint_timer_query|EXT_occlusion_query_boolean]
            /// Generate query object names
            /// </summary>
            /// <param name="n">
            /// <para>
            /// Specifies the number of query object names to be generated.
            /// </para>
            /// </param>
            /// <param name="ids">
            /// <para>
            /// Specifies an array in which the generated query object names are stored.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_disjoint_timer_query|EXT_occlusion_query_boolean", Version = "", EntryPoint = "glGenQueriesEXT")]
            [CLSCompliant(false)]
            public static unsafe void GenQueries(Int32 n, [OutAttribute] Int32* ids) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_disjoint_timer_query|EXT_occlusion_query_boolean]
            /// Generate query object names
            /// </summary>
            /// <param name="n">
            /// <para>
            /// Specifies the number of query object names to be generated.
            /// </para>
            /// </param>
            /// <param name="ids">
            /// <para>
            /// Specifies an array in which the generated query object names are stored.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_disjoint_timer_query|EXT_occlusion_query_boolean", Version = "", EntryPoint = "glGenQueriesEXT")]
            [CLSCompliant(false)]
            public static void GenQueries(Int32 n, [OutAttribute] UInt32[] ids) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_disjoint_timer_query|EXT_occlusion_query_boolean]
            /// Generate query object names
            /// </summary>
            /// <param name="n">
            /// <para>
            /// Specifies the number of query object names to be generated.
            /// </para>
            /// </param>
            /// <param name="ids">
            /// <para>
            /// Specifies an array in which the generated query object names are stored.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_disjoint_timer_query|EXT_occlusion_query_boolean", Version = "", EntryPoint = "glGenQueriesEXT")]
            [CLSCompliant(false)]
            public static void GenQueries(Int32 n, [OutAttribute] out UInt32 ids) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_disjoint_timer_query|EXT_occlusion_query_boolean]
            /// Generate query object names
            /// </summary>
            /// <param name="n">
            /// <para>
            /// Specifies the number of query object names to be generated.
            /// </para>
            /// </param>
            /// <param name="ids">
            /// <para>
            /// Specifies an array in which the generated query object names are stored.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_disjoint_timer_query|EXT_occlusion_query_boolean", Version = "", EntryPoint = "glGenQueriesEXT")]
            [CLSCompliant(false)]
            public static unsafe void GenQueries(Int32 n, [OutAttribute] UInt32* ids) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_robustness]</summary>
            [AutoGenerated(Category = "EXT_robustness", Version = "", EntryPoint = "glGetGraphicsResetStatusEXT")]
            public static OpenTK.Graphics.ES30.All GetGraphicsResetStatus() { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_multiview_draw_buffers]</summary>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_multiview_draw_buffers", Version = "", EntryPoint = "glGetIntegeri_vEXT")]
            [CLSCompliant(false)]
            public static void GetInteger(OpenTK.Graphics.ES30.All target, Int32 index, [OutAttribute] Int32[] data) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_multiview_draw_buffers]</summary>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_multiview_draw_buffers", Version = "", EntryPoint = "glGetIntegeri_vEXT")]
            [CLSCompliant(false)]
            public static void GetInteger(OpenTK.Graphics.ES30.All target, Int32 index, [OutAttribute] out Int32 data) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_multiview_draw_buffers]</summary>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_multiview_draw_buffers", Version = "", EntryPoint = "glGetIntegeri_vEXT")]
            [CLSCompliant(false)]
            public static unsafe void GetInteger(OpenTK.Graphics.ES30.All target, Int32 index, [OutAttribute] Int32* data) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_multiview_draw_buffers]</summary>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_multiview_draw_buffers", Version = "", EntryPoint = "glGetIntegeri_vEXT")]
            [CLSCompliant(false)]
            public static void GetInteger(OpenTK.Graphics.ES30.All target, UInt32 index, [OutAttribute] Int32[] data) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_multiview_draw_buffers]</summary>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_multiview_draw_buffers", Version = "", EntryPoint = "glGetIntegeri_vEXT")]
            [CLSCompliant(false)]
            public static void GetInteger(OpenTK.Graphics.ES30.All target, UInt32 index, [OutAttribute] out Int32 data) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_multiview_draw_buffers]</summary>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_multiview_draw_buffers", Version = "", EntryPoint = "glGetIntegeri_vEXT")]
            [CLSCompliant(false)]
            public static unsafe void GetInteger(OpenTK.Graphics.ES30.All target, UInt32 index, [OutAttribute] Int32* data) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_multiview_draw_buffers]</summary>
            [AutoGenerated(Category = "EXT_multiview_draw_buffers", Version = "", EntryPoint = "glGetIntegeri_vEXT")]
            [CLSCompliant(false)]
            public static void GetInteger(OpenTK.Graphics.ES30.GetIndexedPName target, Int32 index, [OutAttribute] Int32[] data) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_multiview_draw_buffers]</summary>
            [AutoGenerated(Category = "EXT_multiview_draw_buffers", Version = "", EntryPoint = "glGetIntegeri_vEXT")]
            [CLSCompliant(false)]
            public static void GetInteger(OpenTK.Graphics.ES30.GetIndexedPName target, Int32 index, [OutAttribute] out Int32 data) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_multiview_draw_buffers]</summary>
            [AutoGenerated(Category = "EXT_multiview_draw_buffers", Version = "", EntryPoint = "glGetIntegeri_vEXT")]
            [CLSCompliant(false)]
            public static unsafe void GetInteger(OpenTK.Graphics.ES30.GetIndexedPName target, Int32 index, [OutAttribute] Int32* data) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_multiview_draw_buffers]</summary>
            [AutoGenerated(Category = "EXT_multiview_draw_buffers", Version = "", EntryPoint = "glGetIntegeri_vEXT")]
            [CLSCompliant(false)]
            public static void GetInteger(OpenTK.Graphics.ES30.GetIndexedPName target, UInt32 index, [OutAttribute] Int32[] data) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_multiview_draw_buffers]</summary>
            [AutoGenerated(Category = "EXT_multiview_draw_buffers", Version = "", EntryPoint = "glGetIntegeri_vEXT")]
            [CLSCompliant(false)]
            public static void GetInteger(OpenTK.Graphics.ES30.GetIndexedPName target, UInt32 index, [OutAttribute] out Int32 data) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_multiview_draw_buffers]</summary>
            [AutoGenerated(Category = "EXT_multiview_draw_buffers", Version = "", EntryPoint = "glGetIntegeri_vEXT")]
            [CLSCompliant(false)]
            public static unsafe void GetInteger(OpenTK.Graphics.ES30.GetIndexedPName target, UInt32 index, [OutAttribute] Int32* data) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_robustness]</summary>
            [AutoGenerated(Category = "EXT_robustness", Version = "", EntryPoint = "glGetnUniformfvEXT")]
            [CLSCompliant(false)]
            public static void GetnUniform(Int32 program, Int32 location, Int32 bufSize, [OutAttribute] Single[] @params) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_robustness]</summary>
            [AutoGenerated(Category = "EXT_robustness", Version = "", EntryPoint = "glGetnUniformfvEXT")]
            [CLSCompliant(false)]
            public static void GetnUniform(Int32 program, Int32 location, Int32 bufSize, [OutAttribute] out Single @params) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_robustness]</summary>
            [AutoGenerated(Category = "EXT_robustness", Version = "", EntryPoint = "glGetnUniformfvEXT")]
            [CLSCompliant(false)]
            public static unsafe void GetnUniform(Int32 program, Int32 location, Int32 bufSize, [OutAttribute] Single* @params) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_robustness]</summary>
            [AutoGenerated(Category = "EXT_robustness", Version = "", EntryPoint = "glGetnUniformfvEXT")]
            [CLSCompliant(false)]
            public static void GetnUniform(UInt32 program, Int32 location, Int32 bufSize, [OutAttribute] Single[] @params) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_robustness]</summary>
            [AutoGenerated(Category = "EXT_robustness", Version = "", EntryPoint = "glGetnUniformfvEXT")]
            [CLSCompliant(false)]
            public static void GetnUniform(UInt32 program, Int32 location, Int32 bufSize, [OutAttribute] out Single @params) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_robustness]</summary>
            [AutoGenerated(Category = "EXT_robustness", Version = "", EntryPoint = "glGetnUniformfvEXT")]
            [CLSCompliant(false)]
            public static unsafe void GetnUniform(UInt32 program, Int32 location, Int32 bufSize, [OutAttribute] Single* @params) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_robustness]</summary>
            [AutoGenerated(Category = "EXT_robustness", Version = "", EntryPoint = "glGetnUniformivEXT")]
            [CLSCompliant(false)]
            public static void GetnUniform(Int32 program, Int32 location, Int32 bufSize, [OutAttribute] Int32[] @params) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_robustness]</summary>
            [AutoGenerated(Category = "EXT_robustness", Version = "", EntryPoint = "glGetnUniformivEXT")]
            [CLSCompliant(false)]
            public static void GetnUniform(Int32 program, Int32 location, Int32 bufSize, [OutAttribute] out Int32 @params) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_robustness]</summary>
            [AutoGenerated(Category = "EXT_robustness", Version = "", EntryPoint = "glGetnUniformivEXT")]
            [CLSCompliant(false)]
            public static unsafe void GetnUniform(Int32 program, Int32 location, Int32 bufSize, [OutAttribute] Int32* @params) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_robustness]</summary>
            [AutoGenerated(Category = "EXT_robustness", Version = "", EntryPoint = "glGetnUniformivEXT")]
            [CLSCompliant(false)]
            public static void GetnUniform(UInt32 program, Int32 location, Int32 bufSize, [OutAttribute] Int32[] @params) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_robustness]</summary>
            [AutoGenerated(Category = "EXT_robustness", Version = "", EntryPoint = "glGetnUniformivEXT")]
            [CLSCompliant(false)]
            public static void GetnUniform(UInt32 program, Int32 location, Int32 bufSize, [OutAttribute] out Int32 @params) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_robustness]</summary>
            [AutoGenerated(Category = "EXT_robustness", Version = "", EntryPoint = "glGetnUniformivEXT")]
            [CLSCompliant(false)]
            public static unsafe void GetnUniform(UInt32 program, Int32 location, Int32 bufSize, [OutAttribute] Int32* @params) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_debug_label]
            /// Retrieve the label of a named object identified within a namespace
            /// </summary>
            /// <param name="identifier">
            /// <para>
            /// The namespace from which the name of the object is allocated.
            /// </para>
            /// </param>
            /// <param name="name">
            /// <para>
            /// The name of the object whose label to retrieve.
            /// </para>
            /// </param>
            /// <param name="bufSize">
            /// <para>
            /// The length of the buffer whose address is in label.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// The address of a variable to receive the length of the object label.
            /// </para>
            /// </param>
            /// <param name="label">
            /// <para>
            /// The address of a string that will receive the object label.
            /// </para>
            /// </param>
            [Obsolete("Use out overload instead")]
            [AutoGenerated(Category = "EXT_debug_label", Version = "", EntryPoint = "glGetObjectLabelEXT")]
            [CLSCompliant(false)]
            public static void GetObjectLabel(OpenTK.Graphics.ES30.All type, Int32 @object, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute] StringBuilder label) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_debug_label]
            /// Retrieve the label of a named object identified within a namespace
            /// </summary>
            /// <param name="identifier">
            /// <para>
            /// The namespace from which the name of the object is allocated.
            /// </para>
            /// </param>
            /// <param name="name">
            /// <para>
            /// The name of the object whose label to retrieve.
            /// </para>
            /// </param>
            /// <param name="bufSize">
            /// <para>
            /// The length of the buffer whose address is in label.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// The address of a variable to receive the length of the object label.
            /// </para>
            /// </param>
            /// <param name="label">
            /// <para>
            /// The address of a string that will receive the object label.
            /// </para>
            /// </param>
            [Obsolete("Use out overload instead")]
            [AutoGenerated(Category = "EXT_debug_label", Version = "", EntryPoint = "glGetObjectLabelEXT")]
            [CLSCompliant(false)]
            public static void GetObjectLabel(OpenTK.Graphics.ES30.All type, Int32 @object, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder label) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_debug_label]
            /// Retrieve the label of a named object identified within a namespace
            /// </summary>
            /// <param name="identifier">
            /// <para>
            /// The namespace from which the name of the object is allocated.
            /// </para>
            /// </param>
            /// <param name="name">
            /// <para>
            /// The name of the object whose label to retrieve.
            /// </para>
            /// </param>
            /// <param name="bufSize">
            /// <para>
            /// The length of the buffer whose address is in label.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// The address of a variable to receive the length of the object label.
            /// </para>
            /// </param>
            /// <param name="label">
            /// <para>
            /// The address of a string that will receive the object label.
            /// </para>
            /// </param>
            [Obsolete("Use out overload instead")]
            [AutoGenerated(Category = "EXT_debug_label", Version = "", EntryPoint = "glGetObjectLabelEXT")]
            [CLSCompliant(false)]
            public static unsafe void GetObjectLabel(OpenTK.Graphics.ES30.All type, Int32 @object, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder label) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_debug_label]
            /// Retrieve the label of a named object identified within a namespace
            /// </summary>
            /// <param name="identifier">
            /// <para>
            /// The namespace from which the name of the object is allocated.
            /// </para>
            /// </param>
            /// <param name="name">
            /// <para>
            /// The name of the object whose label to retrieve.
            /// </para>
            /// </param>
            /// <param name="bufSize">
            /// <para>
            /// The length of the buffer whose address is in label.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// The address of a variable to receive the length of the object label.
            /// </para>
            /// </param>
            /// <param name="label">
            /// <para>
            /// The address of a string that will receive the object label.
            /// </para>
            /// </param>
            [Obsolete("Use out overload instead")]
            [AutoGenerated(Category = "EXT_debug_label", Version = "", EntryPoint = "glGetObjectLabelEXT")]
            [CLSCompliant(false)]
            public static void GetObjectLabel(OpenTK.Graphics.ES30.All type, UInt32 @object, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute] StringBuilder label) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_debug_label]
            /// Retrieve the label of a named object identified within a namespace
            /// </summary>
            /// <param name="identifier">
            /// <para>
            /// The namespace from which the name of the object is allocated.
            /// </para>
            /// </param>
            /// <param name="name">
            /// <para>
            /// The name of the object whose label to retrieve.
            /// </para>
            /// </param>
            /// <param name="bufSize">
            /// <para>
            /// The length of the buffer whose address is in label.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// The address of a variable to receive the length of the object label.
            /// </para>
            /// </param>
            /// <param name="label">
            /// <para>
            /// The address of a string that will receive the object label.
            /// </para>
            /// </param>
            [Obsolete("Use out overload instead")]
            [AutoGenerated(Category = "EXT_debug_label", Version = "", EntryPoint = "glGetObjectLabelEXT")]
            [CLSCompliant(false)]
            public static void GetObjectLabel(OpenTK.Graphics.ES30.All type, UInt32 @object, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder label) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_debug_label]
            /// Retrieve the label of a named object identified within a namespace
            /// </summary>
            /// <param name="identifier">
            /// <para>
            /// The namespace from which the name of the object is allocated.
            /// </para>
            /// </param>
            /// <param name="name">
            /// <para>
            /// The name of the object whose label to retrieve.
            /// </para>
            /// </param>
            /// <param name="bufSize">
            /// <para>
            /// The length of the buffer whose address is in label.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// The address of a variable to receive the length of the object label.
            /// </para>
            /// </param>
            /// <param name="label">
            /// <para>
            /// The address of a string that will receive the object label.
            /// </para>
            /// </param>
            [Obsolete("Use out overload instead")]
            [AutoGenerated(Category = "EXT_debug_label", Version = "", EntryPoint = "glGetObjectLabelEXT")]
            [CLSCompliant(false)]
            public static unsafe void GetObjectLabel(OpenTK.Graphics.ES30.All type, UInt32 @object, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder label) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Retrieve the info log string from a program pipeline object
            /// </summary>
            /// <param name="pipeline">
            /// <para>
            /// Specifies the name of a program pipeline object from which to retrieve the info log.
            /// </para>
            /// </param>
            /// <param name="bufSize">
            /// <para>
            /// Specifies the maximum number of characters, including the null terminator, that may be written into infoLog.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// Specifies the address of a variable into which will be written the number of characters written into infoLog.
            /// </para>
            /// </param>
            /// <param name="infoLog">
            /// <para>
            /// Specifies the address of an array of characters into which will be written the info log for pipeline.
            /// </para>
            /// </param>
            [Obsolete("Use out overload instead")]
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glGetProgramPipelineInfoLogEXT")]
            [CLSCompliant(false)]
            public static void GetProgramPipelineInfoLog(Int32 pipeline, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute] StringBuilder infoLog) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Retrieve the info log string from a program pipeline object
            /// </summary>
            /// <param name="pipeline">
            /// <para>
            /// Specifies the name of a program pipeline object from which to retrieve the info log.
            /// </para>
            /// </param>
            /// <param name="bufSize">
            /// <para>
            /// Specifies the maximum number of characters, including the null terminator, that may be written into infoLog.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// Specifies the address of a variable into which will be written the number of characters written into infoLog.
            /// </para>
            /// </param>
            /// <param name="infoLog">
            /// <para>
            /// Specifies the address of an array of characters into which will be written the info log for pipeline.
            /// </para>
            /// </param>
            [Obsolete("Use out overload instead")]
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glGetProgramPipelineInfoLogEXT")]
            [CLSCompliant(false)]
            public static void GetProgramPipelineInfoLog(Int32 pipeline, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder infoLog) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Retrieve the info log string from a program pipeline object
            /// </summary>
            /// <param name="pipeline">
            /// <para>
            /// Specifies the name of a program pipeline object from which to retrieve the info log.
            /// </para>
            /// </param>
            /// <param name="bufSize">
            /// <para>
            /// Specifies the maximum number of characters, including the null terminator, that may be written into infoLog.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// Specifies the address of a variable into which will be written the number of characters written into infoLog.
            /// </para>
            /// </param>
            /// <param name="infoLog">
            /// <para>
            /// Specifies the address of an array of characters into which will be written the info log for pipeline.
            /// </para>
            /// </param>
            [Obsolete("Use out overload instead")]
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glGetProgramPipelineInfoLogEXT")]
            [CLSCompliant(false)]
            public static unsafe void GetProgramPipelineInfoLog(Int32 pipeline, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder infoLog) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Retrieve the info log string from a program pipeline object
            /// </summary>
            /// <param name="pipeline">
            /// <para>
            /// Specifies the name of a program pipeline object from which to retrieve the info log.
            /// </para>
            /// </param>
            /// <param name="bufSize">
            /// <para>
            /// Specifies the maximum number of characters, including the null terminator, that may be written into infoLog.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// Specifies the address of a variable into which will be written the number of characters written into infoLog.
            /// </para>
            /// </param>
            /// <param name="infoLog">
            /// <para>
            /// Specifies the address of an array of characters into which will be written the info log for pipeline.
            /// </para>
            /// </param>
            [Obsolete("Use out overload instead")]
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glGetProgramPipelineInfoLogEXT")]
            [CLSCompliant(false)]
            public static void GetProgramPipelineInfoLog(UInt32 pipeline, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute] StringBuilder infoLog) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Retrieve the info log string from a program pipeline object
            /// </summary>
            /// <param name="pipeline">
            /// <para>
            /// Specifies the name of a program pipeline object from which to retrieve the info log.
            /// </para>
            /// </param>
            /// <param name="bufSize">
            /// <para>
            /// Specifies the maximum number of characters, including the null terminator, that may be written into infoLog.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// Specifies the address of a variable into which will be written the number of characters written into infoLog.
            /// </para>
            /// </param>
            /// <param name="infoLog">
            /// <para>
            /// Specifies the address of an array of characters into which will be written the info log for pipeline.
            /// </para>
            /// </param>
            [Obsolete("Use out overload instead")]
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glGetProgramPipelineInfoLogEXT")]
            [CLSCompliant(false)]
            public static void GetProgramPipelineInfoLog(UInt32 pipeline, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder infoLog) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Retrieve the info log string from a program pipeline object
            /// </summary>
            /// <param name="pipeline">
            /// <para>
            /// Specifies the name of a program pipeline object from which to retrieve the info log.
            /// </para>
            /// </param>
            /// <param name="bufSize">
            /// <para>
            /// Specifies the maximum number of characters, including the null terminator, that may be written into infoLog.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// Specifies the address of a variable into which will be written the number of characters written into infoLog.
            /// </para>
            /// </param>
            /// <param name="infoLog">
            /// <para>
            /// Specifies the address of an array of characters into which will be written the info log for pipeline.
            /// </para>
            /// </param>
            [Obsolete("Use out overload instead")]
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glGetProgramPipelineInfoLogEXT")]
            [CLSCompliant(false)]
            public static unsafe void GetProgramPipelineInfoLog(UInt32 pipeline, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder infoLog) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Retrieve properties of a program pipeline object
            /// </summary>
            /// <param name="pipeline">
            /// <para>
            /// Specifies the name of a program pipeline object whose parameter retrieve.
            /// </para>
            /// </param>
            /// <param name="pname">
            /// <para>
            /// Specifies the name of the parameter to retrieve.
            /// </para>
            /// </param>
            /// <param name="params">
            /// <para>
            /// Specifies the address of a variable into which will be written the value or values of pname for pipeline.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glGetProgramPipelineivEXT")]
            [CLSCompliant(false)]
            public static void GetProgramPipeline(Int32 pipeline, OpenTK.Graphics.ES30.All pname, [OutAttribute] Int32[] @params) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Retrieve properties of a program pipeline object
            /// </summary>
            /// <param name="pipeline">
            /// <para>
            /// Specifies the name of a program pipeline object whose parameter retrieve.
            /// </para>
            /// </param>
            /// <param name="pname">
            /// <para>
            /// Specifies the name of the parameter to retrieve.
            /// </para>
            /// </param>
            /// <param name="params">
            /// <para>
            /// Specifies the address of a variable into which will be written the value or values of pname for pipeline.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glGetProgramPipelineivEXT")]
            [CLSCompliant(false)]
            public static void GetProgramPipeline(Int32 pipeline, OpenTK.Graphics.ES30.All pname, [OutAttribute] out Int32 @params) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Retrieve properties of a program pipeline object
            /// </summary>
            /// <param name="pipeline">
            /// <para>
            /// Specifies the name of a program pipeline object whose parameter retrieve.
            /// </para>
            /// </param>
            /// <param name="pname">
            /// <para>
            /// Specifies the name of the parameter to retrieve.
            /// </para>
            /// </param>
            /// <param name="params">
            /// <para>
            /// Specifies the address of a variable into which will be written the value or values of pname for pipeline.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glGetProgramPipelineivEXT")]
            [CLSCompliant(false)]
            public static unsafe void GetProgramPipeline(Int32 pipeline, OpenTK.Graphics.ES30.All pname, [OutAttribute] Int32* @params) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Retrieve properties of a program pipeline object
            /// </summary>
            /// <param name="pipeline">
            /// <para>
            /// Specifies the name of a program pipeline object whose parameter retrieve.
            /// </para>
            /// </param>
            /// <param name="pname">
            /// <para>
            /// Specifies the name of the parameter to retrieve.
            /// </para>
            /// </param>
            /// <param name="params">
            /// <para>
            /// Specifies the address of a variable into which will be written the value or values of pname for pipeline.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glGetProgramPipelineivEXT")]
            [CLSCompliant(false)]
            public static void GetProgramPipeline(UInt32 pipeline, OpenTK.Graphics.ES30.All pname, [OutAttribute] Int32[] @params) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Retrieve properties of a program pipeline object
            /// </summary>
            /// <param name="pipeline">
            /// <para>
            /// Specifies the name of a program pipeline object whose parameter retrieve.
            /// </para>
            /// </param>
            /// <param name="pname">
            /// <para>
            /// Specifies the name of the parameter to retrieve.
            /// </para>
            /// </param>
            /// <param name="params">
            /// <para>
            /// Specifies the address of a variable into which will be written the value or values of pname for pipeline.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glGetProgramPipelineivEXT")]
            [CLSCompliant(false)]
            public static void GetProgramPipeline(UInt32 pipeline, OpenTK.Graphics.ES30.All pname, [OutAttribute] out Int32 @params) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Retrieve properties of a program pipeline object
            /// </summary>
            /// <param name="pipeline">
            /// <para>
            /// Specifies the name of a program pipeline object whose parameter retrieve.
            /// </para>
            /// </param>
            /// <param name="pname">
            /// <para>
            /// Specifies the name of the parameter to retrieve.
            /// </para>
            /// </param>
            /// <param name="params">
            /// <para>
            /// Specifies the address of a variable into which will be written the value or values of pname for pipeline.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glGetProgramPipelineivEXT")]
            [CLSCompliant(false)]
            public static unsafe void GetProgramPipeline(UInt32 pipeline, OpenTK.Graphics.ES30.All pname, [OutAttribute] Int32* @params) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_disjoint_timer_query|EXT_occlusion_query_boolean]</summary>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_disjoint_timer_query|EXT_occlusion_query_boolean", Version = "", EntryPoint = "glGetQueryivEXT")]
            [CLSCompliant(false)]
            public static void GetQuery(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All pname, [OutAttribute] Int32[] @params) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_disjoint_timer_query|EXT_occlusion_query_boolean]</summary>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_disjoint_timer_query|EXT_occlusion_query_boolean", Version = "", EntryPoint = "glGetQueryivEXT")]
            [CLSCompliant(false)]
            public static void GetQuery(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All pname, [OutAttribute] out Int32 @params) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_disjoint_timer_query|EXT_occlusion_query_boolean]</summary>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_disjoint_timer_query|EXT_occlusion_query_boolean", Version = "", EntryPoint = "glGetQueryivEXT")]
            [CLSCompliant(false)]
            public static unsafe void GetQuery(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All pname, [OutAttribute] Int32* @params) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_disjoint_timer_query|EXT_occlusion_query_boolean]</summary>
            [AutoGenerated(Category = "EXT_disjoint_timer_query|EXT_occlusion_query_boolean", Version = "", EntryPoint = "glGetQueryivEXT")]
            [CLSCompliant(false)]
            public static void GetQuery(OpenTK.Graphics.ES30.QueryTarget target, OpenTK.Graphics.ES30.GetQueryParam pname, [OutAttribute] Int32[] @params) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_disjoint_timer_query|EXT_occlusion_query_boolean]</summary>
            [AutoGenerated(Category = "EXT_disjoint_timer_query|EXT_occlusion_query_boolean", Version = "", EntryPoint = "glGetQueryivEXT")]
            [CLSCompliant(false)]
            public static void GetQuery(OpenTK.Graphics.ES30.QueryTarget target, OpenTK.Graphics.ES30.GetQueryParam pname, [OutAttribute] out Int32 @params) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_disjoint_timer_query|EXT_occlusion_query_boolean]</summary>
            [AutoGenerated(Category = "EXT_disjoint_timer_query|EXT_occlusion_query_boolean", Version = "", EntryPoint = "glGetQueryivEXT")]
            [CLSCompliant(false)]
            public static unsafe void GetQuery(OpenTK.Graphics.ES30.QueryTarget target, OpenTK.Graphics.ES30.GetQueryParam pname, [OutAttribute] Int32* @params) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_disjoint_timer_query]
            /// Return parameters of a query object
            /// </summary>
            /// <param name="id">
            /// <para>
            /// Specifies the name of a query object.
            /// </para>
            /// </param>
            /// <param name="pname">
            /// <para>
            /// Specifies the symbolic name of a query object parameter. Accepted values are GL_QUERY_RESULT or GL_QUERY_RESULT_AVAILABLE.
            /// </para>
            /// </param>
            /// <param name="params">
            /// <para>
            /// If a buffer is bound to the GL_QUERY_RESULT_BUFFER target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to GL_QUERY_RESULT_BUFFER, then params is treated as an address in client memory of a variable to receive the resulting data.
            /// </para>
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_disjoint_timer_query", Version = "", EntryPoint = "glGetQueryObjecti64vEXT")]
            [CLSCompliant(false)]
            public static void GetQueryObject(Int32 id, OpenTK.Graphics.ES30.All pname, [OutAttribute] Int64[] @params) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_disjoint_timer_query]
            /// Return parameters of a query object
            /// </summary>
            /// <param name="id">
            /// <para>
            /// Specifies the name of a query object.
            /// </para>
            /// </param>
            /// <param name="pname">
            /// <para>
            /// Specifies the symbolic name of a query object parameter. Accepted values are GL_QUERY_RESULT or GL_QUERY_RESULT_AVAILABLE.
            /// </para>
            /// </param>
            /// <param name="params">
            /// <para>
            /// If a buffer is bound to the GL_QUERY_RESULT_BUFFER target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to GL_QUERY_RESULT_BUFFER, then params is treated as an address in client memory of a variable to receive the resulting data.
            /// </para>
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_disjoint_timer_query", Version = "", EntryPoint = "glGetQueryObjecti64vEXT")]
            [CLSCompliant(false)]
            public static void GetQueryObject(Int32 id, OpenTK.Graphics.ES30.All pname, [OutAttribute] out Int64 @params) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_disjoint_timer_query]
            /// Return parameters of a query object
            /// </summary>
            /// <param name="id">
            /// <para>
            /// Specifies the name of a query object.
            /// </para>
            /// </param>
            /// <param name="pname">
            /// <para>
            /// Specifies the symbolic name of a query object parameter. Accepted values are GL_QUERY_RESULT or GL_QUERY_RESULT_AVAILABLE.
            /// </para>
            /// </param>
            /// <param name="params">
            /// <para>
            /// If a buffer is bound to the GL_QUERY_RESULT_BUFFER target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to GL_QUERY_RESULT_BUFFER, then params is treated as an address in client memory of a variable to receive the resulting data.
            /// </para>
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_disjoint_timer_query", Version = "", EntryPoint = "glGetQueryObjecti64vEXT")]
            [CLSCompliant(false)]
            public static unsafe void GetQueryObject(Int32 id, OpenTK.Graphics.ES30.All pname, [OutAttribute] Int64* @params) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_disjoint_timer_query]
            /// Return parameters of a query object
            /// </summary>
            /// <param name="id">
            /// <para>
            /// Specifies the name of a query object.
            /// </para>
            /// </param>
            /// <param name="pname">
            /// <para>
            /// Specifies the symbolic name of a query object parameter. Accepted values are GL_QUERY_RESULT or GL_QUERY_RESULT_AVAILABLE.
            /// </para>
            /// </param>
            /// <param name="params">
            /// <para>
            /// If a buffer is bound to the GL_QUERY_RESULT_BUFFER target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to GL_QUERY_RESULT_BUFFER, then params is treated as an address in client memory of a variable to receive the resulting data.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_disjoint_timer_query", Version = "", EntryPoint = "glGetQueryObjecti64vEXT")]
            [CLSCompliant(false)]
            public static void GetQueryObject(Int32 id, OpenTK.Graphics.ES30.GetQueryObjectParam pname, [OutAttribute] Int64[] @params) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_disjoint_timer_query]
            /// Return parameters of a query object
            /// </summary>
            /// <param name="id">
            /// <para>
            /// Specifies the name of a query object.
            /// </para>
            /// </param>
            /// <param name="pname">
            /// <para>
            /// Specifies the symbolic name of a query object parameter. Accepted values are GL_QUERY_RESULT or GL_QUERY_RESULT_AVAILABLE.
            /// </para>
            /// </param>
            /// <param name="params">
            /// <para>
            /// If a buffer is bound to the GL_QUERY_RESULT_BUFFER target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to GL_QUERY_RESULT_BUFFER, then params is treated as an address in client memory of a variable to receive the resulting data.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_disjoint_timer_query", Version = "", EntryPoint = "glGetQueryObjecti64vEXT")]
            [CLSCompliant(false)]
            public static void GetQueryObject(Int32 id, OpenTK.Graphics.ES30.GetQueryObjectParam pname, [OutAttribute] out Int64 @params) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_disjoint_timer_query]
            /// Return parameters of a query object
            /// </summary>
            /// <param name="id">
            /// <para>
            /// Specifies the name of a query object.
            /// </para>
            /// </param>
            /// <param name="pname">
            /// <para>
            /// Specifies the symbolic name of a query object parameter. Accepted values are GL_QUERY_RESULT or GL_QUERY_RESULT_AVAILABLE.
            /// </para>
            /// </param>
            /// <param name="params">
            /// <para>
            /// If a buffer is bound to the GL_QUERY_RESULT_BUFFER target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to GL_QUERY_RESULT_BUFFER, then params is treated as an address in client memory of a variable to receive the resulting data.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_disjoint_timer_query", Version = "", EntryPoint = "glGetQueryObjecti64vEXT")]
            [CLSCompliant(false)]
            public static unsafe void GetQueryObject(Int32 id, OpenTK.Graphics.ES30.GetQueryObjectParam pname, [OutAttribute] Int64* @params) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_disjoint_timer_query]
            /// Return parameters of a query object
            /// </summary>
            /// <param name="id">
            /// <para>
            /// Specifies the name of a query object.
            /// </para>
            /// </param>
            /// <param name="pname">
            /// <para>
            /// Specifies the symbolic name of a query object parameter. Accepted values are GL_QUERY_RESULT or GL_QUERY_RESULT_AVAILABLE.
            /// </para>
            /// </param>
            /// <param name="params">
            /// <para>
            /// If a buffer is bound to the GL_QUERY_RESULT_BUFFER target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to GL_QUERY_RESULT_BUFFER, then params is treated as an address in client memory of a variable to receive the resulting data.
            /// </para>
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_disjoint_timer_query", Version = "", EntryPoint = "glGetQueryObjecti64vEXT")]
            [CLSCompliant(false)]
            public static void GetQueryObject(UInt32 id, OpenTK.Graphics.ES30.All pname, [OutAttribute] Int64[] @params) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_disjoint_timer_query]
            /// Return parameters of a query object
            /// </summary>
            /// <param name="id">
            /// <para>
            /// Specifies the name of a query object.
            /// </para>
            /// </param>
            /// <param name="pname">
            /// <para>
            /// Specifies the symbolic name of a query object parameter. Accepted values are GL_QUERY_RESULT or GL_QUERY_RESULT_AVAILABLE.
            /// </para>
            /// </param>
            /// <param name="params">
            /// <para>
            /// If a buffer is bound to the GL_QUERY_RESULT_BUFFER target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to GL_QUERY_RESULT_BUFFER, then params is treated as an address in client memory of a variable to receive the resulting data.
            /// </para>
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_disjoint_timer_query", Version = "", EntryPoint = "glGetQueryObjecti64vEXT")]
            [CLSCompliant(false)]
            public static void GetQueryObject(UInt32 id, OpenTK.Graphics.ES30.All pname, [OutAttribute] out Int64 @params) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_disjoint_timer_query]
            /// Return parameters of a query object
            /// </summary>
            /// <param name="id">
            /// <para>
            /// Specifies the name of a query object.
            /// </para>
            /// </param>
            /// <param name="pname">
            /// <para>
            /// Specifies the symbolic name of a query object parameter. Accepted values are GL_QUERY_RESULT or GL_QUERY_RESULT_AVAILABLE.
            /// </para>
            /// </param>
            /// <param name="params">
            /// <para>
            /// If a buffer is bound to the GL_QUERY_RESULT_BUFFER target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to GL_QUERY_RESULT_BUFFER, then params is treated as an address in client memory of a variable to receive the resulting data.
            /// </para>
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_disjoint_timer_query", Version = "", EntryPoint = "glGetQueryObjecti64vEXT")]
            [CLSCompliant(false)]
            public static unsafe void GetQueryObject(UInt32 id, OpenTK.Graphics.ES30.All pname, [OutAttribute] Int64* @params) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_disjoint_timer_query]
            /// Return parameters of a query object
            /// </summary>
            /// <param name="id">
            /// <para>
            /// Specifies the name of a query object.
            /// </para>
            /// </param>
            /// <param name="pname">
            /// <para>
            /// Specifies the symbolic name of a query object parameter. Accepted values are GL_QUERY_RESULT or GL_QUERY_RESULT_AVAILABLE.
            /// </para>
            /// </param>
            /// <param name="params">
            /// <para>
            /// If a buffer is bound to the GL_QUERY_RESULT_BUFFER target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to GL_QUERY_RESULT_BUFFER, then params is treated as an address in client memory of a variable to receive the resulting data.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_disjoint_timer_query", Version = "", EntryPoint = "glGetQueryObjecti64vEXT")]
            [CLSCompliant(false)]
            public static void GetQueryObject(UInt32 id, OpenTK.Graphics.ES30.GetQueryObjectParam pname, [OutAttribute] Int64[] @params) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_disjoint_timer_query]
            /// Return parameters of a query object
            /// </summary>
            /// <param name="id">
            /// <para>
            /// Specifies the name of a query object.
            /// </para>
            /// </param>
            /// <param name="pname">
            /// <para>
            /// Specifies the symbolic name of a query object parameter. Accepted values are GL_QUERY_RESULT or GL_QUERY_RESULT_AVAILABLE.
            /// </para>
            /// </param>
            /// <param name="params">
            /// <para>
            /// If a buffer is bound to the GL_QUERY_RESULT_BUFFER target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to GL_QUERY_RESULT_BUFFER, then params is treated as an address in client memory of a variable to receive the resulting data.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_disjoint_timer_query", Version = "", EntryPoint = "glGetQueryObjecti64vEXT")]
            [CLSCompliant(false)]
            public static void GetQueryObject(UInt32 id, OpenTK.Graphics.ES30.GetQueryObjectParam pname, [OutAttribute] out Int64 @params) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_disjoint_timer_query]
            /// Return parameters of a query object
            /// </summary>
            /// <param name="id">
            /// <para>
            /// Specifies the name of a query object.
            /// </para>
            /// </param>
            /// <param name="pname">
            /// <para>
            /// Specifies the symbolic name of a query object parameter. Accepted values are GL_QUERY_RESULT or GL_QUERY_RESULT_AVAILABLE.
            /// </para>
            /// </param>
            /// <param name="params">
            /// <para>
            /// If a buffer is bound to the GL_QUERY_RESULT_BUFFER target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to GL_QUERY_RESULT_BUFFER, then params is treated as an address in client memory of a variable to receive the resulting data.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_disjoint_timer_query", Version = "", EntryPoint = "glGetQueryObjecti64vEXT")]
            [CLSCompliant(false)]
            public static unsafe void GetQueryObject(UInt32 id, OpenTK.Graphics.ES30.GetQueryObjectParam pname, [OutAttribute] Int64* @params) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_disjoint_timer_query]
            /// Return parameters of a query object
            /// </summary>
            /// <param name="id">
            /// <para>
            /// Specifies the name of a query object.
            /// </para>
            /// </param>
            /// <param name="pname">
            /// <para>
            /// Specifies the symbolic name of a query object parameter. Accepted values are GL_QUERY_RESULT or GL_QUERY_RESULT_AVAILABLE.
            /// </para>
            /// </param>
            /// <param name="params">
            /// <para>
            /// If a buffer is bound to the GL_QUERY_RESULT_BUFFER target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to GL_QUERY_RESULT_BUFFER, then params is treated as an address in client memory of a variable to receive the resulting data.
            /// </para>
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_disjoint_timer_query", Version = "", EntryPoint = "glGetQueryObjectivEXT")]
            [CLSCompliant(false)]
            public static void GetQueryObject(Int32 id, OpenTK.Graphics.ES30.All pname, [OutAttribute] Int32[] @params) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_disjoint_timer_query]
            /// Return parameters of a query object
            /// </summary>
            /// <param name="id">
            /// <para>
            /// Specifies the name of a query object.
            /// </para>
            /// </param>
            /// <param name="pname">
            /// <para>
            /// Specifies the symbolic name of a query object parameter. Accepted values are GL_QUERY_RESULT or GL_QUERY_RESULT_AVAILABLE.
            /// </para>
            /// </param>
            /// <param name="params">
            /// <para>
            /// If a buffer is bound to the GL_QUERY_RESULT_BUFFER target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to GL_QUERY_RESULT_BUFFER, then params is treated as an address in client memory of a variable to receive the resulting data.
            /// </para>
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_disjoint_timer_query", Version = "", EntryPoint = "glGetQueryObjectivEXT")]
            [CLSCompliant(false)]
            public static void GetQueryObject(Int32 id, OpenTK.Graphics.ES30.All pname, [OutAttribute] out Int32 @params) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_disjoint_timer_query]
            /// Return parameters of a query object
            /// </summary>
            /// <param name="id">
            /// <para>
            /// Specifies the name of a query object.
            /// </para>
            /// </param>
            /// <param name="pname">
            /// <para>
            /// Specifies the symbolic name of a query object parameter. Accepted values are GL_QUERY_RESULT or GL_QUERY_RESULT_AVAILABLE.
            /// </para>
            /// </param>
            /// <param name="params">
            /// <para>
            /// If a buffer is bound to the GL_QUERY_RESULT_BUFFER target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to GL_QUERY_RESULT_BUFFER, then params is treated as an address in client memory of a variable to receive the resulting data.
            /// </para>
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_disjoint_timer_query", Version = "", EntryPoint = "glGetQueryObjectivEXT")]
            [CLSCompliant(false)]
            public static unsafe void GetQueryObject(Int32 id, OpenTK.Graphics.ES30.All pname, [OutAttribute] Int32* @params) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_disjoint_timer_query]
            /// Return parameters of a query object
            /// </summary>
            /// <param name="id">
            /// <para>
            /// Specifies the name of a query object.
            /// </para>
            /// </param>
            /// <param name="pname">
            /// <para>
            /// Specifies the symbolic name of a query object parameter. Accepted values are GL_QUERY_RESULT or GL_QUERY_RESULT_AVAILABLE.
            /// </para>
            /// </param>
            /// <param name="params">
            /// <para>
            /// If a buffer is bound to the GL_QUERY_RESULT_BUFFER target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to GL_QUERY_RESULT_BUFFER, then params is treated as an address in client memory of a variable to receive the resulting data.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_disjoint_timer_query", Version = "", EntryPoint = "glGetQueryObjectivEXT")]
            [CLSCompliant(false)]
            public static void GetQueryObject(Int32 id, OpenTK.Graphics.ES30.GetQueryObjectParam pname, [OutAttribute] Int32[] @params) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_disjoint_timer_query]
            /// Return parameters of a query object
            /// </summary>
            /// <param name="id">
            /// <para>
            /// Specifies the name of a query object.
            /// </para>
            /// </param>
            /// <param name="pname">
            /// <para>
            /// Specifies the symbolic name of a query object parameter. Accepted values are GL_QUERY_RESULT or GL_QUERY_RESULT_AVAILABLE.
            /// </para>
            /// </param>
            /// <param name="params">
            /// <para>
            /// If a buffer is bound to the GL_QUERY_RESULT_BUFFER target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to GL_QUERY_RESULT_BUFFER, then params is treated as an address in client memory of a variable to receive the resulting data.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_disjoint_timer_query", Version = "", EntryPoint = "glGetQueryObjectivEXT")]
            [CLSCompliant(false)]
            public static void GetQueryObject(Int32 id, OpenTK.Graphics.ES30.GetQueryObjectParam pname, [OutAttribute] out Int32 @params) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_disjoint_timer_query]
            /// Return parameters of a query object
            /// </summary>
            /// <param name="id">
            /// <para>
            /// Specifies the name of a query object.
            /// </para>
            /// </param>
            /// <param name="pname">
            /// <para>
            /// Specifies the symbolic name of a query object parameter. Accepted values are GL_QUERY_RESULT or GL_QUERY_RESULT_AVAILABLE.
            /// </para>
            /// </param>
            /// <param name="params">
            /// <para>
            /// If a buffer is bound to the GL_QUERY_RESULT_BUFFER target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to GL_QUERY_RESULT_BUFFER, then params is treated as an address in client memory of a variable to receive the resulting data.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_disjoint_timer_query", Version = "", EntryPoint = "glGetQueryObjectivEXT")]
            [CLSCompliant(false)]
            public static unsafe void GetQueryObject(Int32 id, OpenTK.Graphics.ES30.GetQueryObjectParam pname, [OutAttribute] Int32* @params) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_disjoint_timer_query]
            /// Return parameters of a query object
            /// </summary>
            /// <param name="id">
            /// <para>
            /// Specifies the name of a query object.
            /// </para>
            /// </param>
            /// <param name="pname">
            /// <para>
            /// Specifies the symbolic name of a query object parameter. Accepted values are GL_QUERY_RESULT or GL_QUERY_RESULT_AVAILABLE.
            /// </para>
            /// </param>
            /// <param name="params">
            /// <para>
            /// If a buffer is bound to the GL_QUERY_RESULT_BUFFER target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to GL_QUERY_RESULT_BUFFER, then params is treated as an address in client memory of a variable to receive the resulting data.
            /// </para>
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_disjoint_timer_query", Version = "", EntryPoint = "glGetQueryObjectivEXT")]
            [CLSCompliant(false)]
            public static void GetQueryObject(UInt32 id, OpenTK.Graphics.ES30.All pname, [OutAttribute] Int32[] @params) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_disjoint_timer_query]
            /// Return parameters of a query object
            /// </summary>
            /// <param name="id">
            /// <para>
            /// Specifies the name of a query object.
            /// </para>
            /// </param>
            /// <param name="pname">
            /// <para>
            /// Specifies the symbolic name of a query object parameter. Accepted values are GL_QUERY_RESULT or GL_QUERY_RESULT_AVAILABLE.
            /// </para>
            /// </param>
            /// <param name="params">
            /// <para>
            /// If a buffer is bound to the GL_QUERY_RESULT_BUFFER target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to GL_QUERY_RESULT_BUFFER, then params is treated as an address in client memory of a variable to receive the resulting data.
            /// </para>
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_disjoint_timer_query", Version = "", EntryPoint = "glGetQueryObjectivEXT")]
            [CLSCompliant(false)]
            public static void GetQueryObject(UInt32 id, OpenTK.Graphics.ES30.All pname, [OutAttribute] out Int32 @params) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_disjoint_timer_query]
            /// Return parameters of a query object
            /// </summary>
            /// <param name="id">
            /// <para>
            /// Specifies the name of a query object.
            /// </para>
            /// </param>
            /// <param name="pname">
            /// <para>
            /// Specifies the symbolic name of a query object parameter. Accepted values are GL_QUERY_RESULT or GL_QUERY_RESULT_AVAILABLE.
            /// </para>
            /// </param>
            /// <param name="params">
            /// <para>
            /// If a buffer is bound to the GL_QUERY_RESULT_BUFFER target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to GL_QUERY_RESULT_BUFFER, then params is treated as an address in client memory of a variable to receive the resulting data.
            /// </para>
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_disjoint_timer_query", Version = "", EntryPoint = "glGetQueryObjectivEXT")]
            [CLSCompliant(false)]
            public static unsafe void GetQueryObject(UInt32 id, OpenTK.Graphics.ES30.All pname, [OutAttribute] Int32* @params) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_disjoint_timer_query]
            /// Return parameters of a query object
            /// </summary>
            /// <param name="id">
            /// <para>
            /// Specifies the name of a query object.
            /// </para>
            /// </param>
            /// <param name="pname">
            /// <para>
            /// Specifies the symbolic name of a query object parameter. Accepted values are GL_QUERY_RESULT or GL_QUERY_RESULT_AVAILABLE.
            /// </para>
            /// </param>
            /// <param name="params">
            /// <para>
            /// If a buffer is bound to the GL_QUERY_RESULT_BUFFER target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to GL_QUERY_RESULT_BUFFER, then params is treated as an address in client memory of a variable to receive the resulting data.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_disjoint_timer_query", Version = "", EntryPoint = "glGetQueryObjectivEXT")]
            [CLSCompliant(false)]
            public static void GetQueryObject(UInt32 id, OpenTK.Graphics.ES30.GetQueryObjectParam pname, [OutAttribute] Int32[] @params) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_disjoint_timer_query]
            /// Return parameters of a query object
            /// </summary>
            /// <param name="id">
            /// <para>
            /// Specifies the name of a query object.
            /// </para>
            /// </param>
            /// <param name="pname">
            /// <para>
            /// Specifies the symbolic name of a query object parameter. Accepted values are GL_QUERY_RESULT or GL_QUERY_RESULT_AVAILABLE.
            /// </para>
            /// </param>
            /// <param name="params">
            /// <para>
            /// If a buffer is bound to the GL_QUERY_RESULT_BUFFER target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to GL_QUERY_RESULT_BUFFER, then params is treated as an address in client memory of a variable to receive the resulting data.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_disjoint_timer_query", Version = "", EntryPoint = "glGetQueryObjectivEXT")]
            [CLSCompliant(false)]
            public static void GetQueryObject(UInt32 id, OpenTK.Graphics.ES30.GetQueryObjectParam pname, [OutAttribute] out Int32 @params) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_disjoint_timer_query]
            /// Return parameters of a query object
            /// </summary>
            /// <param name="id">
            /// <para>
            /// Specifies the name of a query object.
            /// </para>
            /// </param>
            /// <param name="pname">
            /// <para>
            /// Specifies the symbolic name of a query object parameter. Accepted values are GL_QUERY_RESULT or GL_QUERY_RESULT_AVAILABLE.
            /// </para>
            /// </param>
            /// <param name="params">
            /// <para>
            /// If a buffer is bound to the GL_QUERY_RESULT_BUFFER target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to GL_QUERY_RESULT_BUFFER, then params is treated as an address in client memory of a variable to receive the resulting data.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_disjoint_timer_query", Version = "", EntryPoint = "glGetQueryObjectivEXT")]
            [CLSCompliant(false)]
            public static unsafe void GetQueryObject(UInt32 id, OpenTK.Graphics.ES30.GetQueryObjectParam pname, [OutAttribute] Int32* @params) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_disjoint_timer_query]
            /// Return parameters of a query object
            /// </summary>
            /// <param name="id">
            /// <para>
            /// Specifies the name of a query object.
            /// </para>
            /// </param>
            /// <param name="pname">
            /// <para>
            /// Specifies the symbolic name of a query object parameter. Accepted values are GL_QUERY_RESULT or GL_QUERY_RESULT_AVAILABLE.
            /// </para>
            /// </param>
            /// <param name="params">
            /// <para>
            /// If a buffer is bound to the GL_QUERY_RESULT_BUFFER target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to GL_QUERY_RESULT_BUFFER, then params is treated as an address in client memory of a variable to receive the resulting data.
            /// </para>
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_disjoint_timer_query", Version = "", EntryPoint = "glGetQueryObjectui64vEXT")]
            [CLSCompliant(false)]
            public static void GetQueryObject(UInt32 id, OpenTK.Graphics.ES30.All pname, [OutAttribute] UInt64[] @params) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_disjoint_timer_query]
            /// Return parameters of a query object
            /// </summary>
            /// <param name="id">
            /// <para>
            /// Specifies the name of a query object.
            /// </para>
            /// </param>
            /// <param name="pname">
            /// <para>
            /// Specifies the symbolic name of a query object parameter. Accepted values are GL_QUERY_RESULT or GL_QUERY_RESULT_AVAILABLE.
            /// </para>
            /// </param>
            /// <param name="params">
            /// <para>
            /// If a buffer is bound to the GL_QUERY_RESULT_BUFFER target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to GL_QUERY_RESULT_BUFFER, then params is treated as an address in client memory of a variable to receive the resulting data.
            /// </para>
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_disjoint_timer_query", Version = "", EntryPoint = "glGetQueryObjectui64vEXT")]
            [CLSCompliant(false)]
            public static void GetQueryObject(UInt32 id, OpenTK.Graphics.ES30.All pname, [OutAttribute] out UInt64 @params) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_disjoint_timer_query]
            /// Return parameters of a query object
            /// </summary>
            /// <param name="id">
            /// <para>
            /// Specifies the name of a query object.
            /// </para>
            /// </param>
            /// <param name="pname">
            /// <para>
            /// Specifies the symbolic name of a query object parameter. Accepted values are GL_QUERY_RESULT or GL_QUERY_RESULT_AVAILABLE.
            /// </para>
            /// </param>
            /// <param name="params">
            /// <para>
            /// If a buffer is bound to the GL_QUERY_RESULT_BUFFER target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to GL_QUERY_RESULT_BUFFER, then params is treated as an address in client memory of a variable to receive the resulting data.
            /// </para>
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_disjoint_timer_query", Version = "", EntryPoint = "glGetQueryObjectui64vEXT")]
            [CLSCompliant(false)]
            public static unsafe void GetQueryObject(UInt32 id, OpenTK.Graphics.ES30.All pname, [OutAttribute] UInt64* @params) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_disjoint_timer_query]
            /// Return parameters of a query object
            /// </summary>
            /// <param name="id">
            /// <para>
            /// Specifies the name of a query object.
            /// </para>
            /// </param>
            /// <param name="pname">
            /// <para>
            /// Specifies the symbolic name of a query object parameter. Accepted values are GL_QUERY_RESULT or GL_QUERY_RESULT_AVAILABLE.
            /// </para>
            /// </param>
            /// <param name="params">
            /// <para>
            /// If a buffer is bound to the GL_QUERY_RESULT_BUFFER target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to GL_QUERY_RESULT_BUFFER, then params is treated as an address in client memory of a variable to receive the resulting data.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_disjoint_timer_query", Version = "", EntryPoint = "glGetQueryObjectui64vEXT")]
            [CLSCompliant(false)]
            public static void GetQueryObject(UInt32 id, OpenTK.Graphics.ES30.GetQueryObjectParam pname, [OutAttribute] UInt64[] @params) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_disjoint_timer_query]
            /// Return parameters of a query object
            /// </summary>
            /// <param name="id">
            /// <para>
            /// Specifies the name of a query object.
            /// </para>
            /// </param>
            /// <param name="pname">
            /// <para>
            /// Specifies the symbolic name of a query object parameter. Accepted values are GL_QUERY_RESULT or GL_QUERY_RESULT_AVAILABLE.
            /// </para>
            /// </param>
            /// <param name="params">
            /// <para>
            /// If a buffer is bound to the GL_QUERY_RESULT_BUFFER target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to GL_QUERY_RESULT_BUFFER, then params is treated as an address in client memory of a variable to receive the resulting data.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_disjoint_timer_query", Version = "", EntryPoint = "glGetQueryObjectui64vEXT")]
            [CLSCompliant(false)]
            public static void GetQueryObject(UInt32 id, OpenTK.Graphics.ES30.GetQueryObjectParam pname, [OutAttribute] out UInt64 @params) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_disjoint_timer_query]
            /// Return parameters of a query object
            /// </summary>
            /// <param name="id">
            /// <para>
            /// Specifies the name of a query object.
            /// </para>
            /// </param>
            /// <param name="pname">
            /// <para>
            /// Specifies the symbolic name of a query object parameter. Accepted values are GL_QUERY_RESULT or GL_QUERY_RESULT_AVAILABLE.
            /// </para>
            /// </param>
            /// <param name="params">
            /// <para>
            /// If a buffer is bound to the GL_QUERY_RESULT_BUFFER target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to GL_QUERY_RESULT_BUFFER, then params is treated as an address in client memory of a variable to receive the resulting data.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_disjoint_timer_query", Version = "", EntryPoint = "glGetQueryObjectui64vEXT")]
            [CLSCompliant(false)]
            public static unsafe void GetQueryObject(UInt32 id, OpenTK.Graphics.ES30.GetQueryObjectParam pname, [OutAttribute] UInt64* @params) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_disjoint_timer_query|EXT_occlusion_query_boolean]
            /// Return parameters of a query object
            /// </summary>
            /// <param name="id">
            /// <para>
            /// Specifies the name of a query object.
            /// </para>
            /// </param>
            /// <param name="pname">
            /// <para>
            /// Specifies the symbolic name of a query object parameter. Accepted values are GL_QUERY_RESULT or GL_QUERY_RESULT_AVAILABLE.
            /// </para>
            /// </param>
            /// <param name="params">
            /// <para>
            /// If a buffer is bound to the GL_QUERY_RESULT_BUFFER target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to GL_QUERY_RESULT_BUFFER, then params is treated as an address in client memory of a variable to receive the resulting data.
            /// </para>
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_disjoint_timer_query|EXT_occlusion_query_boolean", Version = "", EntryPoint = "glGetQueryObjectuivEXT")]
            [CLSCompliant(false)]
            public static void GetQueryObject(UInt32 id, OpenTK.Graphics.ES30.All pname, [OutAttribute] UInt32[] @params) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_disjoint_timer_query|EXT_occlusion_query_boolean]
            /// Return parameters of a query object
            /// </summary>
            /// <param name="id">
            /// <para>
            /// Specifies the name of a query object.
            /// </para>
            /// </param>
            /// <param name="pname">
            /// <para>
            /// Specifies the symbolic name of a query object parameter. Accepted values are GL_QUERY_RESULT or GL_QUERY_RESULT_AVAILABLE.
            /// </para>
            /// </param>
            /// <param name="params">
            /// <para>
            /// If a buffer is bound to the GL_QUERY_RESULT_BUFFER target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to GL_QUERY_RESULT_BUFFER, then params is treated as an address in client memory of a variable to receive the resulting data.
            /// </para>
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_disjoint_timer_query|EXT_occlusion_query_boolean", Version = "", EntryPoint = "glGetQueryObjectuivEXT")]
            [CLSCompliant(false)]
            public static void GetQueryObject(UInt32 id, OpenTK.Graphics.ES30.All pname, [OutAttribute] out UInt32 @params) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_disjoint_timer_query|EXT_occlusion_query_boolean]
            /// Return parameters of a query object
            /// </summary>
            /// <param name="id">
            /// <para>
            /// Specifies the name of a query object.
            /// </para>
            /// </param>
            /// <param name="pname">
            /// <para>
            /// Specifies the symbolic name of a query object parameter. Accepted values are GL_QUERY_RESULT or GL_QUERY_RESULT_AVAILABLE.
            /// </para>
            /// </param>
            /// <param name="params">
            /// <para>
            /// If a buffer is bound to the GL_QUERY_RESULT_BUFFER target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to GL_QUERY_RESULT_BUFFER, then params is treated as an address in client memory of a variable to receive the resulting data.
            /// </para>
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_disjoint_timer_query|EXT_occlusion_query_boolean", Version = "", EntryPoint = "glGetQueryObjectuivEXT")]
            [CLSCompliant(false)]
            public static unsafe void GetQueryObject(UInt32 id, OpenTK.Graphics.ES30.All pname, [OutAttribute] UInt32* @params) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_disjoint_timer_query|EXT_occlusion_query_boolean]
            /// Return parameters of a query object
            /// </summary>
            /// <param name="id">
            /// <para>
            /// Specifies the name of a query object.
            /// </para>
            /// </param>
            /// <param name="pname">
            /// <para>
            /// Specifies the symbolic name of a query object parameter. Accepted values are GL_QUERY_RESULT or GL_QUERY_RESULT_AVAILABLE.
            /// </para>
            /// </param>
            /// <param name="params">
            /// <para>
            /// If a buffer is bound to the GL_QUERY_RESULT_BUFFER target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to GL_QUERY_RESULT_BUFFER, then params is treated as an address in client memory of a variable to receive the resulting data.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_disjoint_timer_query|EXT_occlusion_query_boolean", Version = "", EntryPoint = "glGetQueryObjectuivEXT")]
            [CLSCompliant(false)]
            public static void GetQueryObject(UInt32 id, OpenTK.Graphics.ES30.GetQueryObjectParam pname, [OutAttribute] UInt32[] @params) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_disjoint_timer_query|EXT_occlusion_query_boolean]
            /// Return parameters of a query object
            /// </summary>
            /// <param name="id">
            /// <para>
            /// Specifies the name of a query object.
            /// </para>
            /// </param>
            /// <param name="pname">
            /// <para>
            /// Specifies the symbolic name of a query object parameter. Accepted values are GL_QUERY_RESULT or GL_QUERY_RESULT_AVAILABLE.
            /// </para>
            /// </param>
            /// <param name="params">
            /// <para>
            /// If a buffer is bound to the GL_QUERY_RESULT_BUFFER target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to GL_QUERY_RESULT_BUFFER, then params is treated as an address in client memory of a variable to receive the resulting data.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_disjoint_timer_query|EXT_occlusion_query_boolean", Version = "", EntryPoint = "glGetQueryObjectuivEXT")]
            [CLSCompliant(false)]
            public static void GetQueryObject(UInt32 id, OpenTK.Graphics.ES30.GetQueryObjectParam pname, [OutAttribute] out UInt32 @params) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_disjoint_timer_query|EXT_occlusion_query_boolean]
            /// Return parameters of a query object
            /// </summary>
            /// <param name="id">
            /// <para>
            /// Specifies the name of a query object.
            /// </para>
            /// </param>
            /// <param name="pname">
            /// <para>
            /// Specifies the symbolic name of a query object parameter. Accepted values are GL_QUERY_RESULT or GL_QUERY_RESULT_AVAILABLE.
            /// </para>
            /// </param>
            /// <param name="params">
            /// <para>
            /// If a buffer is bound to the GL_QUERY_RESULT_BUFFER target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to GL_QUERY_RESULT_BUFFER, then params is treated as an address in client memory of a variable to receive the resulting data.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_disjoint_timer_query|EXT_occlusion_query_boolean", Version = "", EntryPoint = "glGetQueryObjectuivEXT")]
            [CLSCompliant(false)]
            public static unsafe void GetQueryObject(UInt32 id, OpenTK.Graphics.ES30.GetQueryObjectParam pname, [OutAttribute] UInt32* @params) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_debug_marker]</summary>
            [AutoGenerated(Category = "EXT_debug_marker", Version = "", EntryPoint = "glInsertEventMarkerEXT")]
            public static void InsertEventMarker(Int32 length, String marker) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Determine if a name corresponds to a program pipeline object
            /// </summary>
            /// <param name="pipeline">
            /// <para>
            /// Specifies a value that may be the name of a program pipeline object.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glIsProgramPipelineEXT")]
            [CLSCompliant(false)]
            public static bool IsProgramPipeline(Int32 pipeline) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Determine if a name corresponds to a program pipeline object
            /// </summary>
            /// <param name="pipeline">
            /// <para>
            /// Specifies a value that may be the name of a program pipeline object.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glIsProgramPipelineEXT")]
            [CLSCompliant(false)]
            public static bool IsProgramPipeline(UInt32 pipeline) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_disjoint_timer_query|EXT_occlusion_query_boolean]
            /// Determine if a name corresponds to a query object
            /// </summary>
            /// <param name="id">
            /// <para>
            /// Specifies a value that may be the name of a query object.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_disjoint_timer_query|EXT_occlusion_query_boolean", Version = "", EntryPoint = "glIsQueryEXT")]
            [CLSCompliant(false)]
            public static bool IsQuery(Int32 id) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_disjoint_timer_query|EXT_occlusion_query_boolean]
            /// Determine if a name corresponds to a query object
            /// </summary>
            /// <param name="id">
            /// <para>
            /// Specifies a value that may be the name of a query object.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_disjoint_timer_query|EXT_occlusion_query_boolean", Version = "", EntryPoint = "glIsQueryEXT")]
            [CLSCompliant(false)]
            public static bool IsQuery(UInt32 id) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_debug_label]</summary>
            [AutoGenerated(Category = "EXT_debug_label", Version = "", EntryPoint = "glLabelObjectEXT")]
            [CLSCompliant(false)]
            public static void LabelObject(OpenTK.Graphics.ES30.All type, Int32 @object, Int32 length, String label) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_debug_label]</summary>
            [AutoGenerated(Category = "EXT_debug_label", Version = "", EntryPoint = "glLabelObjectEXT")]
            [CLSCompliant(false)]
            public static void LabelObject(OpenTK.Graphics.ES30.All type, UInt32 @object, Int32 length, String label) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_map_buffer_range]
            /// Map a section of a buffer object's data store
            /// </summary>
            /// <param name="target">
            /// <para>
            /// Specifies a binding to which the target buffer is bound.
            /// </para>
            /// </param>
            /// <param name="offset">
            /// <para>
            /// Specifies a the starting offset within the buffer of the range to be mapped.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// Specifies a length of the range to be mapped.
            /// </para>
            /// </param>
            /// <param name="access">
            /// <para>
            /// Specifies a combination of access flags indicating the desired access to the range.
            /// </para>
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_map_buffer_range", Version = "", EntryPoint = "glMapBufferRangeEXT")]
            [CLSCompliant(false)]
            public static IntPtr MapBufferRange(OpenTK.Graphics.ES30.All target, IntPtr offset, IntPtr length, Int32 access) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_map_buffer_range]
            /// Map a section of a buffer object's data store
            /// </summary>
            /// <param name="target">
            /// <para>
            /// Specifies a binding to which the target buffer is bound.
            /// </para>
            /// </param>
            /// <param name="offset">
            /// <para>
            /// Specifies a the starting offset within the buffer of the range to be mapped.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// Specifies a length of the range to be mapped.
            /// </para>
            /// </param>
            /// <param name="access">
            /// <para>
            /// Specifies a combination of access flags indicating the desired access to the range.
            /// </para>
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_map_buffer_range", Version = "", EntryPoint = "glMapBufferRangeEXT")]
            [CLSCompliant(false)]
            public static IntPtr MapBufferRange(OpenTK.Graphics.ES30.All target, IntPtr offset, IntPtr length, UInt32 access) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_map_buffer_range]
            /// Map a section of a buffer object's data store
            /// </summary>
            /// <param name="target">
            /// <para>
            /// Specifies a binding to which the target buffer is bound.
            /// </para>
            /// </param>
            /// <param name="offset">
            /// <para>
            /// Specifies a the starting offset within the buffer of the range to be mapped.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// Specifies a length of the range to be mapped.
            /// </para>
            /// </param>
            /// <param name="access">
            /// <para>
            /// Specifies a combination of access flags indicating the desired access to the range.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_map_buffer_range", Version = "", EntryPoint = "glMapBufferRangeEXT")]
            [CLSCompliant(false)]
            public static IntPtr MapBufferRange(OpenTK.Graphics.ES30.BufferTarget target, IntPtr offset, IntPtr length, Int32 access) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_map_buffer_range]
            /// Map a section of a buffer object's data store
            /// </summary>
            /// <param name="target">
            /// <para>
            /// Specifies a binding to which the target buffer is bound.
            /// </para>
            /// </param>
            /// <param name="offset">
            /// <para>
            /// Specifies a the starting offset within the buffer of the range to be mapped.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// Specifies a length of the range to be mapped.
            /// </para>
            /// </param>
            /// <param name="access">
            /// <para>
            /// Specifies a combination of access flags indicating the desired access to the range.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_map_buffer_range", Version = "", EntryPoint = "glMapBufferRangeEXT")]
            [CLSCompliant(false)]
            public static IntPtr MapBufferRange(OpenTK.Graphics.ES30.BufferTarget target, IntPtr offset, IntPtr length, UInt32 access) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives from array data
            /// </summary>
            /// <param name="mode">
            /// <para>
            /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
            /// </para>
            /// </param>
            /// <param name="first">
            /// <para>
            /// Points to an array of starting indices in the enabled arrays.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// Points to an array of the number of indices to be rendered.
            /// </para>
            /// </param>
            /// <param name="drawcount">
            /// <para>
            /// Specifies the size of the first and count
            /// </para>
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_multi_draw_arrays", Version = "", EntryPoint = "glMultiDrawArraysEXT")]
            [CLSCompliant(false)]
            public static void MultiDrawArrays(OpenTK.Graphics.ES30.All mode, Int32[] first, Int32[] count, Int32 primcount) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives from array data
            /// </summary>
            /// <param name="mode">
            /// <para>
            /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
            /// </para>
            /// </param>
            /// <param name="first">
            /// <para>
            /// Points to an array of starting indices in the enabled arrays.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// Points to an array of the number of indices to be rendered.
            /// </para>
            /// </param>
            /// <param name="drawcount">
            /// <para>
            /// Specifies the size of the first and count
            /// </para>
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_multi_draw_arrays", Version = "", EntryPoint = "glMultiDrawArraysEXT")]
            [CLSCompliant(false)]
            public static void MultiDrawArrays(OpenTK.Graphics.ES30.All mode, ref Int32 first, ref Int32 count, Int32 primcount) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives from array data
            /// </summary>
            /// <param name="mode">
            /// <para>
            /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
            /// </para>
            /// </param>
            /// <param name="first">
            /// <para>
            /// Points to an array of starting indices in the enabled arrays.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// Points to an array of the number of indices to be rendered.
            /// </para>
            /// </param>
            /// <param name="drawcount">
            /// <para>
            /// Specifies the size of the first and count
            /// </para>
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_multi_draw_arrays", Version = "", EntryPoint = "glMultiDrawArraysEXT")]
            [CLSCompliant(false)]
            public static unsafe void MultiDrawArrays(OpenTK.Graphics.ES30.All mode, Int32* first, Int32* count, Int32 primcount) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives from array data
            /// </summary>
            /// <param name="mode">
            /// <para>
            /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
            /// </para>
            /// </param>
            /// <param name="first">
            /// <para>
            /// Points to an array of starting indices in the enabled arrays.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// Points to an array of the number of indices to be rendered.
            /// </para>
            /// </param>
            /// <param name="drawcount">
            /// <para>
            /// Specifies the size of the first and count
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_multi_draw_arrays", Version = "", EntryPoint = "glMultiDrawArraysEXT")]
            [CLSCompliant(false)]
            public static void MultiDrawArrays(OpenTK.Graphics.ES30.PrimitiveType mode, Int32[] first, Int32[] count, Int32 primcount) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives from array data
            /// </summary>
            /// <param name="mode">
            /// <para>
            /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
            /// </para>
            /// </param>
            /// <param name="first">
            /// <para>
            /// Points to an array of starting indices in the enabled arrays.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// Points to an array of the number of indices to be rendered.
            /// </para>
            /// </param>
            /// <param name="drawcount">
            /// <para>
            /// Specifies the size of the first and count
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_multi_draw_arrays", Version = "", EntryPoint = "glMultiDrawArraysEXT")]
            [CLSCompliant(false)]
            public static void MultiDrawArrays(OpenTK.Graphics.ES30.PrimitiveType mode, ref Int32 first, ref Int32 count, Int32 primcount) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives from array data
            /// </summary>
            /// <param name="mode">
            /// <para>
            /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
            /// </para>
            /// </param>
            /// <param name="first">
            /// <para>
            /// Points to an array of starting indices in the enabled arrays.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// Points to an array of the number of indices to be rendered.
            /// </para>
            /// </param>
            /// <param name="drawcount">
            /// <para>
            /// Specifies the size of the first and count
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_multi_draw_arrays", Version = "", EntryPoint = "glMultiDrawArraysEXT")]
            [CLSCompliant(false)]
            public static unsafe void MultiDrawArrays(OpenTK.Graphics.ES30.PrimitiveType mode, Int32* first, Int32* count, Int32 primcount) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode">
            /// <para>
            /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// Points to an array of the elements counts.
            /// </para>
            /// </param>
            /// <param name="type">
            /// <para>
            /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
            /// </para>
            /// </param>
            /// <param name="indices">
            /// <para>
            /// Specifies a pointer to the location where the indices are stored.
            /// </para>
            /// </param>
            /// <param name="drawcount">
            /// <para>
            /// Specifies the size of the count and indices arrays.
            /// </para>
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_multi_draw_arrays", Version = "", EntryPoint = "glMultiDrawElementsEXT")]
            [CLSCompliant(false)]
            public static void MultiDrawElements(OpenTK.Graphics.ES30.All mode, Int32[] count, OpenTK.Graphics.ES30.All type, IntPtr indices, Int32 primcount) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode">
            /// <para>
            /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// Points to an array of the elements counts.
            /// </para>
            /// </param>
            /// <param name="type">
            /// <para>
            /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
            /// </para>
            /// </param>
            /// <param name="indices">
            /// <para>
            /// Specifies a pointer to the location where the indices are stored.
            /// </para>
            /// </param>
            /// <param name="drawcount">
            /// <para>
            /// Specifies the size of the count and indices arrays.
            /// </para>
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_multi_draw_arrays", Version = "", EntryPoint = "glMultiDrawElementsEXT")]
            [CLSCompliant(false)]
            public static void MultiDrawElements<T3>(OpenTK.Graphics.ES30.All mode, Int32[] count, OpenTK.Graphics.ES30.All type, [InAttribute, OutAttribute] T3[] indices, Int32 primcount)
                where T3 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode">
            /// <para>
            /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// Points to an array of the elements counts.
            /// </para>
            /// </param>
            /// <param name="type">
            /// <para>
            /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
            /// </para>
            /// </param>
            /// <param name="indices">
            /// <para>
            /// Specifies a pointer to the location where the indices are stored.
            /// </para>
            /// </param>
            /// <param name="drawcount">
            /// <para>
            /// Specifies the size of the count and indices arrays.
            /// </para>
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_multi_draw_arrays", Version = "", EntryPoint = "glMultiDrawElementsEXT")]
            [CLSCompliant(false)]
            public static void MultiDrawElements<T3>(OpenTK.Graphics.ES30.All mode, Int32[] count, OpenTK.Graphics.ES30.All type, [InAttribute, OutAttribute] T3[,] indices, Int32 primcount)
                where T3 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode">
            /// <para>
            /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// Points to an array of the elements counts.
            /// </para>
            /// </param>
            /// <param name="type">
            /// <para>
            /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
            /// </para>
            /// </param>
            /// <param name="indices">
            /// <para>
            /// Specifies a pointer to the location where the indices are stored.
            /// </para>
            /// </param>
            /// <param name="drawcount">
            /// <para>
            /// Specifies the size of the count and indices arrays.
            /// </para>
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_multi_draw_arrays", Version = "", EntryPoint = "glMultiDrawElementsEXT")]
            [CLSCompliant(false)]
            public static void MultiDrawElements<T3>(OpenTK.Graphics.ES30.All mode, Int32[] count, OpenTK.Graphics.ES30.All type, [InAttribute, OutAttribute] T3[,,] indices, Int32 primcount)
                where T3 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode">
            /// <para>
            /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// Points to an array of the elements counts.
            /// </para>
            /// </param>
            /// <param name="type">
            /// <para>
            /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
            /// </para>
            /// </param>
            /// <param name="indices">
            /// <para>
            /// Specifies a pointer to the location where the indices are stored.
            /// </para>
            /// </param>
            /// <param name="drawcount">
            /// <para>
            /// Specifies the size of the count and indices arrays.
            /// </para>
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_multi_draw_arrays", Version = "", EntryPoint = "glMultiDrawElementsEXT")]
            [CLSCompliant(false)]
            public static void MultiDrawElements<T3>(OpenTK.Graphics.ES30.All mode, Int32[] count, OpenTK.Graphics.ES30.All type, [InAttribute, OutAttribute] ref T3 indices, Int32 primcount)
                where T3 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode">
            /// <para>
            /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// Points to an array of the elements counts.
            /// </para>
            /// </param>
            /// <param name="type">
            /// <para>
            /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
            /// </para>
            /// </param>
            /// <param name="indices">
            /// <para>
            /// Specifies a pointer to the location where the indices are stored.
            /// </para>
            /// </param>
            /// <param name="drawcount">
            /// <para>
            /// Specifies the size of the count and indices arrays.
            /// </para>
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_multi_draw_arrays", Version = "", EntryPoint = "glMultiDrawElementsEXT")]
            [CLSCompliant(false)]
            public static void MultiDrawElements(OpenTK.Graphics.ES30.All mode, ref Int32 count, OpenTK.Graphics.ES30.All type, IntPtr indices, Int32 primcount) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode">
            /// <para>
            /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// Points to an array of the elements counts.
            /// </para>
            /// </param>
            /// <param name="type">
            /// <para>
            /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
            /// </para>
            /// </param>
            /// <param name="indices">
            /// <para>
            /// Specifies a pointer to the location where the indices are stored.
            /// </para>
            /// </param>
            /// <param name="drawcount">
            /// <para>
            /// Specifies the size of the count and indices arrays.
            /// </para>
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_multi_draw_arrays", Version = "", EntryPoint = "glMultiDrawElementsEXT")]
            [CLSCompliant(false)]
            public static void MultiDrawElements<T3>(OpenTK.Graphics.ES30.All mode, ref Int32 count, OpenTK.Graphics.ES30.All type, [InAttribute, OutAttribute] T3[] indices, Int32 primcount)
                where T3 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode">
            /// <para>
            /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// Points to an array of the elements counts.
            /// </para>
            /// </param>
            /// <param name="type">
            /// <para>
            /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
            /// </para>
            /// </param>
            /// <param name="indices">
            /// <para>
            /// Specifies a pointer to the location where the indices are stored.
            /// </para>
            /// </param>
            /// <param name="drawcount">
            /// <para>
            /// Specifies the size of the count and indices arrays.
            /// </para>
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_multi_draw_arrays", Version = "", EntryPoint = "glMultiDrawElementsEXT")]
            [CLSCompliant(false)]
            public static void MultiDrawElements<T3>(OpenTK.Graphics.ES30.All mode, ref Int32 count, OpenTK.Graphics.ES30.All type, [InAttribute, OutAttribute] T3[,] indices, Int32 primcount)
                where T3 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode">
            /// <para>
            /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// Points to an array of the elements counts.
            /// </para>
            /// </param>
            /// <param name="type">
            /// <para>
            /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
            /// </para>
            /// </param>
            /// <param name="indices">
            /// <para>
            /// Specifies a pointer to the location where the indices are stored.
            /// </para>
            /// </param>
            /// <param name="drawcount">
            /// <para>
            /// Specifies the size of the count and indices arrays.
            /// </para>
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_multi_draw_arrays", Version = "", EntryPoint = "glMultiDrawElementsEXT")]
            [CLSCompliant(false)]
            public static void MultiDrawElements<T3>(OpenTK.Graphics.ES30.All mode, ref Int32 count, OpenTK.Graphics.ES30.All type, [InAttribute, OutAttribute] T3[,,] indices, Int32 primcount)
                where T3 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode">
            /// <para>
            /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// Points to an array of the elements counts.
            /// </para>
            /// </param>
            /// <param name="type">
            /// <para>
            /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
            /// </para>
            /// </param>
            /// <param name="indices">
            /// <para>
            /// Specifies a pointer to the location where the indices are stored.
            /// </para>
            /// </param>
            /// <param name="drawcount">
            /// <para>
            /// Specifies the size of the count and indices arrays.
            /// </para>
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_multi_draw_arrays", Version = "", EntryPoint = "glMultiDrawElementsEXT")]
            [CLSCompliant(false)]
            public static void MultiDrawElements<T3>(OpenTK.Graphics.ES30.All mode, ref Int32 count, OpenTK.Graphics.ES30.All type, [InAttribute, OutAttribute] ref T3 indices, Int32 primcount)
                where T3 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode">
            /// <para>
            /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// Points to an array of the elements counts.
            /// </para>
            /// </param>
            /// <param name="type">
            /// <para>
            /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
            /// </para>
            /// </param>
            /// <param name="indices">
            /// <para>
            /// Specifies a pointer to the location where the indices are stored.
            /// </para>
            /// </param>
            /// <param name="drawcount">
            /// <para>
            /// Specifies the size of the count and indices arrays.
            /// </para>
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_multi_draw_arrays", Version = "", EntryPoint = "glMultiDrawElementsEXT")]
            [CLSCompliant(false)]
            public static unsafe void MultiDrawElements(OpenTK.Graphics.ES30.All mode, Int32* count, OpenTK.Graphics.ES30.All type, IntPtr indices, Int32 primcount) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode">
            /// <para>
            /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// Points to an array of the elements counts.
            /// </para>
            /// </param>
            /// <param name="type">
            /// <para>
            /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
            /// </para>
            /// </param>
            /// <param name="indices">
            /// <para>
            /// Specifies a pointer to the location where the indices are stored.
            /// </para>
            /// </param>
            /// <param name="drawcount">
            /// <para>
            /// Specifies the size of the count and indices arrays.
            /// </para>
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_multi_draw_arrays", Version = "", EntryPoint = "glMultiDrawElementsEXT")]
            [CLSCompliant(false)]
            public static unsafe void MultiDrawElements<T3>(OpenTK.Graphics.ES30.All mode, Int32* count, OpenTK.Graphics.ES30.All type, [InAttribute, OutAttribute] T3[] indices, Int32 primcount)
                where T3 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode">
            /// <para>
            /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// Points to an array of the elements counts.
            /// </para>
            /// </param>
            /// <param name="type">
            /// <para>
            /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
            /// </para>
            /// </param>
            /// <param name="indices">
            /// <para>
            /// Specifies a pointer to the location where the indices are stored.
            /// </para>
            /// </param>
            /// <param name="drawcount">
            /// <para>
            /// Specifies the size of the count and indices arrays.
            /// </para>
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_multi_draw_arrays", Version = "", EntryPoint = "glMultiDrawElementsEXT")]
            [CLSCompliant(false)]
            public static unsafe void MultiDrawElements<T3>(OpenTK.Graphics.ES30.All mode, Int32* count, OpenTK.Graphics.ES30.All type, [InAttribute, OutAttribute] T3[,] indices, Int32 primcount)
                where T3 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode">
            /// <para>
            /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// Points to an array of the elements counts.
            /// </para>
            /// </param>
            /// <param name="type">
            /// <para>
            /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
            /// </para>
            /// </param>
            /// <param name="indices">
            /// <para>
            /// Specifies a pointer to the location where the indices are stored.
            /// </para>
            /// </param>
            /// <param name="drawcount">
            /// <para>
            /// Specifies the size of the count and indices arrays.
            /// </para>
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_multi_draw_arrays", Version = "", EntryPoint = "glMultiDrawElementsEXT")]
            [CLSCompliant(false)]
            public static unsafe void MultiDrawElements<T3>(OpenTK.Graphics.ES30.All mode, Int32* count, OpenTK.Graphics.ES30.All type, [InAttribute, OutAttribute] T3[,,] indices, Int32 primcount)
                where T3 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode">
            /// <para>
            /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// Points to an array of the elements counts.
            /// </para>
            /// </param>
            /// <param name="type">
            /// <para>
            /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
            /// </para>
            /// </param>
            /// <param name="indices">
            /// <para>
            /// Specifies a pointer to the location where the indices are stored.
            /// </para>
            /// </param>
            /// <param name="drawcount">
            /// <para>
            /// Specifies the size of the count and indices arrays.
            /// </para>
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_multi_draw_arrays", Version = "", EntryPoint = "glMultiDrawElementsEXT")]
            [CLSCompliant(false)]
            public static unsafe void MultiDrawElements<T3>(OpenTK.Graphics.ES30.All mode, Int32* count, OpenTK.Graphics.ES30.All type, [InAttribute, OutAttribute] ref T3 indices, Int32 primcount)
                where T3 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode">
            /// <para>
            /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// Points to an array of the elements counts.
            /// </para>
            /// </param>
            /// <param name="type">
            /// <para>
            /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
            /// </para>
            /// </param>
            /// <param name="indices">
            /// <para>
            /// Specifies a pointer to the location where the indices are stored.
            /// </para>
            /// </param>
            /// <param name="drawcount">
            /// <para>
            /// Specifies the size of the count and indices arrays.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_multi_draw_arrays", Version = "", EntryPoint = "glMultiDrawElementsEXT")]
            [CLSCompliant(false)]
            public static void MultiDrawElements(OpenTK.Graphics.ES30.PrimitiveType mode, Int32[] count, OpenTK.Graphics.ES30.DrawElementsType type, IntPtr indices, Int32 primcount) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode">
            /// <para>
            /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// Points to an array of the elements counts.
            /// </para>
            /// </param>
            /// <param name="type">
            /// <para>
            /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
            /// </para>
            /// </param>
            /// <param name="indices">
            /// <para>
            /// Specifies a pointer to the location where the indices are stored.
            /// </para>
            /// </param>
            /// <param name="drawcount">
            /// <para>
            /// Specifies the size of the count and indices arrays.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_multi_draw_arrays", Version = "", EntryPoint = "glMultiDrawElementsEXT")]
            [CLSCompliant(false)]
            public static void MultiDrawElements<T3>(OpenTK.Graphics.ES30.PrimitiveType mode, Int32[] count, OpenTK.Graphics.ES30.DrawElementsType type, [InAttribute, OutAttribute] T3[] indices, Int32 primcount)
                where T3 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode">
            /// <para>
            /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// Points to an array of the elements counts.
            /// </para>
            /// </param>
            /// <param name="type">
            /// <para>
            /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
            /// </para>
            /// </param>
            /// <param name="indices">
            /// <para>
            /// Specifies a pointer to the location where the indices are stored.
            /// </para>
            /// </param>
            /// <param name="drawcount">
            /// <para>
            /// Specifies the size of the count and indices arrays.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_multi_draw_arrays", Version = "", EntryPoint = "glMultiDrawElementsEXT")]
            [CLSCompliant(false)]
            public static void MultiDrawElements<T3>(OpenTK.Graphics.ES30.PrimitiveType mode, Int32[] count, OpenTK.Graphics.ES30.DrawElementsType type, [InAttribute, OutAttribute] T3[,] indices, Int32 primcount)
                where T3 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode">
            /// <para>
            /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// Points to an array of the elements counts.
            /// </para>
            /// </param>
            /// <param name="type">
            /// <para>
            /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
            /// </para>
            /// </param>
            /// <param name="indices">
            /// <para>
            /// Specifies a pointer to the location where the indices are stored.
            /// </para>
            /// </param>
            /// <param name="drawcount">
            /// <para>
            /// Specifies the size of the count and indices arrays.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_multi_draw_arrays", Version = "", EntryPoint = "glMultiDrawElementsEXT")]
            [CLSCompliant(false)]
            public static void MultiDrawElements<T3>(OpenTK.Graphics.ES30.PrimitiveType mode, Int32[] count, OpenTK.Graphics.ES30.DrawElementsType type, [InAttribute, OutAttribute] T3[,,] indices, Int32 primcount)
                where T3 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode">
            /// <para>
            /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// Points to an array of the elements counts.
            /// </para>
            /// </param>
            /// <param name="type">
            /// <para>
            /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
            /// </para>
            /// </param>
            /// <param name="indices">
            /// <para>
            /// Specifies a pointer to the location where the indices are stored.
            /// </para>
            /// </param>
            /// <param name="drawcount">
            /// <para>
            /// Specifies the size of the count and indices arrays.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_multi_draw_arrays", Version = "", EntryPoint = "glMultiDrawElementsEXT")]
            [CLSCompliant(false)]
            public static void MultiDrawElements<T3>(OpenTK.Graphics.ES30.PrimitiveType mode, Int32[] count, OpenTK.Graphics.ES30.DrawElementsType type, [InAttribute, OutAttribute] ref T3 indices, Int32 primcount)
                where T3 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode">
            /// <para>
            /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// Points to an array of the elements counts.
            /// </para>
            /// </param>
            /// <param name="type">
            /// <para>
            /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
            /// </para>
            /// </param>
            /// <param name="indices">
            /// <para>
            /// Specifies a pointer to the location where the indices are stored.
            /// </para>
            /// </param>
            /// <param name="drawcount">
            /// <para>
            /// Specifies the size of the count and indices arrays.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_multi_draw_arrays", Version = "", EntryPoint = "glMultiDrawElementsEXT")]
            [CLSCompliant(false)]
            public static void MultiDrawElements(OpenTK.Graphics.ES30.PrimitiveType mode, ref Int32 count, OpenTK.Graphics.ES30.DrawElementsType type, IntPtr indices, Int32 primcount) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode">
            /// <para>
            /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// Points to an array of the elements counts.
            /// </para>
            /// </param>
            /// <param name="type">
            /// <para>
            /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
            /// </para>
            /// </param>
            /// <param name="indices">
            /// <para>
            /// Specifies a pointer to the location where the indices are stored.
            /// </para>
            /// </param>
            /// <param name="drawcount">
            /// <para>
            /// Specifies the size of the count and indices arrays.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_multi_draw_arrays", Version = "", EntryPoint = "glMultiDrawElementsEXT")]
            [CLSCompliant(false)]
            public static void MultiDrawElements<T3>(OpenTK.Graphics.ES30.PrimitiveType mode, ref Int32 count, OpenTK.Graphics.ES30.DrawElementsType type, [InAttribute, OutAttribute] T3[] indices, Int32 primcount)
                where T3 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode">
            /// <para>
            /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// Points to an array of the elements counts.
            /// </para>
            /// </param>
            /// <param name="type">
            /// <para>
            /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
            /// </para>
            /// </param>
            /// <param name="indices">
            /// <para>
            /// Specifies a pointer to the location where the indices are stored.
            /// </para>
            /// </param>
            /// <param name="drawcount">
            /// <para>
            /// Specifies the size of the count and indices arrays.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_multi_draw_arrays", Version = "", EntryPoint = "glMultiDrawElementsEXT")]
            [CLSCompliant(false)]
            public static void MultiDrawElements<T3>(OpenTK.Graphics.ES30.PrimitiveType mode, ref Int32 count, OpenTK.Graphics.ES30.DrawElementsType type, [InAttribute, OutAttribute] T3[,] indices, Int32 primcount)
                where T3 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode">
            /// <para>
            /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// Points to an array of the elements counts.
            /// </para>
            /// </param>
            /// <param name="type">
            /// <para>
            /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
            /// </para>
            /// </param>
            /// <param name="indices">
            /// <para>
            /// Specifies a pointer to the location where the indices are stored.
            /// </para>
            /// </param>
            /// <param name="drawcount">
            /// <para>
            /// Specifies the size of the count and indices arrays.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_multi_draw_arrays", Version = "", EntryPoint = "glMultiDrawElementsEXT")]
            [CLSCompliant(false)]
            public static void MultiDrawElements<T3>(OpenTK.Graphics.ES30.PrimitiveType mode, ref Int32 count, OpenTK.Graphics.ES30.DrawElementsType type, [InAttribute, OutAttribute] T3[,,] indices, Int32 primcount)
                where T3 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode">
            /// <para>
            /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// Points to an array of the elements counts.
            /// </para>
            /// </param>
            /// <param name="type">
            /// <para>
            /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
            /// </para>
            /// </param>
            /// <param name="indices">
            /// <para>
            /// Specifies a pointer to the location where the indices are stored.
            /// </para>
            /// </param>
            /// <param name="drawcount">
            /// <para>
            /// Specifies the size of the count and indices arrays.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_multi_draw_arrays", Version = "", EntryPoint = "glMultiDrawElementsEXT")]
            [CLSCompliant(false)]
            public static void MultiDrawElements<T3>(OpenTK.Graphics.ES30.PrimitiveType mode, ref Int32 count, OpenTK.Graphics.ES30.DrawElementsType type, [InAttribute, OutAttribute] ref T3 indices, Int32 primcount)
                where T3 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode">
            /// <para>
            /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// Points to an array of the elements counts.
            /// </para>
            /// </param>
            /// <param name="type">
            /// <para>
            /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
            /// </para>
            /// </param>
            /// <param name="indices">
            /// <para>
            /// Specifies a pointer to the location where the indices are stored.
            /// </para>
            /// </param>
            /// <param name="drawcount">
            /// <para>
            /// Specifies the size of the count and indices arrays.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_multi_draw_arrays", Version = "", EntryPoint = "glMultiDrawElementsEXT")]
            [CLSCompliant(false)]
            public static unsafe void MultiDrawElements(OpenTK.Graphics.ES30.PrimitiveType mode, Int32* count, OpenTK.Graphics.ES30.DrawElementsType type, IntPtr indices, Int32 primcount) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode">
            /// <para>
            /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// Points to an array of the elements counts.
            /// </para>
            /// </param>
            /// <param name="type">
            /// <para>
            /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
            /// </para>
            /// </param>
            /// <param name="indices">
            /// <para>
            /// Specifies a pointer to the location where the indices are stored.
            /// </para>
            /// </param>
            /// <param name="drawcount">
            /// <para>
            /// Specifies the size of the count and indices arrays.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_multi_draw_arrays", Version = "", EntryPoint = "glMultiDrawElementsEXT")]
            [CLSCompliant(false)]
            public static unsafe void MultiDrawElements<T3>(OpenTK.Graphics.ES30.PrimitiveType mode, Int32* count, OpenTK.Graphics.ES30.DrawElementsType type, [InAttribute, OutAttribute] T3[] indices, Int32 primcount)
                where T3 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode">
            /// <para>
            /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// Points to an array of the elements counts.
            /// </para>
            /// </param>
            /// <param name="type">
            /// <para>
            /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
            /// </para>
            /// </param>
            /// <param name="indices">
            /// <para>
            /// Specifies a pointer to the location where the indices are stored.
            /// </para>
            /// </param>
            /// <param name="drawcount">
            /// <para>
            /// Specifies the size of the count and indices arrays.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_multi_draw_arrays", Version = "", EntryPoint = "glMultiDrawElementsEXT")]
            [CLSCompliant(false)]
            public static unsafe void MultiDrawElements<T3>(OpenTK.Graphics.ES30.PrimitiveType mode, Int32* count, OpenTK.Graphics.ES30.DrawElementsType type, [InAttribute, OutAttribute] T3[,] indices, Int32 primcount)
                where T3 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode">
            /// <para>
            /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// Points to an array of the elements counts.
            /// </para>
            /// </param>
            /// <param name="type">
            /// <para>
            /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
            /// </para>
            /// </param>
            /// <param name="indices">
            /// <para>
            /// Specifies a pointer to the location where the indices are stored.
            /// </para>
            /// </param>
            /// <param name="drawcount">
            /// <para>
            /// Specifies the size of the count and indices arrays.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_multi_draw_arrays", Version = "", EntryPoint = "glMultiDrawElementsEXT")]
            [CLSCompliant(false)]
            public static unsafe void MultiDrawElements<T3>(OpenTK.Graphics.ES30.PrimitiveType mode, Int32* count, OpenTK.Graphics.ES30.DrawElementsType type, [InAttribute, OutAttribute] T3[,,] indices, Int32 primcount)
                where T3 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode">
            /// <para>
            /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// Points to an array of the elements counts.
            /// </para>
            /// </param>
            /// <param name="type">
            /// <para>
            /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
            /// </para>
            /// </param>
            /// <param name="indices">
            /// <para>
            /// Specifies a pointer to the location where the indices are stored.
            /// </para>
            /// </param>
            /// <param name="drawcount">
            /// <para>
            /// Specifies the size of the count and indices arrays.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_multi_draw_arrays", Version = "", EntryPoint = "glMultiDrawElementsEXT")]
            [CLSCompliant(false)]
            public static unsafe void MultiDrawElements<T3>(OpenTK.Graphics.ES30.PrimitiveType mode, Int32* count, OpenTK.Graphics.ES30.DrawElementsType type, [InAttribute, OutAttribute] ref T3 indices, Int32 primcount)
                where T3 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_debug_marker]</summary>
            [AutoGenerated(Category = "EXT_debug_marker", Version = "", EntryPoint = "glPopGroupMarkerEXT")]
            public static void PopGroupMarker() { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify a parameter for a program object
            /// </summary>
            /// <param name="program">
            /// <para>
            /// Specifies the name of a program object whose parameter to modify.
            /// </para>
            /// </param>
            /// <param name="pname">
            /// <para>
            /// Specifies the name of the parameter to modify.
            /// </para>
            /// </param>
            /// <param name="value">
            /// <para>
            /// Specifies the new value of the parameter specified by pname for program.
            /// </para>
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramParameteriEXT")]
            [CLSCompliant(false)]
            public static void ProgramParameter(Int32 program, OpenTK.Graphics.ES30.All pname, Int32 value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify a parameter for a program object
            /// </summary>
            /// <param name="program">
            /// <para>
            /// Specifies the name of a program object whose parameter to modify.
            /// </para>
            /// </param>
            /// <param name="pname">
            /// <para>
            /// Specifies the name of the parameter to modify.
            /// </para>
            /// </param>
            /// <param name="value">
            /// <para>
            /// Specifies the new value of the parameter specified by pname for program.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramParameteriEXT")]
            [CLSCompliant(false)]
            public static void ProgramParameter(Int32 program, OpenTK.Graphics.ES30.ProgramParameterName pname, Int32 value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify a parameter for a program object
            /// </summary>
            /// <param name="program">
            /// <para>
            /// Specifies the name of a program object whose parameter to modify.
            /// </para>
            /// </param>
            /// <param name="pname">
            /// <para>
            /// Specifies the name of the parameter to modify.
            /// </para>
            /// </param>
            /// <param name="value">
            /// <para>
            /// Specifies the new value of the parameter specified by pname for program.
            /// </para>
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramParameteriEXT")]
            [CLSCompliant(false)]
            public static void ProgramParameter(UInt32 program, OpenTK.Graphics.ES30.All pname, Int32 value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify a parameter for a program object
            /// </summary>
            /// <param name="program">
            /// <para>
            /// Specifies the name of a program object whose parameter to modify.
            /// </para>
            /// </param>
            /// <param name="pname">
            /// <para>
            /// Specifies the name of the parameter to modify.
            /// </para>
            /// </param>
            /// <param name="value">
            /// <para>
            /// Specifies the new value of the parameter specified by pname for program.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramParameteriEXT")]
            [CLSCompliant(false)]
            public static void ProgramParameter(UInt32 program, OpenTK.Graphics.ES30.ProgramParameterName pname, Int32 value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// <para>
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="location">
            /// <para>
            /// Specifies the location of the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
            /// </para>
            /// <para>
            /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </para>
            /// </param>
            /// <param name="transpose">
            /// <para>
            /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            /// </para>
            /// </param>
            /// <param name="v0">
            /// <para>
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </para>
            /// </param>
            /// <param name="value">
            /// <para>
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform1fEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform1(Int32 program, Int32 location, Single v0) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// <para>
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="location">
            /// <para>
            /// Specifies the location of the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
            /// </para>
            /// <para>
            /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </para>
            /// </param>
            /// <param name="transpose">
            /// <para>
            /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            /// </para>
            /// </param>
            /// <param name="v0">
            /// <para>
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </para>
            /// </param>
            /// <param name="value">
            /// <para>
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform1fEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform1(UInt32 program, Int32 location, Single v0) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// <para>
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="location">
            /// <para>
            /// Specifies the location of the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
            /// </para>
            /// <para>
            /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </para>
            /// </param>
            /// <param name="transpose">
            /// <para>
            /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            /// </para>
            /// </param>
            /// <param name="v0">
            /// <para>
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </para>
            /// </param>
            /// <param name="value">
            /// <para>
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform1fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform1(Int32 program, Int32 location, Int32 count, Single[] value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// <para>
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="location">
            /// <para>
            /// Specifies the location of the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
            /// </para>
            /// <para>
            /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </para>
            /// </param>
            /// <param name="transpose">
            /// <para>
            /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            /// </para>
            /// </param>
            /// <param name="v0">
            /// <para>
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </para>
            /// </param>
            /// <param name="value">
            /// <para>
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform1fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform1(Int32 program, Int32 location, Int32 count, ref Single value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// <para>
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="location">
            /// <para>
            /// Specifies the location of the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
            /// </para>
            /// <para>
            /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </para>
            /// </param>
            /// <param name="transpose">
            /// <para>
            /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            /// </para>
            /// </param>
            /// <param name="v0">
            /// <para>
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </para>
            /// </param>
            /// <param name="value">
            /// <para>
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform1fvEXT")]
            [CLSCompliant(false)]
            public static unsafe void ProgramUniform1(Int32 program, Int32 location, Int32 count, Single* value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// <para>
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="location">
            /// <para>
            /// Specifies the location of the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
            /// </para>
            /// <para>
            /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </para>
            /// </param>
            /// <param name="transpose">
            /// <para>
            /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            /// </para>
            /// </param>
            /// <param name="v0">
            /// <para>
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </para>
            /// </param>
            /// <param name="value">
            /// <para>
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform1fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform1(UInt32 program, Int32 location, Int32 count, Single[] value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// <para>
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="location">
            /// <para>
            /// Specifies the location of the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
            /// </para>
            /// <para>
            /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </para>
            /// </param>
            /// <param name="transpose">
            /// <para>
            /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            /// </para>
            /// </param>
            /// <param name="v0">
            /// <para>
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </para>
            /// </param>
            /// <param name="value">
            /// <para>
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform1fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform1(UInt32 program, Int32 location, Int32 count, ref Single value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// <para>
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="location">
            /// <para>
            /// Specifies the location of the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
            /// </para>
            /// <para>
            /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </para>
            /// </param>
            /// <param name="transpose">
            /// <para>
            /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            /// </para>
            /// </param>
            /// <param name="v0">
            /// <para>
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </para>
            /// </param>
            /// <param name="value">
            /// <para>
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform1fvEXT")]
            [CLSCompliant(false)]
            public static unsafe void ProgramUniform1(UInt32 program, Int32 location, Int32 count, Single* value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// <para>
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="location">
            /// <para>
            /// Specifies the location of the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
            /// </para>
            /// <para>
            /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </para>
            /// </param>
            /// <param name="transpose">
            /// <para>
            /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            /// </para>
            /// </param>
            /// <param name="v0">
            /// <para>
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </para>
            /// </param>
            /// <param name="value">
            /// <para>
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform1iEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform1(Int32 program, Int32 location, Int32 v0) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// <para>
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="location">
            /// <para>
            /// Specifies the location of the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
            /// </para>
            /// <para>
            /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </para>
            /// </param>
            /// <param name="transpose">
            /// <para>
            /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            /// </para>
            /// </param>
            /// <param name="v0">
            /// <para>
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </para>
            /// </param>
            /// <param name="value">
            /// <para>
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform1iEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform1(UInt32 program, Int32 location, Int32 v0) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// <para>
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="location">
            /// <para>
            /// Specifies the location of the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
            /// </para>
            /// <para>
            /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </para>
            /// </param>
            /// <param name="transpose">
            /// <para>
            /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            /// </para>
            /// </param>
            /// <param name="v0">
            /// <para>
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </para>
            /// </param>
            /// <param name="value">
            /// <para>
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform1ivEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform1(Int32 program, Int32 location, Int32 count, Int32[] value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// <para>
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="location">
            /// <para>
            /// Specifies the location of the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
            /// </para>
            /// <para>
            /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </para>
            /// </param>
            /// <param name="transpose">
            /// <para>
            /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            /// </para>
            /// </param>
            /// <param name="v0">
            /// <para>
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </para>
            /// </param>
            /// <param name="value">
            /// <para>
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform1ivEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform1(Int32 program, Int32 location, Int32 count, ref Int32 value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// <para>
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="location">
            /// <para>
            /// Specifies the location of the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
            /// </para>
            /// <para>
            /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </para>
            /// </param>
            /// <param name="transpose">
            /// <para>
            /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            /// </para>
            /// </param>
            /// <param name="v0">
            /// <para>
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </para>
            /// </param>
            /// <param name="value">
            /// <para>
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform1ivEXT")]
            [CLSCompliant(false)]
            public static unsafe void ProgramUniform1(Int32 program, Int32 location, Int32 count, Int32* value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// <para>
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="location">
            /// <para>
            /// Specifies the location of the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
            /// </para>
            /// <para>
            /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </para>
            /// </param>
            /// <param name="transpose">
            /// <para>
            /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            /// </para>
            /// </param>
            /// <param name="v0">
            /// <para>
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </para>
            /// </param>
            /// <param name="value">
            /// <para>
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform1ivEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform1(UInt32 program, Int32 location, Int32 count, Int32[] value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// <para>
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="location">
            /// <para>
            /// Specifies the location of the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
            /// </para>
            /// <para>
            /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </para>
            /// </param>
            /// <param name="transpose">
            /// <para>
            /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            /// </para>
            /// </param>
            /// <param name="v0">
            /// <para>
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </para>
            /// </param>
            /// <param name="value">
            /// <para>
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform1ivEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform1(UInt32 program, Int32 location, Int32 count, ref Int32 value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// <para>
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="location">
            /// <para>
            /// Specifies the location of the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
            /// </para>
            /// <para>
            /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </para>
            /// </param>
            /// <param name="transpose">
            /// <para>
            /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            /// </para>
            /// </param>
            /// <param name="v0">
            /// <para>
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </para>
            /// </param>
            /// <param name="value">
            /// <para>
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform1ivEXT")]
            [CLSCompliant(false)]
            public static unsafe void ProgramUniform1(UInt32 program, Int32 location, Int32 count, Int32* value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// <para>
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="location">
            /// <para>
            /// Specifies the location of the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
            /// </para>
            /// <para>
            /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </para>
            /// </param>
            /// <param name="transpose">
            /// <para>
            /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            /// </para>
            /// </param>
            /// <param name="v0">
            /// <para>
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </para>
            /// </param>
            /// <param name="value">
            /// <para>
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform1uiEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform1(UInt32 program, Int32 location, UInt32 v0) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// <para>
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="location">
            /// <para>
            /// Specifies the location of the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
            /// </para>
            /// <para>
            /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </para>
            /// </param>
            /// <param name="transpose">
            /// <para>
            /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            /// </para>
            /// </param>
            /// <param name="v0">
            /// <para>
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </para>
            /// </param>
            /// <param name="value">
            /// <para>
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform1uivEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform1(UInt32 program, Int32 location, Int32 count, UInt32[] value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// <para>
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="location">
            /// <para>
            /// Specifies the location of the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
            /// </para>
            /// <para>
            /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </para>
            /// </param>
            /// <param name="transpose">
            /// <para>
            /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            /// </para>
            /// </param>
            /// <param name="v0">
            /// <para>
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </para>
            /// </param>
            /// <param name="value">
            /// <para>
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform1uivEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform1(UInt32 program, Int32 location, Int32 count, ref UInt32 value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// <para>
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="location">
            /// <para>
            /// Specifies the location of the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
            /// </para>
            /// <para>
            /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </para>
            /// </param>
            /// <param name="transpose">
            /// <para>
            /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            /// </para>
            /// </param>
            /// <param name="v0">
            /// <para>
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </para>
            /// </param>
            /// <param name="value">
            /// <para>
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform1uivEXT")]
            [CLSCompliant(false)]
            public static unsafe void ProgramUniform1(UInt32 program, Int32 location, Int32 count, UInt32* value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// <para>
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="location">
            /// <para>
            /// Specifies the location of the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
            /// </para>
            /// <para>
            /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </para>
            /// </param>
            /// <param name="transpose">
            /// <para>
            /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            /// </para>
            /// </param>
            /// <param name="v0">
            /// <para>
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </para>
            /// </param>
            /// <param name="value">
            /// <para>
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform2fEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform2(Int32 program, Int32 location, Single v0, Single v1) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// <para>
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="location">
            /// <para>
            /// Specifies the location of the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
            /// </para>
            /// <para>
            /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </para>
            /// </param>
            /// <param name="transpose">
            /// <para>
            /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            /// </para>
            /// </param>
            /// <param name="v0">
            /// <para>
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </para>
            /// </param>
            /// <param name="value">
            /// <para>
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform2fEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform2(UInt32 program, Int32 location, Single v0, Single v1) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// <para>
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="location">
            /// <para>
            /// Specifies the location of the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
            /// </para>
            /// <para>
            /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </para>
            /// </param>
            /// <param name="transpose">
            /// <para>
            /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            /// </para>
            /// </param>
            /// <param name="v0">
            /// <para>
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </para>
            /// </param>
            /// <param name="value">
            /// <para>
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform2fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform2(Int32 program, Int32 location, Int32 count, Single[] value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// <para>
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="location">
            /// <para>
            /// Specifies the location of the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
            /// </para>
            /// <para>
            /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </para>
            /// </param>
            /// <param name="transpose">
            /// <para>
            /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            /// </para>
            /// </param>
            /// <param name="v0">
            /// <para>
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </para>
            /// </param>
            /// <param name="value">
            /// <para>
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform2fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform2(Int32 program, Int32 location, Int32 count, ref Single value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// <para>
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="location">
            /// <para>
            /// Specifies the location of the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
            /// </para>
            /// <para>
            /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </para>
            /// </param>
            /// <param name="transpose">
            /// <para>
            /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            /// </para>
            /// </param>
            /// <param name="v0">
            /// <para>
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </para>
            /// </param>
            /// <param name="value">
            /// <para>
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform2fvEXT")]
            [CLSCompliant(false)]
            public static unsafe void ProgramUniform2(Int32 program, Int32 location, Int32 count, Single* value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// <para>
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="location">
            /// <para>
            /// Specifies the location of the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
            /// </para>
            /// <para>
            /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </para>
            /// </param>
            /// <param name="transpose">
            /// <para>
            /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            /// </para>
            /// </param>
            /// <param name="v0">
            /// <para>
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </para>
            /// </param>
            /// <param name="value">
            /// <para>
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform2fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform2(UInt32 program, Int32 location, Int32 count, Single[] value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// <para>
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="location">
            /// <para>
            /// Specifies the location of the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
            /// </para>
            /// <para>
            /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </para>
            /// </param>
            /// <param name="transpose">
            /// <para>
            /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            /// </para>
            /// </param>
            /// <param name="v0">
            /// <para>
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </para>
            /// </param>
            /// <param name="value">
            /// <para>
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform2fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform2(UInt32 program, Int32 location, Int32 count, ref Single value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// <para>
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="location">
            /// <para>
            /// Specifies the location of the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
            /// </para>
            /// <para>
            /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </para>
            /// </param>
            /// <param name="transpose">
            /// <para>
            /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            /// </para>
            /// </param>
            /// <param name="v0">
            /// <para>
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </para>
            /// </param>
            /// <param name="value">
            /// <para>
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform2fvEXT")]
            [CLSCompliant(false)]
            public static unsafe void ProgramUniform2(UInt32 program, Int32 location, Int32 count, Single* value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// <para>
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="location">
            /// <para>
            /// Specifies the location of the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
            /// </para>
            /// <para>
            /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </para>
            /// </param>
            /// <param name="transpose">
            /// <para>
            /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            /// </para>
            /// </param>
            /// <param name="v0">
            /// <para>
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </para>
            /// </param>
            /// <param name="value">
            /// <para>
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform2iEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform2(Int32 program, Int32 location, Int32 v0, Int32 v1) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// <para>
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="location">
            /// <para>
            /// Specifies the location of the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
            /// </para>
            /// <para>
            /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </para>
            /// </param>
            /// <param name="transpose">
            /// <para>
            /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            /// </para>
            /// </param>
            /// <param name="v0">
            /// <para>
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </para>
            /// </param>
            /// <param name="value">
            /// <para>
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform2iEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform2(UInt32 program, Int32 location, Int32 v0, Int32 v1) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// <para>
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="location">
            /// <para>
            /// Specifies the location of the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
            /// </para>
            /// <para>
            /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </para>
            /// </param>
            /// <param name="transpose">
            /// <para>
            /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            /// </para>
            /// </param>
            /// <param name="v0">
            /// <para>
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </para>
            /// </param>
            /// <param name="value">
            /// <para>
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform2ivEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform2(Int32 program, Int32 location, Int32 count, Int32[] value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// <para>
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="location">
            /// <para>
            /// Specifies the location of the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
            /// </para>
            /// <para>
            /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </para>
            /// </param>
            /// <param name="transpose">
            /// <para>
            /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            /// </para>
            /// </param>
            /// <param name="v0">
            /// <para>
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </para>
            /// </param>
            /// <param name="value">
            /// <para>
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform2ivEXT")]
            [CLSCompliant(false)]
            public static unsafe void ProgramUniform2(Int32 program, Int32 location, Int32 count, Int32* value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// <para>
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="location">
            /// <para>
            /// Specifies the location of the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
            /// </para>
            /// <para>
            /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </para>
            /// </param>
            /// <param name="transpose">
            /// <para>
            /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            /// </para>
            /// </param>
            /// <param name="v0">
            /// <para>
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </para>
            /// </param>
            /// <param name="value">
            /// <para>
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform2ivEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform2(UInt32 program, Int32 location, Int32 count, Int32[] value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// <para>
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="location">
            /// <para>
            /// Specifies the location of the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
            /// </para>
            /// <para>
            /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </para>
            /// </param>
            /// <param name="transpose">
            /// <para>
            /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            /// </para>
            /// </param>
            /// <param name="v0">
            /// <para>
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </para>
            /// </param>
            /// <param name="value">
            /// <para>
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform2ivEXT")]
            [CLSCompliant(false)]
            public static unsafe void ProgramUniform2(UInt32 program, Int32 location, Int32 count, Int32* value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// <para>
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="location">
            /// <para>
            /// Specifies the location of the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
            /// </para>
            /// <para>
            /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </para>
            /// </param>
            /// <param name="transpose">
            /// <para>
            /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            /// </para>
            /// </param>
            /// <param name="v0">
            /// <para>
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </para>
            /// </param>
            /// <param name="value">
            /// <para>
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform2uiEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform2(UInt32 program, Int32 location, UInt32 v0, UInt32 v1) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// <para>
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="location">
            /// <para>
            /// Specifies the location of the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
            /// </para>
            /// <para>
            /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </para>
            /// </param>
            /// <param name="transpose">
            /// <para>
            /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            /// </para>
            /// </param>
            /// <param name="v0">
            /// <para>
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </para>
            /// </param>
            /// <param name="value">
            /// <para>
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform2uivEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform2(UInt32 program, Int32 location, Int32 count, UInt32[] value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// <para>
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="location">
            /// <para>
            /// Specifies the location of the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
            /// </para>
            /// <para>
            /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </para>
            /// </param>
            /// <param name="transpose">
            /// <para>
            /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            /// </para>
            /// </param>
            /// <param name="v0">
            /// <para>
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </para>
            /// </param>
            /// <param name="value">
            /// <para>
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform2uivEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform2(UInt32 program, Int32 location, Int32 count, ref UInt32 value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// <para>
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="location">
            /// <para>
            /// Specifies the location of the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
            /// </para>
            /// <para>
            /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </para>
            /// </param>
            /// <param name="transpose">
            /// <para>
            /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            /// </para>
            /// </param>
            /// <param name="v0">
            /// <para>
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </para>
            /// </param>
            /// <param name="value">
            /// <para>
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform2uivEXT")]
            [CLSCompliant(false)]
            public static unsafe void ProgramUniform2(UInt32 program, Int32 location, Int32 count, UInt32* value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// <para>
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="location">
            /// <para>
            /// Specifies the location of the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
            /// </para>
            /// <para>
            /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </para>
            /// </param>
            /// <param name="transpose">
            /// <para>
            /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            /// </para>
            /// </param>
            /// <param name="v0">
            /// <para>
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </para>
            /// </param>
            /// <param name="value">
            /// <para>
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform3fEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform3(Int32 program, Int32 location, Single v0, Single v1, Single v2) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// <para>
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="location">
            /// <para>
            /// Specifies the location of the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
            /// </para>
            /// <para>
            /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </para>
            /// </param>
            /// <param name="transpose">
            /// <para>
            /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            /// </para>
            /// </param>
            /// <param name="v0">
            /// <para>
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </para>
            /// </param>
            /// <param name="value">
            /// <para>
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform3fEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform3(UInt32 program, Int32 location, Single v0, Single v1, Single v2) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// <para>
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="location">
            /// <para>
            /// Specifies the location of the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
            /// </para>
            /// <para>
            /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </para>
            /// </param>
            /// <param name="transpose">
            /// <para>
            /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            /// </para>
            /// </param>
            /// <param name="v0">
            /// <para>
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </para>
            /// </param>
            /// <param name="value">
            /// <para>
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform3fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform3(Int32 program, Int32 location, Int32 count, Single[] value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// <para>
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="location">
            /// <para>
            /// Specifies the location of the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
            /// </para>
            /// <para>
            /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </para>
            /// </param>
            /// <param name="transpose">
            /// <para>
            /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            /// </para>
            /// </param>
            /// <param name="v0">
            /// <para>
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </para>
            /// </param>
            /// <param name="value">
            /// <para>
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform3fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform3(Int32 program, Int32 location, Int32 count, ref Single value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// <para>
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="location">
            /// <para>
            /// Specifies the location of the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
            /// </para>
            /// <para>
            /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </para>
            /// </param>
            /// <param name="transpose">
            /// <para>
            /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            /// </para>
            /// </param>
            /// <param name="v0">
            /// <para>
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </para>
            /// </param>
            /// <param name="value">
            /// <para>
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform3fvEXT")]
            [CLSCompliant(false)]
            public static unsafe void ProgramUniform3(Int32 program, Int32 location, Int32 count, Single* value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// <para>
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="location">
            /// <para>
            /// Specifies the location of the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
            /// </para>
            /// <para>
            /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </para>
            /// </param>
            /// <param name="transpose">
            /// <para>
            /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            /// </para>
            /// </param>
            /// <param name="v0">
            /// <para>
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </para>
            /// </param>
            /// <param name="value">
            /// <para>
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform3fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform3(UInt32 program, Int32 location, Int32 count, Single[] value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// <para>
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="location">
            /// <para>
            /// Specifies the location of the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
            /// </para>
            /// <para>
            /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </para>
            /// </param>
            /// <param name="transpose">
            /// <para>
            /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            /// </para>
            /// </param>
            /// <param name="v0">
            /// <para>
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </para>
            /// </param>
            /// <param name="value">
            /// <para>
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform3fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform3(UInt32 program, Int32 location, Int32 count, ref Single value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// <para>
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="location">
            /// <para>
            /// Specifies the location of the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
            /// </para>
            /// <para>
            /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </para>
            /// </param>
            /// <param name="transpose">
            /// <para>
            /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            /// </para>
            /// </param>
            /// <param name="v0">
            /// <para>
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </para>
            /// </param>
            /// <param name="value">
            /// <para>
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform3fvEXT")]
            [CLSCompliant(false)]
            public static unsafe void ProgramUniform3(UInt32 program, Int32 location, Int32 count, Single* value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// <para>
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="location">
            /// <para>
            /// Specifies the location of the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
            /// </para>
            /// <para>
            /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </para>
            /// </param>
            /// <param name="transpose">
            /// <para>
            /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            /// </para>
            /// </param>
            /// <param name="v0">
            /// <para>
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </para>
            /// </param>
            /// <param name="value">
            /// <para>
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform3iEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform3(Int32 program, Int32 location, Int32 v0, Int32 v1, Int32 v2) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// <para>
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="location">
            /// <para>
            /// Specifies the location of the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
            /// </para>
            /// <para>
            /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </para>
            /// </param>
            /// <param name="transpose">
            /// <para>
            /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            /// </para>
            /// </param>
            /// <param name="v0">
            /// <para>
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </para>
            /// </param>
            /// <param name="value">
            /// <para>
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform3iEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform3(UInt32 program, Int32 location, Int32 v0, Int32 v1, Int32 v2) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// <para>
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="location">
            /// <para>
            /// Specifies the location of the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
            /// </para>
            /// <para>
            /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </para>
            /// </param>
            /// <param name="transpose">
            /// <para>
            /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            /// </para>
            /// </param>
            /// <param name="v0">
            /// <para>
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </para>
            /// </param>
            /// <param name="value">
            /// <para>
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform3ivEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform3(Int32 program, Int32 location, Int32 count, Int32[] value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// <para>
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="location">
            /// <para>
            /// Specifies the location of the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
            /// </para>
            /// <para>
            /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </para>
            /// </param>
            /// <param name="transpose">
            /// <para>
            /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            /// </para>
            /// </param>
            /// <param name="v0">
            /// <para>
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </para>
            /// </param>
            /// <param name="value">
            /// <para>
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform3ivEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform3(Int32 program, Int32 location, Int32 count, ref Int32 value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// <para>
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="location">
            /// <para>
            /// Specifies the location of the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
            /// </para>
            /// <para>
            /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </para>
            /// </param>
            /// <param name="transpose">
            /// <para>
            /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            /// </para>
            /// </param>
            /// <param name="v0">
            /// <para>
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </para>
            /// </param>
            /// <param name="value">
            /// <para>
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform3ivEXT")]
            [CLSCompliant(false)]
            public static unsafe void ProgramUniform3(Int32 program, Int32 location, Int32 count, Int32* value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// <para>
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="location">
            /// <para>
            /// Specifies the location of the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
            /// </para>
            /// <para>
            /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </para>
            /// </param>
            /// <param name="transpose">
            /// <para>
            /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            /// </para>
            /// </param>
            /// <param name="v0">
            /// <para>
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </para>
            /// </param>
            /// <param name="value">
            /// <para>
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform3ivEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform3(UInt32 program, Int32 location, Int32 count, Int32[] value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// <para>
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="location">
            /// <para>
            /// Specifies the location of the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
            /// </para>
            /// <para>
            /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </para>
            /// </param>
            /// <param name="transpose">
            /// <para>
            /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            /// </para>
            /// </param>
            /// <param name="v0">
            /// <para>
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </para>
            /// </param>
            /// <param name="value">
            /// <para>
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform3ivEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform3(UInt32 program, Int32 location, Int32 count, ref Int32 value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// <para>
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="location">
            /// <para>
            /// Specifies the location of the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
            /// </para>
            /// <para>
            /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </para>
            /// </param>
            /// <param name="transpose">
            /// <para>
            /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            /// </para>
            /// </param>
            /// <param name="v0">
            /// <para>
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </para>
            /// </param>
            /// <param name="value">
            /// <para>
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform3ivEXT")]
            [CLSCompliant(false)]
            public static unsafe void ProgramUniform3(UInt32 program, Int32 location, Int32 count, Int32* value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// <para>
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="location">
            /// <para>
            /// Specifies the location of the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
            /// </para>
            /// <para>
            /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </para>
            /// </param>
            /// <param name="transpose">
            /// <para>
            /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            /// </para>
            /// </param>
            /// <param name="v0">
            /// <para>
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </para>
            /// </param>
            /// <param name="value">
            /// <para>
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform3uiEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform3(UInt32 program, Int32 location, UInt32 v0, UInt32 v1, UInt32 v2) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// <para>
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="location">
            /// <para>
            /// Specifies the location of the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
            /// </para>
            /// <para>
            /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </para>
            /// </param>
            /// <param name="transpose">
            /// <para>
            /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            /// </para>
            /// </param>
            /// <param name="v0">
            /// <para>
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </para>
            /// </param>
            /// <param name="value">
            /// <para>
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform3uivEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform3(UInt32 program, Int32 location, Int32 count, UInt32[] value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// <para>
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="location">
            /// <para>
            /// Specifies the location of the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
            /// </para>
            /// <para>
            /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </para>
            /// </param>
            /// <param name="transpose">
            /// <para>
            /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            /// </para>
            /// </param>
            /// <param name="v0">
            /// <para>
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </para>
            /// </param>
            /// <param name="value">
            /// <para>
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform3uivEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform3(UInt32 program, Int32 location, Int32 count, ref UInt32 value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// <para>
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="location">
            /// <para>
            /// Specifies the location of the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
            /// </para>
            /// <para>
            /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </para>
            /// </param>
            /// <param name="transpose">
            /// <para>
            /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            /// </para>
            /// </param>
            /// <param name="v0">
            /// <para>
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </para>
            /// </param>
            /// <param name="value">
            /// <para>
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform3uivEXT")]
            [CLSCompliant(false)]
            public static unsafe void ProgramUniform3(UInt32 program, Int32 location, Int32 count, UInt32* value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// <para>
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="location">
            /// <para>
            /// Specifies the location of the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
            /// </para>
            /// <para>
            /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </para>
            /// </param>
            /// <param name="transpose">
            /// <para>
            /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            /// </para>
            /// </param>
            /// <param name="v0">
            /// <para>
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </para>
            /// </param>
            /// <param name="value">
            /// <para>
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform4fEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform4(Int32 program, Int32 location, Single v0, Single v1, Single v2, Single v3) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// <para>
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="location">
            /// <para>
            /// Specifies the location of the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
            /// </para>
            /// <para>
            /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </para>
            /// </param>
            /// <param name="transpose">
            /// <para>
            /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            /// </para>
            /// </param>
            /// <param name="v0">
            /// <para>
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </para>
            /// </param>
            /// <param name="value">
            /// <para>
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform4fEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform4(UInt32 program, Int32 location, Single v0, Single v1, Single v2, Single v3) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// <para>
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="location">
            /// <para>
            /// Specifies the location of the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
            /// </para>
            /// <para>
            /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </para>
            /// </param>
            /// <param name="transpose">
            /// <para>
            /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            /// </para>
            /// </param>
            /// <param name="v0">
            /// <para>
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </para>
            /// </param>
            /// <param name="value">
            /// <para>
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform4fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform4(Int32 program, Int32 location, Int32 count, Single[] value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// <para>
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="location">
            /// <para>
            /// Specifies the location of the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
            /// </para>
            /// <para>
            /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </para>
            /// </param>
            /// <param name="transpose">
            /// <para>
            /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            /// </para>
            /// </param>
            /// <param name="v0">
            /// <para>
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </para>
            /// </param>
            /// <param name="value">
            /// <para>
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform4fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform4(Int32 program, Int32 location, Int32 count, ref Single value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// <para>
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="location">
            /// <para>
            /// Specifies the location of the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
            /// </para>
            /// <para>
            /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </para>
            /// </param>
            /// <param name="transpose">
            /// <para>
            /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            /// </para>
            /// </param>
            /// <param name="v0">
            /// <para>
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </para>
            /// </param>
            /// <param name="value">
            /// <para>
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform4fvEXT")]
            [CLSCompliant(false)]
            public static unsafe void ProgramUniform4(Int32 program, Int32 location, Int32 count, Single* value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// <para>
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="location">
            /// <para>
            /// Specifies the location of the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
            /// </para>
            /// <para>
            /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </para>
            /// </param>
            /// <param name="transpose">
            /// <para>
            /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            /// </para>
            /// </param>
            /// <param name="v0">
            /// <para>
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </para>
            /// </param>
            /// <param name="value">
            /// <para>
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform4fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform4(UInt32 program, Int32 location, Int32 count, Single[] value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// <para>
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="location">
            /// <para>
            /// Specifies the location of the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
            /// </para>
            /// <para>
            /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </para>
            /// </param>
            /// <param name="transpose">
            /// <para>
            /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            /// </para>
            /// </param>
            /// <param name="v0">
            /// <para>
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </para>
            /// </param>
            /// <param name="value">
            /// <para>
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform4fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform4(UInt32 program, Int32 location, Int32 count, ref Single value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// <para>
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="location">
            /// <para>
            /// Specifies the location of the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
            /// </para>
            /// <para>
            /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </para>
            /// </param>
            /// <param name="transpose">
            /// <para>
            /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            /// </para>
            /// </param>
            /// <param name="v0">
            /// <para>
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </para>
            /// </param>
            /// <param name="value">
            /// <para>
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform4fvEXT")]
            [CLSCompliant(false)]
            public static unsafe void ProgramUniform4(UInt32 program, Int32 location, Int32 count, Single* value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// <para>
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="location">
            /// <para>
            /// Specifies the location of the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
            /// </para>
            /// <para>
            /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </para>
            /// </param>
            /// <param name="transpose">
            /// <para>
            /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            /// </para>
            /// </param>
            /// <param name="v0">
            /// <para>
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </para>
            /// </param>
            /// <param name="value">
            /// <para>
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform4iEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform4(Int32 program, Int32 location, Int32 v0, Int32 v1, Int32 v2, Int32 v3) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// <para>
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="location">
            /// <para>
            /// Specifies the location of the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
            /// </para>
            /// <para>
            /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </para>
            /// </param>
            /// <param name="transpose">
            /// <para>
            /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            /// </para>
            /// </param>
            /// <param name="v0">
            /// <para>
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </para>
            /// </param>
            /// <param name="value">
            /// <para>
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform4iEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform4(UInt32 program, Int32 location, Int32 v0, Int32 v1, Int32 v2, Int32 v3) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// <para>
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="location">
            /// <para>
            /// Specifies the location of the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
            /// </para>
            /// <para>
            /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </para>
            /// </param>
            /// <param name="transpose">
            /// <para>
            /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            /// </para>
            /// </param>
            /// <param name="v0">
            /// <para>
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </para>
            /// </param>
            /// <param name="value">
            /// <para>
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform4ivEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform4(Int32 program, Int32 location, Int32 count, Int32[] value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// <para>
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="location">
            /// <para>
            /// Specifies the location of the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
            /// </para>
            /// <para>
            /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </para>
            /// </param>
            /// <param name="transpose">
            /// <para>
            /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            /// </para>
            /// </param>
            /// <param name="v0">
            /// <para>
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </para>
            /// </param>
            /// <param name="value">
            /// <para>
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform4ivEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform4(Int32 program, Int32 location, Int32 count, ref Int32 value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// <para>
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="location">
            /// <para>
            /// Specifies the location of the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
            /// </para>
            /// <para>
            /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </para>
            /// </param>
            /// <param name="transpose">
            /// <para>
            /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            /// </para>
            /// </param>
            /// <param name="v0">
            /// <para>
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </para>
            /// </param>
            /// <param name="value">
            /// <para>
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform4ivEXT")]
            [CLSCompliant(false)]
            public static unsafe void ProgramUniform4(Int32 program, Int32 location, Int32 count, Int32* value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// <para>
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="location">
            /// <para>
            /// Specifies the location of the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
            /// </para>
            /// <para>
            /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </para>
            /// </param>
            /// <param name="transpose">
            /// <para>
            /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            /// </para>
            /// </param>
            /// <param name="v0">
            /// <para>
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </para>
            /// </param>
            /// <param name="value">
            /// <para>
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform4ivEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform4(UInt32 program, Int32 location, Int32 count, Int32[] value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// <para>
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="location">
            /// <para>
            /// Specifies the location of the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
            /// </para>
            /// <para>
            /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </para>
            /// </param>
            /// <param name="transpose">
            /// <para>
            /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            /// </para>
            /// </param>
            /// <param name="v0">
            /// <para>
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </para>
            /// </param>
            /// <param name="value">
            /// <para>
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform4ivEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform4(UInt32 program, Int32 location, Int32 count, ref Int32 value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// <para>
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="location">
            /// <para>
            /// Specifies the location of the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
            /// </para>
            /// <para>
            /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </para>
            /// </param>
            /// <param name="transpose">
            /// <para>
            /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            /// </para>
            /// </param>
            /// <param name="v0">
            /// <para>
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </para>
            /// </param>
            /// <param name="value">
            /// <para>
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform4ivEXT")]
            [CLSCompliant(false)]
            public static unsafe void ProgramUniform4(UInt32 program, Int32 location, Int32 count, Int32* value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// <para>
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="location">
            /// <para>
            /// Specifies the location of the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
            /// </para>
            /// <para>
            /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </para>
            /// </param>
            /// <param name="transpose">
            /// <para>
            /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            /// </para>
            /// </param>
            /// <param name="v0">
            /// <para>
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </para>
            /// </param>
            /// <param name="value">
            /// <para>
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform4uiEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform4(UInt32 program, Int32 location, UInt32 v0, UInt32 v1, UInt32 v2, UInt32 v3) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// <para>
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="location">
            /// <para>
            /// Specifies the location of the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
            /// </para>
            /// <para>
            /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </para>
            /// </param>
            /// <param name="transpose">
            /// <para>
            /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            /// </para>
            /// </param>
            /// <param name="v0">
            /// <para>
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </para>
            /// </param>
            /// <param name="value">
            /// <para>
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform4uivEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform4(UInt32 program, Int32 location, Int32 count, UInt32[] value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// <para>
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="location">
            /// <para>
            /// Specifies the location of the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
            /// </para>
            /// <para>
            /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </para>
            /// </param>
            /// <param name="transpose">
            /// <para>
            /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            /// </para>
            /// </param>
            /// <param name="v0">
            /// <para>
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </para>
            /// </param>
            /// <param name="value">
            /// <para>
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform4uivEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform4(UInt32 program, Int32 location, Int32 count, ref UInt32 value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program">
            /// <para>
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="location">
            /// <para>
            /// Specifies the location of the uniform variable to be modified.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
            /// </para>
            /// <para>
            /// For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </para>
            /// </param>
            /// <param name="transpose">
            /// <para>
            /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            /// </para>
            /// </param>
            /// <param name="v0">
            /// <para>
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </para>
            /// </param>
            /// <param name="value">
            /// <para>
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform4uivEXT")]
            [CLSCompliant(false)]
            public static unsafe void ProgramUniform4(UInt32 program, Int32 location, Int32 count, UInt32* value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix2fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix2(Int32 program, Int32 location, Int32 count, bool transpose, Single[] value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix2fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix2(Int32 program, Int32 location, Int32 count, bool transpose, ref Single value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix2fvEXT")]
            [CLSCompliant(false)]
            public static unsafe void ProgramUniformMatrix2(Int32 program, Int32 location, Int32 count, bool transpose, Single* value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix2fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix2(UInt32 program, Int32 location, Int32 count, bool transpose, Single[] value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix2fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix2(UInt32 program, Int32 location, Int32 count, bool transpose, ref Single value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix2fvEXT")]
            [CLSCompliant(false)]
            public static unsafe void ProgramUniformMatrix2(UInt32 program, Int32 location, Int32 count, bool transpose, Single* value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix2x3fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix2x3(Int32 program, Int32 location, Int32 count, bool transpose, Single[] value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix2x3fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix2x3(Int32 program, Int32 location, Int32 count, bool transpose, ref Single value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix2x3fvEXT")]
            [CLSCompliant(false)]
            public static unsafe void ProgramUniformMatrix2x3(Int32 program, Int32 location, Int32 count, bool transpose, Single* value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix2x3fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix2x3(UInt32 program, Int32 location, Int32 count, bool transpose, Single[] value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix2x3fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix2x3(UInt32 program, Int32 location, Int32 count, bool transpose, ref Single value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix2x3fvEXT")]
            [CLSCompliant(false)]
            public static unsafe void ProgramUniformMatrix2x3(UInt32 program, Int32 location, Int32 count, bool transpose, Single* value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix2x4fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix2x4(Int32 program, Int32 location, Int32 count, bool transpose, Single[] value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix2x4fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix2x4(Int32 program, Int32 location, Int32 count, bool transpose, ref Single value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix2x4fvEXT")]
            [CLSCompliant(false)]
            public static unsafe void ProgramUniformMatrix2x4(Int32 program, Int32 location, Int32 count, bool transpose, Single* value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix2x4fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix2x4(UInt32 program, Int32 location, Int32 count, bool transpose, Single[] value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix2x4fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix2x4(UInt32 program, Int32 location, Int32 count, bool transpose, ref Single value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix2x4fvEXT")]
            [CLSCompliant(false)]
            public static unsafe void ProgramUniformMatrix2x4(UInt32 program, Int32 location, Int32 count, bool transpose, Single* value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix3fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix3(Int32 program, Int32 location, Int32 count, bool transpose, Single[] value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix3fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix3(Int32 program, Int32 location, Int32 count, bool transpose, ref Single value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix3fvEXT")]
            [CLSCompliant(false)]
            public static unsafe void ProgramUniformMatrix3(Int32 program, Int32 location, Int32 count, bool transpose, Single* value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix3fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix3(UInt32 program, Int32 location, Int32 count, bool transpose, Single[] value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix3fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix3(UInt32 program, Int32 location, Int32 count, bool transpose, ref Single value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix3fvEXT")]
            [CLSCompliant(false)]
            public static unsafe void ProgramUniformMatrix3(UInt32 program, Int32 location, Int32 count, bool transpose, Single* value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix3x2fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix3x2(Int32 program, Int32 location, Int32 count, bool transpose, Single[] value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix3x2fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix3x2(Int32 program, Int32 location, Int32 count, bool transpose, ref Single value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix3x2fvEXT")]
            [CLSCompliant(false)]
            public static unsafe void ProgramUniformMatrix3x2(Int32 program, Int32 location, Int32 count, bool transpose, Single* value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix3x2fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix3x2(UInt32 program, Int32 location, Int32 count, bool transpose, Single[] value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix3x2fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix3x2(UInt32 program, Int32 location, Int32 count, bool transpose, ref Single value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix3x2fvEXT")]
            [CLSCompliant(false)]
            public static unsafe void ProgramUniformMatrix3x2(UInt32 program, Int32 location, Int32 count, bool transpose, Single* value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix3x4fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix3x4(Int32 program, Int32 location, Int32 count, bool transpose, Single[] value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix3x4fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix3x4(Int32 program, Int32 location, Int32 count, bool transpose, ref Single value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix3x4fvEXT")]
            [CLSCompliant(false)]
            public static unsafe void ProgramUniformMatrix3x4(Int32 program, Int32 location, Int32 count, bool transpose, Single* value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix3x4fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix3x4(UInt32 program, Int32 location, Int32 count, bool transpose, Single[] value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix3x4fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix3x4(UInt32 program, Int32 location, Int32 count, bool transpose, ref Single value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix3x4fvEXT")]
            [CLSCompliant(false)]
            public static unsafe void ProgramUniformMatrix3x4(UInt32 program, Int32 location, Int32 count, bool transpose, Single* value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects|EXT_separate_shader_objects]</summary>
            [AutoGenerated(Category = "EXT_separate_shader_objects|EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix4fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix4(Int32 program, Int32 location, Int32 count, bool transpose, Single[] value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects|EXT_separate_shader_objects]</summary>
            [AutoGenerated(Category = "EXT_separate_shader_objects|EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix4fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix4(Int32 program, Int32 location, Int32 count, bool transpose, ref Single value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects|EXT_separate_shader_objects]</summary>
            [AutoGenerated(Category = "EXT_separate_shader_objects|EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix4fvEXT")]
            [CLSCompliant(false)]
            public static unsafe void ProgramUniformMatrix4(Int32 program, Int32 location, Int32 count, bool transpose, Single* value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects|EXT_separate_shader_objects]</summary>
            [AutoGenerated(Category = "EXT_separate_shader_objects|EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix4fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix4(UInt32 program, Int32 location, Int32 count, bool transpose, Single[] value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects|EXT_separate_shader_objects]</summary>
            [AutoGenerated(Category = "EXT_separate_shader_objects|EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix4fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix4(UInt32 program, Int32 location, Int32 count, bool transpose, ref Single value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects|EXT_separate_shader_objects]</summary>
            [AutoGenerated(Category = "EXT_separate_shader_objects|EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix4fvEXT")]
            [CLSCompliant(false)]
            public static unsafe void ProgramUniformMatrix4(UInt32 program, Int32 location, Int32 count, bool transpose, Single* value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix4x2fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix4x2(Int32 program, Int32 location, Int32 count, bool transpose, Single[] value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix4x2fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix4x2(Int32 program, Int32 location, Int32 count, bool transpose, ref Single value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix4x2fvEXT")]
            [CLSCompliant(false)]
            public static unsafe void ProgramUniformMatrix4x2(Int32 program, Int32 location, Int32 count, bool transpose, Single* value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix4x2fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix4x2(UInt32 program, Int32 location, Int32 count, bool transpose, Single[] value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix4x2fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix4x2(UInt32 program, Int32 location, Int32 count, bool transpose, ref Single value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix4x2fvEXT")]
            [CLSCompliant(false)]
            public static unsafe void ProgramUniformMatrix4x2(UInt32 program, Int32 location, Int32 count, bool transpose, Single* value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix4x3fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix4x3(Int32 program, Int32 location, Int32 count, bool transpose, Single[] value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix4x3fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix4x3(Int32 program, Int32 location, Int32 count, bool transpose, ref Single value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix4x3fvEXT")]
            [CLSCompliant(false)]
            public static unsafe void ProgramUniformMatrix4x3(Int32 program, Int32 location, Int32 count, bool transpose, Single* value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix4x3fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix4x3(UInt32 program, Int32 location, Int32 count, bool transpose, Single[] value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix4x3fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix4x3(UInt32 program, Int32 location, Int32 count, bool transpose, ref Single value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix4x3fvEXT")]
            [CLSCompliant(false)]
            public static unsafe void ProgramUniformMatrix4x3(UInt32 program, Int32 location, Int32 count, bool transpose, Single* value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_debug_marker]</summary>
            [AutoGenerated(Category = "EXT_debug_marker", Version = "", EntryPoint = "glPushGroupMarkerEXT")]
            public static void PushGroupMarker(Int32 length, String marker) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_disjoint_timer_query]
            /// Record the GL time into a query object after all previous commands have reached the GL server but have not yet necessarily executed.
            /// </summary>
            /// <param name="id">
            /// <para>
            /// Specify the name of a query object into which to record the GL time.
            /// </para>
            /// </param>
            /// <param name="target">
            /// <para>
            /// Specify the counter to query. target must be GL_TIMESTAMP.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_disjoint_timer_query", Version = "", EntryPoint = "glQueryCounterEXT")]
            [CLSCompliant(false)]
            public static void QueryCounter(Int32 id, OpenTK.Graphics.ES30.All target) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_disjoint_timer_query]
            /// Record the GL time into a query object after all previous commands have reached the GL server but have not yet necessarily executed.
            /// </summary>
            /// <param name="id">
            /// <para>
            /// Specify the name of a query object into which to record the GL time.
            /// </para>
            /// </param>
            /// <param name="target">
            /// <para>
            /// Specify the counter to query. target must be GL_TIMESTAMP.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_disjoint_timer_query", Version = "", EntryPoint = "glQueryCounterEXT")]
            [CLSCompliant(false)]
            public static void QueryCounter(UInt32 id, OpenTK.Graphics.ES30.All target) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_multiview_draw_buffers]</summary>
            [AutoGenerated(Category = "EXT_multiview_draw_buffers", Version = "", EntryPoint = "glReadBufferIndexedEXT")]
            public static void ReadBufferIndexed(OpenTK.Graphics.ES30.All src, Int32 index) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_robustness]</summary>
            [AutoGenerated(Category = "EXT_robustness", Version = "", EntryPoint = "glReadnPixelsEXT")]
            public static void ReadnPixels(Int32 x, Int32 y, Int32 width, Int32 height, OpenTK.Graphics.ES30.All format, OpenTK.Graphics.ES30.All type, Int32 bufSize, [OutAttribute] IntPtr data) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_robustness]</summary>
            [AutoGenerated(Category = "EXT_robustness", Version = "", EntryPoint = "glReadnPixelsEXT")]
            [CLSCompliant(false)]
            public static void ReadnPixels<T7>(Int32 x, Int32 y, Int32 width, Int32 height, OpenTK.Graphics.ES30.All format, OpenTK.Graphics.ES30.All type, Int32 bufSize, [InAttribute, OutAttribute] T7[] data)
                where T7 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_robustness]</summary>
            [AutoGenerated(Category = "EXT_robustness", Version = "", EntryPoint = "glReadnPixelsEXT")]
            [CLSCompliant(false)]
            public static void ReadnPixels<T7>(Int32 x, Int32 y, Int32 width, Int32 height, OpenTK.Graphics.ES30.All format, OpenTK.Graphics.ES30.All type, Int32 bufSize, [InAttribute, OutAttribute] T7[,] data)
                where T7 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_robustness]</summary>
            [AutoGenerated(Category = "EXT_robustness", Version = "", EntryPoint = "glReadnPixelsEXT")]
            [CLSCompliant(false)]
            public static void ReadnPixels<T7>(Int32 x, Int32 y, Int32 width, Int32 height, OpenTK.Graphics.ES30.All format, OpenTK.Graphics.ES30.All type, Int32 bufSize, [InAttribute, OutAttribute] T7[,,] data)
                where T7 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_robustness]</summary>
            [AutoGenerated(Category = "EXT_robustness", Version = "", EntryPoint = "glReadnPixelsEXT")]
            public static void ReadnPixels<T7>(Int32 x, Int32 y, Int32 width, Int32 height, OpenTK.Graphics.ES30.All format, OpenTK.Graphics.ES30.All type, Int32 bufSize, [InAttribute, OutAttribute] ref T7 data)
                where T7 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_multisampled_render_to_texture]
            /// Establish data storage, format, dimensions and sample count of a renderbuffer object's image
            /// </summary>
            /// <param name="target">
            /// <para>
            /// Specifies a binding to which the target of the allocation and must be GL_RENDERBUFFER.
            /// </para>
            /// </param>
            /// <param name="samples">
            /// <para>
            /// Specifies the number of samples to be used for the renderbuffer object's storage.
            /// </para>
            /// </param>
            /// <param name="internalformat">
            /// <para>
            /// Specifies the internal format to use for the renderbuffer object's image.
            /// </para>
            /// </param>
            /// <param name="width">
            /// <para>
            /// Specifies the width of the renderbuffer, in pixels.
            /// </para>
            /// </param>
            /// <param name="height">
            /// <para>
            /// Specifies the height of the renderbuffer, in pixels.
            /// </para>
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_multisampled_render_to_texture", Version = "", EntryPoint = "glRenderbufferStorageMultisampleEXT")]
            public static void RenderbufferStorageMultisample(OpenTK.Graphics.ES30.All target, Int32 samples, OpenTK.Graphics.ES30.All internalformat, Int32 width, Int32 height) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_multisampled_render_to_texture]
            /// Establish data storage, format, dimensions and sample count of a renderbuffer object's image
            /// </summary>
            /// <param name="target">
            /// <para>
            /// Specifies a binding to which the target of the allocation and must be GL_RENDERBUFFER.
            /// </para>
            /// </param>
            /// <param name="samples">
            /// <para>
            /// Specifies the number of samples to be used for the renderbuffer object's storage.
            /// </para>
            /// </param>
            /// <param name="internalformat">
            /// <para>
            /// Specifies the internal format to use for the renderbuffer object's image.
            /// </para>
            /// </param>
            /// <param name="width">
            /// <para>
            /// Specifies the width of the renderbuffer, in pixels.
            /// </para>
            /// </param>
            /// <param name="height">
            /// <para>
            /// Specifies the height of the renderbuffer, in pixels.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_multisampled_render_to_texture", Version = "", EntryPoint = "glRenderbufferStorageMultisampleEXT")]
            public static void RenderbufferStorageMultisample(OpenTK.Graphics.ES30.RenderbufferTarget target, Int32 samples, OpenTK.Graphics.ES30.RenderbufferInternalFormat internalformat, Int32 width, Int32 height) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_texture_storage]
            /// Simultaneously specify storage for all levels of a one-dimensional texture
            /// </summary>
            /// <param name="target">
            /// <para>
            /// Specify the target of the operation. target must be either GL_TEXTURE_1D or GL_PROXY_TEXTURE_1D.
            /// </para>
            /// </param>
            /// <param name="levels">
            /// <para>
            /// Specify the number of texture levels.
            /// </para>
            /// </param>
            /// <param name="internalformat">
            /// <para>
            /// Specifies the sized internal format to be used to store texture image data.
            /// </para>
            /// </param>
            /// <param name="width">
            /// <para>
            /// Specifies the width of the texture, in texels.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_texture_storage", Version = "", EntryPoint = "glTexStorage1DEXT")]
            public static void TexStorage1D(OpenTK.Graphics.ES30.All target, Int32 levels, OpenTK.Graphics.ES30.All internalformat, Int32 width) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_texture_storage]
            /// Simultaneously specify storage for all levels of a two-dimensional or one-dimensional array texture
            /// </summary>
            /// <param name="target">
            /// <para>
            /// Specify the target of the operation. target must be one of GL_TEXTURE_2D, GL_PROXY_TEXTURE_2D, GL_TEXTURE_1D_ARRAY, GL_PROXY_TEXTURE_1D_ARRAY, GL_TEXTURE_RECTANGLE, GL_PROXY_TEXTURE_RECTANGLE, or GL_PROXY_TEXTURE_CUBE_MAP.
            /// </para>
            /// </param>
            /// <param name="levels">
            /// <para>
            /// Specify the number of texture levels.
            /// </para>
            /// </param>
            /// <param name="internalformat">
            /// <para>
            /// Specifies the sized internal format to be used to store texture image data.
            /// </para>
            /// </param>
            /// <param name="width">
            /// <para>
            /// Specifies the width of the texture, in texels.
            /// </para>
            /// </param>
            /// <param name="height">
            /// <para>
            /// Specifies the height of the texture, in texels.
            /// </para>
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_texture_storage", Version = "", EntryPoint = "glTexStorage2DEXT")]
            public static void TexStorage2D(OpenTK.Graphics.ES30.All target, Int32 levels, OpenTK.Graphics.ES30.All internalformat, Int32 width, Int32 height) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_texture_storage]
            /// Simultaneously specify storage for all levels of a two-dimensional or one-dimensional array texture
            /// </summary>
            /// <param name="target">
            /// <para>
            /// Specify the target of the operation. target must be one of GL_TEXTURE_2D, GL_PROXY_TEXTURE_2D, GL_TEXTURE_1D_ARRAY, GL_PROXY_TEXTURE_1D_ARRAY, GL_TEXTURE_RECTANGLE, GL_PROXY_TEXTURE_RECTANGLE, or GL_PROXY_TEXTURE_CUBE_MAP.
            /// </para>
            /// </param>
            /// <param name="levels">
            /// <para>
            /// Specify the number of texture levels.
            /// </para>
            /// </param>
            /// <param name="internalformat">
            /// <para>
            /// Specifies the sized internal format to be used to store texture image data.
            /// </para>
            /// </param>
            /// <param name="width">
            /// <para>
            /// Specifies the width of the texture, in texels.
            /// </para>
            /// </param>
            /// <param name="height">
            /// <para>
            /// Specifies the height of the texture, in texels.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_texture_storage", Version = "", EntryPoint = "glTexStorage2DEXT")]
            public static void TexStorage2D(OpenTK.Graphics.ES30.TextureTarget2d target, Int32 levels, OpenTK.Graphics.ES30.SizedInternalFormat internalformat, Int32 width, Int32 height) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_texture_storage]
            /// Simultaneously specify storage for all levels of a three-dimensional, two-dimensional array or cube-map array texture
            /// </summary>
            /// <param name="target">
            /// <para>
            /// Specify the target of the operation. target must be one of GL_TEXTURE_3D, GL_PROXY_TEXTURE_3D, GL_TEXTURE_2D_ARRAY, GL_PROXY_TEXTURE_2D_ARRAY, GL_TEXTURE_CUBE_ARRAY, or GL_PROXY_TEXTURE_CUBE_ARRAY.
            /// </para>
            /// </param>
            /// <param name="levels">
            /// <para>
            /// Specify the number of texture levels.
            /// </para>
            /// </param>
            /// <param name="internalformat">
            /// <para>
            /// Specifies the sized internal format to be used to store texture image data.
            /// </para>
            /// </param>
            /// <param name="width">
            /// <para>
            /// Specifies the width of the texture, in texels.
            /// </para>
            /// </param>
            /// <param name="height">
            /// <para>
            /// Specifies the height of the texture, in texels.
            /// </para>
            /// </param>
            /// <param name="depth">
            /// <para>
            /// Specifies the depth of the texture, in texels.
            /// </para>
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "EXT_texture_storage", Version = "", EntryPoint = "glTexStorage3DEXT")]
            public static void TexStorage3D(OpenTK.Graphics.ES30.All target, Int32 levels, OpenTK.Graphics.ES30.All internalformat, Int32 width, Int32 height, Int32 depth) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_texture_storage]
            /// Simultaneously specify storage for all levels of a three-dimensional, two-dimensional array or cube-map array texture
            /// </summary>
            /// <param name="target">
            /// <para>
            /// Specify the target of the operation. target must be one of GL_TEXTURE_3D, GL_PROXY_TEXTURE_3D, GL_TEXTURE_2D_ARRAY, GL_PROXY_TEXTURE_2D_ARRAY, GL_TEXTURE_CUBE_ARRAY, or GL_PROXY_TEXTURE_CUBE_ARRAY.
            /// </para>
            /// </param>
            /// <param name="levels">
            /// <para>
            /// Specify the number of texture levels.
            /// </para>
            /// </param>
            /// <param name="internalformat">
            /// <para>
            /// Specifies the sized internal format to be used to store texture image data.
            /// </para>
            /// </param>
            /// <param name="width">
            /// <para>
            /// Specifies the width of the texture, in texels.
            /// </para>
            /// </param>
            /// <param name="height">
            /// <para>
            /// Specifies the height of the texture, in texels.
            /// </para>
            /// </param>
            /// <param name="depth">
            /// <para>
            /// Specifies the depth of the texture, in texels.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_texture_storage", Version = "", EntryPoint = "glTexStorage3DEXT")]
            public static void TexStorage3D(OpenTK.Graphics.ES30.TextureTarget3d target, Int32 levels, OpenTK.Graphics.ES30.SizedInternalFormat internalformat, Int32 width, Int32 height, Int32 depth) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_texture_storage]</summary>
            [AutoGenerated(Category = "EXT_texture_storage", Version = "", EntryPoint = "glTextureStorage1DEXT")]
            [CLSCompliant(false)]
            public static void TextureStorage1D(Int32 texture, OpenTK.Graphics.ES30.All target, Int32 levels, OpenTK.Graphics.ES30.All internalformat, Int32 width) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_texture_storage]</summary>
            [AutoGenerated(Category = "EXT_texture_storage", Version = "", EntryPoint = "glTextureStorage1DEXT")]
            [CLSCompliant(false)]
            public static void TextureStorage1D(UInt32 texture, OpenTK.Graphics.ES30.All target, Int32 levels, OpenTK.Graphics.ES30.All internalformat, Int32 width) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_texture_storage]</summary>
            [AutoGenerated(Category = "EXT_texture_storage", Version = "", EntryPoint = "glTextureStorage2DEXT")]
            [CLSCompliant(false)]
            public static void TextureStorage2D(Int32 texture, OpenTK.Graphics.ES30.All target, Int32 levels, OpenTK.Graphics.ES30.All internalformat, Int32 width, Int32 height) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_texture_storage]</summary>
            [AutoGenerated(Category = "EXT_texture_storage", Version = "", EntryPoint = "glTextureStorage2DEXT")]
            [CLSCompliant(false)]
            public static void TextureStorage2D(UInt32 texture, OpenTK.Graphics.ES30.All target, Int32 levels, OpenTK.Graphics.ES30.All internalformat, Int32 width, Int32 height) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_texture_storage]</summary>
            [AutoGenerated(Category = "EXT_texture_storage", Version = "", EntryPoint = "glTextureStorage3DEXT")]
            [CLSCompliant(false)]
            public static void TextureStorage3D(Int32 texture, OpenTK.Graphics.ES30.All target, Int32 levels, OpenTK.Graphics.ES30.All internalformat, Int32 width, Int32 height, Int32 depth) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_texture_storage]</summary>
            [AutoGenerated(Category = "EXT_texture_storage", Version = "", EntryPoint = "glTextureStorage3DEXT")]
            [CLSCompliant(false)]
            public static void TextureStorage3D(UInt32 texture, OpenTK.Graphics.ES30.All target, Int32 levels, OpenTK.Graphics.ES30.All internalformat, Int32 width, Int32 height, Int32 depth) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Bind stages of a program object to a program pipeline
            /// </summary>
            /// <param name="pipeline">
            /// <para>
            /// Specifies the program pipeline object to which to bind stages from program.
            /// </para>
            /// </param>
            /// <param name="stages">
            /// <para>
            /// Specifies a set of program stages to bind to the program pipeline object.
            /// </para>
            /// </param>
            /// <param name="program">
            /// <para>
            /// Specifies the program object containing the shader executables to use in pipeline.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glUseProgramStagesEXT")]
            [CLSCompliant(false)]
            public static void UseProgramStages(Int32 pipeline, Int32 stages, Int32 program) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Bind stages of a program object to a program pipeline
            /// </summary>
            /// <param name="pipeline">
            /// <para>
            /// Specifies the program pipeline object to which to bind stages from program.
            /// </para>
            /// </param>
            /// <param name="stages">
            /// <para>
            /// Specifies a set of program stages to bind to the program pipeline object.
            /// </para>
            /// </param>
            /// <param name="program">
            /// <para>
            /// Specifies the program object containing the shader executables to use in pipeline.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glUseProgramStagesEXT")]
            [CLSCompliant(false)]
            public static void UseProgramStages(UInt32 pipeline, UInt32 stages, UInt32 program) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glUseShaderProgramEXT")]
            [CLSCompliant(false)]
            public static void UseShaderProgram(OpenTK.Graphics.ES30.All type, Int32 program) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glUseShaderProgramEXT")]
            [CLSCompliant(false)]
            public static void UseShaderProgram(OpenTK.Graphics.ES30.All type, UInt32 program) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Validate a program pipeline object against current GL state
            /// </summary>
            /// <param name="pipeline">
            /// <para>
            /// Specifies the name of a program pipeline object to validate.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glValidateProgramPipelineEXT")]
            [CLSCompliant(false)]
            public static void ValidateProgramPipeline(Int32 pipeline) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Validate a program pipeline object against current GL state
            /// </summary>
            /// <param name="pipeline">
            /// <para>
            /// Specifies the name of a program pipeline object to validate.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glValidateProgramPipelineEXT")]
            [CLSCompliant(false)]
            public static void ValidateProgramPipeline(UInt32 pipeline) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_instanced_arrays]
            /// Modify the rate at which generic vertex attributes advance during instanced rendering
            /// </summary>
            /// <param name="index">
            /// <para>
            /// Specify the index of the generic vertex attribute.
            /// </para>
            /// </param>
            /// <param name="divisor">
            /// <para>
            /// Specify the number of instances that will pass between updates of the generic attribute at slot index.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_instanced_arrays", Version = "", EntryPoint = "glVertexAttribDivisorEXT")]
            [CLSCompliant(false)]
            public static void VertexAttribDivisor(Int32 index, Int32 divisor) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_instanced_arrays]
            /// Modify the rate at which generic vertex attributes advance during instanced rendering
            /// </summary>
            /// <param name="index">
            /// <para>
            /// Specify the index of the generic vertex attribute.
            /// </para>
            /// </param>
            /// <param name="divisor">
            /// <para>
            /// Specify the number of instances that will pass between updates of the generic attribute at slot index.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "EXT_instanced_arrays", Version = "", EntryPoint = "glVertexAttribDivisorEXT")]
            [CLSCompliant(false)]
            public static void VertexAttribDivisor(UInt32 index, UInt32 divisor) { throw new NotImplementedException(); }

        }

        public static partial class Img
        {
            /// <summary>[requires: IMG_multisampled_render_to_texture]</summary>
            [AutoGenerated(Category = "IMG_multisampled_render_to_texture", Version = "", EntryPoint = "glFramebufferTexture2DMultisampleIMG")]
            [CLSCompliant(false)]
            public static void FramebufferTexture2DMultisample(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All attachment, OpenTK.Graphics.ES30.All textarget, Int32 texture, Int32 level, Int32 samples) { throw new NotImplementedException(); }

            /// <summary>[requires: IMG_multisampled_render_to_texture]</summary>
            [AutoGenerated(Category = "IMG_multisampled_render_to_texture", Version = "", EntryPoint = "glFramebufferTexture2DMultisampleIMG")]
            [CLSCompliant(false)]
            public static void FramebufferTexture2DMultisample(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All attachment, OpenTK.Graphics.ES30.All textarget, UInt32 texture, Int32 level, Int32 samples) { throw new NotImplementedException(); }

            /// <summary>[requires: IMG_multisampled_render_to_texture]
            /// Establish data storage, format, dimensions and sample count of a renderbuffer object's image
            /// </summary>
            /// <param name="target">
            /// <para>
            /// Specifies a binding to which the target of the allocation and must be GL_RENDERBUFFER.
            /// </para>
            /// </param>
            /// <param name="samples">
            /// <para>
            /// Specifies the number of samples to be used for the renderbuffer object's storage.
            /// </para>
            /// </param>
            /// <param name="internalformat">
            /// <para>
            /// Specifies the internal format to use for the renderbuffer object's image.
            /// </para>
            /// </param>
            /// <param name="width">
            /// <para>
            /// Specifies the width of the renderbuffer, in pixels.
            /// </para>
            /// </param>
            /// <param name="height">
            /// <para>
            /// Specifies the height of the renderbuffer, in pixels.
            /// </para>
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "IMG_multisampled_render_to_texture", Version = "", EntryPoint = "glRenderbufferStorageMultisampleIMG")]
            public static void RenderbufferStorageMultisample(OpenTK.Graphics.ES30.All target, Int32 samples, OpenTK.Graphics.ES30.All internalformat, Int32 width, Int32 height) { throw new NotImplementedException(); }

            /// <summary>[requires: IMG_multisampled_render_to_texture]
            /// Establish data storage, format, dimensions and sample count of a renderbuffer object's image
            /// </summary>
            /// <param name="target">
            /// <para>
            /// Specifies a binding to which the target of the allocation and must be GL_RENDERBUFFER.
            /// </para>
            /// </param>
            /// <param name="samples">
            /// <para>
            /// Specifies the number of samples to be used for the renderbuffer object's storage.
            /// </para>
            /// </param>
            /// <param name="internalformat">
            /// <para>
            /// Specifies the internal format to use for the renderbuffer object's image.
            /// </para>
            /// </param>
            /// <param name="width">
            /// <para>
            /// Specifies the width of the renderbuffer, in pixels.
            /// </para>
            /// </param>
            /// <param name="height">
            /// <para>
            /// Specifies the height of the renderbuffer, in pixels.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "IMG_multisampled_render_to_texture", Version = "", EntryPoint = "glRenderbufferStorageMultisampleIMG")]
            public static void RenderbufferStorageMultisample(OpenTK.Graphics.ES30.RenderbufferTarget target, Int32 samples, OpenTK.Graphics.ES30.RenderbufferInternalFormat internalformat, Int32 width, Int32 height) { throw new NotImplementedException(); }

        }

        public static partial class Intel
        {
            /// <summary>[requires: INTEL_performance_query]</summary>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glBeginPerfQueryINTEL")]
            [CLSCompliant(false)]
            public static void BeginPerfQuery(Int32 queryHandle) { throw new NotImplementedException(); }

            /// <summary>[requires: INTEL_performance_query]</summary>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glBeginPerfQueryINTEL")]
            [CLSCompliant(false)]
            public static void BeginPerfQuery(UInt32 queryHandle) { throw new NotImplementedException(); }

            /// <summary>[requires: INTEL_performance_query]</summary>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glCreatePerfQueryINTEL")]
            [CLSCompliant(false)]
            public static void CreatePerfQuery(Int32 queryId, [OutAttribute] Int32[] queryHandle) { throw new NotImplementedException(); }

            /// <summary>[requires: INTEL_performance_query]</summary>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glCreatePerfQueryINTEL")]
            [CLSCompliant(false)]
            public static void CreatePerfQuery(Int32 queryId, [OutAttribute] out Int32 queryHandle) { throw new NotImplementedException(); }

            /// <summary>[requires: INTEL_performance_query]</summary>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glCreatePerfQueryINTEL")]
            [CLSCompliant(false)]
            public static unsafe void CreatePerfQuery(Int32 queryId, [OutAttribute] Int32* queryHandle) { throw new NotImplementedException(); }

            /// <summary>[requires: INTEL_performance_query]</summary>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glCreatePerfQueryINTEL")]
            [CLSCompliant(false)]
            public static void CreatePerfQuery(UInt32 queryId, [OutAttribute] UInt32[] queryHandle) { throw new NotImplementedException(); }

            /// <summary>[requires: INTEL_performance_query]</summary>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glCreatePerfQueryINTEL")]
            [CLSCompliant(false)]
            public static void CreatePerfQuery(UInt32 queryId, [OutAttribute] out UInt32 queryHandle) { throw new NotImplementedException(); }

            /// <summary>[requires: INTEL_performance_query]</summary>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glCreatePerfQueryINTEL")]
            [CLSCompliant(false)]
            public static unsafe void CreatePerfQuery(UInt32 queryId, [OutAttribute] UInt32* queryHandle) { throw new NotImplementedException(); }

            /// <summary>[requires: INTEL_performance_query]</summary>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glDeletePerfQueryINTEL")]
            [CLSCompliant(false)]
            public static void DeletePerfQuery(Int32 queryHandle) { throw new NotImplementedException(); }

            /// <summary>[requires: INTEL_performance_query]</summary>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glDeletePerfQueryINTEL")]
            [CLSCompliant(false)]
            public static void DeletePerfQuery(UInt32 queryHandle) { throw new NotImplementedException(); }

            /// <summary>[requires: INTEL_performance_query]</summary>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glEndPerfQueryINTEL")]
            [CLSCompliant(false)]
            public static void EndPerfQuery(Int32 queryHandle) { throw new NotImplementedException(); }

            /// <summary>[requires: INTEL_performance_query]</summary>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glEndPerfQueryINTEL")]
            [CLSCompliant(false)]
            public static void EndPerfQuery(UInt32 queryHandle) { throw new NotImplementedException(); }

            /// <summary>[requires: INTEL_performance_query]</summary>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glGetFirstPerfQueryIdINTEL")]
            [CLSCompliant(false)]
            public static Int32 GetFirstPerfQueryI() { throw new NotImplementedException(); }

            /// <summary>[requires: INTEL_performance_query]</summary>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glGetFirstPerfQueryIdINTEL")]
            [CLSCompliant(false)]
            public static void GetFirstPerfQueryI([OutAttribute] Int32[] queryId) { throw new NotImplementedException(); }

            /// <summary>[requires: INTEL_performance_query]</summary>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glGetFirstPerfQueryIdINTEL")]
            [CLSCompliant(false)]
            public static void GetFirstPerfQueryI([OutAttribute] out Int32 queryId) { throw new NotImplementedException(); }

            /// <summary>[requires: INTEL_performance_query]</summary>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glGetFirstPerfQueryIdINTEL")]
            [CLSCompliant(false)]
            public static unsafe void GetFirstPerfQueryI([OutAttribute] Int32* queryId) { throw new NotImplementedException(); }

            /// <summary>[requires: INTEL_performance_query]</summary>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glGetFirstPerfQueryIdINTEL")]
            [CLSCompliant(false)]
            public static void GetFirstPerfQueryI([OutAttribute] UInt32[] queryId) { throw new NotImplementedException(); }

            /// <summary>[requires: INTEL_performance_query]</summary>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glGetFirstPerfQueryIdINTEL")]
            [CLSCompliant(false)]
            public static void GetFirstPerfQueryI([OutAttribute] out UInt32 queryId) { throw new NotImplementedException(); }

            /// <summary>[requires: INTEL_performance_query]</summary>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glGetFirstPerfQueryIdINTEL")]
            [CLSCompliant(false)]
            public static unsafe void GetFirstPerfQueryI([OutAttribute] UInt32* queryId) { throw new NotImplementedException(); }

            /// <summary>[requires: INTEL_performance_query]</summary>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glGetNextPerfQueryIdINTEL")]
            [CLSCompliant(false)]
            public static Int32 GetNextPerfQueryI(Int32 queryId) { throw new NotImplementedException(); }

            /// <summary>[requires: INTEL_performance_query]</summary>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glGetNextPerfQueryIdINTEL")]
            [CLSCompliant(false)]
            public static Int32 GetNextPerfQueryI(UInt32 queryId) { throw new NotImplementedException(); }

            /// <summary>[requires: INTEL_performance_query]</summary>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glGetNextPerfQueryIdINTEL")]
            [CLSCompliant(false)]
            public static void GetNextPerfQueryI(Int32 queryId, [OutAttribute] Int32[] nextQueryId) { throw new NotImplementedException(); }

            /// <summary>[requires: INTEL_performance_query]</summary>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glGetNextPerfQueryIdINTEL")]
            [CLSCompliant(false)]
            public static void GetNextPerfQueryI(Int32 queryId, [OutAttribute] out Int32 nextQueryId) { throw new NotImplementedException(); }

            /// <summary>[requires: INTEL_performance_query]</summary>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glGetNextPerfQueryIdINTEL")]
            [CLSCompliant(false)]
            public static unsafe void GetNextPerfQueryI(Int32 queryId, [OutAttribute] Int32* nextQueryId) { throw new NotImplementedException(); }

            /// <summary>[requires: INTEL_performance_query]</summary>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glGetNextPerfQueryIdINTEL")]
            [CLSCompliant(false)]
            public static void GetNextPerfQueryI(UInt32 queryId, [OutAttribute] UInt32[] nextQueryId) { throw new NotImplementedException(); }

            /// <summary>[requires: INTEL_performance_query]</summary>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glGetNextPerfQueryIdINTEL")]
            [CLSCompliant(false)]
            public static void GetNextPerfQueryI(UInt32 queryId, [OutAttribute] out UInt32 nextQueryId) { throw new NotImplementedException(); }

            /// <summary>[requires: INTEL_performance_query]</summary>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glGetNextPerfQueryIdINTEL")]
            [CLSCompliant(false)]
            public static unsafe void GetNextPerfQueryI(UInt32 queryId, [OutAttribute] UInt32* nextQueryId) { throw new NotImplementedException(); }

            /// <summary>[requires: INTEL_performance_query]</summary>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glGetPerfCounterInfoINTEL")]
            [CLSCompliant(false)]
            public static void GetPerfCounterInfo(Int32 queryId, Int32 counterId, Int32 counterNameLength, [OutAttribute] StringBuilder counterName, Int32 counterDescLength, [OutAttribute] StringBuilder counterDesc, [OutAttribute] Int32[] counterOffset, [OutAttribute] Int32[] counterDataSize, [OutAttribute] Int32[] counterTypeEnum, [OutAttribute] Int32[] counterDataTypeEnum, [OutAttribute] Int64[] rawCounterMaxValue) { throw new NotImplementedException(); }

            /// <summary>[requires: INTEL_performance_query]</summary>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glGetPerfCounterInfoINTEL")]
            [CLSCompliant(false)]
            public static void GetPerfCounterInfo(Int32 queryId, Int32 counterId, Int32 counterNameLength, [OutAttribute] StringBuilder counterName, Int32 counterDescLength, [OutAttribute] StringBuilder counterDesc, [OutAttribute] out Int32 counterOffset, [OutAttribute] out Int32 counterDataSize, [OutAttribute] out Int32 counterTypeEnum, [OutAttribute] out Int32 counterDataTypeEnum, [OutAttribute] out Int64 rawCounterMaxValue) { throw new NotImplementedException(); }

            /// <summary>[requires: INTEL_performance_query]</summary>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glGetPerfCounterInfoINTEL")]
            [CLSCompliant(false)]
            public static unsafe void GetPerfCounterInfo(Int32 queryId, Int32 counterId, Int32 counterNameLength, [OutAttribute] StringBuilder counterName, Int32 counterDescLength, [OutAttribute] StringBuilder counterDesc, [OutAttribute] Int32* counterOffset, [OutAttribute] Int32* counterDataSize, [OutAttribute] Int32* counterTypeEnum, [OutAttribute] Int32* counterDataTypeEnum, [OutAttribute] Int64* rawCounterMaxValue) { throw new NotImplementedException(); }

            /// <summary>[requires: INTEL_performance_query]</summary>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glGetPerfCounterInfoINTEL")]
            [CLSCompliant(false)]
            public static void GetPerfCounterInfo(UInt32 queryId, UInt32 counterId, UInt32 counterNameLength, [OutAttribute] StringBuilder counterName, UInt32 counterDescLength, [OutAttribute] StringBuilder counterDesc, [OutAttribute] UInt32[] counterOffset, [OutAttribute] UInt32[] counterDataSize, [OutAttribute] UInt32[] counterTypeEnum, [OutAttribute] UInt32[] counterDataTypeEnum, [OutAttribute] UInt64[] rawCounterMaxValue) { throw new NotImplementedException(); }

            /// <summary>[requires: INTEL_performance_query]</summary>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glGetPerfCounterInfoINTEL")]
            [CLSCompliant(false)]
            public static void GetPerfCounterInfo(UInt32 queryId, UInt32 counterId, UInt32 counterNameLength, [OutAttribute] StringBuilder counterName, UInt32 counterDescLength, [OutAttribute] StringBuilder counterDesc, [OutAttribute] out UInt32 counterOffset, [OutAttribute] out UInt32 counterDataSize, [OutAttribute] out UInt32 counterTypeEnum, [OutAttribute] out UInt32 counterDataTypeEnum, [OutAttribute] out UInt64 rawCounterMaxValue) { throw new NotImplementedException(); }

            /// <summary>[requires: INTEL_performance_query]</summary>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glGetPerfCounterInfoINTEL")]
            [CLSCompliant(false)]
            public static unsafe void GetPerfCounterInfo(UInt32 queryId, UInt32 counterId, UInt32 counterNameLength, [OutAttribute] StringBuilder counterName, UInt32 counterDescLength, [OutAttribute] StringBuilder counterDesc, [OutAttribute] UInt32* counterOffset, [OutAttribute] UInt32* counterDataSize, [OutAttribute] UInt32* counterTypeEnum, [OutAttribute] UInt32* counterDataTypeEnum, [OutAttribute] UInt64* rawCounterMaxValue) { throw new NotImplementedException(); }

            /// <summary>[requires: INTEL_performance_query]</summary>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glGetPerfQueryDataINTEL")]
            [CLSCompliant(false)]
            public static void GetPerfQueryData(Int32 queryHandle, Int32 flags, Int32 dataSize, [OutAttribute] IntPtr data, [OutAttribute] Int32[] bytesWritten) { throw new NotImplementedException(); }

            /// <summary>[requires: INTEL_performance_query]</summary>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glGetPerfQueryDataINTEL")]
            [CLSCompliant(false)]
            public static void GetPerfQueryData(Int32 queryHandle, Int32 flags, Int32 dataSize, [OutAttribute] IntPtr data, [OutAttribute] out Int32 bytesWritten) { throw new NotImplementedException(); }

            /// <summary>[requires: INTEL_performance_query]</summary>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glGetPerfQueryDataINTEL")]
            [CLSCompliant(false)]
            public static unsafe void GetPerfQueryData(Int32 queryHandle, Int32 flags, Int32 dataSize, [OutAttribute] IntPtr data, [OutAttribute] Int32* bytesWritten) { throw new NotImplementedException(); }

            /// <summary>[requires: INTEL_performance_query]</summary>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glGetPerfQueryDataINTEL")]
            [CLSCompliant(false)]
            public static void GetPerfQueryData<T3>(Int32 queryHandle, Int32 flags, Int32 dataSize, [InAttribute, OutAttribute] T3[] data, [OutAttribute] Int32[] bytesWritten)
                where T3 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: INTEL_performance_query]</summary>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glGetPerfQueryDataINTEL")]
            [CLSCompliant(false)]
            public static void GetPerfQueryData<T3>(Int32 queryHandle, Int32 flags, Int32 dataSize, [InAttribute, OutAttribute] T3[] data, [OutAttribute] out Int32 bytesWritten)
                where T3 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: INTEL_performance_query]</summary>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glGetPerfQueryDataINTEL")]
            [CLSCompliant(false)]
            public static unsafe void GetPerfQueryData<T3>(Int32 queryHandle, Int32 flags, Int32 dataSize, [InAttribute, OutAttribute] T3[] data, [OutAttribute] Int32* bytesWritten)
                where T3 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: INTEL_performance_query]</summary>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glGetPerfQueryDataINTEL")]
            [CLSCompliant(false)]
            public static void GetPerfQueryData<T3>(Int32 queryHandle, Int32 flags, Int32 dataSize, [InAttribute, OutAttribute] T3[,] data, [OutAttribute] Int32[] bytesWritten)
                where T3 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: INTEL_performance_query]</summary>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glGetPerfQueryDataINTEL")]
            [CLSCompliant(false)]
            public static void GetPerfQueryData<T3>(Int32 queryHandle, Int32 flags, Int32 dataSize, [InAttribute, OutAttribute] T3[,] data, [OutAttribute] out Int32 bytesWritten)
                where T3 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: INTEL_performance_query]</summary>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glGetPerfQueryDataINTEL")]
            [CLSCompliant(false)]
            public static unsafe void GetPerfQueryData<T3>(Int32 queryHandle, Int32 flags, Int32 dataSize, [InAttribute, OutAttribute] T3[,] data, [OutAttribute] Int32* bytesWritten)
                where T3 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: INTEL_performance_query]</summary>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glGetPerfQueryDataINTEL")]
            [CLSCompliant(false)]
            public static void GetPerfQueryData<T3>(Int32 queryHandle, Int32 flags, Int32 dataSize, [InAttribute, OutAttribute] T3[,,] data, [OutAttribute] Int32[] bytesWritten)
                where T3 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: INTEL_performance_query]</summary>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glGetPerfQueryDataINTEL")]
            [CLSCompliant(false)]
            public static void GetPerfQueryData<T3>(Int32 queryHandle, Int32 flags, Int32 dataSize, [InAttribute, OutAttribute] T3[,,] data, [OutAttribute] out Int32 bytesWritten)
                where T3 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: INTEL_performance_query]</summary>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glGetPerfQueryDataINTEL")]
            [CLSCompliant(false)]
            public static unsafe void GetPerfQueryData<T3>(Int32 queryHandle, Int32 flags, Int32 dataSize, [InAttribute, OutAttribute] T3[,,] data, [OutAttribute] Int32* bytesWritten)
                where T3 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: INTEL_performance_query]</summary>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glGetPerfQueryDataINTEL")]
            [CLSCompliant(false)]
            public static void GetPerfQueryData<T3>(Int32 queryHandle, Int32 flags, Int32 dataSize, [InAttribute, OutAttribute] ref T3 data, [OutAttribute] Int32[] bytesWritten)
                where T3 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: INTEL_performance_query]</summary>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glGetPerfQueryDataINTEL")]
            [CLSCompliant(false)]
            public static void GetPerfQueryData<T3>(Int32 queryHandle, Int32 flags, Int32 dataSize, [InAttribute, OutAttribute] ref T3 data, [OutAttribute] out Int32 bytesWritten)
                where T3 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: INTEL_performance_query]</summary>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glGetPerfQueryDataINTEL")]
            [CLSCompliant(false)]
            public static unsafe void GetPerfQueryData<T3>(Int32 queryHandle, Int32 flags, Int32 dataSize, [InAttribute, OutAttribute] ref T3 data, [OutAttribute] Int32* bytesWritten)
                where T3 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: INTEL_performance_query]</summary>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glGetPerfQueryDataINTEL")]
            [CLSCompliant(false)]
            public static void GetPerfQueryData(UInt32 queryHandle, UInt32 flags, Int32 dataSize, [OutAttribute] IntPtr data, [OutAttribute] UInt32[] bytesWritten) { throw new NotImplementedException(); }

            /// <summary>[requires: INTEL_performance_query]</summary>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glGetPerfQueryDataINTEL")]
            [CLSCompliant(false)]
            public static void GetPerfQueryData(UInt32 queryHandle, UInt32 flags, Int32 dataSize, [OutAttribute] IntPtr data, [OutAttribute] out UInt32 bytesWritten) { throw new NotImplementedException(); }

            /// <summary>[requires: INTEL_performance_query]</summary>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glGetPerfQueryDataINTEL")]
            [CLSCompliant(false)]
            public static unsafe void GetPerfQueryData(UInt32 queryHandle, UInt32 flags, Int32 dataSize, [OutAttribute] IntPtr data, [OutAttribute] UInt32* bytesWritten) { throw new NotImplementedException(); }

            /// <summary>[requires: INTEL_performance_query]</summary>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glGetPerfQueryDataINTEL")]
            [CLSCompliant(false)]
            public static void GetPerfQueryData<T3>(UInt32 queryHandle, UInt32 flags, Int32 dataSize, [InAttribute, OutAttribute] T3[] data, [OutAttribute] UInt32[] bytesWritten)
                where T3 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: INTEL_performance_query]</summary>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glGetPerfQueryDataINTEL")]
            [CLSCompliant(false)]
            public static void GetPerfQueryData<T3>(UInt32 queryHandle, UInt32 flags, Int32 dataSize, [InAttribute, OutAttribute] T3[] data, [OutAttribute] out UInt32 bytesWritten)
                where T3 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: INTEL_performance_query]</summary>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glGetPerfQueryDataINTEL")]
            [CLSCompliant(false)]
            public static unsafe void GetPerfQueryData<T3>(UInt32 queryHandle, UInt32 flags, Int32 dataSize, [InAttribute, OutAttribute] T3[] data, [OutAttribute] UInt32* bytesWritten)
                where T3 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: INTEL_performance_query]</summary>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glGetPerfQueryDataINTEL")]
            [CLSCompliant(false)]
            public static void GetPerfQueryData<T3>(UInt32 queryHandle, UInt32 flags, Int32 dataSize, [InAttribute, OutAttribute] T3[,] data, [OutAttribute] UInt32[] bytesWritten)
                where T3 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: INTEL_performance_query]</summary>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glGetPerfQueryDataINTEL")]
            [CLSCompliant(false)]
            public static void GetPerfQueryData<T3>(UInt32 queryHandle, UInt32 flags, Int32 dataSize, [InAttribute, OutAttribute] T3[,] data, [OutAttribute] out UInt32 bytesWritten)
                where T3 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: INTEL_performance_query]</summary>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glGetPerfQueryDataINTEL")]
            [CLSCompliant(false)]
            public static unsafe void GetPerfQueryData<T3>(UInt32 queryHandle, UInt32 flags, Int32 dataSize, [InAttribute, OutAttribute] T3[,] data, [OutAttribute] UInt32* bytesWritten)
                where T3 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: INTEL_performance_query]</summary>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glGetPerfQueryDataINTEL")]
            [CLSCompliant(false)]
            public static void GetPerfQueryData<T3>(UInt32 queryHandle, UInt32 flags, Int32 dataSize, [InAttribute, OutAttribute] T3[,,] data, [OutAttribute] UInt32[] bytesWritten)
                where T3 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: INTEL_performance_query]</summary>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glGetPerfQueryDataINTEL")]
            [CLSCompliant(false)]
            public static void GetPerfQueryData<T3>(UInt32 queryHandle, UInt32 flags, Int32 dataSize, [InAttribute, OutAttribute] T3[,,] data, [OutAttribute] out UInt32 bytesWritten)
                where T3 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: INTEL_performance_query]</summary>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glGetPerfQueryDataINTEL")]
            [CLSCompliant(false)]
            public static unsafe void GetPerfQueryData<T3>(UInt32 queryHandle, UInt32 flags, Int32 dataSize, [InAttribute, OutAttribute] T3[,,] data, [OutAttribute] UInt32* bytesWritten)
                where T3 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: INTEL_performance_query]</summary>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glGetPerfQueryDataINTEL")]
            [CLSCompliant(false)]
            public static void GetPerfQueryData<T3>(UInt32 queryHandle, UInt32 flags, Int32 dataSize, [InAttribute, OutAttribute] ref T3 data, [OutAttribute] UInt32[] bytesWritten)
                where T3 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: INTEL_performance_query]</summary>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glGetPerfQueryDataINTEL")]
            [CLSCompliant(false)]
            public static void GetPerfQueryData<T3>(UInt32 queryHandle, UInt32 flags, Int32 dataSize, [InAttribute, OutAttribute] ref T3 data, [OutAttribute] out UInt32 bytesWritten)
                where T3 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: INTEL_performance_query]</summary>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glGetPerfQueryDataINTEL")]
            [CLSCompliant(false)]
            public static unsafe void GetPerfQueryData<T3>(UInt32 queryHandle, UInt32 flags, Int32 dataSize, [InAttribute, OutAttribute] ref T3 data, [OutAttribute] UInt32* bytesWritten)
                where T3 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: INTEL_performance_query]</summary>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glGetPerfQueryIdByNameINTEL")]
            [CLSCompliant(false)]
            public static Int32 GetPerfQueryIdByName([OutAttribute] StringBuilder queryName) { throw new NotImplementedException(); }

            /// <summary>[requires: INTEL_performance_query]</summary>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glGetPerfQueryIdByNameINTEL")]
            [CLSCompliant(false)]
            public static void GetPerfQueryIdByName([OutAttribute] StringBuilder queryName, [OutAttribute] Int32[] queryId) { throw new NotImplementedException(); }

            /// <summary>[requires: INTEL_performance_query]</summary>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glGetPerfQueryIdByNameINTEL")]
            [CLSCompliant(false)]
            public static void GetPerfQueryIdByName([OutAttribute] StringBuilder queryName, [OutAttribute] out Int32 queryId) { throw new NotImplementedException(); }

            /// <summary>[requires: INTEL_performance_query]</summary>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glGetPerfQueryIdByNameINTEL")]
            [CLSCompliant(false)]
            public static unsafe void GetPerfQueryIdByName([OutAttribute] StringBuilder queryName, [OutAttribute] Int32* queryId) { throw new NotImplementedException(); }

            /// <summary>[requires: INTEL_performance_query]</summary>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glGetPerfQueryIdByNameINTEL")]
            [CLSCompliant(false)]
            public static void GetPerfQueryIdByName([OutAttribute] StringBuilder queryName, [OutAttribute] UInt32[] queryId) { throw new NotImplementedException(); }

            /// <summary>[requires: INTEL_performance_query]</summary>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glGetPerfQueryIdByNameINTEL")]
            [CLSCompliant(false)]
            public static void GetPerfQueryIdByName([OutAttribute] StringBuilder queryName, [OutAttribute] out UInt32 queryId) { throw new NotImplementedException(); }

            /// <summary>[requires: INTEL_performance_query]</summary>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glGetPerfQueryIdByNameINTEL")]
            [CLSCompliant(false)]
            public static unsafe void GetPerfQueryIdByName([OutAttribute] StringBuilder queryName, [OutAttribute] UInt32* queryId) { throw new NotImplementedException(); }

            /// <summary>[requires: INTEL_performance_query]</summary>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glGetPerfQueryInfoINTEL")]
            [CLSCompliant(false)]
            public static void GetPerfQueryInfo(Int32 queryId, Int32 queryNameLength, [OutAttribute] StringBuilder queryName, [OutAttribute] Int32[] dataSize, [OutAttribute] Int32[] noCounters, [OutAttribute] Int32[] noInstances, [OutAttribute] Int32[] capsMask) { throw new NotImplementedException(); }

            /// <summary>[requires: INTEL_performance_query]</summary>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glGetPerfQueryInfoINTEL")]
            [CLSCompliant(false)]
            public static void GetPerfQueryInfo(Int32 queryId, Int32 queryNameLength, [OutAttribute] StringBuilder queryName, [OutAttribute] out Int32 dataSize, [OutAttribute] out Int32 noCounters, [OutAttribute] out Int32 noInstances, [OutAttribute] out Int32 capsMask) { throw new NotImplementedException(); }

            /// <summary>[requires: INTEL_performance_query]</summary>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glGetPerfQueryInfoINTEL")]
            [CLSCompliant(false)]
            public static unsafe void GetPerfQueryInfo(Int32 queryId, Int32 queryNameLength, [OutAttribute] StringBuilder queryName, [OutAttribute] Int32* dataSize, [OutAttribute] Int32* noCounters, [OutAttribute] Int32* noInstances, [OutAttribute] Int32* capsMask) { throw new NotImplementedException(); }

            /// <summary>[requires: INTEL_performance_query]</summary>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glGetPerfQueryInfoINTEL")]
            [CLSCompliant(false)]
            public static void GetPerfQueryInfo(UInt32 queryId, UInt32 queryNameLength, [OutAttribute] StringBuilder queryName, [OutAttribute] UInt32[] dataSize, [OutAttribute] UInt32[] noCounters, [OutAttribute] UInt32[] noInstances, [OutAttribute] UInt32[] capsMask) { throw new NotImplementedException(); }

            /// <summary>[requires: INTEL_performance_query]</summary>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glGetPerfQueryInfoINTEL")]
            [CLSCompliant(false)]
            public static void GetPerfQueryInfo(UInt32 queryId, UInt32 queryNameLength, [OutAttribute] StringBuilder queryName, [OutAttribute] out UInt32 dataSize, [OutAttribute] out UInt32 noCounters, [OutAttribute] out UInt32 noInstances, [OutAttribute] out UInt32 capsMask) { throw new NotImplementedException(); }

            /// <summary>[requires: INTEL_performance_query]</summary>
            [AutoGenerated(Category = "INTEL_performance_query", Version = "", EntryPoint = "glGetPerfQueryInfoINTEL")]
            [CLSCompliant(false)]
            public static unsafe void GetPerfQueryInfo(UInt32 queryId, UInt32 queryNameLength, [OutAttribute] StringBuilder queryName, [OutAttribute] UInt32* dataSize, [OutAttribute] UInt32* noCounters, [OutAttribute] UInt32* noInstances, [OutAttribute] UInt32* capsMask) { throw new NotImplementedException(); }

        }

        public static partial class Khr
        {
            /// <summary>[requires: KHR_debug]
            /// Specify a callback to receive debugging messages from the GL
            /// </summary>
            /// <param name="callback">
            /// <para>
            /// The address of a callback function that will be called when a debug message is generated.
            /// </para>
            /// </param>
            /// <param name="userParam">
            /// <para>
            /// A user supplied pointer that will be passed on each invocation of callback.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageCallbackKHR")]
            public static void DebugMessageCallback(DebugProcKhr callback, IntPtr userParam) { throw new NotImplementedException(); }

            /// <summary>[requires: KHR_debug]
            /// Specify a callback to receive debugging messages from the GL
            /// </summary>
            /// <param name="callback">
            /// <para>
            /// The address of a callback function that will be called when a debug message is generated.
            /// </para>
            /// </param>
            /// <param name="userParam">
            /// <para>
            /// A user supplied pointer that will be passed on each invocation of callback.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageCallbackKHR")]
            [CLSCompliant(false)]
            public static void DebugMessageCallback<T1>(DebugProcKhr callback, [InAttribute, OutAttribute] T1[] userParam)
                where T1 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: KHR_debug]
            /// Specify a callback to receive debugging messages from the GL
            /// </summary>
            /// <param name="callback">
            /// <para>
            /// The address of a callback function that will be called when a debug message is generated.
            /// </para>
            /// </param>
            /// <param name="userParam">
            /// <para>
            /// A user supplied pointer that will be passed on each invocation of callback.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageCallbackKHR")]
            [CLSCompliant(false)]
            public static void DebugMessageCallback<T1>(DebugProcKhr callback, [InAttribute, OutAttribute] T1[,] userParam)
                where T1 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: KHR_debug]
            /// Specify a callback to receive debugging messages from the GL
            /// </summary>
            /// <param name="callback">
            /// <para>
            /// The address of a callback function that will be called when a debug message is generated.
            /// </para>
            /// </param>
            /// <param name="userParam">
            /// <para>
            /// A user supplied pointer that will be passed on each invocation of callback.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageCallbackKHR")]
            [CLSCompliant(false)]
            public static void DebugMessageCallback<T1>(DebugProcKhr callback, [InAttribute, OutAttribute] T1[,,] userParam)
                where T1 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: KHR_debug]
            /// Specify a callback to receive debugging messages from the GL
            /// </summary>
            /// <param name="callback">
            /// <para>
            /// The address of a callback function that will be called when a debug message is generated.
            /// </para>
            /// </param>
            /// <param name="userParam">
            /// <para>
            /// A user supplied pointer that will be passed on each invocation of callback.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageCallbackKHR")]
            public static void DebugMessageCallback<T1>(DebugProcKhr callback, [InAttribute, OutAttribute] ref T1 userParam)
                where T1 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: KHR_debug]
            /// Control the reporting of debug messages in a debug context
            /// </summary>
            /// <param name="source">
            /// <para>
            /// The source of debug messages to enable or disable.
            /// </para>
            /// </param>
            /// <param name="type">
            /// <para>
            /// The type of debug messages to enable or disable.
            /// </para>
            /// </param>
            /// <param name="severity">
            /// <para>
            /// The severity of debug messages to enable or disable.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// The length of the array ids.
            /// </para>
            /// </param>
            /// <param name="ids">
            /// <para>
            /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
            /// </para>
            /// </param>
            /// <param name="enabled">
            /// <para>
            /// A Boolean flag determining whether the selected messages should be enabled or disabled.
            /// </para>
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageControlKHR")]
            [CLSCompliant(false)]
            public static void DebugMessageControl(OpenTK.Graphics.ES30.All source, OpenTK.Graphics.ES30.All type, OpenTK.Graphics.ES30.All severity, Int32 count, Int32[] ids, bool enabled) { throw new NotImplementedException(); }

            /// <summary>[requires: KHR_debug]
            /// Control the reporting of debug messages in a debug context
            /// </summary>
            /// <param name="source">
            /// <para>
            /// The source of debug messages to enable or disable.
            /// </para>
            /// </param>
            /// <param name="type">
            /// <para>
            /// The type of debug messages to enable or disable.
            /// </para>
            /// </param>
            /// <param name="severity">
            /// <para>
            /// The severity of debug messages to enable or disable.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// The length of the array ids.
            /// </para>
            /// </param>
            /// <param name="ids">
            /// <para>
            /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
            /// </para>
            /// </param>
            /// <param name="enabled">
            /// <para>
            /// A Boolean flag determining whether the selected messages should be enabled or disabled.
            /// </para>
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageControlKHR")]
            [CLSCompliant(false)]
            public static void DebugMessageControl(OpenTK.Graphics.ES30.All source, OpenTK.Graphics.ES30.All type, OpenTK.Graphics.ES30.All severity, Int32 count, ref Int32 ids, bool enabled) { throw new NotImplementedException(); }

            /// <summary>[requires: KHR_debug]
            /// Control the reporting of debug messages in a debug context
            /// </summary>
            /// <param name="source">
            /// <para>
            /// The source of debug messages to enable or disable.
            /// </para>
            /// </param>
            /// <param name="type">
            /// <para>
            /// The type of debug messages to enable or disable.
            /// </para>
            /// </param>
            /// <param name="severity">
            /// <para>
            /// The severity of debug messages to enable or disable.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// The length of the array ids.
            /// </para>
            /// </param>
            /// <param name="ids">
            /// <para>
            /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
            /// </para>
            /// </param>
            /// <param name="enabled">
            /// <para>
            /// A Boolean flag determining whether the selected messages should be enabled or disabled.
            /// </para>
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageControlKHR")]
            [CLSCompliant(false)]
            public static unsafe void DebugMessageControl(OpenTK.Graphics.ES30.All source, OpenTK.Graphics.ES30.All type, OpenTK.Graphics.ES30.All severity, Int32 count, Int32* ids, bool enabled) { throw new NotImplementedException(); }

            /// <summary>[requires: KHR_debug]
            /// Control the reporting of debug messages in a debug context
            /// </summary>
            /// <param name="source">
            /// <para>
            /// The source of debug messages to enable or disable.
            /// </para>
            /// </param>
            /// <param name="type">
            /// <para>
            /// The type of debug messages to enable or disable.
            /// </para>
            /// </param>
            /// <param name="severity">
            /// <para>
            /// The severity of debug messages to enable or disable.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// The length of the array ids.
            /// </para>
            /// </param>
            /// <param name="ids">
            /// <para>
            /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
            /// </para>
            /// </param>
            /// <param name="enabled">
            /// <para>
            /// A Boolean flag determining whether the selected messages should be enabled or disabled.
            /// </para>
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageControlKHR")]
            [CLSCompliant(false)]
            public static void DebugMessageControl(OpenTK.Graphics.ES30.All source, OpenTK.Graphics.ES30.All type, OpenTK.Graphics.ES30.All severity, Int32 count, UInt32[] ids, bool enabled) { throw new NotImplementedException(); }

            /// <summary>[requires: KHR_debug]
            /// Control the reporting of debug messages in a debug context
            /// </summary>
            /// <param name="source">
            /// <para>
            /// The source of debug messages to enable or disable.
            /// </para>
            /// </param>
            /// <param name="type">
            /// <para>
            /// The type of debug messages to enable or disable.
            /// </para>
            /// </param>
            /// <param name="severity">
            /// <para>
            /// The severity of debug messages to enable or disable.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// The length of the array ids.
            /// </para>
            /// </param>
            /// <param name="ids">
            /// <para>
            /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
            /// </para>
            /// </param>
            /// <param name="enabled">
            /// <para>
            /// A Boolean flag determining whether the selected messages should be enabled or disabled.
            /// </para>
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageControlKHR")]
            [CLSCompliant(false)]
            public static void DebugMessageControl(OpenTK.Graphics.ES30.All source, OpenTK.Graphics.ES30.All type, OpenTK.Graphics.ES30.All severity, Int32 count, ref UInt32 ids, bool enabled) { throw new NotImplementedException(); }

            /// <summary>[requires: KHR_debug]
            /// Control the reporting of debug messages in a debug context
            /// </summary>
            /// <param name="source">
            /// <para>
            /// The source of debug messages to enable or disable.
            /// </para>
            /// </param>
            /// <param name="type">
            /// <para>
            /// The type of debug messages to enable or disable.
            /// </para>
            /// </param>
            /// <param name="severity">
            /// <para>
            /// The severity of debug messages to enable or disable.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// The length of the array ids.
            /// </para>
            /// </param>
            /// <param name="ids">
            /// <para>
            /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
            /// </para>
            /// </param>
            /// <param name="enabled">
            /// <para>
            /// A Boolean flag determining whether the selected messages should be enabled or disabled.
            /// </para>
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageControlKHR")]
            [CLSCompliant(false)]
            public static unsafe void DebugMessageControl(OpenTK.Graphics.ES30.All source, OpenTK.Graphics.ES30.All type, OpenTK.Graphics.ES30.All severity, Int32 count, UInt32* ids, bool enabled) { throw new NotImplementedException(); }

            /// <summary>[requires: KHR_debug]
            /// Control the reporting of debug messages in a debug context
            /// </summary>
            /// <param name="source">
            /// <para>
            /// The source of debug messages to enable or disable.
            /// </para>
            /// </param>
            /// <param name="type">
            /// <para>
            /// The type of debug messages to enable or disable.
            /// </para>
            /// </param>
            /// <param name="severity">
            /// <para>
            /// The severity of debug messages to enable or disable.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// The length of the array ids.
            /// </para>
            /// </param>
            /// <param name="ids">
            /// <para>
            /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
            /// </para>
            /// </param>
            /// <param name="enabled">
            /// <para>
            /// A Boolean flag determining whether the selected messages should be enabled or disabled.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageControlKHR")]
            [CLSCompliant(false)]
            public static void DebugMessageControl(OpenTK.Graphics.ES30.DebugSourceControl source, OpenTK.Graphics.ES30.DebugTypeControl type, OpenTK.Graphics.ES30.DebugSeverityControl severity, Int32 count, Int32[] ids, bool enabled) { throw new NotImplementedException(); }

            /// <summary>[requires: KHR_debug]
            /// Control the reporting of debug messages in a debug context
            /// </summary>
            /// <param name="source">
            /// <para>
            /// The source of debug messages to enable or disable.
            /// </para>
            /// </param>
            /// <param name="type">
            /// <para>
            /// The type of debug messages to enable or disable.
            /// </para>
            /// </param>
            /// <param name="severity">
            /// <para>
            /// The severity of debug messages to enable or disable.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// The length of the array ids.
            /// </para>
            /// </param>
            /// <param name="ids">
            /// <para>
            /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
            /// </para>
            /// </param>
            /// <param name="enabled">
            /// <para>
            /// A Boolean flag determining whether the selected messages should be enabled or disabled.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageControlKHR")]
            [CLSCompliant(false)]
            public static void DebugMessageControl(OpenTK.Graphics.ES30.DebugSourceControl source, OpenTK.Graphics.ES30.DebugTypeControl type, OpenTK.Graphics.ES30.DebugSeverityControl severity, Int32 count, ref Int32 ids, bool enabled) { throw new NotImplementedException(); }

            /// <summary>[requires: KHR_debug]
            /// Control the reporting of debug messages in a debug context
            /// </summary>
            /// <param name="source">
            /// <para>
            /// The source of debug messages to enable or disable.
            /// </para>
            /// </param>
            /// <param name="type">
            /// <para>
            /// The type of debug messages to enable or disable.
            /// </para>
            /// </param>
            /// <param name="severity">
            /// <para>
            /// The severity of debug messages to enable or disable.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// The length of the array ids.
            /// </para>
            /// </param>
            /// <param name="ids">
            /// <para>
            /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
            /// </para>
            /// </param>
            /// <param name="enabled">
            /// <para>
            /// A Boolean flag determining whether the selected messages should be enabled or disabled.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageControlKHR")]
            [CLSCompliant(false)]
            public static unsafe void DebugMessageControl(OpenTK.Graphics.ES30.DebugSourceControl source, OpenTK.Graphics.ES30.DebugTypeControl type, OpenTK.Graphics.ES30.DebugSeverityControl severity, Int32 count, Int32* ids, bool enabled) { throw new NotImplementedException(); }

            /// <summary>[requires: KHR_debug]
            /// Control the reporting of debug messages in a debug context
            /// </summary>
            /// <param name="source">
            /// <para>
            /// The source of debug messages to enable or disable.
            /// </para>
            /// </param>
            /// <param name="type">
            /// <para>
            /// The type of debug messages to enable or disable.
            /// </para>
            /// </param>
            /// <param name="severity">
            /// <para>
            /// The severity of debug messages to enable or disable.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// The length of the array ids.
            /// </para>
            /// </param>
            /// <param name="ids">
            /// <para>
            /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
            /// </para>
            /// </param>
            /// <param name="enabled">
            /// <para>
            /// A Boolean flag determining whether the selected messages should be enabled or disabled.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageControlKHR")]
            [CLSCompliant(false)]
            public static void DebugMessageControl(OpenTK.Graphics.ES30.DebugSourceControl source, OpenTK.Graphics.ES30.DebugTypeControl type, OpenTK.Graphics.ES30.DebugSeverityControl severity, Int32 count, UInt32[] ids, bool enabled) { throw new NotImplementedException(); }

            /// <summary>[requires: KHR_debug]
            /// Control the reporting of debug messages in a debug context
            /// </summary>
            /// <param name="source">
            /// <para>
            /// The source of debug messages to enable or disable.
            /// </para>
            /// </param>
            /// <param name="type">
            /// <para>
            /// The type of debug messages to enable or disable.
            /// </para>
            /// </param>
            /// <param name="severity">
            /// <para>
            /// The severity of debug messages to enable or disable.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// The length of the array ids.
            /// </para>
            /// </param>
            /// <param name="ids">
            /// <para>
            /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
            /// </para>
            /// </param>
            /// <param name="enabled">
            /// <para>
            /// A Boolean flag determining whether the selected messages should be enabled or disabled.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageControlKHR")]
            [CLSCompliant(false)]
            public static void DebugMessageControl(OpenTK.Graphics.ES30.DebugSourceControl source, OpenTK.Graphics.ES30.DebugTypeControl type, OpenTK.Graphics.ES30.DebugSeverityControl severity, Int32 count, ref UInt32 ids, bool enabled) { throw new NotImplementedException(); }

            /// <summary>[requires: KHR_debug]
            /// Control the reporting of debug messages in a debug context
            /// </summary>
            /// <param name="source">
            /// <para>
            /// The source of debug messages to enable or disable.
            /// </para>
            /// </param>
            /// <param name="type">
            /// <para>
            /// The type of debug messages to enable or disable.
            /// </para>
            /// </param>
            /// <param name="severity">
            /// <para>
            /// The severity of debug messages to enable or disable.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// The length of the array ids.
            /// </para>
            /// </param>
            /// <param name="ids">
            /// <para>
            /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
            /// </para>
            /// </param>
            /// <param name="enabled">
            /// <para>
            /// A Boolean flag determining whether the selected messages should be enabled or disabled.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageControlKHR")]
            [CLSCompliant(false)]
            public static unsafe void DebugMessageControl(OpenTK.Graphics.ES30.DebugSourceControl source, OpenTK.Graphics.ES30.DebugTypeControl type, OpenTK.Graphics.ES30.DebugSeverityControl severity, Int32 count, UInt32* ids, bool enabled) { throw new NotImplementedException(); }

            /// <summary>[requires: KHR_debug]
            /// Inject an application-supplied message into the debug message queue
            /// </summary>
            /// <param name="source">
            /// <para>
            /// The source of the debug message to insert.
            /// </para>
            /// </param>
            /// <param name="type">
            /// <para>
            /// The type of the debug message insert.
            /// </para>
            /// </param>
            /// <param name="id">
            /// <para>
            /// The user-supplied identifier of the message to insert.
            /// </para>
            /// </param>
            /// <param name="severity">
            /// <para>
            /// The severity of the debug messages to insert.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// The length string contained in the character array whose address is given by message.
            /// </para>
            /// </param>
            /// <param name="message">
            /// <para>
            /// The address of a character array containing the message to insert.
            /// </para>
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageInsertKHR")]
            [CLSCompliant(false)]
            public static void DebugMessageInsert(OpenTK.Graphics.ES30.All source, OpenTK.Graphics.ES30.All type, Int32 id, OpenTK.Graphics.ES30.All severity, Int32 length, String buf) { throw new NotImplementedException(); }

            /// <summary>[requires: KHR_debug]
            /// Inject an application-supplied message into the debug message queue
            /// </summary>
            /// <param name="source">
            /// <para>
            /// The source of the debug message to insert.
            /// </para>
            /// </param>
            /// <param name="type">
            /// <para>
            /// The type of the debug message insert.
            /// </para>
            /// </param>
            /// <param name="id">
            /// <para>
            /// The user-supplied identifier of the message to insert.
            /// </para>
            /// </param>
            /// <param name="severity">
            /// <para>
            /// The severity of the debug messages to insert.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// The length string contained in the character array whose address is given by message.
            /// </para>
            /// </param>
            /// <param name="message">
            /// <para>
            /// The address of a character array containing the message to insert.
            /// </para>
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageInsertKHR")]
            [CLSCompliant(false)]
            public static void DebugMessageInsert(OpenTK.Graphics.ES30.All source, OpenTK.Graphics.ES30.All type, UInt32 id, OpenTK.Graphics.ES30.All severity, Int32 length, String buf) { throw new NotImplementedException(); }

            /// <summary>[requires: KHR_debug]
            /// Inject an application-supplied message into the debug message queue
            /// </summary>
            /// <param name="source">
            /// <para>
            /// The source of the debug message to insert.
            /// </para>
            /// </param>
            /// <param name="type">
            /// <para>
            /// The type of the debug message insert.
            /// </para>
            /// </param>
            /// <param name="id">
            /// <para>
            /// The user-supplied identifier of the message to insert.
            /// </para>
            /// </param>
            /// <param name="severity">
            /// <para>
            /// The severity of the debug messages to insert.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// The length string contained in the character array whose address is given by message.
            /// </para>
            /// </param>
            /// <param name="message">
            /// <para>
            /// The address of a character array containing the message to insert.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageInsertKHR")]
            [CLSCompliant(false)]
            public static void DebugMessageInsert(OpenTK.Graphics.ES30.DebugSourceExternal source, OpenTK.Graphics.ES30.DebugType type, Int32 id, OpenTK.Graphics.ES30.DebugSeverity severity, Int32 length, String buf) { throw new NotImplementedException(); }

            /// <summary>[requires: KHR_debug]
            /// Inject an application-supplied message into the debug message queue
            /// </summary>
            /// <param name="source">
            /// <para>
            /// The source of the debug message to insert.
            /// </para>
            /// </param>
            /// <param name="type">
            /// <para>
            /// The type of the debug message insert.
            /// </para>
            /// </param>
            /// <param name="id">
            /// <para>
            /// The user-supplied identifier of the message to insert.
            /// </para>
            /// </param>
            /// <param name="severity">
            /// <para>
            /// The severity of the debug messages to insert.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// The length string contained in the character array whose address is given by message.
            /// </para>
            /// </param>
            /// <param name="message">
            /// <para>
            /// The address of a character array containing the message to insert.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageInsertKHR")]
            [CLSCompliant(false)]
            public static void DebugMessageInsert(OpenTK.Graphics.ES30.DebugSourceExternal source, OpenTK.Graphics.ES30.DebugType type, UInt32 id, OpenTK.Graphics.ES30.DebugSeverity severity, Int32 length, String buf) { throw new NotImplementedException(); }

            /// <summary>[requires: KHR_debug]
            /// Retrieve messages from the debug message log
            /// </summary>
            /// <param name="count">
            /// <para>
            /// The number of debug messages to retrieve from the log.
            /// </para>
            /// </param>
            /// <param name="bufSize">
            /// <para>
            /// The size of the buffer whose address is given by messageLog.
            /// </para>
            /// </param>
            /// <param name="sources">
            /// <para>
            /// The address of an array of variables to receive the sources of the retrieved messages.
            /// </para>
            /// </param>
            /// <param name="types">
            /// <para>
            /// The address of an array of variables to receive the types of the retrieved messages.
            /// </para>
            /// </param>
            /// <param name="ids">
            /// <para>
            /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
            /// </para>
            /// </param>
            /// <param name="severities">
            /// <para>
            /// The address of an array of variables to receive the severites of the retrieved messages.
            /// </para>
            /// </param>
            /// <param name="lengths">
            /// <para>
            /// The address of an array of variables to receive the lengths of the received messages.
            /// </para>
            /// </param>
            /// <param name="messageLog">
            /// <para>
            /// The address of an array of characters that will receive the messages.
            /// </para>
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetDebugMessageLogKHR")]
            [CLSCompliant(false)]
            public static Int32 GetDebugMessageLog(Int32 count, Int32 bufSize, [OutAttribute] OpenTK.Graphics.ES30.All[] sources, [OutAttribute] OpenTK.Graphics.ES30.All[] types, [OutAttribute] Int32[] ids, [OutAttribute] OpenTK.Graphics.ES30.All[] severities, [OutAttribute] Int32[] lengths, [OutAttribute] StringBuilder messageLog) { throw new NotImplementedException(); }

            /// <summary>[requires: KHR_debug]
            /// Retrieve messages from the debug message log
            /// </summary>
            /// <param name="count">
            /// <para>
            /// The number of debug messages to retrieve from the log.
            /// </para>
            /// </param>
            /// <param name="bufSize">
            /// <para>
            /// The size of the buffer whose address is given by messageLog.
            /// </para>
            /// </param>
            /// <param name="sources">
            /// <para>
            /// The address of an array of variables to receive the sources of the retrieved messages.
            /// </para>
            /// </param>
            /// <param name="types">
            /// <para>
            /// The address of an array of variables to receive the types of the retrieved messages.
            /// </para>
            /// </param>
            /// <param name="ids">
            /// <para>
            /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
            /// </para>
            /// </param>
            /// <param name="severities">
            /// <para>
            /// The address of an array of variables to receive the severites of the retrieved messages.
            /// </para>
            /// </param>
            /// <param name="lengths">
            /// <para>
            /// The address of an array of variables to receive the lengths of the received messages.
            /// </para>
            /// </param>
            /// <param name="messageLog">
            /// <para>
            /// The address of an array of characters that will receive the messages.
            /// </para>
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetDebugMessageLogKHR")]
            [CLSCompliant(false)]
            public static Int32 GetDebugMessageLog(Int32 count, Int32 bufSize, [OutAttribute] out OpenTK.Graphics.ES30.All sources, [OutAttribute] out OpenTK.Graphics.ES30.All types, [OutAttribute] out Int32 ids, [OutAttribute] out OpenTK.Graphics.ES30.All severities, [OutAttribute] out Int32 lengths, [OutAttribute] StringBuilder messageLog) { throw new NotImplementedException(); }

            /// <summary>[requires: KHR_debug]
            /// Retrieve messages from the debug message log
            /// </summary>
            /// <param name="count">
            /// <para>
            /// The number of debug messages to retrieve from the log.
            /// </para>
            /// </param>
            /// <param name="bufSize">
            /// <para>
            /// The size of the buffer whose address is given by messageLog.
            /// </para>
            /// </param>
            /// <param name="sources">
            /// <para>
            /// The address of an array of variables to receive the sources of the retrieved messages.
            /// </para>
            /// </param>
            /// <param name="types">
            /// <para>
            /// The address of an array of variables to receive the types of the retrieved messages.
            /// </para>
            /// </param>
            /// <param name="ids">
            /// <para>
            /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
            /// </para>
            /// </param>
            /// <param name="severities">
            /// <para>
            /// The address of an array of variables to receive the severites of the retrieved messages.
            /// </para>
            /// </param>
            /// <param name="lengths">
            /// <para>
            /// The address of an array of variables to receive the lengths of the received messages.
            /// </para>
            /// </param>
            /// <param name="messageLog">
            /// <para>
            /// The address of an array of characters that will receive the messages.
            /// </para>
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetDebugMessageLogKHR")]
            [CLSCompliant(false)]
            public static unsafe Int32 GetDebugMessageLog(Int32 count, Int32 bufSize, [OutAttribute] OpenTK.Graphics.ES30.All* sources, [OutAttribute] OpenTK.Graphics.ES30.All* types, [OutAttribute] Int32* ids, [OutAttribute] OpenTK.Graphics.ES30.All* severities, [OutAttribute] Int32* lengths, [OutAttribute] StringBuilder messageLog) { throw new NotImplementedException(); }

            /// <summary>[requires: KHR_debug]
            /// Retrieve messages from the debug message log
            /// </summary>
            /// <param name="count">
            /// <para>
            /// The number of debug messages to retrieve from the log.
            /// </para>
            /// </param>
            /// <param name="bufSize">
            /// <para>
            /// The size of the buffer whose address is given by messageLog.
            /// </para>
            /// </param>
            /// <param name="sources">
            /// <para>
            /// The address of an array of variables to receive the sources of the retrieved messages.
            /// </para>
            /// </param>
            /// <param name="types">
            /// <para>
            /// The address of an array of variables to receive the types of the retrieved messages.
            /// </para>
            /// </param>
            /// <param name="ids">
            /// <para>
            /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
            /// </para>
            /// </param>
            /// <param name="severities">
            /// <para>
            /// The address of an array of variables to receive the severites of the retrieved messages.
            /// </para>
            /// </param>
            /// <param name="lengths">
            /// <para>
            /// The address of an array of variables to receive the lengths of the received messages.
            /// </para>
            /// </param>
            /// <param name="messageLog">
            /// <para>
            /// The address of an array of characters that will receive the messages.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetDebugMessageLogKHR")]
            [CLSCompliant(false)]
            public static Int32 GetDebugMessageLog(Int32 count, Int32 bufSize, [OutAttribute] OpenTK.Graphics.ES30.DebugSourceExternal[] sources, [OutAttribute] OpenTK.Graphics.ES30.DebugType[] types, [OutAttribute] Int32[] ids, [OutAttribute] OpenTK.Graphics.ES30.DebugSeverity[] severities, [OutAttribute] Int32[] lengths, [OutAttribute] StringBuilder messageLog) { throw new NotImplementedException(); }

            /// <summary>[requires: KHR_debug]
            /// Retrieve messages from the debug message log
            /// </summary>
            /// <param name="count">
            /// <para>
            /// The number of debug messages to retrieve from the log.
            /// </para>
            /// </param>
            /// <param name="bufSize">
            /// <para>
            /// The size of the buffer whose address is given by messageLog.
            /// </para>
            /// </param>
            /// <param name="sources">
            /// <para>
            /// The address of an array of variables to receive the sources of the retrieved messages.
            /// </para>
            /// </param>
            /// <param name="types">
            /// <para>
            /// The address of an array of variables to receive the types of the retrieved messages.
            /// </para>
            /// </param>
            /// <param name="ids">
            /// <para>
            /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
            /// </para>
            /// </param>
            /// <param name="severities">
            /// <para>
            /// The address of an array of variables to receive the severites of the retrieved messages.
            /// </para>
            /// </param>
            /// <param name="lengths">
            /// <para>
            /// The address of an array of variables to receive the lengths of the received messages.
            /// </para>
            /// </param>
            /// <param name="messageLog">
            /// <para>
            /// The address of an array of characters that will receive the messages.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetDebugMessageLogKHR")]
            [CLSCompliant(false)]
            public static Int32 GetDebugMessageLog(Int32 count, Int32 bufSize, [OutAttribute] out OpenTK.Graphics.ES30.DebugSourceExternal sources, [OutAttribute] out OpenTK.Graphics.ES30.DebugType types, [OutAttribute] out Int32 ids, [OutAttribute] out OpenTK.Graphics.ES30.DebugSeverity severities, [OutAttribute] out Int32 lengths, [OutAttribute] StringBuilder messageLog) { throw new NotImplementedException(); }

            /// <summary>[requires: KHR_debug]
            /// Retrieve messages from the debug message log
            /// </summary>
            /// <param name="count">
            /// <para>
            /// The number of debug messages to retrieve from the log.
            /// </para>
            /// </param>
            /// <param name="bufSize">
            /// <para>
            /// The size of the buffer whose address is given by messageLog.
            /// </para>
            /// </param>
            /// <param name="sources">
            /// <para>
            /// The address of an array of variables to receive the sources of the retrieved messages.
            /// </para>
            /// </param>
            /// <param name="types">
            /// <para>
            /// The address of an array of variables to receive the types of the retrieved messages.
            /// </para>
            /// </param>
            /// <param name="ids">
            /// <para>
            /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
            /// </para>
            /// </param>
            /// <param name="severities">
            /// <para>
            /// The address of an array of variables to receive the severites of the retrieved messages.
            /// </para>
            /// </param>
            /// <param name="lengths">
            /// <para>
            /// The address of an array of variables to receive the lengths of the received messages.
            /// </para>
            /// </param>
            /// <param name="messageLog">
            /// <para>
            /// The address of an array of characters that will receive the messages.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetDebugMessageLogKHR")]
            [CLSCompliant(false)]
            public static unsafe Int32 GetDebugMessageLog(Int32 count, Int32 bufSize, [OutAttribute] OpenTK.Graphics.ES30.DebugSourceExternal* sources, [OutAttribute] OpenTK.Graphics.ES30.DebugType* types, [OutAttribute] Int32* ids, [OutAttribute] OpenTK.Graphics.ES30.DebugSeverity* severities, [OutAttribute] Int32* lengths, [OutAttribute] StringBuilder messageLog) { throw new NotImplementedException(); }

            /// <summary>[requires: KHR_debug]
            /// Retrieve messages from the debug message log
            /// </summary>
            /// <param name="count">
            /// <para>
            /// The number of debug messages to retrieve from the log.
            /// </para>
            /// </param>
            /// <param name="bufSize">
            /// <para>
            /// The size of the buffer whose address is given by messageLog.
            /// </para>
            /// </param>
            /// <param name="sources">
            /// <para>
            /// The address of an array of variables to receive the sources of the retrieved messages.
            /// </para>
            /// </param>
            /// <param name="types">
            /// <para>
            /// The address of an array of variables to receive the types of the retrieved messages.
            /// </para>
            /// </param>
            /// <param name="ids">
            /// <para>
            /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
            /// </para>
            /// </param>
            /// <param name="severities">
            /// <para>
            /// The address of an array of variables to receive the severites of the retrieved messages.
            /// </para>
            /// </param>
            /// <param name="lengths">
            /// <para>
            /// The address of an array of variables to receive the lengths of the received messages.
            /// </para>
            /// </param>
            /// <param name="messageLog">
            /// <para>
            /// The address of an array of characters that will receive the messages.
            /// </para>
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetDebugMessageLogKHR")]
            [CLSCompliant(false)]
            public static Int32 GetDebugMessageLog(UInt32 count, Int32 bufSize, [OutAttribute] OpenTK.Graphics.ES30.All[] sources, [OutAttribute] OpenTK.Graphics.ES30.All[] types, [OutAttribute] UInt32[] ids, [OutAttribute] OpenTK.Graphics.ES30.All[] severities, [OutAttribute] Int32[] lengths, [OutAttribute] StringBuilder messageLog) { throw new NotImplementedException(); }

            /// <summary>[requires: KHR_debug]
            /// Retrieve messages from the debug message log
            /// </summary>
            /// <param name="count">
            /// <para>
            /// The number of debug messages to retrieve from the log.
            /// </para>
            /// </param>
            /// <param name="bufSize">
            /// <para>
            /// The size of the buffer whose address is given by messageLog.
            /// </para>
            /// </param>
            /// <param name="sources">
            /// <para>
            /// The address of an array of variables to receive the sources of the retrieved messages.
            /// </para>
            /// </param>
            /// <param name="types">
            /// <para>
            /// The address of an array of variables to receive the types of the retrieved messages.
            /// </para>
            /// </param>
            /// <param name="ids">
            /// <para>
            /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
            /// </para>
            /// </param>
            /// <param name="severities">
            /// <para>
            /// The address of an array of variables to receive the severites of the retrieved messages.
            /// </para>
            /// </param>
            /// <param name="lengths">
            /// <para>
            /// The address of an array of variables to receive the lengths of the received messages.
            /// </para>
            /// </param>
            /// <param name="messageLog">
            /// <para>
            /// The address of an array of characters that will receive the messages.
            /// </para>
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetDebugMessageLogKHR")]
            [CLSCompliant(false)]
            public static Int32 GetDebugMessageLog(UInt32 count, Int32 bufSize, [OutAttribute] out OpenTK.Graphics.ES30.All sources, [OutAttribute] out OpenTK.Graphics.ES30.All types, [OutAttribute] out UInt32 ids, [OutAttribute] out OpenTK.Graphics.ES30.All severities, [OutAttribute] out Int32 lengths, [OutAttribute] StringBuilder messageLog) { throw new NotImplementedException(); }

            /// <summary>[requires: KHR_debug]
            /// Retrieve messages from the debug message log
            /// </summary>
            /// <param name="count">
            /// <para>
            /// The number of debug messages to retrieve from the log.
            /// </para>
            /// </param>
            /// <param name="bufSize">
            /// <para>
            /// The size of the buffer whose address is given by messageLog.
            /// </para>
            /// </param>
            /// <param name="sources">
            /// <para>
            /// The address of an array of variables to receive the sources of the retrieved messages.
            /// </para>
            /// </param>
            /// <param name="types">
            /// <para>
            /// The address of an array of variables to receive the types of the retrieved messages.
            /// </para>
            /// </param>
            /// <param name="ids">
            /// <para>
            /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
            /// </para>
            /// </param>
            /// <param name="severities">
            /// <para>
            /// The address of an array of variables to receive the severites of the retrieved messages.
            /// </para>
            /// </param>
            /// <param name="lengths">
            /// <para>
            /// The address of an array of variables to receive the lengths of the received messages.
            /// </para>
            /// </param>
            /// <param name="messageLog">
            /// <para>
            /// The address of an array of characters that will receive the messages.
            /// </para>
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetDebugMessageLogKHR")]
            [CLSCompliant(false)]
            public static unsafe Int32 GetDebugMessageLog(UInt32 count, Int32 bufSize, [OutAttribute] OpenTK.Graphics.ES30.All* sources, [OutAttribute] OpenTK.Graphics.ES30.All* types, [OutAttribute] UInt32* ids, [OutAttribute] OpenTK.Graphics.ES30.All* severities, [OutAttribute] Int32* lengths, [OutAttribute] StringBuilder messageLog) { throw new NotImplementedException(); }

            /// <summary>[requires: KHR_debug]
            /// Retrieve messages from the debug message log
            /// </summary>
            /// <param name="count">
            /// <para>
            /// The number of debug messages to retrieve from the log.
            /// </para>
            /// </param>
            /// <param name="bufSize">
            /// <para>
            /// The size of the buffer whose address is given by messageLog.
            /// </para>
            /// </param>
            /// <param name="sources">
            /// <para>
            /// The address of an array of variables to receive the sources of the retrieved messages.
            /// </para>
            /// </param>
            /// <param name="types">
            /// <para>
            /// The address of an array of variables to receive the types of the retrieved messages.
            /// </para>
            /// </param>
            /// <param name="ids">
            /// <para>
            /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
            /// </para>
            /// </param>
            /// <param name="severities">
            /// <para>
            /// The address of an array of variables to receive the severites of the retrieved messages.
            /// </para>
            /// </param>
            /// <param name="lengths">
            /// <para>
            /// The address of an array of variables to receive the lengths of the received messages.
            /// </para>
            /// </param>
            /// <param name="messageLog">
            /// <para>
            /// The address of an array of characters that will receive the messages.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetDebugMessageLogKHR")]
            [CLSCompliant(false)]
            public static Int32 GetDebugMessageLog(UInt32 count, Int32 bufSize, [OutAttribute] OpenTK.Graphics.ES30.DebugSourceExternal[] sources, [OutAttribute] OpenTK.Graphics.ES30.DebugType[] types, [OutAttribute] UInt32[] ids, [OutAttribute] OpenTK.Graphics.ES30.DebugSeverity[] severities, [OutAttribute] Int32[] lengths, [OutAttribute] StringBuilder messageLog) { throw new NotImplementedException(); }

            /// <summary>[requires: KHR_debug]
            /// Retrieve messages from the debug message log
            /// </summary>
            /// <param name="count">
            /// <para>
            /// The number of debug messages to retrieve from the log.
            /// </para>
            /// </param>
            /// <param name="bufSize">
            /// <para>
            /// The size of the buffer whose address is given by messageLog.
            /// </para>
            /// </param>
            /// <param name="sources">
            /// <para>
            /// The address of an array of variables to receive the sources of the retrieved messages.
            /// </para>
            /// </param>
            /// <param name="types">
            /// <para>
            /// The address of an array of variables to receive the types of the retrieved messages.
            /// </para>
            /// </param>
            /// <param name="ids">
            /// <para>
            /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
            /// </para>
            /// </param>
            /// <param name="severities">
            /// <para>
            /// The address of an array of variables to receive the severites of the retrieved messages.
            /// </para>
            /// </param>
            /// <param name="lengths">
            /// <para>
            /// The address of an array of variables to receive the lengths of the received messages.
            /// </para>
            /// </param>
            /// <param name="messageLog">
            /// <para>
            /// The address of an array of characters that will receive the messages.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetDebugMessageLogKHR")]
            [CLSCompliant(false)]
            public static Int32 GetDebugMessageLog(UInt32 count, Int32 bufSize, [OutAttribute] out OpenTK.Graphics.ES30.DebugSourceExternal sources, [OutAttribute] out OpenTK.Graphics.ES30.DebugType types, [OutAttribute] out UInt32 ids, [OutAttribute] out OpenTK.Graphics.ES30.DebugSeverity severities, [OutAttribute] out Int32 lengths, [OutAttribute] StringBuilder messageLog) { throw new NotImplementedException(); }

            /// <summary>[requires: KHR_debug]
            /// Retrieve messages from the debug message log
            /// </summary>
            /// <param name="count">
            /// <para>
            /// The number of debug messages to retrieve from the log.
            /// </para>
            /// </param>
            /// <param name="bufSize">
            /// <para>
            /// The size of the buffer whose address is given by messageLog.
            /// </para>
            /// </param>
            /// <param name="sources">
            /// <para>
            /// The address of an array of variables to receive the sources of the retrieved messages.
            /// </para>
            /// </param>
            /// <param name="types">
            /// <para>
            /// The address of an array of variables to receive the types of the retrieved messages.
            /// </para>
            /// </param>
            /// <param name="ids">
            /// <para>
            /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
            /// </para>
            /// </param>
            /// <param name="severities">
            /// <para>
            /// The address of an array of variables to receive the severites of the retrieved messages.
            /// </para>
            /// </param>
            /// <param name="lengths">
            /// <para>
            /// The address of an array of variables to receive the lengths of the received messages.
            /// </para>
            /// </param>
            /// <param name="messageLog">
            /// <para>
            /// The address of an array of characters that will receive the messages.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetDebugMessageLogKHR")]
            [CLSCompliant(false)]
            public static unsafe Int32 GetDebugMessageLog(UInt32 count, Int32 bufSize, [OutAttribute] OpenTK.Graphics.ES30.DebugSourceExternal* sources, [OutAttribute] OpenTK.Graphics.ES30.DebugType* types, [OutAttribute] UInt32* ids, [OutAttribute] OpenTK.Graphics.ES30.DebugSeverity* severities, [OutAttribute] Int32* lengths, [OutAttribute] StringBuilder messageLog) { throw new NotImplementedException(); }

            /// <summary>[requires: KHR_debug]
            /// Retrieve the label of a named object identified within a namespace
            /// </summary>
            /// <param name="identifier">
            /// <para>
            /// The namespace from which the name of the object is allocated.
            /// </para>
            /// </param>
            /// <param name="name">
            /// <para>
            /// The name of the object whose label to retrieve.
            /// </para>
            /// </param>
            /// <param name="bufSize">
            /// <para>
            /// The length of the buffer whose address is in label.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// The address of a variable to receive the length of the object label.
            /// </para>
            /// </param>
            /// <param name="label">
            /// <para>
            /// The address of a string that will receive the object label.
            /// </para>
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectLabelKHR")]
            [CLSCompliant(false)]
            public static void GetObjectLabel(OpenTK.Graphics.ES30.All identifier, Int32 name, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute] StringBuilder label) { throw new NotImplementedException(); }

            /// <summary>[requires: KHR_debug]
            /// Retrieve the label of a named object identified within a namespace
            /// </summary>
            /// <param name="identifier">
            /// <para>
            /// The namespace from which the name of the object is allocated.
            /// </para>
            /// </param>
            /// <param name="name">
            /// <para>
            /// The name of the object whose label to retrieve.
            /// </para>
            /// </param>
            /// <param name="bufSize">
            /// <para>
            /// The length of the buffer whose address is in label.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// The address of a variable to receive the length of the object label.
            /// </para>
            /// </param>
            /// <param name="label">
            /// <para>
            /// The address of a string that will receive the object label.
            /// </para>
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectLabelKHR")]
            [CLSCompliant(false)]
            public static void GetObjectLabel(OpenTK.Graphics.ES30.All identifier, Int32 name, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder label) { throw new NotImplementedException(); }

            /// <summary>[requires: KHR_debug]
            /// Retrieve the label of a named object identified within a namespace
            /// </summary>
            /// <param name="identifier">
            /// <para>
            /// The namespace from which the name of the object is allocated.
            /// </para>
            /// </param>
            /// <param name="name">
            /// <para>
            /// The name of the object whose label to retrieve.
            /// </para>
            /// </param>
            /// <param name="bufSize">
            /// <para>
            /// The length of the buffer whose address is in label.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// The address of a variable to receive the length of the object label.
            /// </para>
            /// </param>
            /// <param name="label">
            /// <para>
            /// The address of a string that will receive the object label.
            /// </para>
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectLabelKHR")]
            [CLSCompliant(false)]
            public static unsafe void GetObjectLabel(OpenTK.Graphics.ES30.All identifier, Int32 name, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder label) { throw new NotImplementedException(); }

            /// <summary>[requires: KHR_debug]
            /// Retrieve the label of a named object identified within a namespace
            /// </summary>
            /// <param name="identifier">
            /// <para>
            /// The namespace from which the name of the object is allocated.
            /// </para>
            /// </param>
            /// <param name="name">
            /// <para>
            /// The name of the object whose label to retrieve.
            /// </para>
            /// </param>
            /// <param name="bufSize">
            /// <para>
            /// The length of the buffer whose address is in label.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// The address of a variable to receive the length of the object label.
            /// </para>
            /// </param>
            /// <param name="label">
            /// <para>
            /// The address of a string that will receive the object label.
            /// </para>
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectLabelKHR")]
            [CLSCompliant(false)]
            public static void GetObjectLabel(OpenTK.Graphics.ES30.All identifier, UInt32 name, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute] StringBuilder label) { throw new NotImplementedException(); }

            /// <summary>[requires: KHR_debug]
            /// Retrieve the label of a named object identified within a namespace
            /// </summary>
            /// <param name="identifier">
            /// <para>
            /// The namespace from which the name of the object is allocated.
            /// </para>
            /// </param>
            /// <param name="name">
            /// <para>
            /// The name of the object whose label to retrieve.
            /// </para>
            /// </param>
            /// <param name="bufSize">
            /// <para>
            /// The length of the buffer whose address is in label.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// The address of a variable to receive the length of the object label.
            /// </para>
            /// </param>
            /// <param name="label">
            /// <para>
            /// The address of a string that will receive the object label.
            /// </para>
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectLabelKHR")]
            [CLSCompliant(false)]
            public static void GetObjectLabel(OpenTK.Graphics.ES30.All identifier, UInt32 name, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder label) { throw new NotImplementedException(); }

            /// <summary>[requires: KHR_debug]
            /// Retrieve the label of a named object identified within a namespace
            /// </summary>
            /// <param name="identifier">
            /// <para>
            /// The namespace from which the name of the object is allocated.
            /// </para>
            /// </param>
            /// <param name="name">
            /// <para>
            /// The name of the object whose label to retrieve.
            /// </para>
            /// </param>
            /// <param name="bufSize">
            /// <para>
            /// The length of the buffer whose address is in label.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// The address of a variable to receive the length of the object label.
            /// </para>
            /// </param>
            /// <param name="label">
            /// <para>
            /// The address of a string that will receive the object label.
            /// </para>
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectLabelKHR")]
            [CLSCompliant(false)]
            public static unsafe void GetObjectLabel(OpenTK.Graphics.ES30.All identifier, UInt32 name, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder label) { throw new NotImplementedException(); }

            /// <summary>[requires: KHR_debug]
            /// Retrieve the label of a named object identified within a namespace
            /// </summary>
            /// <param name="identifier">
            /// <para>
            /// The namespace from which the name of the object is allocated.
            /// </para>
            /// </param>
            /// <param name="name">
            /// <para>
            /// The name of the object whose label to retrieve.
            /// </para>
            /// </param>
            /// <param name="bufSize">
            /// <para>
            /// The length of the buffer whose address is in label.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// The address of a variable to receive the length of the object label.
            /// </para>
            /// </param>
            /// <param name="label">
            /// <para>
            /// The address of a string that will receive the object label.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectLabelKHR")]
            [CLSCompliant(false)]
            public static void GetObjectLabel(OpenTK.Graphics.ES30.ObjectLabelIdentifier identifier, Int32 name, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute] StringBuilder label) { throw new NotImplementedException(); }

            /// <summary>[requires: KHR_debug]
            /// Retrieve the label of a named object identified within a namespace
            /// </summary>
            /// <param name="identifier">
            /// <para>
            /// The namespace from which the name of the object is allocated.
            /// </para>
            /// </param>
            /// <param name="name">
            /// <para>
            /// The name of the object whose label to retrieve.
            /// </para>
            /// </param>
            /// <param name="bufSize">
            /// <para>
            /// The length of the buffer whose address is in label.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// The address of a variable to receive the length of the object label.
            /// </para>
            /// </param>
            /// <param name="label">
            /// <para>
            /// The address of a string that will receive the object label.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectLabelKHR")]
            [CLSCompliant(false)]
            public static void GetObjectLabel(OpenTK.Graphics.ES30.ObjectLabelIdentifier identifier, Int32 name, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder label) { throw new NotImplementedException(); }

            /// <summary>[requires: KHR_debug]
            /// Retrieve the label of a named object identified within a namespace
            /// </summary>
            /// <param name="identifier">
            /// <para>
            /// The namespace from which the name of the object is allocated.
            /// </para>
            /// </param>
            /// <param name="name">
            /// <para>
            /// The name of the object whose label to retrieve.
            /// </para>
            /// </param>
            /// <param name="bufSize">
            /// <para>
            /// The length of the buffer whose address is in label.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// The address of a variable to receive the length of the object label.
            /// </para>
            /// </param>
            /// <param name="label">
            /// <para>
            /// The address of a string that will receive the object label.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectLabelKHR")]
            [CLSCompliant(false)]
            public static unsafe void GetObjectLabel(OpenTK.Graphics.ES30.ObjectLabelIdentifier identifier, Int32 name, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder label) { throw new NotImplementedException(); }

            /// <summary>[requires: KHR_debug]
            /// Retrieve the label of a named object identified within a namespace
            /// </summary>
            /// <param name="identifier">
            /// <para>
            /// The namespace from which the name of the object is allocated.
            /// </para>
            /// </param>
            /// <param name="name">
            /// <para>
            /// The name of the object whose label to retrieve.
            /// </para>
            /// </param>
            /// <param name="bufSize">
            /// <para>
            /// The length of the buffer whose address is in label.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// The address of a variable to receive the length of the object label.
            /// </para>
            /// </param>
            /// <param name="label">
            /// <para>
            /// The address of a string that will receive the object label.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectLabelKHR")]
            [CLSCompliant(false)]
            public static void GetObjectLabel(OpenTK.Graphics.ES30.ObjectLabelIdentifier identifier, UInt32 name, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute] StringBuilder label) { throw new NotImplementedException(); }

            /// <summary>[requires: KHR_debug]
            /// Retrieve the label of a named object identified within a namespace
            /// </summary>
            /// <param name="identifier">
            /// <para>
            /// The namespace from which the name of the object is allocated.
            /// </para>
            /// </param>
            /// <param name="name">
            /// <para>
            /// The name of the object whose label to retrieve.
            /// </para>
            /// </param>
            /// <param name="bufSize">
            /// <para>
            /// The length of the buffer whose address is in label.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// The address of a variable to receive the length of the object label.
            /// </para>
            /// </param>
            /// <param name="label">
            /// <para>
            /// The address of a string that will receive the object label.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectLabelKHR")]
            [CLSCompliant(false)]
            public static void GetObjectLabel(OpenTK.Graphics.ES30.ObjectLabelIdentifier identifier, UInt32 name, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder label) { throw new NotImplementedException(); }

            /// <summary>[requires: KHR_debug]
            /// Retrieve the label of a named object identified within a namespace
            /// </summary>
            /// <param name="identifier">
            /// <para>
            /// The namespace from which the name of the object is allocated.
            /// </para>
            /// </param>
            /// <param name="name">
            /// <para>
            /// The name of the object whose label to retrieve.
            /// </para>
            /// </param>
            /// <param name="bufSize">
            /// <para>
            /// The length of the buffer whose address is in label.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// The address of a variable to receive the length of the object label.
            /// </para>
            /// </param>
            /// <param name="label">
            /// <para>
            /// The address of a string that will receive the object label.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectLabelKHR")]
            [CLSCompliant(false)]
            public static unsafe void GetObjectLabel(OpenTK.Graphics.ES30.ObjectLabelIdentifier identifier, UInt32 name, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder label) { throw new NotImplementedException(); }

            /// <summary>[requires: KHR_debug]
            /// Retrieve the label of a sync object identified by a pointer
            /// </summary>
            /// <param name="ptr">
            /// <para>
            /// The name of the sync object whose label to retrieve.
            /// </para>
            /// </param>
            /// <param name="bufSize">
            /// <para>
            /// The length of the buffer whose address is in label.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// The address of a variable to receive the length of the object label.
            /// </para>
            /// </param>
            /// <param name="label">
            /// <para>
            /// The address of a string that will receive the object label.
            /// </para>
            /// </param>
            [Obsolete("Use out overload instead")]
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectPtrLabelKHR")]
            [CLSCompliant(false)]
            public static void GetObjectPtrLabel(IntPtr ptr, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute] StringBuilder label) { throw new NotImplementedException(); }

            /// <summary>[requires: KHR_debug]
            /// Retrieve the label of a sync object identified by a pointer
            /// </summary>
            /// <param name="ptr">
            /// <para>
            /// The name of the sync object whose label to retrieve.
            /// </para>
            /// </param>
            /// <param name="bufSize">
            /// <para>
            /// The length of the buffer whose address is in label.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// The address of a variable to receive the length of the object label.
            /// </para>
            /// </param>
            /// <param name="label">
            /// <para>
            /// The address of a string that will receive the object label.
            /// </para>
            /// </param>
            [Obsolete("Use out overload instead")]
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectPtrLabelKHR")]
            [CLSCompliant(false)]
            public static void GetObjectPtrLabel(IntPtr ptr, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder label) { throw new NotImplementedException(); }

            /// <summary>[requires: KHR_debug]
            /// Retrieve the label of a sync object identified by a pointer
            /// </summary>
            /// <param name="ptr">
            /// <para>
            /// The name of the sync object whose label to retrieve.
            /// </para>
            /// </param>
            /// <param name="bufSize">
            /// <para>
            /// The length of the buffer whose address is in label.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// The address of a variable to receive the length of the object label.
            /// </para>
            /// </param>
            /// <param name="label">
            /// <para>
            /// The address of a string that will receive the object label.
            /// </para>
            /// </param>
            [Obsolete("Use out overload instead")]
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectPtrLabelKHR")]
            [CLSCompliant(false)]
            public static unsafe void GetObjectPtrLabel(IntPtr ptr, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder label) { throw new NotImplementedException(); }

            /// <summary>[requires: KHR_debug]
            /// Retrieve the label of a sync object identified by a pointer
            /// </summary>
            /// <param name="ptr">
            /// <para>
            /// The name of the sync object whose label to retrieve.
            /// </para>
            /// </param>
            /// <param name="bufSize">
            /// <para>
            /// The length of the buffer whose address is in label.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// The address of a variable to receive the length of the object label.
            /// </para>
            /// </param>
            /// <param name="label">
            /// <para>
            /// The address of a string that will receive the object label.
            /// </para>
            /// </param>
            [Obsolete("Use out overload instead")]
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectPtrLabelKHR")]
            [CLSCompliant(false)]
            public static void GetObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[] ptr, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute] StringBuilder label)
                where T0 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: KHR_debug]
            /// Retrieve the label of a sync object identified by a pointer
            /// </summary>
            /// <param name="ptr">
            /// <para>
            /// The name of the sync object whose label to retrieve.
            /// </para>
            /// </param>
            /// <param name="bufSize">
            /// <para>
            /// The length of the buffer whose address is in label.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// The address of a variable to receive the length of the object label.
            /// </para>
            /// </param>
            /// <param name="label">
            /// <para>
            /// The address of a string that will receive the object label.
            /// </para>
            /// </param>
            [Obsolete("Use out overload instead")]
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectPtrLabelKHR")]
            [CLSCompliant(false)]
            public static void GetObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[] ptr, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder label)
                where T0 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: KHR_debug]
            /// Retrieve the label of a sync object identified by a pointer
            /// </summary>
            /// <param name="ptr">
            /// <para>
            /// The name of the sync object whose label to retrieve.
            /// </para>
            /// </param>
            /// <param name="bufSize">
            /// <para>
            /// The length of the buffer whose address is in label.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// The address of a variable to receive the length of the object label.
            /// </para>
            /// </param>
            /// <param name="label">
            /// <para>
            /// The address of a string that will receive the object label.
            /// </para>
            /// </param>
            [Obsolete("Use out overload instead")]
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectPtrLabelKHR")]
            [CLSCompliant(false)]
            public static unsafe void GetObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[] ptr, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder label)
                where T0 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: KHR_debug]
            /// Retrieve the label of a sync object identified by a pointer
            /// </summary>
            /// <param name="ptr">
            /// <para>
            /// The name of the sync object whose label to retrieve.
            /// </para>
            /// </param>
            /// <param name="bufSize">
            /// <para>
            /// The length of the buffer whose address is in label.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// The address of a variable to receive the length of the object label.
            /// </para>
            /// </param>
            /// <param name="label">
            /// <para>
            /// The address of a string that will receive the object label.
            /// </para>
            /// </param>
            [Obsolete("Use out overload instead")]
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectPtrLabelKHR")]
            [CLSCompliant(false)]
            public static void GetObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[,] ptr, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute] StringBuilder label)
                where T0 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: KHR_debug]
            /// Retrieve the label of a sync object identified by a pointer
            /// </summary>
            /// <param name="ptr">
            /// <para>
            /// The name of the sync object whose label to retrieve.
            /// </para>
            /// </param>
            /// <param name="bufSize">
            /// <para>
            /// The length of the buffer whose address is in label.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// The address of a variable to receive the length of the object label.
            /// </para>
            /// </param>
            /// <param name="label">
            /// <para>
            /// The address of a string that will receive the object label.
            /// </para>
            /// </param>
            [Obsolete("Use out overload instead")]
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectPtrLabelKHR")]
            [CLSCompliant(false)]
            public static void GetObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[,] ptr, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder label)
                where T0 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: KHR_debug]
            /// Retrieve the label of a sync object identified by a pointer
            /// </summary>
            /// <param name="ptr">
            /// <para>
            /// The name of the sync object whose label to retrieve.
            /// </para>
            /// </param>
            /// <param name="bufSize">
            /// <para>
            /// The length of the buffer whose address is in label.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// The address of a variable to receive the length of the object label.
            /// </para>
            /// </param>
            /// <param name="label">
            /// <para>
            /// The address of a string that will receive the object label.
            /// </para>
            /// </param>
            [Obsolete("Use out overload instead")]
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectPtrLabelKHR")]
            [CLSCompliant(false)]
            public static unsafe void GetObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[,] ptr, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder label)
                where T0 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: KHR_debug]
            /// Retrieve the label of a sync object identified by a pointer
            /// </summary>
            /// <param name="ptr">
            /// <para>
            /// The name of the sync object whose label to retrieve.
            /// </para>
            /// </param>
            /// <param name="bufSize">
            /// <para>
            /// The length of the buffer whose address is in label.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// The address of a variable to receive the length of the object label.
            /// </para>
            /// </param>
            /// <param name="label">
            /// <para>
            /// The address of a string that will receive the object label.
            /// </para>
            /// </param>
            [Obsolete("Use out overload instead")]
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectPtrLabelKHR")]
            [CLSCompliant(false)]
            public static void GetObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[,,] ptr, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute] StringBuilder label)
                where T0 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: KHR_debug]
            /// Retrieve the label of a sync object identified by a pointer
            /// </summary>
            /// <param name="ptr">
            /// <para>
            /// The name of the sync object whose label to retrieve.
            /// </para>
            /// </param>
            /// <param name="bufSize">
            /// <para>
            /// The length of the buffer whose address is in label.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// The address of a variable to receive the length of the object label.
            /// </para>
            /// </param>
            /// <param name="label">
            /// <para>
            /// The address of a string that will receive the object label.
            /// </para>
            /// </param>
            [Obsolete("Use out overload instead")]
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectPtrLabelKHR")]
            [CLSCompliant(false)]
            public static void GetObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[,,] ptr, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder label)
                where T0 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: KHR_debug]
            /// Retrieve the label of a sync object identified by a pointer
            /// </summary>
            /// <param name="ptr">
            /// <para>
            /// The name of the sync object whose label to retrieve.
            /// </para>
            /// </param>
            /// <param name="bufSize">
            /// <para>
            /// The length of the buffer whose address is in label.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// The address of a variable to receive the length of the object label.
            /// </para>
            /// </param>
            /// <param name="label">
            /// <para>
            /// The address of a string that will receive the object label.
            /// </para>
            /// </param>
            [Obsolete("Use out overload instead")]
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectPtrLabelKHR")]
            [CLSCompliant(false)]
            public static unsafe void GetObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[,,] ptr, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder label)
                where T0 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: KHR_debug]
            /// Retrieve the label of a sync object identified by a pointer
            /// </summary>
            /// <param name="ptr">
            /// <para>
            /// The name of the sync object whose label to retrieve.
            /// </para>
            /// </param>
            /// <param name="bufSize">
            /// <para>
            /// The length of the buffer whose address is in label.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// The address of a variable to receive the length of the object label.
            /// </para>
            /// </param>
            /// <param name="label">
            /// <para>
            /// The address of a string that will receive the object label.
            /// </para>
            /// </param>
            [Obsolete("Use out overload instead")]
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectPtrLabelKHR")]
            [CLSCompliant(false)]
            public static void GetObjectPtrLabel<T0>([InAttribute, OutAttribute] ref T0 ptr, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute] StringBuilder label)
                where T0 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: KHR_debug]
            /// Retrieve the label of a sync object identified by a pointer
            /// </summary>
            /// <param name="ptr">
            /// <para>
            /// The name of the sync object whose label to retrieve.
            /// </para>
            /// </param>
            /// <param name="bufSize">
            /// <para>
            /// The length of the buffer whose address is in label.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// The address of a variable to receive the length of the object label.
            /// </para>
            /// </param>
            /// <param name="label">
            /// <para>
            /// The address of a string that will receive the object label.
            /// </para>
            /// </param>
            [Obsolete("Use out overload instead")]
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectPtrLabelKHR")]
            [CLSCompliant(false)]
            public static void GetObjectPtrLabel<T0>([InAttribute, OutAttribute] ref T0 ptr, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder label)
                where T0 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: KHR_debug]
            /// Retrieve the label of a sync object identified by a pointer
            /// </summary>
            /// <param name="ptr">
            /// <para>
            /// The name of the sync object whose label to retrieve.
            /// </para>
            /// </param>
            /// <param name="bufSize">
            /// <para>
            /// The length of the buffer whose address is in label.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// The address of a variable to receive the length of the object label.
            /// </para>
            /// </param>
            /// <param name="label">
            /// <para>
            /// The address of a string that will receive the object label.
            /// </para>
            /// </param>
            [Obsolete("Use out overload instead")]
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetObjectPtrLabelKHR")]
            [CLSCompliant(false)]
            public static unsafe void GetObjectPtrLabel<T0>([InAttribute, OutAttribute] ref T0 ptr, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder label)
                where T0 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: KHR_debug]</summary>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetPointervKHR")]
            public static void GetPointer(OpenTK.Graphics.ES30.All pname, [OutAttribute] IntPtr @params) { throw new NotImplementedException(); }

            /// <summary>[requires: KHR_debug]</summary>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetPointervKHR")]
            [CLSCompliant(false)]
            public static void GetPointer<T1>(OpenTK.Graphics.ES30.All pname, [InAttribute, OutAttribute] T1[] @params)
                where T1 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: KHR_debug]</summary>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetPointervKHR")]
            [CLSCompliant(false)]
            public static void GetPointer<T1>(OpenTK.Graphics.ES30.All pname, [InAttribute, OutAttribute] T1[,] @params)
                where T1 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: KHR_debug]</summary>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetPointervKHR")]
            [CLSCompliant(false)]
            public static void GetPointer<T1>(OpenTK.Graphics.ES30.All pname, [InAttribute, OutAttribute] T1[,,] @params)
                where T1 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: KHR_debug]</summary>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetPointervKHR")]
            public static void GetPointer<T1>(OpenTK.Graphics.ES30.All pname, [InAttribute, OutAttribute] ref T1 @params)
                where T1 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: KHR_debug]
            /// Label a named object identified within a namespace
            /// </summary>
            /// <param name="identifier">
            /// <para>
            /// The namespace from which the name of the object is allocated.
            /// </para>
            /// </param>
            /// <param name="name">
            /// <para>
            /// The name of the object to label.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// The length of the label to be used for the object.
            /// </para>
            /// </param>
            /// <param name="label">
            /// <para>
            /// The address of a string containing the label to assign to the object.
            /// </para>
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glObjectLabelKHR")]
            [CLSCompliant(false)]
            public static void ObjectLabel(OpenTK.Graphics.ES30.All identifier, Int32 name, Int32 length, String label) { throw new NotImplementedException(); }

            /// <summary>[requires: KHR_debug]
            /// Label a named object identified within a namespace
            /// </summary>
            /// <param name="identifier">
            /// <para>
            /// The namespace from which the name of the object is allocated.
            /// </para>
            /// </param>
            /// <param name="name">
            /// <para>
            /// The name of the object to label.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// The length of the label to be used for the object.
            /// </para>
            /// </param>
            /// <param name="label">
            /// <para>
            /// The address of a string containing the label to assign to the object.
            /// </para>
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glObjectLabelKHR")]
            [CLSCompliant(false)]
            public static void ObjectLabel(OpenTK.Graphics.ES30.All identifier, UInt32 name, Int32 length, String label) { throw new NotImplementedException(); }

            /// <summary>[requires: KHR_debug]
            /// Label a named object identified within a namespace
            /// </summary>
            /// <param name="identifier">
            /// <para>
            /// The namespace from which the name of the object is allocated.
            /// </para>
            /// </param>
            /// <param name="name">
            /// <para>
            /// The name of the object to label.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// The length of the label to be used for the object.
            /// </para>
            /// </param>
            /// <param name="label">
            /// <para>
            /// The address of a string containing the label to assign to the object.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glObjectLabelKHR")]
            [CLSCompliant(false)]
            public static void ObjectLabel(OpenTK.Graphics.ES30.ObjectLabelIdentifier identifier, Int32 name, Int32 length, String label) { throw new NotImplementedException(); }

            /// <summary>[requires: KHR_debug]
            /// Label a named object identified within a namespace
            /// </summary>
            /// <param name="identifier">
            /// <para>
            /// The namespace from which the name of the object is allocated.
            /// </para>
            /// </param>
            /// <param name="name">
            /// <para>
            /// The name of the object to label.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// The length of the label to be used for the object.
            /// </para>
            /// </param>
            /// <param name="label">
            /// <para>
            /// The address of a string containing the label to assign to the object.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glObjectLabelKHR")]
            [CLSCompliant(false)]
            public static void ObjectLabel(OpenTK.Graphics.ES30.ObjectLabelIdentifier identifier, UInt32 name, Int32 length, String label) { throw new NotImplementedException(); }

            /// <summary>[requires: KHR_debug]
            /// Label a a sync object identified by a pointer
            /// </summary>
            /// <param name="ptr">
            /// <para>
            /// A pointer identifying a sync object.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// The length of the label to be used for the object.
            /// </para>
            /// </param>
            /// <param name="label">
            /// <para>
            /// The address of a string containing the label to assign to the object.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glObjectPtrLabelKHR")]
            public static void ObjectPtrLabel(IntPtr ptr, Int32 length, String label) { throw new NotImplementedException(); }

            /// <summary>[requires: KHR_debug]
            /// Label a a sync object identified by a pointer
            /// </summary>
            /// <param name="ptr">
            /// <para>
            /// A pointer identifying a sync object.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// The length of the label to be used for the object.
            /// </para>
            /// </param>
            /// <param name="label">
            /// <para>
            /// The address of a string containing the label to assign to the object.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glObjectPtrLabelKHR")]
            [CLSCompliant(false)]
            public static void ObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[] ptr, Int32 length, String label)
                where T0 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: KHR_debug]
            /// Label a a sync object identified by a pointer
            /// </summary>
            /// <param name="ptr">
            /// <para>
            /// A pointer identifying a sync object.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// The length of the label to be used for the object.
            /// </para>
            /// </param>
            /// <param name="label">
            /// <para>
            /// The address of a string containing the label to assign to the object.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glObjectPtrLabelKHR")]
            [CLSCompliant(false)]
            public static void ObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[,] ptr, Int32 length, String label)
                where T0 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: KHR_debug]
            /// Label a a sync object identified by a pointer
            /// </summary>
            /// <param name="ptr">
            /// <para>
            /// A pointer identifying a sync object.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// The length of the label to be used for the object.
            /// </para>
            /// </param>
            /// <param name="label">
            /// <para>
            /// The address of a string containing the label to assign to the object.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glObjectPtrLabelKHR")]
            [CLSCompliant(false)]
            public static void ObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[,,] ptr, Int32 length, String label)
                where T0 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: KHR_debug]
            /// Label a a sync object identified by a pointer
            /// </summary>
            /// <param name="ptr">
            /// <para>
            /// A pointer identifying a sync object.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// The length of the label to be used for the object.
            /// </para>
            /// </param>
            /// <param name="label">
            /// <para>
            /// The address of a string containing the label to assign to the object.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glObjectPtrLabelKHR")]
            public static void ObjectPtrLabel<T0>([InAttribute, OutAttribute] ref T0 ptr, Int32 length, String label)
                where T0 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: KHR_debug]
            /// Pop the active debug group
            /// </summary>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glPopDebugGroupKHR")]
            public static void PopDebugGroup() { throw new NotImplementedException(); }

            /// <summary>[requires: KHR_debug]
            /// Push a named debug group into the command stream
            /// </summary>
            /// <param name="source">
            /// <para>
            /// The source of the debug message.
            /// </para>
            /// </param>
            /// <param name="id">
            /// <para>
            /// The identifier of the message.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// The length of the message to be sent to the debug output stream.
            /// </para>
            /// </param>
            /// <param name="message">
            /// <para>
            /// The a string containing the message to be sent to the debug output stream.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glPushDebugGroupKHR")]
            [CLSCompliant(false)]
            public static void PushDebugGroup(OpenTK.Graphics.ES30.All source, Int32 id, Int32 length, String message) { throw new NotImplementedException(); }

            /// <summary>[requires: KHR_debug]
            /// Push a named debug group into the command stream
            /// </summary>
            /// <param name="source">
            /// <para>
            /// The source of the debug message.
            /// </para>
            /// </param>
            /// <param name="id">
            /// <para>
            /// The identifier of the message.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// The length of the message to be sent to the debug output stream.
            /// </para>
            /// </param>
            /// <param name="message">
            /// <para>
            /// The a string containing the message to be sent to the debug output stream.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glPushDebugGroupKHR")]
            [CLSCompliant(false)]
            public static void PushDebugGroup(OpenTK.Graphics.ES30.All source, UInt32 id, Int32 length, String message) { throw new NotImplementedException(); }

        }

        public static partial class NV
        {
            /// <summary>[requires: NV_blend_equation_advanced]</summary>
            [AutoGenerated(Category = "NV_blend_equation_advanced", Version = "", EntryPoint = "glBlendBarrierNV")]
            public static void BlendBarrier() { throw new NotImplementedException(); }

            /// <summary>[requires: NV_blend_equation_advanced]</summary>
            [AutoGenerated(Category = "NV_blend_equation_advanced", Version = "", EntryPoint = "glBlendParameteriNV")]
            public static void BlendParameter(OpenTK.Graphics.ES30.All pname, Int32 value) { throw new NotImplementedException(); }

            /// <summary>[requires: NV_framebuffer_blit]
            /// Copy a block of pixels from the read framebuffer to the draw framebuffer
            /// </summary>
            /// <param name="srcX0">
            /// <para>
            /// Specify the bounds of the source rectangle within the read buffer of the read framebuffer.
            /// </para>
            /// </param>
            /// <param name="dstX0">
            /// <para>
            /// Specify the bounds of the destination rectangle within the write buffer of the write framebuffer.
            /// </para>
            /// </param>
            /// <param name="mask">
            /// <para>
            /// The bitwise OR of the flags indicating which buffers are to be copied. The allowed flags are GL_COLOR_BUFFER_BIT, GL_DEPTH_BUFFER_BIT and GL_STENCIL_BUFFER_BIT.
            /// </para>
            /// </param>
            /// <param name="filter">
            /// <para>
            /// Specifies the interpolation to be applied if the image is stretched. Must be GL_NEAREST or GL_LINEAR.
            /// </para>
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_framebuffer_blit", Version = "", EntryPoint = "glBlitFramebufferNV")]
            public static void BlitFramebuffer(Int32 srcX0, Int32 srcY0, Int32 srcX1, Int32 srcY1, Int32 dstX0, Int32 dstY0, Int32 dstX1, Int32 dstY1, OpenTK.Graphics.ES30.All mask, OpenTK.Graphics.ES30.All filter) { throw new NotImplementedException(); }

            /// <summary>[requires: NV_framebuffer_blit]
            /// Copy a block of pixels from the read framebuffer to the draw framebuffer
            /// </summary>
            /// <param name="srcX0">
            /// <para>
            /// Specify the bounds of the source rectangle within the read buffer of the read framebuffer.
            /// </para>
            /// </param>
            /// <param name="dstX0">
            /// <para>
            /// Specify the bounds of the destination rectangle within the write buffer of the write framebuffer.
            /// </para>
            /// </param>
            /// <param name="mask">
            /// <para>
            /// The bitwise OR of the flags indicating which buffers are to be copied. The allowed flags are GL_COLOR_BUFFER_BIT, GL_DEPTH_BUFFER_BIT and GL_STENCIL_BUFFER_BIT.
            /// </para>
            /// </param>
            /// <param name="filter">
            /// <para>
            /// Specifies the interpolation to be applied if the image is stretched. Must be GL_NEAREST or GL_LINEAR.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "NV_framebuffer_blit", Version = "", EntryPoint = "glBlitFramebufferNV")]
            public static void BlitFramebuffer(Int32 srcX0, Int32 srcY0, Int32 srcX1, Int32 srcY1, Int32 dstX0, Int32 dstY0, Int32 dstX1, Int32 dstY1, OpenTK.Graphics.ES30.ClearBufferMask mask, OpenTK.Graphics.ES30.BlitFramebufferFilter filter) { throw new NotImplementedException(); }

            /// <summary>[requires: NV_copy_buffer]
            /// Copy part of the data store of a buffer object to the data store of another buffer object
            /// </summary>
            /// <param name="readtarget">
            /// <para>
            /// Specifies the target from whose data store data should be read.
            /// </para>
            /// </param>
            /// <param name="writetarget">
            /// <para>
            /// Specifies the target to whose data store data should be written.
            /// </para>
            /// </param>
            /// <param name="readoffset">
            /// <para>
            /// Specifies the offset, in basic machine units, within the data store of readtarget from which data should be read.
            /// </para>
            /// </param>
            /// <param name="writeoffset">
            /// <para>
            /// Specifies the offset, in basic machine units, within the data store of writetarget to which data should be written.
            /// </para>
            /// </param>
            /// <param name="size">
            /// <para>
            /// Specifies the size, in basic machine units, of the data to be copied from readtarget to writetarget.
            /// </para>
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_copy_buffer", Version = "", EntryPoint = "glCopyBufferSubDataNV")]
            public static void CopyBufferSubData(OpenTK.Graphics.ES30.All readTarget, OpenTK.Graphics.ES30.All writeTarget, IntPtr readOffset, IntPtr writeOffset, IntPtr size) { throw new NotImplementedException(); }

            /// <summary>[requires: NV_copy_buffer]
            /// Copy part of the data store of a buffer object to the data store of another buffer object
            /// </summary>
            /// <param name="readtarget">
            /// <para>
            /// Specifies the target from whose data store data should be read.
            /// </para>
            /// </param>
            /// <param name="writetarget">
            /// <para>
            /// Specifies the target to whose data store data should be written.
            /// </para>
            /// </param>
            /// <param name="readoffset">
            /// <para>
            /// Specifies the offset, in basic machine units, within the data store of readtarget from which data should be read.
            /// </para>
            /// </param>
            /// <param name="writeoffset">
            /// <para>
            /// Specifies the offset, in basic machine units, within the data store of writetarget to which data should be written.
            /// </para>
            /// </param>
            /// <param name="size">
            /// <para>
            /// Specifies the size, in basic machine units, of the data to be copied from readtarget to writetarget.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "NV_copy_buffer", Version = "", EntryPoint = "glCopyBufferSubDataNV")]
            public static void CopyBufferSubData(OpenTK.Graphics.ES30.BufferTarget readTarget, OpenTK.Graphics.ES30.BufferTarget writeTarget, IntPtr readOffset, IntPtr writeOffset, IntPtr size) { throw new NotImplementedException(); }

            /// <summary>[requires: NV_coverage_sample]</summary>
            [AutoGenerated(Category = "NV_coverage_sample", Version = "", EntryPoint = "glCoverageMaskNV")]
            public static void CoverageMask(bool mask) { throw new NotImplementedException(); }

            /// <summary>[requires: NV_coverage_sample]</summary>
            [AutoGenerated(Category = "NV_coverage_sample", Version = "", EntryPoint = "glCoverageOperationNV")]
            public static void CoverageOperation(OpenTK.Graphics.ES30.All operation) { throw new NotImplementedException(); }

            /// <summary>[requires: NV_fence]</summary>
            [AutoGenerated(Category = "NV_fence", Version = "", EntryPoint = "glDeleteFencesNV")]
            [CLSCompliant(false)]
            public static void DeleteFence(Int32 fences) { throw new NotImplementedException(); }

            /// <summary>[requires: NV_fence]</summary>
            [AutoGenerated(Category = "NV_fence", Version = "", EntryPoint = "glDeleteFencesNV")]
            [CLSCompliant(false)]
            public static void DeleteFence(UInt32 fences) { throw new NotImplementedException(); }

            /// <summary>[requires: NV_fence]</summary>
            [AutoGenerated(Category = "NV_fence", Version = "", EntryPoint = "glDeleteFencesNV")]
            [CLSCompliant(false)]
            public static void DeleteFences(Int32 n, Int32[] fences) { throw new NotImplementedException(); }

            /// <summary>[requires: NV_fence]</summary>
            [AutoGenerated(Category = "NV_fence", Version = "", EntryPoint = "glDeleteFencesNV")]
            [CLSCompliant(false)]
            public static void DeleteFences(Int32 n, ref Int32 fences) { throw new NotImplementedException(); }

            /// <summary>[requires: NV_fence]</summary>
            [AutoGenerated(Category = "NV_fence", Version = "", EntryPoint = "glDeleteFencesNV")]
            [CLSCompliant(false)]
            public static unsafe void DeleteFences(Int32 n, Int32* fences) { throw new NotImplementedException(); }

            /// <summary>[requires: NV_fence]</summary>
            [AutoGenerated(Category = "NV_fence", Version = "", EntryPoint = "glDeleteFencesNV")]
            [CLSCompliant(false)]
            public static void DeleteFences(Int32 n, UInt32[] fences) { throw new NotImplementedException(); }

            /// <summary>[requires: NV_fence]</summary>
            [AutoGenerated(Category = "NV_fence", Version = "", EntryPoint = "glDeleteFencesNV")]
            [CLSCompliant(false)]
            public static void DeleteFences(Int32 n, ref UInt32 fences) { throw new NotImplementedException(); }

            /// <summary>[requires: NV_fence]</summary>
            [AutoGenerated(Category = "NV_fence", Version = "", EntryPoint = "glDeleteFencesNV")]
            [CLSCompliant(false)]
            public static unsafe void DeleteFences(Int32 n, UInt32* fences) { throw new NotImplementedException(); }

            /// <summary>[requires: NV_draw_instanced]
            /// Draw multiple instances of a range of elements
            /// </summary>
            /// <param name="mode">
            /// <para>
            /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES GL_LINES_ADJACENCY, GL_LINE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY, GL_TRIANGLE_STRIP_ADJACENCY and GL_PATCHES are accepted.
            /// </para>
            /// </param>
            /// <param name="first">
            /// <para>
            /// Specifies the starting index in the enabled arrays.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// Specifies the number of indices to be rendered.
            /// </para>
            /// </param>
            /// <param name="primcount">
            /// <para>
            /// Specifies the number of instances of the specified range of indices to be rendered.
            /// </para>
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_draw_instanced", Version = "", EntryPoint = "glDrawArraysInstancedNV")]
            public static void DrawArraysInstanced(OpenTK.Graphics.ES30.All mode, Int32 first, Int32 count, Int32 primcount) { throw new NotImplementedException(); }

            /// <summary>[requires: NV_draw_instanced]
            /// Draw multiple instances of a range of elements
            /// </summary>
            /// <param name="mode">
            /// <para>
            /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES GL_LINES_ADJACENCY, GL_LINE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY, GL_TRIANGLE_STRIP_ADJACENCY and GL_PATCHES are accepted.
            /// </para>
            /// </param>
            /// <param name="first">
            /// <para>
            /// Specifies the starting index in the enabled arrays.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// Specifies the number of indices to be rendered.
            /// </para>
            /// </param>
            /// <param name="primcount">
            /// <para>
            /// Specifies the number of instances of the specified range of indices to be rendered.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "NV_draw_instanced", Version = "", EntryPoint = "glDrawArraysInstancedNV")]
            public static void DrawArraysInstanced(OpenTK.Graphics.ES30.PrimitiveType mode, Int32 first, Int32 count, Int32 primcount) { throw new NotImplementedException(); }

            /// <summary>[requires: NV_draw_buffers]
            /// Specifies a list of color buffers to be drawn into
            /// </summary>
            /// <param name="n">
            /// <para>
            /// Specifies the number of buffers in bufs.
            /// </para>
            /// </param>
            /// <param name="bufs">
            /// <para>
            /// Points to an array of symbolic constants specifying the buffers into which fragment colors or data values will be written.
            /// </para>
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_draw_buffers", Version = "", EntryPoint = "glDrawBuffersNV")]
            [CLSCompliant(false)]
            public static void DrawBuffers(Int32 n, OpenTK.Graphics.ES30.All[] bufs) { throw new NotImplementedException(); }

            /// <summary>[requires: NV_draw_buffers]
            /// Specifies a list of color buffers to be drawn into
            /// </summary>
            /// <param name="n">
            /// <para>
            /// Specifies the number of buffers in bufs.
            /// </para>
            /// </param>
            /// <param name="bufs">
            /// <para>
            /// Points to an array of symbolic constants specifying the buffers into which fragment colors or data values will be written.
            /// </para>
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_draw_buffers", Version = "", EntryPoint = "glDrawBuffersNV")]
            [CLSCompliant(false)]
            public static void DrawBuffers(Int32 n, ref OpenTK.Graphics.ES30.All bufs) { throw new NotImplementedException(); }

            /// <summary>[requires: NV_draw_buffers]
            /// Specifies a list of color buffers to be drawn into
            /// </summary>
            /// <param name="n">
            /// <para>
            /// Specifies the number of buffers in bufs.
            /// </para>
            /// </param>
            /// <param name="bufs">
            /// <para>
            /// Points to an array of symbolic constants specifying the buffers into which fragment colors or data values will be written.
            /// </para>
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_draw_buffers", Version = "", EntryPoint = "glDrawBuffersNV")]
            [CLSCompliant(false)]
            public static unsafe void DrawBuffers(Int32 n, OpenTK.Graphics.ES30.All* bufs) { throw new NotImplementedException(); }

            /// <summary>[requires: NV_draw_buffers]
            /// Specifies a list of color buffers to be drawn into
            /// </summary>
            /// <param name="n">
            /// <para>
            /// Specifies the number of buffers in bufs.
            /// </para>
            /// </param>
            /// <param name="bufs">
            /// <para>
            /// Points to an array of symbolic constants specifying the buffers into which fragment colors or data values will be written.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "NV_draw_buffers", Version = "", EntryPoint = "glDrawBuffersNV")]
            [CLSCompliant(false)]
            public static void DrawBuffers(Int32 n, OpenTK.Graphics.ES30.DrawBufferMode[] bufs) { throw new NotImplementedException(); }

            /// <summary>[requires: NV_draw_buffers]
            /// Specifies a list of color buffers to be drawn into
            /// </summary>
            /// <param name="n">
            /// <para>
            /// Specifies the number of buffers in bufs.
            /// </para>
            /// </param>
            /// <param name="bufs">
            /// <para>
            /// Points to an array of symbolic constants specifying the buffers into which fragment colors or data values will be written.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "NV_draw_buffers", Version = "", EntryPoint = "glDrawBuffersNV")]
            [CLSCompliant(false)]
            public static void DrawBuffers(Int32 n, ref OpenTK.Graphics.ES30.DrawBufferMode bufs) { throw new NotImplementedException(); }

            /// <summary>[requires: NV_draw_buffers]
            /// Specifies a list of color buffers to be drawn into
            /// </summary>
            /// <param name="n">
            /// <para>
            /// Specifies the number of buffers in bufs.
            /// </para>
            /// </param>
            /// <param name="bufs">
            /// <para>
            /// Points to an array of symbolic constants specifying the buffers into which fragment colors or data values will be written.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "NV_draw_buffers", Version = "", EntryPoint = "glDrawBuffersNV")]
            [CLSCompliant(false)]
            public static unsafe void DrawBuffers(Int32 n, OpenTK.Graphics.ES30.DrawBufferMode* bufs) { throw new NotImplementedException(); }

            /// <summary>[requires: NV_draw_instanced]
            /// Draw multiple instances of a set of elements
            /// </summary>
            /// <param name="mode">
            /// <para>
            /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// Specifies the number of elements to be rendered.
            /// </para>
            /// </param>
            /// <param name="type">
            /// <para>
            /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
            /// </para>
            /// </param>
            /// <param name="indices">
            /// <para>
            /// Specifies a pointer to the location where the indices are stored.
            /// </para>
            /// </param>
            /// <param name="primcount">
            /// <para>
            /// Specifies the number of instances of the specified range of indices to be rendered.
            /// </para>
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_draw_instanced", Version = "", EntryPoint = "glDrawElementsInstancedNV")]
            public static void DrawElementsInstanced(OpenTK.Graphics.ES30.All mode, Int32 count, OpenTK.Graphics.ES30.All type, IntPtr indices, Int32 primcount) { throw new NotImplementedException(); }

            /// <summary>[requires: NV_draw_instanced]
            /// Draw multiple instances of a set of elements
            /// </summary>
            /// <param name="mode">
            /// <para>
            /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// Specifies the number of elements to be rendered.
            /// </para>
            /// </param>
            /// <param name="type">
            /// <para>
            /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
            /// </para>
            /// </param>
            /// <param name="indices">
            /// <para>
            /// Specifies a pointer to the location where the indices are stored.
            /// </para>
            /// </param>
            /// <param name="primcount">
            /// <para>
            /// Specifies the number of instances of the specified range of indices to be rendered.
            /// </para>
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_draw_instanced", Version = "", EntryPoint = "glDrawElementsInstancedNV")]
            [CLSCompliant(false)]
            public static void DrawElementsInstanced<T3>(OpenTK.Graphics.ES30.All mode, Int32 count, OpenTK.Graphics.ES30.All type, [InAttribute, OutAttribute] T3[] indices, Int32 primcount)
                where T3 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: NV_draw_instanced]
            /// Draw multiple instances of a set of elements
            /// </summary>
            /// <param name="mode">
            /// <para>
            /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// Specifies the number of elements to be rendered.
            /// </para>
            /// </param>
            /// <param name="type">
            /// <para>
            /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
            /// </para>
            /// </param>
            /// <param name="indices">
            /// <para>
            /// Specifies a pointer to the location where the indices are stored.
            /// </para>
            /// </param>
            /// <param name="primcount">
            /// <para>
            /// Specifies the number of instances of the specified range of indices to be rendered.
            /// </para>
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_draw_instanced", Version = "", EntryPoint = "glDrawElementsInstancedNV")]
            [CLSCompliant(false)]
            public static void DrawElementsInstanced<T3>(OpenTK.Graphics.ES30.All mode, Int32 count, OpenTK.Graphics.ES30.All type, [InAttribute, OutAttribute] T3[,] indices, Int32 primcount)
                where T3 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: NV_draw_instanced]
            /// Draw multiple instances of a set of elements
            /// </summary>
            /// <param name="mode">
            /// <para>
            /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// Specifies the number of elements to be rendered.
            /// </para>
            /// </param>
            /// <param name="type">
            /// <para>
            /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
            /// </para>
            /// </param>
            /// <param name="indices">
            /// <para>
            /// Specifies a pointer to the location where the indices are stored.
            /// </para>
            /// </param>
            /// <param name="primcount">
            /// <para>
            /// Specifies the number of instances of the specified range of indices to be rendered.
            /// </para>
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_draw_instanced", Version = "", EntryPoint = "glDrawElementsInstancedNV")]
            [CLSCompliant(false)]
            public static void DrawElementsInstanced<T3>(OpenTK.Graphics.ES30.All mode, Int32 count, OpenTK.Graphics.ES30.All type, [InAttribute, OutAttribute] T3[,,] indices, Int32 primcount)
                where T3 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: NV_draw_instanced]
            /// Draw multiple instances of a set of elements
            /// </summary>
            /// <param name="mode">
            /// <para>
            /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// Specifies the number of elements to be rendered.
            /// </para>
            /// </param>
            /// <param name="type">
            /// <para>
            /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
            /// </para>
            /// </param>
            /// <param name="indices">
            /// <para>
            /// Specifies a pointer to the location where the indices are stored.
            /// </para>
            /// </param>
            /// <param name="primcount">
            /// <para>
            /// Specifies the number of instances of the specified range of indices to be rendered.
            /// </para>
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_draw_instanced", Version = "", EntryPoint = "glDrawElementsInstancedNV")]
            public static void DrawElementsInstanced<T3>(OpenTK.Graphics.ES30.All mode, Int32 count, OpenTK.Graphics.ES30.All type, [InAttribute, OutAttribute] ref T3 indices, Int32 primcount)
                where T3 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: NV_draw_instanced]
            /// Draw multiple instances of a set of elements
            /// </summary>
            /// <param name="mode">
            /// <para>
            /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// Specifies the number of elements to be rendered.
            /// </para>
            /// </param>
            /// <param name="type">
            /// <para>
            /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
            /// </para>
            /// </param>
            /// <param name="indices">
            /// <para>
            /// Specifies a pointer to the location where the indices are stored.
            /// </para>
            /// </param>
            /// <param name="primcount">
            /// <para>
            /// Specifies the number of instances of the specified range of indices to be rendered.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "NV_draw_instanced", Version = "", EntryPoint = "glDrawElementsInstancedNV")]
            public static void DrawElementsInstanced(OpenTK.Graphics.ES30.PrimitiveType mode, Int32 count, OpenTK.Graphics.ES30.DrawElementsType type, IntPtr indices, Int32 primcount) { throw new NotImplementedException(); }

            /// <summary>[requires: NV_draw_instanced]
            /// Draw multiple instances of a set of elements
            /// </summary>
            /// <param name="mode">
            /// <para>
            /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// Specifies the number of elements to be rendered.
            /// </para>
            /// </param>
            /// <param name="type">
            /// <para>
            /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
            /// </para>
            /// </param>
            /// <param name="indices">
            /// <para>
            /// Specifies a pointer to the location where the indices are stored.
            /// </para>
            /// </param>
            /// <param name="primcount">
            /// <para>
            /// Specifies the number of instances of the specified range of indices to be rendered.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "NV_draw_instanced", Version = "", EntryPoint = "glDrawElementsInstancedNV")]
            [CLSCompliant(false)]
            public static void DrawElementsInstanced<T3>(OpenTK.Graphics.ES30.PrimitiveType mode, Int32 count, OpenTK.Graphics.ES30.DrawElementsType type, [InAttribute, OutAttribute] T3[] indices, Int32 primcount)
                where T3 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: NV_draw_instanced]
            /// Draw multiple instances of a set of elements
            /// </summary>
            /// <param name="mode">
            /// <para>
            /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// Specifies the number of elements to be rendered.
            /// </para>
            /// </param>
            /// <param name="type">
            /// <para>
            /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
            /// </para>
            /// </param>
            /// <param name="indices">
            /// <para>
            /// Specifies a pointer to the location where the indices are stored.
            /// </para>
            /// </param>
            /// <param name="primcount">
            /// <para>
            /// Specifies the number of instances of the specified range of indices to be rendered.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "NV_draw_instanced", Version = "", EntryPoint = "glDrawElementsInstancedNV")]
            [CLSCompliant(false)]
            public static void DrawElementsInstanced<T3>(OpenTK.Graphics.ES30.PrimitiveType mode, Int32 count, OpenTK.Graphics.ES30.DrawElementsType type, [InAttribute, OutAttribute] T3[,] indices, Int32 primcount)
                where T3 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: NV_draw_instanced]
            /// Draw multiple instances of a set of elements
            /// </summary>
            /// <param name="mode">
            /// <para>
            /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// Specifies the number of elements to be rendered.
            /// </para>
            /// </param>
            /// <param name="type">
            /// <para>
            /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
            /// </para>
            /// </param>
            /// <param name="indices">
            /// <para>
            /// Specifies a pointer to the location where the indices are stored.
            /// </para>
            /// </param>
            /// <param name="primcount">
            /// <para>
            /// Specifies the number of instances of the specified range of indices to be rendered.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "NV_draw_instanced", Version = "", EntryPoint = "glDrawElementsInstancedNV")]
            [CLSCompliant(false)]
            public static void DrawElementsInstanced<T3>(OpenTK.Graphics.ES30.PrimitiveType mode, Int32 count, OpenTK.Graphics.ES30.DrawElementsType type, [InAttribute, OutAttribute] T3[,,] indices, Int32 primcount)
                where T3 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: NV_draw_instanced]
            /// Draw multiple instances of a set of elements
            /// </summary>
            /// <param name="mode">
            /// <para>
            /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.
            /// </para>
            /// </param>
            /// <param name="count">
            /// <para>
            /// Specifies the number of elements to be rendered.
            /// </para>
            /// </param>
            /// <param name="type">
            /// <para>
            /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
            /// </para>
            /// </param>
            /// <param name="indices">
            /// <para>
            /// Specifies a pointer to the location where the indices are stored.
            /// </para>
            /// </param>
            /// <param name="primcount">
            /// <para>
            /// Specifies the number of instances of the specified range of indices to be rendered.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "NV_draw_instanced", Version = "", EntryPoint = "glDrawElementsInstancedNV")]
            public static void DrawElementsInstanced<T3>(OpenTK.Graphics.ES30.PrimitiveType mode, Int32 count, OpenTK.Graphics.ES30.DrawElementsType type, [InAttribute, OutAttribute] ref T3 indices, Int32 primcount)
                where T3 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: NV_fence]</summary>
            [AutoGenerated(Category = "NV_fence", Version = "", EntryPoint = "glFinishFenceNV")]
            [CLSCompliant(false)]
            public static void FinishFence(Int32 fence) { throw new NotImplementedException(); }

            /// <summary>[requires: NV_fence]</summary>
            [AutoGenerated(Category = "NV_fence", Version = "", EntryPoint = "glFinishFenceNV")]
            [CLSCompliant(false)]
            public static void FinishFence(UInt32 fence) { throw new NotImplementedException(); }

            /// <summary>[requires: NV_fence]</summary>
            [AutoGenerated(Category = "NV_fence", Version = "", EntryPoint = "glGenFencesNV")]
            [CLSCompliant(false)]
            public static Int32 GenFence() { throw new NotImplementedException(); }

            /// <summary>[requires: NV_fence]</summary>
            [AutoGenerated(Category = "NV_fence", Version = "", EntryPoint = "glGenFencesNV")]
            [CLSCompliant(false)]
            public static void GenFences(Int32 n, [OutAttribute] Int32[] fences) { throw new NotImplementedException(); }

            /// <summary>[requires: NV_fence]</summary>
            [AutoGenerated(Category = "NV_fence", Version = "", EntryPoint = "glGenFencesNV")]
            [CLSCompliant(false)]
            public static void GenFences(Int32 n, [OutAttribute] out Int32 fences) { throw new NotImplementedException(); }

            /// <summary>[requires: NV_fence]</summary>
            [AutoGenerated(Category = "NV_fence", Version = "", EntryPoint = "glGenFencesNV")]
            [CLSCompliant(false)]
            public static unsafe void GenFences(Int32 n, [OutAttribute] Int32* fences) { throw new NotImplementedException(); }

            /// <summary>[requires: NV_fence]</summary>
            [AutoGenerated(Category = "NV_fence", Version = "", EntryPoint = "glGenFencesNV")]
            [CLSCompliant(false)]
            public static void GenFences(Int32 n, [OutAttribute] UInt32[] fences) { throw new NotImplementedException(); }

            /// <summary>[requires: NV_fence]</summary>
            [AutoGenerated(Category = "NV_fence", Version = "", EntryPoint = "glGenFencesNV")]
            [CLSCompliant(false)]
            public static void GenFences(Int32 n, [OutAttribute] out UInt32 fences) { throw new NotImplementedException(); }

            /// <summary>[requires: NV_fence]</summary>
            [AutoGenerated(Category = "NV_fence", Version = "", EntryPoint = "glGenFencesNV")]
            [CLSCompliant(false)]
            public static unsafe void GenFences(Int32 n, [OutAttribute] UInt32* fences) { throw new NotImplementedException(); }

            /// <summary>[requires: NV_fence]</summary>
            [AutoGenerated(Category = "NV_fence", Version = "", EntryPoint = "glGetFenceivNV")]
            [CLSCompliant(false)]
            public static void GetFence(Int32 fence, OpenTK.Graphics.ES30.All pname, [OutAttribute] Int32[] @params) { throw new NotImplementedException(); }

            /// <summary>[requires: NV_fence]</summary>
            [AutoGenerated(Category = "NV_fence", Version = "", EntryPoint = "glGetFenceivNV")]
            [CLSCompliant(false)]
            public static void GetFence(Int32 fence, OpenTK.Graphics.ES30.All pname, [OutAttribute] out Int32 @params) { throw new NotImplementedException(); }

            /// <summary>[requires: NV_fence]</summary>
            [AutoGenerated(Category = "NV_fence", Version = "", EntryPoint = "glGetFenceivNV")]
            [CLSCompliant(false)]
            public static unsafe void GetFence(Int32 fence, OpenTK.Graphics.ES30.All pname, [OutAttribute] Int32* @params) { throw new NotImplementedException(); }

            /// <summary>[requires: NV_fence]</summary>
            [AutoGenerated(Category = "NV_fence", Version = "", EntryPoint = "glGetFenceivNV")]
            [CLSCompliant(false)]
            public static void GetFence(UInt32 fence, OpenTK.Graphics.ES30.All pname, [OutAttribute] Int32[] @params) { throw new NotImplementedException(); }

            /// <summary>[requires: NV_fence]</summary>
            [AutoGenerated(Category = "NV_fence", Version = "", EntryPoint = "glGetFenceivNV")]
            [CLSCompliant(false)]
            public static void GetFence(UInt32 fence, OpenTK.Graphics.ES30.All pname, [OutAttribute] out Int32 @params) { throw new NotImplementedException(); }

            /// <summary>[requires: NV_fence]</summary>
            [AutoGenerated(Category = "NV_fence", Version = "", EntryPoint = "glGetFenceivNV")]
            [CLSCompliant(false)]
            public static unsafe void GetFence(UInt32 fence, OpenTK.Graphics.ES30.All pname, [OutAttribute] Int32* @params) { throw new NotImplementedException(); }

            /// <summary>[requires: NV_fence]</summary>
            [AutoGenerated(Category = "NV_fence", Version = "", EntryPoint = "glIsFenceNV")]
            [CLSCompliant(false)]
            public static bool IsFence(Int32 fence) { throw new NotImplementedException(); }

            /// <summary>[requires: NV_fence]</summary>
            [AutoGenerated(Category = "NV_fence", Version = "", EntryPoint = "glIsFenceNV")]
            [CLSCompliant(false)]
            public static bool IsFence(UInt32 fence) { throw new NotImplementedException(); }

            /// <summary>[requires: NV_read_buffer]
            /// Select a color buffer source for pixels
            /// </summary>
            /// <param name="mode">
            /// <para>
            /// Specifies a color buffer. Accepted values are GL_FRONT_LEFT, GL_FRONT_RIGHT, GL_BACK_LEFT, GL_BACK_RIGHT, GL_FRONT, GL_BACK, GL_LEFT, GL_RIGHT, and the constants GL_COLOR_ATTACHMENTi.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "NV_read_buffer", Version = "", EntryPoint = "glReadBufferNV")]
            public static void ReadBuffer(OpenTK.Graphics.ES30.All mode) { throw new NotImplementedException(); }

            /// <summary>[requires: NV_framebuffer_multisample]
            /// Establish data storage, format, dimensions and sample count of a renderbuffer object's image
            /// </summary>
            /// <param name="target">
            /// <para>
            /// Specifies a binding to which the target of the allocation and must be GL_RENDERBUFFER.
            /// </para>
            /// </param>
            /// <param name="samples">
            /// <para>
            /// Specifies the number of samples to be used for the renderbuffer object's storage.
            /// </para>
            /// </param>
            /// <param name="internalformat">
            /// <para>
            /// Specifies the internal format to use for the renderbuffer object's image.
            /// </para>
            /// </param>
            /// <param name="width">
            /// <para>
            /// Specifies the width of the renderbuffer, in pixels.
            /// </para>
            /// </param>
            /// <param name="height">
            /// <para>
            /// Specifies the height of the renderbuffer, in pixels.
            /// </para>
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "NV_framebuffer_multisample", Version = "", EntryPoint = "glRenderbufferStorageMultisampleNV")]
            public static void RenderbufferStorageMultisample(OpenTK.Graphics.ES30.All target, Int32 samples, OpenTK.Graphics.ES30.All internalformat, Int32 width, Int32 height) { throw new NotImplementedException(); }

            /// <summary>[requires: NV_framebuffer_multisample]
            /// Establish data storage, format, dimensions and sample count of a renderbuffer object's image
            /// </summary>
            /// <param name="target">
            /// <para>
            /// Specifies a binding to which the target of the allocation and must be GL_RENDERBUFFER.
            /// </para>
            /// </param>
            /// <param name="samples">
            /// <para>
            /// Specifies the number of samples to be used for the renderbuffer object's storage.
            /// </para>
            /// </param>
            /// <param name="internalformat">
            /// <para>
            /// Specifies the internal format to use for the renderbuffer object's image.
            /// </para>
            /// </param>
            /// <param name="width">
            /// <para>
            /// Specifies the width of the renderbuffer, in pixels.
            /// </para>
            /// </param>
            /// <param name="height">
            /// <para>
            /// Specifies the height of the renderbuffer, in pixels.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "NV_framebuffer_multisample", Version = "", EntryPoint = "glRenderbufferStorageMultisampleNV")]
            public static void RenderbufferStorageMultisample(OpenTK.Graphics.ES30.RenderbufferTarget target, Int32 samples, OpenTK.Graphics.ES30.RenderbufferInternalFormat internalformat, Int32 width, Int32 height) { throw new NotImplementedException(); }

            /// <summary>[requires: NV_fence]</summary>
            [AutoGenerated(Category = "NV_fence", Version = "", EntryPoint = "glSetFenceNV")]
            [CLSCompliant(false)]
            public static void SetFence(Int32 fence, OpenTK.Graphics.ES30.All condition) { throw new NotImplementedException(); }

            /// <summary>[requires: NV_fence]</summary>
            [AutoGenerated(Category = "NV_fence", Version = "", EntryPoint = "glSetFenceNV")]
            [CLSCompliant(false)]
            public static void SetFence(UInt32 fence, OpenTK.Graphics.ES30.All condition) { throw new NotImplementedException(); }

            /// <summary>[requires: NV_fence]</summary>
            [AutoGenerated(Category = "NV_fence", Version = "", EntryPoint = "glTestFenceNV")]
            [CLSCompliant(false)]
            public static bool TestFence(Int32 fence) { throw new NotImplementedException(); }

            /// <summary>[requires: NV_fence]</summary>
            [AutoGenerated(Category = "NV_fence", Version = "", EntryPoint = "glTestFenceNV")]
            [CLSCompliant(false)]
            public static bool TestFence(UInt32 fence) { throw new NotImplementedException(); }

            /// <summary>[requires: NV_non_square_matrices]</summary>
            [AutoGenerated(Category = "NV_non_square_matrices", Version = "", EntryPoint = "glUniformMatrix2x3fvNV")]
            [CLSCompliant(false)]
            public static void UniformMatrix2x3(Int32 location, Int32 count, bool transpose, Single[] value) { throw new NotImplementedException(); }

            /// <summary>[requires: NV_non_square_matrices]</summary>
            [AutoGenerated(Category = "NV_non_square_matrices", Version = "", EntryPoint = "glUniformMatrix2x3fvNV")]
            [CLSCompliant(false)]
            public static void UniformMatrix2x3(Int32 location, Int32 count, bool transpose, ref Single value) { throw new NotImplementedException(); }

            /// <summary>[requires: NV_non_square_matrices]</summary>
            [AutoGenerated(Category = "NV_non_square_matrices", Version = "", EntryPoint = "glUniformMatrix2x3fvNV")]
            [CLSCompliant(false)]
            public static unsafe void UniformMatrix2x3(Int32 location, Int32 count, bool transpose, Single* value) { throw new NotImplementedException(); }

            /// <summary>[requires: NV_non_square_matrices]</summary>
            [AutoGenerated(Category = "NV_non_square_matrices", Version = "", EntryPoint = "glUniformMatrix2x4fvNV")]
            [CLSCompliant(false)]
            public static void UniformMatrix2x4(Int32 location, Int32 count, bool transpose, Single[] value) { throw new NotImplementedException(); }

            /// <summary>[requires: NV_non_square_matrices]</summary>
            [AutoGenerated(Category = "NV_non_square_matrices", Version = "", EntryPoint = "glUniformMatrix2x4fvNV")]
            [CLSCompliant(false)]
            public static void UniformMatrix2x4(Int32 location, Int32 count, bool transpose, ref Single value) { throw new NotImplementedException(); }

            /// <summary>[requires: NV_non_square_matrices]</summary>
            [AutoGenerated(Category = "NV_non_square_matrices", Version = "", EntryPoint = "glUniformMatrix2x4fvNV")]
            [CLSCompliant(false)]
            public static unsafe void UniformMatrix2x4(Int32 location, Int32 count, bool transpose, Single* value) { throw new NotImplementedException(); }

            /// <summary>[requires: NV_non_square_matrices]</summary>
            [AutoGenerated(Category = "NV_non_square_matrices", Version = "", EntryPoint = "glUniformMatrix3x2fvNV")]
            [CLSCompliant(false)]
            public static void UniformMatrix3x2(Int32 location, Int32 count, bool transpose, Single[] value) { throw new NotImplementedException(); }

            /// <summary>[requires: NV_non_square_matrices]</summary>
            [AutoGenerated(Category = "NV_non_square_matrices", Version = "", EntryPoint = "glUniformMatrix3x2fvNV")]
            [CLSCompliant(false)]
            public static void UniformMatrix3x2(Int32 location, Int32 count, bool transpose, ref Single value) { throw new NotImplementedException(); }

            /// <summary>[requires: NV_non_square_matrices]</summary>
            [AutoGenerated(Category = "NV_non_square_matrices", Version = "", EntryPoint = "glUniformMatrix3x2fvNV")]
            [CLSCompliant(false)]
            public static unsafe void UniformMatrix3x2(Int32 location, Int32 count, bool transpose, Single* value) { throw new NotImplementedException(); }

            /// <summary>[requires: NV_non_square_matrices]</summary>
            [AutoGenerated(Category = "NV_non_square_matrices", Version = "", EntryPoint = "glUniformMatrix3x4fvNV")]
            [CLSCompliant(false)]
            public static void UniformMatrix3x4(Int32 location, Int32 count, bool transpose, Single[] value) { throw new NotImplementedException(); }

            /// <summary>[requires: NV_non_square_matrices]</summary>
            [AutoGenerated(Category = "NV_non_square_matrices", Version = "", EntryPoint = "glUniformMatrix3x4fvNV")]
            [CLSCompliant(false)]
            public static void UniformMatrix3x4(Int32 location, Int32 count, bool transpose, ref Single value) { throw new NotImplementedException(); }

            /// <summary>[requires: NV_non_square_matrices]</summary>
            [AutoGenerated(Category = "NV_non_square_matrices", Version = "", EntryPoint = "glUniformMatrix3x4fvNV")]
            [CLSCompliant(false)]
            public static unsafe void UniformMatrix3x4(Int32 location, Int32 count, bool transpose, Single* value) { throw new NotImplementedException(); }

            /// <summary>[requires: NV_non_square_matrices]</summary>
            [AutoGenerated(Category = "NV_non_square_matrices", Version = "", EntryPoint = "glUniformMatrix4x2fvNV")]
            [CLSCompliant(false)]
            public static void UniformMatrix4x2(Int32 location, Int32 count, bool transpose, Single[] value) { throw new NotImplementedException(); }

            /// <summary>[requires: NV_non_square_matrices]</summary>
            [AutoGenerated(Category = "NV_non_square_matrices", Version = "", EntryPoint = "glUniformMatrix4x2fvNV")]
            [CLSCompliant(false)]
            public static void UniformMatrix4x2(Int32 location, Int32 count, bool transpose, ref Single value) { throw new NotImplementedException(); }

            /// <summary>[requires: NV_non_square_matrices]</summary>
            [AutoGenerated(Category = "NV_non_square_matrices", Version = "", EntryPoint = "glUniformMatrix4x2fvNV")]
            [CLSCompliant(false)]
            public static unsafe void UniformMatrix4x2(Int32 location, Int32 count, bool transpose, Single* value) { throw new NotImplementedException(); }

            /// <summary>[requires: NV_non_square_matrices]</summary>
            [AutoGenerated(Category = "NV_non_square_matrices", Version = "", EntryPoint = "glUniformMatrix4x3fvNV")]
            [CLSCompliant(false)]
            public static void UniformMatrix4x3(Int32 location, Int32 count, bool transpose, Single[] value) { throw new NotImplementedException(); }

            /// <summary>[requires: NV_non_square_matrices]</summary>
            [AutoGenerated(Category = "NV_non_square_matrices", Version = "", EntryPoint = "glUniformMatrix4x3fvNV")]
            [CLSCompliant(false)]
            public static void UniformMatrix4x3(Int32 location, Int32 count, bool transpose, ref Single value) { throw new NotImplementedException(); }

            /// <summary>[requires: NV_non_square_matrices]</summary>
            [AutoGenerated(Category = "NV_non_square_matrices", Version = "", EntryPoint = "glUniformMatrix4x3fvNV")]
            [CLSCompliant(false)]
            public static unsafe void UniformMatrix4x3(Int32 location, Int32 count, bool transpose, Single* value) { throw new NotImplementedException(); }

            /// <summary>[requires: NV_instanced_arrays]
            /// Modify the rate at which generic vertex attributes advance during instanced rendering
            /// </summary>
            /// <param name="index">
            /// <para>
            /// Specify the index of the generic vertex attribute.
            /// </para>
            /// </param>
            /// <param name="divisor">
            /// <para>
            /// Specify the number of instances that will pass between updates of the generic attribute at slot index.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "NV_instanced_arrays", Version = "", EntryPoint = "glVertexAttribDivisorNV")]
            [CLSCompliant(false)]
            public static void VertexAttribDivisor(Int32 index, Int32 divisor) { throw new NotImplementedException(); }

            /// <summary>[requires: NV_instanced_arrays]
            /// Modify the rate at which generic vertex attributes advance during instanced rendering
            /// </summary>
            /// <param name="index">
            /// <para>
            /// Specify the index of the generic vertex attribute.
            /// </para>
            /// </param>
            /// <param name="divisor">
            /// <para>
            /// Specify the number of instances that will pass between updates of the generic attribute at slot index.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "NV_instanced_arrays", Version = "", EntryPoint = "glVertexAttribDivisorNV")]
            [CLSCompliant(false)]
            public static void VertexAttribDivisor(UInt32 index, UInt32 divisor) { throw new NotImplementedException(); }

        }

        public static partial class Oes
        {
            /// <summary>[requires: OES_vertex_array_object]
            /// Bind a vertex array object
            /// </summary>
            /// <param name="array">
            /// <para>
            /// Specifies the name of the vertex array to bind.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "OES_vertex_array_object", Version = "", EntryPoint = "glBindVertexArrayOES")]
            [CLSCompliant(false)]
            public static void BindVertexArray(Int32 array) { throw new NotImplementedException(); }

            /// <summary>[requires: OES_vertex_array_object]
            /// Bind a vertex array object
            /// </summary>
            /// <param name="array">
            /// <para>
            /// Specifies the name of the vertex array to bind.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "OES_vertex_array_object", Version = "", EntryPoint = "glBindVertexArrayOES")]
            [CLSCompliant(false)]
            public static void BindVertexArray(UInt32 array) { throw new NotImplementedException(); }

            /// <summary>[requires: OES_texture_3D]
            /// Specify a three-dimensional texture image in a compressed format
            /// </summary>
            /// <param name="target">
            /// <para>
            /// Specifies the target texture. Must be GL_TEXTURE_3D, GL_PROXY_TEXTURE_3D, GL_TEXTURE_2D_ARRAY or GL_PROXY_TEXTURE_2D_ARRAY.
            /// </para>
            /// </param>
            /// <param name="level">
            /// <para>
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            /// </para>
            /// </param>
            /// <param name="internalformat">
            /// <para>
            /// Specifies the format of the compressed image data stored at address data.
            /// </para>
            /// </param>
            /// <param name="width">
            /// <para>
            /// Specifies the width of the texture image. All implementations support 3D texture images that are at least 16 texels wide.
            /// </para>
            /// </param>
            /// <param name="height">
            /// <para>
            /// Specifies the height of the texture image. All implementations support 3D texture images that are at least 16 texels high.
            /// </para>
            /// </param>
            /// <param name="depth">
            /// <para>
            /// Specifies the depth of the texture image. All implementations support 3D texture images that are at least 16 texels deep.
            /// </para>
            /// </param>
            /// <param name="border">
            /// <para>
            /// This value must be 0.
            /// </para>
            /// </param>
            /// <param name="imageSize">
            /// <para>
            /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
            /// </para>
            /// </param>
            /// <param name="data">
            /// <para>
            /// Specifies a pointer to the compressed image data in memory.
            /// </para>
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_texture_3D", Version = "", EntryPoint = "glCompressedTexImage3DOES")]
            public static void CompressedTexImage3D(OpenTK.Graphics.ES30.All target, Int32 level, OpenTK.Graphics.ES30.All internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, IntPtr data) { throw new NotImplementedException(); }

            /// <summary>[requires: OES_texture_3D]
            /// Specify a three-dimensional texture image in a compressed format
            /// </summary>
            /// <param name="target">
            /// <para>
            /// Specifies the target texture. Must be GL_TEXTURE_3D, GL_PROXY_TEXTURE_3D, GL_TEXTURE_2D_ARRAY or GL_PROXY_TEXTURE_2D_ARRAY.
            /// </para>
            /// </param>
            /// <param name="level">
            /// <para>
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            /// </para>
            /// </param>
            /// <param name="internalformat">
            /// <para>
            /// Specifies the format of the compressed image data stored at address data.
            /// </para>
            /// </param>
            /// <param name="width">
            /// <para>
            /// Specifies the width of the texture image. All implementations support 3D texture images that are at least 16 texels wide.
            /// </para>
            /// </param>
            /// <param name="height">
            /// <para>
            /// Specifies the height of the texture image. All implementations support 3D texture images that are at least 16 texels high.
            /// </para>
            /// </param>
            /// <param name="depth">
            /// <para>
            /// Specifies the depth of the texture image. All implementations support 3D texture images that are at least 16 texels deep.
            /// </para>
            /// </param>
            /// <param name="border">
            /// <para>
            /// This value must be 0.
            /// </para>
            /// </param>
            /// <param name="imageSize">
            /// <para>
            /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
            /// </para>
            /// </param>
            /// <param name="data">
            /// <para>
            /// Specifies a pointer to the compressed image data in memory.
            /// </para>
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_texture_3D", Version = "", EntryPoint = "glCompressedTexImage3DOES")]
            [CLSCompliant(false)]
            public static void CompressedTexImage3D<T8>(OpenTK.Graphics.ES30.All target, Int32 level, OpenTK.Graphics.ES30.All internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T8[] data)
                where T8 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: OES_texture_3D]
            /// Specify a three-dimensional texture image in a compressed format
            /// </summary>
            /// <param name="target">
            /// <para>
            /// Specifies the target texture. Must be GL_TEXTURE_3D, GL_PROXY_TEXTURE_3D, GL_TEXTURE_2D_ARRAY or GL_PROXY_TEXTURE_2D_ARRAY.
            /// </para>
            /// </param>
            /// <param name="level">
            /// <para>
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            /// </para>
            /// </param>
            /// <param name="internalformat">
            /// <para>
            /// Specifies the format of the compressed image data stored at address data.
            /// </para>
            /// </param>
            /// <param name="width">
            /// <para>
            /// Specifies the width of the texture image. All implementations support 3D texture images that are at least 16 texels wide.
            /// </para>
            /// </param>
            /// <param name="height">
            /// <para>
            /// Specifies the height of the texture image. All implementations support 3D texture images that are at least 16 texels high.
            /// </para>
            /// </param>
            /// <param name="depth">
            /// <para>
            /// Specifies the depth of the texture image. All implementations support 3D texture images that are at least 16 texels deep.
            /// </para>
            /// </param>
            /// <param name="border">
            /// <para>
            /// This value must be 0.
            /// </para>
            /// </param>
            /// <param name="imageSize">
            /// <para>
            /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
            /// </para>
            /// </param>
            /// <param name="data">
            /// <para>
            /// Specifies a pointer to the compressed image data in memory.
            /// </para>
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_texture_3D", Version = "", EntryPoint = "glCompressedTexImage3DOES")]
            [CLSCompliant(false)]
            public static void CompressedTexImage3D<T8>(OpenTK.Graphics.ES30.All target, Int32 level, OpenTK.Graphics.ES30.All internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T8[,] data)
                where T8 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: OES_texture_3D]
            /// Specify a three-dimensional texture image in a compressed format
            /// </summary>
            /// <param name="target">
            /// <para>
            /// Specifies the target texture. Must be GL_TEXTURE_3D, GL_PROXY_TEXTURE_3D, GL_TEXTURE_2D_ARRAY or GL_PROXY_TEXTURE_2D_ARRAY.
            /// </para>
            /// </param>
            /// <param name="level">
            /// <para>
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            /// </para>
            /// </param>
            /// <param name="internalformat">
            /// <para>
            /// Specifies the format of the compressed image data stored at address data.
            /// </para>
            /// </param>
            /// <param name="width">
            /// <para>
            /// Specifies the width of the texture image. All implementations support 3D texture images that are at least 16 texels wide.
            /// </para>
            /// </param>
            /// <param name="height">
            /// <para>
            /// Specifies the height of the texture image. All implementations support 3D texture images that are at least 16 texels high.
            /// </para>
            /// </param>
            /// <param name="depth">
            /// <para>
            /// Specifies the depth of the texture image. All implementations support 3D texture images that are at least 16 texels deep.
            /// </para>
            /// </param>
            /// <param name="border">
            /// <para>
            /// This value must be 0.
            /// </para>
            /// </param>
            /// <param name="imageSize">
            /// <para>
            /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
            /// </para>
            /// </param>
            /// <param name="data">
            /// <para>
            /// Specifies a pointer to the compressed image data in memory.
            /// </para>
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_texture_3D", Version = "", EntryPoint = "glCompressedTexImage3DOES")]
            [CLSCompliant(false)]
            public static void CompressedTexImage3D<T8>(OpenTK.Graphics.ES30.All target, Int32 level, OpenTK.Graphics.ES30.All internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T8[,,] data)
                where T8 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: OES_texture_3D]
            /// Specify a three-dimensional texture image in a compressed format
            /// </summary>
            /// <param name="target">
            /// <para>
            /// Specifies the target texture. Must be GL_TEXTURE_3D, GL_PROXY_TEXTURE_3D, GL_TEXTURE_2D_ARRAY or GL_PROXY_TEXTURE_2D_ARRAY.
            /// </para>
            /// </param>
            /// <param name="level">
            /// <para>
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            /// </para>
            /// </param>
            /// <param name="internalformat">
            /// <para>
            /// Specifies the format of the compressed image data stored at address data.
            /// </para>
            /// </param>
            /// <param name="width">
            /// <para>
            /// Specifies the width of the texture image. All implementations support 3D texture images that are at least 16 texels wide.
            /// </para>
            /// </param>
            /// <param name="height">
            /// <para>
            /// Specifies the height of the texture image. All implementations support 3D texture images that are at least 16 texels high.
            /// </para>
            /// </param>
            /// <param name="depth">
            /// <para>
            /// Specifies the depth of the texture image. All implementations support 3D texture images that are at least 16 texels deep.
            /// </para>
            /// </param>
            /// <param name="border">
            /// <para>
            /// This value must be 0.
            /// </para>
            /// </param>
            /// <param name="imageSize">
            /// <para>
            /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
            /// </para>
            /// </param>
            /// <param name="data">
            /// <para>
            /// Specifies a pointer to the compressed image data in memory.
            /// </para>
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_texture_3D", Version = "", EntryPoint = "glCompressedTexImage3DOES")]
            public static void CompressedTexImage3D<T8>(OpenTK.Graphics.ES30.All target, Int32 level, OpenTK.Graphics.ES30.All internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] ref T8 data)
                where T8 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: OES_texture_3D]
            /// Specify a three-dimensional texture image in a compressed format
            /// </summary>
            /// <param name="target">
            /// <para>
            /// Specifies the target texture. Must be GL_TEXTURE_3D, GL_PROXY_TEXTURE_3D, GL_TEXTURE_2D_ARRAY or GL_PROXY_TEXTURE_2D_ARRAY.
            /// </para>
            /// </param>
            /// <param name="level">
            /// <para>
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            /// </para>
            /// </param>
            /// <param name="internalformat">
            /// <para>
            /// Specifies the format of the compressed image data stored at address data.
            /// </para>
            /// </param>
            /// <param name="width">
            /// <para>
            /// Specifies the width of the texture image. All implementations support 3D texture images that are at least 16 texels wide.
            /// </para>
            /// </param>
            /// <param name="height">
            /// <para>
            /// Specifies the height of the texture image. All implementations support 3D texture images that are at least 16 texels high.
            /// </para>
            /// </param>
            /// <param name="depth">
            /// <para>
            /// Specifies the depth of the texture image. All implementations support 3D texture images that are at least 16 texels deep.
            /// </para>
            /// </param>
            /// <param name="border">
            /// <para>
            /// This value must be 0.
            /// </para>
            /// </param>
            /// <param name="imageSize">
            /// <para>
            /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
            /// </para>
            /// </param>
            /// <param name="data">
            /// <para>
            /// Specifies a pointer to the compressed image data in memory.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "OES_texture_3D", Version = "", EntryPoint = "glCompressedTexImage3DOES")]
            public static void CompressedTexImage3D(OpenTK.Graphics.ES30.TextureTarget3d target, Int32 level, OpenTK.Graphics.ES30.CompressedInternalFormat internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, IntPtr data) { throw new NotImplementedException(); }

            /// <summary>[requires: OES_texture_3D]
            /// Specify a three-dimensional texture image in a compressed format
            /// </summary>
            /// <param name="target">
            /// <para>
            /// Specifies the target texture. Must be GL_TEXTURE_3D, GL_PROXY_TEXTURE_3D, GL_TEXTURE_2D_ARRAY or GL_PROXY_TEXTURE_2D_ARRAY.
            /// </para>
            /// </param>
            /// <param name="level">
            /// <para>
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            /// </para>
            /// </param>
            /// <param name="internalformat">
            /// <para>
            /// Specifies the format of the compressed image data stored at address data.
            /// </para>
            /// </param>
            /// <param name="width">
            /// <para>
            /// Specifies the width of the texture image. All implementations support 3D texture images that are at least 16 texels wide.
            /// </para>
            /// </param>
            /// <param name="height">
            /// <para>
            /// Specifies the height of the texture image. All implementations support 3D texture images that are at least 16 texels high.
            /// </para>
            /// </param>
            /// <param name="depth">
            /// <para>
            /// Specifies the depth of the texture image. All implementations support 3D texture images that are at least 16 texels deep.
            /// </para>
            /// </param>
            /// <param name="border">
            /// <para>
            /// This value must be 0.
            /// </para>
            /// </param>
            /// <param name="imageSize">
            /// <para>
            /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
            /// </para>
            /// </param>
            /// <param name="data">
            /// <para>
            /// Specifies a pointer to the compressed image data in memory.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "OES_texture_3D", Version = "", EntryPoint = "glCompressedTexImage3DOES")]
            [CLSCompliant(false)]
            public static void CompressedTexImage3D<T8>(OpenTK.Graphics.ES30.TextureTarget3d target, Int32 level, OpenTK.Graphics.ES30.CompressedInternalFormat internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T8[] data)
                where T8 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: OES_texture_3D]
            /// Specify a three-dimensional texture image in a compressed format
            /// </summary>
            /// <param name="target">
            /// <para>
            /// Specifies the target texture. Must be GL_TEXTURE_3D, GL_PROXY_TEXTURE_3D, GL_TEXTURE_2D_ARRAY or GL_PROXY_TEXTURE_2D_ARRAY.
            /// </para>
            /// </param>
            /// <param name="level">
            /// <para>
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            /// </para>
            /// </param>
            /// <param name="internalformat">
            /// <para>
            /// Specifies the format of the compressed image data stored at address data.
            /// </para>
            /// </param>
            /// <param name="width">
            /// <para>
            /// Specifies the width of the texture image. All implementations support 3D texture images that are at least 16 texels wide.
            /// </para>
            /// </param>
            /// <param name="height">
            /// <para>
            /// Specifies the height of the texture image. All implementations support 3D texture images that are at least 16 texels high.
            /// </para>
            /// </param>
            /// <param name="depth">
            /// <para>
            /// Specifies the depth of the texture image. All implementations support 3D texture images that are at least 16 texels deep.
            /// </para>
            /// </param>
            /// <param name="border">
            /// <para>
            /// This value must be 0.
            /// </para>
            /// </param>
            /// <param name="imageSize">
            /// <para>
            /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
            /// </para>
            /// </param>
            /// <param name="data">
            /// <para>
            /// Specifies a pointer to the compressed image data in memory.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "OES_texture_3D", Version = "", EntryPoint = "glCompressedTexImage3DOES")]
            [CLSCompliant(false)]
            public static void CompressedTexImage3D<T8>(OpenTK.Graphics.ES30.TextureTarget3d target, Int32 level, OpenTK.Graphics.ES30.CompressedInternalFormat internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T8[,] data)
                where T8 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: OES_texture_3D]
            /// Specify a three-dimensional texture image in a compressed format
            /// </summary>
            /// <param name="target">
            /// <para>
            /// Specifies the target texture. Must be GL_TEXTURE_3D, GL_PROXY_TEXTURE_3D, GL_TEXTURE_2D_ARRAY or GL_PROXY_TEXTURE_2D_ARRAY.
            /// </para>
            /// </param>
            /// <param name="level">
            /// <para>
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            /// </para>
            /// </param>
            /// <param name="internalformat">
            /// <para>
            /// Specifies the format of the compressed image data stored at address data.
            /// </para>
            /// </param>
            /// <param name="width">
            /// <para>
            /// Specifies the width of the texture image. All implementations support 3D texture images that are at least 16 texels wide.
            /// </para>
            /// </param>
            /// <param name="height">
            /// <para>
            /// Specifies the height of the texture image. All implementations support 3D texture images that are at least 16 texels high.
            /// </para>
            /// </param>
            /// <param name="depth">
            /// <para>
            /// Specifies the depth of the texture image. All implementations support 3D texture images that are at least 16 texels deep.
            /// </para>
            /// </param>
            /// <param name="border">
            /// <para>
            /// This value must be 0.
            /// </para>
            /// </param>
            /// <param name="imageSize">
            /// <para>
            /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
            /// </para>
            /// </param>
            /// <param name="data">
            /// <para>
            /// Specifies a pointer to the compressed image data in memory.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "OES_texture_3D", Version = "", EntryPoint = "glCompressedTexImage3DOES")]
            [CLSCompliant(false)]
            public static void CompressedTexImage3D<T8>(OpenTK.Graphics.ES30.TextureTarget3d target, Int32 level, OpenTK.Graphics.ES30.CompressedInternalFormat internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T8[,,] data)
                where T8 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: OES_texture_3D]
            /// Specify a three-dimensional texture image in a compressed format
            /// </summary>
            /// <param name="target">
            /// <para>
            /// Specifies the target texture. Must be GL_TEXTURE_3D, GL_PROXY_TEXTURE_3D, GL_TEXTURE_2D_ARRAY or GL_PROXY_TEXTURE_2D_ARRAY.
            /// </para>
            /// </param>
            /// <param name="level">
            /// <para>
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            /// </para>
            /// </param>
            /// <param name="internalformat">
            /// <para>
            /// Specifies the format of the compressed image data stored at address data.
            /// </para>
            /// </param>
            /// <param name="width">
            /// <para>
            /// Specifies the width of the texture image. All implementations support 3D texture images that are at least 16 texels wide.
            /// </para>
            /// </param>
            /// <param name="height">
            /// <para>
            /// Specifies the height of the texture image. All implementations support 3D texture images that are at least 16 texels high.
            /// </para>
            /// </param>
            /// <param name="depth">
            /// <para>
            /// Specifies the depth of the texture image. All implementations support 3D texture images that are at least 16 texels deep.
            /// </para>
            /// </param>
            /// <param name="border">
            /// <para>
            /// This value must be 0.
            /// </para>
            /// </param>
            /// <param name="imageSize">
            /// <para>
            /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
            /// </para>
            /// </param>
            /// <param name="data">
            /// <para>
            /// Specifies a pointer to the compressed image data in memory.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "OES_texture_3D", Version = "", EntryPoint = "glCompressedTexImage3DOES")]
            public static void CompressedTexImage3D<T8>(OpenTK.Graphics.ES30.TextureTarget3d target, Int32 level, OpenTK.Graphics.ES30.CompressedInternalFormat internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] ref T8 data)
                where T8 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: OES_texture_3D]
            /// Specify a three-dimensional texture subimage in a compressed format
            /// </summary>
            /// <param name="target">
            /// <para>
            /// Specifies the target texture. Must be GL_TEXTURE_3D.
            /// </para>
            /// </param>
            /// <param name="level">
            /// <para>
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            /// </para>
            /// </param>
            /// <param name="xoffset">
            /// <para>
            /// Specifies a texel offset in the x direction within the texture array.
            /// </para>
            /// </param>
            /// <param name="yoffset">
            /// <para>
            /// Specifies a texel offset in the y direction within the texture array.
            /// </para>
            /// </param>
            /// <param name="width">
            /// <para>
            /// Specifies the width of the texture subimage.
            /// </para>
            /// </param>
            /// <param name="height">
            /// <para>
            /// Specifies the height of the texture subimage.
            /// </para>
            /// </param>
            /// <param name="depth">
            /// <para>
            /// Specifies the depth of the texture subimage.
            /// </para>
            /// </param>
            /// <param name="format">
            /// <para>
            /// Specifies the format of the compressed image data stored at address data.
            /// </para>
            /// </param>
            /// <param name="imageSize">
            /// <para>
            /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
            /// </para>
            /// </param>
            /// <param name="data">
            /// <para>
            /// Specifies a pointer to the compressed image data in memory.
            /// </para>
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_texture_3D", Version = "", EntryPoint = "glCompressedTexSubImage3DOES")]
            public static void CompressedTexSubImage3D(OpenTK.Graphics.ES30.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.ES30.All format, Int32 imageSize, IntPtr data) { throw new NotImplementedException(); }

            /// <summary>[requires: OES_texture_3D]
            /// Specify a three-dimensional texture subimage in a compressed format
            /// </summary>
            /// <param name="target">
            /// <para>
            /// Specifies the target texture. Must be GL_TEXTURE_3D.
            /// </para>
            /// </param>
            /// <param name="level">
            /// <para>
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            /// </para>
            /// </param>
            /// <param name="xoffset">
            /// <para>
            /// Specifies a texel offset in the x direction within the texture array.
            /// </para>
            /// </param>
            /// <param name="yoffset">
            /// <para>
            /// Specifies a texel offset in the y direction within the texture array.
            /// </para>
            /// </param>
            /// <param name="width">
            /// <para>
            /// Specifies the width of the texture subimage.
            /// </para>
            /// </param>
            /// <param name="height">
            /// <para>
            /// Specifies the height of the texture subimage.
            /// </para>
            /// </param>
            /// <param name="depth">
            /// <para>
            /// Specifies the depth of the texture subimage.
            /// </para>
            /// </param>
            /// <param name="format">
            /// <para>
            /// Specifies the format of the compressed image data stored at address data.
            /// </para>
            /// </param>
            /// <param name="imageSize">
            /// <para>
            /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
            /// </para>
            /// </param>
            /// <param name="data">
            /// <para>
            /// Specifies a pointer to the compressed image data in memory.
            /// </para>
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_texture_3D", Version = "", EntryPoint = "glCompressedTexSubImage3DOES")]
            [CLSCompliant(false)]
            public static void CompressedTexSubImage3D<T10>(OpenTK.Graphics.ES30.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.ES30.All format, Int32 imageSize, [InAttribute, OutAttribute] T10[] data)
                where T10 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: OES_texture_3D]
            /// Specify a three-dimensional texture subimage in a compressed format
            /// </summary>
            /// <param name="target">
            /// <para>
            /// Specifies the target texture. Must be GL_TEXTURE_3D.
            /// </para>
            /// </param>
            /// <param name="level">
            /// <para>
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            /// </para>
            /// </param>
            /// <param name="xoffset">
            /// <para>
            /// Specifies a texel offset in the x direction within the texture array.
            /// </para>
            /// </param>
            /// <param name="yoffset">
            /// <para>
            /// Specifies a texel offset in the y direction within the texture array.
            /// </para>
            /// </param>
            /// <param name="width">
            /// <para>
            /// Specifies the width of the texture subimage.
            /// </para>
            /// </param>
            /// <param name="height">
            /// <para>
            /// Specifies the height of the texture subimage.
            /// </para>
            /// </param>
            /// <param name="depth">
            /// <para>
            /// Specifies the depth of the texture subimage.
            /// </para>
            /// </param>
            /// <param name="format">
            /// <para>
            /// Specifies the format of the compressed image data stored at address data.
            /// </para>
            /// </param>
            /// <param name="imageSize">
            /// <para>
            /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
            /// </para>
            /// </param>
            /// <param name="data">
            /// <para>
            /// Specifies a pointer to the compressed image data in memory.
            /// </para>
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_texture_3D", Version = "", EntryPoint = "glCompressedTexSubImage3DOES")]
            [CLSCompliant(false)]
            public static void CompressedTexSubImage3D<T10>(OpenTK.Graphics.ES30.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.ES30.All format, Int32 imageSize, [InAttribute, OutAttribute] T10[,] data)
                where T10 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: OES_texture_3D]
            /// Specify a three-dimensional texture subimage in a compressed format
            /// </summary>
            /// <param name="target">
            /// <para>
            /// Specifies the target texture. Must be GL_TEXTURE_3D.
            /// </para>
            /// </param>
            /// <param name="level">
            /// <para>
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            /// </para>
            /// </param>
            /// <param name="xoffset">
            /// <para>
            /// Specifies a texel offset in the x direction within the texture array.
            /// </para>
            /// </param>
            /// <param name="yoffset">
            /// <para>
            /// Specifies a texel offset in the y direction within the texture array.
            /// </para>
            /// </param>
            /// <param name="width">
            /// <para>
            /// Specifies the width of the texture subimage.
            /// </para>
            /// </param>
            /// <param name="height">
            /// <para>
            /// Specifies the height of the texture subimage.
            /// </para>
            /// </param>
            /// <param name="depth">
            /// <para>
            /// Specifies the depth of the texture subimage.
            /// </para>
            /// </param>
            /// <param name="format">
            /// <para>
            /// Specifies the format of the compressed image data stored at address data.
            /// </para>
            /// </param>
            /// <param name="imageSize">
            /// <para>
            /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
            /// </para>
            /// </param>
            /// <param name="data">
            /// <para>
            /// Specifies a pointer to the compressed image data in memory.
            /// </para>
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_texture_3D", Version = "", EntryPoint = "glCompressedTexSubImage3DOES")]
            [CLSCompliant(false)]
            public static void CompressedTexSubImage3D<T10>(OpenTK.Graphics.ES30.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.ES30.All format, Int32 imageSize, [InAttribute, OutAttribute] T10[,,] data)
                where T10 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: OES_texture_3D]
            /// Specify a three-dimensional texture subimage in a compressed format
            /// </summary>
            /// <param name="target">
            /// <para>
            /// Specifies the target texture. Must be GL_TEXTURE_3D.
            /// </para>
            /// </param>
            /// <param name="level">
            /// <para>
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            /// </para>
            /// </param>
            /// <param name="xoffset">
            /// <para>
            /// Specifies a texel offset in the x direction within the texture array.
            /// </para>
            /// </param>
            /// <param name="yoffset">
            /// <para>
            /// Specifies a texel offset in the y direction within the texture array.
            /// </para>
            /// </param>
            /// <param name="width">
            /// <para>
            /// Specifies the width of the texture subimage.
            /// </para>
            /// </param>
            /// <param name="height">
            /// <para>
            /// Specifies the height of the texture subimage.
            /// </para>
            /// </param>
            /// <param name="depth">
            /// <para>
            /// Specifies the depth of the texture subimage.
            /// </para>
            /// </param>
            /// <param name="format">
            /// <para>
            /// Specifies the format of the compressed image data stored at address data.
            /// </para>
            /// </param>
            /// <param name="imageSize">
            /// <para>
            /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
            /// </para>
            /// </param>
            /// <param name="data">
            /// <para>
            /// Specifies a pointer to the compressed image data in memory.
            /// </para>
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_texture_3D", Version = "", EntryPoint = "glCompressedTexSubImage3DOES")]
            public static void CompressedTexSubImage3D<T10>(OpenTK.Graphics.ES30.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.ES30.All format, Int32 imageSize, [InAttribute, OutAttribute] ref T10 data)
                where T10 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: OES_texture_3D]
            /// Specify a three-dimensional texture subimage in a compressed format
            /// </summary>
            /// <param name="target">
            /// <para>
            /// Specifies the target texture. Must be GL_TEXTURE_3D.
            /// </para>
            /// </param>
            /// <param name="level">
            /// <para>
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            /// </para>
            /// </param>
            /// <param name="xoffset">
            /// <para>
            /// Specifies a texel offset in the x direction within the texture array.
            /// </para>
            /// </param>
            /// <param name="yoffset">
            /// <para>
            /// Specifies a texel offset in the y direction within the texture array.
            /// </para>
            /// </param>
            /// <param name="width">
            /// <para>
            /// Specifies the width of the texture subimage.
            /// </para>
            /// </param>
            /// <param name="height">
            /// <para>
            /// Specifies the height of the texture subimage.
            /// </para>
            /// </param>
            /// <param name="depth">
            /// <para>
            /// Specifies the depth of the texture subimage.
            /// </para>
            /// </param>
            /// <param name="format">
            /// <para>
            /// Specifies the format of the compressed image data stored at address data.
            /// </para>
            /// </param>
            /// <param name="imageSize">
            /// <para>
            /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
            /// </para>
            /// </param>
            /// <param name="data">
            /// <para>
            /// Specifies a pointer to the compressed image data in memory.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "OES_texture_3D", Version = "", EntryPoint = "glCompressedTexSubImage3DOES")]
            public static void CompressedTexSubImage3D(OpenTK.Graphics.ES30.TextureTarget3d target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.ES30.All format, Int32 imageSize, IntPtr data) { throw new NotImplementedException(); }

            /// <summary>[requires: OES_texture_3D]
            /// Specify a three-dimensional texture subimage in a compressed format
            /// </summary>
            /// <param name="target">
            /// <para>
            /// Specifies the target texture. Must be GL_TEXTURE_3D.
            /// </para>
            /// </param>
            /// <param name="level">
            /// <para>
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            /// </para>
            /// </param>
            /// <param name="xoffset">
            /// <para>
            /// Specifies a texel offset in the x direction within the texture array.
            /// </para>
            /// </param>
            /// <param name="yoffset">
            /// <para>
            /// Specifies a texel offset in the y direction within the texture array.
            /// </para>
            /// </param>
            /// <param name="width">
            /// <para>
            /// Specifies the width of the texture subimage.
            /// </para>
            /// </param>
            /// <param name="height">
            /// <para>
            /// Specifies the height of the texture subimage.
            /// </para>
            /// </param>
            /// <param name="depth">
            /// <para>
            /// Specifies the depth of the texture subimage.
            /// </para>
            /// </param>
            /// <param name="format">
            /// <para>
            /// Specifies the format of the compressed image data stored at address data.
            /// </para>
            /// </param>
            /// <param name="imageSize">
            /// <para>
            /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
            /// </para>
            /// </param>
            /// <param name="data">
            /// <para>
            /// Specifies a pointer to the compressed image data in memory.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "OES_texture_3D", Version = "", EntryPoint = "glCompressedTexSubImage3DOES")]
            [CLSCompliant(false)]
            public static void CompressedTexSubImage3D<T10>(OpenTK.Graphics.ES30.TextureTarget3d target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.ES30.All format, Int32 imageSize, [InAttribute, OutAttribute] T10[] data)
                where T10 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: OES_texture_3D]
            /// Specify a three-dimensional texture subimage in a compressed format
            /// </summary>
            /// <param name="target">
            /// <para>
            /// Specifies the target texture. Must be GL_TEXTURE_3D.
            /// </para>
            /// </param>
            /// <param name="level">
            /// <para>
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            /// </para>
            /// </param>
            /// <param name="xoffset">
            /// <para>
            /// Specifies a texel offset in the x direction within the texture array.
            /// </para>
            /// </param>
            /// <param name="yoffset">
            /// <para>
            /// Specifies a texel offset in the y direction within the texture array.
            /// </para>
            /// </param>
            /// <param name="width">
            /// <para>
            /// Specifies the width of the texture subimage.
            /// </para>
            /// </param>
            /// <param name="height">
            /// <para>
            /// Specifies the height of the texture subimage.
            /// </para>
            /// </param>
            /// <param name="depth">
            /// <para>
            /// Specifies the depth of the texture subimage.
            /// </para>
            /// </param>
            /// <param name="format">
            /// <para>
            /// Specifies the format of the compressed image data stored at address data.
            /// </para>
            /// </param>
            /// <param name="imageSize">
            /// <para>
            /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
            /// </para>
            /// </param>
            /// <param name="data">
            /// <para>
            /// Specifies a pointer to the compressed image data in memory.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "OES_texture_3D", Version = "", EntryPoint = "glCompressedTexSubImage3DOES")]
            [CLSCompliant(false)]
            public static void CompressedTexSubImage3D<T10>(OpenTK.Graphics.ES30.TextureTarget3d target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.ES30.All format, Int32 imageSize, [InAttribute, OutAttribute] T10[,] data)
                where T10 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: OES_texture_3D]
            /// Specify a three-dimensional texture subimage in a compressed format
            /// </summary>
            /// <param name="target">
            /// <para>
            /// Specifies the target texture. Must be GL_TEXTURE_3D.
            /// </para>
            /// </param>
            /// <param name="level">
            /// <para>
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            /// </para>
            /// </param>
            /// <param name="xoffset">
            /// <para>
            /// Specifies a texel offset in the x direction within the texture array.
            /// </para>
            /// </param>
            /// <param name="yoffset">
            /// <para>
            /// Specifies a texel offset in the y direction within the texture array.
            /// </para>
            /// </param>
            /// <param name="width">
            /// <para>
            /// Specifies the width of the texture subimage.
            /// </para>
            /// </param>
            /// <param name="height">
            /// <para>
            /// Specifies the height of the texture subimage.
            /// </para>
            /// </param>
            /// <param name="depth">
            /// <para>
            /// Specifies the depth of the texture subimage.
            /// </para>
            /// </param>
            /// <param name="format">
            /// <para>
            /// Specifies the format of the compressed image data stored at address data.
            /// </para>
            /// </param>
            /// <param name="imageSize">
            /// <para>
            /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
            /// </para>
            /// </param>
            /// <param name="data">
            /// <para>
            /// Specifies a pointer to the compressed image data in memory.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "OES_texture_3D", Version = "", EntryPoint = "glCompressedTexSubImage3DOES")]
            [CLSCompliant(false)]
            public static void CompressedTexSubImage3D<T10>(OpenTK.Graphics.ES30.TextureTarget3d target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.ES30.All format, Int32 imageSize, [InAttribute, OutAttribute] T10[,,] data)
                where T10 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: OES_texture_3D]
            /// Specify a three-dimensional texture subimage in a compressed format
            /// </summary>
            /// <param name="target">
            /// <para>
            /// Specifies the target texture. Must be GL_TEXTURE_3D.
            /// </para>
            /// </param>
            /// <param name="level">
            /// <para>
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            /// </para>
            /// </param>
            /// <param name="xoffset">
            /// <para>
            /// Specifies a texel offset in the x direction within the texture array.
            /// </para>
            /// </param>
            /// <param name="yoffset">
            /// <para>
            /// Specifies a texel offset in the y direction within the texture array.
            /// </para>
            /// </param>
            /// <param name="width">
            /// <para>
            /// Specifies the width of the texture subimage.
            /// </para>
            /// </param>
            /// <param name="height">
            /// <para>
            /// Specifies the height of the texture subimage.
            /// </para>
            /// </param>
            /// <param name="depth">
            /// <para>
            /// Specifies the depth of the texture subimage.
            /// </para>
            /// </param>
            /// <param name="format">
            /// <para>
            /// Specifies the format of the compressed image data stored at address data.
            /// </para>
            /// </param>
            /// <param name="imageSize">
            /// <para>
            /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
            /// </para>
            /// </param>
            /// <param name="data">
            /// <para>
            /// Specifies a pointer to the compressed image data in memory.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "OES_texture_3D", Version = "", EntryPoint = "glCompressedTexSubImage3DOES")]
            public static void CompressedTexSubImage3D<T10>(OpenTK.Graphics.ES30.TextureTarget3d target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.ES30.All format, Int32 imageSize, [InAttribute, OutAttribute] ref T10 data)
                where T10 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: OES_texture_3D]
            /// Copy a three-dimensional texture subimage
            /// </summary>
            /// <param name="target">
            /// <para>
            /// Specifies the target texture. Must be GL_TEXTURE_3D or GL_TEXTURE_2D_ARRAY.
            /// </para>
            /// </param>
            /// <param name="level">
            /// <para>
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            /// </para>
            /// </param>
            /// <param name="xoffset">
            /// <para>
            /// Specifies a texel offset in the x direction within the texture array.
            /// </para>
            /// </param>
            /// <param name="yoffset">
            /// <para>
            /// Specifies a texel offset in the y direction within the texture array.
            /// </para>
            /// </param>
            /// <param name="zoffset">
            /// <para>
            /// Specifies a texel offset in the z direction within the texture array.
            /// </para>
            /// </param>
            /// <param name="x">
            /// <para>
            /// Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied.
            /// </para>
            /// </param>
            /// <param name="width">
            /// <para>
            /// Specifies the width of the texture subimage.
            /// </para>
            /// </param>
            /// <param name="height">
            /// <para>
            /// Specifies the height of the texture subimage.
            /// </para>
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_texture_3D", Version = "", EntryPoint = "glCopyTexSubImage3DOES")]
            public static void CopyTexSubImage3D(OpenTK.Graphics.ES30.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 x, Int32 y, Int32 width, Int32 height) { throw new NotImplementedException(); }

            /// <summary>[requires: OES_texture_3D]
            /// Copy a three-dimensional texture subimage
            /// </summary>
            /// <param name="target">
            /// <para>
            /// Specifies the target texture. Must be GL_TEXTURE_3D or GL_TEXTURE_2D_ARRAY.
            /// </para>
            /// </param>
            /// <param name="level">
            /// <para>
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            /// </para>
            /// </param>
            /// <param name="xoffset">
            /// <para>
            /// Specifies a texel offset in the x direction within the texture array.
            /// </para>
            /// </param>
            /// <param name="yoffset">
            /// <para>
            /// Specifies a texel offset in the y direction within the texture array.
            /// </para>
            /// </param>
            /// <param name="zoffset">
            /// <para>
            /// Specifies a texel offset in the z direction within the texture array.
            /// </para>
            /// </param>
            /// <param name="x">
            /// <para>
            /// Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied.
            /// </para>
            /// </param>
            /// <param name="width">
            /// <para>
            /// Specifies the width of the texture subimage.
            /// </para>
            /// </param>
            /// <param name="height">
            /// <para>
            /// Specifies the height of the texture subimage.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "OES_texture_3D", Version = "", EntryPoint = "glCopyTexSubImage3DOES")]
            public static void CopyTexSubImage3D(OpenTK.Graphics.ES30.TextureTarget3d target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 x, Int32 y, Int32 width, Int32 height) { throw new NotImplementedException(); }

            /// <summary>[requires: OES_vertex_array_object]</summary>
            [AutoGenerated(Category = "OES_vertex_array_object", Version = "", EntryPoint = "glDeleteVertexArraysOES")]
            [CLSCompliant(false)]
            public static void DeleteVertexArray(Int32 arrays) { throw new NotImplementedException(); }

            /// <summary>[requires: OES_vertex_array_object]</summary>
            [AutoGenerated(Category = "OES_vertex_array_object", Version = "", EntryPoint = "glDeleteVertexArraysOES")]
            [CLSCompliant(false)]
            public static void DeleteVertexArray(UInt32 arrays) { throw new NotImplementedException(); }

            /// <summary>[requires: OES_vertex_array_object]
            /// Delete vertex array objects
            /// </summary>
            /// <param name="n">
            /// <para>
            /// Specifies the number of vertex array objects to be deleted.
            /// </para>
            /// </param>
            /// <param name="arrays">
            /// <para>
            /// Specifies the address of an array containing the n names of the objects to be deleted.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "OES_vertex_array_object", Version = "", EntryPoint = "glDeleteVertexArraysOES")]
            [CLSCompliant(false)]
            public static void DeleteVertexArrays(Int32 n, Int32[] arrays) { throw new NotImplementedException(); }

            /// <summary>[requires: OES_vertex_array_object]
            /// Delete vertex array objects
            /// </summary>
            /// <param name="n">
            /// <para>
            /// Specifies the number of vertex array objects to be deleted.
            /// </para>
            /// </param>
            /// <param name="arrays">
            /// <para>
            /// Specifies the address of an array containing the n names of the objects to be deleted.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "OES_vertex_array_object", Version = "", EntryPoint = "glDeleteVertexArraysOES")]
            [CLSCompliant(false)]
            public static void DeleteVertexArrays(Int32 n, ref Int32 arrays) { throw new NotImplementedException(); }

            /// <summary>[requires: OES_vertex_array_object]
            /// Delete vertex array objects
            /// </summary>
            /// <param name="n">
            /// <para>
            /// Specifies the number of vertex array objects to be deleted.
            /// </para>
            /// </param>
            /// <param name="arrays">
            /// <para>
            /// Specifies the address of an array containing the n names of the objects to be deleted.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "OES_vertex_array_object", Version = "", EntryPoint = "glDeleteVertexArraysOES")]
            [CLSCompliant(false)]
            public static unsafe void DeleteVertexArrays(Int32 n, Int32* arrays) { throw new NotImplementedException(); }

            /// <summary>[requires: OES_vertex_array_object]
            /// Delete vertex array objects
            /// </summary>
            /// <param name="n">
            /// <para>
            /// Specifies the number of vertex array objects to be deleted.
            /// </para>
            /// </param>
            /// <param name="arrays">
            /// <para>
            /// Specifies the address of an array containing the n names of the objects to be deleted.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "OES_vertex_array_object", Version = "", EntryPoint = "glDeleteVertexArraysOES")]
            [CLSCompliant(false)]
            public static void DeleteVertexArrays(Int32 n, UInt32[] arrays) { throw new NotImplementedException(); }

            /// <summary>[requires: OES_vertex_array_object]
            /// Delete vertex array objects
            /// </summary>
            /// <param name="n">
            /// <para>
            /// Specifies the number of vertex array objects to be deleted.
            /// </para>
            /// </param>
            /// <param name="arrays">
            /// <para>
            /// Specifies the address of an array containing the n names of the objects to be deleted.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "OES_vertex_array_object", Version = "", EntryPoint = "glDeleteVertexArraysOES")]
            [CLSCompliant(false)]
            public static void DeleteVertexArrays(Int32 n, ref UInt32 arrays) { throw new NotImplementedException(); }

            /// <summary>[requires: OES_vertex_array_object]
            /// Delete vertex array objects
            /// </summary>
            /// <param name="n">
            /// <para>
            /// Specifies the number of vertex array objects to be deleted.
            /// </para>
            /// </param>
            /// <param name="arrays">
            /// <para>
            /// Specifies the address of an array containing the n names of the objects to be deleted.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "OES_vertex_array_object", Version = "", EntryPoint = "glDeleteVertexArraysOES")]
            [CLSCompliant(false)]
            public static unsafe void DeleteVertexArrays(Int32 n, UInt32* arrays) { throw new NotImplementedException(); }

            /// <summary>[requires: OES_EGL_image]</summary>
            [AutoGenerated(Category = "OES_EGL_image", Version = "", EntryPoint = "glEGLImageTargetRenderbufferStorageOES")]
            public static void EGLImageTargetRenderbufferStorage(OpenTK.Graphics.ES30.All target, IntPtr image) { throw new NotImplementedException(); }

            /// <summary>[requires: OES_EGL_image]</summary>
            [AutoGenerated(Category = "OES_EGL_image", Version = "", EntryPoint = "glEGLImageTargetTexture2DOES")]
            public static void EGLImageTargetTexture2D(OpenTK.Graphics.ES30.All target, IntPtr image) { throw new NotImplementedException(); }

            /// <summary>[requires: OES_texture_3D]</summary>
            [AutoGenerated(Category = "OES_texture_3D", Version = "", EntryPoint = "glFramebufferTexture3DOES")]
            [CLSCompliant(false)]
            public static void FramebufferTexture3D(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All attachment, OpenTK.Graphics.ES30.All textarget, Int32 texture, Int32 level, Int32 zoffset) { throw new NotImplementedException(); }

            /// <summary>[requires: OES_texture_3D]</summary>
            [AutoGenerated(Category = "OES_texture_3D", Version = "", EntryPoint = "glFramebufferTexture3DOES")]
            [CLSCompliant(false)]
            public static void FramebufferTexture3D(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All attachment, OpenTK.Graphics.ES30.All textarget, UInt32 texture, Int32 level, Int32 zoffset) { throw new NotImplementedException(); }

            /// <summary>[requires: OES_vertex_array_object]</summary>
            [AutoGenerated(Category = "OES_vertex_array_object", Version = "", EntryPoint = "glGenVertexArraysOES")]
            [CLSCompliant(false)]
            public static Int32 GenVertexArray() { throw new NotImplementedException(); }

            /// <summary>[requires: OES_vertex_array_object]
            /// Generate vertex array object names
            /// </summary>
            /// <param name="n">
            /// <para>
            /// Specifies the number of vertex array object names to generate.
            /// </para>
            /// </param>
            /// <param name="arrays">
            /// <para>
            /// Specifies an array in which the generated vertex array object names are stored.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "OES_vertex_array_object", Version = "", EntryPoint = "glGenVertexArraysOES")]
            [CLSCompliant(false)]
            public static void GenVertexArrays(Int32 n, [OutAttribute] Int32[] arrays) { throw new NotImplementedException(); }

            /// <summary>[requires: OES_vertex_array_object]
            /// Generate vertex array object names
            /// </summary>
            /// <param name="n">
            /// <para>
            /// Specifies the number of vertex array object names to generate.
            /// </para>
            /// </param>
            /// <param name="arrays">
            /// <para>
            /// Specifies an array in which the generated vertex array object names are stored.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "OES_vertex_array_object", Version = "", EntryPoint = "glGenVertexArraysOES")]
            [CLSCompliant(false)]
            public static void GenVertexArrays(Int32 n, [OutAttribute] out Int32 arrays) { throw new NotImplementedException(); }

            /// <summary>[requires: OES_vertex_array_object]
            /// Generate vertex array object names
            /// </summary>
            /// <param name="n">
            /// <para>
            /// Specifies the number of vertex array object names to generate.
            /// </para>
            /// </param>
            /// <param name="arrays">
            /// <para>
            /// Specifies an array in which the generated vertex array object names are stored.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "OES_vertex_array_object", Version = "", EntryPoint = "glGenVertexArraysOES")]
            [CLSCompliant(false)]
            public static unsafe void GenVertexArrays(Int32 n, [OutAttribute] Int32* arrays) { throw new NotImplementedException(); }

            /// <summary>[requires: OES_vertex_array_object]
            /// Generate vertex array object names
            /// </summary>
            /// <param name="n">
            /// <para>
            /// Specifies the number of vertex array object names to generate.
            /// </para>
            /// </param>
            /// <param name="arrays">
            /// <para>
            /// Specifies an array in which the generated vertex array object names are stored.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "OES_vertex_array_object", Version = "", EntryPoint = "glGenVertexArraysOES")]
            [CLSCompliant(false)]
            public static void GenVertexArrays(Int32 n, [OutAttribute] UInt32[] arrays) { throw new NotImplementedException(); }

            /// <summary>[requires: OES_vertex_array_object]
            /// Generate vertex array object names
            /// </summary>
            /// <param name="n">
            /// <para>
            /// Specifies the number of vertex array object names to generate.
            /// </para>
            /// </param>
            /// <param name="arrays">
            /// <para>
            /// Specifies an array in which the generated vertex array object names are stored.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "OES_vertex_array_object", Version = "", EntryPoint = "glGenVertexArraysOES")]
            [CLSCompliant(false)]
            public static void GenVertexArrays(Int32 n, [OutAttribute] out UInt32 arrays) { throw new NotImplementedException(); }

            /// <summary>[requires: OES_vertex_array_object]
            /// Generate vertex array object names
            /// </summary>
            /// <param name="n">
            /// <para>
            /// Specifies the number of vertex array object names to generate.
            /// </para>
            /// </param>
            /// <param name="arrays">
            /// <para>
            /// Specifies an array in which the generated vertex array object names are stored.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "OES_vertex_array_object", Version = "", EntryPoint = "glGenVertexArraysOES")]
            [CLSCompliant(false)]
            public static unsafe void GenVertexArrays(Int32 n, [OutAttribute] UInt32* arrays) { throw new NotImplementedException(); }

            /// <summary>[requires: OES_mapbuffer]</summary>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_mapbuffer", Version = "", EntryPoint = "glGetBufferPointervOES")]
            public static void GetBufferPointer(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All pname, [OutAttribute] IntPtr @params) { throw new NotImplementedException(); }

            /// <summary>[requires: OES_mapbuffer]</summary>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_mapbuffer", Version = "", EntryPoint = "glGetBufferPointervOES")]
            [CLSCompliant(false)]
            public static void GetBufferPointer<T2>(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All pname, [InAttribute, OutAttribute] T2[] @params)
                where T2 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: OES_mapbuffer]</summary>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_mapbuffer", Version = "", EntryPoint = "glGetBufferPointervOES")]
            [CLSCompliant(false)]
            public static void GetBufferPointer<T2>(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All pname, [InAttribute, OutAttribute] T2[,] @params)
                where T2 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: OES_mapbuffer]</summary>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_mapbuffer", Version = "", EntryPoint = "glGetBufferPointervOES")]
            [CLSCompliant(false)]
            public static void GetBufferPointer<T2>(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All pname, [InAttribute, OutAttribute] T2[,,] @params)
                where T2 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: OES_mapbuffer]</summary>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_mapbuffer", Version = "", EntryPoint = "glGetBufferPointervOES")]
            public static void GetBufferPointer<T2>(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All pname, [InAttribute, OutAttribute] ref T2 @params)
                where T2 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: OES_mapbuffer]</summary>
            [AutoGenerated(Category = "OES_mapbuffer", Version = "", EntryPoint = "glGetBufferPointervOES")]
            public static void GetBufferPointer(OpenTK.Graphics.ES30.BufferTarget target, OpenTK.Graphics.ES30.BufferPointer pname, [OutAttribute] IntPtr @params) { throw new NotImplementedException(); }

            /// <summary>[requires: OES_mapbuffer]</summary>
            [AutoGenerated(Category = "OES_mapbuffer", Version = "", EntryPoint = "glGetBufferPointervOES")]
            [CLSCompliant(false)]
            public static void GetBufferPointer<T2>(OpenTK.Graphics.ES30.BufferTarget target, OpenTK.Graphics.ES30.BufferPointer pname, [InAttribute, OutAttribute] T2[] @params)
                where T2 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: OES_mapbuffer]</summary>
            [AutoGenerated(Category = "OES_mapbuffer", Version = "", EntryPoint = "glGetBufferPointervOES")]
            [CLSCompliant(false)]
            public static void GetBufferPointer<T2>(OpenTK.Graphics.ES30.BufferTarget target, OpenTK.Graphics.ES30.BufferPointer pname, [InAttribute, OutAttribute] T2[,] @params)
                where T2 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: OES_mapbuffer]</summary>
            [AutoGenerated(Category = "OES_mapbuffer", Version = "", EntryPoint = "glGetBufferPointervOES")]
            [CLSCompliant(false)]
            public static void GetBufferPointer<T2>(OpenTK.Graphics.ES30.BufferTarget target, OpenTK.Graphics.ES30.BufferPointer pname, [InAttribute, OutAttribute] T2[,,] @params)
                where T2 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: OES_mapbuffer]</summary>
            [AutoGenerated(Category = "OES_mapbuffer", Version = "", EntryPoint = "glGetBufferPointervOES")]
            public static void GetBufferPointer<T2>(OpenTK.Graphics.ES30.BufferTarget target, OpenTK.Graphics.ES30.BufferPointer pname, [InAttribute, OutAttribute] ref T2 @params)
                where T2 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: OES_get_program_binary]
            /// Return a binary representation of a program object's compiled and linked executable source
            /// </summary>
            /// <param name="program">
            /// <para>
            /// Specifies the name of a program object whose binary representation to retrieve.
            /// </para>
            /// </param>
            /// <param name="bufSize">
            /// <para>
            /// Specifies the size of the buffer whose address is given by binary.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// Specifies the address of a variable to receive the number of bytes written into binary.
            /// </para>
            /// </param>
            /// <param name="binaryFormat">
            /// <para>
            /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
            /// </para>
            /// </param>
            /// <param name="binary">
            /// <para>
            /// Specifies the address an array into which the GL will return program's binary representation.
            /// </para>
            /// </param>
            [Obsolete("Use out overload instead")]
            [AutoGenerated(Category = "OES_get_program_binary", Version = "", EntryPoint = "glGetProgramBinaryOES")]
            [CLSCompliant(false)]
            public static void GetProgramBinary(Int32 program, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute] OpenTK.Graphics.ES30.All[] binaryFormat, [OutAttribute] IntPtr binary) { throw new NotImplementedException(); }

            /// <summary>[requires: OES_get_program_binary]
            /// Return a binary representation of a program object's compiled and linked executable source
            /// </summary>
            /// <param name="program">
            /// <para>
            /// Specifies the name of a program object whose binary representation to retrieve.
            /// </para>
            /// </param>
            /// <param name="bufSize">
            /// <para>
            /// Specifies the size of the buffer whose address is given by binary.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// Specifies the address of a variable to receive the number of bytes written into binary.
            /// </para>
            /// </param>
            /// <param name="binaryFormat">
            /// <para>
            /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
            /// </para>
            /// </param>
            /// <param name="binary">
            /// <para>
            /// Specifies the address an array into which the GL will return program's binary representation.
            /// </para>
            /// </param>
            [Obsolete("Use out overload instead")]
            [AutoGenerated(Category = "OES_get_program_binary", Version = "", EntryPoint = "glGetProgramBinaryOES")]
            [CLSCompliant(false)]
            public static void GetProgramBinary<T4>(Int32 program, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute] OpenTK.Graphics.ES30.All[] binaryFormat, [InAttribute, OutAttribute] T4[] binary)
                where T4 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: OES_get_program_binary]
            /// Return a binary representation of a program object's compiled and linked executable source
            /// </summary>
            /// <param name="program">
            /// <para>
            /// Specifies the name of a program object whose binary representation to retrieve.
            /// </para>
            /// </param>
            /// <param name="bufSize">
            /// <para>
            /// Specifies the size of the buffer whose address is given by binary.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// Specifies the address of a variable to receive the number of bytes written into binary.
            /// </para>
            /// </param>
            /// <param name="binaryFormat">
            /// <para>
            /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
            /// </para>
            /// </param>
            /// <param name="binary">
            /// <para>
            /// Specifies the address an array into which the GL will return program's binary representation.
            /// </para>
            /// </param>
            [Obsolete("Use out overload instead")]
            [AutoGenerated(Category = "OES_get_program_binary", Version = "", EntryPoint = "glGetProgramBinaryOES")]
            [CLSCompliant(false)]
            public static void GetProgramBinary<T4>(Int32 program, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute] OpenTK.Graphics.ES30.All[] binaryFormat, [InAttribute, OutAttribute] T4[,] binary)
                where T4 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: OES_get_program_binary]
            /// Return a binary representation of a program object's compiled and linked executable source
            /// </summary>
            /// <param name="program">
            /// <para>
            /// Specifies the name of a program object whose binary representation to retrieve.
            /// </para>
            /// </param>
            /// <param name="bufSize">
            /// <para>
            /// Specifies the size of the buffer whose address is given by binary.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// Specifies the address of a variable to receive the number of bytes written into binary.
            /// </para>
            /// </param>
            /// <param name="binaryFormat">
            /// <para>
            /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
            /// </para>
            /// </param>
            /// <param name="binary">
            /// <para>
            /// Specifies the address an array into which the GL will return program's binary representation.
            /// </para>
            /// </param>
            [Obsolete("Use out overload instead")]
            [AutoGenerated(Category = "OES_get_program_binary", Version = "", EntryPoint = "glGetProgramBinaryOES")]
            [CLSCompliant(false)]
            public static void GetProgramBinary<T4>(Int32 program, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute] OpenTK.Graphics.ES30.All[] binaryFormat, [InAttribute, OutAttribute] T4[,,] binary)
                where T4 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: OES_get_program_binary]
            /// Return a binary representation of a program object's compiled and linked executable source
            /// </summary>
            /// <param name="program">
            /// <para>
            /// Specifies the name of a program object whose binary representation to retrieve.
            /// </para>
            /// </param>
            /// <param name="bufSize">
            /// <para>
            /// Specifies the size of the buffer whose address is given by binary.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// Specifies the address of a variable to receive the number of bytes written into binary.
            /// </para>
            /// </param>
            /// <param name="binaryFormat">
            /// <para>
            /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
            /// </para>
            /// </param>
            /// <param name="binary">
            /// <para>
            /// Specifies the address an array into which the GL will return program's binary representation.
            /// </para>
            /// </param>
            [Obsolete("Use out overload instead")]
            [AutoGenerated(Category = "OES_get_program_binary", Version = "", EntryPoint = "glGetProgramBinaryOES")]
            [CLSCompliant(false)]
            public static void GetProgramBinary<T4>(Int32 program, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute] OpenTK.Graphics.ES30.All[] binaryFormat, [InAttribute, OutAttribute] ref T4 binary)
                where T4 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: OES_get_program_binary]
            /// Return a binary representation of a program object's compiled and linked executable source
            /// </summary>
            /// <param name="program">
            /// <para>
            /// Specifies the name of a program object whose binary representation to retrieve.
            /// </para>
            /// </param>
            /// <param name="bufSize">
            /// <para>
            /// Specifies the size of the buffer whose address is given by binary.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// Specifies the address of a variable to receive the number of bytes written into binary.
            /// </para>
            /// </param>
            /// <param name="binaryFormat">
            /// <para>
            /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
            /// </para>
            /// </param>
            /// <param name="binary">
            /// <para>
            /// Specifies the address an array into which the GL will return program's binary representation.
            /// </para>
            /// </param>
            [Obsolete("Use out overload instead")]
            [AutoGenerated(Category = "OES_get_program_binary", Version = "", EntryPoint = "glGetProgramBinaryOES")]
            [CLSCompliant(false)]
            public static void GetProgramBinary(Int32 program, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] out OpenTK.Graphics.ES30.All binaryFormat, [OutAttribute] IntPtr binary) { throw new NotImplementedException(); }

            /// <summary>[requires: OES_get_program_binary]
            /// Return a binary representation of a program object's compiled and linked executable source
            /// </summary>
            /// <param name="program">
            /// <para>
            /// Specifies the name of a program object whose binary representation to retrieve.
            /// </para>
            /// </param>
            /// <param name="bufSize">
            /// <para>
            /// Specifies the size of the buffer whose address is given by binary.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// Specifies the address of a variable to receive the number of bytes written into binary.
            /// </para>
            /// </param>
            /// <param name="binaryFormat">
            /// <para>
            /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
            /// </para>
            /// </param>
            /// <param name="binary">
            /// <para>
            /// Specifies the address an array into which the GL will return program's binary representation.
            /// </para>
            /// </param>
            [Obsolete("Use out overload instead")]
            [AutoGenerated(Category = "OES_get_program_binary", Version = "", EntryPoint = "glGetProgramBinaryOES")]
            [CLSCompliant(false)]
            public static void GetProgramBinary<T4>(Int32 program, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] out OpenTK.Graphics.ES30.All binaryFormat, [InAttribute, OutAttribute] T4[] binary)
                where T4 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: OES_get_program_binary]
            /// Return a binary representation of a program object's compiled and linked executable source
            /// </summary>
            /// <param name="program">
            /// <para>
            /// Specifies the name of a program object whose binary representation to retrieve.
            /// </para>
            /// </param>
            /// <param name="bufSize">
            /// <para>
            /// Specifies the size of the buffer whose address is given by binary.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// Specifies the address of a variable to receive the number of bytes written into binary.
            /// </para>
            /// </param>
            /// <param name="binaryFormat">
            /// <para>
            /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
            /// </para>
            /// </param>
            /// <param name="binary">
            /// <para>
            /// Specifies the address an array into which the GL will return program's binary representation.
            /// </para>
            /// </param>
            [Obsolete("Use out overload instead")]
            [AutoGenerated(Category = "OES_get_program_binary", Version = "", EntryPoint = "glGetProgramBinaryOES")]
            [CLSCompliant(false)]
            public static void GetProgramBinary<T4>(Int32 program, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] out OpenTK.Graphics.ES30.All binaryFormat, [InAttribute, OutAttribute] T4[,] binary)
                where T4 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: OES_get_program_binary]
            /// Return a binary representation of a program object's compiled and linked executable source
            /// </summary>
            /// <param name="program">
            /// <para>
            /// Specifies the name of a program object whose binary representation to retrieve.
            /// </para>
            /// </param>
            /// <param name="bufSize">
            /// <para>
            /// Specifies the size of the buffer whose address is given by binary.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// Specifies the address of a variable to receive the number of bytes written into binary.
            /// </para>
            /// </param>
            /// <param name="binaryFormat">
            /// <para>
            /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
            /// </para>
            /// </param>
            /// <param name="binary">
            /// <para>
            /// Specifies the address an array into which the GL will return program's binary representation.
            /// </para>
            /// </param>
            [Obsolete("Use out overload instead")]
            [AutoGenerated(Category = "OES_get_program_binary", Version = "", EntryPoint = "glGetProgramBinaryOES")]
            [CLSCompliant(false)]
            public static void GetProgramBinary<T4>(Int32 program, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] out OpenTK.Graphics.ES30.All binaryFormat, [InAttribute, OutAttribute] T4[,,] binary)
                where T4 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: OES_get_program_binary]
            /// Return a binary representation of a program object's compiled and linked executable source
            /// </summary>
            /// <param name="program">
            /// <para>
            /// Specifies the name of a program object whose binary representation to retrieve.
            /// </para>
            /// </param>
            /// <param name="bufSize">
            /// <para>
            /// Specifies the size of the buffer whose address is given by binary.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// Specifies the address of a variable to receive the number of bytes written into binary.
            /// </para>
            /// </param>
            /// <param name="binaryFormat">
            /// <para>
            /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
            /// </para>
            /// </param>
            /// <param name="binary">
            /// <para>
            /// Specifies the address an array into which the GL will return program's binary representation.
            /// </para>
            /// </param>
            [Obsolete("Use out overload instead")]
            [AutoGenerated(Category = "OES_get_program_binary", Version = "", EntryPoint = "glGetProgramBinaryOES")]
            [CLSCompliant(false)]
            public static void GetProgramBinary<T4>(Int32 program, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] out OpenTK.Graphics.ES30.All binaryFormat, [InAttribute, OutAttribute] ref T4 binary)
                where T4 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: OES_get_program_binary]
            /// Return a binary representation of a program object's compiled and linked executable source
            /// </summary>
            /// <param name="program">
            /// <para>
            /// Specifies the name of a program object whose binary representation to retrieve.
            /// </para>
            /// </param>
            /// <param name="bufSize">
            /// <para>
            /// Specifies the size of the buffer whose address is given by binary.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// Specifies the address of a variable to receive the number of bytes written into binary.
            /// </para>
            /// </param>
            /// <param name="binaryFormat">
            /// <para>
            /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
            /// </para>
            /// </param>
            /// <param name="binary">
            /// <para>
            /// Specifies the address an array into which the GL will return program's binary representation.
            /// </para>
            /// </param>
            [Obsolete("Use out overload instead")]
            [AutoGenerated(Category = "OES_get_program_binary", Version = "", EntryPoint = "glGetProgramBinaryOES")]
            [CLSCompliant(false)]
            public static unsafe void GetProgramBinary(Int32 program, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] OpenTK.Graphics.ES30.All* binaryFormat, [OutAttribute] IntPtr binary) { throw new NotImplementedException(); }

            /// <summary>[requires: OES_get_program_binary]
            /// Return a binary representation of a program object's compiled and linked executable source
            /// </summary>
            /// <param name="program">
            /// <para>
            /// Specifies the name of a program object whose binary representation to retrieve.
            /// </para>
            /// </param>
            /// <param name="bufSize">
            /// <para>
            /// Specifies the size of the buffer whose address is given by binary.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// Specifies the address of a variable to receive the number of bytes written into binary.
            /// </para>
            /// </param>
            /// <param name="binaryFormat">
            /// <para>
            /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
            /// </para>
            /// </param>
            /// <param name="binary">
            /// <para>
            /// Specifies the address an array into which the GL will return program's binary representation.
            /// </para>
            /// </param>
            [Obsolete("Use out overload instead")]
            [AutoGenerated(Category = "OES_get_program_binary", Version = "", EntryPoint = "glGetProgramBinaryOES")]
            [CLSCompliant(false)]
            public static unsafe void GetProgramBinary<T4>(Int32 program, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] OpenTK.Graphics.ES30.All* binaryFormat, [InAttribute, OutAttribute] T4[] binary)
                where T4 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: OES_get_program_binary]
            /// Return a binary representation of a program object's compiled and linked executable source
            /// </summary>
            /// <param name="program">
            /// <para>
            /// Specifies the name of a program object whose binary representation to retrieve.
            /// </para>
            /// </param>
            /// <param name="bufSize">
            /// <para>
            /// Specifies the size of the buffer whose address is given by binary.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// Specifies the address of a variable to receive the number of bytes written into binary.
            /// </para>
            /// </param>
            /// <param name="binaryFormat">
            /// <para>
            /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
            /// </para>
            /// </param>
            /// <param name="binary">
            /// <para>
            /// Specifies the address an array into which the GL will return program's binary representation.
            /// </para>
            /// </param>
            [Obsolete("Use out overload instead")]
            [AutoGenerated(Category = "OES_get_program_binary", Version = "", EntryPoint = "glGetProgramBinaryOES")]
            [CLSCompliant(false)]
            public static unsafe void GetProgramBinary<T4>(Int32 program, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] OpenTK.Graphics.ES30.All* binaryFormat, [InAttribute, OutAttribute] T4[,] binary)
                where T4 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: OES_get_program_binary]
            /// Return a binary representation of a program object's compiled and linked executable source
            /// </summary>
            /// <param name="program">
            /// <para>
            /// Specifies the name of a program object whose binary representation to retrieve.
            /// </para>
            /// </param>
            /// <param name="bufSize">
            /// <para>
            /// Specifies the size of the buffer whose address is given by binary.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// Specifies the address of a variable to receive the number of bytes written into binary.
            /// </para>
            /// </param>
            /// <param name="binaryFormat">
            /// <para>
            /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
            /// </para>
            /// </param>
            /// <param name="binary">
            /// <para>
            /// Specifies the address an array into which the GL will return program's binary representation.
            /// </para>
            /// </param>
            [Obsolete("Use out overload instead")]
            [AutoGenerated(Category = "OES_get_program_binary", Version = "", EntryPoint = "glGetProgramBinaryOES")]
            [CLSCompliant(false)]
            public static unsafe void GetProgramBinary<T4>(Int32 program, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] OpenTK.Graphics.ES30.All* binaryFormat, [InAttribute, OutAttribute] T4[,,] binary)
                where T4 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: OES_get_program_binary]
            /// Return a binary representation of a program object's compiled and linked executable source
            /// </summary>
            /// <param name="program">
            /// <para>
            /// Specifies the name of a program object whose binary representation to retrieve.
            /// </para>
            /// </param>
            /// <param name="bufSize">
            /// <para>
            /// Specifies the size of the buffer whose address is given by binary.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// Specifies the address of a variable to receive the number of bytes written into binary.
            /// </para>
            /// </param>
            /// <param name="binaryFormat">
            /// <para>
            /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
            /// </para>
            /// </param>
            /// <param name="binary">
            /// <para>
            /// Specifies the address an array into which the GL will return program's binary representation.
            /// </para>
            /// </param>
            [Obsolete("Use out overload instead")]
            [AutoGenerated(Category = "OES_get_program_binary", Version = "", EntryPoint = "glGetProgramBinaryOES")]
            [CLSCompliant(false)]
            public static unsafe void GetProgramBinary<T4>(Int32 program, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] OpenTK.Graphics.ES30.All* binaryFormat, [InAttribute, OutAttribute] ref T4 binary)
                where T4 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: OES_get_program_binary]
            /// Return a binary representation of a program object's compiled and linked executable source
            /// </summary>
            /// <param name="program">
            /// <para>
            /// Specifies the name of a program object whose binary representation to retrieve.
            /// </para>
            /// </param>
            /// <param name="bufSize">
            /// <para>
            /// Specifies the size of the buffer whose address is given by binary.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// Specifies the address of a variable to receive the number of bytes written into binary.
            /// </para>
            /// </param>
            /// <param name="binaryFormat">
            /// <para>
            /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
            /// </para>
            /// </param>
            /// <param name="binary">
            /// <para>
            /// Specifies the address an array into which the GL will return program's binary representation.
            /// </para>
            /// </param>
            [Obsolete("Use out overload instead")]
            [AutoGenerated(Category = "OES_get_program_binary", Version = "", EntryPoint = "glGetProgramBinaryOES")]
            [CLSCompliant(false)]
            public static void GetProgramBinary(UInt32 program, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute] OpenTK.Graphics.ES30.All[] binaryFormat, [OutAttribute] IntPtr binary) { throw new NotImplementedException(); }

            /// <summary>[requires: OES_get_program_binary]
            /// Return a binary representation of a program object's compiled and linked executable source
            /// </summary>
            /// <param name="program">
            /// <para>
            /// Specifies the name of a program object whose binary representation to retrieve.
            /// </para>
            /// </param>
            /// <param name="bufSize">
            /// <para>
            /// Specifies the size of the buffer whose address is given by binary.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// Specifies the address of a variable to receive the number of bytes written into binary.
            /// </para>
            /// </param>
            /// <param name="binaryFormat">
            /// <para>
            /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
            /// </para>
            /// </param>
            /// <param name="binary">
            /// <para>
            /// Specifies the address an array into which the GL will return program's binary representation.
            /// </para>
            /// </param>
            [Obsolete("Use out overload instead")]
            [AutoGenerated(Category = "OES_get_program_binary", Version = "", EntryPoint = "glGetProgramBinaryOES")]
            [CLSCompliant(false)]
            public static void GetProgramBinary<T4>(UInt32 program, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute] OpenTK.Graphics.ES30.All[] binaryFormat, [InAttribute, OutAttribute] T4[] binary)
                where T4 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: OES_get_program_binary]
            /// Return a binary representation of a program object's compiled and linked executable source
            /// </summary>
            /// <param name="program">
            /// <para>
            /// Specifies the name of a program object whose binary representation to retrieve.
            /// </para>
            /// </param>
            /// <param name="bufSize">
            /// <para>
            /// Specifies the size of the buffer whose address is given by binary.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// Specifies the address of a variable to receive the number of bytes written into binary.
            /// </para>
            /// </param>
            /// <param name="binaryFormat">
            /// <para>
            /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
            /// </para>
            /// </param>
            /// <param name="binary">
            /// <para>
            /// Specifies the address an array into which the GL will return program's binary representation.
            /// </para>
            /// </param>
            [Obsolete("Use out overload instead")]
            [AutoGenerated(Category = "OES_get_program_binary", Version = "", EntryPoint = "glGetProgramBinaryOES")]
            [CLSCompliant(false)]
            public static void GetProgramBinary<T4>(UInt32 program, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute] OpenTK.Graphics.ES30.All[] binaryFormat, [InAttribute, OutAttribute] T4[,] binary)
                where T4 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: OES_get_program_binary]
            /// Return a binary representation of a program object's compiled and linked executable source
            /// </summary>
            /// <param name="program">
            /// <para>
            /// Specifies the name of a program object whose binary representation to retrieve.
            /// </para>
            /// </param>
            /// <param name="bufSize">
            /// <para>
            /// Specifies the size of the buffer whose address is given by binary.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// Specifies the address of a variable to receive the number of bytes written into binary.
            /// </para>
            /// </param>
            /// <param name="binaryFormat">
            /// <para>
            /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
            /// </para>
            /// </param>
            /// <param name="binary">
            /// <para>
            /// Specifies the address an array into which the GL will return program's binary representation.
            /// </para>
            /// </param>
            [Obsolete("Use out overload instead")]
            [AutoGenerated(Category = "OES_get_program_binary", Version = "", EntryPoint = "glGetProgramBinaryOES")]
            [CLSCompliant(false)]
            public static void GetProgramBinary<T4>(UInt32 program, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute] OpenTK.Graphics.ES30.All[] binaryFormat, [InAttribute, OutAttribute] T4[,,] binary)
                where T4 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: OES_get_program_binary]
            /// Return a binary representation of a program object's compiled and linked executable source
            /// </summary>
            /// <param name="program">
            /// <para>
            /// Specifies the name of a program object whose binary representation to retrieve.
            /// </para>
            /// </param>
            /// <param name="bufSize">
            /// <para>
            /// Specifies the size of the buffer whose address is given by binary.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// Specifies the address of a variable to receive the number of bytes written into binary.
            /// </para>
            /// </param>
            /// <param name="binaryFormat">
            /// <para>
            /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
            /// </para>
            /// </param>
            /// <param name="binary">
            /// <para>
            /// Specifies the address an array into which the GL will return program's binary representation.
            /// </para>
            /// </param>
            [Obsolete("Use out overload instead")]
            [AutoGenerated(Category = "OES_get_program_binary", Version = "", EntryPoint = "glGetProgramBinaryOES")]
            [CLSCompliant(false)]
            public static void GetProgramBinary<T4>(UInt32 program, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute] OpenTK.Graphics.ES30.All[] binaryFormat, [InAttribute, OutAttribute] ref T4 binary)
                where T4 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: OES_get_program_binary]
            /// Return a binary representation of a program object's compiled and linked executable source
            /// </summary>
            /// <param name="program">
            /// <para>
            /// Specifies the name of a program object whose binary representation to retrieve.
            /// </para>
            /// </param>
            /// <param name="bufSize">
            /// <para>
            /// Specifies the size of the buffer whose address is given by binary.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// Specifies the address of a variable to receive the number of bytes written into binary.
            /// </para>
            /// </param>
            /// <param name="binaryFormat">
            /// <para>
            /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
            /// </para>
            /// </param>
            /// <param name="binary">
            /// <para>
            /// Specifies the address an array into which the GL will return program's binary representation.
            /// </para>
            /// </param>
            [Obsolete("Use out overload instead")]
            [AutoGenerated(Category = "OES_get_program_binary", Version = "", EntryPoint = "glGetProgramBinaryOES")]
            [CLSCompliant(false)]
            public static void GetProgramBinary(UInt32 program, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] out OpenTK.Graphics.ES30.All binaryFormat, [OutAttribute] IntPtr binary) { throw new NotImplementedException(); }

            /// <summary>[requires: OES_get_program_binary]
            /// Return a binary representation of a program object's compiled and linked executable source
            /// </summary>
            /// <param name="program">
            /// <para>
            /// Specifies the name of a program object whose binary representation to retrieve.
            /// </para>
            /// </param>
            /// <param name="bufSize">
            /// <para>
            /// Specifies the size of the buffer whose address is given by binary.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// Specifies the address of a variable to receive the number of bytes written into binary.
            /// </para>
            /// </param>
            /// <param name="binaryFormat">
            /// <para>
            /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
            /// </para>
            /// </param>
            /// <param name="binary">
            /// <para>
            /// Specifies the address an array into which the GL will return program's binary representation.
            /// </para>
            /// </param>
            [Obsolete("Use out overload instead")]
            [AutoGenerated(Category = "OES_get_program_binary", Version = "", EntryPoint = "glGetProgramBinaryOES")]
            [CLSCompliant(false)]
            public static void GetProgramBinary<T4>(UInt32 program, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] out OpenTK.Graphics.ES30.All binaryFormat, [InAttribute, OutAttribute] T4[] binary)
                where T4 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: OES_get_program_binary]
            /// Return a binary representation of a program object's compiled and linked executable source
            /// </summary>
            /// <param name="program">
            /// <para>
            /// Specifies the name of a program object whose binary representation to retrieve.
            /// </para>
            /// </param>
            /// <param name="bufSize">
            /// <para>
            /// Specifies the size of the buffer whose address is given by binary.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// Specifies the address of a variable to receive the number of bytes written into binary.
            /// </para>
            /// </param>
            /// <param name="binaryFormat">
            /// <para>
            /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
            /// </para>
            /// </param>
            /// <param name="binary">
            /// <para>
            /// Specifies the address an array into which the GL will return program's binary representation.
            /// </para>
            /// </param>
            [Obsolete("Use out overload instead")]
            [AutoGenerated(Category = "OES_get_program_binary", Version = "", EntryPoint = "glGetProgramBinaryOES")]
            [CLSCompliant(false)]
            public static void GetProgramBinary<T4>(UInt32 program, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] out OpenTK.Graphics.ES30.All binaryFormat, [InAttribute, OutAttribute] T4[,] binary)
                where T4 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: OES_get_program_binary]
            /// Return a binary representation of a program object's compiled and linked executable source
            /// </summary>
            /// <param name="program">
            /// <para>
            /// Specifies the name of a program object whose binary representation to retrieve.
            /// </para>
            /// </param>
            /// <param name="bufSize">
            /// <para>
            /// Specifies the size of the buffer whose address is given by binary.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// Specifies the address of a variable to receive the number of bytes written into binary.
            /// </para>
            /// </param>
            /// <param name="binaryFormat">
            /// <para>
            /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
            /// </para>
            /// </param>
            /// <param name="binary">
            /// <para>
            /// Specifies the address an array into which the GL will return program's binary representation.
            /// </para>
            /// </param>
            [Obsolete("Use out overload instead")]
            [AutoGenerated(Category = "OES_get_program_binary", Version = "", EntryPoint = "glGetProgramBinaryOES")]
            [CLSCompliant(false)]
            public static void GetProgramBinary<T4>(UInt32 program, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] out OpenTK.Graphics.ES30.All binaryFormat, [InAttribute, OutAttribute] T4[,,] binary)
                where T4 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: OES_get_program_binary]
            /// Return a binary representation of a program object's compiled and linked executable source
            /// </summary>
            /// <param name="program">
            /// <para>
            /// Specifies the name of a program object whose binary representation to retrieve.
            /// </para>
            /// </param>
            /// <param name="bufSize">
            /// <para>
            /// Specifies the size of the buffer whose address is given by binary.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// Specifies the address of a variable to receive the number of bytes written into binary.
            /// </para>
            /// </param>
            /// <param name="binaryFormat">
            /// <para>
            /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
            /// </para>
            /// </param>
            /// <param name="binary">
            /// <para>
            /// Specifies the address an array into which the GL will return program's binary representation.
            /// </para>
            /// </param>
            [Obsolete("Use out overload instead")]
            [AutoGenerated(Category = "OES_get_program_binary", Version = "", EntryPoint = "glGetProgramBinaryOES")]
            [CLSCompliant(false)]
            public static void GetProgramBinary<T4>(UInt32 program, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] out OpenTK.Graphics.ES30.All binaryFormat, [InAttribute, OutAttribute] ref T4 binary)
                where T4 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: OES_get_program_binary]
            /// Return a binary representation of a program object's compiled and linked executable source
            /// </summary>
            /// <param name="program">
            /// <para>
            /// Specifies the name of a program object whose binary representation to retrieve.
            /// </para>
            /// </param>
            /// <param name="bufSize">
            /// <para>
            /// Specifies the size of the buffer whose address is given by binary.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// Specifies the address of a variable to receive the number of bytes written into binary.
            /// </para>
            /// </param>
            /// <param name="binaryFormat">
            /// <para>
            /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
            /// </para>
            /// </param>
            /// <param name="binary">
            /// <para>
            /// Specifies the address an array into which the GL will return program's binary representation.
            /// </para>
            /// </param>
            [Obsolete("Use out overload instead")]
            [AutoGenerated(Category = "OES_get_program_binary", Version = "", EntryPoint = "glGetProgramBinaryOES")]
            [CLSCompliant(false)]
            public static unsafe void GetProgramBinary(UInt32 program, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] OpenTK.Graphics.ES30.All* binaryFormat, [OutAttribute] IntPtr binary) { throw new NotImplementedException(); }

            /// <summary>[requires: OES_get_program_binary]
            /// Return a binary representation of a program object's compiled and linked executable source
            /// </summary>
            /// <param name="program">
            /// <para>
            /// Specifies the name of a program object whose binary representation to retrieve.
            /// </para>
            /// </param>
            /// <param name="bufSize">
            /// <para>
            /// Specifies the size of the buffer whose address is given by binary.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// Specifies the address of a variable to receive the number of bytes written into binary.
            /// </para>
            /// </param>
            /// <param name="binaryFormat">
            /// <para>
            /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
            /// </para>
            /// </param>
            /// <param name="binary">
            /// <para>
            /// Specifies the address an array into which the GL will return program's binary representation.
            /// </para>
            /// </param>
            [Obsolete("Use out overload instead")]
            [AutoGenerated(Category = "OES_get_program_binary", Version = "", EntryPoint = "glGetProgramBinaryOES")]
            [CLSCompliant(false)]
            public static unsafe void GetProgramBinary<T4>(UInt32 program, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] OpenTK.Graphics.ES30.All* binaryFormat, [InAttribute, OutAttribute] T4[] binary)
                where T4 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: OES_get_program_binary]
            /// Return a binary representation of a program object's compiled and linked executable source
            /// </summary>
            /// <param name="program">
            /// <para>
            /// Specifies the name of a program object whose binary representation to retrieve.
            /// </para>
            /// </param>
            /// <param name="bufSize">
            /// <para>
            /// Specifies the size of the buffer whose address is given by binary.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// Specifies the address of a variable to receive the number of bytes written into binary.
            /// </para>
            /// </param>
            /// <param name="binaryFormat">
            /// <para>
            /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
            /// </para>
            /// </param>
            /// <param name="binary">
            /// <para>
            /// Specifies the address an array into which the GL will return program's binary representation.
            /// </para>
            /// </param>
            [Obsolete("Use out overload instead")]
            [AutoGenerated(Category = "OES_get_program_binary", Version = "", EntryPoint = "glGetProgramBinaryOES")]
            [CLSCompliant(false)]
            public static unsafe void GetProgramBinary<T4>(UInt32 program, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] OpenTK.Graphics.ES30.All* binaryFormat, [InAttribute, OutAttribute] T4[,] binary)
                where T4 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: OES_get_program_binary]
            /// Return a binary representation of a program object's compiled and linked executable source
            /// </summary>
            /// <param name="program">
            /// <para>
            /// Specifies the name of a program object whose binary representation to retrieve.
            /// </para>
            /// </param>
            /// <param name="bufSize">
            /// <para>
            /// Specifies the size of the buffer whose address is given by binary.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// Specifies the address of a variable to receive the number of bytes written into binary.
            /// </para>
            /// </param>
            /// <param name="binaryFormat">
            /// <para>
            /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
            /// </para>
            /// </param>
            /// <param name="binary">
            /// <para>
            /// Specifies the address an array into which the GL will return program's binary representation.
            /// </para>
            /// </param>
            [Obsolete("Use out overload instead")]
            [AutoGenerated(Category = "OES_get_program_binary", Version = "", EntryPoint = "glGetProgramBinaryOES")]
            [CLSCompliant(false)]
            public static unsafe void GetProgramBinary<T4>(UInt32 program, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] OpenTK.Graphics.ES30.All* binaryFormat, [InAttribute, OutAttribute] T4[,,] binary)
                where T4 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: OES_get_program_binary]
            /// Return a binary representation of a program object's compiled and linked executable source
            /// </summary>
            /// <param name="program">
            /// <para>
            /// Specifies the name of a program object whose binary representation to retrieve.
            /// </para>
            /// </param>
            /// <param name="bufSize">
            /// <para>
            /// Specifies the size of the buffer whose address is given by binary.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// Specifies the address of a variable to receive the number of bytes written into binary.
            /// </para>
            /// </param>
            /// <param name="binaryFormat">
            /// <para>
            /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
            /// </para>
            /// </param>
            /// <param name="binary">
            /// <para>
            /// Specifies the address an array into which the GL will return program's binary representation.
            /// </para>
            /// </param>
            [Obsolete("Use out overload instead")]
            [AutoGenerated(Category = "OES_get_program_binary", Version = "", EntryPoint = "glGetProgramBinaryOES")]
            [CLSCompliant(false)]
            public static unsafe void GetProgramBinary<T4>(UInt32 program, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] OpenTK.Graphics.ES30.All* binaryFormat, [InAttribute, OutAttribute] ref T4 binary)
                where T4 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: OES_vertex_array_object]
            /// Determine if a name corresponds to a vertex array object
            /// </summary>
            /// <param name="array">
            /// <para>
            /// Specifies a value that may be the name of a vertex array object.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "OES_vertex_array_object", Version = "", EntryPoint = "glIsVertexArrayOES")]
            [CLSCompliant(false)]
            public static bool IsVertexArray(Int32 array) { throw new NotImplementedException(); }

            /// <summary>[requires: OES_vertex_array_object]
            /// Determine if a name corresponds to a vertex array object
            /// </summary>
            /// <param name="array">
            /// <para>
            /// Specifies a value that may be the name of a vertex array object.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "OES_vertex_array_object", Version = "", EntryPoint = "glIsVertexArrayOES")]
            [CLSCompliant(false)]
            public static bool IsVertexArray(UInt32 array) { throw new NotImplementedException(); }

            /// <summary>[requires: OES_mapbuffer]
            /// Map a buffer object's data store
            /// </summary>
            /// <param name="target">
            /// <para>
            /// Specifies the target buffer object being mapped. The symbolic constant must be GL_ARRAY_BUFFER, GL_ATOMIC_COUNTER_BUFFER, GL_COPY_READ_BUFFER, GL_COPY_WRITE_BUFFER, GL_DRAW_INDIRECT_BUFFER, GL_DISPATCH_INDIRECT_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, GL_PIXEL_UNPACK_BUFFER, GL_QUERY_BUFFER, GL_SHADER_STORAGE_BUFFER, GL_TEXTURE_BUFFER, GL_TRANSFORM_FEEDBACK_BUFFER or GL_UNIFORM_BUFFER.
            /// </para>
            /// </param>
            /// <param name="access">
            /// <para>
            /// For glMapBuffer only, specifies the access policy, indicating whether it will be possible to read from, write to, or both read from and write to the buffer object's mapped data store. The symbolic constant must be GL_READ_ONLY, GL_WRITE_ONLY, or GL_READ_WRITE.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "OES_mapbuffer", Version = "", EntryPoint = "glMapBufferOES")]
            public static IntPtr MapBuffer(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All access) { throw new NotImplementedException(); }

            /// <summary>[requires: OES_get_program_binary]
            /// Load a program object with a program binary
            /// </summary>
            /// <param name="program">
            /// <para>
            /// Specifies the name of a program object into which to load a program binary.
            /// </para>
            /// </param>
            /// <param name="binaryFormat">
            /// <para>
            /// Specifies the format of the binary data in binary.
            /// </para>
            /// </param>
            /// <param name="binary">
            /// <para>
            /// Specifies the address an array containing the binary to be loaded into program.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// Specifies the number of bytes contained in binary.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "OES_get_program_binary", Version = "", EntryPoint = "glProgramBinaryOES")]
            [CLSCompliant(false)]
            public static void ProgramBinary(Int32 program, OpenTK.Graphics.ES30.All binaryFormat, IntPtr binary, Int32 length) { throw new NotImplementedException(); }

            /// <summary>[requires: OES_get_program_binary]
            /// Load a program object with a program binary
            /// </summary>
            /// <param name="program">
            /// <para>
            /// Specifies the name of a program object into which to load a program binary.
            /// </para>
            /// </param>
            /// <param name="binaryFormat">
            /// <para>
            /// Specifies the format of the binary data in binary.
            /// </para>
            /// </param>
            /// <param name="binary">
            /// <para>
            /// Specifies the address an array containing the binary to be loaded into program.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// Specifies the number of bytes contained in binary.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "OES_get_program_binary", Version = "", EntryPoint = "glProgramBinaryOES")]
            [CLSCompliant(false)]
            public static void ProgramBinary<T2>(Int32 program, OpenTK.Graphics.ES30.All binaryFormat, [InAttribute, OutAttribute] T2[] binary, Int32 length)
                where T2 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: OES_get_program_binary]
            /// Load a program object with a program binary
            /// </summary>
            /// <param name="program">
            /// <para>
            /// Specifies the name of a program object into which to load a program binary.
            /// </para>
            /// </param>
            /// <param name="binaryFormat">
            /// <para>
            /// Specifies the format of the binary data in binary.
            /// </para>
            /// </param>
            /// <param name="binary">
            /// <para>
            /// Specifies the address an array containing the binary to be loaded into program.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// Specifies the number of bytes contained in binary.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "OES_get_program_binary", Version = "", EntryPoint = "glProgramBinaryOES")]
            [CLSCompliant(false)]
            public static void ProgramBinary<T2>(Int32 program, OpenTK.Graphics.ES30.All binaryFormat, [InAttribute, OutAttribute] T2[,] binary, Int32 length)
                where T2 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: OES_get_program_binary]
            /// Load a program object with a program binary
            /// </summary>
            /// <param name="program">
            /// <para>
            /// Specifies the name of a program object into which to load a program binary.
            /// </para>
            /// </param>
            /// <param name="binaryFormat">
            /// <para>
            /// Specifies the format of the binary data in binary.
            /// </para>
            /// </param>
            /// <param name="binary">
            /// <para>
            /// Specifies the address an array containing the binary to be loaded into program.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// Specifies the number of bytes contained in binary.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "OES_get_program_binary", Version = "", EntryPoint = "glProgramBinaryOES")]
            [CLSCompliant(false)]
            public static void ProgramBinary<T2>(Int32 program, OpenTK.Graphics.ES30.All binaryFormat, [InAttribute, OutAttribute] T2[,,] binary, Int32 length)
                where T2 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: OES_get_program_binary]
            /// Load a program object with a program binary
            /// </summary>
            /// <param name="program">
            /// <para>
            /// Specifies the name of a program object into which to load a program binary.
            /// </para>
            /// </param>
            /// <param name="binaryFormat">
            /// <para>
            /// Specifies the format of the binary data in binary.
            /// </para>
            /// </param>
            /// <param name="binary">
            /// <para>
            /// Specifies the address an array containing the binary to be loaded into program.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// Specifies the number of bytes contained in binary.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "OES_get_program_binary", Version = "", EntryPoint = "glProgramBinaryOES")]
            [CLSCompliant(false)]
            public static void ProgramBinary<T2>(Int32 program, OpenTK.Graphics.ES30.All binaryFormat, [InAttribute, OutAttribute] ref T2 binary, Int32 length)
                where T2 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: OES_get_program_binary]
            /// Load a program object with a program binary
            /// </summary>
            /// <param name="program">
            /// <para>
            /// Specifies the name of a program object into which to load a program binary.
            /// </para>
            /// </param>
            /// <param name="binaryFormat">
            /// <para>
            /// Specifies the format of the binary data in binary.
            /// </para>
            /// </param>
            /// <param name="binary">
            /// <para>
            /// Specifies the address an array containing the binary to be loaded into program.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// Specifies the number of bytes contained in binary.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "OES_get_program_binary", Version = "", EntryPoint = "glProgramBinaryOES")]
            [CLSCompliant(false)]
            public static void ProgramBinary(UInt32 program, OpenTK.Graphics.ES30.All binaryFormat, IntPtr binary, Int32 length) { throw new NotImplementedException(); }

            /// <summary>[requires: OES_get_program_binary]
            /// Load a program object with a program binary
            /// </summary>
            /// <param name="program">
            /// <para>
            /// Specifies the name of a program object into which to load a program binary.
            /// </para>
            /// </param>
            /// <param name="binaryFormat">
            /// <para>
            /// Specifies the format of the binary data in binary.
            /// </para>
            /// </param>
            /// <param name="binary">
            /// <para>
            /// Specifies the address an array containing the binary to be loaded into program.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// Specifies the number of bytes contained in binary.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "OES_get_program_binary", Version = "", EntryPoint = "glProgramBinaryOES")]
            [CLSCompliant(false)]
            public static void ProgramBinary<T2>(UInt32 program, OpenTK.Graphics.ES30.All binaryFormat, [InAttribute, OutAttribute] T2[] binary, Int32 length)
                where T2 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: OES_get_program_binary]
            /// Load a program object with a program binary
            /// </summary>
            /// <param name="program">
            /// <para>
            /// Specifies the name of a program object into which to load a program binary.
            /// </para>
            /// </param>
            /// <param name="binaryFormat">
            /// <para>
            /// Specifies the format of the binary data in binary.
            /// </para>
            /// </param>
            /// <param name="binary">
            /// <para>
            /// Specifies the address an array containing the binary to be loaded into program.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// Specifies the number of bytes contained in binary.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "OES_get_program_binary", Version = "", EntryPoint = "glProgramBinaryOES")]
            [CLSCompliant(false)]
            public static void ProgramBinary<T2>(UInt32 program, OpenTK.Graphics.ES30.All binaryFormat, [InAttribute, OutAttribute] T2[,] binary, Int32 length)
                where T2 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: OES_get_program_binary]
            /// Load a program object with a program binary
            /// </summary>
            /// <param name="program">
            /// <para>
            /// Specifies the name of a program object into which to load a program binary.
            /// </para>
            /// </param>
            /// <param name="binaryFormat">
            /// <para>
            /// Specifies the format of the binary data in binary.
            /// </para>
            /// </param>
            /// <param name="binary">
            /// <para>
            /// Specifies the address an array containing the binary to be loaded into program.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// Specifies the number of bytes contained in binary.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "OES_get_program_binary", Version = "", EntryPoint = "glProgramBinaryOES")]
            [CLSCompliant(false)]
            public static void ProgramBinary<T2>(UInt32 program, OpenTK.Graphics.ES30.All binaryFormat, [InAttribute, OutAttribute] T2[,,] binary, Int32 length)
                where T2 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: OES_get_program_binary]
            /// Load a program object with a program binary
            /// </summary>
            /// <param name="program">
            /// <para>
            /// Specifies the name of a program object into which to load a program binary.
            /// </para>
            /// </param>
            /// <param name="binaryFormat">
            /// <para>
            /// Specifies the format of the binary data in binary.
            /// </para>
            /// </param>
            /// <param name="binary">
            /// <para>
            /// Specifies the address an array containing the binary to be loaded into program.
            /// </para>
            /// </param>
            /// <param name="length">
            /// <para>
            /// Specifies the number of bytes contained in binary.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "OES_get_program_binary", Version = "", EntryPoint = "glProgramBinaryOES")]
            [CLSCompliant(false)]
            public static void ProgramBinary<T2>(UInt32 program, OpenTK.Graphics.ES30.All binaryFormat, [InAttribute, OutAttribute] ref T2 binary, Int32 length)
                where T2 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: OES_texture_3D]
            /// Specify a three-dimensional texture image
            /// </summary>
            /// <param name="target">
            /// <para>
            /// Specifies the target texture. Must be one of GL_TEXTURE_3D, GL_PROXY_TEXTURE_3D, GL_TEXTURE_2D_ARRAY or GL_PROXY_TEXTURE_2D_ARRAY.
            /// </para>
            /// </param>
            /// <param name="level">
            /// <para>
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level is the n sup th mipmap reduction image.
            /// </para>
            /// </param>
            /// <param name="internalFormat">
            /// <para>
            /// Specifies the number of color components in the texture. Must be one of base internal formats given in Table 1, one of the sized internal formats given in Table 2, or one of the compressed internal formats given in Table 3, below.
            /// </para>
            /// </param>
            /// <param name="width">
            /// <para>
            /// Specifies the width of the texture image. All implementations support 3D texture images that are at least 16 texels wide.
            /// </para>
            /// </param>
            /// <param name="height">
            /// <para>
            /// Specifies the height of the texture image. All implementations support 3D texture images that are at least 256 texels high.
            /// </para>
            /// </param>
            /// <param name="depth">
            /// <para>
            /// Specifies the depth of the texture image, or the number of layers in a texture array. All implementations support 3D texture images that are at least 256 texels deep, and texture arrays that are at least 256 layers deep.
            /// </para>
            /// </param>
            /// <param name="border">
            /// <para>
            /// This value must be 0.
            /// </para>
            /// </param>
            /// <param name="format">
            /// <para>
            /// Specifies the format of the pixel data. The following symbolic values are accepted: GL_RED, GL_RG, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_RED_INTEGER, GL_RG_INTEGER, GL_RGB_INTEGER, GL_BGR_INTEGER, GL_RGBA_INTEGER, GL_BGRA_INTEGER, GL_STENCIL_INDEX, GL_DEPTH_COMPONENT, GL_DEPTH_STENCIL.
            /// </para>
            /// </param>
            /// <param name="type">
            /// <para>
            /// Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
            /// </para>
            /// </param>
            /// <param name="data">
            /// <para>
            /// Specifies a pointer to the image data in memory.
            /// </para>
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_texture_3D", Version = "", EntryPoint = "glTexImage3DOES")]
            public static void TexImage3D(OpenTK.Graphics.ES30.All target, Int32 level, OpenTK.Graphics.ES30.All internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, OpenTK.Graphics.ES30.All format, OpenTK.Graphics.ES30.All type, IntPtr pixels) { throw new NotImplementedException(); }

            /// <summary>[requires: OES_texture_3D]
            /// Specify a three-dimensional texture image
            /// </summary>
            /// <param name="target">
            /// <para>
            /// Specifies the target texture. Must be one of GL_TEXTURE_3D, GL_PROXY_TEXTURE_3D, GL_TEXTURE_2D_ARRAY or GL_PROXY_TEXTURE_2D_ARRAY.
            /// </para>
            /// </param>
            /// <param name="level">
            /// <para>
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level is the n sup th mipmap reduction image.
            /// </para>
            /// </param>
            /// <param name="internalFormat">
            /// <para>
            /// Specifies the number of color components in the texture. Must be one of base internal formats given in Table 1, one of the sized internal formats given in Table 2, or one of the compressed internal formats given in Table 3, below.
            /// </para>
            /// </param>
            /// <param name="width">
            /// <para>
            /// Specifies the width of the texture image. All implementations support 3D texture images that are at least 16 texels wide.
            /// </para>
            /// </param>
            /// <param name="height">
            /// <para>
            /// Specifies the height of the texture image. All implementations support 3D texture images that are at least 256 texels high.
            /// </para>
            /// </param>
            /// <param name="depth">
            /// <para>
            /// Specifies the depth of the texture image, or the number of layers in a texture array. All implementations support 3D texture images that are at least 256 texels deep, and texture arrays that are at least 256 layers deep.
            /// </para>
            /// </param>
            /// <param name="border">
            /// <para>
            /// This value must be 0.
            /// </para>
            /// </param>
            /// <param name="format">
            /// <para>
            /// Specifies the format of the pixel data. The following symbolic values are accepted: GL_RED, GL_RG, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_RED_INTEGER, GL_RG_INTEGER, GL_RGB_INTEGER, GL_BGR_INTEGER, GL_RGBA_INTEGER, GL_BGRA_INTEGER, GL_STENCIL_INDEX, GL_DEPTH_COMPONENT, GL_DEPTH_STENCIL.
            /// </para>
            /// </param>
            /// <param name="type">
            /// <para>
            /// Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
            /// </para>
            /// </param>
            /// <param name="data">
            /// <para>
            /// Specifies a pointer to the image data in memory.
            /// </para>
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_texture_3D", Version = "", EntryPoint = "glTexImage3DOES")]
            [CLSCompliant(false)]
            public static void TexImage3D<T9>(OpenTK.Graphics.ES30.All target, Int32 level, OpenTK.Graphics.ES30.All internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, OpenTK.Graphics.ES30.All format, OpenTK.Graphics.ES30.All type, [InAttribute, OutAttribute] T9[] pixels)
                where T9 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: OES_texture_3D]
            /// Specify a three-dimensional texture image
            /// </summary>
            /// <param name="target">
            /// <para>
            /// Specifies the target texture. Must be one of GL_TEXTURE_3D, GL_PROXY_TEXTURE_3D, GL_TEXTURE_2D_ARRAY or GL_PROXY_TEXTURE_2D_ARRAY.
            /// </para>
            /// </param>
            /// <param name="level">
            /// <para>
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level is the n sup th mipmap reduction image.
            /// </para>
            /// </param>
            /// <param name="internalFormat">
            /// <para>
            /// Specifies the number of color components in the texture. Must be one of base internal formats given in Table 1, one of the sized internal formats given in Table 2, or one of the compressed internal formats given in Table 3, below.
            /// </para>
            /// </param>
            /// <param name="width">
            /// <para>
            /// Specifies the width of the texture image. All implementations support 3D texture images that are at least 16 texels wide.
            /// </para>
            /// </param>
            /// <param name="height">
            /// <para>
            /// Specifies the height of the texture image. All implementations support 3D texture images that are at least 256 texels high.
            /// </para>
            /// </param>
            /// <param name="depth">
            /// <para>
            /// Specifies the depth of the texture image, or the number of layers in a texture array. All implementations support 3D texture images that are at least 256 texels deep, and texture arrays that are at least 256 layers deep.
            /// </para>
            /// </param>
            /// <param name="border">
            /// <para>
            /// This value must be 0.
            /// </para>
            /// </param>
            /// <param name="format">
            /// <para>
            /// Specifies the format of the pixel data. The following symbolic values are accepted: GL_RED, GL_RG, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_RED_INTEGER, GL_RG_INTEGER, GL_RGB_INTEGER, GL_BGR_INTEGER, GL_RGBA_INTEGER, GL_BGRA_INTEGER, GL_STENCIL_INDEX, GL_DEPTH_COMPONENT, GL_DEPTH_STENCIL.
            /// </para>
            /// </param>
            /// <param name="type">
            /// <para>
            /// Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
            /// </para>
            /// </param>
            /// <param name="data">
            /// <para>
            /// Specifies a pointer to the image data in memory.
            /// </para>
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_texture_3D", Version = "", EntryPoint = "glTexImage3DOES")]
            [CLSCompliant(false)]
            public static void TexImage3D<T9>(OpenTK.Graphics.ES30.All target, Int32 level, OpenTK.Graphics.ES30.All internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, OpenTK.Graphics.ES30.All format, OpenTK.Graphics.ES30.All type, [InAttribute, OutAttribute] T9[,] pixels)
                where T9 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: OES_texture_3D]
            /// Specify a three-dimensional texture image
            /// </summary>
            /// <param name="target">
            /// <para>
            /// Specifies the target texture. Must be one of GL_TEXTURE_3D, GL_PROXY_TEXTURE_3D, GL_TEXTURE_2D_ARRAY or GL_PROXY_TEXTURE_2D_ARRAY.
            /// </para>
            /// </param>
            /// <param name="level">
            /// <para>
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level is the n sup th mipmap reduction image.
            /// </para>
            /// </param>
            /// <param name="internalFormat">
            /// <para>
            /// Specifies the number of color components in the texture. Must be one of base internal formats given in Table 1, one of the sized internal formats given in Table 2, or one of the compressed internal formats given in Table 3, below.
            /// </para>
            /// </param>
            /// <param name="width">
            /// <para>
            /// Specifies the width of the texture image. All implementations support 3D texture images that are at least 16 texels wide.
            /// </para>
            /// </param>
            /// <param name="height">
            /// <para>
            /// Specifies the height of the texture image. All implementations support 3D texture images that are at least 256 texels high.
            /// </para>
            /// </param>
            /// <param name="depth">
            /// <para>
            /// Specifies the depth of the texture image, or the number of layers in a texture array. All implementations support 3D texture images that are at least 256 texels deep, and texture arrays that are at least 256 layers deep.
            /// </para>
            /// </param>
            /// <param name="border">
            /// <para>
            /// This value must be 0.
            /// </para>
            /// </param>
            /// <param name="format">
            /// <para>
            /// Specifies the format of the pixel data. The following symbolic values are accepted: GL_RED, GL_RG, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_RED_INTEGER, GL_RG_INTEGER, GL_RGB_INTEGER, GL_BGR_INTEGER, GL_RGBA_INTEGER, GL_BGRA_INTEGER, GL_STENCIL_INDEX, GL_DEPTH_COMPONENT, GL_DEPTH_STENCIL.
            /// </para>
            /// </param>
            /// <param name="type">
            /// <para>
            /// Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
            /// </para>
            /// </param>
            /// <param name="data">
            /// <para>
            /// Specifies a pointer to the image data in memory.
            /// </para>
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_texture_3D", Version = "", EntryPoint = "glTexImage3DOES")]
            [CLSCompliant(false)]
            public static void TexImage3D<T9>(OpenTK.Graphics.ES30.All target, Int32 level, OpenTK.Graphics.ES30.All internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, OpenTK.Graphics.ES30.All format, OpenTK.Graphics.ES30.All type, [InAttribute, OutAttribute] T9[,,] pixels)
                where T9 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: OES_texture_3D]
            /// Specify a three-dimensional texture image
            /// </summary>
            /// <param name="target">
            /// <para>
            /// Specifies the target texture. Must be one of GL_TEXTURE_3D, GL_PROXY_TEXTURE_3D, GL_TEXTURE_2D_ARRAY or GL_PROXY_TEXTURE_2D_ARRAY.
            /// </para>
            /// </param>
            /// <param name="level">
            /// <para>
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level is the n sup th mipmap reduction image.
            /// </para>
            /// </param>
            /// <param name="internalFormat">
            /// <para>
            /// Specifies the number of color components in the texture. Must be one of base internal formats given in Table 1, one of the sized internal formats given in Table 2, or one of the compressed internal formats given in Table 3, below.
            /// </para>
            /// </param>
            /// <param name="width">
            /// <para>
            /// Specifies the width of the texture image. All implementations support 3D texture images that are at least 16 texels wide.
            /// </para>
            /// </param>
            /// <param name="height">
            /// <para>
            /// Specifies the height of the texture image. All implementations support 3D texture images that are at least 256 texels high.
            /// </para>
            /// </param>
            /// <param name="depth">
            /// <para>
            /// Specifies the depth of the texture image, or the number of layers in a texture array. All implementations support 3D texture images that are at least 256 texels deep, and texture arrays that are at least 256 layers deep.
            /// </para>
            /// </param>
            /// <param name="border">
            /// <para>
            /// This value must be 0.
            /// </para>
            /// </param>
            /// <param name="format">
            /// <para>
            /// Specifies the format of the pixel data. The following symbolic values are accepted: GL_RED, GL_RG, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_RED_INTEGER, GL_RG_INTEGER, GL_RGB_INTEGER, GL_BGR_INTEGER, GL_RGBA_INTEGER, GL_BGRA_INTEGER, GL_STENCIL_INDEX, GL_DEPTH_COMPONENT, GL_DEPTH_STENCIL.
            /// </para>
            /// </param>
            /// <param name="type">
            /// <para>
            /// Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
            /// </para>
            /// </param>
            /// <param name="data">
            /// <para>
            /// Specifies a pointer to the image data in memory.
            /// </para>
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_texture_3D", Version = "", EntryPoint = "glTexImage3DOES")]
            public static void TexImage3D<T9>(OpenTK.Graphics.ES30.All target, Int32 level, OpenTK.Graphics.ES30.All internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, OpenTK.Graphics.ES30.All format, OpenTK.Graphics.ES30.All type, [InAttribute, OutAttribute] ref T9 pixels)
                where T9 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: OES_texture_3D]
            /// Specify a three-dimensional texture image
            /// </summary>
            /// <param name="target">
            /// <para>
            /// Specifies the target texture. Must be one of GL_TEXTURE_3D, GL_PROXY_TEXTURE_3D, GL_TEXTURE_2D_ARRAY or GL_PROXY_TEXTURE_2D_ARRAY.
            /// </para>
            /// </param>
            /// <param name="level">
            /// <para>
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level is the n sup th mipmap reduction image.
            /// </para>
            /// </param>
            /// <param name="internalFormat">
            /// <para>
            /// Specifies the number of color components in the texture. Must be one of base internal formats given in Table 1, one of the sized internal formats given in Table 2, or one of the compressed internal formats given in Table 3, below.
            /// </para>
            /// </param>
            /// <param name="width">
            /// <para>
            /// Specifies the width of the texture image. All implementations support 3D texture images that are at least 16 texels wide.
            /// </para>
            /// </param>
            /// <param name="height">
            /// <para>
            /// Specifies the height of the texture image. All implementations support 3D texture images that are at least 256 texels high.
            /// </para>
            /// </param>
            /// <param name="depth">
            /// <para>
            /// Specifies the depth of the texture image, or the number of layers in a texture array. All implementations support 3D texture images that are at least 256 texels deep, and texture arrays that are at least 256 layers deep.
            /// </para>
            /// </param>
            /// <param name="border">
            /// <para>
            /// This value must be 0.
            /// </para>
            /// </param>
            /// <param name="format">
            /// <para>
            /// Specifies the format of the pixel data. The following symbolic values are accepted: GL_RED, GL_RG, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_RED_INTEGER, GL_RG_INTEGER, GL_RGB_INTEGER, GL_BGR_INTEGER, GL_RGBA_INTEGER, GL_BGRA_INTEGER, GL_STENCIL_INDEX, GL_DEPTH_COMPONENT, GL_DEPTH_STENCIL.
            /// </para>
            /// </param>
            /// <param name="type">
            /// <para>
            /// Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
            /// </para>
            /// </param>
            /// <param name="data">
            /// <para>
            /// Specifies a pointer to the image data in memory.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "OES_texture_3D", Version = "", EntryPoint = "glTexImage3DOES")]
            public static void TexImage3D(OpenTK.Graphics.ES30.TextureTarget3d target, Int32 level, OpenTK.Graphics.ES30.TextureComponentCount internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, OpenTK.Graphics.ES30.PixelFormat format, OpenTK.Graphics.ES30.PixelType type, IntPtr pixels) { throw new NotImplementedException(); }

            /// <summary>[requires: OES_texture_3D]
            /// Specify a three-dimensional texture image
            /// </summary>
            /// <param name="target">
            /// <para>
            /// Specifies the target texture. Must be one of GL_TEXTURE_3D, GL_PROXY_TEXTURE_3D, GL_TEXTURE_2D_ARRAY or GL_PROXY_TEXTURE_2D_ARRAY.
            /// </para>
            /// </param>
            /// <param name="level">
            /// <para>
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level is the n sup th mipmap reduction image.
            /// </para>
            /// </param>
            /// <param name="internalFormat">
            /// <para>
            /// Specifies the number of color components in the texture. Must be one of base internal formats given in Table 1, one of the sized internal formats given in Table 2, or one of the compressed internal formats given in Table 3, below.
            /// </para>
            /// </param>
            /// <param name="width">
            /// <para>
            /// Specifies the width of the texture image. All implementations support 3D texture images that are at least 16 texels wide.
            /// </para>
            /// </param>
            /// <param name="height">
            /// <para>
            /// Specifies the height of the texture image. All implementations support 3D texture images that are at least 256 texels high.
            /// </para>
            /// </param>
            /// <param name="depth">
            /// <para>
            /// Specifies the depth of the texture image, or the number of layers in a texture array. All implementations support 3D texture images that are at least 256 texels deep, and texture arrays that are at least 256 layers deep.
            /// </para>
            /// </param>
            /// <param name="border">
            /// <para>
            /// This value must be 0.
            /// </para>
            /// </param>
            /// <param name="format">
            /// <para>
            /// Specifies the format of the pixel data. The following symbolic values are accepted: GL_RED, GL_RG, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_RED_INTEGER, GL_RG_INTEGER, GL_RGB_INTEGER, GL_BGR_INTEGER, GL_RGBA_INTEGER, GL_BGRA_INTEGER, GL_STENCIL_INDEX, GL_DEPTH_COMPONENT, GL_DEPTH_STENCIL.
            /// </para>
            /// </param>
            /// <param name="type">
            /// <para>
            /// Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
            /// </para>
            /// </param>
            /// <param name="data">
            /// <para>
            /// Specifies a pointer to the image data in memory.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "OES_texture_3D", Version = "", EntryPoint = "glTexImage3DOES")]
            [CLSCompliant(false)]
            public static void TexImage3D<T9>(OpenTK.Graphics.ES30.TextureTarget3d target, Int32 level, OpenTK.Graphics.ES30.TextureComponentCount internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, OpenTK.Graphics.ES30.PixelFormat format, OpenTK.Graphics.ES30.PixelType type, [InAttribute, OutAttribute] T9[] pixels)
                where T9 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: OES_texture_3D]
            /// Specify a three-dimensional texture image
            /// </summary>
            /// <param name="target">
            /// <para>
            /// Specifies the target texture. Must be one of GL_TEXTURE_3D, GL_PROXY_TEXTURE_3D, GL_TEXTURE_2D_ARRAY or GL_PROXY_TEXTURE_2D_ARRAY.
            /// </para>
            /// </param>
            /// <param name="level">
            /// <para>
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level is the n sup th mipmap reduction image.
            /// </para>
            /// </param>
            /// <param name="internalFormat">
            /// <para>
            /// Specifies the number of color components in the texture. Must be one of base internal formats given in Table 1, one of the sized internal formats given in Table 2, or one of the compressed internal formats given in Table 3, below.
            /// </para>
            /// </param>
            /// <param name="width">
            /// <para>
            /// Specifies the width of the texture image. All implementations support 3D texture images that are at least 16 texels wide.
            /// </para>
            /// </param>
            /// <param name="height">
            /// <para>
            /// Specifies the height of the texture image. All implementations support 3D texture images that are at least 256 texels high.
            /// </para>
            /// </param>
            /// <param name="depth">
            /// <para>
            /// Specifies the depth of the texture image, or the number of layers in a texture array. All implementations support 3D texture images that are at least 256 texels deep, and texture arrays that are at least 256 layers deep.
            /// </para>
            /// </param>
            /// <param name="border">
            /// <para>
            /// This value must be 0.
            /// </para>
            /// </param>
            /// <param name="format">
            /// <para>
            /// Specifies the format of the pixel data. The following symbolic values are accepted: GL_RED, GL_RG, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_RED_INTEGER, GL_RG_INTEGER, GL_RGB_INTEGER, GL_BGR_INTEGER, GL_RGBA_INTEGER, GL_BGRA_INTEGER, GL_STENCIL_INDEX, GL_DEPTH_COMPONENT, GL_DEPTH_STENCIL.
            /// </para>
            /// </param>
            /// <param name="type">
            /// <para>
            /// Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
            /// </para>
            /// </param>
            /// <param name="data">
            /// <para>
            /// Specifies a pointer to the image data in memory.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "OES_texture_3D", Version = "", EntryPoint = "glTexImage3DOES")]
            [CLSCompliant(false)]
            public static void TexImage3D<T9>(OpenTK.Graphics.ES30.TextureTarget3d target, Int32 level, OpenTK.Graphics.ES30.TextureComponentCount internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, OpenTK.Graphics.ES30.PixelFormat format, OpenTK.Graphics.ES30.PixelType type, [InAttribute, OutAttribute] T9[,] pixels)
                where T9 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: OES_texture_3D]
            /// Specify a three-dimensional texture image
            /// </summary>
            /// <param name="target">
            /// <para>
            /// Specifies the target texture. Must be one of GL_TEXTURE_3D, GL_PROXY_TEXTURE_3D, GL_TEXTURE_2D_ARRAY or GL_PROXY_TEXTURE_2D_ARRAY.
            /// </para>
            /// </param>
            /// <param name="level">
            /// <para>
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level is the n sup th mipmap reduction image.
            /// </para>
            /// </param>
            /// <param name="internalFormat">
            /// <para>
            /// Specifies the number of color components in the texture. Must be one of base internal formats given in Table 1, one of the sized internal formats given in Table 2, or one of the compressed internal formats given in Table 3, below.
            /// </para>
            /// </param>
            /// <param name="width">
            /// <para>
            /// Specifies the width of the texture image. All implementations support 3D texture images that are at least 16 texels wide.
            /// </para>
            /// </param>
            /// <param name="height">
            /// <para>
            /// Specifies the height of the texture image. All implementations support 3D texture images that are at least 256 texels high.
            /// </para>
            /// </param>
            /// <param name="depth">
            /// <para>
            /// Specifies the depth of the texture image, or the number of layers in a texture array. All implementations support 3D texture images that are at least 256 texels deep, and texture arrays that are at least 256 layers deep.
            /// </para>
            /// </param>
            /// <param name="border">
            /// <para>
            /// This value must be 0.
            /// </para>
            /// </param>
            /// <param name="format">
            /// <para>
            /// Specifies the format of the pixel data. The following symbolic values are accepted: GL_RED, GL_RG, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_RED_INTEGER, GL_RG_INTEGER, GL_RGB_INTEGER, GL_BGR_INTEGER, GL_RGBA_INTEGER, GL_BGRA_INTEGER, GL_STENCIL_INDEX, GL_DEPTH_COMPONENT, GL_DEPTH_STENCIL.
            /// </para>
            /// </param>
            /// <param name="type">
            /// <para>
            /// Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
            /// </para>
            /// </param>
            /// <param name="data">
            /// <para>
            /// Specifies a pointer to the image data in memory.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "OES_texture_3D", Version = "", EntryPoint = "glTexImage3DOES")]
            [CLSCompliant(false)]
            public static void TexImage3D<T9>(OpenTK.Graphics.ES30.TextureTarget3d target, Int32 level, OpenTK.Graphics.ES30.TextureComponentCount internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, OpenTK.Graphics.ES30.PixelFormat format, OpenTK.Graphics.ES30.PixelType type, [InAttribute, OutAttribute] T9[,,] pixels)
                where T9 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: OES_texture_3D]
            /// Specify a three-dimensional texture image
            /// </summary>
            /// <param name="target">
            /// <para>
            /// Specifies the target texture. Must be one of GL_TEXTURE_3D, GL_PROXY_TEXTURE_3D, GL_TEXTURE_2D_ARRAY or GL_PROXY_TEXTURE_2D_ARRAY.
            /// </para>
            /// </param>
            /// <param name="level">
            /// <para>
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level is the n sup th mipmap reduction image.
            /// </para>
            /// </param>
            /// <param name="internalFormat">
            /// <para>
            /// Specifies the number of color components in the texture. Must be one of base internal formats given in Table 1, one of the sized internal formats given in Table 2, or one of the compressed internal formats given in Table 3, below.
            /// </para>
            /// </param>
            /// <param name="width">
            /// <para>
            /// Specifies the width of the texture image. All implementations support 3D texture images that are at least 16 texels wide.
            /// </para>
            /// </param>
            /// <param name="height">
            /// <para>
            /// Specifies the height of the texture image. All implementations support 3D texture images that are at least 256 texels high.
            /// </para>
            /// </param>
            /// <param name="depth">
            /// <para>
            /// Specifies the depth of the texture image, or the number of layers in a texture array. All implementations support 3D texture images that are at least 256 texels deep, and texture arrays that are at least 256 layers deep.
            /// </para>
            /// </param>
            /// <param name="border">
            /// <para>
            /// This value must be 0.
            /// </para>
            /// </param>
            /// <param name="format">
            /// <para>
            /// Specifies the format of the pixel data. The following symbolic values are accepted: GL_RED, GL_RG, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_RED_INTEGER, GL_RG_INTEGER, GL_RGB_INTEGER, GL_BGR_INTEGER, GL_RGBA_INTEGER, GL_BGRA_INTEGER, GL_STENCIL_INDEX, GL_DEPTH_COMPONENT, GL_DEPTH_STENCIL.
            /// </para>
            /// </param>
            /// <param name="type">
            /// <para>
            /// Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
            /// </para>
            /// </param>
            /// <param name="data">
            /// <para>
            /// Specifies a pointer to the image data in memory.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "OES_texture_3D", Version = "", EntryPoint = "glTexImage3DOES")]
            public static void TexImage3D<T9>(OpenTK.Graphics.ES30.TextureTarget3d target, Int32 level, OpenTK.Graphics.ES30.TextureComponentCount internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, OpenTK.Graphics.ES30.PixelFormat format, OpenTK.Graphics.ES30.PixelType type, [InAttribute, OutAttribute] ref T9 pixels)
                where T9 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: OES_texture_3D]
            /// Specify a three-dimensional texture subimage
            /// </summary>
            /// <param name="target">
            /// <para>
            /// Specifies the target texture. Must be GL_TEXTURE_3D or GL_TEXTURE_2D_ARRAY.
            /// </para>
            /// </param>
            /// <param name="level">
            /// <para>
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            /// </para>
            /// </param>
            /// <param name="xoffset">
            /// <para>
            /// Specifies a texel offset in the x direction within the texture array.
            /// </para>
            /// </param>
            /// <param name="yoffset">
            /// <para>
            /// Specifies a texel offset in the y direction within the texture array.
            /// </para>
            /// </param>
            /// <param name="zoffset">
            /// <para>
            /// Specifies a texel offset in the z direction within the texture array.
            /// </para>
            /// </param>
            /// <param name="width">
            /// <para>
            /// Specifies the width of the texture subimage.
            /// </para>
            /// </param>
            /// <param name="height">
            /// <para>
            /// Specifies the height of the texture subimage.
            /// </para>
            /// </param>
            /// <param name="depth">
            /// <para>
            /// Specifies the depth of the texture subimage.
            /// </para>
            /// </param>
            /// <param name="format">
            /// <para>
            /// Specifies the format of the pixel data. The following symbolic values are accepted: GL_RED, GL_RG, GL_RGB, GL_BGR, GL_RGBA, GL_DEPTH_COMPONENT, and GL_STENCIL_INDEX.
            /// </para>
            /// </param>
            /// <param name="type">
            /// <para>
            /// Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
            /// </para>
            /// </param>
            /// <param name="data">
            /// <para>
            /// Specifies a pointer to the image data in memory.
            /// </para>
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_texture_3D", Version = "", EntryPoint = "glTexSubImage3DOES")]
            public static void TexSubImage3D(OpenTK.Graphics.ES30.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.ES30.All format, OpenTK.Graphics.ES30.All type, IntPtr pixels) { throw new NotImplementedException(); }

            /// <summary>[requires: OES_texture_3D]
            /// Specify a three-dimensional texture subimage
            /// </summary>
            /// <param name="target">
            /// <para>
            /// Specifies the target texture. Must be GL_TEXTURE_3D or GL_TEXTURE_2D_ARRAY.
            /// </para>
            /// </param>
            /// <param name="level">
            /// <para>
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            /// </para>
            /// </param>
            /// <param name="xoffset">
            /// <para>
            /// Specifies a texel offset in the x direction within the texture array.
            /// </para>
            /// </param>
            /// <param name="yoffset">
            /// <para>
            /// Specifies a texel offset in the y direction within the texture array.
            /// </para>
            /// </param>
            /// <param name="zoffset">
            /// <para>
            /// Specifies a texel offset in the z direction within the texture array.
            /// </para>
            /// </param>
            /// <param name="width">
            /// <para>
            /// Specifies the width of the texture subimage.
            /// </para>
            /// </param>
            /// <param name="height">
            /// <para>
            /// Specifies the height of the texture subimage.
            /// </para>
            /// </param>
            /// <param name="depth">
            /// <para>
            /// Specifies the depth of the texture subimage.
            /// </para>
            /// </param>
            /// <param name="format">
            /// <para>
            /// Specifies the format of the pixel data. The following symbolic values are accepted: GL_RED, GL_RG, GL_RGB, GL_BGR, GL_RGBA, GL_DEPTH_COMPONENT, and GL_STENCIL_INDEX.
            /// </para>
            /// </param>
            /// <param name="type">
            /// <para>
            /// Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
            /// </para>
            /// </param>
            /// <param name="data">
            /// <para>
            /// Specifies a pointer to the image data in memory.
            /// </para>
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_texture_3D", Version = "", EntryPoint = "glTexSubImage3DOES")]
            [CLSCompliant(false)]
            public static void TexSubImage3D<T10>(OpenTK.Graphics.ES30.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.ES30.All format, OpenTK.Graphics.ES30.All type, [InAttribute, OutAttribute] T10[] pixels)
                where T10 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: OES_texture_3D]
            /// Specify a three-dimensional texture subimage
            /// </summary>
            /// <param name="target">
            /// <para>
            /// Specifies the target texture. Must be GL_TEXTURE_3D or GL_TEXTURE_2D_ARRAY.
            /// </para>
            /// </param>
            /// <param name="level">
            /// <para>
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            /// </para>
            /// </param>
            /// <param name="xoffset">
            /// <para>
            /// Specifies a texel offset in the x direction within the texture array.
            /// </para>
            /// </param>
            /// <param name="yoffset">
            /// <para>
            /// Specifies a texel offset in the y direction within the texture array.
            /// </para>
            /// </param>
            /// <param name="zoffset">
            /// <para>
            /// Specifies a texel offset in the z direction within the texture array.
            /// </para>
            /// </param>
            /// <param name="width">
            /// <para>
            /// Specifies the width of the texture subimage.
            /// </para>
            /// </param>
            /// <param name="height">
            /// <para>
            /// Specifies the height of the texture subimage.
            /// </para>
            /// </param>
            /// <param name="depth">
            /// <para>
            /// Specifies the depth of the texture subimage.
            /// </para>
            /// </param>
            /// <param name="format">
            /// <para>
            /// Specifies the format of the pixel data. The following symbolic values are accepted: GL_RED, GL_RG, GL_RGB, GL_BGR, GL_RGBA, GL_DEPTH_COMPONENT, and GL_STENCIL_INDEX.
            /// </para>
            /// </param>
            /// <param name="type">
            /// <para>
            /// Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
            /// </para>
            /// </param>
            /// <param name="data">
            /// <para>
            /// Specifies a pointer to the image data in memory.
            /// </para>
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_texture_3D", Version = "", EntryPoint = "glTexSubImage3DOES")]
            [CLSCompliant(false)]
            public static void TexSubImage3D<T10>(OpenTK.Graphics.ES30.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.ES30.All format, OpenTK.Graphics.ES30.All type, [InAttribute, OutAttribute] T10[,] pixels)
                where T10 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: OES_texture_3D]
            /// Specify a three-dimensional texture subimage
            /// </summary>
            /// <param name="target">
            /// <para>
            /// Specifies the target texture. Must be GL_TEXTURE_3D or GL_TEXTURE_2D_ARRAY.
            /// </para>
            /// </param>
            /// <param name="level">
            /// <para>
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            /// </para>
            /// </param>
            /// <param name="xoffset">
            /// <para>
            /// Specifies a texel offset in the x direction within the texture array.
            /// </para>
            /// </param>
            /// <param name="yoffset">
            /// <para>
            /// Specifies a texel offset in the y direction within the texture array.
            /// </para>
            /// </param>
            /// <param name="zoffset">
            /// <para>
            /// Specifies a texel offset in the z direction within the texture array.
            /// </para>
            /// </param>
            /// <param name="width">
            /// <para>
            /// Specifies the width of the texture subimage.
            /// </para>
            /// </param>
            /// <param name="height">
            /// <para>
            /// Specifies the height of the texture subimage.
            /// </para>
            /// </param>
            /// <param name="depth">
            /// <para>
            /// Specifies the depth of the texture subimage.
            /// </para>
            /// </param>
            /// <param name="format">
            /// <para>
            /// Specifies the format of the pixel data. The following symbolic values are accepted: GL_RED, GL_RG, GL_RGB, GL_BGR, GL_RGBA, GL_DEPTH_COMPONENT, and GL_STENCIL_INDEX.
            /// </para>
            /// </param>
            /// <param name="type">
            /// <para>
            /// Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
            /// </para>
            /// </param>
            /// <param name="data">
            /// <para>
            /// Specifies a pointer to the image data in memory.
            /// </para>
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_texture_3D", Version = "", EntryPoint = "glTexSubImage3DOES")]
            [CLSCompliant(false)]
            public static void TexSubImage3D<T10>(OpenTK.Graphics.ES30.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.ES30.All format, OpenTK.Graphics.ES30.All type, [InAttribute, OutAttribute] T10[,,] pixels)
                where T10 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: OES_texture_3D]
            /// Specify a three-dimensional texture subimage
            /// </summary>
            /// <param name="target">
            /// <para>
            /// Specifies the target texture. Must be GL_TEXTURE_3D or GL_TEXTURE_2D_ARRAY.
            /// </para>
            /// </param>
            /// <param name="level">
            /// <para>
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            /// </para>
            /// </param>
            /// <param name="xoffset">
            /// <para>
            /// Specifies a texel offset in the x direction within the texture array.
            /// </para>
            /// </param>
            /// <param name="yoffset">
            /// <para>
            /// Specifies a texel offset in the y direction within the texture array.
            /// </para>
            /// </param>
            /// <param name="zoffset">
            /// <para>
            /// Specifies a texel offset in the z direction within the texture array.
            /// </para>
            /// </param>
            /// <param name="width">
            /// <para>
            /// Specifies the width of the texture subimage.
            /// </para>
            /// </param>
            /// <param name="height">
            /// <para>
            /// Specifies the height of the texture subimage.
            /// </para>
            /// </param>
            /// <param name="depth">
            /// <para>
            /// Specifies the depth of the texture subimage.
            /// </para>
            /// </param>
            /// <param name="format">
            /// <para>
            /// Specifies the format of the pixel data. The following symbolic values are accepted: GL_RED, GL_RG, GL_RGB, GL_BGR, GL_RGBA, GL_DEPTH_COMPONENT, and GL_STENCIL_INDEX.
            /// </para>
            /// </param>
            /// <param name="type">
            /// <para>
            /// Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
            /// </para>
            /// </param>
            /// <param name="data">
            /// <para>
            /// Specifies a pointer to the image data in memory.
            /// </para>
            /// </param>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_texture_3D", Version = "", EntryPoint = "glTexSubImage3DOES")]
            public static void TexSubImage3D<T10>(OpenTK.Graphics.ES30.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.ES30.All format, OpenTK.Graphics.ES30.All type, [InAttribute, OutAttribute] ref T10 pixels)
                where T10 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: OES_texture_3D]
            /// Specify a three-dimensional texture subimage
            /// </summary>
            /// <param name="target">
            /// <para>
            /// Specifies the target texture. Must be GL_TEXTURE_3D or GL_TEXTURE_2D_ARRAY.
            /// </para>
            /// </param>
            /// <param name="level">
            /// <para>
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            /// </para>
            /// </param>
            /// <param name="xoffset">
            /// <para>
            /// Specifies a texel offset in the x direction within the texture array.
            /// </para>
            /// </param>
            /// <param name="yoffset">
            /// <para>
            /// Specifies a texel offset in the y direction within the texture array.
            /// </para>
            /// </param>
            /// <param name="zoffset">
            /// <para>
            /// Specifies a texel offset in the z direction within the texture array.
            /// </para>
            /// </param>
            /// <param name="width">
            /// <para>
            /// Specifies the width of the texture subimage.
            /// </para>
            /// </param>
            /// <param name="height">
            /// <para>
            /// Specifies the height of the texture subimage.
            /// </para>
            /// </param>
            /// <param name="depth">
            /// <para>
            /// Specifies the depth of the texture subimage.
            /// </para>
            /// </param>
            /// <param name="format">
            /// <para>
            /// Specifies the format of the pixel data. The following symbolic values are accepted: GL_RED, GL_RG, GL_RGB, GL_BGR, GL_RGBA, GL_DEPTH_COMPONENT, and GL_STENCIL_INDEX.
            /// </para>
            /// </param>
            /// <param name="type">
            /// <para>
            /// Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
            /// </para>
            /// </param>
            /// <param name="data">
            /// <para>
            /// Specifies a pointer to the image data in memory.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "OES_texture_3D", Version = "", EntryPoint = "glTexSubImage3DOES")]
            public static void TexSubImage3D(OpenTK.Graphics.ES30.TextureTarget3d target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.ES30.All format, OpenTK.Graphics.ES30.All type, IntPtr pixels) { throw new NotImplementedException(); }

            /// <summary>[requires: OES_texture_3D]
            /// Specify a three-dimensional texture subimage
            /// </summary>
            /// <param name="target">
            /// <para>
            /// Specifies the target texture. Must be GL_TEXTURE_3D or GL_TEXTURE_2D_ARRAY.
            /// </para>
            /// </param>
            /// <param name="level">
            /// <para>
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            /// </para>
            /// </param>
            /// <param name="xoffset">
            /// <para>
            /// Specifies a texel offset in the x direction within the texture array.
            /// </para>
            /// </param>
            /// <param name="yoffset">
            /// <para>
            /// Specifies a texel offset in the y direction within the texture array.
            /// </para>
            /// </param>
            /// <param name="zoffset">
            /// <para>
            /// Specifies a texel offset in the z direction within the texture array.
            /// </para>
            /// </param>
            /// <param name="width">
            /// <para>
            /// Specifies the width of the texture subimage.
            /// </para>
            /// </param>
            /// <param name="height">
            /// <para>
            /// Specifies the height of the texture subimage.
            /// </para>
            /// </param>
            /// <param name="depth">
            /// <para>
            /// Specifies the depth of the texture subimage.
            /// </para>
            /// </param>
            /// <param name="format">
            /// <para>
            /// Specifies the format of the pixel data. The following symbolic values are accepted: GL_RED, GL_RG, GL_RGB, GL_BGR, GL_RGBA, GL_DEPTH_COMPONENT, and GL_STENCIL_INDEX.
            /// </para>
            /// </param>
            /// <param name="type">
            /// <para>
            /// Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
            /// </para>
            /// </param>
            /// <param name="data">
            /// <para>
            /// Specifies a pointer to the image data in memory.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "OES_texture_3D", Version = "", EntryPoint = "glTexSubImage3DOES")]
            [CLSCompliant(false)]
            public static void TexSubImage3D<T10>(OpenTK.Graphics.ES30.TextureTarget3d target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.ES30.All format, OpenTK.Graphics.ES30.All type, [InAttribute, OutAttribute] T10[] pixels)
                where T10 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: OES_texture_3D]
            /// Specify a three-dimensional texture subimage
            /// </summary>
            /// <param name="target">
            /// <para>
            /// Specifies the target texture. Must be GL_TEXTURE_3D or GL_TEXTURE_2D_ARRAY.
            /// </para>
            /// </param>
            /// <param name="level">
            /// <para>
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            /// </para>
            /// </param>
            /// <param name="xoffset">
            /// <para>
            /// Specifies a texel offset in the x direction within the texture array.
            /// </para>
            /// </param>
            /// <param name="yoffset">
            /// <para>
            /// Specifies a texel offset in the y direction within the texture array.
            /// </para>
            /// </param>
            /// <param name="zoffset">
            /// <para>
            /// Specifies a texel offset in the z direction within the texture array.
            /// </para>
            /// </param>
            /// <param name="width">
            /// <para>
            /// Specifies the width of the texture subimage.
            /// </para>
            /// </param>
            /// <param name="height">
            /// <para>
            /// Specifies the height of the texture subimage.
            /// </para>
            /// </param>
            /// <param name="depth">
            /// <para>
            /// Specifies the depth of the texture subimage.
            /// </para>
            /// </param>
            /// <param name="format">
            /// <para>
            /// Specifies the format of the pixel data. The following symbolic values are accepted: GL_RED, GL_RG, GL_RGB, GL_BGR, GL_RGBA, GL_DEPTH_COMPONENT, and GL_STENCIL_INDEX.
            /// </para>
            /// </param>
            /// <param name="type">
            /// <para>
            /// Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
            /// </para>
            /// </param>
            /// <param name="data">
            /// <para>
            /// Specifies a pointer to the image data in memory.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "OES_texture_3D", Version = "", EntryPoint = "glTexSubImage3DOES")]
            [CLSCompliant(false)]
            public static void TexSubImage3D<T10>(OpenTK.Graphics.ES30.TextureTarget3d target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.ES30.All format, OpenTK.Graphics.ES30.All type, [InAttribute, OutAttribute] T10[,] pixels)
                where T10 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: OES_texture_3D]
            /// Specify a three-dimensional texture subimage
            /// </summary>
            /// <param name="target">
            /// <para>
            /// Specifies the target texture. Must be GL_TEXTURE_3D or GL_TEXTURE_2D_ARRAY.
            /// </para>
            /// </param>
            /// <param name="level">
            /// <para>
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            /// </para>
            /// </param>
            /// <param name="xoffset">
            /// <para>
            /// Specifies a texel offset in the x direction within the texture array.
            /// </para>
            /// </param>
            /// <param name="yoffset">
            /// <para>
            /// Specifies a texel offset in the y direction within the texture array.
            /// </para>
            /// </param>
            /// <param name="zoffset">
            /// <para>
            /// Specifies a texel offset in the z direction within the texture array.
            /// </para>
            /// </param>
            /// <param name="width">
            /// <para>
            /// Specifies the width of the texture subimage.
            /// </para>
            /// </param>
            /// <param name="height">
            /// <para>
            /// Specifies the height of the texture subimage.
            /// </para>
            /// </param>
            /// <param name="depth">
            /// <para>
            /// Specifies the depth of the texture subimage.
            /// </para>
            /// </param>
            /// <param name="format">
            /// <para>
            /// Specifies the format of the pixel data. The following symbolic values are accepted: GL_RED, GL_RG, GL_RGB, GL_BGR, GL_RGBA, GL_DEPTH_COMPONENT, and GL_STENCIL_INDEX.
            /// </para>
            /// </param>
            /// <param name="type">
            /// <para>
            /// Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
            /// </para>
            /// </param>
            /// <param name="data">
            /// <para>
            /// Specifies a pointer to the image data in memory.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "OES_texture_3D", Version = "", EntryPoint = "glTexSubImage3DOES")]
            [CLSCompliant(false)]
            public static void TexSubImage3D<T10>(OpenTK.Graphics.ES30.TextureTarget3d target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.ES30.All format, OpenTK.Graphics.ES30.All type, [InAttribute, OutAttribute] T10[,,] pixels)
                where T10 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: OES_texture_3D]
            /// Specify a three-dimensional texture subimage
            /// </summary>
            /// <param name="target">
            /// <para>
            /// Specifies the target texture. Must be GL_TEXTURE_3D or GL_TEXTURE_2D_ARRAY.
            /// </para>
            /// </param>
            /// <param name="level">
            /// <para>
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            /// </para>
            /// </param>
            /// <param name="xoffset">
            /// <para>
            /// Specifies a texel offset in the x direction within the texture array.
            /// </para>
            /// </param>
            /// <param name="yoffset">
            /// <para>
            /// Specifies a texel offset in the y direction within the texture array.
            /// </para>
            /// </param>
            /// <param name="zoffset">
            /// <para>
            /// Specifies a texel offset in the z direction within the texture array.
            /// </para>
            /// </param>
            /// <param name="width">
            /// <para>
            /// Specifies the width of the texture subimage.
            /// </para>
            /// </param>
            /// <param name="height">
            /// <para>
            /// Specifies the height of the texture subimage.
            /// </para>
            /// </param>
            /// <param name="depth">
            /// <para>
            /// Specifies the depth of the texture subimage.
            /// </para>
            /// </param>
            /// <param name="format">
            /// <para>
            /// Specifies the format of the pixel data. The following symbolic values are accepted: GL_RED, GL_RG, GL_RGB, GL_BGR, GL_RGBA, GL_DEPTH_COMPONENT, and GL_STENCIL_INDEX.
            /// </para>
            /// </param>
            /// <param name="type">
            /// <para>
            /// Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
            /// </para>
            /// </param>
            /// <param name="data">
            /// <para>
            /// Specifies a pointer to the image data in memory.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "OES_texture_3D", Version = "", EntryPoint = "glTexSubImage3DOES")]
            public static void TexSubImage3D<T10>(OpenTK.Graphics.ES30.TextureTarget3d target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.ES30.All format, OpenTK.Graphics.ES30.All type, [InAttribute, OutAttribute] ref T10 pixels)
                where T10 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: OES_mapbuffer]</summary>
            [Obsolete("Use strongly-typed overload instead")]
            [AutoGenerated(Category = "OES_mapbuffer", Version = "", EntryPoint = "glUnmapBufferOES")]
            public static bool UnmapBuffer(OpenTK.Graphics.ES30.All target) { throw new NotImplementedException(); }

            /// <summary>[requires: OES_mapbuffer]</summary>
            [AutoGenerated(Category = "OES_mapbuffer", Version = "", EntryPoint = "glUnmapBufferOES")]
            public static bool UnmapBuffer(OpenTK.Graphics.ES30.BufferTarget target) { throw new NotImplementedException(); }

        }

        public static partial class Qcom
        {
            /// <summary>[requires: QCOM_alpha_test]
            /// Specify the alpha test function
            /// </summary>
            /// <param name="func">
            /// <para>
            /// Specifies the alpha comparison function. Symbolic constants GL_NEVER, GL_LESS, GL_EQUAL, GL_LEQUAL, GL_GREATER, GL_NOTEQUAL, GL_GEQUAL, and GL_ALWAYS are accepted. The initial value is GL_ALWAYS.
            /// </para>
            /// </param>
            /// <param name="ref">
            /// <para>
            /// Specifies the reference value that incoming alpha values are compared to. This value is clamped to the range [0,1], where 0 represents the lowest possible alpha value and 1 the highest possible value. The initial reference value is 0.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "QCOM_alpha_test", Version = "", EntryPoint = "glAlphaFuncQCOM")]
            public static void AlphaFunc(OpenTK.Graphics.ES30.All func, Single @ref) { throw new NotImplementedException(); }

            /// <summary>[requires: QCOM_driver_control]</summary>
            [AutoGenerated(Category = "QCOM_driver_control", Version = "", EntryPoint = "glDisableDriverControlQCOM")]
            [CLSCompliant(false)]
            public static void DisableDriverControl(Int32 driverControl) { throw new NotImplementedException(); }

            /// <summary>[requires: QCOM_driver_control]</summary>
            [AutoGenerated(Category = "QCOM_driver_control", Version = "", EntryPoint = "glDisableDriverControlQCOM")]
            [CLSCompliant(false)]
            public static void DisableDriverControl(UInt32 driverControl) { throw new NotImplementedException(); }

            /// <summary>[requires: QCOM_driver_control]</summary>
            [AutoGenerated(Category = "QCOM_driver_control", Version = "", EntryPoint = "glEnableDriverControlQCOM")]
            [CLSCompliant(false)]
            public static void EnableDriverControl(Int32 driverControl) { throw new NotImplementedException(); }

            /// <summary>[requires: QCOM_driver_control]</summary>
            [AutoGenerated(Category = "QCOM_driver_control", Version = "", EntryPoint = "glEnableDriverControlQCOM")]
            [CLSCompliant(false)]
            public static void EnableDriverControl(UInt32 driverControl) { throw new NotImplementedException(); }

            /// <summary>[requires: QCOM_tiled_rendering]</summary>
            [AutoGenerated(Category = "QCOM_tiled_rendering", Version = "", EntryPoint = "glEndTilingQCOM")]
            [CLSCompliant(false)]
            public static void EndTiling(Int32 preserveMask) { throw new NotImplementedException(); }

            /// <summary>[requires: QCOM_tiled_rendering]</summary>
            [AutoGenerated(Category = "QCOM_tiled_rendering", Version = "", EntryPoint = "glEndTilingQCOM")]
            [CLSCompliant(false)]
            public static void EndTiling(UInt32 preserveMask) { throw new NotImplementedException(); }

            /// <summary>[requires: QCOM_extended_get]</summary>
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetBufferPointervQCOM")]
            public static void ExtGetBufferPointer(OpenTK.Graphics.ES30.All target, [OutAttribute] IntPtr @params) { throw new NotImplementedException(); }

            /// <summary>[requires: QCOM_extended_get]</summary>
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetBufferPointervQCOM")]
            [CLSCompliant(false)]
            public static void ExtGetBufferPointer<T1>(OpenTK.Graphics.ES30.All target, [InAttribute, OutAttribute] T1[] @params)
                where T1 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: QCOM_extended_get]</summary>
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetBufferPointervQCOM")]
            [CLSCompliant(false)]
            public static void ExtGetBufferPointer<T1>(OpenTK.Graphics.ES30.All target, [InAttribute, OutAttribute] T1[,] @params)
                where T1 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: QCOM_extended_get]</summary>
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetBufferPointervQCOM")]
            [CLSCompliant(false)]
            public static void ExtGetBufferPointer<T1>(OpenTK.Graphics.ES30.All target, [InAttribute, OutAttribute] T1[,,] @params)
                where T1 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: QCOM_extended_get]</summary>
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetBufferPointervQCOM")]
            public static void ExtGetBufferPointer<T1>(OpenTK.Graphics.ES30.All target, [InAttribute, OutAttribute] ref T1 @params)
                where T1 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: QCOM_extended_get]</summary>
            [Obsolete("Use out overload instead")]
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetBuffersQCOM")]
            [CLSCompliant(false)]
            public static void ExtGetBuffers([OutAttribute] Int32[] buffers, Int32 maxBuffers, [OutAttribute] Int32[] numBuffers) { throw new NotImplementedException(); }

            /// <summary>[requires: QCOM_extended_get]</summary>
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetBuffersQCOM")]
            [CLSCompliant(false)]
            public static void ExtGetBuffers([OutAttribute] Int32[] buffers, Int32 maxBuffers, [OutAttribute] out Int32 numBuffers) { throw new NotImplementedException(); }

            /// <summary>[requires: QCOM_extended_get]</summary>
            [Obsolete("Use out overload instead")]
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetBuffersQCOM")]
            [CLSCompliant(false)]
            public static void ExtGetBuffers([OutAttribute] out Int32 buffers, Int32 maxBuffers, [OutAttribute] out Int32 numBuffers) { throw new NotImplementedException(); }

            /// <summary>[requires: QCOM_extended_get]</summary>
            [Obsolete("Use out overload instead")]
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetBuffersQCOM")]
            [CLSCompliant(false)]
            public static unsafe void ExtGetBuffers([OutAttribute] Int32* buffers, Int32 maxBuffers, [OutAttribute] Int32* numBuffers) { throw new NotImplementedException(); }

            /// <summary>[requires: QCOM_extended_get]</summary>
            [Obsolete("Use out overload instead")]
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetBuffersQCOM")]
            [CLSCompliant(false)]
            public static void ExtGetBuffers([OutAttribute] UInt32[] buffers, Int32 maxBuffers, [OutAttribute] Int32[] numBuffers) { throw new NotImplementedException(); }

            /// <summary>[requires: QCOM_extended_get]</summary>
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetBuffersQCOM")]
            [CLSCompliant(false)]
            public static void ExtGetBuffers([OutAttribute] UInt32[] buffers, Int32 maxBuffers, [OutAttribute] out Int32 numBuffers) { throw new NotImplementedException(); }

            /// <summary>[requires: QCOM_extended_get]</summary>
            [Obsolete("Use out overload instead")]
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetBuffersQCOM")]
            [CLSCompliant(false)]
            public static void ExtGetBuffers([OutAttribute] out UInt32 buffers, Int32 maxBuffers, [OutAttribute] out Int32 numBuffers) { throw new NotImplementedException(); }

            /// <summary>[requires: QCOM_extended_get]</summary>
            [Obsolete("Use out overload instead")]
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetBuffersQCOM")]
            [CLSCompliant(false)]
            public static unsafe void ExtGetBuffers([OutAttribute] UInt32* buffers, Int32 maxBuffers, [OutAttribute] Int32* numBuffers) { throw new NotImplementedException(); }

            /// <summary>[requires: QCOM_extended_get]</summary>
            [Obsolete("Use out overload instead")]
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetFramebuffersQCOM")]
            [CLSCompliant(false)]
            public static void ExtGetFramebuffers([OutAttribute] Int32[] framebuffers, Int32 maxFramebuffers, [OutAttribute] Int32[] numFramebuffers) { throw new NotImplementedException(); }

            /// <summary>[requires: QCOM_extended_get]</summary>
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetFramebuffersQCOM")]
            [CLSCompliant(false)]
            public static void ExtGetFramebuffers([OutAttribute] Int32[] framebuffers, Int32 maxFramebuffers, [OutAttribute] out Int32 numFramebuffers) { throw new NotImplementedException(); }

            /// <summary>[requires: QCOM_extended_get]</summary>
            [Obsolete("Use out overload instead")]
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetFramebuffersQCOM")]
            [CLSCompliant(false)]
            public static void ExtGetFramebuffers([OutAttribute] out Int32 framebuffers, Int32 maxFramebuffers, [OutAttribute] out Int32 numFramebuffers) { throw new NotImplementedException(); }

            /// <summary>[requires: QCOM_extended_get]</summary>
            [Obsolete("Use out overload instead")]
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetFramebuffersQCOM")]
            [CLSCompliant(false)]
            public static unsafe void ExtGetFramebuffers([OutAttribute] Int32* framebuffers, Int32 maxFramebuffers, [OutAttribute] Int32* numFramebuffers) { throw new NotImplementedException(); }

            /// <summary>[requires: QCOM_extended_get]</summary>
            [Obsolete("Use out overload instead")]
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetFramebuffersQCOM")]
            [CLSCompliant(false)]
            public static void ExtGetFramebuffers([OutAttribute] UInt32[] framebuffers, Int32 maxFramebuffers, [OutAttribute] Int32[] numFramebuffers) { throw new NotImplementedException(); }

            /// <summary>[requires: QCOM_extended_get]</summary>
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetFramebuffersQCOM")]
            [CLSCompliant(false)]
            public static void ExtGetFramebuffers([OutAttribute] UInt32[] framebuffers, Int32 maxFramebuffers, [OutAttribute] out Int32 numFramebuffers) { throw new NotImplementedException(); }

            /// <summary>[requires: QCOM_extended_get]</summary>
            [Obsolete("Use out overload instead")]
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetFramebuffersQCOM")]
            [CLSCompliant(false)]
            public static void ExtGetFramebuffers([OutAttribute] out UInt32 framebuffers, Int32 maxFramebuffers, [OutAttribute] out Int32 numFramebuffers) { throw new NotImplementedException(); }

            /// <summary>[requires: QCOM_extended_get]</summary>
            [Obsolete("Use out overload instead")]
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetFramebuffersQCOM")]
            [CLSCompliant(false)]
            public static unsafe void ExtGetFramebuffers([OutAttribute] UInt32* framebuffers, Int32 maxFramebuffers, [OutAttribute] Int32* numFramebuffers) { throw new NotImplementedException(); }

            /// <summary>[requires: QCOM_extended_get2]</summary>
            [AutoGenerated(Category = "QCOM_extended_get2", Version = "", EntryPoint = "glExtGetProgramBinarySourceQCOM")]
            [CLSCompliant(false)]
            public static void ExtGetProgramBinarySource(Int32 program, OpenTK.Graphics.ES30.All shadertype, [OutAttribute] StringBuilder source, [OutAttribute] Int32[] length) { throw new NotImplementedException(); }

            /// <summary>[requires: QCOM_extended_get2]</summary>
            [AutoGenerated(Category = "QCOM_extended_get2", Version = "", EntryPoint = "glExtGetProgramBinarySourceQCOM")]
            [CLSCompliant(false)]
            public static void ExtGetProgramBinarySource(Int32 program, OpenTK.Graphics.ES30.All shadertype, [OutAttribute] StringBuilder source, [OutAttribute] out Int32 length) { throw new NotImplementedException(); }

            /// <summary>[requires: QCOM_extended_get2]</summary>
            [AutoGenerated(Category = "QCOM_extended_get2", Version = "", EntryPoint = "glExtGetProgramBinarySourceQCOM")]
            [CLSCompliant(false)]
            public static unsafe void ExtGetProgramBinarySource(Int32 program, OpenTK.Graphics.ES30.All shadertype, [OutAttribute] StringBuilder source, [OutAttribute] Int32* length) { throw new NotImplementedException(); }

            /// <summary>[requires: QCOM_extended_get2]</summary>
            [AutoGenerated(Category = "QCOM_extended_get2", Version = "", EntryPoint = "glExtGetProgramBinarySourceQCOM")]
            [CLSCompliant(false)]
            public static void ExtGetProgramBinarySource(UInt32 program, OpenTK.Graphics.ES30.All shadertype, [OutAttribute] StringBuilder source, [OutAttribute] Int32[] length) { throw new NotImplementedException(); }

            /// <summary>[requires: QCOM_extended_get2]</summary>
            [AutoGenerated(Category = "QCOM_extended_get2", Version = "", EntryPoint = "glExtGetProgramBinarySourceQCOM")]
            [CLSCompliant(false)]
            public static void ExtGetProgramBinarySource(UInt32 program, OpenTK.Graphics.ES30.All shadertype, [OutAttribute] StringBuilder source, [OutAttribute] out Int32 length) { throw new NotImplementedException(); }

            /// <summary>[requires: QCOM_extended_get2]</summary>
            [AutoGenerated(Category = "QCOM_extended_get2", Version = "", EntryPoint = "glExtGetProgramBinarySourceQCOM")]
            [CLSCompliant(false)]
            public static unsafe void ExtGetProgramBinarySource(UInt32 program, OpenTK.Graphics.ES30.All shadertype, [OutAttribute] StringBuilder source, [OutAttribute] Int32* length) { throw new NotImplementedException(); }

            /// <summary>[requires: QCOM_extended_get2]</summary>
            [Obsolete("Use out overload instead")]
            [AutoGenerated(Category = "QCOM_extended_get2", Version = "", EntryPoint = "glExtGetProgramsQCOM")]
            [CLSCompliant(false)]
            public static void ExtGetProgram([OutAttribute] Int32[] programs, Int32 maxPrograms, [OutAttribute] Int32[] numPrograms) { throw new NotImplementedException(); }

            /// <summary>[requires: QCOM_extended_get2]</summary>
            [AutoGenerated(Category = "QCOM_extended_get2", Version = "", EntryPoint = "glExtGetProgramsQCOM")]
            [CLSCompliant(false)]
            public static void ExtGetProgram([OutAttribute] Int32[] programs, Int32 maxPrograms, [OutAttribute] out Int32 numPrograms) { throw new NotImplementedException(); }

            /// <summary>[requires: QCOM_extended_get2]</summary>
            [Obsolete("Use out overload instead")]
            [AutoGenerated(Category = "QCOM_extended_get2", Version = "", EntryPoint = "glExtGetProgramsQCOM")]
            [CLSCompliant(false)]
            public static void ExtGetProgram([OutAttribute] out Int32 programs, Int32 maxPrograms, [OutAttribute] out Int32 numPrograms) { throw new NotImplementedException(); }

            /// <summary>[requires: QCOM_extended_get2]</summary>
            [Obsolete("Use out overload instead")]
            [AutoGenerated(Category = "QCOM_extended_get2", Version = "", EntryPoint = "glExtGetProgramsQCOM")]
            [CLSCompliant(false)]
            public static unsafe void ExtGetProgram([OutAttribute] Int32* programs, Int32 maxPrograms, [OutAttribute] Int32* numPrograms) { throw new NotImplementedException(); }

            /// <summary>[requires: QCOM_extended_get2]</summary>
            [Obsolete("Use out overload instead")]
            [AutoGenerated(Category = "QCOM_extended_get2", Version = "", EntryPoint = "glExtGetProgramsQCOM")]
            [CLSCompliant(false)]
            public static void ExtGetProgram([OutAttribute] UInt32[] programs, Int32 maxPrograms, [OutAttribute] Int32[] numPrograms) { throw new NotImplementedException(); }

            /// <summary>[requires: QCOM_extended_get2]</summary>
            [AutoGenerated(Category = "QCOM_extended_get2", Version = "", EntryPoint = "glExtGetProgramsQCOM")]
            [CLSCompliant(false)]
            public static void ExtGetProgram([OutAttribute] UInt32[] programs, Int32 maxPrograms, [OutAttribute] out Int32 numPrograms) { throw new NotImplementedException(); }

            /// <summary>[requires: QCOM_extended_get2]</summary>
            [Obsolete("Use out overload instead")]
            [AutoGenerated(Category = "QCOM_extended_get2", Version = "", EntryPoint = "glExtGetProgramsQCOM")]
            [CLSCompliant(false)]
            public static void ExtGetProgram([OutAttribute] out UInt32 programs, Int32 maxPrograms, [OutAttribute] out Int32 numPrograms) { throw new NotImplementedException(); }

            /// <summary>[requires: QCOM_extended_get2]</summary>
            [Obsolete("Use out overload instead")]
            [AutoGenerated(Category = "QCOM_extended_get2", Version = "", EntryPoint = "glExtGetProgramsQCOM")]
            [CLSCompliant(false)]
            public static unsafe void ExtGetProgram([OutAttribute] UInt32* programs, Int32 maxPrograms, [OutAttribute] Int32* numPrograms) { throw new NotImplementedException(); }

            /// <summary>[requires: QCOM_extended_get]</summary>
            [Obsolete("Use out overload instead")]
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetRenderbuffersQCOM")]
            [CLSCompliant(false)]
            public static void ExtGetRenderbuffers([OutAttribute] Int32[] renderbuffers, Int32 maxRenderbuffers, [OutAttribute] Int32[] numRenderbuffers) { throw new NotImplementedException(); }

            /// <summary>[requires: QCOM_extended_get]</summary>
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetRenderbuffersQCOM")]
            [CLSCompliant(false)]
            public static void ExtGetRenderbuffers([OutAttribute] Int32[] renderbuffers, Int32 maxRenderbuffers, [OutAttribute] out Int32 numRenderbuffers) { throw new NotImplementedException(); }

            /// <summary>[requires: QCOM_extended_get]</summary>
            [Obsolete("Use out overload instead")]
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetRenderbuffersQCOM")]
            [CLSCompliant(false)]
            public static void ExtGetRenderbuffers([OutAttribute] out Int32 renderbuffers, Int32 maxRenderbuffers, [OutAttribute] out Int32 numRenderbuffers) { throw new NotImplementedException(); }

            /// <summary>[requires: QCOM_extended_get]</summary>
            [Obsolete("Use out overload instead")]
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetRenderbuffersQCOM")]
            [CLSCompliant(false)]
            public static unsafe void ExtGetRenderbuffers([OutAttribute] Int32* renderbuffers, Int32 maxRenderbuffers, [OutAttribute] Int32* numRenderbuffers) { throw new NotImplementedException(); }

            /// <summary>[requires: QCOM_extended_get]</summary>
            [Obsolete("Use out overload instead")]
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetRenderbuffersQCOM")]
            [CLSCompliant(false)]
            public static void ExtGetRenderbuffers([OutAttribute] UInt32[] renderbuffers, Int32 maxRenderbuffers, [OutAttribute] Int32[] numRenderbuffers) { throw new NotImplementedException(); }

            /// <summary>[requires: QCOM_extended_get]</summary>
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetRenderbuffersQCOM")]
            [CLSCompliant(false)]
            public static void ExtGetRenderbuffers([OutAttribute] UInt32[] renderbuffers, Int32 maxRenderbuffers, [OutAttribute] out Int32 numRenderbuffers) { throw new NotImplementedException(); }

            /// <summary>[requires: QCOM_extended_get]</summary>
            [Obsolete("Use out overload instead")]
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetRenderbuffersQCOM")]
            [CLSCompliant(false)]
            public static void ExtGetRenderbuffers([OutAttribute] out UInt32 renderbuffers, Int32 maxRenderbuffers, [OutAttribute] out Int32 numRenderbuffers) { throw new NotImplementedException(); }

            /// <summary>[requires: QCOM_extended_get]</summary>
            [Obsolete("Use out overload instead")]
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetRenderbuffersQCOM")]
            [CLSCompliant(false)]
            public static unsafe void ExtGetRenderbuffers([OutAttribute] UInt32* renderbuffers, Int32 maxRenderbuffers, [OutAttribute] Int32* numRenderbuffers) { throw new NotImplementedException(); }

            /// <summary>[requires: QCOM_extended_get2]</summary>
            [Obsolete("Use out overload instead")]
            [AutoGenerated(Category = "QCOM_extended_get2", Version = "", EntryPoint = "glExtGetShadersQCOM")]
            [CLSCompliant(false)]
            public static void ExtGetShaders([OutAttribute] Int32[] shaders, Int32 maxShaders, [OutAttribute] Int32[] numShaders) { throw new NotImplementedException(); }

            /// <summary>[requires: QCOM_extended_get2]</summary>
            [AutoGenerated(Category = "QCOM_extended_get2", Version = "", EntryPoint = "glExtGetShadersQCOM")]
            [CLSCompliant(false)]
            public static void ExtGetShaders([OutAttribute] Int32[] shaders, Int32 maxShaders, [OutAttribute] out Int32 numShaders) { throw new NotImplementedException(); }

            /// <summary>[requires: QCOM_extended_get2]</summary>
            [Obsolete("Use out overload instead")]
            [AutoGenerated(Category = "QCOM_extended_get2", Version = "", EntryPoint = "glExtGetShadersQCOM")]
            [CLSCompliant(false)]
            public static void ExtGetShaders([OutAttribute] out Int32 shaders, Int32 maxShaders, [OutAttribute] out Int32 numShaders) { throw new NotImplementedException(); }

            /// <summary>[requires: QCOM_extended_get2]</summary>
            [Obsolete("Use out overload instead")]
            [AutoGenerated(Category = "QCOM_extended_get2", Version = "", EntryPoint = "glExtGetShadersQCOM")]
            [CLSCompliant(false)]
            public static unsafe void ExtGetShaders([OutAttribute] Int32* shaders, Int32 maxShaders, [OutAttribute] Int32* numShaders) { throw new NotImplementedException(); }

            /// <summary>[requires: QCOM_extended_get2]</summary>
            [Obsolete("Use out overload instead")]
            [AutoGenerated(Category = "QCOM_extended_get2", Version = "", EntryPoint = "glExtGetShadersQCOM")]
            [CLSCompliant(false)]
            public static void ExtGetShaders([OutAttribute] UInt32[] shaders, Int32 maxShaders, [OutAttribute] Int32[] numShaders) { throw new NotImplementedException(); }

            /// <summary>[requires: QCOM_extended_get2]</summary>
            [AutoGenerated(Category = "QCOM_extended_get2", Version = "", EntryPoint = "glExtGetShadersQCOM")]
            [CLSCompliant(false)]
            public static void ExtGetShaders([OutAttribute] UInt32[] shaders, Int32 maxShaders, [OutAttribute] out Int32 numShaders) { throw new NotImplementedException(); }

            /// <summary>[requires: QCOM_extended_get2]</summary>
            [Obsolete("Use out overload instead")]
            [AutoGenerated(Category = "QCOM_extended_get2", Version = "", EntryPoint = "glExtGetShadersQCOM")]
            [CLSCompliant(false)]
            public static void ExtGetShaders([OutAttribute] out UInt32 shaders, Int32 maxShaders, [OutAttribute] out Int32 numShaders) { throw new NotImplementedException(); }

            /// <summary>[requires: QCOM_extended_get2]</summary>
            [Obsolete("Use out overload instead")]
            [AutoGenerated(Category = "QCOM_extended_get2", Version = "", EntryPoint = "glExtGetShadersQCOM")]
            [CLSCompliant(false)]
            public static unsafe void ExtGetShaders([OutAttribute] UInt32* shaders, Int32 maxShaders, [OutAttribute] Int32* numShaders) { throw new NotImplementedException(); }

            /// <summary>[requires: QCOM_extended_get]</summary>
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetTexLevelParameterivQCOM")]
            [CLSCompliant(false)]
            public static void ExtGetTexLevelParameter(Int32 texture, OpenTK.Graphics.ES30.All face, Int32 level, OpenTK.Graphics.ES30.All pname, [OutAttribute] Int32[] @params) { throw new NotImplementedException(); }

            /// <summary>[requires: QCOM_extended_get]</summary>
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetTexLevelParameterivQCOM")]
            [CLSCompliant(false)]
            public static void ExtGetTexLevelParameter(Int32 texture, OpenTK.Graphics.ES30.All face, Int32 level, OpenTK.Graphics.ES30.All pname, [OutAttribute] out Int32 @params) { throw new NotImplementedException(); }

            /// <summary>[requires: QCOM_extended_get]</summary>
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetTexLevelParameterivQCOM")]
            [CLSCompliant(false)]
            public static unsafe void ExtGetTexLevelParameter(Int32 texture, OpenTK.Graphics.ES30.All face, Int32 level, OpenTK.Graphics.ES30.All pname, [OutAttribute] Int32* @params) { throw new NotImplementedException(); }

            /// <summary>[requires: QCOM_extended_get]</summary>
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetTexLevelParameterivQCOM")]
            [CLSCompliant(false)]
            public static void ExtGetTexLevelParameter(UInt32 texture, OpenTK.Graphics.ES30.All face, Int32 level, OpenTK.Graphics.ES30.All pname, [OutAttribute] Int32[] @params) { throw new NotImplementedException(); }

            /// <summary>[requires: QCOM_extended_get]</summary>
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetTexLevelParameterivQCOM")]
            [CLSCompliant(false)]
            public static void ExtGetTexLevelParameter(UInt32 texture, OpenTK.Graphics.ES30.All face, Int32 level, OpenTK.Graphics.ES30.All pname, [OutAttribute] out Int32 @params) { throw new NotImplementedException(); }

            /// <summary>[requires: QCOM_extended_get]</summary>
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetTexLevelParameterivQCOM")]
            [CLSCompliant(false)]
            public static unsafe void ExtGetTexLevelParameter(UInt32 texture, OpenTK.Graphics.ES30.All face, Int32 level, OpenTK.Graphics.ES30.All pname, [OutAttribute] Int32* @params) { throw new NotImplementedException(); }

            /// <summary>[requires: QCOM_extended_get]</summary>
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetTexSubImageQCOM")]
            public static void ExtGetTexSubImage(OpenTK.Graphics.ES30.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.ES30.All format, OpenTK.Graphics.ES30.All type, [OutAttribute] IntPtr texels) { throw new NotImplementedException(); }

            /// <summary>[requires: QCOM_extended_get]</summary>
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetTexSubImageQCOM")]
            [CLSCompliant(false)]
            public static void ExtGetTexSubImage<T10>(OpenTK.Graphics.ES30.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.ES30.All format, OpenTK.Graphics.ES30.All type, [InAttribute, OutAttribute] T10[] texels)
                where T10 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: QCOM_extended_get]</summary>
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetTexSubImageQCOM")]
            [CLSCompliant(false)]
            public static void ExtGetTexSubImage<T10>(OpenTK.Graphics.ES30.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.ES30.All format, OpenTK.Graphics.ES30.All type, [InAttribute, OutAttribute] T10[,] texels)
                where T10 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: QCOM_extended_get]</summary>
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetTexSubImageQCOM")]
            [CLSCompliant(false)]
            public static void ExtGetTexSubImage<T10>(OpenTK.Graphics.ES30.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.ES30.All format, OpenTK.Graphics.ES30.All type, [InAttribute, OutAttribute] T10[,,] texels)
                where T10 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: QCOM_extended_get]</summary>
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetTexSubImageQCOM")]
            public static void ExtGetTexSubImage<T10>(OpenTK.Graphics.ES30.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.ES30.All format, OpenTK.Graphics.ES30.All type, [InAttribute, OutAttribute] ref T10 texels)
                where T10 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: QCOM_extended_get]</summary>
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetTexturesQCOM")]
            [CLSCompliant(false)]
            public static void ExtGetTextures([OutAttribute] Int32[] textures, Int32 maxTextures, [OutAttribute] Int32[] numTextures) { throw new NotImplementedException(); }

            /// <summary>[requires: QCOM_extended_get]</summary>
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetTexturesQCOM")]
            [CLSCompliant(false)]
            public static void ExtGetTextures([OutAttribute] out Int32 textures, Int32 maxTextures, [OutAttribute] out Int32 numTextures) { throw new NotImplementedException(); }

            /// <summary>[requires: QCOM_extended_get]</summary>
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetTexturesQCOM")]
            [CLSCompliant(false)]
            public static unsafe void ExtGetTextures([OutAttribute] Int32* textures, Int32 maxTextures, [OutAttribute] Int32* numTextures) { throw new NotImplementedException(); }

            /// <summary>[requires: QCOM_extended_get]</summary>
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetTexturesQCOM")]
            [CLSCompliant(false)]
            public static void ExtGetTextures([OutAttribute] UInt32[] textures, Int32 maxTextures, [OutAttribute] Int32[] numTextures) { throw new NotImplementedException(); }

            /// <summary>[requires: QCOM_extended_get]</summary>
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetTexturesQCOM")]
            [CLSCompliant(false)]
            public static void ExtGetTextures([OutAttribute] out UInt32 textures, Int32 maxTextures, [OutAttribute] out Int32 numTextures) { throw new NotImplementedException(); }

            /// <summary>[requires: QCOM_extended_get]</summary>
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtGetTexturesQCOM")]
            [CLSCompliant(false)]
            public static unsafe void ExtGetTextures([OutAttribute] UInt32* textures, Int32 maxTextures, [OutAttribute] Int32* numTextures) { throw new NotImplementedException(); }

            /// <summary>[requires: QCOM_extended_get2]</summary>
            [AutoGenerated(Category = "QCOM_extended_get2", Version = "", EntryPoint = "glExtIsProgramBinaryQCOM")]
            [CLSCompliant(false)]
            public static bool ExtIsProgramBinary(Int32 program) { throw new NotImplementedException(); }

            /// <summary>[requires: QCOM_extended_get2]</summary>
            [AutoGenerated(Category = "QCOM_extended_get2", Version = "", EntryPoint = "glExtIsProgramBinaryQCOM")]
            [CLSCompliant(false)]
            public static bool ExtIsProgramBinary(UInt32 program) { throw new NotImplementedException(); }

            /// <summary>[requires: QCOM_extended_get]</summary>
            [AutoGenerated(Category = "QCOM_extended_get", Version = "", EntryPoint = "glExtTexObjectStateOverrideiQCOM")]
            public static void ExtTexObjectStateOverride(OpenTK.Graphics.ES30.All target, OpenTK.Graphics.ES30.All pname, Int32 param) { throw new NotImplementedException(); }

            /// <summary>[requires: QCOM_driver_control]</summary>
            [AutoGenerated(Category = "QCOM_driver_control", Version = "", EntryPoint = "glGetDriverControlsQCOM")]
            [CLSCompliant(false)]
            public static void GetDriverControl([OutAttribute] Int32[] num, Int32 size, [OutAttribute] Int32[] driverControls) { throw new NotImplementedException(); }

            /// <summary>[requires: QCOM_driver_control]</summary>
            [AutoGenerated(Category = "QCOM_driver_control", Version = "", EntryPoint = "glGetDriverControlsQCOM")]
            [CLSCompliant(false)]
            public static void GetDriverControl([OutAttribute] Int32[] num, Int32 size, [OutAttribute] UInt32[] driverControls) { throw new NotImplementedException(); }

            /// <summary>[requires: QCOM_driver_control]</summary>
            [AutoGenerated(Category = "QCOM_driver_control", Version = "", EntryPoint = "glGetDriverControlsQCOM")]
            [CLSCompliant(false)]
            public static void GetDriverControl([OutAttribute] out Int32 num, Int32 size, [OutAttribute] out Int32 driverControls) { throw new NotImplementedException(); }

            /// <summary>[requires: QCOM_driver_control]</summary>
            [AutoGenerated(Category = "QCOM_driver_control", Version = "", EntryPoint = "glGetDriverControlsQCOM")]
            [CLSCompliant(false)]
            public static void GetDriverControl([OutAttribute] out Int32 num, Int32 size, [OutAttribute] out UInt32 driverControls) { throw new NotImplementedException(); }

            /// <summary>[requires: QCOM_driver_control]</summary>
            [AutoGenerated(Category = "QCOM_driver_control", Version = "", EntryPoint = "glGetDriverControlsQCOM")]
            [CLSCompliant(false)]
            public static unsafe void GetDriverControl([OutAttribute] Int32* num, Int32 size, [OutAttribute] Int32* driverControls) { throw new NotImplementedException(); }

            /// <summary>[requires: QCOM_driver_control]</summary>
            [AutoGenerated(Category = "QCOM_driver_control", Version = "", EntryPoint = "glGetDriverControlsQCOM")]
            [CLSCompliant(false)]
            public static unsafe void GetDriverControl([OutAttribute] Int32* num, Int32 size, [OutAttribute] UInt32* driverControls) { throw new NotImplementedException(); }

            /// <summary>[requires: QCOM_driver_control]</summary>
            [AutoGenerated(Category = "QCOM_driver_control", Version = "", EntryPoint = "glGetDriverControlStringQCOM")]
            [CLSCompliant(false)]
            public static void GetDriverControlString(Int32 driverControl, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute] StringBuilder driverControlString) { throw new NotImplementedException(); }

            /// <summary>[requires: QCOM_driver_control]</summary>
            [AutoGenerated(Category = "QCOM_driver_control", Version = "", EntryPoint = "glGetDriverControlStringQCOM")]
            [CLSCompliant(false)]
            public static void GetDriverControlString(Int32 driverControl, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder driverControlString) { throw new NotImplementedException(); }

            /// <summary>[requires: QCOM_driver_control]</summary>
            [AutoGenerated(Category = "QCOM_driver_control", Version = "", EntryPoint = "glGetDriverControlStringQCOM")]
            [CLSCompliant(false)]
            public static unsafe void GetDriverControlString(Int32 driverControl, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder driverControlString) { throw new NotImplementedException(); }

            /// <summary>[requires: QCOM_driver_control]</summary>
            [AutoGenerated(Category = "QCOM_driver_control", Version = "", EntryPoint = "glGetDriverControlStringQCOM")]
            [CLSCompliant(false)]
            public static void GetDriverControlString(UInt32 driverControl, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute] StringBuilder driverControlString) { throw new NotImplementedException(); }

            /// <summary>[requires: QCOM_driver_control]</summary>
            [AutoGenerated(Category = "QCOM_driver_control", Version = "", EntryPoint = "glGetDriverControlStringQCOM")]
            [CLSCompliant(false)]
            public static void GetDriverControlString(UInt32 driverControl, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder driverControlString) { throw new NotImplementedException(); }

            /// <summary>[requires: QCOM_driver_control]</summary>
            [AutoGenerated(Category = "QCOM_driver_control", Version = "", EntryPoint = "glGetDriverControlStringQCOM")]
            [CLSCompliant(false)]
            public static unsafe void GetDriverControlString(UInt32 driverControl, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder driverControlString) { throw new NotImplementedException(); }

            /// <summary>[requires: QCOM_tiled_rendering]</summary>
            [AutoGenerated(Category = "QCOM_tiled_rendering", Version = "", EntryPoint = "glStartTilingQCOM")]
            [CLSCompliant(false)]
            public static void StartTiling(Int32 x, Int32 y, Int32 width, Int32 height, Int32 preserveMask) { throw new NotImplementedException(); }

            /// <summary>[requires: QCOM_tiled_rendering]</summary>
            [AutoGenerated(Category = "QCOM_tiled_rendering", Version = "", EntryPoint = "glStartTilingQCOM")]
            [CLSCompliant(false)]
            public static void StartTiling(UInt32 x, UInt32 y, UInt32 width, UInt32 height, UInt32 preserveMask) { throw new NotImplementedException(); }

        }

        [Slot(5)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glBeginPerfMonitorAMD(UInt32 monitor);
        [Slot(78)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glDeletePerfMonitorsAMD(Int32 n, UInt32* monitors);
        [Slot(121)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glEndPerfMonitorAMD(UInt32 monitor);
        [Slot(157)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGenPerfMonitorsAMD(Int32 n, [OutAttribute] UInt32* monitors);
        [Slot(206)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetPerfMonitorCounterDataAMD(UInt32 monitor, System.Int32 pname, Int32 dataSize, [OutAttribute] UInt32* data, [OutAttribute] Int32* bytesWritten);
        [Slot(207)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glGetPerfMonitorCounterInfoAMD(UInt32 group, UInt32 counter, System.Int32 pname, [OutAttribute] IntPtr data);
        [Slot(208)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetPerfMonitorCountersAMD(UInt32 group, [OutAttribute] Int32* numCounters, [OutAttribute] Int32* maxActiveCounters, Int32 counterSize, [OutAttribute] UInt32* counters);
        [Slot(209)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetPerfMonitorCounterStringAMD(UInt32 group, UInt32 counter, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] IntPtr counterString);
        [Slot(210)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetPerfMonitorGroupsAMD([OutAttribute] Int32* numGroups, Int32 groupsSize, [OutAttribute] UInt32* groups);
        [Slot(211)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetPerfMonitorGroupStringAMD(UInt32 group, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] IntPtr groupString);
        [Slot(357)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glSelectPerfMonitorCountersAMD(UInt32 monitor, bool enable, UInt32 group, Int32 numCounters, [OutAttribute] UInt32* counterList);
        [Slot(31)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glBlitFramebufferANGLE(Int32 srcX0, Int32 srcY0, Int32 srcX1, Int32 srcY1, Int32 dstX0, Int32 dstY0, Int32 dstX1, Int32 dstY1, System.Int32 mask, System.Int32 filter);
        [Slot(103)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glDrawArraysInstancedANGLE(System.Int32 mode, Int32 first, Int32 count, Int32 primcount);
        [Slot(112)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glDrawElementsInstancedANGLE(System.Int32 mode, Int32 count, System.Int32 type, IntPtr indices, Int32 primcount);
        [Slot(244)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetTranslatedShaderSourceANGLE(UInt32 shader, Int32 bufsize, [OutAttribute] Int32* length, [OutAttribute] IntPtr source);
        [Slot(344)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glRenderbufferStorageMultisampleANGLE(System.Int32 target, Int32 samples, System.Int32 internalformat, Int32 width, Int32 height);
        [Slot(444)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glVertexAttribDivisorANGLE(UInt32 index, UInt32 divisor);
        [Slot(45)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern System.Int32 glClientWaitSyncAPPLE(IntPtr sync, System.Int32 flags, UInt64 timeout);
        [Slot(60)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glCopyTextureLevelsAPPLE(UInt32 destinationTexture, UInt32 sourceTexture, Int32 sourceBaseLevel, Int32 sourceLevelCount);
        [Slot(88)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glDeleteSyncAPPLE(IntPtr sync);
        [Slot(140)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern IntPtr glFenceSyncAPPLE(System.Int32 condition, System.Int32 flags);
        [Slot(192)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetInteger64vAPPLE(System.Int32 pname, [OutAttribute] Int64* @params);
        [Slot(240)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetSyncivAPPLE(IntPtr sync, System.Int32 pname, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] Int32* values);
        [Slot(272)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern bool glIsSyncAPPLE(IntPtr sync);
        [Slot(345)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glRenderbufferStorageMultisampleAPPLE(System.Int32 target, Int32 samples, System.Int32 internalformat, Int32 width, Int32 height);
        [Slot(349)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glResolveMultisampleFramebufferAPPLE();
        [Slot(455)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glWaitSyncAPPLE(IntPtr sync, System.Int32 flags, UInt64 timeout);
        [Slot(2)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glActiveTexture(System.Int32 texture);
        [Slot(4)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glAttachShader(UInt32 program, UInt32 shader);
        [Slot(7)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glBeginQuery(System.Int32 target, UInt32 id);
        [Slot(9)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glBeginTransformFeedback(System.Int32 primitiveMode);
        [Slot(10)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glBindAttribLocation(UInt32 program, UInt32 index, IntPtr name);
        [Slot(11)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glBindBuffer(System.Int32 target, UInt32 buffer);
        [Slot(12)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glBindBufferBase(System.Int32 target, UInt32 index, UInt32 buffer);
        [Slot(13)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glBindBufferRange(System.Int32 target, UInt32 index, UInt32 buffer, IntPtr offset, IntPtr size);
        [Slot(14)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glBindFramebuffer(System.Int32 target, UInt32 framebuffer);
        [Slot(16)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glBindRenderbuffer(System.Int32 target, UInt32 renderbuffer);
        [Slot(17)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glBindSampler(UInt32 unit, UInt32 sampler);
        [Slot(18)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glBindTexture(System.Int32 target, UInt32 texture);
        [Slot(19)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glBindTransformFeedback(System.Int32 target, UInt32 id);
        [Slot(20)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glBindVertexArray(UInt32 array);
        [Slot(23)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glBlendColor(Single red, Single green, Single blue, Single alpha);
        [Slot(24)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glBlendEquation(System.Int32 mode);
        [Slot(26)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glBlendEquationSeparate(System.Int32 modeRGB, System.Int32 modeAlpha);
        [Slot(27)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glBlendFunc(System.Int32 sfactor, System.Int32 dfactor);
        [Slot(28)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glBlendFuncSeparate(System.Int32 sfactorRGB, System.Int32 dfactorRGB, System.Int32 sfactorAlpha, System.Int32 dfactorAlpha);
        [Slot(30)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glBlitFramebuffer(Int32 srcX0, Int32 srcY0, Int32 srcX1, Int32 srcY1, Int32 dstX0, Int32 dstY0, Int32 dstX1, Int32 dstY1, System.Int32 mask, System.Int32 filter);
        [Slot(33)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glBufferData(System.Int32 target, IntPtr size, IntPtr data, System.Int32 usage);
        [Slot(34)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glBufferSubData(System.Int32 target, IntPtr offset, IntPtr size, IntPtr data);
        [Slot(35)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern System.Int32 glCheckFramebufferStatus(System.Int32 target);
        [Slot(36)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glClear(System.Int32 mask);
        [Slot(37)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glClearBufferfi(System.Int32 buffer, Int32 drawbuffer, Single depth, Int32 stencil);
        [Slot(38)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glClearBufferfv(System.Int32 buffer, Int32 drawbuffer, Single* value);
        [Slot(39)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glClearBufferiv(System.Int32 buffer, Int32 drawbuffer, Int32* value);
        [Slot(40)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glClearBufferuiv(System.Int32 buffer, Int32 drawbuffer, UInt32* value);
        [Slot(41)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glClearColor(Single red, Single green, Single blue, Single alpha);
        [Slot(42)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glClearDepthf(Single d);
        [Slot(43)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glClearStencil(Int32 s);
        [Slot(44)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern System.Int32 glClientWaitSync(IntPtr sync, System.Int32 flags, UInt64 timeout);
        [Slot(46)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glColorMask(bool red, bool green, bool blue, bool alpha);
        [Slot(47)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glCompileShader(UInt32 shader);
        [Slot(48)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glCompressedTexImage2D(System.Int32 target, Int32 level, System.Int32 internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, IntPtr data);
        [Slot(49)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glCompressedTexImage3D(System.Int32 target, Int32 level, System.Int32 internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, IntPtr data);
        [Slot(51)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glCompressedTexSubImage2D(System.Int32 target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, System.Int32 format, Int32 imageSize, IntPtr data);
        [Slot(52)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glCompressedTexSubImage3D(System.Int32 target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, System.Int32 format, Int32 imageSize, IntPtr data);
        [Slot(54)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glCopyBufferSubData(System.Int32 readTarget, System.Int32 writeTarget, IntPtr readOffset, IntPtr writeOffset, IntPtr size);
        [Slot(56)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glCopyTexImage2D(System.Int32 target, Int32 level, System.Int32 internalformat, Int32 x, Int32 y, Int32 width, Int32 height, Int32 border);
        [Slot(57)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glCopyTexSubImage2D(System.Int32 target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 x, Int32 y, Int32 width, Int32 height);
        [Slot(58)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glCopyTexSubImage3D(System.Int32 target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 x, Int32 y, Int32 width, Int32 height);
        [Slot(64)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern Int32 glCreateProgram();
        [Slot(65)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern Int32 glCreateShader(System.Int32 type);
        [Slot(68)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glCullFace(System.Int32 mode);
        [Slot(69)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glDebugMessageCallback(DebugProc callback, IntPtr userParam);
        [Slot(71)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glDebugMessageControl(System.Int32 source, System.Int32 type, System.Int32 severity, Int32 count, UInt32* ids, bool enabled);
        [Slot(73)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glDebugMessageInsert(System.Int32 source, System.Int32 type, UInt32 id, System.Int32 severity, Int32 length, IntPtr buf);
        [Slot(75)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glDeleteBuffers(Int32 n, UInt32* buffers);
        [Slot(77)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glDeleteFramebuffers(Int32 n, UInt32* framebuffers);
        [Slot(80)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glDeleteProgram(UInt32 program);
        [Slot(82)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glDeleteQueries(Int32 n, UInt32* ids);
        [Slot(84)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glDeleteRenderbuffers(Int32 n, UInt32* renderbuffers);
        [Slot(85)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glDeleteSamplers(Int32 count, UInt32* samplers);
        [Slot(86)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glDeleteShader(UInt32 shader);
        [Slot(87)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glDeleteSync(IntPtr sync);
        [Slot(89)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glDeleteTextures(Int32 n, UInt32* textures);
        [Slot(90)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glDeleteTransformFeedbacks(Int32 n, UInt32* ids);
        [Slot(91)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glDeleteVertexArrays(Int32 n, UInt32* arrays);
        [Slot(93)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glDepthFunc(System.Int32 func);
        [Slot(94)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glDepthMask(bool flag);
        [Slot(95)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glDepthRangef(Single n, Single f);
        [Slot(96)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glDetachShader(UInt32 program, UInt32 shader);
        [Slot(97)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glDisable(System.Int32 cap);
        [Slot(99)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glDisableVertexAttribArray(UInt32 index);
        [Slot(101)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glDrawArrays(System.Int32 mode, Int32 first, Int32 count);
        [Slot(102)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glDrawArraysInstanced(System.Int32 mode, Int32 first, Int32 count, Int32 instancecount);
        [Slot(106)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glDrawBuffers(Int32 n, System.Int32* bufs);
        [Slot(110)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glDrawElements(System.Int32 mode, Int32 count, System.Int32 type, IntPtr indices);
        [Slot(111)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glDrawElementsInstanced(System.Int32 mode, Int32 count, System.Int32 type, IntPtr indices, Int32 instancecount);
        [Slot(115)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glDrawRangeElements(System.Int32 mode, UInt32 start, UInt32 end, Int32 count, System.Int32 type, IntPtr indices);
        [Slot(118)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glEnable(System.Int32 cap);
        [Slot(120)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glEnableVertexAttribArray(UInt32 index);
        [Slot(123)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glEndQuery(System.Int32 target);
        [Slot(126)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glEndTransformFeedback();
        [Slot(139)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern IntPtr glFenceSync(System.Int32 condition, System.Int32 flags);
        [Slot(141)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glFinish();
        [Slot(143)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glFlush();
        [Slot(144)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glFlushMappedBufferRange(System.Int32 target, IntPtr offset, IntPtr length);
        [Slot(146)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glFramebufferRenderbuffer(System.Int32 target, System.Int32 attachment, System.Int32 renderbuffertarget, UInt32 renderbuffer);
        [Slot(147)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glFramebufferTexture2D(System.Int32 target, System.Int32 attachment, System.Int32 textarget, UInt32 texture, Int32 level);
        [Slot(151)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glFramebufferTextureLayer(System.Int32 target, System.Int32 attachment, UInt32 texture, Int32 level, Int32 layer);
        [Slot(152)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glFrontFace(System.Int32 mode);
        [Slot(153)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGenBuffers(Int32 n, [OutAttribute] UInt32* buffers);
        [Slot(154)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glGenerateMipmap(System.Int32 target);
        [Slot(156)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGenFramebuffers(Int32 n, [OutAttribute] UInt32* framebuffers);
        [Slot(159)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGenQueries(Int32 n, [OutAttribute] UInt32* ids);
        [Slot(161)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGenRenderbuffers(Int32 n, [OutAttribute] UInt32* renderbuffers);
        [Slot(162)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGenSamplers(Int32 count, [OutAttribute] UInt32* samplers);
        [Slot(163)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGenTextures(Int32 n, [OutAttribute] UInt32* textures);
        [Slot(164)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGenTransformFeedbacks(Int32 n, [OutAttribute] UInt32* ids);
        [Slot(165)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGenVertexArrays(Int32 n, [OutAttribute] UInt32* arrays);
        [Slot(167)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetActiveAttrib(UInt32 program, UInt32 index, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] Int32* size, [OutAttribute] System.Int32* type, [OutAttribute] IntPtr name);
        [Slot(168)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetActiveUniform(UInt32 program, UInt32 index, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] Int32* size, [OutAttribute] System.Int32* type, [OutAttribute] IntPtr name);
        [Slot(169)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetActiveUniformBlockiv(UInt32 program, UInt32 uniformBlockIndex, System.Int32 pname, [OutAttribute] Int32* @params);
        [Slot(170)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetActiveUniformBlockName(UInt32 program, UInt32 uniformBlockIndex, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] IntPtr uniformBlockName);
        [Slot(171)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetActiveUniformsiv(UInt32 program, Int32 uniformCount, UInt32* uniformIndices, System.Int32 pname, [OutAttribute] Int32* @params);
        [Slot(172)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetAttachedShaders(UInt32 program, Int32 maxCount, [OutAttribute] Int32* count, [OutAttribute] UInt32* shaders);
        [Slot(173)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern Int32 glGetAttribLocation(UInt32 program, IntPtr name);
        [Slot(174)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetBooleanv(System.Int32 pname, [OutAttribute] bool* data);
        [Slot(175)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetBufferParameteri64v(System.Int32 target, System.Int32 pname, [OutAttribute] Int64* @params);
        [Slot(176)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetBufferParameteriv(System.Int32 target, System.Int32 pname, [OutAttribute] Int32* @params);
        [Slot(177)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glGetBufferPointerv(System.Int32 target, System.Int32 pname, [OutAttribute] IntPtr @params);
        [Slot(179)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe Int32 glGetDebugMessageLog(UInt32 count, Int32 bufSize, [OutAttribute] System.Int32* sources, [OutAttribute] System.Int32* types, [OutAttribute] UInt32* ids, [OutAttribute] System.Int32* severities, [OutAttribute] Int32* lengths, [OutAttribute] IntPtr messageLog);
        [Slot(183)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern System.Int32 glGetError();
        [Slot(186)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetFloatv(System.Int32 pname, [OutAttribute] Single* data);
        [Slot(187)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern Int32 glGetFragDataLocation(UInt32 program, IntPtr name);
        [Slot(188)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetFramebufferAttachmentParameteriv(System.Int32 target, System.Int32 attachment, System.Int32 pname, [OutAttribute] Int32* @params);
        [Slot(190)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetInteger64i_v(System.Int32 target, UInt32 index, [OutAttribute] Int64* data);
        [Slot(191)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetInteger64v(System.Int32 pname, [OutAttribute] Int64* data);
        [Slot(193)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetIntegeri_v(System.Int32 target, UInt32 index, [OutAttribute] Int32* data);
        [Slot(195)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetIntegerv(System.Int32 pname, [OutAttribute] Int32* data);
        [Slot(196)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetInternalformativ(System.Int32 target, System.Int32 internalformat, System.Int32 pname, Int32 bufSize, [OutAttribute] Int32* @params);
        [Slot(200)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetObjectLabel(System.Int32 identifier, UInt32 name, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] IntPtr label);
        [Slot(203)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetObjectPtrLabel(IntPtr ptr, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] IntPtr label);
        [Slot(215)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glGetPointerv(System.Int32 pname, [OutAttribute] IntPtr @params);
        [Slot(217)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetProgramBinary(UInt32 program, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] System.Int32* binaryFormat, [OutAttribute] IntPtr binary);
        [Slot(219)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetProgramInfoLog(UInt32 program, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] IntPtr infoLog);
        [Slot(220)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetProgramiv(UInt32 program, System.Int32 pname, [OutAttribute] Int32* @params);
        [Slot(223)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetQueryiv(System.Int32 target, System.Int32 pname, [OutAttribute] Int32* @params);
        [Slot(228)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetQueryObjectuiv(UInt32 id, System.Int32 pname, [OutAttribute] UInt32* @params);
        [Slot(230)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetRenderbufferParameteriv(System.Int32 target, System.Int32 pname, [OutAttribute] Int32* @params);
        [Slot(231)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetSamplerParameterfv(UInt32 sampler, System.Int32 pname, [OutAttribute] Single* @params);
        [Slot(232)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetSamplerParameteriv(UInt32 sampler, System.Int32 pname, [OutAttribute] Int32* @params);
        [Slot(233)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetShaderInfoLog(UInt32 shader, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] IntPtr infoLog);
        [Slot(234)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetShaderiv(UInt32 shader, System.Int32 pname, [OutAttribute] Int32* @params);
        [Slot(235)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetShaderPrecisionFormat(System.Int32 shadertype, System.Int32 precisiontype, [OutAttribute] Int32* range, [OutAttribute] Int32* precision);
        [Slot(236)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetShaderSource(UInt32 shader, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] IntPtr source);
        [Slot(237)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern IntPtr glGetString(System.Int32 name);
        [Slot(238)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern IntPtr glGetStringi(System.Int32 name, UInt32 index);
        [Slot(239)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetSynciv(IntPtr sync, System.Int32 pname, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] Int32* values);
        [Slot(241)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetTexParameterfv(System.Int32 target, System.Int32 pname, [OutAttribute] Single* @params);
        [Slot(242)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetTexParameteriv(System.Int32 target, System.Int32 pname, [OutAttribute] Int32* @params);
        [Slot(243)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetTransformFeedbackVarying(UInt32 program, UInt32 index, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] Int32* size, [OutAttribute] System.Int32* type, [OutAttribute] IntPtr name);
        [Slot(245)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern Int32 glGetUniformBlockIndex(UInt32 program, IntPtr uniformBlockName);
        [Slot(246)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetUniformfv(UInt32 program, Int32 location, [OutAttribute] Single* @params);
        [Slot(247)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetUniformIndices(UInt32 program, Int32 uniformCount, IntPtr uniformNames, [OutAttribute] UInt32* uniformIndices);
        [Slot(248)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetUniformiv(UInt32 program, Int32 location, [OutAttribute] Int32* @params);
        [Slot(249)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern Int32 glGetUniformLocation(UInt32 program, IntPtr name);
        [Slot(250)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetUniformuiv(UInt32 program, Int32 location, [OutAttribute] UInt32* @params);
        [Slot(251)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetVertexAttribfv(UInt32 index, System.Int32 pname, [OutAttribute] Single* @params);
        [Slot(252)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetVertexAttribIiv(UInt32 index, System.Int32 pname, [OutAttribute] Int32* @params);
        [Slot(253)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetVertexAttribIuiv(UInt32 index, System.Int32 pname, [OutAttribute] UInt32* @params);
        [Slot(254)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetVertexAttribiv(UInt32 index, System.Int32 pname, [OutAttribute] Int32* @params);
        [Slot(255)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glGetVertexAttribPointerv(UInt32 index, System.Int32 pname, [OutAttribute] IntPtr pointer);
        [Slot(256)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glHint(System.Int32 target, System.Int32 mode);
        [Slot(258)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glInvalidateFramebuffer(System.Int32 target, Int32 numAttachments, System.Int32* attachments);
        [Slot(259)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glInvalidateSubFramebuffer(System.Int32 target, Int32 numAttachments, System.Int32* attachments, Int32 x, Int32 y, Int32 width, Int32 height);
        [Slot(260)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern bool glIsBuffer(UInt32 buffer);
        [Slot(261)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern bool glIsEnabled(System.Int32 cap);
        [Slot(263)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern bool glIsFramebuffer(UInt32 framebuffer);
        [Slot(264)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern bool glIsProgram(UInt32 program);
        [Slot(266)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern bool glIsQuery(UInt32 id);
        [Slot(268)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern bool glIsRenderbuffer(UInt32 renderbuffer);
        [Slot(269)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern bool glIsSampler(UInt32 sampler);
        [Slot(270)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern bool glIsShader(UInt32 shader);
        [Slot(271)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern bool glIsSync(IntPtr sync);
        [Slot(273)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern bool glIsTexture(UInt32 texture);
        [Slot(274)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern bool glIsTransformFeedback(UInt32 id);
        [Slot(275)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern bool glIsVertexArray(UInt32 array);
        [Slot(278)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glLineWidth(Single width);
        [Slot(279)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glLinkProgram(UInt32 program);
        [Slot(281)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern IntPtr glMapBufferRange(System.Int32 target, IntPtr offset, IntPtr length, System.Int32 access);
        [Slot(285)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glObjectLabel(System.Int32 identifier, UInt32 name, Int32 length, IntPtr label);
        [Slot(287)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glObjectPtrLabel(IntPtr ptr, Int32 length, IntPtr label);
        [Slot(289)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glPauseTransformFeedback();
        [Slot(290)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glPixelStorei(System.Int32 pname, Int32 param);
        [Slot(291)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glPolygonOffset(Single factor, Single units);
        [Slot(292)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glPopDebugGroup();
        [Slot(295)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glProgramBinary(UInt32 program, System.Int32 binaryFormat, IntPtr binary, Int32 length);
        [Slot(297)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glProgramParameteri(UInt32 program, System.Int32 pname, Int32 value);
        [Slot(332)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glPushDebugGroup(System.Int32 source, UInt32 id, Int32 length, IntPtr message);
        [Slot(336)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glReadBuffer(System.Int32 mode);
        [Slot(340)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glReadPixels(Int32 x, Int32 y, Int32 width, Int32 height, System.Int32 format, System.Int32 type, [OutAttribute] IntPtr pixels);
        [Slot(341)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glReleaseShaderCompiler();
        [Slot(342)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glRenderbufferStorage(System.Int32 target, System.Int32 internalformat, Int32 width, Int32 height);
        [Slot(343)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glRenderbufferStorageMultisample(System.Int32 target, Int32 samples, System.Int32 internalformat, Int32 width, Int32 height);
        [Slot(350)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glResumeTransformFeedback();
        [Slot(351)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glSampleCoverage(Single value, bool invert);
        [Slot(352)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glSamplerParameterf(UInt32 sampler, System.Int32 pname, Single param);
        [Slot(353)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glSamplerParameterfv(UInt32 sampler, System.Int32 pname, Single* param);
        [Slot(354)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glSamplerParameteri(UInt32 sampler, System.Int32 pname, Int32 param);
        [Slot(355)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glSamplerParameteriv(UInt32 sampler, System.Int32 pname, Int32* param);
        [Slot(356)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glScissor(Int32 x, Int32 y, Int32 width, Int32 height);
        [Slot(359)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glShaderBinary(Int32 count, UInt32* shaders, System.Int32 binaryformat, IntPtr binary, Int32 length);
        [Slot(360)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glShaderSource(UInt32 shader, Int32 count, IntPtr @string, Int32* length);
        [Slot(362)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glStencilFunc(System.Int32 func, Int32 @ref, UInt32 mask);
        [Slot(363)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glStencilFuncSeparate(System.Int32 face, System.Int32 func, Int32 @ref, UInt32 mask);
        [Slot(364)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glStencilMask(UInt32 mask);
        [Slot(365)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glStencilMaskSeparate(System.Int32 face, UInt32 mask);
        [Slot(366)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glStencilOp(System.Int32 fail, System.Int32 zfail, System.Int32 zpass);
        [Slot(367)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glStencilOpSeparate(System.Int32 face, System.Int32 sfail, System.Int32 dpfail, System.Int32 dppass);
        [Slot(369)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glTexImage2D(System.Int32 target, Int32 level, System.Int32 internalformat, Int32 width, Int32 height, Int32 border, System.Int32 format, System.Int32 type, IntPtr pixels);
        [Slot(370)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glTexImage3D(System.Int32 target, Int32 level, System.Int32 internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, System.Int32 format, System.Int32 type, IntPtr pixels);
        [Slot(372)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glTexParameterf(System.Int32 target, System.Int32 pname, Single param);
        [Slot(373)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glTexParameterfv(System.Int32 target, System.Int32 pname, Single* @params);
        [Slot(374)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glTexParameteri(System.Int32 target, System.Int32 pname, Int32 param);
        [Slot(375)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glTexParameteriv(System.Int32 target, System.Int32 pname, Int32* @params);
        [Slot(377)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glTexStorage2D(System.Int32 target, Int32 levels, System.Int32 internalformat, Int32 width, Int32 height);
        [Slot(379)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glTexStorage3D(System.Int32 target, Int32 levels, System.Int32 internalformat, Int32 width, Int32 height, Int32 depth);
        [Slot(381)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glTexSubImage2D(System.Int32 target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, System.Int32 format, System.Int32 type, IntPtr pixels);
        [Slot(382)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glTexSubImage3D(System.Int32 target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, System.Int32 format, System.Int32 type, IntPtr pixels);
        [Slot(387)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glTransformFeedbackVaryings(UInt32 program, Int32 count, IntPtr varyings, System.Int32 bufferMode);
        [Slot(388)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glUniform1f(Int32 location, Single v0);
        [Slot(389)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glUniform1fv(Int32 location, Int32 count, Single* value);
        [Slot(390)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glUniform1i(Int32 location, Int32 v0);
        [Slot(391)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glUniform1iv(Int32 location, Int32 count, Int32* value);
        [Slot(392)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glUniform1ui(Int32 location, UInt32 v0);
        [Slot(393)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glUniform1uiv(Int32 location, Int32 count, UInt32* value);
        [Slot(394)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glUniform2f(Int32 location, Single v0, Single v1);
        [Slot(395)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glUniform2fv(Int32 location, Int32 count, Single* value);
        [Slot(396)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glUniform2i(Int32 location, Int32 v0, Int32 v1);
        [Slot(397)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glUniform2iv(Int32 location, Int32 count, Int32* value);
        [Slot(398)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glUniform2ui(Int32 location, UInt32 v0, UInt32 v1);
        [Slot(399)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glUniform2uiv(Int32 location, Int32 count, UInt32* value);
        [Slot(400)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glUniform3f(Int32 location, Single v0, Single v1, Single v2);
        [Slot(401)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glUniform3fv(Int32 location, Int32 count, Single* value);
        [Slot(402)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glUniform3i(Int32 location, Int32 v0, Int32 v1, Int32 v2);
        [Slot(403)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glUniform3iv(Int32 location, Int32 count, Int32* value);
        [Slot(404)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glUniform3ui(Int32 location, UInt32 v0, UInt32 v1, UInt32 v2);
        [Slot(405)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glUniform3uiv(Int32 location, Int32 count, UInt32* value);
        [Slot(406)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glUniform4f(Int32 location, Single v0, Single v1, Single v2, Single v3);
        [Slot(407)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glUniform4fv(Int32 location, Int32 count, Single* value);
        [Slot(408)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glUniform4i(Int32 location, Int32 v0, Int32 v1, Int32 v2, Int32 v3);
        [Slot(409)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glUniform4iv(Int32 location, Int32 count, Int32* value);
        [Slot(410)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glUniform4ui(Int32 location, UInt32 v0, UInt32 v1, UInt32 v2, UInt32 v3);
        [Slot(411)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glUniform4uiv(Int32 location, Int32 count, UInt32* value);
        [Slot(412)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glUniformBlockBinding(UInt32 program, UInt32 uniformBlockIndex, UInt32 uniformBlockBinding);
        [Slot(413)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glUniformMatrix2fv(Int32 location, Int32 count, bool transpose, Single* value);
        [Slot(414)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glUniformMatrix2x3fv(Int32 location, Int32 count, bool transpose, Single* value);
        [Slot(416)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glUniformMatrix2x4fv(Int32 location, Int32 count, bool transpose, Single* value);
        [Slot(418)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glUniformMatrix3fv(Int32 location, Int32 count, bool transpose, Single* value);
        [Slot(419)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glUniformMatrix3x2fv(Int32 location, Int32 count, bool transpose, Single* value);
        [Slot(421)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glUniformMatrix3x4fv(Int32 location, Int32 count, bool transpose, Single* value);
        [Slot(423)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glUniformMatrix4fv(Int32 location, Int32 count, bool transpose, Single* value);
        [Slot(424)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glUniformMatrix4x2fv(Int32 location, Int32 count, bool transpose, Single* value);
        [Slot(426)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glUniformMatrix4x3fv(Int32 location, Int32 count, bool transpose, Single* value);
        [Slot(428)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern bool glUnmapBuffer(System.Int32 target);
        [Slot(430)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glUseProgram(UInt32 program);
        [Slot(433)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glValidateProgram(UInt32 program);
        [Slot(435)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glVertexAttrib1f(UInt32 index, Single x);
        [Slot(436)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glVertexAttrib1fv(UInt32 index, Single* v);
        [Slot(437)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glVertexAttrib2f(UInt32 index, Single x, Single y);
        [Slot(438)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glVertexAttrib2fv(UInt32 index, Single* v);
        [Slot(439)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glVertexAttrib3f(UInt32 index, Single x, Single y, Single z);
        [Slot(440)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glVertexAttrib3fv(UInt32 index, Single* v);
        [Slot(441)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glVertexAttrib4f(UInt32 index, Single x, Single y, Single z, Single w);
        [Slot(442)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glVertexAttrib4fv(UInt32 index, Single* v);
        [Slot(443)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glVertexAttribDivisor(UInt32 index, UInt32 divisor);
        [Slot(447)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glVertexAttribI4i(UInt32 index, Int32 x, Int32 y, Int32 z, Int32 w);
        [Slot(448)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glVertexAttribI4iv(UInt32 index, Int32* v);
        [Slot(449)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glVertexAttribI4ui(UInt32 index, UInt32 x, UInt32 y, UInt32 z, UInt32 w);
        [Slot(450)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glVertexAttribI4uiv(UInt32 index, UInt32* v);
        [Slot(451)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glVertexAttribIPointer(UInt32 index, Int32 size, System.Int32 type, Int32 stride, IntPtr pointer);
        [Slot(452)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glVertexAttribPointer(UInt32 index, Int32 size, System.Int32 type, bool normalized, Int32 stride, IntPtr pointer);
        [Slot(453)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glViewport(Int32 x, Int32 y, Int32 width, Int32 height);
        [Slot(454)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glWaitSync(IntPtr sync, System.Int32 flags, UInt64 timeout);
        [Slot(0)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glActiveProgramEXT(UInt32 program);
        [Slot(1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glActiveShaderProgramEXT(UInt32 pipeline, UInt32 program);
        [Slot(8)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glBeginQueryEXT(System.Int32 target, UInt32 id);
        [Slot(15)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glBindProgramPipelineEXT(UInt32 pipeline);
        [Slot(25)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glBlendEquationEXT(System.Int32 mode);
        [Slot(66)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern Int32 glCreateShaderProgramEXT(System.Int32 type, IntPtr @string);
        [Slot(67)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern Int32 glCreateShaderProgramvEXT(System.Int32 type, Int32 count, IntPtr strings);
        [Slot(81)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glDeleteProgramPipelinesEXT(Int32 n, UInt32* pipelines);
        [Slot(83)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glDeleteQueriesEXT(Int32 n, UInt32* ids);
        [Slot(100)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glDiscardFramebufferEXT(System.Int32 target, Int32 numAttachments, System.Int32* attachments);
        [Slot(104)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glDrawArraysInstancedEXT(System.Int32 mode, Int32 start, Int32 count, Int32 primcount);
        [Slot(107)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glDrawBuffersEXT(Int32 n, System.Int32* bufs);
        [Slot(108)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glDrawBuffersIndexedEXT(Int32 n, System.Int32* location, Int32* indices);
        [Slot(113)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glDrawElementsInstancedEXT(System.Int32 mode, Int32 count, System.Int32 type, IntPtr indices, Int32 primcount);
        [Slot(124)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glEndQueryEXT(System.Int32 target);
        [Slot(145)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glFlushMappedBufferRangeEXT(System.Int32 target, IntPtr offset, IntPtr length);
        [Slot(148)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glFramebufferTexture2DMultisampleEXT(System.Int32 target, System.Int32 attachment, System.Int32 textarget, UInt32 texture, Int32 level, Int32 samples);
        [Slot(158)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGenProgramPipelinesEXT(Int32 n, [OutAttribute] UInt32* pipelines);
        [Slot(160)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGenQueriesEXT(Int32 n, [OutAttribute] UInt32* ids);
        [Slot(189)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern System.Int32 glGetGraphicsResetStatusEXT();
        [Slot(194)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetIntegeri_vEXT(System.Int32 target, UInt32 index, [OutAttribute] Int32* data);
        [Slot(198)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetnUniformfvEXT(UInt32 program, Int32 location, Int32 bufSize, [OutAttribute] Single* @params);
        [Slot(199)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetnUniformivEXT(UInt32 program, Int32 location, Int32 bufSize, [OutAttribute] Int32* @params);
        [Slot(201)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetObjectLabelEXT(System.Int32 type, UInt32 @object, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] IntPtr label);
        [Slot(221)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetProgramPipelineInfoLogEXT(UInt32 pipeline, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] IntPtr infoLog);
        [Slot(222)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetProgramPipelineivEXT(UInt32 pipeline, System.Int32 pname, [OutAttribute] Int32* @params);
        [Slot(224)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetQueryivEXT(System.Int32 target, System.Int32 pname, [OutAttribute] Int32* @params);
        [Slot(225)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetQueryObjecti64vEXT(UInt32 id, System.Int32 pname, [OutAttribute] Int64* @params);
        [Slot(226)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetQueryObjectivEXT(UInt32 id, System.Int32 pname, [OutAttribute] Int32* @params);
        [Slot(227)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetQueryObjectui64vEXT(UInt32 id, System.Int32 pname, [OutAttribute] UInt64* @params);
        [Slot(229)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetQueryObjectuivEXT(UInt32 id, System.Int32 pname, [OutAttribute] UInt32* @params);
        [Slot(257)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glInsertEventMarkerEXT(Int32 length, IntPtr marker);
        [Slot(265)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern bool glIsProgramPipelineEXT(UInt32 pipeline);
        [Slot(267)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern bool glIsQueryEXT(UInt32 id);
        [Slot(277)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glLabelObjectEXT(System.Int32 type, UInt32 @object, Int32 length, IntPtr label);
        [Slot(282)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern IntPtr glMapBufferRangeEXT(System.Int32 target, IntPtr offset, IntPtr length, UInt32 access);
        [Slot(283)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glMultiDrawArraysEXT(System.Int32 mode, Int32* first, Int32* count, Int32 primcount);
        [Slot(284)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glMultiDrawElementsEXT(System.Int32 mode, Int32* count, System.Int32 type, IntPtr indices, Int32 primcount);
        [Slot(294)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glPopGroupMarkerEXT();
        [Slot(298)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glProgramParameteriEXT(UInt32 program, System.Int32 pname, Int32 value);
        [Slot(299)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glProgramUniform1fEXT(UInt32 program, Int32 location, Single v0);
        [Slot(300)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glProgramUniform1fvEXT(UInt32 program, Int32 location, Int32 count, Single* value);
        [Slot(301)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glProgramUniform1iEXT(UInt32 program, Int32 location, Int32 v0);
        [Slot(302)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glProgramUniform1ivEXT(UInt32 program, Int32 location, Int32 count, Int32* value);
        [Slot(303)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glProgramUniform1uiEXT(UInt32 program, Int32 location, UInt32 v0);
        [Slot(304)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glProgramUniform1uivEXT(UInt32 program, Int32 location, Int32 count, UInt32* value);
        [Slot(305)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glProgramUniform2fEXT(UInt32 program, Int32 location, Single v0, Single v1);
        [Slot(306)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glProgramUniform2fvEXT(UInt32 program, Int32 location, Int32 count, Single* value);
        [Slot(307)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glProgramUniform2iEXT(UInt32 program, Int32 location, Int32 v0, Int32 v1);
        [Slot(308)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glProgramUniform2ivEXT(UInt32 program, Int32 location, Int32 count, Int32* value);
        [Slot(309)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glProgramUniform2uiEXT(UInt32 program, Int32 location, UInt32 v0, UInt32 v1);
        [Slot(310)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glProgramUniform2uivEXT(UInt32 program, Int32 location, Int32 count, UInt32* value);
        [Slot(311)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glProgramUniform3fEXT(UInt32 program, Int32 location, Single v0, Single v1, Single v2);
        [Slot(312)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glProgramUniform3fvEXT(UInt32 program, Int32 location, Int32 count, Single* value);
        [Slot(313)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glProgramUniform3iEXT(UInt32 program, Int32 location, Int32 v0, Int32 v1, Int32 v2);
        [Slot(314)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glProgramUniform3ivEXT(UInt32 program, Int32 location, Int32 count, Int32* value);
        [Slot(315)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glProgramUniform3uiEXT(UInt32 program, Int32 location, UInt32 v0, UInt32 v1, UInt32 v2);
        [Slot(316)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glProgramUniform3uivEXT(UInt32 program, Int32 location, Int32 count, UInt32* value);
        [Slot(317)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glProgramUniform4fEXT(UInt32 program, Int32 location, Single v0, Single v1, Single v2, Single v3);
        [Slot(318)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glProgramUniform4fvEXT(UInt32 program, Int32 location, Int32 count, Single* value);
        [Slot(319)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glProgramUniform4iEXT(UInt32 program, Int32 location, Int32 v0, Int32 v1, Int32 v2, Int32 v3);
        [Slot(320)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glProgramUniform4ivEXT(UInt32 program, Int32 location, Int32 count, Int32* value);
        [Slot(321)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glProgramUniform4uiEXT(UInt32 program, Int32 location, UInt32 v0, UInt32 v1, UInt32 v2, UInt32 v3);
        [Slot(322)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glProgramUniform4uivEXT(UInt32 program, Int32 location, Int32 count, UInt32* value);
        [Slot(323)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glProgramUniformMatrix2fvEXT(UInt32 program, Int32 location, Int32 count, bool transpose, Single* value);
        [Slot(324)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glProgramUniformMatrix2x3fvEXT(UInt32 program, Int32 location, Int32 count, bool transpose, Single* value);
        [Slot(325)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glProgramUniformMatrix2x4fvEXT(UInt32 program, Int32 location, Int32 count, bool transpose, Single* value);
        [Slot(326)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glProgramUniformMatrix3fvEXT(UInt32 program, Int32 location, Int32 count, bool transpose, Single* value);
        [Slot(327)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glProgramUniformMatrix3x2fvEXT(UInt32 program, Int32 location, Int32 count, bool transpose, Single* value);
        [Slot(328)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glProgramUniformMatrix3x4fvEXT(UInt32 program, Int32 location, Int32 count, bool transpose, Single* value);
        [Slot(329)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glProgramUniformMatrix4fvEXT(UInt32 program, Int32 location, Int32 count, bool transpose, Single* value);
        [Slot(330)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glProgramUniformMatrix4x2fvEXT(UInt32 program, Int32 location, Int32 count, bool transpose, Single* value);
        [Slot(331)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glProgramUniformMatrix4x3fvEXT(UInt32 program, Int32 location, Int32 count, bool transpose, Single* value);
        [Slot(334)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glPushGroupMarkerEXT(Int32 length, IntPtr marker);
        [Slot(335)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glQueryCounterEXT(UInt32 id, System.Int32 target);
        [Slot(337)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glReadBufferIndexedEXT(System.Int32 src, Int32 index);
        [Slot(339)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glReadnPixelsEXT(Int32 x, Int32 y, Int32 width, Int32 height, System.Int32 format, System.Int32 type, Int32 bufSize, [OutAttribute] IntPtr data);
        [Slot(346)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glRenderbufferStorageMultisampleEXT(System.Int32 target, Int32 samples, System.Int32 internalformat, Int32 width, Int32 height);
        [Slot(376)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glTexStorage1DEXT(System.Int32 target, Int32 levels, System.Int32 internalformat, Int32 width);
        [Slot(378)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glTexStorage2DEXT(System.Int32 target, Int32 levels, System.Int32 internalformat, Int32 width, Int32 height);
        [Slot(380)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glTexStorage3DEXT(System.Int32 target, Int32 levels, System.Int32 internalformat, Int32 width, Int32 height, Int32 depth);
        [Slot(384)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glTextureStorage1DEXT(UInt32 texture, System.Int32 target, Int32 levels, System.Int32 internalformat, Int32 width);
        [Slot(385)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glTextureStorage2DEXT(UInt32 texture, System.Int32 target, Int32 levels, System.Int32 internalformat, Int32 width, Int32 height);
        [Slot(386)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glTextureStorage3DEXT(UInt32 texture, System.Int32 target, Int32 levels, System.Int32 internalformat, Int32 width, Int32 height, Int32 depth);
        [Slot(431)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glUseProgramStagesEXT(UInt32 pipeline, UInt32 stages, UInt32 program);
        [Slot(432)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glUseShaderProgramEXT(System.Int32 type, UInt32 program);
        [Slot(434)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glValidateProgramPipelineEXT(UInt32 pipeline);
        [Slot(445)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glVertexAttribDivisorEXT(UInt32 index, UInt32 divisor);
        [Slot(149)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glFramebufferTexture2DMultisampleIMG(System.Int32 target, System.Int32 attachment, System.Int32 textarget, UInt32 texture, Int32 level, Int32 samples);
        [Slot(347)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glRenderbufferStorageMultisampleIMG(System.Int32 target, Int32 samples, System.Int32 internalformat, Int32 width, Int32 height);
        [Slot(6)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glBeginPerfQueryINTEL(UInt32 queryHandle);
        [Slot(63)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glCreatePerfQueryINTEL(UInt32 queryId, [OutAttribute] UInt32* queryHandle);
        [Slot(79)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glDeletePerfQueryINTEL(UInt32 queryHandle);
        [Slot(122)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glEndPerfQueryINTEL(UInt32 queryHandle);
        [Slot(185)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetFirstPerfQueryIdINTEL([OutAttribute] UInt32* queryId);
        [Slot(197)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetNextPerfQueryIdINTEL(UInt32 queryId, [OutAttribute] UInt32* nextQueryId);
        [Slot(205)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetPerfCounterInfoINTEL(UInt32 queryId, UInt32 counterId, UInt32 counterNameLength, [OutAttribute] IntPtr counterName, UInt32 counterDescLength, [OutAttribute] IntPtr counterDesc, [OutAttribute] UInt32* counterOffset, [OutAttribute] UInt32* counterDataSize, [OutAttribute] UInt32* counterTypeEnum, [OutAttribute] UInt32* counterDataTypeEnum, [OutAttribute] UInt64* rawCounterMaxValue);
        [Slot(212)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetPerfQueryDataINTEL(UInt32 queryHandle, UInt32 flags, Int32 dataSize, [OutAttribute] IntPtr data, [OutAttribute] UInt32* bytesWritten);
        [Slot(213)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetPerfQueryIdByNameINTEL([OutAttribute] IntPtr queryName, [OutAttribute] UInt32* queryId);
        [Slot(214)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetPerfQueryInfoINTEL(UInt32 queryId, UInt32 queryNameLength, [OutAttribute] IntPtr queryName, [OutAttribute] UInt32* dataSize, [OutAttribute] UInt32* noCounters, [OutAttribute] UInt32* noInstances, [OutAttribute] UInt32* capsMask);
        [Slot(70)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glDebugMessageCallbackKHR(DebugProcKhr callback, IntPtr userParam);
        [Slot(72)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glDebugMessageControlKHR(System.Int32 source, System.Int32 type, System.Int32 severity, Int32 count, UInt32* ids, bool enabled);
        [Slot(74)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glDebugMessageInsertKHR(System.Int32 source, System.Int32 type, UInt32 id, System.Int32 severity, Int32 length, IntPtr buf);
        [Slot(180)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe Int32 glGetDebugMessageLogKHR(UInt32 count, Int32 bufSize, [OutAttribute] System.Int32* sources, [OutAttribute] System.Int32* types, [OutAttribute] UInt32* ids, [OutAttribute] System.Int32* severities, [OutAttribute] Int32* lengths, [OutAttribute] IntPtr messageLog);
        [Slot(202)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetObjectLabelKHR(System.Int32 identifier, UInt32 name, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] IntPtr label);
        [Slot(204)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetObjectPtrLabelKHR(IntPtr ptr, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] IntPtr label);
        [Slot(216)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glGetPointervKHR(System.Int32 pname, [OutAttribute] IntPtr @params);
        [Slot(286)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glObjectLabelKHR(System.Int32 identifier, UInt32 name, Int32 length, IntPtr label);
        [Slot(288)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glObjectPtrLabelKHR(IntPtr ptr, Int32 length, IntPtr label);
        [Slot(293)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glPopDebugGroupKHR();
        [Slot(333)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glPushDebugGroupKHR(System.Int32 source, UInt32 id, Int32 length, IntPtr message);
        [Slot(22)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glBlendBarrierNV();
        [Slot(29)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glBlendParameteriNV(System.Int32 pname, Int32 value);
        [Slot(32)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glBlitFramebufferNV(Int32 srcX0, Int32 srcY0, Int32 srcX1, Int32 srcY1, Int32 dstX0, Int32 dstY0, Int32 dstX1, Int32 dstY1, System.Int32 mask, System.Int32 filter);
        [Slot(55)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glCopyBufferSubDataNV(System.Int32 readTarget, System.Int32 writeTarget, IntPtr readOffset, IntPtr writeOffset, IntPtr size);
        [Slot(61)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glCoverageMaskNV(bool mask);
        [Slot(62)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glCoverageOperationNV(System.Int32 operation);
        [Slot(76)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glDeleteFencesNV(Int32 n, UInt32* fences);
        [Slot(105)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glDrawArraysInstancedNV(System.Int32 mode, Int32 first, Int32 count, Int32 primcount);
        [Slot(109)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glDrawBuffersNV(Int32 n, System.Int32* bufs);
        [Slot(114)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glDrawElementsInstancedNV(System.Int32 mode, Int32 count, System.Int32 type, IntPtr indices, Int32 primcount);
        [Slot(142)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glFinishFenceNV(UInt32 fence);
        [Slot(155)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGenFencesNV(Int32 n, [OutAttribute] UInt32* fences);
        [Slot(184)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetFenceivNV(UInt32 fence, System.Int32 pname, [OutAttribute] Int32* @params);
        [Slot(262)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern bool glIsFenceNV(UInt32 fence);
        [Slot(338)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glReadBufferNV(System.Int32 mode);
        [Slot(348)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glRenderbufferStorageMultisampleNV(System.Int32 target, Int32 samples, System.Int32 internalformat, Int32 width, Int32 height);
        [Slot(358)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glSetFenceNV(UInt32 fence, System.Int32 condition);
        [Slot(368)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern bool glTestFenceNV(UInt32 fence);
        [Slot(415)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glUniformMatrix2x3fvNV(Int32 location, Int32 count, bool transpose, Single* value);
        [Slot(417)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glUniformMatrix2x4fvNV(Int32 location, Int32 count, bool transpose, Single* value);
        [Slot(420)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glUniformMatrix3x2fvNV(Int32 location, Int32 count, bool transpose, Single* value);
        [Slot(422)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glUniformMatrix3x4fvNV(Int32 location, Int32 count, bool transpose, Single* value);
        [Slot(425)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glUniformMatrix4x2fvNV(Int32 location, Int32 count, bool transpose, Single* value);
        [Slot(427)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glUniformMatrix4x3fvNV(Int32 location, Int32 count, bool transpose, Single* value);
        [Slot(446)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glVertexAttribDivisorNV(UInt32 index, UInt32 divisor);
        [Slot(21)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glBindVertexArrayOES(UInt32 array);
        [Slot(50)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glCompressedTexImage3DOES(System.Int32 target, Int32 level, System.Int32 internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, IntPtr data);
        [Slot(53)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glCompressedTexSubImage3DOES(System.Int32 target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, System.Int32 format, Int32 imageSize, IntPtr data);
        [Slot(59)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glCopyTexSubImage3DOES(System.Int32 target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 x, Int32 y, Int32 width, Int32 height);
        [Slot(92)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glDeleteVertexArraysOES(Int32 n, UInt32* arrays);
        [Slot(116)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glEGLImageTargetRenderbufferStorageOES(System.Int32 target, IntPtr image);
        [Slot(117)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glEGLImageTargetTexture2DOES(System.Int32 target, IntPtr image);
        [Slot(150)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glFramebufferTexture3DOES(System.Int32 target, System.Int32 attachment, System.Int32 textarget, UInt32 texture, Int32 level, Int32 zoffset);
        [Slot(166)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGenVertexArraysOES(Int32 n, [OutAttribute] UInt32* arrays);
        [Slot(178)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glGetBufferPointervOES(System.Int32 target, System.Int32 pname, [OutAttribute] IntPtr @params);
        [Slot(218)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetProgramBinaryOES(UInt32 program, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] System.Int32* binaryFormat, [OutAttribute] IntPtr binary);
        [Slot(276)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern bool glIsVertexArrayOES(UInt32 array);
        [Slot(280)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern IntPtr glMapBufferOES(System.Int32 target, System.Int32 access);
        [Slot(296)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glProgramBinaryOES(UInt32 program, System.Int32 binaryFormat, IntPtr binary, Int32 length);
        [Slot(371)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glTexImage3DOES(System.Int32 target, Int32 level, System.Int32 internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, System.Int32 format, System.Int32 type, IntPtr pixels);
        [Slot(383)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glTexSubImage3DOES(System.Int32 target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, System.Int32 format, System.Int32 type, IntPtr pixels);
        [Slot(429)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern bool glUnmapBufferOES(System.Int32 target);
        [Slot(3)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glAlphaFuncQCOM(System.Int32 func, Single @ref);
        [Slot(98)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glDisableDriverControlQCOM(UInt32 driverControl);
        [Slot(119)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glEnableDriverControlQCOM(UInt32 driverControl);
        [Slot(125)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glEndTilingQCOM(UInt32 preserveMask);
        [Slot(127)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glExtGetBufferPointervQCOM(System.Int32 target, [OutAttribute] IntPtr @params);
        [Slot(128)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glExtGetBuffersQCOM([OutAttribute] UInt32* buffers, Int32 maxBuffers, [OutAttribute] Int32* numBuffers);
        [Slot(129)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glExtGetFramebuffersQCOM([OutAttribute] UInt32* framebuffers, Int32 maxFramebuffers, [OutAttribute] Int32* numFramebuffers);
        [Slot(130)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glExtGetProgramBinarySourceQCOM(UInt32 program, System.Int32 shadertype, [OutAttribute] IntPtr source, [OutAttribute] Int32* length);
        [Slot(131)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glExtGetProgramsQCOM([OutAttribute] UInt32* programs, Int32 maxPrograms, [OutAttribute] Int32* numPrograms);
        [Slot(132)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glExtGetRenderbuffersQCOM([OutAttribute] UInt32* renderbuffers, Int32 maxRenderbuffers, [OutAttribute] Int32* numRenderbuffers);
        [Slot(133)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glExtGetShadersQCOM([OutAttribute] UInt32* shaders, Int32 maxShaders, [OutAttribute] Int32* numShaders);
        [Slot(134)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glExtGetTexLevelParameterivQCOM(UInt32 texture, System.Int32 face, Int32 level, System.Int32 pname, [OutAttribute] Int32* @params);
        [Slot(135)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glExtGetTexSubImageQCOM(System.Int32 target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, System.Int32 format, System.Int32 type, [OutAttribute] IntPtr texels);
        [Slot(136)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glExtGetTexturesQCOM([OutAttribute] UInt32* textures, Int32 maxTextures, [OutAttribute] Int32* numTextures);
        [Slot(137)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern bool glExtIsProgramBinaryQCOM(UInt32 program);
        [Slot(138)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glExtTexObjectStateOverrideiQCOM(System.Int32 target, System.Int32 pname, Int32 param);
        [Slot(181)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetDriverControlsQCOM([OutAttribute] Int32* num, Int32 size, [OutAttribute] UInt32* driverControls);
        [Slot(182)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe void glGetDriverControlStringQCOM(UInt32 driverControl, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] IntPtr driverControlString);
        [Slot(361)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern void glStartTilingQCOM(UInt32 x, UInt32 y, UInt32 width, UInt32 height, UInt32 preserveMask);
    }
}
