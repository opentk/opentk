//
// The Open Toolkit Library License
//
// Copyright (c) 2006 - 2013 Stefanos Apostolopoulos for the Open Toolkit Library
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights to 
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do
// so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.
//

namespace OpenTK.Compute.CL12
{
    using System;
    using System.Text;
    using System.Runtime.InteropServices;
    #pragma warning disable 3019
    #pragma warning disable 1591
    #pragma warning disable 1572
    #pragma warning disable 1573
    #pragma warning disable 626

    partial class CL
    {
        static CL()
        {
            EntryPointNames = new byte[]
            {
            };
            EntryPointNameOffsets = new int[]
            {
            };
            EntryPoints = new IntPtr[EntryPointNameOffsets.Length];
        }

        /// <summary>[requires: v1.0]
        /// Builds (compiles and links) a program executable from the program source or binary.
        /// </summary>
        /// <param name="program"> 
        /// The program object.
        /// </param>
        /// <param name="num_devices"> 
        /// The number of devices listed in device_list.
        /// </param>
        /// <param name="device_list"> 
        /// A pointer to a list of devices associated with program. If device_list is NULL value, the program executable is built for all devices associated with program for which a source or binary has been loaded. If device_list is a non-NULL value, the program executable is built for devices specified in this list for which a source or binary has been loaded.
        /// </param>
        /// <param name="options"> 
        /// A pointer to a null-terminated string of characters that describes the build options to be used for building the program executable. The list of supported options is described below.
        /// </param>
        /// <param name="pfn_notify"> 
        /// A function pointer to a notification routine. The notification routine is a callback function that an application can register and which will be called when the program executable has been built (successfully or unsuccessfully). If pfn_notify is not NULL, clBuildProgram does not need to wait for the build to complete and can return immediately once the build operation can begin. The build operation can begin if the context, program whose sources are being compiled and linked, list of devices and build options specified are all valid and appropriate host and device resources needed to perform the build are available. If pfn_notify is NULL, clBuildProgram does not return until the build has completed. This callback function may be called asynchronously by the OpenCL implementation. It is the application’s responsibility to ensure that the callback function is thread-safe.
        /// </param>
        /// <param name="user_data"> 
        /// Passed as an argument when pfn_notify is called. user_data can be NULL.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clBuildProgram")]
        [CLSCompliant(false)]
        public static ErrorCode BuildProgram(ComputeProgram program, Int32 num_devices, ComputeDevice[] device_list, String options, ProgramNotifyDelegate pfn_notify, IntPtr user_data) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Builds (compiles and links) a program executable from the program source or binary.
        /// </summary>
        /// <param name="program"> 
        /// The program object.
        /// </param>
        /// <param name="num_devices"> 
        /// The number of devices listed in device_list.
        /// </param>
        /// <param name="device_list"> 
        /// A pointer to a list of devices associated with program. If device_list is NULL value, the program executable is built for all devices associated with program for which a source or binary has been loaded. If device_list is a non-NULL value, the program executable is built for devices specified in this list for which a source or binary has been loaded.
        /// </param>
        /// <param name="options"> 
        /// A pointer to a null-terminated string of characters that describes the build options to be used for building the program executable. The list of supported options is described below.
        /// </param>
        /// <param name="pfn_notify"> 
        /// A function pointer to a notification routine. The notification routine is a callback function that an application can register and which will be called when the program executable has been built (successfully or unsuccessfully). If pfn_notify is not NULL, clBuildProgram does not need to wait for the build to complete and can return immediately once the build operation can begin. The build operation can begin if the context, program whose sources are being compiled and linked, list of devices and build options specified are all valid and appropriate host and device resources needed to perform the build are available. If pfn_notify is NULL, clBuildProgram does not return until the build has completed. This callback function may be called asynchronously by the OpenCL implementation. It is the application’s responsibility to ensure that the callback function is thread-safe.
        /// </param>
        /// <param name="user_data"> 
        /// Passed as an argument when pfn_notify is called. user_data can be NULL.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clBuildProgram")]
        [CLSCompliant(false)]
        public static ErrorCode BuildProgram(ComputeProgram program, Int32 num_devices, ref ComputeDevice device_list, String options, ProgramNotifyDelegate pfn_notify, IntPtr user_data) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Builds (compiles and links) a program executable from the program source or binary.
        /// </summary>
        /// <param name="program"> 
        /// The program object.
        /// </param>
        /// <param name="num_devices"> 
        /// The number of devices listed in device_list.
        /// </param>
        /// <param name="device_list"> 
        /// A pointer to a list of devices associated with program. If device_list is NULL value, the program executable is built for all devices associated with program for which a source or binary has been loaded. If device_list is a non-NULL value, the program executable is built for devices specified in this list for which a source or binary has been loaded.
        /// </param>
        /// <param name="options"> 
        /// A pointer to a null-terminated string of characters that describes the build options to be used for building the program executable. The list of supported options is described below.
        /// </param>
        /// <param name="pfn_notify"> 
        /// A function pointer to a notification routine. The notification routine is a callback function that an application can register and which will be called when the program executable has been built (successfully or unsuccessfully). If pfn_notify is not NULL, clBuildProgram does not need to wait for the build to complete and can return immediately once the build operation can begin. The build operation can begin if the context, program whose sources are being compiled and linked, list of devices and build options specified are all valid and appropriate host and device resources needed to perform the build are available. If pfn_notify is NULL, clBuildProgram does not return until the build has completed. This callback function may be called asynchronously by the OpenCL implementation. It is the application’s responsibility to ensure that the callback function is thread-safe.
        /// </param>
        /// <param name="user_data"> 
        /// Passed as an argument when pfn_notify is called. user_data can be NULL.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clBuildProgram")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode BuildProgram(ComputeProgram program, Int32 num_devices, ComputeDevice* device_list, String options, ProgramNotifyDelegate pfn_notify, IntPtr user_data) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.2]
        /// Compiles a program’s source for all the devices or a specific device(s) in the OpenCL context associated with program.
        /// </summary>
        /// <param name="program"> 
        /// The program object that is the compilation target.
        /// </param>
        /// <param name="num_devices"> 
        /// The number of devices listed in device_list.
        /// </param>
        /// <param name="device_list">[length: num_devices] 
        /// A pointer to a list of devices associated with program. If device_list is a NULL value, the compile is performed for all devices associated with program.  If device_list is a non-NULL value, the compile is performed for devices specified in this list.
        /// </param>
        /// <param name="num_input_headers"> 
        /// Specifies the number of programs that describe headers in the array referenced by input_headers.
        /// </param>
        /// <param name="input_headers">[length: num_input_headers] 
        /// An array of program embedded headers created with clCreateProgramWithSource.
        /// </param>
        /// <param name="header_include_names">[length: num_input_headers] 
        /// An array that has a one to one correspondence with input_headers.  Each entry in header_include_names specifies the include name used by source in program that comes from an embedded header. The corresponding entry in input_headers identifies the program object which contains the header source to be used. The embedded headers are first searched before the headers in the list of directories specified by the –I compile option (as described in section 5.6.4.1). If multiple entries in header_include_names refer to the same header name, the first one encountered will be used.
        /// </param>
        /// <param name="pfn_notify"> 
        /// A function pointer to a notification routine.  The notification routine is a callback function that an application can register and which will be called when the program executable has been built (successfully or unsuccessfully).  If pfn_notify is not NULL, clCompileProgram does not need to wait for the compiler to complete and can return immediately once the compilation can begin.  The compilation can begin if the context, program whose sources are being compiled, list of devices, input headers, programs that describe input headers and compiler options specified are all valid and appropriate host and device resources needed to perform the compile are available.  If pfn_notify is NULL, clCompileProgram does not return until the compiler has completed.  This callback function may be called asynchronously by the OpenCL implementation.  It is the application’s responsibility to ensure that the callback function is thread-safe.
        /// </param>
        /// <param name="user_data"> 
        /// Passed as an argument when pfn_notify is called. user_data can be NULL.
        /// </param>
        [AutoGenerated(Category = "", Version = "1.2", EntryPoint = "clCompileProgram")]
        [CLSCompliant(false)]
        public static ErrorCode CompileProgram(ComputeProgram program, Int32 num_devices, ComputeDevice[] device_list, Int32 num_input_headers, ComputeProgram[] input_headers, String[] header_include_names, ProgramNotifyDelegate pfn_notify, IntPtr user_data) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.2]
        /// Compiles a program’s source for all the devices or a specific device(s) in the OpenCL context associated with program.
        /// </summary>
        /// <param name="program"> 
        /// The program object that is the compilation target.
        /// </param>
        /// <param name="num_devices"> 
        /// The number of devices listed in device_list.
        /// </param>
        /// <param name="device_list">[length: num_devices] 
        /// A pointer to a list of devices associated with program. If device_list is a NULL value, the compile is performed for all devices associated with program.  If device_list is a non-NULL value, the compile is performed for devices specified in this list.
        /// </param>
        /// <param name="num_input_headers"> 
        /// Specifies the number of programs that describe headers in the array referenced by input_headers.
        /// </param>
        /// <param name="input_headers">[length: num_input_headers] 
        /// An array of program embedded headers created with clCreateProgramWithSource.
        /// </param>
        /// <param name="header_include_names">[length: num_input_headers] 
        /// An array that has a one to one correspondence with input_headers.  Each entry in header_include_names specifies the include name used by source in program that comes from an embedded header. The corresponding entry in input_headers identifies the program object which contains the header source to be used. The embedded headers are first searched before the headers in the list of directories specified by the –I compile option (as described in section 5.6.4.1). If multiple entries in header_include_names refer to the same header name, the first one encountered will be used.
        /// </param>
        /// <param name="pfn_notify"> 
        /// A function pointer to a notification routine.  The notification routine is a callback function that an application can register and which will be called when the program executable has been built (successfully or unsuccessfully).  If pfn_notify is not NULL, clCompileProgram does not need to wait for the compiler to complete and can return immediately once the compilation can begin.  The compilation can begin if the context, program whose sources are being compiled, list of devices, input headers, programs that describe input headers and compiler options specified are all valid and appropriate host and device resources needed to perform the compile are available.  If pfn_notify is NULL, clCompileProgram does not return until the compiler has completed.  This callback function may be called asynchronously by the OpenCL implementation.  It is the application’s responsibility to ensure that the callback function is thread-safe.
        /// </param>
        /// <param name="user_data"> 
        /// Passed as an argument when pfn_notify is called. user_data can be NULL.
        /// </param>
        [AutoGenerated(Category = "", Version = "1.2", EntryPoint = "clCompileProgram")]
        [CLSCompliant(false)]
        public static ErrorCode CompileProgram(ComputeProgram program, Int32 num_devices, ref ComputeDevice device_list, Int32 num_input_headers, ref ComputeProgram input_headers, ref String header_include_names, ProgramNotifyDelegate pfn_notify, IntPtr user_data) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.2]
        /// Compiles a program’s source for all the devices or a specific device(s) in the OpenCL context associated with program.
        /// </summary>
        /// <param name="program"> 
        /// The program object that is the compilation target.
        /// </param>
        /// <param name="num_devices"> 
        /// The number of devices listed in device_list.
        /// </param>
        /// <param name="device_list">[length: num_devices] 
        /// A pointer to a list of devices associated with program. If device_list is a NULL value, the compile is performed for all devices associated with program.  If device_list is a non-NULL value, the compile is performed for devices specified in this list.
        /// </param>
        /// <param name="num_input_headers"> 
        /// Specifies the number of programs that describe headers in the array referenced by input_headers.
        /// </param>
        /// <param name="input_headers">[length: num_input_headers] 
        /// An array of program embedded headers created with clCreateProgramWithSource.
        /// </param>
        /// <param name="header_include_names">[length: num_input_headers] 
        /// An array that has a one to one correspondence with input_headers.  Each entry in header_include_names specifies the include name used by source in program that comes from an embedded header. The corresponding entry in input_headers identifies the program object which contains the header source to be used. The embedded headers are first searched before the headers in the list of directories specified by the –I compile option (as described in section 5.6.4.1). If multiple entries in header_include_names refer to the same header name, the first one encountered will be used.
        /// </param>
        /// <param name="pfn_notify"> 
        /// A function pointer to a notification routine.  The notification routine is a callback function that an application can register and which will be called when the program executable has been built (successfully or unsuccessfully).  If pfn_notify is not NULL, clCompileProgram does not need to wait for the compiler to complete and can return immediately once the compilation can begin.  The compilation can begin if the context, program whose sources are being compiled, list of devices, input headers, programs that describe input headers and compiler options specified are all valid and appropriate host and device resources needed to perform the compile are available.  If pfn_notify is NULL, clCompileProgram does not return until the compiler has completed.  This callback function may be called asynchronously by the OpenCL implementation.  It is the application’s responsibility to ensure that the callback function is thread-safe.
        /// </param>
        /// <param name="user_data"> 
        /// Passed as an argument when pfn_notify is called. user_data can be NULL.
        /// </param>
        [AutoGenerated(Category = "", Version = "1.2", EntryPoint = "clCompileProgram")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode CompileProgram(ComputeProgram program, Int32 num_devices, ComputeDevice* device_list, Int32 num_input_headers, ComputeProgram* input_headers, IntPtr header_include_names, ProgramNotifyDelegate pfn_notify, IntPtr user_data) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Creates a buffer object.
        /// </summary>
        /// <param name="context"> 
        /// A valid OpenCL context used to create the buffer object.
        /// </param>
        /// <param name="flags"> 
        /// A bit-field that is used to specify allocation and usage information such as the memory arena that should be used to allocate the buffer object and how it will be used. The following table describes the possible values for flags. If value specified for flags is 0, the default is used which is MemReadWrite.
        /// </param>
        /// <param name="size"> 
        /// The size in bytes of the buffer memory object to be allocated.
        /// </param>
        /// <param name="host_ptr"> 
        /// A pointer to the buffer data that may already be allocated by the application. The size of the buffer that host_ptr points to must be ≥ size bytes.
        /// </param>
        /// <param name="errcode_ret"> 
        /// Returns an appropriate error code. If errcode_ret is NULL, no error code is returned.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clCreateBuffer")]
        [CLSCompliant(false)]
        public static ComputeMemory CreateBuffer(ComputeContext context, OpenTK.Compute.CL12.MemFlags flags, IntPtr size, IntPtr host_ptr, [OutAttribute] out ErrorCode errcode_ret) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Creates a buffer object.
        /// </summary>
        /// <param name="context"> 
        /// A valid OpenCL context used to create the buffer object.
        /// </param>
        /// <param name="flags"> 
        /// A bit-field that is used to specify allocation and usage information such as the memory arena that should be used to allocate the buffer object and how it will be used. The following table describes the possible values for flags. If value specified for flags is 0, the default is used which is MemReadWrite.
        /// </param>
        /// <param name="size"> 
        /// The size in bytes of the buffer memory object to be allocated.
        /// </param>
        /// <param name="host_ptr"> 
        /// A pointer to the buffer data that may already be allocated by the application. The size of the buffer that host_ptr points to must be ≥ size bytes.
        /// </param>
        /// <param name="errcode_ret"> 
        /// Returns an appropriate error code. If errcode_ret is NULL, no error code is returned.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clCreateBuffer")]
        [CLSCompliant(false)]
        public static unsafe ComputeMemory CreateBuffer(ComputeContext context, OpenTK.Compute.CL12.MemFlags flags, IntPtr size, IntPtr host_ptr, [OutAttribute] ErrorCode* errcode_ret) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Creates a buffer object.
        /// </summary>
        /// <param name="context"> 
        /// A valid OpenCL context used to create the buffer object.
        /// </param>
        /// <param name="flags"> 
        /// A bit-field that is used to specify allocation and usage information such as the memory arena that should be used to allocate the buffer object and how it will be used. The following table describes the possible values for flags. If value specified for flags is 0, the default is used which is MemReadWrite.
        /// </param>
        /// <param name="size"> 
        /// The size in bytes of the buffer memory object to be allocated.
        /// </param>
        /// <param name="host_ptr"> 
        /// A pointer to the buffer data that may already be allocated by the application. The size of the buffer that host_ptr points to must be ≥ size bytes.
        /// </param>
        /// <param name="errcode_ret"> 
        /// Returns an appropriate error code. If errcode_ret is NULL, no error code is returned.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clCreateBuffer")]
        [CLSCompliant(false)]
        public static ComputeMemory CreateBuffer<T3>(ComputeContext context, OpenTK.Compute.CL12.MemFlags flags, IntPtr size, [InAttribute, OutAttribute] T3[] host_ptr, [OutAttribute] out ErrorCode errcode_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Creates a buffer object.
        /// </summary>
        /// <param name="context"> 
        /// A valid OpenCL context used to create the buffer object.
        /// </param>
        /// <param name="flags"> 
        /// A bit-field that is used to specify allocation and usage information such as the memory arena that should be used to allocate the buffer object and how it will be used. The following table describes the possible values for flags. If value specified for flags is 0, the default is used which is MemReadWrite.
        /// </param>
        /// <param name="size"> 
        /// The size in bytes of the buffer memory object to be allocated.
        /// </param>
        /// <param name="host_ptr"> 
        /// A pointer to the buffer data that may already be allocated by the application. The size of the buffer that host_ptr points to must be ≥ size bytes.
        /// </param>
        /// <param name="errcode_ret"> 
        /// Returns an appropriate error code. If errcode_ret is NULL, no error code is returned.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clCreateBuffer")]
        [CLSCompliant(false)]
        public static unsafe ComputeMemory CreateBuffer<T3>(ComputeContext context, OpenTK.Compute.CL12.MemFlags flags, IntPtr size, [InAttribute, OutAttribute] T3[] host_ptr, [OutAttribute] ErrorCode* errcode_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Creates a buffer object.
        /// </summary>
        /// <param name="context"> 
        /// A valid OpenCL context used to create the buffer object.
        /// </param>
        /// <param name="flags"> 
        /// A bit-field that is used to specify allocation and usage information such as the memory arena that should be used to allocate the buffer object and how it will be used. The following table describes the possible values for flags. If value specified for flags is 0, the default is used which is MemReadWrite.
        /// </param>
        /// <param name="size"> 
        /// The size in bytes of the buffer memory object to be allocated.
        /// </param>
        /// <param name="host_ptr"> 
        /// A pointer to the buffer data that may already be allocated by the application. The size of the buffer that host_ptr points to must be ≥ size bytes.
        /// </param>
        /// <param name="errcode_ret"> 
        /// Returns an appropriate error code. If errcode_ret is NULL, no error code is returned.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clCreateBuffer")]
        [CLSCompliant(false)]
        public static ComputeMemory CreateBuffer<T3>(ComputeContext context, OpenTK.Compute.CL12.MemFlags flags, IntPtr size, [InAttribute, OutAttribute] T3[,] host_ptr, [OutAttribute] out ErrorCode errcode_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Creates a buffer object.
        /// </summary>
        /// <param name="context"> 
        /// A valid OpenCL context used to create the buffer object.
        /// </param>
        /// <param name="flags"> 
        /// A bit-field that is used to specify allocation and usage information such as the memory arena that should be used to allocate the buffer object and how it will be used. The following table describes the possible values for flags. If value specified for flags is 0, the default is used which is MemReadWrite.
        /// </param>
        /// <param name="size"> 
        /// The size in bytes of the buffer memory object to be allocated.
        /// </param>
        /// <param name="host_ptr"> 
        /// A pointer to the buffer data that may already be allocated by the application. The size of the buffer that host_ptr points to must be ≥ size bytes.
        /// </param>
        /// <param name="errcode_ret"> 
        /// Returns an appropriate error code. If errcode_ret is NULL, no error code is returned.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clCreateBuffer")]
        [CLSCompliant(false)]
        public static unsafe ComputeMemory CreateBuffer<T3>(ComputeContext context, OpenTK.Compute.CL12.MemFlags flags, IntPtr size, [InAttribute, OutAttribute] T3[,] host_ptr, [OutAttribute] ErrorCode* errcode_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Creates a buffer object.
        /// </summary>
        /// <param name="context"> 
        /// A valid OpenCL context used to create the buffer object.
        /// </param>
        /// <param name="flags"> 
        /// A bit-field that is used to specify allocation and usage information such as the memory arena that should be used to allocate the buffer object and how it will be used. The following table describes the possible values for flags. If value specified for flags is 0, the default is used which is MemReadWrite.
        /// </param>
        /// <param name="size"> 
        /// The size in bytes of the buffer memory object to be allocated.
        /// </param>
        /// <param name="host_ptr"> 
        /// A pointer to the buffer data that may already be allocated by the application. The size of the buffer that host_ptr points to must be ≥ size bytes.
        /// </param>
        /// <param name="errcode_ret"> 
        /// Returns an appropriate error code. If errcode_ret is NULL, no error code is returned.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clCreateBuffer")]
        [CLSCompliant(false)]
        public static ComputeMemory CreateBuffer<T3>(ComputeContext context, OpenTK.Compute.CL12.MemFlags flags, IntPtr size, [InAttribute, OutAttribute] T3[,,] host_ptr, [OutAttribute] out ErrorCode errcode_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Creates a buffer object.
        /// </summary>
        /// <param name="context"> 
        /// A valid OpenCL context used to create the buffer object.
        /// </param>
        /// <param name="flags"> 
        /// A bit-field that is used to specify allocation and usage information such as the memory arena that should be used to allocate the buffer object and how it will be used. The following table describes the possible values for flags. If value specified for flags is 0, the default is used which is MemReadWrite.
        /// </param>
        /// <param name="size"> 
        /// The size in bytes of the buffer memory object to be allocated.
        /// </param>
        /// <param name="host_ptr"> 
        /// A pointer to the buffer data that may already be allocated by the application. The size of the buffer that host_ptr points to must be ≥ size bytes.
        /// </param>
        /// <param name="errcode_ret"> 
        /// Returns an appropriate error code. If errcode_ret is NULL, no error code is returned.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clCreateBuffer")]
        [CLSCompliant(false)]
        public static unsafe ComputeMemory CreateBuffer<T3>(ComputeContext context, OpenTK.Compute.CL12.MemFlags flags, IntPtr size, [InAttribute, OutAttribute] T3[,,] host_ptr, [OutAttribute] ErrorCode* errcode_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Creates a buffer object.
        /// </summary>
        /// <param name="context"> 
        /// A valid OpenCL context used to create the buffer object.
        /// </param>
        /// <param name="flags"> 
        /// A bit-field that is used to specify allocation and usage information such as the memory arena that should be used to allocate the buffer object and how it will be used. The following table describes the possible values for flags. If value specified for flags is 0, the default is used which is MemReadWrite.
        /// </param>
        /// <param name="size"> 
        /// The size in bytes of the buffer memory object to be allocated.
        /// </param>
        /// <param name="host_ptr"> 
        /// A pointer to the buffer data that may already be allocated by the application. The size of the buffer that host_ptr points to must be ≥ size bytes.
        /// </param>
        /// <param name="errcode_ret"> 
        /// Returns an appropriate error code. If errcode_ret is NULL, no error code is returned.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clCreateBuffer")]
        [CLSCompliant(false)]
        public static ComputeMemory CreateBuffer<T3>(ComputeContext context, OpenTK.Compute.CL12.MemFlags flags, IntPtr size, [InAttribute, OutAttribute] ref T3 host_ptr, [OutAttribute] out ErrorCode errcode_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Creates a buffer object.
        /// </summary>
        /// <param name="context"> 
        /// A valid OpenCL context used to create the buffer object.
        /// </param>
        /// <param name="flags"> 
        /// A bit-field that is used to specify allocation and usage information such as the memory arena that should be used to allocate the buffer object and how it will be used. The following table describes the possible values for flags. If value specified for flags is 0, the default is used which is MemReadWrite.
        /// </param>
        /// <param name="size"> 
        /// The size in bytes of the buffer memory object to be allocated.
        /// </param>
        /// <param name="host_ptr"> 
        /// A pointer to the buffer data that may already be allocated by the application. The size of the buffer that host_ptr points to must be ≥ size bytes.
        /// </param>
        /// <param name="errcode_ret"> 
        /// Returns an appropriate error code. If errcode_ret is NULL, no error code is returned.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clCreateBuffer")]
        [CLSCompliant(false)]
        public static unsafe ComputeMemory CreateBuffer<T3>(ComputeContext context, OpenTK.Compute.CL12.MemFlags flags, IntPtr size, [InAttribute, OutAttribute] ref T3 host_ptr, [OutAttribute] ErrorCode* errcode_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Create a command-queue on a specific device.
        /// </summary>
        /// <param name="context"> 
        /// Must be a valid OpenCL context.
        /// </param>
        /// <param name="device"> 
        /// Must be a device associated with context. It can either be in the list of devices specified when context is created using clCreateContext or have the same device type as the device type specified when the context is created using clCreateContextFromType.
        /// </param>
        /// <param name="properties"> 
        /// Specifies a list of properties for the command-queue. This is a bit-field described in the table below. Only command-queue properties specified in the table below can be set in properties; otherwise the value specified in properties is considered to be not valid. Command-Queue PropertiesDescriptionQueueOutOfOrderExecModeEnableDetermines whether the commands queued in the command-queue are executed in-order or out-of-order. If set, the commands in the command-queue are executed out-of-order. Otherwise, commands are executed in-order. See note below for more information. QueueProfilingEnableEnable or disable profiling of commands in the command-queue. If set, the profiling of commands is enabled. Otherwise profiling of commands is disabled. See  clGetEventProfilingInfo for more information.
        /// </param>
        /// <param name="errcode_ret"> 
        /// Returns an appropriate error code. If errcode_ret is Null, no error code is returned.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clCreateCommandQueue")]
        [CLSCompliant(false)]
        public static CommandQueue CreateCommandQueue(ComputeContext context, ComputeDevice device, OpenTK.Compute.CL12.CommandQueueFlags properties, [OutAttribute] out ErrorCode errcode_ret) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Create a command-queue on a specific device.
        /// </summary>
        /// <param name="context"> 
        /// Must be a valid OpenCL context.
        /// </param>
        /// <param name="device"> 
        /// Must be a device associated with context. It can either be in the list of devices specified when context is created using clCreateContext or have the same device type as the device type specified when the context is created using clCreateContextFromType.
        /// </param>
        /// <param name="properties"> 
        /// Specifies a list of properties for the command-queue. This is a bit-field described in the table below. Only command-queue properties specified in the table below can be set in properties; otherwise the value specified in properties is considered to be not valid. Command-Queue PropertiesDescriptionQueueOutOfOrderExecModeEnableDetermines whether the commands queued in the command-queue are executed in-order or out-of-order. If set, the commands in the command-queue are executed out-of-order. Otherwise, commands are executed in-order. See note below for more information. QueueProfilingEnableEnable or disable profiling of commands in the command-queue. If set, the profiling of commands is enabled. Otherwise profiling of commands is disabled. See  clGetEventProfilingInfo for more information.
        /// </param>
        /// <param name="errcode_ret"> 
        /// Returns an appropriate error code. If errcode_ret is Null, no error code is returned.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clCreateCommandQueue")]
        [CLSCompliant(false)]
        public static unsafe CommandQueue CreateCommandQueue(ComputeContext context, ComputeDevice device, OpenTK.Compute.CL12.CommandQueueFlags properties, [OutAttribute] ErrorCode* errcode_ret) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Creates an OpenCL context.
        /// </summary>
        /// <param name="properties"> 
        /// Specifies a list of context property names and their corresponding values. Each property name is immediately followed by the corresponding desired value. The list is terminated with 0. properties can be NULL in which case the platform that is selected is implementation-defined. The list of supported properties is described in the table below. If the extension cl_khr_dx9_media_sharing is enabled, then properties specifies a list of context property names and their corresponding values. Each property is followed immediately by the corresponding desired value. The list is terminated with zero. If a property is not specified in properties, then its default value (listed in the table below) is used (it is said to be specified implicitly).  If properties is NULL or empty (points to a list whose first value is zero), all attributes take on their default values.  If the extension cl_khr_d3d10_sharing is enabled, then properties specifies a list of context property names and their corresponding values.  Each property is followed immediately by the corresponding desired value.  The list is terminated with zero.  if a property is not specified in properties, then its default value is used (it is said to be specified implicitly). If properties is NULL or empty (points to a list whose first value is zero), all attributes take on their default value.  If the extension cl_khr_gl_sharing is enabled, then properties points to an attribute list, which is a array of ordered attribute name, value> pairs terminated with zero. If an attribute is not specified in properties, then its default value is used (it is said to be specified implicitly). If properties is NULL or empty (points to a list whose first value is zero), all attributes take on their default values.. cl_context_properties enumProperty valueDescriptionContextPlatformcl_platform_idSpecifies the platform to use.ContextInteropUserSynccl_bool Specifies whether the user is responsible for synchronization between OpenCL and other APIs. Please refer to the specific sections in the OpenCL 1.2 extension specification that describe sharing with other APIs for restrictions on using this flag.  If ContextInteropUser SYNC is not specified, a default of False is assumed. ContextD3D10DeviceKhrID3D10Device* If the cl_khr_d3d10_sharing extension is enabled, specifies the ID3D10Device* to use for Direct3D 10 interoperability. The default value is NULL. GlContextKhr0, OpenGL context handle OpenGL context to associated the OpenCL context with (available if the cl_khr_gl_sharing extension is enabled) EglDisplayKhrEglNoDisplay, EGLDisplay handle EGLDisplay an OpenGL context was created with respect to (available if the cl_khr_gl_sharing extension is enabled) GlxDisplayKhrNone, X handle X Display an OpenGL context was created with respect to (available if the cl_khr_gl_sharing extension is enabled) CglSharegroupKhr0, CGL share group handle CGL share group to associate the OpenCL context with (available if the cl_khr_gl_sharing extension is enabled) WglHdcKhr0, HDC handle HDC an OpenGL context was created with respect to (available if the cl_khr_gl_sharing extension is enabled) ContextAdapterD3D9KhrIDirect3DDevice9 * Specifies an IDirect3DDevice9 to use for D3D9 interop (if the cl_khr_dx9_media_sharing extension is supported). ContextAdapterD3D9exKhrIDirect3DDeviceEx* Specifies an IDirect3DDevice9Ex to use for D3D9 interop (if the cl_khr_dx9_media_sharing extension is supported). ContextAdapterDxvaKhrIDXVAHD_Device * Specifies an IDXVAHD_Device to use for DXVA interop (if the cl_khr_dx9_media_sharing extension is supported). ContextD3D11DeviceKhrID3D11Device * Specifies the ID3D11Device * to use for Direct3D 11 interoperability. The default value is NULL.
        /// </param>
        /// <param name="num_devices"> 
        /// The number of devices specified in the devices argument.
        /// </param>
        /// <param name="devices"> 
        /// A pointer to a list of unique devices returned by clGetDeviceIDs or sub-devices created by clCreateSubDevices for a platform.
        /// </param>
        /// <param name="pfn_notify"> 
        /// A callback function that can be registered by the application. This callback function will be used by the OpenCL implementation to report information on errors during context creation as well as errors that occur at runtime in this context.  This callback function may be called asynchronously by the OpenCL implementation.  It is the application's responsibility to ensure that the callback function is thread-safe. If pfn_notify is NULL, no callback function is registered.  The parameters to this callback function are: errinfo is a pointer to an error string.private_info and cb represent a pointer to binary data that is returned by the OpenCL implementation that can be used to log additional information helpful in debugging the error. user_data is a pointer to user supplied data. NOTE: There are a number of cases where error notifications need to be delivered due to an error that occurs outside a context. Such notifications may not be delivered through the pfn_notify callback. Where these notifications go is implementation-defined.
        /// </param>
        /// <param name="user_data"> 
        /// Passed as the user_data argument when pfn_notify is called. user_data can be NULL.
        /// </param>
        /// <param name="errcode_ret"> 
        /// Returns an appropriate error code. If errcode_ret is NULL, no error code is returned.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clCreateContext")]
        [CLSCompliant(false)]
        public static ComputeContext CreateContext(IntPtr[] properties, Int32 num_devices, ComputeDevice[] devices, ContextNotifyDelegate pfn_notify, IntPtr user_data, [OutAttribute] out ErrorCode errcode_ret) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Creates an OpenCL context.
        /// </summary>
        /// <param name="properties"> 
        /// Specifies a list of context property names and their corresponding values. Each property name is immediately followed by the corresponding desired value. The list is terminated with 0. properties can be NULL in which case the platform that is selected is implementation-defined. The list of supported properties is described in the table below. If the extension cl_khr_dx9_media_sharing is enabled, then properties specifies a list of context property names and their corresponding values. Each property is followed immediately by the corresponding desired value. The list is terminated with zero. If a property is not specified in properties, then its default value (listed in the table below) is used (it is said to be specified implicitly).  If properties is NULL or empty (points to a list whose first value is zero), all attributes take on their default values.  If the extension cl_khr_d3d10_sharing is enabled, then properties specifies a list of context property names and their corresponding values.  Each property is followed immediately by the corresponding desired value.  The list is terminated with zero.  if a property is not specified in properties, then its default value is used (it is said to be specified implicitly). If properties is NULL or empty (points to a list whose first value is zero), all attributes take on their default value.  If the extension cl_khr_gl_sharing is enabled, then properties points to an attribute list, which is a array of ordered attribute name, value> pairs terminated with zero. If an attribute is not specified in properties, then its default value is used (it is said to be specified implicitly). If properties is NULL or empty (points to a list whose first value is zero), all attributes take on their default values.. cl_context_properties enumProperty valueDescriptionContextPlatformcl_platform_idSpecifies the platform to use.ContextInteropUserSynccl_bool Specifies whether the user is responsible for synchronization between OpenCL and other APIs. Please refer to the specific sections in the OpenCL 1.2 extension specification that describe sharing with other APIs for restrictions on using this flag.  If ContextInteropUser SYNC is not specified, a default of False is assumed. ContextD3D10DeviceKhrID3D10Device* If the cl_khr_d3d10_sharing extension is enabled, specifies the ID3D10Device* to use for Direct3D 10 interoperability. The default value is NULL. GlContextKhr0, OpenGL context handle OpenGL context to associated the OpenCL context with (available if the cl_khr_gl_sharing extension is enabled) EglDisplayKhrEglNoDisplay, EGLDisplay handle EGLDisplay an OpenGL context was created with respect to (available if the cl_khr_gl_sharing extension is enabled) GlxDisplayKhrNone, X handle X Display an OpenGL context was created with respect to (available if the cl_khr_gl_sharing extension is enabled) CglSharegroupKhr0, CGL share group handle CGL share group to associate the OpenCL context with (available if the cl_khr_gl_sharing extension is enabled) WglHdcKhr0, HDC handle HDC an OpenGL context was created with respect to (available if the cl_khr_gl_sharing extension is enabled) ContextAdapterD3D9KhrIDirect3DDevice9 * Specifies an IDirect3DDevice9 to use for D3D9 interop (if the cl_khr_dx9_media_sharing extension is supported). ContextAdapterD3D9exKhrIDirect3DDeviceEx* Specifies an IDirect3DDevice9Ex to use for D3D9 interop (if the cl_khr_dx9_media_sharing extension is supported). ContextAdapterDxvaKhrIDXVAHD_Device * Specifies an IDXVAHD_Device to use for DXVA interop (if the cl_khr_dx9_media_sharing extension is supported). ContextD3D11DeviceKhrID3D11Device * Specifies the ID3D11Device * to use for Direct3D 11 interoperability. The default value is NULL.
        /// </param>
        /// <param name="num_devices"> 
        /// The number of devices specified in the devices argument.
        /// </param>
        /// <param name="devices"> 
        /// A pointer to a list of unique devices returned by clGetDeviceIDs or sub-devices created by clCreateSubDevices for a platform.
        /// </param>
        /// <param name="pfn_notify"> 
        /// A callback function that can be registered by the application. This callback function will be used by the OpenCL implementation to report information on errors during context creation as well as errors that occur at runtime in this context.  This callback function may be called asynchronously by the OpenCL implementation.  It is the application's responsibility to ensure that the callback function is thread-safe. If pfn_notify is NULL, no callback function is registered.  The parameters to this callback function are: errinfo is a pointer to an error string.private_info and cb represent a pointer to binary data that is returned by the OpenCL implementation that can be used to log additional information helpful in debugging the error. user_data is a pointer to user supplied data. NOTE: There are a number of cases where error notifications need to be delivered due to an error that occurs outside a context. Such notifications may not be delivered through the pfn_notify callback. Where these notifications go is implementation-defined.
        /// </param>
        /// <param name="user_data"> 
        /// Passed as the user_data argument when pfn_notify is called. user_data can be NULL.
        /// </param>
        /// <param name="errcode_ret"> 
        /// Returns an appropriate error code. If errcode_ret is NULL, no error code is returned.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clCreateContext")]
        [CLSCompliant(false)]
        public static ComputeContext CreateContext(ref IntPtr properties, Int32 num_devices, ref ComputeDevice devices, ContextNotifyDelegate pfn_notify, IntPtr user_data, [OutAttribute] out ErrorCode errcode_ret) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Creates an OpenCL context.
        /// </summary>
        /// <param name="properties"> 
        /// Specifies a list of context property names and their corresponding values. Each property name is immediately followed by the corresponding desired value. The list is terminated with 0. properties can be NULL in which case the platform that is selected is implementation-defined. The list of supported properties is described in the table below. If the extension cl_khr_dx9_media_sharing is enabled, then properties specifies a list of context property names and their corresponding values. Each property is followed immediately by the corresponding desired value. The list is terminated with zero. If a property is not specified in properties, then its default value (listed in the table below) is used (it is said to be specified implicitly).  If properties is NULL or empty (points to a list whose first value is zero), all attributes take on their default values.  If the extension cl_khr_d3d10_sharing is enabled, then properties specifies a list of context property names and their corresponding values.  Each property is followed immediately by the corresponding desired value.  The list is terminated with zero.  if a property is not specified in properties, then its default value is used (it is said to be specified implicitly). If properties is NULL or empty (points to a list whose first value is zero), all attributes take on their default value.  If the extension cl_khr_gl_sharing is enabled, then properties points to an attribute list, which is a array of ordered attribute name, value> pairs terminated with zero. If an attribute is not specified in properties, then its default value is used (it is said to be specified implicitly). If properties is NULL or empty (points to a list whose first value is zero), all attributes take on their default values.. cl_context_properties enumProperty valueDescriptionContextPlatformcl_platform_idSpecifies the platform to use.ContextInteropUserSynccl_bool Specifies whether the user is responsible for synchronization between OpenCL and other APIs. Please refer to the specific sections in the OpenCL 1.2 extension specification that describe sharing with other APIs for restrictions on using this flag.  If ContextInteropUser SYNC is not specified, a default of False is assumed. ContextD3D10DeviceKhrID3D10Device* If the cl_khr_d3d10_sharing extension is enabled, specifies the ID3D10Device* to use for Direct3D 10 interoperability. The default value is NULL. GlContextKhr0, OpenGL context handle OpenGL context to associated the OpenCL context with (available if the cl_khr_gl_sharing extension is enabled) EglDisplayKhrEglNoDisplay, EGLDisplay handle EGLDisplay an OpenGL context was created with respect to (available if the cl_khr_gl_sharing extension is enabled) GlxDisplayKhrNone, X handle X Display an OpenGL context was created with respect to (available if the cl_khr_gl_sharing extension is enabled) CglSharegroupKhr0, CGL share group handle CGL share group to associate the OpenCL context with (available if the cl_khr_gl_sharing extension is enabled) WglHdcKhr0, HDC handle HDC an OpenGL context was created with respect to (available if the cl_khr_gl_sharing extension is enabled) ContextAdapterD3D9KhrIDirect3DDevice9 * Specifies an IDirect3DDevice9 to use for D3D9 interop (if the cl_khr_dx9_media_sharing extension is supported). ContextAdapterD3D9exKhrIDirect3DDeviceEx* Specifies an IDirect3DDevice9Ex to use for D3D9 interop (if the cl_khr_dx9_media_sharing extension is supported). ContextAdapterDxvaKhrIDXVAHD_Device * Specifies an IDXVAHD_Device to use for DXVA interop (if the cl_khr_dx9_media_sharing extension is supported). ContextD3D11DeviceKhrID3D11Device * Specifies the ID3D11Device * to use for Direct3D 11 interoperability. The default value is NULL.
        /// </param>
        /// <param name="num_devices"> 
        /// The number of devices specified in the devices argument.
        /// </param>
        /// <param name="devices"> 
        /// A pointer to a list of unique devices returned by clGetDeviceIDs or sub-devices created by clCreateSubDevices for a platform.
        /// </param>
        /// <param name="pfn_notify"> 
        /// A callback function that can be registered by the application. This callback function will be used by the OpenCL implementation to report information on errors during context creation as well as errors that occur at runtime in this context.  This callback function may be called asynchronously by the OpenCL implementation.  It is the application's responsibility to ensure that the callback function is thread-safe. If pfn_notify is NULL, no callback function is registered.  The parameters to this callback function are: errinfo is a pointer to an error string.private_info and cb represent a pointer to binary data that is returned by the OpenCL implementation that can be used to log additional information helpful in debugging the error. user_data is a pointer to user supplied data. NOTE: There are a number of cases where error notifications need to be delivered due to an error that occurs outside a context. Such notifications may not be delivered through the pfn_notify callback. Where these notifications go is implementation-defined.
        /// </param>
        /// <param name="user_data"> 
        /// Passed as the user_data argument when pfn_notify is called. user_data can be NULL.
        /// </param>
        /// <param name="errcode_ret"> 
        /// Returns an appropriate error code. If errcode_ret is NULL, no error code is returned.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clCreateContext")]
        [CLSCompliant(false)]
        public static unsafe ComputeContext CreateContext(IntPtr* properties, Int32 num_devices, ComputeDevice* devices, ContextNotifyDelegate pfn_notify, IntPtr user_data, [OutAttribute] ErrorCode* errcode_ret) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Create an OpenCL context from a device type that identifies the specific device(s) to use.
        /// </summary>
        /// <param name="properties"> 
        /// Specifies a list of context property names and their corresponding values. Each property name is immediately followed by the corresponding desired value.  The list of supported properties is described in the table below. properties can also be NULL in which case the platform that is selected is implementation-defined.  If the cl_khr_gl_sharing extension is supported, properties points to an attribute list whose format and valid contents are identical to the properties argument of clCreateContext which is: properties specifies a list of context property names and their corresponding values.  Each property name is immediately followed by the corresponding desired value. The list is terminated with 0.  The list of supported properties is described in the table below. properties can be NULL in which case the platform that is selected is implementation-defined. cl_context_properties enumProperty valueDescriptionContextPlatformcl_platform_idSpecifies the platform to use.ContextInteropUserSynccl_boolSpecifies whether the user is responsible for synchronization between OpenCL and other APIs. Please refer to the specific sections in the OpenCL 1.2 extension specification that describe sharing with other APIs for restrictions on using this flag. If ContextInteropUserSync is not specified, a default of False is assumed.ContextD3D10DeviceKhrID3D10Device * Specifies the ID3D10Device * to use for Direct3D 10 interoperability.  The default value is NULL (applies if the extension cl_khr_d3d10_sharing is supported) ContextAdapterD3D9KhrIDirect3DDevice9 * Specifies an IDirect3DDevice9 to use for D3D9 intero (applies if the cl_khr_dx9_media_sharing extension is supported) ContextAdapterD3D9exKhrIDirect3DDeviceEx* Specifies an IDirect3DDevice9Ex to use for D3D9 interop (applies if the cl_khr_dx9_media_sharing extension is supported) ContextAdapterDxvaKhrIDXVAHD_Device * Specifies an IDXVAHD_Device to use for DXVA interop (applies if the cl_khr_dx9_media_sharing extension is supported) GlContextKhr0, OpenGL context handle OpenGL context to associated the OpenCL context with (available if the cl_khr_gl_sharing extension is enabled) CglSharegroupKhr0, CGL share group handle CGL share group to associate the OpenCL context with (available if the cl_khr_gl_sharing extension is enabled) EglDisplayKhrEglNoDisplay, EGLDisplay handle CGL share group to associate the OpenCL context with (available if the cl_khr_gl_sharing extension is enabled) GlxDisplayKhrNone, X handle X Display an OpenGL context was created with respect to (available if the cl_khr_gl_sharing extension is enabled) WglHdcKhr0, HDC handle HDC an OpenGL context was created with respect to (available if the cl_khr_gl_sharing extension is enabled) ContextD3D11DeviceKhrID3D11Device * Specifies the ID3D11Device  * to use for Direct3D 11 interoperability. The default value is NULL * (applies if the cl_khr_d3d11_sharing extension is supported)
        /// </param>
        /// <param name="device_type"> 
        /// A bit-field that identifies the type of device and is described in the table below. cl_device_typeDescriptionDeviceTypeCpu An OpenCL device that is the host processor. The host processor runs the OpenCL implementations and is a single or multi-core CPU. DeviceTypeGpu An OpenCL device that is a GPU. By this we mean that the device can also be used to accelerate a 3D API such as OpenGL or DirectX. DeviceTypeAccelerator Dedicated OpenCL accelerators (for example the IBM CELL Blade). These devices communicate with the host processor using a peripheral interconnect such as PCIe. DeviceTypeCustom Dedicated accelerators that do not support programs written in OpenCL C. DeviceTypeDefault The default OpenCL device in the system. The default device cannot be a DeviceTypeCustom device. DeviceTypeAll All OpenCL devices available in the system except DeviceTypeCustom devices.
        /// </param>
        /// <param name="pfn_notify"> 
        /// A callback function that can be registered by the application. This callback function will be used by the OpenCL implementation to report information on errors that occur in this context. This callback function may be called asynchronously by the OpenCL implementation.  It is the application's responsibility to ensure that the callback function is thread-safe. If pfn_notify is NULL, no callback function is registered. The parameters to this callback function are: errinfo is a pointer to an error string.private_info and cb represent a pointer to binary data that is returned by the OpenCL implementation that can be used to log additional information helpful in debugging the error. user_data is a pointer to user supplied data. There are a number of cases where error notifications need to be delivered due to an error that occurs outside a context. Such notifications may not be delivered through the pfn_notify callback. Where these notifications go is implementation-defined.
        /// </param>
        /// <param name="user_data"> 
        /// Passed as the user_data argument when pfn_notify is called. user_data can be NULL.
        /// </param>
        /// <param name="errcode_ret"> 
        /// Return an appropriate error code. If errcode_ret is NULL, no error code is returned.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clCreateContextFromType")]
        [CLSCompliant(false)]
        public static ComputeContext CreateContextFromType(IntPtr[] properties, OpenTK.Compute.CL12.DeviceTypeFlags device_type, ContextNotifyDelegate pfn_notify, IntPtr user_data, [OutAttribute] out ErrorCode errcode_ret) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Create an OpenCL context from a device type that identifies the specific device(s) to use.
        /// </summary>
        /// <param name="properties"> 
        /// Specifies a list of context property names and their corresponding values. Each property name is immediately followed by the corresponding desired value.  The list of supported properties is described in the table below. properties can also be NULL in which case the platform that is selected is implementation-defined.  If the cl_khr_gl_sharing extension is supported, properties points to an attribute list whose format and valid contents are identical to the properties argument of clCreateContext which is: properties specifies a list of context property names and their corresponding values.  Each property name is immediately followed by the corresponding desired value. The list is terminated with 0.  The list of supported properties is described in the table below. properties can be NULL in which case the platform that is selected is implementation-defined. cl_context_properties enumProperty valueDescriptionContextPlatformcl_platform_idSpecifies the platform to use.ContextInteropUserSynccl_boolSpecifies whether the user is responsible for synchronization between OpenCL and other APIs. Please refer to the specific sections in the OpenCL 1.2 extension specification that describe sharing with other APIs for restrictions on using this flag. If ContextInteropUserSync is not specified, a default of False is assumed.ContextD3D10DeviceKhrID3D10Device * Specifies the ID3D10Device * to use for Direct3D 10 interoperability.  The default value is NULL (applies if the extension cl_khr_d3d10_sharing is supported) ContextAdapterD3D9KhrIDirect3DDevice9 * Specifies an IDirect3DDevice9 to use for D3D9 intero (applies if the cl_khr_dx9_media_sharing extension is supported) ContextAdapterD3D9exKhrIDirect3DDeviceEx* Specifies an IDirect3DDevice9Ex to use for D3D9 interop (applies if the cl_khr_dx9_media_sharing extension is supported) ContextAdapterDxvaKhrIDXVAHD_Device * Specifies an IDXVAHD_Device to use for DXVA interop (applies if the cl_khr_dx9_media_sharing extension is supported) GlContextKhr0, OpenGL context handle OpenGL context to associated the OpenCL context with (available if the cl_khr_gl_sharing extension is enabled) CglSharegroupKhr0, CGL share group handle CGL share group to associate the OpenCL context with (available if the cl_khr_gl_sharing extension is enabled) EglDisplayKhrEglNoDisplay, EGLDisplay handle CGL share group to associate the OpenCL context with (available if the cl_khr_gl_sharing extension is enabled) GlxDisplayKhrNone, X handle X Display an OpenGL context was created with respect to (available if the cl_khr_gl_sharing extension is enabled) WglHdcKhr0, HDC handle HDC an OpenGL context was created with respect to (available if the cl_khr_gl_sharing extension is enabled) ContextD3D11DeviceKhrID3D11Device * Specifies the ID3D11Device  * to use for Direct3D 11 interoperability. The default value is NULL * (applies if the cl_khr_d3d11_sharing extension is supported)
        /// </param>
        /// <param name="device_type"> 
        /// A bit-field that identifies the type of device and is described in the table below. cl_device_typeDescriptionDeviceTypeCpu An OpenCL device that is the host processor. The host processor runs the OpenCL implementations and is a single or multi-core CPU. DeviceTypeGpu An OpenCL device that is a GPU. By this we mean that the device can also be used to accelerate a 3D API such as OpenGL or DirectX. DeviceTypeAccelerator Dedicated OpenCL accelerators (for example the IBM CELL Blade). These devices communicate with the host processor using a peripheral interconnect such as PCIe. DeviceTypeCustom Dedicated accelerators that do not support programs written in OpenCL C. DeviceTypeDefault The default OpenCL device in the system. The default device cannot be a DeviceTypeCustom device. DeviceTypeAll All OpenCL devices available in the system except DeviceTypeCustom devices.
        /// </param>
        /// <param name="pfn_notify"> 
        /// A callback function that can be registered by the application. This callback function will be used by the OpenCL implementation to report information on errors that occur in this context. This callback function may be called asynchronously by the OpenCL implementation.  It is the application's responsibility to ensure that the callback function is thread-safe. If pfn_notify is NULL, no callback function is registered. The parameters to this callback function are: errinfo is a pointer to an error string.private_info and cb represent a pointer to binary data that is returned by the OpenCL implementation that can be used to log additional information helpful in debugging the error. user_data is a pointer to user supplied data. There are a number of cases where error notifications need to be delivered due to an error that occurs outside a context. Such notifications may not be delivered through the pfn_notify callback. Where these notifications go is implementation-defined.
        /// </param>
        /// <param name="user_data"> 
        /// Passed as the user_data argument when pfn_notify is called. user_data can be NULL.
        /// </param>
        /// <param name="errcode_ret"> 
        /// Return an appropriate error code. If errcode_ret is NULL, no error code is returned.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clCreateContextFromType")]
        [CLSCompliant(false)]
        public static ComputeContext CreateContextFromType(ref IntPtr properties, OpenTK.Compute.CL12.DeviceTypeFlags device_type, ContextNotifyDelegate pfn_notify, IntPtr user_data, [OutAttribute] out ErrorCode errcode_ret) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Create an OpenCL context from a device type that identifies the specific device(s) to use.
        /// </summary>
        /// <param name="properties"> 
        /// Specifies a list of context property names and their corresponding values. Each property name is immediately followed by the corresponding desired value.  The list of supported properties is described in the table below. properties can also be NULL in which case the platform that is selected is implementation-defined.  If the cl_khr_gl_sharing extension is supported, properties points to an attribute list whose format and valid contents are identical to the properties argument of clCreateContext which is: properties specifies a list of context property names and their corresponding values.  Each property name is immediately followed by the corresponding desired value. The list is terminated with 0.  The list of supported properties is described in the table below. properties can be NULL in which case the platform that is selected is implementation-defined. cl_context_properties enumProperty valueDescriptionContextPlatformcl_platform_idSpecifies the platform to use.ContextInteropUserSynccl_boolSpecifies whether the user is responsible for synchronization between OpenCL and other APIs. Please refer to the specific sections in the OpenCL 1.2 extension specification that describe sharing with other APIs for restrictions on using this flag. If ContextInteropUserSync is not specified, a default of False is assumed.ContextD3D10DeviceKhrID3D10Device * Specifies the ID3D10Device * to use for Direct3D 10 interoperability.  The default value is NULL (applies if the extension cl_khr_d3d10_sharing is supported) ContextAdapterD3D9KhrIDirect3DDevice9 * Specifies an IDirect3DDevice9 to use for D3D9 intero (applies if the cl_khr_dx9_media_sharing extension is supported) ContextAdapterD3D9exKhrIDirect3DDeviceEx* Specifies an IDirect3DDevice9Ex to use for D3D9 interop (applies if the cl_khr_dx9_media_sharing extension is supported) ContextAdapterDxvaKhrIDXVAHD_Device * Specifies an IDXVAHD_Device to use for DXVA interop (applies if the cl_khr_dx9_media_sharing extension is supported) GlContextKhr0, OpenGL context handle OpenGL context to associated the OpenCL context with (available if the cl_khr_gl_sharing extension is enabled) CglSharegroupKhr0, CGL share group handle CGL share group to associate the OpenCL context with (available if the cl_khr_gl_sharing extension is enabled) EglDisplayKhrEglNoDisplay, EGLDisplay handle CGL share group to associate the OpenCL context with (available if the cl_khr_gl_sharing extension is enabled) GlxDisplayKhrNone, X handle X Display an OpenGL context was created with respect to (available if the cl_khr_gl_sharing extension is enabled) WglHdcKhr0, HDC handle HDC an OpenGL context was created with respect to (available if the cl_khr_gl_sharing extension is enabled) ContextD3D11DeviceKhrID3D11Device * Specifies the ID3D11Device  * to use for Direct3D 11 interoperability. The default value is NULL * (applies if the cl_khr_d3d11_sharing extension is supported)
        /// </param>
        /// <param name="device_type"> 
        /// A bit-field that identifies the type of device and is described in the table below. cl_device_typeDescriptionDeviceTypeCpu An OpenCL device that is the host processor. The host processor runs the OpenCL implementations and is a single or multi-core CPU. DeviceTypeGpu An OpenCL device that is a GPU. By this we mean that the device can also be used to accelerate a 3D API such as OpenGL or DirectX. DeviceTypeAccelerator Dedicated OpenCL accelerators (for example the IBM CELL Blade). These devices communicate with the host processor using a peripheral interconnect such as PCIe. DeviceTypeCustom Dedicated accelerators that do not support programs written in OpenCL C. DeviceTypeDefault The default OpenCL device in the system. The default device cannot be a DeviceTypeCustom device. DeviceTypeAll All OpenCL devices available in the system except DeviceTypeCustom devices.
        /// </param>
        /// <param name="pfn_notify"> 
        /// A callback function that can be registered by the application. This callback function will be used by the OpenCL implementation to report information on errors that occur in this context. This callback function may be called asynchronously by the OpenCL implementation.  It is the application's responsibility to ensure that the callback function is thread-safe. If pfn_notify is NULL, no callback function is registered. The parameters to this callback function are: errinfo is a pointer to an error string.private_info and cb represent a pointer to binary data that is returned by the OpenCL implementation that can be used to log additional information helpful in debugging the error. user_data is a pointer to user supplied data. There are a number of cases where error notifications need to be delivered due to an error that occurs outside a context. Such notifications may not be delivered through the pfn_notify callback. Where these notifications go is implementation-defined.
        /// </param>
        /// <param name="user_data"> 
        /// Passed as the user_data argument when pfn_notify is called. user_data can be NULL.
        /// </param>
        /// <param name="errcode_ret"> 
        /// Return an appropriate error code. If errcode_ret is NULL, no error code is returned.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clCreateContextFromType")]
        [CLSCompliant(false)]
        public static unsafe ComputeContext CreateContextFromType(IntPtr* properties, OpenTK.Compute.CL12.DeviceTypeFlags device_type, ContextNotifyDelegate pfn_notify, IntPtr user_data, [OutAttribute] ErrorCode* errcode_ret) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.2]
        /// Creates a 1D image, 1D image buffer, 1D image array, 2D image, 2D image array or 3D image object.
        /// </summary>
        /// <param name="context"> 
        /// A valid OpenCL context on which the image object is to be created.
        /// </param>
        /// <param name="flags"> 
        /// A bit-field that is used to specify allocation and usage information about the image memory object being created and is described in the table below.  For all image types except MemObjectImage1DBuffer, if value specified for flags is 0, the default is used which is MemReadWrite.  For MemObjectImage1DBuffer image type, if the MemReadWrite, MemReadOnly or MemWriteOnly values are not specified in flags, they are inherited from the corresponding memory access qualifers associated with buffer. The MemUseHostPtr, MemAllocHostPtr and MemCopyHostPtr values cannot be specified in flags but are inherited from the corresponding memory access qualifiers associated with buffer.  If MemCopyHostPtr is specified in the memory access qualifier values associated with buffer it does not imply any additional copies when the sub-buffer is created from buffer. If the MemHostWriteOnly, MemHostReadOnly or MemHostNoAccess values are not specified in flags, they are inherited from the corresponding memory access qualifiers associated with buffer.
        /// </param>
        /// <param name="image_format">[length: 1] 
        /// A pointer to a structure that describes format properties of the image to be allocated. See cl_image_format for a detailed description of the image format descriptor.
        /// </param>
        /// <param name="image_desc">[length: 1] 
        /// A pointer to a structure that describes type and dimensions of the image to be allocated.  See imageDescriptor for more information.
        /// </param>
        /// <param name="host_ptr">[length: 1] 
        /// A pointer to the image data that may already be allocated by the application. Refer to table below for a description of how large the buffer that host_ptr points to must be. Image TypeSize of buffer that host_ptr points toMemObjectImage1D≥ imageRowPitchMemObjectImage1DBuffer≥ imageRowPitchMemObjectImage2D≥ imageRowPitch * imageHeightMemObjectImage3D≥ imageSlicePitch * imageDepthMemObjectImage1DArray≥ imageSlicePitch * imageArraySizeMemObjectImage2DArray≥ imageSlicePitch * imageArraySize For a 3D image or 2D image array, the image data specified by host_ptr is stored as a linear sequence of adjacent 2D image slices or 2D images respectively. Each 2D image is a linear sequence of  adjacent scanlines. Each scanline is a linear sequence of image elements.  For a 2D image, the image data specified by host_ptr is stored as a linear sequence of adjacent scanlines. Each scanline is a linear sequence of image elements.  For a 1D image array, the image data specified by host_ptr is stored as a linear sequence of adjacent 1D images respectively. Each 1D image or 1D image buffer is a single scanline which is a linear sequence of adjacent elements.
        /// </param>
        /// <param name="errcode_ret">[length: 1] 
        /// Will return an appropriate error code. If errcode_ret is NULL, no error code is returned.
        /// </param>
        [AutoGenerated(Category = "", Version = "1.2", EntryPoint = "clCreateImage")]
        [CLSCompliant(false)]
        public static ComputeMemory CreateImage(ComputeContext context, OpenTK.Compute.CL12.MemFlags[] flags, ref ImageFormat image_format, ref ImageDescriptor image_desc, IntPtr host_ptr, [OutAttribute] out OpenTK.Compute.CL12.ErrorCode errcode_ret) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.2]
        /// Creates a 1D image, 1D image buffer, 1D image array, 2D image, 2D image array or 3D image object.
        /// </summary>
        /// <param name="context"> 
        /// A valid OpenCL context on which the image object is to be created.
        /// </param>
        /// <param name="flags"> 
        /// A bit-field that is used to specify allocation and usage information about the image memory object being created and is described in the table below.  For all image types except MemObjectImage1DBuffer, if value specified for flags is 0, the default is used which is MemReadWrite.  For MemObjectImage1DBuffer image type, if the MemReadWrite, MemReadOnly or MemWriteOnly values are not specified in flags, they are inherited from the corresponding memory access qualifers associated with buffer. The MemUseHostPtr, MemAllocHostPtr and MemCopyHostPtr values cannot be specified in flags but are inherited from the corresponding memory access qualifiers associated with buffer.  If MemCopyHostPtr is specified in the memory access qualifier values associated with buffer it does not imply any additional copies when the sub-buffer is created from buffer. If the MemHostWriteOnly, MemHostReadOnly or MemHostNoAccess values are not specified in flags, they are inherited from the corresponding memory access qualifiers associated with buffer.
        /// </param>
        /// <param name="image_format">[length: 1] 
        /// A pointer to a structure that describes format properties of the image to be allocated. See cl_image_format for a detailed description of the image format descriptor.
        /// </param>
        /// <param name="image_desc">[length: 1] 
        /// A pointer to a structure that describes type and dimensions of the image to be allocated.  See imageDescriptor for more information.
        /// </param>
        /// <param name="host_ptr">[length: 1] 
        /// A pointer to the image data that may already be allocated by the application. Refer to table below for a description of how large the buffer that host_ptr points to must be. Image TypeSize of buffer that host_ptr points toMemObjectImage1D≥ imageRowPitchMemObjectImage1DBuffer≥ imageRowPitchMemObjectImage2D≥ imageRowPitch * imageHeightMemObjectImage3D≥ imageSlicePitch * imageDepthMemObjectImage1DArray≥ imageSlicePitch * imageArraySizeMemObjectImage2DArray≥ imageSlicePitch * imageArraySize For a 3D image or 2D image array, the image data specified by host_ptr is stored as a linear sequence of adjacent 2D image slices or 2D images respectively. Each 2D image is a linear sequence of  adjacent scanlines. Each scanline is a linear sequence of image elements.  For a 2D image, the image data specified by host_ptr is stored as a linear sequence of adjacent scanlines. Each scanline is a linear sequence of image elements.  For a 1D image array, the image data specified by host_ptr is stored as a linear sequence of adjacent 1D images respectively. Each 1D image or 1D image buffer is a single scanline which is a linear sequence of adjacent elements.
        /// </param>
        /// <param name="errcode_ret">[length: 1] 
        /// Will return an appropriate error code. If errcode_ret is NULL, no error code is returned.
        /// </param>
        [AutoGenerated(Category = "", Version = "1.2", EntryPoint = "clCreateImage")]
        [CLSCompliant(false)]
        public static ComputeMemory CreateImage<T4>(ComputeContext context, OpenTK.Compute.CL12.MemFlags[] flags, ref ImageFormat image_format, ref ImageDescriptor image_desc, [InAttribute, OutAttribute] T4[] host_ptr, [OutAttribute] out OpenTK.Compute.CL12.ErrorCode errcode_ret)
            where T4 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.2]
        /// Creates a 1D image, 1D image buffer, 1D image array, 2D image, 2D image array or 3D image object.
        /// </summary>
        /// <param name="context"> 
        /// A valid OpenCL context on which the image object is to be created.
        /// </param>
        /// <param name="flags"> 
        /// A bit-field that is used to specify allocation and usage information about the image memory object being created and is described in the table below.  For all image types except MemObjectImage1DBuffer, if value specified for flags is 0, the default is used which is MemReadWrite.  For MemObjectImage1DBuffer image type, if the MemReadWrite, MemReadOnly or MemWriteOnly values are not specified in flags, they are inherited from the corresponding memory access qualifers associated with buffer. The MemUseHostPtr, MemAllocHostPtr and MemCopyHostPtr values cannot be specified in flags but are inherited from the corresponding memory access qualifiers associated with buffer.  If MemCopyHostPtr is specified in the memory access qualifier values associated with buffer it does not imply any additional copies when the sub-buffer is created from buffer. If the MemHostWriteOnly, MemHostReadOnly or MemHostNoAccess values are not specified in flags, they are inherited from the corresponding memory access qualifiers associated with buffer.
        /// </param>
        /// <param name="image_format">[length: 1] 
        /// A pointer to a structure that describes format properties of the image to be allocated. See cl_image_format for a detailed description of the image format descriptor.
        /// </param>
        /// <param name="image_desc">[length: 1] 
        /// A pointer to a structure that describes type and dimensions of the image to be allocated.  See imageDescriptor for more information.
        /// </param>
        /// <param name="host_ptr">[length: 1] 
        /// A pointer to the image data that may already be allocated by the application. Refer to table below for a description of how large the buffer that host_ptr points to must be. Image TypeSize of buffer that host_ptr points toMemObjectImage1D≥ imageRowPitchMemObjectImage1DBuffer≥ imageRowPitchMemObjectImage2D≥ imageRowPitch * imageHeightMemObjectImage3D≥ imageSlicePitch * imageDepthMemObjectImage1DArray≥ imageSlicePitch * imageArraySizeMemObjectImage2DArray≥ imageSlicePitch * imageArraySize For a 3D image or 2D image array, the image data specified by host_ptr is stored as a linear sequence of adjacent 2D image slices or 2D images respectively. Each 2D image is a linear sequence of  adjacent scanlines. Each scanline is a linear sequence of image elements.  For a 2D image, the image data specified by host_ptr is stored as a linear sequence of adjacent scanlines. Each scanline is a linear sequence of image elements.  For a 1D image array, the image data specified by host_ptr is stored as a linear sequence of adjacent 1D images respectively. Each 1D image or 1D image buffer is a single scanline which is a linear sequence of adjacent elements.
        /// </param>
        /// <param name="errcode_ret">[length: 1] 
        /// Will return an appropriate error code. If errcode_ret is NULL, no error code is returned.
        /// </param>
        [AutoGenerated(Category = "", Version = "1.2", EntryPoint = "clCreateImage")]
        [CLSCompliant(false)]
        public static ComputeMemory CreateImage<T4>(ComputeContext context, OpenTK.Compute.CL12.MemFlags[] flags, ref ImageFormat image_format, ref ImageDescriptor image_desc, [InAttribute, OutAttribute] T4[,] host_ptr, [OutAttribute] out OpenTK.Compute.CL12.ErrorCode errcode_ret)
            where T4 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.2]
        /// Creates a 1D image, 1D image buffer, 1D image array, 2D image, 2D image array or 3D image object.
        /// </summary>
        /// <param name="context"> 
        /// A valid OpenCL context on which the image object is to be created.
        /// </param>
        /// <param name="flags"> 
        /// A bit-field that is used to specify allocation and usage information about the image memory object being created and is described in the table below.  For all image types except MemObjectImage1DBuffer, if value specified for flags is 0, the default is used which is MemReadWrite.  For MemObjectImage1DBuffer image type, if the MemReadWrite, MemReadOnly or MemWriteOnly values are not specified in flags, they are inherited from the corresponding memory access qualifers associated with buffer. The MemUseHostPtr, MemAllocHostPtr and MemCopyHostPtr values cannot be specified in flags but are inherited from the corresponding memory access qualifiers associated with buffer.  If MemCopyHostPtr is specified in the memory access qualifier values associated with buffer it does not imply any additional copies when the sub-buffer is created from buffer. If the MemHostWriteOnly, MemHostReadOnly or MemHostNoAccess values are not specified in flags, they are inherited from the corresponding memory access qualifiers associated with buffer.
        /// </param>
        /// <param name="image_format">[length: 1] 
        /// A pointer to a structure that describes format properties of the image to be allocated. See cl_image_format for a detailed description of the image format descriptor.
        /// </param>
        /// <param name="image_desc">[length: 1] 
        /// A pointer to a structure that describes type and dimensions of the image to be allocated.  See imageDescriptor for more information.
        /// </param>
        /// <param name="host_ptr">[length: 1] 
        /// A pointer to the image data that may already be allocated by the application. Refer to table below for a description of how large the buffer that host_ptr points to must be. Image TypeSize of buffer that host_ptr points toMemObjectImage1D≥ imageRowPitchMemObjectImage1DBuffer≥ imageRowPitchMemObjectImage2D≥ imageRowPitch * imageHeightMemObjectImage3D≥ imageSlicePitch * imageDepthMemObjectImage1DArray≥ imageSlicePitch * imageArraySizeMemObjectImage2DArray≥ imageSlicePitch * imageArraySize For a 3D image or 2D image array, the image data specified by host_ptr is stored as a linear sequence of adjacent 2D image slices or 2D images respectively. Each 2D image is a linear sequence of  adjacent scanlines. Each scanline is a linear sequence of image elements.  For a 2D image, the image data specified by host_ptr is stored as a linear sequence of adjacent scanlines. Each scanline is a linear sequence of image elements.  For a 1D image array, the image data specified by host_ptr is stored as a linear sequence of adjacent 1D images respectively. Each 1D image or 1D image buffer is a single scanline which is a linear sequence of adjacent elements.
        /// </param>
        /// <param name="errcode_ret">[length: 1] 
        /// Will return an appropriate error code. If errcode_ret is NULL, no error code is returned.
        /// </param>
        [AutoGenerated(Category = "", Version = "1.2", EntryPoint = "clCreateImage")]
        [CLSCompliant(false)]
        public static ComputeMemory CreateImage<T4>(ComputeContext context, OpenTK.Compute.CL12.MemFlags[] flags, ref ImageFormat image_format, ref ImageDescriptor image_desc, [InAttribute, OutAttribute] T4[,,] host_ptr, [OutAttribute] out OpenTK.Compute.CL12.ErrorCode errcode_ret)
            where T4 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.2]
        /// Creates a 1D image, 1D image buffer, 1D image array, 2D image, 2D image array or 3D image object.
        /// </summary>
        /// <param name="context"> 
        /// A valid OpenCL context on which the image object is to be created.
        /// </param>
        /// <param name="flags"> 
        /// A bit-field that is used to specify allocation and usage information about the image memory object being created and is described in the table below.  For all image types except MemObjectImage1DBuffer, if value specified for flags is 0, the default is used which is MemReadWrite.  For MemObjectImage1DBuffer image type, if the MemReadWrite, MemReadOnly or MemWriteOnly values are not specified in flags, they are inherited from the corresponding memory access qualifers associated with buffer. The MemUseHostPtr, MemAllocHostPtr and MemCopyHostPtr values cannot be specified in flags but are inherited from the corresponding memory access qualifiers associated with buffer.  If MemCopyHostPtr is specified in the memory access qualifier values associated with buffer it does not imply any additional copies when the sub-buffer is created from buffer. If the MemHostWriteOnly, MemHostReadOnly or MemHostNoAccess values are not specified in flags, they are inherited from the corresponding memory access qualifiers associated with buffer.
        /// </param>
        /// <param name="image_format">[length: 1] 
        /// A pointer to a structure that describes format properties of the image to be allocated. See cl_image_format for a detailed description of the image format descriptor.
        /// </param>
        /// <param name="image_desc">[length: 1] 
        /// A pointer to a structure that describes type and dimensions of the image to be allocated.  See imageDescriptor for more information.
        /// </param>
        /// <param name="host_ptr">[length: 1] 
        /// A pointer to the image data that may already be allocated by the application. Refer to table below for a description of how large the buffer that host_ptr points to must be. Image TypeSize of buffer that host_ptr points toMemObjectImage1D≥ imageRowPitchMemObjectImage1DBuffer≥ imageRowPitchMemObjectImage2D≥ imageRowPitch * imageHeightMemObjectImage3D≥ imageSlicePitch * imageDepthMemObjectImage1DArray≥ imageSlicePitch * imageArraySizeMemObjectImage2DArray≥ imageSlicePitch * imageArraySize For a 3D image or 2D image array, the image data specified by host_ptr is stored as a linear sequence of adjacent 2D image slices or 2D images respectively. Each 2D image is a linear sequence of  adjacent scanlines. Each scanline is a linear sequence of image elements.  For a 2D image, the image data specified by host_ptr is stored as a linear sequence of adjacent scanlines. Each scanline is a linear sequence of image elements.  For a 1D image array, the image data specified by host_ptr is stored as a linear sequence of adjacent 1D images respectively. Each 1D image or 1D image buffer is a single scanline which is a linear sequence of adjacent elements.
        /// </param>
        /// <param name="errcode_ret">[length: 1] 
        /// Will return an appropriate error code. If errcode_ret is NULL, no error code is returned.
        /// </param>
        [AutoGenerated(Category = "", Version = "1.2", EntryPoint = "clCreateImage")]
        [CLSCompliant(false)]
        public static ComputeMemory CreateImage<T4>(ComputeContext context, OpenTK.Compute.CL12.MemFlags[] flags, ref ImageFormat image_format, ref ImageDescriptor image_desc, [InAttribute, OutAttribute] ref T4 host_ptr, [OutAttribute] out OpenTK.Compute.CL12.ErrorCode errcode_ret)
            where T4 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.2]
        /// Creates a 1D image, 1D image buffer, 1D image array, 2D image, 2D image array or 3D image object.
        /// </summary>
        /// <param name="context"> 
        /// A valid OpenCL context on which the image object is to be created.
        /// </param>
        /// <param name="flags"> 
        /// A bit-field that is used to specify allocation and usage information about the image memory object being created and is described in the table below.  For all image types except MemObjectImage1DBuffer, if value specified for flags is 0, the default is used which is MemReadWrite.  For MemObjectImage1DBuffer image type, if the MemReadWrite, MemReadOnly or MemWriteOnly values are not specified in flags, they are inherited from the corresponding memory access qualifers associated with buffer. The MemUseHostPtr, MemAllocHostPtr and MemCopyHostPtr values cannot be specified in flags but are inherited from the corresponding memory access qualifiers associated with buffer.  If MemCopyHostPtr is specified in the memory access qualifier values associated with buffer it does not imply any additional copies when the sub-buffer is created from buffer. If the MemHostWriteOnly, MemHostReadOnly or MemHostNoAccess values are not specified in flags, they are inherited from the corresponding memory access qualifiers associated with buffer.
        /// </param>
        /// <param name="image_format">[length: 1] 
        /// A pointer to a structure that describes format properties of the image to be allocated. See cl_image_format for a detailed description of the image format descriptor.
        /// </param>
        /// <param name="image_desc">[length: 1] 
        /// A pointer to a structure that describes type and dimensions of the image to be allocated.  See imageDescriptor for more information.
        /// </param>
        /// <param name="host_ptr">[length: 1] 
        /// A pointer to the image data that may already be allocated by the application. Refer to table below for a description of how large the buffer that host_ptr points to must be. Image TypeSize of buffer that host_ptr points toMemObjectImage1D≥ imageRowPitchMemObjectImage1DBuffer≥ imageRowPitchMemObjectImage2D≥ imageRowPitch * imageHeightMemObjectImage3D≥ imageSlicePitch * imageDepthMemObjectImage1DArray≥ imageSlicePitch * imageArraySizeMemObjectImage2DArray≥ imageSlicePitch * imageArraySize For a 3D image or 2D image array, the image data specified by host_ptr is stored as a linear sequence of adjacent 2D image slices or 2D images respectively. Each 2D image is a linear sequence of  adjacent scanlines. Each scanline is a linear sequence of image elements.  For a 2D image, the image data specified by host_ptr is stored as a linear sequence of adjacent scanlines. Each scanline is a linear sequence of image elements.  For a 1D image array, the image data specified by host_ptr is stored as a linear sequence of adjacent 1D images respectively. Each 1D image or 1D image buffer is a single scanline which is a linear sequence of adjacent elements.
        /// </param>
        /// <param name="errcode_ret">[length: 1] 
        /// Will return an appropriate error code. If errcode_ret is NULL, no error code is returned.
        /// </param>
        [AutoGenerated(Category = "", Version = "1.2", EntryPoint = "clCreateImage")]
        [CLSCompliant(false)]
        public static ComputeMemory CreateImage(ComputeContext context, ref OpenTK.Compute.CL12.MemFlags flags, ref ImageFormat image_format, ref ImageDescriptor image_desc, IntPtr host_ptr, [OutAttribute] out OpenTK.Compute.CL12.ErrorCode errcode_ret) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.2]
        /// Creates a 1D image, 1D image buffer, 1D image array, 2D image, 2D image array or 3D image object.
        /// </summary>
        /// <param name="context"> 
        /// A valid OpenCL context on which the image object is to be created.
        /// </param>
        /// <param name="flags"> 
        /// A bit-field that is used to specify allocation and usage information about the image memory object being created and is described in the table below.  For all image types except MemObjectImage1DBuffer, if value specified for flags is 0, the default is used which is MemReadWrite.  For MemObjectImage1DBuffer image type, if the MemReadWrite, MemReadOnly or MemWriteOnly values are not specified in flags, they are inherited from the corresponding memory access qualifers associated with buffer. The MemUseHostPtr, MemAllocHostPtr and MemCopyHostPtr values cannot be specified in flags but are inherited from the corresponding memory access qualifiers associated with buffer.  If MemCopyHostPtr is specified in the memory access qualifier values associated with buffer it does not imply any additional copies when the sub-buffer is created from buffer. If the MemHostWriteOnly, MemHostReadOnly or MemHostNoAccess values are not specified in flags, they are inherited from the corresponding memory access qualifiers associated with buffer.
        /// </param>
        /// <param name="image_format">[length: 1] 
        /// A pointer to a structure that describes format properties of the image to be allocated. See cl_image_format for a detailed description of the image format descriptor.
        /// </param>
        /// <param name="image_desc">[length: 1] 
        /// A pointer to a structure that describes type and dimensions of the image to be allocated.  See imageDescriptor for more information.
        /// </param>
        /// <param name="host_ptr">[length: 1] 
        /// A pointer to the image data that may already be allocated by the application. Refer to table below for a description of how large the buffer that host_ptr points to must be. Image TypeSize of buffer that host_ptr points toMemObjectImage1D≥ imageRowPitchMemObjectImage1DBuffer≥ imageRowPitchMemObjectImage2D≥ imageRowPitch * imageHeightMemObjectImage3D≥ imageSlicePitch * imageDepthMemObjectImage1DArray≥ imageSlicePitch * imageArraySizeMemObjectImage2DArray≥ imageSlicePitch * imageArraySize For a 3D image or 2D image array, the image data specified by host_ptr is stored as a linear sequence of adjacent 2D image slices or 2D images respectively. Each 2D image is a linear sequence of  adjacent scanlines. Each scanline is a linear sequence of image elements.  For a 2D image, the image data specified by host_ptr is stored as a linear sequence of adjacent scanlines. Each scanline is a linear sequence of image elements.  For a 1D image array, the image data specified by host_ptr is stored as a linear sequence of adjacent 1D images respectively. Each 1D image or 1D image buffer is a single scanline which is a linear sequence of adjacent elements.
        /// </param>
        /// <param name="errcode_ret">[length: 1] 
        /// Will return an appropriate error code. If errcode_ret is NULL, no error code is returned.
        /// </param>
        [AutoGenerated(Category = "", Version = "1.2", EntryPoint = "clCreateImage")]
        [CLSCompliant(false)]
        public static ComputeMemory CreateImage<T4>(ComputeContext context, ref OpenTK.Compute.CL12.MemFlags flags, ref ImageFormat image_format, ref ImageDescriptor image_desc, [InAttribute, OutAttribute] T4[] host_ptr, [OutAttribute] out OpenTK.Compute.CL12.ErrorCode errcode_ret)
            where T4 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.2]
        /// Creates a 1D image, 1D image buffer, 1D image array, 2D image, 2D image array or 3D image object.
        /// </summary>
        /// <param name="context"> 
        /// A valid OpenCL context on which the image object is to be created.
        /// </param>
        /// <param name="flags"> 
        /// A bit-field that is used to specify allocation and usage information about the image memory object being created and is described in the table below.  For all image types except MemObjectImage1DBuffer, if value specified for flags is 0, the default is used which is MemReadWrite.  For MemObjectImage1DBuffer image type, if the MemReadWrite, MemReadOnly or MemWriteOnly values are not specified in flags, they are inherited from the corresponding memory access qualifers associated with buffer. The MemUseHostPtr, MemAllocHostPtr and MemCopyHostPtr values cannot be specified in flags but are inherited from the corresponding memory access qualifiers associated with buffer.  If MemCopyHostPtr is specified in the memory access qualifier values associated with buffer it does not imply any additional copies when the sub-buffer is created from buffer. If the MemHostWriteOnly, MemHostReadOnly or MemHostNoAccess values are not specified in flags, they are inherited from the corresponding memory access qualifiers associated with buffer.
        /// </param>
        /// <param name="image_format">[length: 1] 
        /// A pointer to a structure that describes format properties of the image to be allocated. See cl_image_format for a detailed description of the image format descriptor.
        /// </param>
        /// <param name="image_desc">[length: 1] 
        /// A pointer to a structure that describes type and dimensions of the image to be allocated.  See imageDescriptor for more information.
        /// </param>
        /// <param name="host_ptr">[length: 1] 
        /// A pointer to the image data that may already be allocated by the application. Refer to table below for a description of how large the buffer that host_ptr points to must be. Image TypeSize of buffer that host_ptr points toMemObjectImage1D≥ imageRowPitchMemObjectImage1DBuffer≥ imageRowPitchMemObjectImage2D≥ imageRowPitch * imageHeightMemObjectImage3D≥ imageSlicePitch * imageDepthMemObjectImage1DArray≥ imageSlicePitch * imageArraySizeMemObjectImage2DArray≥ imageSlicePitch * imageArraySize For a 3D image or 2D image array, the image data specified by host_ptr is stored as a linear sequence of adjacent 2D image slices or 2D images respectively. Each 2D image is a linear sequence of  adjacent scanlines. Each scanline is a linear sequence of image elements.  For a 2D image, the image data specified by host_ptr is stored as a linear sequence of adjacent scanlines. Each scanline is a linear sequence of image elements.  For a 1D image array, the image data specified by host_ptr is stored as a linear sequence of adjacent 1D images respectively. Each 1D image or 1D image buffer is a single scanline which is a linear sequence of adjacent elements.
        /// </param>
        /// <param name="errcode_ret">[length: 1] 
        /// Will return an appropriate error code. If errcode_ret is NULL, no error code is returned.
        /// </param>
        [AutoGenerated(Category = "", Version = "1.2", EntryPoint = "clCreateImage")]
        [CLSCompliant(false)]
        public static ComputeMemory CreateImage<T4>(ComputeContext context, ref OpenTK.Compute.CL12.MemFlags flags, ref ImageFormat image_format, ref ImageDescriptor image_desc, [InAttribute, OutAttribute] T4[,] host_ptr, [OutAttribute] out OpenTK.Compute.CL12.ErrorCode errcode_ret)
            where T4 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.2]
        /// Creates a 1D image, 1D image buffer, 1D image array, 2D image, 2D image array or 3D image object.
        /// </summary>
        /// <param name="context"> 
        /// A valid OpenCL context on which the image object is to be created.
        /// </param>
        /// <param name="flags"> 
        /// A bit-field that is used to specify allocation and usage information about the image memory object being created and is described in the table below.  For all image types except MemObjectImage1DBuffer, if value specified for flags is 0, the default is used which is MemReadWrite.  For MemObjectImage1DBuffer image type, if the MemReadWrite, MemReadOnly or MemWriteOnly values are not specified in flags, they are inherited from the corresponding memory access qualifers associated with buffer. The MemUseHostPtr, MemAllocHostPtr and MemCopyHostPtr values cannot be specified in flags but are inherited from the corresponding memory access qualifiers associated with buffer.  If MemCopyHostPtr is specified in the memory access qualifier values associated with buffer it does not imply any additional copies when the sub-buffer is created from buffer. If the MemHostWriteOnly, MemHostReadOnly or MemHostNoAccess values are not specified in flags, they are inherited from the corresponding memory access qualifiers associated with buffer.
        /// </param>
        /// <param name="image_format">[length: 1] 
        /// A pointer to a structure that describes format properties of the image to be allocated. See cl_image_format for a detailed description of the image format descriptor.
        /// </param>
        /// <param name="image_desc">[length: 1] 
        /// A pointer to a structure that describes type and dimensions of the image to be allocated.  See imageDescriptor for more information.
        /// </param>
        /// <param name="host_ptr">[length: 1] 
        /// A pointer to the image data that may already be allocated by the application. Refer to table below for a description of how large the buffer that host_ptr points to must be. Image TypeSize of buffer that host_ptr points toMemObjectImage1D≥ imageRowPitchMemObjectImage1DBuffer≥ imageRowPitchMemObjectImage2D≥ imageRowPitch * imageHeightMemObjectImage3D≥ imageSlicePitch * imageDepthMemObjectImage1DArray≥ imageSlicePitch * imageArraySizeMemObjectImage2DArray≥ imageSlicePitch * imageArraySize For a 3D image or 2D image array, the image data specified by host_ptr is stored as a linear sequence of adjacent 2D image slices or 2D images respectively. Each 2D image is a linear sequence of  adjacent scanlines. Each scanline is a linear sequence of image elements.  For a 2D image, the image data specified by host_ptr is stored as a linear sequence of adjacent scanlines. Each scanline is a linear sequence of image elements.  For a 1D image array, the image data specified by host_ptr is stored as a linear sequence of adjacent 1D images respectively. Each 1D image or 1D image buffer is a single scanline which is a linear sequence of adjacent elements.
        /// </param>
        /// <param name="errcode_ret">[length: 1] 
        /// Will return an appropriate error code. If errcode_ret is NULL, no error code is returned.
        /// </param>
        [AutoGenerated(Category = "", Version = "1.2", EntryPoint = "clCreateImage")]
        [CLSCompliant(false)]
        public static ComputeMemory CreateImage<T4>(ComputeContext context, ref OpenTK.Compute.CL12.MemFlags flags, ref ImageFormat image_format, ref ImageDescriptor image_desc, [InAttribute, OutAttribute] T4[,,] host_ptr, [OutAttribute] out OpenTK.Compute.CL12.ErrorCode errcode_ret)
            where T4 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.2]
        /// Creates a 1D image, 1D image buffer, 1D image array, 2D image, 2D image array or 3D image object.
        /// </summary>
        /// <param name="context"> 
        /// A valid OpenCL context on which the image object is to be created.
        /// </param>
        /// <param name="flags"> 
        /// A bit-field that is used to specify allocation and usage information about the image memory object being created and is described in the table below.  For all image types except MemObjectImage1DBuffer, if value specified for flags is 0, the default is used which is MemReadWrite.  For MemObjectImage1DBuffer image type, if the MemReadWrite, MemReadOnly or MemWriteOnly values are not specified in flags, they are inherited from the corresponding memory access qualifers associated with buffer. The MemUseHostPtr, MemAllocHostPtr and MemCopyHostPtr values cannot be specified in flags but are inherited from the corresponding memory access qualifiers associated with buffer.  If MemCopyHostPtr is specified in the memory access qualifier values associated with buffer it does not imply any additional copies when the sub-buffer is created from buffer. If the MemHostWriteOnly, MemHostReadOnly or MemHostNoAccess values are not specified in flags, they are inherited from the corresponding memory access qualifiers associated with buffer.
        /// </param>
        /// <param name="image_format">[length: 1] 
        /// A pointer to a structure that describes format properties of the image to be allocated. See cl_image_format for a detailed description of the image format descriptor.
        /// </param>
        /// <param name="image_desc">[length: 1] 
        /// A pointer to a structure that describes type and dimensions of the image to be allocated.  See imageDescriptor for more information.
        /// </param>
        /// <param name="host_ptr">[length: 1] 
        /// A pointer to the image data that may already be allocated by the application. Refer to table below for a description of how large the buffer that host_ptr points to must be. Image TypeSize of buffer that host_ptr points toMemObjectImage1D≥ imageRowPitchMemObjectImage1DBuffer≥ imageRowPitchMemObjectImage2D≥ imageRowPitch * imageHeightMemObjectImage3D≥ imageSlicePitch * imageDepthMemObjectImage1DArray≥ imageSlicePitch * imageArraySizeMemObjectImage2DArray≥ imageSlicePitch * imageArraySize For a 3D image or 2D image array, the image data specified by host_ptr is stored as a linear sequence of adjacent 2D image slices or 2D images respectively. Each 2D image is a linear sequence of  adjacent scanlines. Each scanline is a linear sequence of image elements.  For a 2D image, the image data specified by host_ptr is stored as a linear sequence of adjacent scanlines. Each scanline is a linear sequence of image elements.  For a 1D image array, the image data specified by host_ptr is stored as a linear sequence of adjacent 1D images respectively. Each 1D image or 1D image buffer is a single scanline which is a linear sequence of adjacent elements.
        /// </param>
        /// <param name="errcode_ret">[length: 1] 
        /// Will return an appropriate error code. If errcode_ret is NULL, no error code is returned.
        /// </param>
        [AutoGenerated(Category = "", Version = "1.2", EntryPoint = "clCreateImage")]
        [CLSCompliant(false)]
        public static ComputeMemory CreateImage<T4>(ComputeContext context, ref OpenTK.Compute.CL12.MemFlags flags, ref ImageFormat image_format, ref ImageDescriptor image_desc, [InAttribute, OutAttribute] ref T4 host_ptr, [OutAttribute] out OpenTK.Compute.CL12.ErrorCode errcode_ret)
            where T4 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.2]
        /// Creates a 1D image, 1D image buffer, 1D image array, 2D image, 2D image array or 3D image object.
        /// </summary>
        /// <param name="context"> 
        /// A valid OpenCL context on which the image object is to be created.
        /// </param>
        /// <param name="flags"> 
        /// A bit-field that is used to specify allocation and usage information about the image memory object being created and is described in the table below.  For all image types except MemObjectImage1DBuffer, if value specified for flags is 0, the default is used which is MemReadWrite.  For MemObjectImage1DBuffer image type, if the MemReadWrite, MemReadOnly or MemWriteOnly values are not specified in flags, they are inherited from the corresponding memory access qualifers associated with buffer. The MemUseHostPtr, MemAllocHostPtr and MemCopyHostPtr values cannot be specified in flags but are inherited from the corresponding memory access qualifiers associated with buffer.  If MemCopyHostPtr is specified in the memory access qualifier values associated with buffer it does not imply any additional copies when the sub-buffer is created from buffer. If the MemHostWriteOnly, MemHostReadOnly or MemHostNoAccess values are not specified in flags, they are inherited from the corresponding memory access qualifiers associated with buffer.
        /// </param>
        /// <param name="image_format">[length: 1] 
        /// A pointer to a structure that describes format properties of the image to be allocated. See cl_image_format for a detailed description of the image format descriptor.
        /// </param>
        /// <param name="image_desc">[length: 1] 
        /// A pointer to a structure that describes type and dimensions of the image to be allocated.  See imageDescriptor for more information.
        /// </param>
        /// <param name="host_ptr">[length: 1] 
        /// A pointer to the image data that may already be allocated by the application. Refer to table below for a description of how large the buffer that host_ptr points to must be. Image TypeSize of buffer that host_ptr points toMemObjectImage1D≥ imageRowPitchMemObjectImage1DBuffer≥ imageRowPitchMemObjectImage2D≥ imageRowPitch * imageHeightMemObjectImage3D≥ imageSlicePitch * imageDepthMemObjectImage1DArray≥ imageSlicePitch * imageArraySizeMemObjectImage2DArray≥ imageSlicePitch * imageArraySize For a 3D image or 2D image array, the image data specified by host_ptr is stored as a linear sequence of adjacent 2D image slices or 2D images respectively. Each 2D image is a linear sequence of  adjacent scanlines. Each scanline is a linear sequence of image elements.  For a 2D image, the image data specified by host_ptr is stored as a linear sequence of adjacent scanlines. Each scanline is a linear sequence of image elements.  For a 1D image array, the image data specified by host_ptr is stored as a linear sequence of adjacent 1D images respectively. Each 1D image or 1D image buffer is a single scanline which is a linear sequence of adjacent elements.
        /// </param>
        /// <param name="errcode_ret">[length: 1] 
        /// Will return an appropriate error code. If errcode_ret is NULL, no error code is returned.
        /// </param>
        [AutoGenerated(Category = "", Version = "1.2", EntryPoint = "clCreateImage")]
        [CLSCompliant(false)]
        public static unsafe ComputeMemory CreateImage(ComputeContext context, OpenTK.Compute.CL12.MemFlags* flags, ImageFormat* image_format, ImageDescriptor* image_desc, IntPtr host_ptr, [OutAttribute] OpenTK.Compute.CL12.ErrorCode* errcode_ret) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.2]
        /// Creates a 1D image, 1D image buffer, 1D image array, 2D image, 2D image array or 3D image object.
        /// </summary>
        /// <param name="context"> 
        /// A valid OpenCL context on which the image object is to be created.
        /// </param>
        /// <param name="flags"> 
        /// A bit-field that is used to specify allocation and usage information about the image memory object being created and is described in the table below.  For all image types except MemObjectImage1DBuffer, if value specified for flags is 0, the default is used which is MemReadWrite.  For MemObjectImage1DBuffer image type, if the MemReadWrite, MemReadOnly or MemWriteOnly values are not specified in flags, they are inherited from the corresponding memory access qualifers associated with buffer. The MemUseHostPtr, MemAllocHostPtr and MemCopyHostPtr values cannot be specified in flags but are inherited from the corresponding memory access qualifiers associated with buffer.  If MemCopyHostPtr is specified in the memory access qualifier values associated with buffer it does not imply any additional copies when the sub-buffer is created from buffer. If the MemHostWriteOnly, MemHostReadOnly or MemHostNoAccess values are not specified in flags, they are inherited from the corresponding memory access qualifiers associated with buffer.
        /// </param>
        /// <param name="image_format">[length: 1] 
        /// A pointer to a structure that describes format properties of the image to be allocated. See cl_image_format for a detailed description of the image format descriptor.
        /// </param>
        /// <param name="image_desc">[length: 1] 
        /// A pointer to a structure that describes type and dimensions of the image to be allocated.  See imageDescriptor for more information.
        /// </param>
        /// <param name="host_ptr">[length: 1] 
        /// A pointer to the image data that may already be allocated by the application. Refer to table below for a description of how large the buffer that host_ptr points to must be. Image TypeSize of buffer that host_ptr points toMemObjectImage1D≥ imageRowPitchMemObjectImage1DBuffer≥ imageRowPitchMemObjectImage2D≥ imageRowPitch * imageHeightMemObjectImage3D≥ imageSlicePitch * imageDepthMemObjectImage1DArray≥ imageSlicePitch * imageArraySizeMemObjectImage2DArray≥ imageSlicePitch * imageArraySize For a 3D image or 2D image array, the image data specified by host_ptr is stored as a linear sequence of adjacent 2D image slices or 2D images respectively. Each 2D image is a linear sequence of  adjacent scanlines. Each scanline is a linear sequence of image elements.  For a 2D image, the image data specified by host_ptr is stored as a linear sequence of adjacent scanlines. Each scanline is a linear sequence of image elements.  For a 1D image array, the image data specified by host_ptr is stored as a linear sequence of adjacent 1D images respectively. Each 1D image or 1D image buffer is a single scanline which is a linear sequence of adjacent elements.
        /// </param>
        /// <param name="errcode_ret">[length: 1] 
        /// Will return an appropriate error code. If errcode_ret is NULL, no error code is returned.
        /// </param>
        [AutoGenerated(Category = "", Version = "1.2", EntryPoint = "clCreateImage")]
        [CLSCompliant(false)]
        public static unsafe ComputeMemory CreateImage<T4>(ComputeContext context, OpenTK.Compute.CL12.MemFlags* flags, ImageFormat* image_format, ImageDescriptor* image_desc, [InAttribute, OutAttribute] T4[] host_ptr, [OutAttribute] OpenTK.Compute.CL12.ErrorCode* errcode_ret)
            where T4 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.2]
        /// Creates a 1D image, 1D image buffer, 1D image array, 2D image, 2D image array or 3D image object.
        /// </summary>
        /// <param name="context"> 
        /// A valid OpenCL context on which the image object is to be created.
        /// </param>
        /// <param name="flags"> 
        /// A bit-field that is used to specify allocation and usage information about the image memory object being created and is described in the table below.  For all image types except MemObjectImage1DBuffer, if value specified for flags is 0, the default is used which is MemReadWrite.  For MemObjectImage1DBuffer image type, if the MemReadWrite, MemReadOnly or MemWriteOnly values are not specified in flags, they are inherited from the corresponding memory access qualifers associated with buffer. The MemUseHostPtr, MemAllocHostPtr and MemCopyHostPtr values cannot be specified in flags but are inherited from the corresponding memory access qualifiers associated with buffer.  If MemCopyHostPtr is specified in the memory access qualifier values associated with buffer it does not imply any additional copies when the sub-buffer is created from buffer. If the MemHostWriteOnly, MemHostReadOnly or MemHostNoAccess values are not specified in flags, they are inherited from the corresponding memory access qualifiers associated with buffer.
        /// </param>
        /// <param name="image_format">[length: 1] 
        /// A pointer to a structure that describes format properties of the image to be allocated. See cl_image_format for a detailed description of the image format descriptor.
        /// </param>
        /// <param name="image_desc">[length: 1] 
        /// A pointer to a structure that describes type and dimensions of the image to be allocated.  See imageDescriptor for more information.
        /// </param>
        /// <param name="host_ptr">[length: 1] 
        /// A pointer to the image data that may already be allocated by the application. Refer to table below for a description of how large the buffer that host_ptr points to must be. Image TypeSize of buffer that host_ptr points toMemObjectImage1D≥ imageRowPitchMemObjectImage1DBuffer≥ imageRowPitchMemObjectImage2D≥ imageRowPitch * imageHeightMemObjectImage3D≥ imageSlicePitch * imageDepthMemObjectImage1DArray≥ imageSlicePitch * imageArraySizeMemObjectImage2DArray≥ imageSlicePitch * imageArraySize For a 3D image or 2D image array, the image data specified by host_ptr is stored as a linear sequence of adjacent 2D image slices or 2D images respectively. Each 2D image is a linear sequence of  adjacent scanlines. Each scanline is a linear sequence of image elements.  For a 2D image, the image data specified by host_ptr is stored as a linear sequence of adjacent scanlines. Each scanline is a linear sequence of image elements.  For a 1D image array, the image data specified by host_ptr is stored as a linear sequence of adjacent 1D images respectively. Each 1D image or 1D image buffer is a single scanline which is a linear sequence of adjacent elements.
        /// </param>
        /// <param name="errcode_ret">[length: 1] 
        /// Will return an appropriate error code. If errcode_ret is NULL, no error code is returned.
        /// </param>
        [AutoGenerated(Category = "", Version = "1.2", EntryPoint = "clCreateImage")]
        [CLSCompliant(false)]
        public static unsafe ComputeMemory CreateImage<T4>(ComputeContext context, OpenTK.Compute.CL12.MemFlags* flags, ImageFormat* image_format, ImageDescriptor* image_desc, [InAttribute, OutAttribute] T4[,] host_ptr, [OutAttribute] OpenTK.Compute.CL12.ErrorCode* errcode_ret)
            where T4 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.2]
        /// Creates a 1D image, 1D image buffer, 1D image array, 2D image, 2D image array or 3D image object.
        /// </summary>
        /// <param name="context"> 
        /// A valid OpenCL context on which the image object is to be created.
        /// </param>
        /// <param name="flags"> 
        /// A bit-field that is used to specify allocation and usage information about the image memory object being created and is described in the table below.  For all image types except MemObjectImage1DBuffer, if value specified for flags is 0, the default is used which is MemReadWrite.  For MemObjectImage1DBuffer image type, if the MemReadWrite, MemReadOnly or MemWriteOnly values are not specified in flags, they are inherited from the corresponding memory access qualifers associated with buffer. The MemUseHostPtr, MemAllocHostPtr and MemCopyHostPtr values cannot be specified in flags but are inherited from the corresponding memory access qualifiers associated with buffer.  If MemCopyHostPtr is specified in the memory access qualifier values associated with buffer it does not imply any additional copies when the sub-buffer is created from buffer. If the MemHostWriteOnly, MemHostReadOnly or MemHostNoAccess values are not specified in flags, they are inherited from the corresponding memory access qualifiers associated with buffer.
        /// </param>
        /// <param name="image_format">[length: 1] 
        /// A pointer to a structure that describes format properties of the image to be allocated. See cl_image_format for a detailed description of the image format descriptor.
        /// </param>
        /// <param name="image_desc">[length: 1] 
        /// A pointer to a structure that describes type and dimensions of the image to be allocated.  See imageDescriptor for more information.
        /// </param>
        /// <param name="host_ptr">[length: 1] 
        /// A pointer to the image data that may already be allocated by the application. Refer to table below for a description of how large the buffer that host_ptr points to must be. Image TypeSize of buffer that host_ptr points toMemObjectImage1D≥ imageRowPitchMemObjectImage1DBuffer≥ imageRowPitchMemObjectImage2D≥ imageRowPitch * imageHeightMemObjectImage3D≥ imageSlicePitch * imageDepthMemObjectImage1DArray≥ imageSlicePitch * imageArraySizeMemObjectImage2DArray≥ imageSlicePitch * imageArraySize For a 3D image or 2D image array, the image data specified by host_ptr is stored as a linear sequence of adjacent 2D image slices or 2D images respectively. Each 2D image is a linear sequence of  adjacent scanlines. Each scanline is a linear sequence of image elements.  For a 2D image, the image data specified by host_ptr is stored as a linear sequence of adjacent scanlines. Each scanline is a linear sequence of image elements.  For a 1D image array, the image data specified by host_ptr is stored as a linear sequence of adjacent 1D images respectively. Each 1D image or 1D image buffer is a single scanline which is a linear sequence of adjacent elements.
        /// </param>
        /// <param name="errcode_ret">[length: 1] 
        /// Will return an appropriate error code. If errcode_ret is NULL, no error code is returned.
        /// </param>
        [AutoGenerated(Category = "", Version = "1.2", EntryPoint = "clCreateImage")]
        [CLSCompliant(false)]
        public static unsafe ComputeMemory CreateImage<T4>(ComputeContext context, OpenTK.Compute.CL12.MemFlags* flags, ImageFormat* image_format, ImageDescriptor* image_desc, [InAttribute, OutAttribute] T4[,,] host_ptr, [OutAttribute] OpenTK.Compute.CL12.ErrorCode* errcode_ret)
            where T4 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.2]
        /// Creates a 1D image, 1D image buffer, 1D image array, 2D image, 2D image array or 3D image object.
        /// </summary>
        /// <param name="context"> 
        /// A valid OpenCL context on which the image object is to be created.
        /// </param>
        /// <param name="flags"> 
        /// A bit-field that is used to specify allocation and usage information about the image memory object being created and is described in the table below.  For all image types except MemObjectImage1DBuffer, if value specified for flags is 0, the default is used which is MemReadWrite.  For MemObjectImage1DBuffer image type, if the MemReadWrite, MemReadOnly or MemWriteOnly values are not specified in flags, they are inherited from the corresponding memory access qualifers associated with buffer. The MemUseHostPtr, MemAllocHostPtr and MemCopyHostPtr values cannot be specified in flags but are inherited from the corresponding memory access qualifiers associated with buffer.  If MemCopyHostPtr is specified in the memory access qualifier values associated with buffer it does not imply any additional copies when the sub-buffer is created from buffer. If the MemHostWriteOnly, MemHostReadOnly or MemHostNoAccess values are not specified in flags, they are inherited from the corresponding memory access qualifiers associated with buffer.
        /// </param>
        /// <param name="image_format">[length: 1] 
        /// A pointer to a structure that describes format properties of the image to be allocated. See cl_image_format for a detailed description of the image format descriptor.
        /// </param>
        /// <param name="image_desc">[length: 1] 
        /// A pointer to a structure that describes type and dimensions of the image to be allocated.  See imageDescriptor for more information.
        /// </param>
        /// <param name="host_ptr">[length: 1] 
        /// A pointer to the image data that may already be allocated by the application. Refer to table below for a description of how large the buffer that host_ptr points to must be. Image TypeSize of buffer that host_ptr points toMemObjectImage1D≥ imageRowPitchMemObjectImage1DBuffer≥ imageRowPitchMemObjectImage2D≥ imageRowPitch * imageHeightMemObjectImage3D≥ imageSlicePitch * imageDepthMemObjectImage1DArray≥ imageSlicePitch * imageArraySizeMemObjectImage2DArray≥ imageSlicePitch * imageArraySize For a 3D image or 2D image array, the image data specified by host_ptr is stored as a linear sequence of adjacent 2D image slices or 2D images respectively. Each 2D image is a linear sequence of  adjacent scanlines. Each scanline is a linear sequence of image elements.  For a 2D image, the image data specified by host_ptr is stored as a linear sequence of adjacent scanlines. Each scanline is a linear sequence of image elements.  For a 1D image array, the image data specified by host_ptr is stored as a linear sequence of adjacent 1D images respectively. Each 1D image or 1D image buffer is a single scanline which is a linear sequence of adjacent elements.
        /// </param>
        /// <param name="errcode_ret">[length: 1] 
        /// Will return an appropriate error code. If errcode_ret is NULL, no error code is returned.
        /// </param>
        [AutoGenerated(Category = "", Version = "1.2", EntryPoint = "clCreateImage")]
        [CLSCompliant(false)]
        public static unsafe ComputeMemory CreateImage<T4>(ComputeContext context, OpenTK.Compute.CL12.MemFlags* flags, ImageFormat* image_format, ImageDescriptor* image_desc, [InAttribute, OutAttribute] ref T4 host_ptr, [OutAttribute] OpenTK.Compute.CL12.ErrorCode* errcode_ret)
            where T4 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]</summary>
        /// <param name="context"></param>
        /// <param name="flags"></param>
        /// <param name="image_format"></param>
        /// <param name="image_width"></param>
        /// <param name="image_height"></param>
        /// <param name="image_row_pitch"></param>
        /// <param name="host_ptr"></param>
        /// <param name="errcode_ret"></param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clCreateImage2D")]
        [CLSCompliant(false)]
        public static ComputeMemory CreateImage2D(ComputeContext context, OpenTK.Compute.CL12.MemFlags flags, ImageFormat[] image_format, IntPtr image_width, IntPtr image_height, IntPtr image_row_pitch, IntPtr host_ptr, [OutAttribute] Int32[] errcode_ret) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]</summary>
        /// <param name="context"></param>
        /// <param name="flags"></param>
        /// <param name="image_format"></param>
        /// <param name="image_width"></param>
        /// <param name="image_height"></param>
        /// <param name="image_row_pitch"></param>
        /// <param name="host_ptr"></param>
        /// <param name="errcode_ret"></param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clCreateImage2D")]
        [CLSCompliant(false)]
        public static ComputeMemory CreateImage2D<T6>(ComputeContext context, OpenTK.Compute.CL12.MemFlags flags, ImageFormat[] image_format, IntPtr image_width, IntPtr image_height, IntPtr image_row_pitch, [InAttribute, OutAttribute] T6[] host_ptr, [OutAttribute] Int32[] errcode_ret)
            where T6 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]</summary>
        /// <param name="context"></param>
        /// <param name="flags"></param>
        /// <param name="image_format"></param>
        /// <param name="image_width"></param>
        /// <param name="image_height"></param>
        /// <param name="image_row_pitch"></param>
        /// <param name="host_ptr"></param>
        /// <param name="errcode_ret"></param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clCreateImage2D")]
        [CLSCompliant(false)]
        public static ComputeMemory CreateImage2D<T6>(ComputeContext context, OpenTK.Compute.CL12.MemFlags flags, ImageFormat[] image_format, IntPtr image_width, IntPtr image_height, IntPtr image_row_pitch, [InAttribute, OutAttribute] T6[,] host_ptr, [OutAttribute] Int32[] errcode_ret)
            where T6 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]</summary>
        /// <param name="context"></param>
        /// <param name="flags"></param>
        /// <param name="image_format"></param>
        /// <param name="image_width"></param>
        /// <param name="image_height"></param>
        /// <param name="image_row_pitch"></param>
        /// <param name="host_ptr"></param>
        /// <param name="errcode_ret"></param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clCreateImage2D")]
        [CLSCompliant(false)]
        public static ComputeMemory CreateImage2D<T6>(ComputeContext context, OpenTK.Compute.CL12.MemFlags flags, ImageFormat[] image_format, IntPtr image_width, IntPtr image_height, IntPtr image_row_pitch, [InAttribute, OutAttribute] T6[,,] host_ptr, [OutAttribute] Int32[] errcode_ret)
            where T6 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]</summary>
        /// <param name="context"></param>
        /// <param name="flags"></param>
        /// <param name="image_format"></param>
        /// <param name="image_width"></param>
        /// <param name="image_height"></param>
        /// <param name="image_row_pitch"></param>
        /// <param name="host_ptr"></param>
        /// <param name="errcode_ret"></param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clCreateImage2D")]
        [CLSCompliant(false)]
        public static ComputeMemory CreateImage2D<T6>(ComputeContext context, OpenTK.Compute.CL12.MemFlags flags, ImageFormat[] image_format, IntPtr image_width, IntPtr image_height, IntPtr image_row_pitch, [InAttribute, OutAttribute] ref T6 host_ptr, [OutAttribute] Int32[] errcode_ret)
            where T6 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]</summary>
        /// <param name="context"></param>
        /// <param name="flags"></param>
        /// <param name="image_format"></param>
        /// <param name="image_width"></param>
        /// <param name="image_height"></param>
        /// <param name="image_row_pitch"></param>
        /// <param name="host_ptr"></param>
        /// <param name="errcode_ret"></param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clCreateImage2D")]
        [CLSCompliant(false)]
        public static ComputeMemory CreateImage2D(ComputeContext context, OpenTK.Compute.CL12.MemFlags flags, ref ImageFormat image_format, IntPtr image_width, IntPtr image_height, IntPtr image_row_pitch, IntPtr host_ptr, [OutAttribute] out Int32 errcode_ret) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]</summary>
        /// <param name="context"></param>
        /// <param name="flags"></param>
        /// <param name="image_format"></param>
        /// <param name="image_width"></param>
        /// <param name="image_height"></param>
        /// <param name="image_row_pitch"></param>
        /// <param name="host_ptr"></param>
        /// <param name="errcode_ret"></param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clCreateImage2D")]
        [CLSCompliant(false)]
        public static ComputeMemory CreateImage2D<T6>(ComputeContext context, OpenTK.Compute.CL12.MemFlags flags, ref ImageFormat image_format, IntPtr image_width, IntPtr image_height, IntPtr image_row_pitch, [InAttribute, OutAttribute] T6[] host_ptr, [OutAttribute] out Int32 errcode_ret)
            where T6 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]</summary>
        /// <param name="context"></param>
        /// <param name="flags"></param>
        /// <param name="image_format"></param>
        /// <param name="image_width"></param>
        /// <param name="image_height"></param>
        /// <param name="image_row_pitch"></param>
        /// <param name="host_ptr"></param>
        /// <param name="errcode_ret"></param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clCreateImage2D")]
        [CLSCompliant(false)]
        public static ComputeMemory CreateImage2D<T6>(ComputeContext context, OpenTK.Compute.CL12.MemFlags flags, ref ImageFormat image_format, IntPtr image_width, IntPtr image_height, IntPtr image_row_pitch, [InAttribute, OutAttribute] T6[,] host_ptr, [OutAttribute] out Int32 errcode_ret)
            where T6 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]</summary>
        /// <param name="context"></param>
        /// <param name="flags"></param>
        /// <param name="image_format"></param>
        /// <param name="image_width"></param>
        /// <param name="image_height"></param>
        /// <param name="image_row_pitch"></param>
        /// <param name="host_ptr"></param>
        /// <param name="errcode_ret"></param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clCreateImage2D")]
        [CLSCompliant(false)]
        public static ComputeMemory CreateImage2D<T6>(ComputeContext context, OpenTK.Compute.CL12.MemFlags flags, ref ImageFormat image_format, IntPtr image_width, IntPtr image_height, IntPtr image_row_pitch, [InAttribute, OutAttribute] T6[,,] host_ptr, [OutAttribute] out Int32 errcode_ret)
            where T6 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]</summary>
        /// <param name="context"></param>
        /// <param name="flags"></param>
        /// <param name="image_format"></param>
        /// <param name="image_width"></param>
        /// <param name="image_height"></param>
        /// <param name="image_row_pitch"></param>
        /// <param name="host_ptr"></param>
        /// <param name="errcode_ret"></param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clCreateImage2D")]
        [CLSCompliant(false)]
        public static ComputeMemory CreateImage2D<T6>(ComputeContext context, OpenTK.Compute.CL12.MemFlags flags, ref ImageFormat image_format, IntPtr image_width, IntPtr image_height, IntPtr image_row_pitch, [InAttribute, OutAttribute] ref T6 host_ptr, [OutAttribute] out Int32 errcode_ret)
            where T6 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]</summary>
        /// <param name="context"></param>
        /// <param name="flags"></param>
        /// <param name="image_format"></param>
        /// <param name="image_width"></param>
        /// <param name="image_height"></param>
        /// <param name="image_row_pitch"></param>
        /// <param name="host_ptr"></param>
        /// <param name="errcode_ret"></param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clCreateImage2D")]
        [CLSCompliant(false)]
        public static unsafe ComputeMemory CreateImage2D(ComputeContext context, OpenTK.Compute.CL12.MemFlags flags, ImageFormat* image_format, IntPtr image_width, IntPtr image_height, IntPtr image_row_pitch, IntPtr host_ptr, [OutAttribute] Int32* errcode_ret) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]</summary>
        /// <param name="context"></param>
        /// <param name="flags"></param>
        /// <param name="image_format"></param>
        /// <param name="image_width"></param>
        /// <param name="image_height"></param>
        /// <param name="image_row_pitch"></param>
        /// <param name="host_ptr"></param>
        /// <param name="errcode_ret"></param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clCreateImage2D")]
        [CLSCompliant(false)]
        public static unsafe ComputeMemory CreateImage2D<T6>(ComputeContext context, OpenTK.Compute.CL12.MemFlags flags, ImageFormat* image_format, IntPtr image_width, IntPtr image_height, IntPtr image_row_pitch, [InAttribute, OutAttribute] T6[] host_ptr, [OutAttribute] Int32* errcode_ret)
            where T6 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]</summary>
        /// <param name="context"></param>
        /// <param name="flags"></param>
        /// <param name="image_format"></param>
        /// <param name="image_width"></param>
        /// <param name="image_height"></param>
        /// <param name="image_row_pitch"></param>
        /// <param name="host_ptr"></param>
        /// <param name="errcode_ret"></param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clCreateImage2D")]
        [CLSCompliant(false)]
        public static unsafe ComputeMemory CreateImage2D<T6>(ComputeContext context, OpenTK.Compute.CL12.MemFlags flags, ImageFormat* image_format, IntPtr image_width, IntPtr image_height, IntPtr image_row_pitch, [InAttribute, OutAttribute] T6[,] host_ptr, [OutAttribute] Int32* errcode_ret)
            where T6 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]</summary>
        /// <param name="context"></param>
        /// <param name="flags"></param>
        /// <param name="image_format"></param>
        /// <param name="image_width"></param>
        /// <param name="image_height"></param>
        /// <param name="image_row_pitch"></param>
        /// <param name="host_ptr"></param>
        /// <param name="errcode_ret"></param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clCreateImage2D")]
        [CLSCompliant(false)]
        public static unsafe ComputeMemory CreateImage2D<T6>(ComputeContext context, OpenTK.Compute.CL12.MemFlags flags, ImageFormat* image_format, IntPtr image_width, IntPtr image_height, IntPtr image_row_pitch, [InAttribute, OutAttribute] T6[,,] host_ptr, [OutAttribute] Int32* errcode_ret)
            where T6 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]</summary>
        /// <param name="context"></param>
        /// <param name="flags"></param>
        /// <param name="image_format"></param>
        /// <param name="image_width"></param>
        /// <param name="image_height"></param>
        /// <param name="image_row_pitch"></param>
        /// <param name="host_ptr"></param>
        /// <param name="errcode_ret"></param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clCreateImage2D")]
        [CLSCompliant(false)]
        public static unsafe ComputeMemory CreateImage2D<T6>(ComputeContext context, OpenTK.Compute.CL12.MemFlags flags, ImageFormat* image_format, IntPtr image_width, IntPtr image_height, IntPtr image_row_pitch, [InAttribute, OutAttribute] ref T6 host_ptr, [OutAttribute] Int32* errcode_ret)
            where T6 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]</summary>
        /// <param name="context"></param>
        /// <param name="flags"></param>
        /// <param name="image_format"></param>
        /// <param name="image_width"></param>
        /// <param name="image_height"></param>
        /// <param name="image_depth"></param>
        /// <param name="image_row_pitch"></param>
        /// <param name="image_slice_pitch"></param>
        /// <param name="host_ptr"></param>
        /// <param name="errcode_ret"></param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clCreateImage3D")]
        [CLSCompliant(false)]
        public static ComputeMemory CreateImage3D(ComputeContext context, OpenTK.Compute.CL12.MemFlags flags, ImageFormat[] image_format, IntPtr image_width, IntPtr image_height, IntPtr image_depth, IntPtr image_row_pitch, IntPtr image_slice_pitch, IntPtr host_ptr, [OutAttribute] Int32[] errcode_ret) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]</summary>
        /// <param name="context"></param>
        /// <param name="flags"></param>
        /// <param name="image_format"></param>
        /// <param name="image_width"></param>
        /// <param name="image_height"></param>
        /// <param name="image_depth"></param>
        /// <param name="image_row_pitch"></param>
        /// <param name="image_slice_pitch"></param>
        /// <param name="host_ptr"></param>
        /// <param name="errcode_ret"></param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clCreateImage3D")]
        [CLSCompliant(false)]
        public static ComputeMemory CreateImage3D<T8>(ComputeContext context, OpenTK.Compute.CL12.MemFlags flags, ImageFormat[] image_format, IntPtr image_width, IntPtr image_height, IntPtr image_depth, IntPtr image_row_pitch, IntPtr image_slice_pitch, [InAttribute, OutAttribute] T8[] host_ptr, [OutAttribute] Int32[] errcode_ret)
            where T8 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]</summary>
        /// <param name="context"></param>
        /// <param name="flags"></param>
        /// <param name="image_format"></param>
        /// <param name="image_width"></param>
        /// <param name="image_height"></param>
        /// <param name="image_depth"></param>
        /// <param name="image_row_pitch"></param>
        /// <param name="image_slice_pitch"></param>
        /// <param name="host_ptr"></param>
        /// <param name="errcode_ret"></param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clCreateImage3D")]
        [CLSCompliant(false)]
        public static ComputeMemory CreateImage3D<T8>(ComputeContext context, OpenTK.Compute.CL12.MemFlags flags, ImageFormat[] image_format, IntPtr image_width, IntPtr image_height, IntPtr image_depth, IntPtr image_row_pitch, IntPtr image_slice_pitch, [InAttribute, OutAttribute] T8[,] host_ptr, [OutAttribute] Int32[] errcode_ret)
            where T8 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]</summary>
        /// <param name="context"></param>
        /// <param name="flags"></param>
        /// <param name="image_format"></param>
        /// <param name="image_width"></param>
        /// <param name="image_height"></param>
        /// <param name="image_depth"></param>
        /// <param name="image_row_pitch"></param>
        /// <param name="image_slice_pitch"></param>
        /// <param name="host_ptr"></param>
        /// <param name="errcode_ret"></param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clCreateImage3D")]
        [CLSCompliant(false)]
        public static ComputeMemory CreateImage3D<T8>(ComputeContext context, OpenTK.Compute.CL12.MemFlags flags, ImageFormat[] image_format, IntPtr image_width, IntPtr image_height, IntPtr image_depth, IntPtr image_row_pitch, IntPtr image_slice_pitch, [InAttribute, OutAttribute] T8[,,] host_ptr, [OutAttribute] Int32[] errcode_ret)
            where T8 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]</summary>
        /// <param name="context"></param>
        /// <param name="flags"></param>
        /// <param name="image_format"></param>
        /// <param name="image_width"></param>
        /// <param name="image_height"></param>
        /// <param name="image_depth"></param>
        /// <param name="image_row_pitch"></param>
        /// <param name="image_slice_pitch"></param>
        /// <param name="host_ptr"></param>
        /// <param name="errcode_ret"></param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clCreateImage3D")]
        [CLSCompliant(false)]
        public static ComputeMemory CreateImage3D<T8>(ComputeContext context, OpenTK.Compute.CL12.MemFlags flags, ImageFormat[] image_format, IntPtr image_width, IntPtr image_height, IntPtr image_depth, IntPtr image_row_pitch, IntPtr image_slice_pitch, [InAttribute, OutAttribute] ref T8 host_ptr, [OutAttribute] Int32[] errcode_ret)
            where T8 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]</summary>
        /// <param name="context"></param>
        /// <param name="flags"></param>
        /// <param name="image_format"></param>
        /// <param name="image_width"></param>
        /// <param name="image_height"></param>
        /// <param name="image_depth"></param>
        /// <param name="image_row_pitch"></param>
        /// <param name="image_slice_pitch"></param>
        /// <param name="host_ptr"></param>
        /// <param name="errcode_ret"></param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clCreateImage3D")]
        [CLSCompliant(false)]
        public static ComputeMemory CreateImage3D(ComputeContext context, OpenTK.Compute.CL12.MemFlags flags, ref ImageFormat image_format, IntPtr image_width, IntPtr image_height, IntPtr image_depth, IntPtr image_row_pitch, IntPtr image_slice_pitch, IntPtr host_ptr, [OutAttribute] out Int32 errcode_ret) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]</summary>
        /// <param name="context"></param>
        /// <param name="flags"></param>
        /// <param name="image_format"></param>
        /// <param name="image_width"></param>
        /// <param name="image_height"></param>
        /// <param name="image_depth"></param>
        /// <param name="image_row_pitch"></param>
        /// <param name="image_slice_pitch"></param>
        /// <param name="host_ptr"></param>
        /// <param name="errcode_ret"></param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clCreateImage3D")]
        [CLSCompliant(false)]
        public static ComputeMemory CreateImage3D<T8>(ComputeContext context, OpenTK.Compute.CL12.MemFlags flags, ref ImageFormat image_format, IntPtr image_width, IntPtr image_height, IntPtr image_depth, IntPtr image_row_pitch, IntPtr image_slice_pitch, [InAttribute, OutAttribute] T8[] host_ptr, [OutAttribute] out Int32 errcode_ret)
            where T8 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]</summary>
        /// <param name="context"></param>
        /// <param name="flags"></param>
        /// <param name="image_format"></param>
        /// <param name="image_width"></param>
        /// <param name="image_height"></param>
        /// <param name="image_depth"></param>
        /// <param name="image_row_pitch"></param>
        /// <param name="image_slice_pitch"></param>
        /// <param name="host_ptr"></param>
        /// <param name="errcode_ret"></param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clCreateImage3D")]
        [CLSCompliant(false)]
        public static ComputeMemory CreateImage3D<T8>(ComputeContext context, OpenTK.Compute.CL12.MemFlags flags, ref ImageFormat image_format, IntPtr image_width, IntPtr image_height, IntPtr image_depth, IntPtr image_row_pitch, IntPtr image_slice_pitch, [InAttribute, OutAttribute] T8[,] host_ptr, [OutAttribute] out Int32 errcode_ret)
            where T8 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]</summary>
        /// <param name="context"></param>
        /// <param name="flags"></param>
        /// <param name="image_format"></param>
        /// <param name="image_width"></param>
        /// <param name="image_height"></param>
        /// <param name="image_depth"></param>
        /// <param name="image_row_pitch"></param>
        /// <param name="image_slice_pitch"></param>
        /// <param name="host_ptr"></param>
        /// <param name="errcode_ret"></param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clCreateImage3D")]
        [CLSCompliant(false)]
        public static ComputeMemory CreateImage3D<T8>(ComputeContext context, OpenTK.Compute.CL12.MemFlags flags, ref ImageFormat image_format, IntPtr image_width, IntPtr image_height, IntPtr image_depth, IntPtr image_row_pitch, IntPtr image_slice_pitch, [InAttribute, OutAttribute] T8[,,] host_ptr, [OutAttribute] out Int32 errcode_ret)
            where T8 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]</summary>
        /// <param name="context"></param>
        /// <param name="flags"></param>
        /// <param name="image_format"></param>
        /// <param name="image_width"></param>
        /// <param name="image_height"></param>
        /// <param name="image_depth"></param>
        /// <param name="image_row_pitch"></param>
        /// <param name="image_slice_pitch"></param>
        /// <param name="host_ptr"></param>
        /// <param name="errcode_ret"></param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clCreateImage3D")]
        [CLSCompliant(false)]
        public static ComputeMemory CreateImage3D<T8>(ComputeContext context, OpenTK.Compute.CL12.MemFlags flags, ref ImageFormat image_format, IntPtr image_width, IntPtr image_height, IntPtr image_depth, IntPtr image_row_pitch, IntPtr image_slice_pitch, [InAttribute, OutAttribute] ref T8 host_ptr, [OutAttribute] out Int32 errcode_ret)
            where T8 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]</summary>
        /// <param name="context"></param>
        /// <param name="flags"></param>
        /// <param name="image_format"></param>
        /// <param name="image_width"></param>
        /// <param name="image_height"></param>
        /// <param name="image_depth"></param>
        /// <param name="image_row_pitch"></param>
        /// <param name="image_slice_pitch"></param>
        /// <param name="host_ptr"></param>
        /// <param name="errcode_ret"></param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clCreateImage3D")]
        [CLSCompliant(false)]
        public static unsafe ComputeMemory CreateImage3D(ComputeContext context, OpenTK.Compute.CL12.MemFlags flags, ImageFormat* image_format, IntPtr image_width, IntPtr image_height, IntPtr image_depth, IntPtr image_row_pitch, IntPtr image_slice_pitch, IntPtr host_ptr, [OutAttribute] Int32* errcode_ret) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]</summary>
        /// <param name="context"></param>
        /// <param name="flags"></param>
        /// <param name="image_format"></param>
        /// <param name="image_width"></param>
        /// <param name="image_height"></param>
        /// <param name="image_depth"></param>
        /// <param name="image_row_pitch"></param>
        /// <param name="image_slice_pitch"></param>
        /// <param name="host_ptr"></param>
        /// <param name="errcode_ret"></param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clCreateImage3D")]
        [CLSCompliant(false)]
        public static unsafe ComputeMemory CreateImage3D<T8>(ComputeContext context, OpenTK.Compute.CL12.MemFlags flags, ImageFormat* image_format, IntPtr image_width, IntPtr image_height, IntPtr image_depth, IntPtr image_row_pitch, IntPtr image_slice_pitch, [InAttribute, OutAttribute] T8[] host_ptr, [OutAttribute] Int32* errcode_ret)
            where T8 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]</summary>
        /// <param name="context"></param>
        /// <param name="flags"></param>
        /// <param name="image_format"></param>
        /// <param name="image_width"></param>
        /// <param name="image_height"></param>
        /// <param name="image_depth"></param>
        /// <param name="image_row_pitch"></param>
        /// <param name="image_slice_pitch"></param>
        /// <param name="host_ptr"></param>
        /// <param name="errcode_ret"></param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clCreateImage3D")]
        [CLSCompliant(false)]
        public static unsafe ComputeMemory CreateImage3D<T8>(ComputeContext context, OpenTK.Compute.CL12.MemFlags flags, ImageFormat* image_format, IntPtr image_width, IntPtr image_height, IntPtr image_depth, IntPtr image_row_pitch, IntPtr image_slice_pitch, [InAttribute, OutAttribute] T8[,] host_ptr, [OutAttribute] Int32* errcode_ret)
            where T8 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]</summary>
        /// <param name="context"></param>
        /// <param name="flags"></param>
        /// <param name="image_format"></param>
        /// <param name="image_width"></param>
        /// <param name="image_height"></param>
        /// <param name="image_depth"></param>
        /// <param name="image_row_pitch"></param>
        /// <param name="image_slice_pitch"></param>
        /// <param name="host_ptr"></param>
        /// <param name="errcode_ret"></param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clCreateImage3D")]
        [CLSCompliant(false)]
        public static unsafe ComputeMemory CreateImage3D<T8>(ComputeContext context, OpenTK.Compute.CL12.MemFlags flags, ImageFormat* image_format, IntPtr image_width, IntPtr image_height, IntPtr image_depth, IntPtr image_row_pitch, IntPtr image_slice_pitch, [InAttribute, OutAttribute] T8[,,] host_ptr, [OutAttribute] Int32* errcode_ret)
            where T8 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]</summary>
        /// <param name="context"></param>
        /// <param name="flags"></param>
        /// <param name="image_format"></param>
        /// <param name="image_width"></param>
        /// <param name="image_height"></param>
        /// <param name="image_depth"></param>
        /// <param name="image_row_pitch"></param>
        /// <param name="image_slice_pitch"></param>
        /// <param name="host_ptr"></param>
        /// <param name="errcode_ret"></param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clCreateImage3D")]
        [CLSCompliant(false)]
        public static unsafe ComputeMemory CreateImage3D<T8>(ComputeContext context, OpenTK.Compute.CL12.MemFlags flags, ImageFormat* image_format, IntPtr image_width, IntPtr image_height, IntPtr image_depth, IntPtr image_row_pitch, IntPtr image_slice_pitch, [InAttribute, OutAttribute] ref T8 host_ptr, [OutAttribute] Int32* errcode_ret)
            where T8 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Creates a kernel object.
        /// </summary>
        /// <param name="program"> 
        /// A program object with a successfully built executable.
        /// </param>
        /// <param name="kernel_name"> 
        /// A function name in the program declared with the Kernel qualifier
        /// </param>
        /// <param name="errcode_ret"> 
        /// Returns an appropriate error code. If errcode_ret is NULL, no error code is returned.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clCreateKernel")]
        [CLSCompliant(false)]
        public static ComputeKernel CreateKernel(ComputeProgram program, String kernel_name, [OutAttribute] out ErrorCode errcode_ret) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Creates a kernel object.
        /// </summary>
        /// <param name="program"> 
        /// A program object with a successfully built executable.
        /// </param>
        /// <param name="kernel_name"> 
        /// A function name in the program declared with the Kernel qualifier
        /// </param>
        /// <param name="errcode_ret"> 
        /// Returns an appropriate error code. If errcode_ret is NULL, no error code is returned.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clCreateKernel")]
        [CLSCompliant(false)]
        public static unsafe ComputeKernel CreateKernel(ComputeProgram program, String kernel_name, [OutAttribute] ErrorCode* errcode_ret) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Creates kernel objects for all kernel functions in a program object.
        /// </summary>
        /// <param name="program"> 
        /// A program object with a successfully built executable.
        /// </param>
        /// <param name="num_kernels"> 
        /// The size of memory pointed to by kernels specified as the number of cl_kernel entries.
        /// </param>
        /// <param name="kernels"> 
        /// The buffer where the kernel objects for kernels in program will be returned. If kernels is NULL, it is ignored. If kernels is not NULL, num_kernels must be greater than or equal to the number of kernels in program.
        /// </param>
        /// <param name="num_kernels_ret"> 
        /// The number of kernels in program. If num_kernels_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clCreateKernelsInProgram")]
        [CLSCompliant(false)]
        public static ErrorCode CreateKernelsInProgram(ComputeProgram program, Int32 num_kernels, ComputeKernel[] kernels, [OutAttribute] Int32[] num_kernels_ret) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Creates kernel objects for all kernel functions in a program object.
        /// </summary>
        /// <param name="program"> 
        /// A program object with a successfully built executable.
        /// </param>
        /// <param name="num_kernels"> 
        /// The size of memory pointed to by kernels specified as the number of cl_kernel entries.
        /// </param>
        /// <param name="kernels"> 
        /// The buffer where the kernel objects for kernels in program will be returned. If kernels is NULL, it is ignored. If kernels is not NULL, num_kernels must be greater than or equal to the number of kernels in program.
        /// </param>
        /// <param name="num_kernels_ret"> 
        /// The number of kernels in program. If num_kernels_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clCreateKernelsInProgram")]
        [CLSCompliant(false)]
        public static ErrorCode CreateKernelsInProgram(ComputeProgram program, Int32 num_kernels, ref ComputeKernel kernels, [OutAttribute] out Int32 num_kernels_ret) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Creates kernel objects for all kernel functions in a program object.
        /// </summary>
        /// <param name="program"> 
        /// A program object with a successfully built executable.
        /// </param>
        /// <param name="num_kernels"> 
        /// The size of memory pointed to by kernels specified as the number of cl_kernel entries.
        /// </param>
        /// <param name="kernels"> 
        /// The buffer where the kernel objects for kernels in program will be returned. If kernels is NULL, it is ignored. If kernels is not NULL, num_kernels must be greater than or equal to the number of kernels in program.
        /// </param>
        /// <param name="num_kernels_ret"> 
        /// The number of kernels in program. If num_kernels_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clCreateKernelsInProgram")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode CreateKernelsInProgram(ComputeProgram program, Int32 num_kernels, ComputeKernel* kernels, [OutAttribute] Int32* num_kernels_ret) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.2]
        /// Creates a program object for a context, and loads the information related to the built-in kernels into a program object.
        /// </summary>
        /// <param name="context"> 
        /// Must be a valid OpenCL context.
        /// </param>
        /// <param name="num_devices"> 
        /// The number of devices listed in device_list.
        /// </param>
        /// <param name="device_list">[length: num_devices] 
        /// A pointer to a list of devices that are in context. device_list must be a non-NULL value. The built-in kernels are loaded for devices specified in this list.  The devices associated with the program object will be the list of devices specified by device_list.  The list of devices specified by device_list must be devices associated with context.
        /// </param>
        /// <param name="kernel_names"> 
        /// A semi-colon separated list of built-in kernel names.
        /// </param>
        /// <param name="errcode_ret">[length: 1]</param>
        [AutoGenerated(Category = "", Version = "1.2", EntryPoint = "clCreateProgramWithBuiltInKernels")]
        [CLSCompliant(false)]
        public static ComputeProgram CreateProgramWithBuiltInKernels(ComputeContext context, Int32 num_devices, ComputeDevice[] device_list, String kernel_names, [OutAttribute] out OpenTK.Compute.CL12.ErrorCode errcode_ret) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.2]
        /// Creates a program object for a context, and loads the information related to the built-in kernels into a program object.
        /// </summary>
        /// <param name="context"> 
        /// Must be a valid OpenCL context.
        /// </param>
        /// <param name="num_devices"> 
        /// The number of devices listed in device_list.
        /// </param>
        /// <param name="device_list">[length: num_devices] 
        /// A pointer to a list of devices that are in context. device_list must be a non-NULL value. The built-in kernels are loaded for devices specified in this list.  The devices associated with the program object will be the list of devices specified by device_list.  The list of devices specified by device_list must be devices associated with context.
        /// </param>
        /// <param name="kernel_names"> 
        /// A semi-colon separated list of built-in kernel names.
        /// </param>
        /// <param name="errcode_ret">[length: 1]</param>
        [AutoGenerated(Category = "", Version = "1.2", EntryPoint = "clCreateProgramWithBuiltInKernels")]
        [CLSCompliant(false)]
        public static ComputeProgram CreateProgramWithBuiltInKernels(ComputeContext context, Int32 num_devices, ref ComputeDevice device_list, String kernel_names, [OutAttribute] out OpenTK.Compute.CL12.ErrorCode errcode_ret) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.2]
        /// Creates a program object for a context, and loads the information related to the built-in kernels into a program object.
        /// </summary>
        /// <param name="context"> 
        /// Must be a valid OpenCL context.
        /// </param>
        /// <param name="num_devices"> 
        /// The number of devices listed in device_list.
        /// </param>
        /// <param name="device_list">[length: num_devices] 
        /// A pointer to a list of devices that are in context. device_list must be a non-NULL value. The built-in kernels are loaded for devices specified in this list.  The devices associated with the program object will be the list of devices specified by device_list.  The list of devices specified by device_list must be devices associated with context.
        /// </param>
        /// <param name="kernel_names"> 
        /// A semi-colon separated list of built-in kernel names.
        /// </param>
        /// <param name="errcode_ret">[length: 1]</param>
        [AutoGenerated(Category = "", Version = "1.2", EntryPoint = "clCreateProgramWithBuiltInKernels")]
        [CLSCompliant(false)]
        public static unsafe ComputeProgram CreateProgramWithBuiltInKernels(ComputeContext context, Int32 num_devices, ComputeDevice* device_list, String kernel_names, [OutAttribute] OpenTK.Compute.CL12.ErrorCode* errcode_ret) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Creates a program object for a context, and loads the source code specified by the text strings in the strings array into the program object.
        /// </summary>
        /// <param name="context"> 
        /// Must be a valid OpenCL context.
        /// </param>
        /// <param name="count"> 
        /// An array of count pointers to optionally null-terminated character strings that make up the source code.
        /// </param>
        /// <param name="strings"> 
        /// An array of count pointers to optionally null-terminated character strings that make up the source code.
        /// </param>
        /// <param name="lengths"> 
        /// An array with the number of chars in each string (the string length). If an element in lengths is zero, its accompanying string is null-terminated. If lengths is NULL, all strings in the strings argument are considered null-terminated. Any length value passed in that is greater than zero excludes the null terminator in its count.
        /// </param>
        /// <param name="errcode_ret"> 
        /// Returns an appropriate error code. If errcode_ret is NULL, no error code is returned.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clCreateProgramWithSource")]
        [CLSCompliant(false)]
        public static unsafe ComputeProgram CreateProgramWithSource(ComputeContext context, Int32 count, IntPtr strings, IntPtr* lengths, [OutAttribute] ErrorCode* errcode_ret) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Creates a program object for a context, and loads the source code specified by the text strings in the strings array into the program object.
        /// </summary>
        /// <param name="context"> 
        /// Must be a valid OpenCL context.
        /// </param>
        /// <param name="count"> 
        /// An array of count pointers to optionally null-terminated character strings that make up the source code.
        /// </param>
        /// <param name="strings"> 
        /// An array of count pointers to optionally null-terminated character strings that make up the source code.
        /// </param>
        /// <param name="lengths"> 
        /// An array with the number of chars in each string (the string length). If an element in lengths is zero, its accompanying string is null-terminated. If lengths is NULL, all strings in the strings argument are considered null-terminated. Any length value passed in that is greater than zero excludes the null terminator in its count.
        /// </param>
        /// <param name="errcode_ret"> 
        /// Returns an appropriate error code. If errcode_ret is NULL, no error code is returned.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clCreateProgramWithSource")]
        [CLSCompliant(false)]
        public static ComputeProgram CreateProgramWithSource(ComputeContext context, Int32 count, String[] strings, IntPtr[] lengths, [OutAttribute] out ErrorCode errcode_ret) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Creates a program object for a context, and loads the source code specified by the text strings in the strings array into the program object.
        /// </summary>
        /// <param name="context"> 
        /// Must be a valid OpenCL context.
        /// </param>
        /// <param name="count"> 
        /// An array of count pointers to optionally null-terminated character strings that make up the source code.
        /// </param>
        /// <param name="strings"> 
        /// An array of count pointers to optionally null-terminated character strings that make up the source code.
        /// </param>
        /// <param name="lengths"> 
        /// An array with the number of chars in each string (the string length). If an element in lengths is zero, its accompanying string is null-terminated. If lengths is NULL, all strings in the strings argument are considered null-terminated. Any length value passed in that is greater than zero excludes the null terminator in its count.
        /// </param>
        /// <param name="errcode_ret"> 
        /// Returns an appropriate error code. If errcode_ret is NULL, no error code is returned.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clCreateProgramWithSource")]
        [CLSCompliant(false)]
        public static ComputeProgram CreateProgramWithSource(ComputeContext context, Int32 count, ref String strings, ref IntPtr lengths, [OutAttribute] out ErrorCode errcode_ret) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Creates a sampler object.
        /// </summary>
        /// <param name="context"> 
        /// Must be a valid OpenCL context.
        /// </param>
        /// <param name="normalized_coords"> 
        /// Determines if the image coordinates specified are normalized (if normalized_coords is True) or not (if normalized_coords is False).
        /// </param>
        /// <param name="addressing_mode"> 
        /// Specifies how out-of-range image coordinates are handled when reading from an image. This can be set to AddressMirroredRepeat, AddressRepeat, AddressClampToEdge, AddressClamp, and AddressNone.
        /// </param>
        /// <param name="filter_mode"> 
        /// Specifies the type of filter that must be applied when reading an image. This can be FilterNearest or FilterLinear.
        /// </param>
        /// <param name="errcode_ret"> 
        /// Returns an appropriate error code. If errcode_ret is NULL, no error code is returned.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clCreateSampler")]
        [CLSCompliant(false)]
        public static ComputeSampler CreateSampler(ComputeContext context, bool normalized_coords, OpenTK.Compute.CL12.AddressingMode addressing_mode, OpenTK.Compute.CL12.FilterMode filter_mode, [OutAttribute] out ErrorCode errcode_ret) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Creates a sampler object.
        /// </summary>
        /// <param name="context"> 
        /// Must be a valid OpenCL context.
        /// </param>
        /// <param name="normalized_coords"> 
        /// Determines if the image coordinates specified are normalized (if normalized_coords is True) or not (if normalized_coords is False).
        /// </param>
        /// <param name="addressing_mode"> 
        /// Specifies how out-of-range image coordinates are handled when reading from an image. This can be set to AddressMirroredRepeat, AddressRepeat, AddressClampToEdge, AddressClamp, and AddressNone.
        /// </param>
        /// <param name="filter_mode"> 
        /// Specifies the type of filter that must be applied when reading an image. This can be FilterNearest or FilterLinear.
        /// </param>
        /// <param name="errcode_ret"> 
        /// Returns an appropriate error code. If errcode_ret is NULL, no error code is returned.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clCreateSampler")]
        [CLSCompliant(false)]
        public static unsafe ComputeSampler CreateSampler(ComputeContext context, bool normalized_coords, OpenTK.Compute.CL12.AddressingMode addressing_mode, OpenTK.Compute.CL12.FilterMode filter_mode, [OutAttribute] ErrorCode* errcode_ret) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.1]
        /// Creates a new buffer object (referred to as a sub-buffer object) from an existing buffer object.
        /// </summary>
        /// <param name="buffer"> 
        /// A valid object and cannot be a sub-buffer object.
        /// </param>
        /// <param name="flags"> 
        /// A bit-field that is used to specify allocation and usage information about the sub-buffer memory object being created and is described in the table below.  If the MemReadWrite, MemReadOnly or MemWriteOnly values are not specified in flags, they are inherited from the corresponding memory access qualifers associated with buffer. The MemUseHostPtr, MemAllocHostPtr and MemCopyHostPtr values cannot be specified in flags but are inherited from the corresponding memory access qualifiers associated with buffer.  If MemCopyHostPtr is specified in  the memory access qualifier values associated with buffer it does not imply any additional copies when the sub-buffer is created from buffer. If the MemHostWriteOnly, MemHostReadOnly or MemHostNoAccess values are not specified in flags, they are inherited from the corresponding memory access qualifiers associated with buffer.
        /// </param>
        /// <param name="buffer_create_type"> 
        /// Describes the type of buffer object to be created. The list of supported values for buffer_create_type and corresponding descriptor that buffer_create_info points to is described below. cl_buffer_create_typeDescriptionCL_BUFFER_CREATE_TYPE_REGION Create a buffer object that represents a specific region in buffer. buffer_create_info is a pointer to the following structure:  typedef struct _cl_buffer_region { size_t origin; size_t size; } cl_buffer_region;  (origin, size) defines the offset and size in bytes in buffer.  If buffer is created with MemUseHostPtr, the host_ptr associated with the buffer object returned is host_ptr + origin.  The buffer object returned references the data store allocated for buffer and points to a specific region given by (origin, size) in this data store. InvalidValue is returned in errcode_ret if the region specified by (origin, size) is out of bounds in buffer. InvalidBufferSize if size is 0. MisalignedSubBufferOffset is returned in errcode_ret if there are no devices in context associated with buffer for which the origin value is aligned to the DeviceMemBaseAddrAlign value.
        /// </param>
        /// <param name="buffer_create_info"> 
        /// Describes the type of buffer object to be created. The list of supported values for buffer_create_type and corresponding descriptor that buffer_create_info points to is described below. cl_buffer_create_typeDescriptionCL_BUFFER_CREATE_TYPE_REGION Create a buffer object that represents a specific region in buffer. buffer_create_info is a pointer to the following structure:  typedef struct _cl_buffer_region { size_t origin; size_t size; } cl_buffer_region;  (origin, size) defines the offset and size in bytes in buffer.  If buffer is created with MemUseHostPtr, the host_ptr associated with the buffer object returned is host_ptr + origin.  The buffer object returned references the data store allocated for buffer and points to a specific region given by (origin, size) in this data store. InvalidValue is returned in errcode_ret if the region specified by (origin, size) is out of bounds in buffer. InvalidBufferSize if size is 0. MisalignedSubBufferOffset is returned in errcode_ret if there are no devices in context associated with buffer for which the origin value is aligned to the DeviceMemBaseAddrAlign value.
        /// </param>
        /// <param name="errcode_ret"> 
        /// Describes the type of buffer object to be created. The list of supported values for buffer_create_type and corresponding descriptor that buffer_create_info points to is described below. cl_buffer_create_typeDescriptionCL_BUFFER_CREATE_TYPE_REGION Create a buffer object that represents a specific region in buffer. buffer_create_info is a pointer to the following structure:  typedef struct _cl_buffer_region { size_t origin; size_t size; } cl_buffer_region;  (origin, size) defines the offset and size in bytes in buffer.  If buffer is created with MemUseHostPtr, the host_ptr associated with the buffer object returned is host_ptr + origin.  The buffer object returned references the data store allocated for buffer and points to a specific region given by (origin, size) in this data store. InvalidValue is returned in errcode_ret if the region specified by (origin, size) is out of bounds in buffer. InvalidBufferSize if size is 0. MisalignedSubBufferOffset is returned in errcode_ret if there are no devices in context associated with buffer for which the origin value is aligned to the DeviceMemBaseAddrAlign value.
        /// </param>
        [AutoGenerated(Category = "", Version = "1.1", EntryPoint = "clCreateSubBuffer")]
        [CLSCompliant(false)]
        public static ComputeMemory CreateSubBuffer(ComputeMemory buffer, OpenTK.Compute.CL12.MemFlags flags, OpenTK.Compute.CL12.BufferCreateType buffer_create_type, IntPtr buffer_create_info, [OutAttribute] Int32[] errcode_ret) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.1]
        /// Creates a new buffer object (referred to as a sub-buffer object) from an existing buffer object.
        /// </summary>
        /// <param name="buffer"> 
        /// A valid object and cannot be a sub-buffer object.
        /// </param>
        /// <param name="flags"> 
        /// A bit-field that is used to specify allocation and usage information about the sub-buffer memory object being created and is described in the table below.  If the MemReadWrite, MemReadOnly or MemWriteOnly values are not specified in flags, they are inherited from the corresponding memory access qualifers associated with buffer. The MemUseHostPtr, MemAllocHostPtr and MemCopyHostPtr values cannot be specified in flags but are inherited from the corresponding memory access qualifiers associated with buffer.  If MemCopyHostPtr is specified in  the memory access qualifier values associated with buffer it does not imply any additional copies when the sub-buffer is created from buffer. If the MemHostWriteOnly, MemHostReadOnly or MemHostNoAccess values are not specified in flags, they are inherited from the corresponding memory access qualifiers associated with buffer.
        /// </param>
        /// <param name="buffer_create_type"> 
        /// Describes the type of buffer object to be created. The list of supported values for buffer_create_type and corresponding descriptor that buffer_create_info points to is described below. cl_buffer_create_typeDescriptionCL_BUFFER_CREATE_TYPE_REGION Create a buffer object that represents a specific region in buffer. buffer_create_info is a pointer to the following structure:  typedef struct _cl_buffer_region { size_t origin; size_t size; } cl_buffer_region;  (origin, size) defines the offset and size in bytes in buffer.  If buffer is created with MemUseHostPtr, the host_ptr associated with the buffer object returned is host_ptr + origin.  The buffer object returned references the data store allocated for buffer and points to a specific region given by (origin, size) in this data store. InvalidValue is returned in errcode_ret if the region specified by (origin, size) is out of bounds in buffer. InvalidBufferSize if size is 0. MisalignedSubBufferOffset is returned in errcode_ret if there are no devices in context associated with buffer for which the origin value is aligned to the DeviceMemBaseAddrAlign value.
        /// </param>
        /// <param name="buffer_create_info"> 
        /// Describes the type of buffer object to be created. The list of supported values for buffer_create_type and corresponding descriptor that buffer_create_info points to is described below. cl_buffer_create_typeDescriptionCL_BUFFER_CREATE_TYPE_REGION Create a buffer object that represents a specific region in buffer. buffer_create_info is a pointer to the following structure:  typedef struct _cl_buffer_region { size_t origin; size_t size; } cl_buffer_region;  (origin, size) defines the offset and size in bytes in buffer.  If buffer is created with MemUseHostPtr, the host_ptr associated with the buffer object returned is host_ptr + origin.  The buffer object returned references the data store allocated for buffer and points to a specific region given by (origin, size) in this data store. InvalidValue is returned in errcode_ret if the region specified by (origin, size) is out of bounds in buffer. InvalidBufferSize if size is 0. MisalignedSubBufferOffset is returned in errcode_ret if there are no devices in context associated with buffer for which the origin value is aligned to the DeviceMemBaseAddrAlign value.
        /// </param>
        /// <param name="errcode_ret"> 
        /// Describes the type of buffer object to be created. The list of supported values for buffer_create_type and corresponding descriptor that buffer_create_info points to is described below. cl_buffer_create_typeDescriptionCL_BUFFER_CREATE_TYPE_REGION Create a buffer object that represents a specific region in buffer. buffer_create_info is a pointer to the following structure:  typedef struct _cl_buffer_region { size_t origin; size_t size; } cl_buffer_region;  (origin, size) defines the offset and size in bytes in buffer.  If buffer is created with MemUseHostPtr, the host_ptr associated with the buffer object returned is host_ptr + origin.  The buffer object returned references the data store allocated for buffer and points to a specific region given by (origin, size) in this data store. InvalidValue is returned in errcode_ret if the region specified by (origin, size) is out of bounds in buffer. InvalidBufferSize if size is 0. MisalignedSubBufferOffset is returned in errcode_ret if there are no devices in context associated with buffer for which the origin value is aligned to the DeviceMemBaseAddrAlign value.
        /// </param>
        [AutoGenerated(Category = "", Version = "1.1", EntryPoint = "clCreateSubBuffer")]
        [CLSCompliant(false)]
        public static ComputeMemory CreateSubBuffer(ComputeMemory buffer, OpenTK.Compute.CL12.MemFlags flags, OpenTK.Compute.CL12.BufferCreateType buffer_create_type, IntPtr buffer_create_info, [OutAttribute] out Int32 errcode_ret) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.1]
        /// Creates a new buffer object (referred to as a sub-buffer object) from an existing buffer object.
        /// </summary>
        /// <param name="buffer"> 
        /// A valid object and cannot be a sub-buffer object.
        /// </param>
        /// <param name="flags"> 
        /// A bit-field that is used to specify allocation and usage information about the sub-buffer memory object being created and is described in the table below.  If the MemReadWrite, MemReadOnly or MemWriteOnly values are not specified in flags, they are inherited from the corresponding memory access qualifers associated with buffer. The MemUseHostPtr, MemAllocHostPtr and MemCopyHostPtr values cannot be specified in flags but are inherited from the corresponding memory access qualifiers associated with buffer.  If MemCopyHostPtr is specified in  the memory access qualifier values associated with buffer it does not imply any additional copies when the sub-buffer is created from buffer. If the MemHostWriteOnly, MemHostReadOnly or MemHostNoAccess values are not specified in flags, they are inherited from the corresponding memory access qualifiers associated with buffer.
        /// </param>
        /// <param name="buffer_create_type"> 
        /// Describes the type of buffer object to be created. The list of supported values for buffer_create_type and corresponding descriptor that buffer_create_info points to is described below. cl_buffer_create_typeDescriptionCL_BUFFER_CREATE_TYPE_REGION Create a buffer object that represents a specific region in buffer. buffer_create_info is a pointer to the following structure:  typedef struct _cl_buffer_region { size_t origin; size_t size; } cl_buffer_region;  (origin, size) defines the offset and size in bytes in buffer.  If buffer is created with MemUseHostPtr, the host_ptr associated with the buffer object returned is host_ptr + origin.  The buffer object returned references the data store allocated for buffer and points to a specific region given by (origin, size) in this data store. InvalidValue is returned in errcode_ret if the region specified by (origin, size) is out of bounds in buffer. InvalidBufferSize if size is 0. MisalignedSubBufferOffset is returned in errcode_ret if there are no devices in context associated with buffer for which the origin value is aligned to the DeviceMemBaseAddrAlign value.
        /// </param>
        /// <param name="buffer_create_info"> 
        /// Describes the type of buffer object to be created. The list of supported values for buffer_create_type and corresponding descriptor that buffer_create_info points to is described below. cl_buffer_create_typeDescriptionCL_BUFFER_CREATE_TYPE_REGION Create a buffer object that represents a specific region in buffer. buffer_create_info is a pointer to the following structure:  typedef struct _cl_buffer_region { size_t origin; size_t size; } cl_buffer_region;  (origin, size) defines the offset and size in bytes in buffer.  If buffer is created with MemUseHostPtr, the host_ptr associated with the buffer object returned is host_ptr + origin.  The buffer object returned references the data store allocated for buffer and points to a specific region given by (origin, size) in this data store. InvalidValue is returned in errcode_ret if the region specified by (origin, size) is out of bounds in buffer. InvalidBufferSize if size is 0. MisalignedSubBufferOffset is returned in errcode_ret if there are no devices in context associated with buffer for which the origin value is aligned to the DeviceMemBaseAddrAlign value.
        /// </param>
        /// <param name="errcode_ret"> 
        /// Describes the type of buffer object to be created. The list of supported values for buffer_create_type and corresponding descriptor that buffer_create_info points to is described below. cl_buffer_create_typeDescriptionCL_BUFFER_CREATE_TYPE_REGION Create a buffer object that represents a specific region in buffer. buffer_create_info is a pointer to the following structure:  typedef struct _cl_buffer_region { size_t origin; size_t size; } cl_buffer_region;  (origin, size) defines the offset and size in bytes in buffer.  If buffer is created with MemUseHostPtr, the host_ptr associated with the buffer object returned is host_ptr + origin.  The buffer object returned references the data store allocated for buffer and points to a specific region given by (origin, size) in this data store. InvalidValue is returned in errcode_ret if the region specified by (origin, size) is out of bounds in buffer. InvalidBufferSize if size is 0. MisalignedSubBufferOffset is returned in errcode_ret if there are no devices in context associated with buffer for which the origin value is aligned to the DeviceMemBaseAddrAlign value.
        /// </param>
        [AutoGenerated(Category = "", Version = "1.1", EntryPoint = "clCreateSubBuffer")]
        [CLSCompliant(false)]
        public static unsafe ComputeMemory CreateSubBuffer(ComputeMemory buffer, OpenTK.Compute.CL12.MemFlags flags, OpenTK.Compute.CL12.BufferCreateType buffer_create_type, IntPtr buffer_create_info, [OutAttribute] Int32* errcode_ret) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.1]
        /// Creates a new buffer object (referred to as a sub-buffer object) from an existing buffer object.
        /// </summary>
        /// <param name="buffer"> 
        /// A valid object and cannot be a sub-buffer object.
        /// </param>
        /// <param name="flags"> 
        /// A bit-field that is used to specify allocation and usage information about the sub-buffer memory object being created and is described in the table below.  If the MemReadWrite, MemReadOnly or MemWriteOnly values are not specified in flags, they are inherited from the corresponding memory access qualifers associated with buffer. The MemUseHostPtr, MemAllocHostPtr and MemCopyHostPtr values cannot be specified in flags but are inherited from the corresponding memory access qualifiers associated with buffer.  If MemCopyHostPtr is specified in  the memory access qualifier values associated with buffer it does not imply any additional copies when the sub-buffer is created from buffer. If the MemHostWriteOnly, MemHostReadOnly or MemHostNoAccess values are not specified in flags, they are inherited from the corresponding memory access qualifiers associated with buffer.
        /// </param>
        /// <param name="buffer_create_type"> 
        /// Describes the type of buffer object to be created. The list of supported values for buffer_create_type and corresponding descriptor that buffer_create_info points to is described below. cl_buffer_create_typeDescriptionCL_BUFFER_CREATE_TYPE_REGION Create a buffer object that represents a specific region in buffer. buffer_create_info is a pointer to the following structure:  typedef struct _cl_buffer_region { size_t origin; size_t size; } cl_buffer_region;  (origin, size) defines the offset and size in bytes in buffer.  If buffer is created with MemUseHostPtr, the host_ptr associated with the buffer object returned is host_ptr + origin.  The buffer object returned references the data store allocated for buffer and points to a specific region given by (origin, size) in this data store. InvalidValue is returned in errcode_ret if the region specified by (origin, size) is out of bounds in buffer. InvalidBufferSize if size is 0. MisalignedSubBufferOffset is returned in errcode_ret if there are no devices in context associated with buffer for which the origin value is aligned to the DeviceMemBaseAddrAlign value.
        /// </param>
        /// <param name="buffer_create_info"> 
        /// Describes the type of buffer object to be created. The list of supported values for buffer_create_type and corresponding descriptor that buffer_create_info points to is described below. cl_buffer_create_typeDescriptionCL_BUFFER_CREATE_TYPE_REGION Create a buffer object that represents a specific region in buffer. buffer_create_info is a pointer to the following structure:  typedef struct _cl_buffer_region { size_t origin; size_t size; } cl_buffer_region;  (origin, size) defines the offset and size in bytes in buffer.  If buffer is created with MemUseHostPtr, the host_ptr associated with the buffer object returned is host_ptr + origin.  The buffer object returned references the data store allocated for buffer and points to a specific region given by (origin, size) in this data store. InvalidValue is returned in errcode_ret if the region specified by (origin, size) is out of bounds in buffer. InvalidBufferSize if size is 0. MisalignedSubBufferOffset is returned in errcode_ret if there are no devices in context associated with buffer for which the origin value is aligned to the DeviceMemBaseAddrAlign value.
        /// </param>
        /// <param name="errcode_ret"> 
        /// Describes the type of buffer object to be created. The list of supported values for buffer_create_type and corresponding descriptor that buffer_create_info points to is described below. cl_buffer_create_typeDescriptionCL_BUFFER_CREATE_TYPE_REGION Create a buffer object that represents a specific region in buffer. buffer_create_info is a pointer to the following structure:  typedef struct _cl_buffer_region { size_t origin; size_t size; } cl_buffer_region;  (origin, size) defines the offset and size in bytes in buffer.  If buffer is created with MemUseHostPtr, the host_ptr associated with the buffer object returned is host_ptr + origin.  The buffer object returned references the data store allocated for buffer and points to a specific region given by (origin, size) in this data store. InvalidValue is returned in errcode_ret if the region specified by (origin, size) is out of bounds in buffer. InvalidBufferSize if size is 0. MisalignedSubBufferOffset is returned in errcode_ret if there are no devices in context associated with buffer for which the origin value is aligned to the DeviceMemBaseAddrAlign value.
        /// </param>
        [AutoGenerated(Category = "", Version = "1.1", EntryPoint = "clCreateSubBuffer")]
        [CLSCompliant(false)]
        public static ComputeMemory CreateSubBuffer<T3>(ComputeMemory buffer, OpenTK.Compute.CL12.MemFlags flags, OpenTK.Compute.CL12.BufferCreateType buffer_create_type, [InAttribute, OutAttribute] T3[] buffer_create_info, [OutAttribute] Int32[] errcode_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.1]
        /// Creates a new buffer object (referred to as a sub-buffer object) from an existing buffer object.
        /// </summary>
        /// <param name="buffer"> 
        /// A valid object and cannot be a sub-buffer object.
        /// </param>
        /// <param name="flags"> 
        /// A bit-field that is used to specify allocation and usage information about the sub-buffer memory object being created and is described in the table below.  If the MemReadWrite, MemReadOnly or MemWriteOnly values are not specified in flags, they are inherited from the corresponding memory access qualifers associated with buffer. The MemUseHostPtr, MemAllocHostPtr and MemCopyHostPtr values cannot be specified in flags but are inherited from the corresponding memory access qualifiers associated with buffer.  If MemCopyHostPtr is specified in  the memory access qualifier values associated with buffer it does not imply any additional copies when the sub-buffer is created from buffer. If the MemHostWriteOnly, MemHostReadOnly or MemHostNoAccess values are not specified in flags, they are inherited from the corresponding memory access qualifiers associated with buffer.
        /// </param>
        /// <param name="buffer_create_type"> 
        /// Describes the type of buffer object to be created. The list of supported values for buffer_create_type and corresponding descriptor that buffer_create_info points to is described below. cl_buffer_create_typeDescriptionCL_BUFFER_CREATE_TYPE_REGION Create a buffer object that represents a specific region in buffer. buffer_create_info is a pointer to the following structure:  typedef struct _cl_buffer_region { size_t origin; size_t size; } cl_buffer_region;  (origin, size) defines the offset and size in bytes in buffer.  If buffer is created with MemUseHostPtr, the host_ptr associated with the buffer object returned is host_ptr + origin.  The buffer object returned references the data store allocated for buffer and points to a specific region given by (origin, size) in this data store. InvalidValue is returned in errcode_ret if the region specified by (origin, size) is out of bounds in buffer. InvalidBufferSize if size is 0. MisalignedSubBufferOffset is returned in errcode_ret if there are no devices in context associated with buffer for which the origin value is aligned to the DeviceMemBaseAddrAlign value.
        /// </param>
        /// <param name="buffer_create_info"> 
        /// Describes the type of buffer object to be created. The list of supported values for buffer_create_type and corresponding descriptor that buffer_create_info points to is described below. cl_buffer_create_typeDescriptionCL_BUFFER_CREATE_TYPE_REGION Create a buffer object that represents a specific region in buffer. buffer_create_info is a pointer to the following structure:  typedef struct _cl_buffer_region { size_t origin; size_t size; } cl_buffer_region;  (origin, size) defines the offset and size in bytes in buffer.  If buffer is created with MemUseHostPtr, the host_ptr associated with the buffer object returned is host_ptr + origin.  The buffer object returned references the data store allocated for buffer and points to a specific region given by (origin, size) in this data store. InvalidValue is returned in errcode_ret if the region specified by (origin, size) is out of bounds in buffer. InvalidBufferSize if size is 0. MisalignedSubBufferOffset is returned in errcode_ret if there are no devices in context associated with buffer for which the origin value is aligned to the DeviceMemBaseAddrAlign value.
        /// </param>
        /// <param name="errcode_ret"> 
        /// Describes the type of buffer object to be created. The list of supported values for buffer_create_type and corresponding descriptor that buffer_create_info points to is described below. cl_buffer_create_typeDescriptionCL_BUFFER_CREATE_TYPE_REGION Create a buffer object that represents a specific region in buffer. buffer_create_info is a pointer to the following structure:  typedef struct _cl_buffer_region { size_t origin; size_t size; } cl_buffer_region;  (origin, size) defines the offset and size in bytes in buffer.  If buffer is created with MemUseHostPtr, the host_ptr associated with the buffer object returned is host_ptr + origin.  The buffer object returned references the data store allocated for buffer and points to a specific region given by (origin, size) in this data store. InvalidValue is returned in errcode_ret if the region specified by (origin, size) is out of bounds in buffer. InvalidBufferSize if size is 0. MisalignedSubBufferOffset is returned in errcode_ret if there are no devices in context associated with buffer for which the origin value is aligned to the DeviceMemBaseAddrAlign value.
        /// </param>
        [AutoGenerated(Category = "", Version = "1.1", EntryPoint = "clCreateSubBuffer")]
        [CLSCompliant(false)]
        public static ComputeMemory CreateSubBuffer<T3>(ComputeMemory buffer, OpenTK.Compute.CL12.MemFlags flags, OpenTK.Compute.CL12.BufferCreateType buffer_create_type, [InAttribute, OutAttribute] T3[] buffer_create_info, [OutAttribute] out Int32 errcode_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.1]
        /// Creates a new buffer object (referred to as a sub-buffer object) from an existing buffer object.
        /// </summary>
        /// <param name="buffer"> 
        /// A valid object and cannot be a sub-buffer object.
        /// </param>
        /// <param name="flags"> 
        /// A bit-field that is used to specify allocation and usage information about the sub-buffer memory object being created and is described in the table below.  If the MemReadWrite, MemReadOnly or MemWriteOnly values are not specified in flags, they are inherited from the corresponding memory access qualifers associated with buffer. The MemUseHostPtr, MemAllocHostPtr and MemCopyHostPtr values cannot be specified in flags but are inherited from the corresponding memory access qualifiers associated with buffer.  If MemCopyHostPtr is specified in  the memory access qualifier values associated with buffer it does not imply any additional copies when the sub-buffer is created from buffer. If the MemHostWriteOnly, MemHostReadOnly or MemHostNoAccess values are not specified in flags, they are inherited from the corresponding memory access qualifiers associated with buffer.
        /// </param>
        /// <param name="buffer_create_type"> 
        /// Describes the type of buffer object to be created. The list of supported values for buffer_create_type and corresponding descriptor that buffer_create_info points to is described below. cl_buffer_create_typeDescriptionCL_BUFFER_CREATE_TYPE_REGION Create a buffer object that represents a specific region in buffer. buffer_create_info is a pointer to the following structure:  typedef struct _cl_buffer_region { size_t origin; size_t size; } cl_buffer_region;  (origin, size) defines the offset and size in bytes in buffer.  If buffer is created with MemUseHostPtr, the host_ptr associated with the buffer object returned is host_ptr + origin.  The buffer object returned references the data store allocated for buffer and points to a specific region given by (origin, size) in this data store. InvalidValue is returned in errcode_ret if the region specified by (origin, size) is out of bounds in buffer. InvalidBufferSize if size is 0. MisalignedSubBufferOffset is returned in errcode_ret if there are no devices in context associated with buffer for which the origin value is aligned to the DeviceMemBaseAddrAlign value.
        /// </param>
        /// <param name="buffer_create_info"> 
        /// Describes the type of buffer object to be created. The list of supported values for buffer_create_type and corresponding descriptor that buffer_create_info points to is described below. cl_buffer_create_typeDescriptionCL_BUFFER_CREATE_TYPE_REGION Create a buffer object that represents a specific region in buffer. buffer_create_info is a pointer to the following structure:  typedef struct _cl_buffer_region { size_t origin; size_t size; } cl_buffer_region;  (origin, size) defines the offset and size in bytes in buffer.  If buffer is created with MemUseHostPtr, the host_ptr associated with the buffer object returned is host_ptr + origin.  The buffer object returned references the data store allocated for buffer and points to a specific region given by (origin, size) in this data store. InvalidValue is returned in errcode_ret if the region specified by (origin, size) is out of bounds in buffer. InvalidBufferSize if size is 0. MisalignedSubBufferOffset is returned in errcode_ret if there are no devices in context associated with buffer for which the origin value is aligned to the DeviceMemBaseAddrAlign value.
        /// </param>
        /// <param name="errcode_ret"> 
        /// Describes the type of buffer object to be created. The list of supported values for buffer_create_type and corresponding descriptor that buffer_create_info points to is described below. cl_buffer_create_typeDescriptionCL_BUFFER_CREATE_TYPE_REGION Create a buffer object that represents a specific region in buffer. buffer_create_info is a pointer to the following structure:  typedef struct _cl_buffer_region { size_t origin; size_t size; } cl_buffer_region;  (origin, size) defines the offset and size in bytes in buffer.  If buffer is created with MemUseHostPtr, the host_ptr associated with the buffer object returned is host_ptr + origin.  The buffer object returned references the data store allocated for buffer and points to a specific region given by (origin, size) in this data store. InvalidValue is returned in errcode_ret if the region specified by (origin, size) is out of bounds in buffer. InvalidBufferSize if size is 0. MisalignedSubBufferOffset is returned in errcode_ret if there are no devices in context associated with buffer for which the origin value is aligned to the DeviceMemBaseAddrAlign value.
        /// </param>
        [AutoGenerated(Category = "", Version = "1.1", EntryPoint = "clCreateSubBuffer")]
        [CLSCompliant(false)]
        public static unsafe ComputeMemory CreateSubBuffer<T3>(ComputeMemory buffer, OpenTK.Compute.CL12.MemFlags flags, OpenTK.Compute.CL12.BufferCreateType buffer_create_type, [InAttribute, OutAttribute] T3[] buffer_create_info, [OutAttribute] Int32* errcode_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.1]
        /// Creates a new buffer object (referred to as a sub-buffer object) from an existing buffer object.
        /// </summary>
        /// <param name="buffer"> 
        /// A valid object and cannot be a sub-buffer object.
        /// </param>
        /// <param name="flags"> 
        /// A bit-field that is used to specify allocation and usage information about the sub-buffer memory object being created and is described in the table below.  If the MemReadWrite, MemReadOnly or MemWriteOnly values are not specified in flags, they are inherited from the corresponding memory access qualifers associated with buffer. The MemUseHostPtr, MemAllocHostPtr and MemCopyHostPtr values cannot be specified in flags but are inherited from the corresponding memory access qualifiers associated with buffer.  If MemCopyHostPtr is specified in  the memory access qualifier values associated with buffer it does not imply any additional copies when the sub-buffer is created from buffer. If the MemHostWriteOnly, MemHostReadOnly or MemHostNoAccess values are not specified in flags, they are inherited from the corresponding memory access qualifiers associated with buffer.
        /// </param>
        /// <param name="buffer_create_type"> 
        /// Describes the type of buffer object to be created. The list of supported values for buffer_create_type and corresponding descriptor that buffer_create_info points to is described below. cl_buffer_create_typeDescriptionCL_BUFFER_CREATE_TYPE_REGION Create a buffer object that represents a specific region in buffer. buffer_create_info is a pointer to the following structure:  typedef struct _cl_buffer_region { size_t origin; size_t size; } cl_buffer_region;  (origin, size) defines the offset and size in bytes in buffer.  If buffer is created with MemUseHostPtr, the host_ptr associated with the buffer object returned is host_ptr + origin.  The buffer object returned references the data store allocated for buffer and points to a specific region given by (origin, size) in this data store. InvalidValue is returned in errcode_ret if the region specified by (origin, size) is out of bounds in buffer. InvalidBufferSize if size is 0. MisalignedSubBufferOffset is returned in errcode_ret if there are no devices in context associated with buffer for which the origin value is aligned to the DeviceMemBaseAddrAlign value.
        /// </param>
        /// <param name="buffer_create_info"> 
        /// Describes the type of buffer object to be created. The list of supported values for buffer_create_type and corresponding descriptor that buffer_create_info points to is described below. cl_buffer_create_typeDescriptionCL_BUFFER_CREATE_TYPE_REGION Create a buffer object that represents a specific region in buffer. buffer_create_info is a pointer to the following structure:  typedef struct _cl_buffer_region { size_t origin; size_t size; } cl_buffer_region;  (origin, size) defines the offset and size in bytes in buffer.  If buffer is created with MemUseHostPtr, the host_ptr associated with the buffer object returned is host_ptr + origin.  The buffer object returned references the data store allocated for buffer and points to a specific region given by (origin, size) in this data store. InvalidValue is returned in errcode_ret if the region specified by (origin, size) is out of bounds in buffer. InvalidBufferSize if size is 0. MisalignedSubBufferOffset is returned in errcode_ret if there are no devices in context associated with buffer for which the origin value is aligned to the DeviceMemBaseAddrAlign value.
        /// </param>
        /// <param name="errcode_ret"> 
        /// Describes the type of buffer object to be created. The list of supported values for buffer_create_type and corresponding descriptor that buffer_create_info points to is described below. cl_buffer_create_typeDescriptionCL_BUFFER_CREATE_TYPE_REGION Create a buffer object that represents a specific region in buffer. buffer_create_info is a pointer to the following structure:  typedef struct _cl_buffer_region { size_t origin; size_t size; } cl_buffer_region;  (origin, size) defines the offset and size in bytes in buffer.  If buffer is created with MemUseHostPtr, the host_ptr associated with the buffer object returned is host_ptr + origin.  The buffer object returned references the data store allocated for buffer and points to a specific region given by (origin, size) in this data store. InvalidValue is returned in errcode_ret if the region specified by (origin, size) is out of bounds in buffer. InvalidBufferSize if size is 0. MisalignedSubBufferOffset is returned in errcode_ret if there are no devices in context associated with buffer for which the origin value is aligned to the DeviceMemBaseAddrAlign value.
        /// </param>
        [AutoGenerated(Category = "", Version = "1.1", EntryPoint = "clCreateSubBuffer")]
        [CLSCompliant(false)]
        public static ComputeMemory CreateSubBuffer<T3>(ComputeMemory buffer, OpenTK.Compute.CL12.MemFlags flags, OpenTK.Compute.CL12.BufferCreateType buffer_create_type, [InAttribute, OutAttribute] T3[,] buffer_create_info, [OutAttribute] Int32[] errcode_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.1]
        /// Creates a new buffer object (referred to as a sub-buffer object) from an existing buffer object.
        /// </summary>
        /// <param name="buffer"> 
        /// A valid object and cannot be a sub-buffer object.
        /// </param>
        /// <param name="flags"> 
        /// A bit-field that is used to specify allocation and usage information about the sub-buffer memory object being created and is described in the table below.  If the MemReadWrite, MemReadOnly or MemWriteOnly values are not specified in flags, they are inherited from the corresponding memory access qualifers associated with buffer. The MemUseHostPtr, MemAllocHostPtr and MemCopyHostPtr values cannot be specified in flags but are inherited from the corresponding memory access qualifiers associated with buffer.  If MemCopyHostPtr is specified in  the memory access qualifier values associated with buffer it does not imply any additional copies when the sub-buffer is created from buffer. If the MemHostWriteOnly, MemHostReadOnly or MemHostNoAccess values are not specified in flags, they are inherited from the corresponding memory access qualifiers associated with buffer.
        /// </param>
        /// <param name="buffer_create_type"> 
        /// Describes the type of buffer object to be created. The list of supported values for buffer_create_type and corresponding descriptor that buffer_create_info points to is described below. cl_buffer_create_typeDescriptionCL_BUFFER_CREATE_TYPE_REGION Create a buffer object that represents a specific region in buffer. buffer_create_info is a pointer to the following structure:  typedef struct _cl_buffer_region { size_t origin; size_t size; } cl_buffer_region;  (origin, size) defines the offset and size in bytes in buffer.  If buffer is created with MemUseHostPtr, the host_ptr associated with the buffer object returned is host_ptr + origin.  The buffer object returned references the data store allocated for buffer and points to a specific region given by (origin, size) in this data store. InvalidValue is returned in errcode_ret if the region specified by (origin, size) is out of bounds in buffer. InvalidBufferSize if size is 0. MisalignedSubBufferOffset is returned in errcode_ret if there are no devices in context associated with buffer for which the origin value is aligned to the DeviceMemBaseAddrAlign value.
        /// </param>
        /// <param name="buffer_create_info"> 
        /// Describes the type of buffer object to be created. The list of supported values for buffer_create_type and corresponding descriptor that buffer_create_info points to is described below. cl_buffer_create_typeDescriptionCL_BUFFER_CREATE_TYPE_REGION Create a buffer object that represents a specific region in buffer. buffer_create_info is a pointer to the following structure:  typedef struct _cl_buffer_region { size_t origin; size_t size; } cl_buffer_region;  (origin, size) defines the offset and size in bytes in buffer.  If buffer is created with MemUseHostPtr, the host_ptr associated with the buffer object returned is host_ptr + origin.  The buffer object returned references the data store allocated for buffer and points to a specific region given by (origin, size) in this data store. InvalidValue is returned in errcode_ret if the region specified by (origin, size) is out of bounds in buffer. InvalidBufferSize if size is 0. MisalignedSubBufferOffset is returned in errcode_ret if there are no devices in context associated with buffer for which the origin value is aligned to the DeviceMemBaseAddrAlign value.
        /// </param>
        /// <param name="errcode_ret"> 
        /// Describes the type of buffer object to be created. The list of supported values for buffer_create_type and corresponding descriptor that buffer_create_info points to is described below. cl_buffer_create_typeDescriptionCL_BUFFER_CREATE_TYPE_REGION Create a buffer object that represents a specific region in buffer. buffer_create_info is a pointer to the following structure:  typedef struct _cl_buffer_region { size_t origin; size_t size; } cl_buffer_region;  (origin, size) defines the offset and size in bytes in buffer.  If buffer is created with MemUseHostPtr, the host_ptr associated with the buffer object returned is host_ptr + origin.  The buffer object returned references the data store allocated for buffer and points to a specific region given by (origin, size) in this data store. InvalidValue is returned in errcode_ret if the region specified by (origin, size) is out of bounds in buffer. InvalidBufferSize if size is 0. MisalignedSubBufferOffset is returned in errcode_ret if there are no devices in context associated with buffer for which the origin value is aligned to the DeviceMemBaseAddrAlign value.
        /// </param>
        [AutoGenerated(Category = "", Version = "1.1", EntryPoint = "clCreateSubBuffer")]
        [CLSCompliant(false)]
        public static ComputeMemory CreateSubBuffer<T3>(ComputeMemory buffer, OpenTK.Compute.CL12.MemFlags flags, OpenTK.Compute.CL12.BufferCreateType buffer_create_type, [InAttribute, OutAttribute] T3[,] buffer_create_info, [OutAttribute] out Int32 errcode_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.1]
        /// Creates a new buffer object (referred to as a sub-buffer object) from an existing buffer object.
        /// </summary>
        /// <param name="buffer"> 
        /// A valid object and cannot be a sub-buffer object.
        /// </param>
        /// <param name="flags"> 
        /// A bit-field that is used to specify allocation and usage information about the sub-buffer memory object being created and is described in the table below.  If the MemReadWrite, MemReadOnly or MemWriteOnly values are not specified in flags, they are inherited from the corresponding memory access qualifers associated with buffer. The MemUseHostPtr, MemAllocHostPtr and MemCopyHostPtr values cannot be specified in flags but are inherited from the corresponding memory access qualifiers associated with buffer.  If MemCopyHostPtr is specified in  the memory access qualifier values associated with buffer it does not imply any additional copies when the sub-buffer is created from buffer. If the MemHostWriteOnly, MemHostReadOnly or MemHostNoAccess values are not specified in flags, they are inherited from the corresponding memory access qualifiers associated with buffer.
        /// </param>
        /// <param name="buffer_create_type"> 
        /// Describes the type of buffer object to be created. The list of supported values for buffer_create_type and corresponding descriptor that buffer_create_info points to is described below. cl_buffer_create_typeDescriptionCL_BUFFER_CREATE_TYPE_REGION Create a buffer object that represents a specific region in buffer. buffer_create_info is a pointer to the following structure:  typedef struct _cl_buffer_region { size_t origin; size_t size; } cl_buffer_region;  (origin, size) defines the offset and size in bytes in buffer.  If buffer is created with MemUseHostPtr, the host_ptr associated with the buffer object returned is host_ptr + origin.  The buffer object returned references the data store allocated for buffer and points to a specific region given by (origin, size) in this data store. InvalidValue is returned in errcode_ret if the region specified by (origin, size) is out of bounds in buffer. InvalidBufferSize if size is 0. MisalignedSubBufferOffset is returned in errcode_ret if there are no devices in context associated with buffer for which the origin value is aligned to the DeviceMemBaseAddrAlign value.
        /// </param>
        /// <param name="buffer_create_info"> 
        /// Describes the type of buffer object to be created. The list of supported values for buffer_create_type and corresponding descriptor that buffer_create_info points to is described below. cl_buffer_create_typeDescriptionCL_BUFFER_CREATE_TYPE_REGION Create a buffer object that represents a specific region in buffer. buffer_create_info is a pointer to the following structure:  typedef struct _cl_buffer_region { size_t origin; size_t size; } cl_buffer_region;  (origin, size) defines the offset and size in bytes in buffer.  If buffer is created with MemUseHostPtr, the host_ptr associated with the buffer object returned is host_ptr + origin.  The buffer object returned references the data store allocated for buffer and points to a specific region given by (origin, size) in this data store. InvalidValue is returned in errcode_ret if the region specified by (origin, size) is out of bounds in buffer. InvalidBufferSize if size is 0. MisalignedSubBufferOffset is returned in errcode_ret if there are no devices in context associated with buffer for which the origin value is aligned to the DeviceMemBaseAddrAlign value.
        /// </param>
        /// <param name="errcode_ret"> 
        /// Describes the type of buffer object to be created. The list of supported values for buffer_create_type and corresponding descriptor that buffer_create_info points to is described below. cl_buffer_create_typeDescriptionCL_BUFFER_CREATE_TYPE_REGION Create a buffer object that represents a specific region in buffer. buffer_create_info is a pointer to the following structure:  typedef struct _cl_buffer_region { size_t origin; size_t size; } cl_buffer_region;  (origin, size) defines the offset and size in bytes in buffer.  If buffer is created with MemUseHostPtr, the host_ptr associated with the buffer object returned is host_ptr + origin.  The buffer object returned references the data store allocated for buffer and points to a specific region given by (origin, size) in this data store. InvalidValue is returned in errcode_ret if the region specified by (origin, size) is out of bounds in buffer. InvalidBufferSize if size is 0. MisalignedSubBufferOffset is returned in errcode_ret if there are no devices in context associated with buffer for which the origin value is aligned to the DeviceMemBaseAddrAlign value.
        /// </param>
        [AutoGenerated(Category = "", Version = "1.1", EntryPoint = "clCreateSubBuffer")]
        [CLSCompliant(false)]
        public static unsafe ComputeMemory CreateSubBuffer<T3>(ComputeMemory buffer, OpenTK.Compute.CL12.MemFlags flags, OpenTK.Compute.CL12.BufferCreateType buffer_create_type, [InAttribute, OutAttribute] T3[,] buffer_create_info, [OutAttribute] Int32* errcode_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.1]
        /// Creates a new buffer object (referred to as a sub-buffer object) from an existing buffer object.
        /// </summary>
        /// <param name="buffer"> 
        /// A valid object and cannot be a sub-buffer object.
        /// </param>
        /// <param name="flags"> 
        /// A bit-field that is used to specify allocation and usage information about the sub-buffer memory object being created and is described in the table below.  If the MemReadWrite, MemReadOnly or MemWriteOnly values are not specified in flags, they are inherited from the corresponding memory access qualifers associated with buffer. The MemUseHostPtr, MemAllocHostPtr and MemCopyHostPtr values cannot be specified in flags but are inherited from the corresponding memory access qualifiers associated with buffer.  If MemCopyHostPtr is specified in  the memory access qualifier values associated with buffer it does not imply any additional copies when the sub-buffer is created from buffer. If the MemHostWriteOnly, MemHostReadOnly or MemHostNoAccess values are not specified in flags, they are inherited from the corresponding memory access qualifiers associated with buffer.
        /// </param>
        /// <param name="buffer_create_type"> 
        /// Describes the type of buffer object to be created. The list of supported values for buffer_create_type and corresponding descriptor that buffer_create_info points to is described below. cl_buffer_create_typeDescriptionCL_BUFFER_CREATE_TYPE_REGION Create a buffer object that represents a specific region in buffer. buffer_create_info is a pointer to the following structure:  typedef struct _cl_buffer_region { size_t origin; size_t size; } cl_buffer_region;  (origin, size) defines the offset and size in bytes in buffer.  If buffer is created with MemUseHostPtr, the host_ptr associated with the buffer object returned is host_ptr + origin.  The buffer object returned references the data store allocated for buffer and points to a specific region given by (origin, size) in this data store. InvalidValue is returned in errcode_ret if the region specified by (origin, size) is out of bounds in buffer. InvalidBufferSize if size is 0. MisalignedSubBufferOffset is returned in errcode_ret if there are no devices in context associated with buffer for which the origin value is aligned to the DeviceMemBaseAddrAlign value.
        /// </param>
        /// <param name="buffer_create_info"> 
        /// Describes the type of buffer object to be created. The list of supported values for buffer_create_type and corresponding descriptor that buffer_create_info points to is described below. cl_buffer_create_typeDescriptionCL_BUFFER_CREATE_TYPE_REGION Create a buffer object that represents a specific region in buffer. buffer_create_info is a pointer to the following structure:  typedef struct _cl_buffer_region { size_t origin; size_t size; } cl_buffer_region;  (origin, size) defines the offset and size in bytes in buffer.  If buffer is created with MemUseHostPtr, the host_ptr associated with the buffer object returned is host_ptr + origin.  The buffer object returned references the data store allocated for buffer and points to a specific region given by (origin, size) in this data store. InvalidValue is returned in errcode_ret if the region specified by (origin, size) is out of bounds in buffer. InvalidBufferSize if size is 0. MisalignedSubBufferOffset is returned in errcode_ret if there are no devices in context associated with buffer for which the origin value is aligned to the DeviceMemBaseAddrAlign value.
        /// </param>
        /// <param name="errcode_ret"> 
        /// Describes the type of buffer object to be created. The list of supported values for buffer_create_type and corresponding descriptor that buffer_create_info points to is described below. cl_buffer_create_typeDescriptionCL_BUFFER_CREATE_TYPE_REGION Create a buffer object that represents a specific region in buffer. buffer_create_info is a pointer to the following structure:  typedef struct _cl_buffer_region { size_t origin; size_t size; } cl_buffer_region;  (origin, size) defines the offset and size in bytes in buffer.  If buffer is created with MemUseHostPtr, the host_ptr associated with the buffer object returned is host_ptr + origin.  The buffer object returned references the data store allocated for buffer and points to a specific region given by (origin, size) in this data store. InvalidValue is returned in errcode_ret if the region specified by (origin, size) is out of bounds in buffer. InvalidBufferSize if size is 0. MisalignedSubBufferOffset is returned in errcode_ret if there are no devices in context associated with buffer for which the origin value is aligned to the DeviceMemBaseAddrAlign value.
        /// </param>
        [AutoGenerated(Category = "", Version = "1.1", EntryPoint = "clCreateSubBuffer")]
        [CLSCompliant(false)]
        public static ComputeMemory CreateSubBuffer<T3>(ComputeMemory buffer, OpenTK.Compute.CL12.MemFlags flags, OpenTK.Compute.CL12.BufferCreateType buffer_create_type, [InAttribute, OutAttribute] T3[,,] buffer_create_info, [OutAttribute] Int32[] errcode_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.1]
        /// Creates a new buffer object (referred to as a sub-buffer object) from an existing buffer object.
        /// </summary>
        /// <param name="buffer"> 
        /// A valid object and cannot be a sub-buffer object.
        /// </param>
        /// <param name="flags"> 
        /// A bit-field that is used to specify allocation and usage information about the sub-buffer memory object being created and is described in the table below.  If the MemReadWrite, MemReadOnly or MemWriteOnly values are not specified in flags, they are inherited from the corresponding memory access qualifers associated with buffer. The MemUseHostPtr, MemAllocHostPtr and MemCopyHostPtr values cannot be specified in flags but are inherited from the corresponding memory access qualifiers associated with buffer.  If MemCopyHostPtr is specified in  the memory access qualifier values associated with buffer it does not imply any additional copies when the sub-buffer is created from buffer. If the MemHostWriteOnly, MemHostReadOnly or MemHostNoAccess values are not specified in flags, they are inherited from the corresponding memory access qualifiers associated with buffer.
        /// </param>
        /// <param name="buffer_create_type"> 
        /// Describes the type of buffer object to be created. The list of supported values for buffer_create_type and corresponding descriptor that buffer_create_info points to is described below. cl_buffer_create_typeDescriptionCL_BUFFER_CREATE_TYPE_REGION Create a buffer object that represents a specific region in buffer. buffer_create_info is a pointer to the following structure:  typedef struct _cl_buffer_region { size_t origin; size_t size; } cl_buffer_region;  (origin, size) defines the offset and size in bytes in buffer.  If buffer is created with MemUseHostPtr, the host_ptr associated with the buffer object returned is host_ptr + origin.  The buffer object returned references the data store allocated for buffer and points to a specific region given by (origin, size) in this data store. InvalidValue is returned in errcode_ret if the region specified by (origin, size) is out of bounds in buffer. InvalidBufferSize if size is 0. MisalignedSubBufferOffset is returned in errcode_ret if there are no devices in context associated with buffer for which the origin value is aligned to the DeviceMemBaseAddrAlign value.
        /// </param>
        /// <param name="buffer_create_info"> 
        /// Describes the type of buffer object to be created. The list of supported values for buffer_create_type and corresponding descriptor that buffer_create_info points to is described below. cl_buffer_create_typeDescriptionCL_BUFFER_CREATE_TYPE_REGION Create a buffer object that represents a specific region in buffer. buffer_create_info is a pointer to the following structure:  typedef struct _cl_buffer_region { size_t origin; size_t size; } cl_buffer_region;  (origin, size) defines the offset and size in bytes in buffer.  If buffer is created with MemUseHostPtr, the host_ptr associated with the buffer object returned is host_ptr + origin.  The buffer object returned references the data store allocated for buffer and points to a specific region given by (origin, size) in this data store. InvalidValue is returned in errcode_ret if the region specified by (origin, size) is out of bounds in buffer. InvalidBufferSize if size is 0. MisalignedSubBufferOffset is returned in errcode_ret if there are no devices in context associated with buffer for which the origin value is aligned to the DeviceMemBaseAddrAlign value.
        /// </param>
        /// <param name="errcode_ret"> 
        /// Describes the type of buffer object to be created. The list of supported values for buffer_create_type and corresponding descriptor that buffer_create_info points to is described below. cl_buffer_create_typeDescriptionCL_BUFFER_CREATE_TYPE_REGION Create a buffer object that represents a specific region in buffer. buffer_create_info is a pointer to the following structure:  typedef struct _cl_buffer_region { size_t origin; size_t size; } cl_buffer_region;  (origin, size) defines the offset and size in bytes in buffer.  If buffer is created with MemUseHostPtr, the host_ptr associated with the buffer object returned is host_ptr + origin.  The buffer object returned references the data store allocated for buffer and points to a specific region given by (origin, size) in this data store. InvalidValue is returned in errcode_ret if the region specified by (origin, size) is out of bounds in buffer. InvalidBufferSize if size is 0. MisalignedSubBufferOffset is returned in errcode_ret if there are no devices in context associated with buffer for which the origin value is aligned to the DeviceMemBaseAddrAlign value.
        /// </param>
        [AutoGenerated(Category = "", Version = "1.1", EntryPoint = "clCreateSubBuffer")]
        [CLSCompliant(false)]
        public static ComputeMemory CreateSubBuffer<T3>(ComputeMemory buffer, OpenTK.Compute.CL12.MemFlags flags, OpenTK.Compute.CL12.BufferCreateType buffer_create_type, [InAttribute, OutAttribute] T3[,,] buffer_create_info, [OutAttribute] out Int32 errcode_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.1]
        /// Creates a new buffer object (referred to as a sub-buffer object) from an existing buffer object.
        /// </summary>
        /// <param name="buffer"> 
        /// A valid object and cannot be a sub-buffer object.
        /// </param>
        /// <param name="flags"> 
        /// A bit-field that is used to specify allocation and usage information about the sub-buffer memory object being created and is described in the table below.  If the MemReadWrite, MemReadOnly or MemWriteOnly values are not specified in flags, they are inherited from the corresponding memory access qualifers associated with buffer. The MemUseHostPtr, MemAllocHostPtr and MemCopyHostPtr values cannot be specified in flags but are inherited from the corresponding memory access qualifiers associated with buffer.  If MemCopyHostPtr is specified in  the memory access qualifier values associated with buffer it does not imply any additional copies when the sub-buffer is created from buffer. If the MemHostWriteOnly, MemHostReadOnly or MemHostNoAccess values are not specified in flags, they are inherited from the corresponding memory access qualifiers associated with buffer.
        /// </param>
        /// <param name="buffer_create_type"> 
        /// Describes the type of buffer object to be created. The list of supported values for buffer_create_type and corresponding descriptor that buffer_create_info points to is described below. cl_buffer_create_typeDescriptionCL_BUFFER_CREATE_TYPE_REGION Create a buffer object that represents a specific region in buffer. buffer_create_info is a pointer to the following structure:  typedef struct _cl_buffer_region { size_t origin; size_t size; } cl_buffer_region;  (origin, size) defines the offset and size in bytes in buffer.  If buffer is created with MemUseHostPtr, the host_ptr associated with the buffer object returned is host_ptr + origin.  The buffer object returned references the data store allocated for buffer and points to a specific region given by (origin, size) in this data store. InvalidValue is returned in errcode_ret if the region specified by (origin, size) is out of bounds in buffer. InvalidBufferSize if size is 0. MisalignedSubBufferOffset is returned in errcode_ret if there are no devices in context associated with buffer for which the origin value is aligned to the DeviceMemBaseAddrAlign value.
        /// </param>
        /// <param name="buffer_create_info"> 
        /// Describes the type of buffer object to be created. The list of supported values for buffer_create_type and corresponding descriptor that buffer_create_info points to is described below. cl_buffer_create_typeDescriptionCL_BUFFER_CREATE_TYPE_REGION Create a buffer object that represents a specific region in buffer. buffer_create_info is a pointer to the following structure:  typedef struct _cl_buffer_region { size_t origin; size_t size; } cl_buffer_region;  (origin, size) defines the offset and size in bytes in buffer.  If buffer is created with MemUseHostPtr, the host_ptr associated with the buffer object returned is host_ptr + origin.  The buffer object returned references the data store allocated for buffer and points to a specific region given by (origin, size) in this data store. InvalidValue is returned in errcode_ret if the region specified by (origin, size) is out of bounds in buffer. InvalidBufferSize if size is 0. MisalignedSubBufferOffset is returned in errcode_ret if there are no devices in context associated with buffer for which the origin value is aligned to the DeviceMemBaseAddrAlign value.
        /// </param>
        /// <param name="errcode_ret"> 
        /// Describes the type of buffer object to be created. The list of supported values for buffer_create_type and corresponding descriptor that buffer_create_info points to is described below. cl_buffer_create_typeDescriptionCL_BUFFER_CREATE_TYPE_REGION Create a buffer object that represents a specific region in buffer. buffer_create_info is a pointer to the following structure:  typedef struct _cl_buffer_region { size_t origin; size_t size; } cl_buffer_region;  (origin, size) defines the offset and size in bytes in buffer.  If buffer is created with MemUseHostPtr, the host_ptr associated with the buffer object returned is host_ptr + origin.  The buffer object returned references the data store allocated for buffer and points to a specific region given by (origin, size) in this data store. InvalidValue is returned in errcode_ret if the region specified by (origin, size) is out of bounds in buffer. InvalidBufferSize if size is 0. MisalignedSubBufferOffset is returned in errcode_ret if there are no devices in context associated with buffer for which the origin value is aligned to the DeviceMemBaseAddrAlign value.
        /// </param>
        [AutoGenerated(Category = "", Version = "1.1", EntryPoint = "clCreateSubBuffer")]
        [CLSCompliant(false)]
        public static unsafe ComputeMemory CreateSubBuffer<T3>(ComputeMemory buffer, OpenTK.Compute.CL12.MemFlags flags, OpenTK.Compute.CL12.BufferCreateType buffer_create_type, [InAttribute, OutAttribute] T3[,,] buffer_create_info, [OutAttribute] Int32* errcode_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.1]
        /// Creates a new buffer object (referred to as a sub-buffer object) from an existing buffer object.
        /// </summary>
        /// <param name="buffer"> 
        /// A valid object and cannot be a sub-buffer object.
        /// </param>
        /// <param name="flags"> 
        /// A bit-field that is used to specify allocation and usage information about the sub-buffer memory object being created and is described in the table below.  If the MemReadWrite, MemReadOnly or MemWriteOnly values are not specified in flags, they are inherited from the corresponding memory access qualifers associated with buffer. The MemUseHostPtr, MemAllocHostPtr and MemCopyHostPtr values cannot be specified in flags but are inherited from the corresponding memory access qualifiers associated with buffer.  If MemCopyHostPtr is specified in  the memory access qualifier values associated with buffer it does not imply any additional copies when the sub-buffer is created from buffer. If the MemHostWriteOnly, MemHostReadOnly or MemHostNoAccess values are not specified in flags, they are inherited from the corresponding memory access qualifiers associated with buffer.
        /// </param>
        /// <param name="buffer_create_type"> 
        /// Describes the type of buffer object to be created. The list of supported values for buffer_create_type and corresponding descriptor that buffer_create_info points to is described below. cl_buffer_create_typeDescriptionCL_BUFFER_CREATE_TYPE_REGION Create a buffer object that represents a specific region in buffer. buffer_create_info is a pointer to the following structure:  typedef struct _cl_buffer_region { size_t origin; size_t size; } cl_buffer_region;  (origin, size) defines the offset and size in bytes in buffer.  If buffer is created with MemUseHostPtr, the host_ptr associated with the buffer object returned is host_ptr + origin.  The buffer object returned references the data store allocated for buffer and points to a specific region given by (origin, size) in this data store. InvalidValue is returned in errcode_ret if the region specified by (origin, size) is out of bounds in buffer. InvalidBufferSize if size is 0. MisalignedSubBufferOffset is returned in errcode_ret if there are no devices in context associated with buffer for which the origin value is aligned to the DeviceMemBaseAddrAlign value.
        /// </param>
        /// <param name="buffer_create_info"> 
        /// Describes the type of buffer object to be created. The list of supported values for buffer_create_type and corresponding descriptor that buffer_create_info points to is described below. cl_buffer_create_typeDescriptionCL_BUFFER_CREATE_TYPE_REGION Create a buffer object that represents a specific region in buffer. buffer_create_info is a pointer to the following structure:  typedef struct _cl_buffer_region { size_t origin; size_t size; } cl_buffer_region;  (origin, size) defines the offset and size in bytes in buffer.  If buffer is created with MemUseHostPtr, the host_ptr associated with the buffer object returned is host_ptr + origin.  The buffer object returned references the data store allocated for buffer and points to a specific region given by (origin, size) in this data store. InvalidValue is returned in errcode_ret if the region specified by (origin, size) is out of bounds in buffer. InvalidBufferSize if size is 0. MisalignedSubBufferOffset is returned in errcode_ret if there are no devices in context associated with buffer for which the origin value is aligned to the DeviceMemBaseAddrAlign value.
        /// </param>
        /// <param name="errcode_ret"> 
        /// Describes the type of buffer object to be created. The list of supported values for buffer_create_type and corresponding descriptor that buffer_create_info points to is described below. cl_buffer_create_typeDescriptionCL_BUFFER_CREATE_TYPE_REGION Create a buffer object that represents a specific region in buffer. buffer_create_info is a pointer to the following structure:  typedef struct _cl_buffer_region { size_t origin; size_t size; } cl_buffer_region;  (origin, size) defines the offset and size in bytes in buffer.  If buffer is created with MemUseHostPtr, the host_ptr associated with the buffer object returned is host_ptr + origin.  The buffer object returned references the data store allocated for buffer and points to a specific region given by (origin, size) in this data store. InvalidValue is returned in errcode_ret if the region specified by (origin, size) is out of bounds in buffer. InvalidBufferSize if size is 0. MisalignedSubBufferOffset is returned in errcode_ret if there are no devices in context associated with buffer for which the origin value is aligned to the DeviceMemBaseAddrAlign value.
        /// </param>
        [AutoGenerated(Category = "", Version = "1.1", EntryPoint = "clCreateSubBuffer")]
        [CLSCompliant(false)]
        public static ComputeMemory CreateSubBuffer<T3>(ComputeMemory buffer, OpenTK.Compute.CL12.MemFlags flags, OpenTK.Compute.CL12.BufferCreateType buffer_create_type, [InAttribute, OutAttribute] ref T3 buffer_create_info, [OutAttribute] Int32[] errcode_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.1]
        /// Creates a new buffer object (referred to as a sub-buffer object) from an existing buffer object.
        /// </summary>
        /// <param name="buffer"> 
        /// A valid object and cannot be a sub-buffer object.
        /// </param>
        /// <param name="flags"> 
        /// A bit-field that is used to specify allocation and usage information about the sub-buffer memory object being created and is described in the table below.  If the MemReadWrite, MemReadOnly or MemWriteOnly values are not specified in flags, they are inherited from the corresponding memory access qualifers associated with buffer. The MemUseHostPtr, MemAllocHostPtr and MemCopyHostPtr values cannot be specified in flags but are inherited from the corresponding memory access qualifiers associated with buffer.  If MemCopyHostPtr is specified in  the memory access qualifier values associated with buffer it does not imply any additional copies when the sub-buffer is created from buffer. If the MemHostWriteOnly, MemHostReadOnly or MemHostNoAccess values are not specified in flags, they are inherited from the corresponding memory access qualifiers associated with buffer.
        /// </param>
        /// <param name="buffer_create_type"> 
        /// Describes the type of buffer object to be created. The list of supported values for buffer_create_type and corresponding descriptor that buffer_create_info points to is described below. cl_buffer_create_typeDescriptionCL_BUFFER_CREATE_TYPE_REGION Create a buffer object that represents a specific region in buffer. buffer_create_info is a pointer to the following structure:  typedef struct _cl_buffer_region { size_t origin; size_t size; } cl_buffer_region;  (origin, size) defines the offset and size in bytes in buffer.  If buffer is created with MemUseHostPtr, the host_ptr associated with the buffer object returned is host_ptr + origin.  The buffer object returned references the data store allocated for buffer and points to a specific region given by (origin, size) in this data store. InvalidValue is returned in errcode_ret if the region specified by (origin, size) is out of bounds in buffer. InvalidBufferSize if size is 0. MisalignedSubBufferOffset is returned in errcode_ret if there are no devices in context associated with buffer for which the origin value is aligned to the DeviceMemBaseAddrAlign value.
        /// </param>
        /// <param name="buffer_create_info"> 
        /// Describes the type of buffer object to be created. The list of supported values for buffer_create_type and corresponding descriptor that buffer_create_info points to is described below. cl_buffer_create_typeDescriptionCL_BUFFER_CREATE_TYPE_REGION Create a buffer object that represents a specific region in buffer. buffer_create_info is a pointer to the following structure:  typedef struct _cl_buffer_region { size_t origin; size_t size; } cl_buffer_region;  (origin, size) defines the offset and size in bytes in buffer.  If buffer is created with MemUseHostPtr, the host_ptr associated with the buffer object returned is host_ptr + origin.  The buffer object returned references the data store allocated for buffer and points to a specific region given by (origin, size) in this data store. InvalidValue is returned in errcode_ret if the region specified by (origin, size) is out of bounds in buffer. InvalidBufferSize if size is 0. MisalignedSubBufferOffset is returned in errcode_ret if there are no devices in context associated with buffer for which the origin value is aligned to the DeviceMemBaseAddrAlign value.
        /// </param>
        /// <param name="errcode_ret"> 
        /// Describes the type of buffer object to be created. The list of supported values for buffer_create_type and corresponding descriptor that buffer_create_info points to is described below. cl_buffer_create_typeDescriptionCL_BUFFER_CREATE_TYPE_REGION Create a buffer object that represents a specific region in buffer. buffer_create_info is a pointer to the following structure:  typedef struct _cl_buffer_region { size_t origin; size_t size; } cl_buffer_region;  (origin, size) defines the offset and size in bytes in buffer.  If buffer is created with MemUseHostPtr, the host_ptr associated with the buffer object returned is host_ptr + origin.  The buffer object returned references the data store allocated for buffer and points to a specific region given by (origin, size) in this data store. InvalidValue is returned in errcode_ret if the region specified by (origin, size) is out of bounds in buffer. InvalidBufferSize if size is 0. MisalignedSubBufferOffset is returned in errcode_ret if there are no devices in context associated with buffer for which the origin value is aligned to the DeviceMemBaseAddrAlign value.
        /// </param>
        [AutoGenerated(Category = "", Version = "1.1", EntryPoint = "clCreateSubBuffer")]
        [CLSCompliant(false)]
        public static ComputeMemory CreateSubBuffer<T3>(ComputeMemory buffer, OpenTK.Compute.CL12.MemFlags flags, OpenTK.Compute.CL12.BufferCreateType buffer_create_type, [InAttribute, OutAttribute] ref T3 buffer_create_info, [OutAttribute] out Int32 errcode_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.1]
        /// Creates a new buffer object (referred to as a sub-buffer object) from an existing buffer object.
        /// </summary>
        /// <param name="buffer"> 
        /// A valid object and cannot be a sub-buffer object.
        /// </param>
        /// <param name="flags"> 
        /// A bit-field that is used to specify allocation and usage information about the sub-buffer memory object being created and is described in the table below.  If the MemReadWrite, MemReadOnly or MemWriteOnly values are not specified in flags, they are inherited from the corresponding memory access qualifers associated with buffer. The MemUseHostPtr, MemAllocHostPtr and MemCopyHostPtr values cannot be specified in flags but are inherited from the corresponding memory access qualifiers associated with buffer.  If MemCopyHostPtr is specified in  the memory access qualifier values associated with buffer it does not imply any additional copies when the sub-buffer is created from buffer. If the MemHostWriteOnly, MemHostReadOnly or MemHostNoAccess values are not specified in flags, they are inherited from the corresponding memory access qualifiers associated with buffer.
        /// </param>
        /// <param name="buffer_create_type"> 
        /// Describes the type of buffer object to be created. The list of supported values for buffer_create_type and corresponding descriptor that buffer_create_info points to is described below. cl_buffer_create_typeDescriptionCL_BUFFER_CREATE_TYPE_REGION Create a buffer object that represents a specific region in buffer. buffer_create_info is a pointer to the following structure:  typedef struct _cl_buffer_region { size_t origin; size_t size; } cl_buffer_region;  (origin, size) defines the offset and size in bytes in buffer.  If buffer is created with MemUseHostPtr, the host_ptr associated with the buffer object returned is host_ptr + origin.  The buffer object returned references the data store allocated for buffer and points to a specific region given by (origin, size) in this data store. InvalidValue is returned in errcode_ret if the region specified by (origin, size) is out of bounds in buffer. InvalidBufferSize if size is 0. MisalignedSubBufferOffset is returned in errcode_ret if there are no devices in context associated with buffer for which the origin value is aligned to the DeviceMemBaseAddrAlign value.
        /// </param>
        /// <param name="buffer_create_info"> 
        /// Describes the type of buffer object to be created. The list of supported values for buffer_create_type and corresponding descriptor that buffer_create_info points to is described below. cl_buffer_create_typeDescriptionCL_BUFFER_CREATE_TYPE_REGION Create a buffer object that represents a specific region in buffer. buffer_create_info is a pointer to the following structure:  typedef struct _cl_buffer_region { size_t origin; size_t size; } cl_buffer_region;  (origin, size) defines the offset and size in bytes in buffer.  If buffer is created with MemUseHostPtr, the host_ptr associated with the buffer object returned is host_ptr + origin.  The buffer object returned references the data store allocated for buffer and points to a specific region given by (origin, size) in this data store. InvalidValue is returned in errcode_ret if the region specified by (origin, size) is out of bounds in buffer. InvalidBufferSize if size is 0. MisalignedSubBufferOffset is returned in errcode_ret if there are no devices in context associated with buffer for which the origin value is aligned to the DeviceMemBaseAddrAlign value.
        /// </param>
        /// <param name="errcode_ret"> 
        /// Describes the type of buffer object to be created. The list of supported values for buffer_create_type and corresponding descriptor that buffer_create_info points to is described below. cl_buffer_create_typeDescriptionCL_BUFFER_CREATE_TYPE_REGION Create a buffer object that represents a specific region in buffer. buffer_create_info is a pointer to the following structure:  typedef struct _cl_buffer_region { size_t origin; size_t size; } cl_buffer_region;  (origin, size) defines the offset and size in bytes in buffer.  If buffer is created with MemUseHostPtr, the host_ptr associated with the buffer object returned is host_ptr + origin.  The buffer object returned references the data store allocated for buffer and points to a specific region given by (origin, size) in this data store. InvalidValue is returned in errcode_ret if the region specified by (origin, size) is out of bounds in buffer. InvalidBufferSize if size is 0. MisalignedSubBufferOffset is returned in errcode_ret if there are no devices in context associated with buffer for which the origin value is aligned to the DeviceMemBaseAddrAlign value.
        /// </param>
        [AutoGenerated(Category = "", Version = "1.1", EntryPoint = "clCreateSubBuffer")]
        [CLSCompliant(false)]
        public static unsafe ComputeMemory CreateSubBuffer<T3>(ComputeMemory buffer, OpenTK.Compute.CL12.MemFlags flags, OpenTK.Compute.CL12.BufferCreateType buffer_create_type, [InAttribute, OutAttribute] ref T3 buffer_create_info, [OutAttribute] Int32* errcode_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.2]
        /// Creates an array of sub-devices that each reference a non-intersecting set of compute units within in_device.
        /// </summary>
        /// <param name="in_device"> 
        /// The device to be partitioned.
        /// </param>
        /// <param name="properties"> 
        /// Specifies how in_device is to be partition described by a partition name and its corresponding value. Each partition name is immediately followed by the corresponding desired value. The list is terminated with 0. The list of supported partitioning schemes is described in the table below. Only one of the listed partitioning schemes can be specified in properties. cl_device_partition_ property enum (Partition value)DescriptionCL_DEVICE_PARTITION_EQUALLY (unsigned int) Split the aggregate device into as many smaller aggregate devices as can be created, each containing n compute units.  The value n is passed as the value accompanying this property. If n does not divide evenly into DevicePartitionMaxComputeUnits, then the remaining compute units are not used. CL_DEVICE_PARTITION_BY_COUNTS (unsigned int) This property is followed by a DevicePartitionByCountsListEnd terminated list of compute unit counts. For each nonzero count m in the list, a sub-device is created with m compute units in it. DevicePartitionByCountsListEnd is defined to be 0.  The number of non-zero count entries in the list may not exceed DevicePartitionMaxSubDevices.  The total number of compute units specified may not exceed DevicePartitionMaxComputeUnits. CL_DEVICE_PARTITION_BY_- AFFINITY_DOMAIN (cl_device_affinity_domain) Split the device into smaller aggregate devices containing one or more compute units that all share part of a cache hierarchy. The value accompanying this property may be drawn from the following list: DeviceAffinityDomainNuma - Split the device into sub-devices comprised of compute units that share a NUMA node. DeviceAffinityDomainL4Cache - Split the device into sub-devices comprised of compute units that share a level 4 data cache. DeviceAffinityDomainL3Cache - Split the device into sub-devices comprised of compute units that share a level 3 data cache. DeviceAffinityDomainL2Cache - Split the device into sub-devices comprised of compute units that share a level 2 data cache. DeviceAffinityDomainL1Cache - Split the device into sub-devices comprised of compute units that share a level 1 data cache. DeviceAffinityDomainNextPartitionable - Split the device along the next partitionable affinity domain. The implementation shall find the first level along which the device or sub-device may be further subdivided in the order NUMA, L4, L3, L2, L1, and partition the device into sub-devices comprised of compute units that share memory subsystems at this level.  The user may determine what happened by calling clGetDeviceInfo (DevicePartitionType) on the sub-devices.
        /// </param>
        /// <param name="num_devices"> 
        /// Size of memory pointed to by out_devices specified as the number of cl_device_id entries.
        /// </param>
        /// <param name="out_devices"> 
        /// The buffer where the OpenCL sub-devices will be returned.  If out_devices is NULL, this argument is ignored. If out_devices is not NULL, num_devices must be greater than or equal to the number of sub-devices that device may be partitioned into according to the partitioning scheme specified in properties.
        /// </param>
        /// <param name="num_devices_ret">[length: 1] 
        /// Returns the number of sub-devices that device may be partitioned into according to the partitioning scheme specified in properties.  If num_devices_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "", Version = "1.2", EntryPoint = "clCreateSubDevices")]
        [CLSCompliant(false)]
        public static ErrorCode CreateSubDevices(ComputeDevice in_device, OpenTK.Compute.CL12.DevicePartitionProperty[] properties, Int32 num_devices, [OutAttribute] ComputeDevice[] out_devices, [OutAttribute] out Int32 num_devices_ret) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.2]
        /// Creates an array of sub-devices that each reference a non-intersecting set of compute units within in_device.
        /// </summary>
        /// <param name="in_device"> 
        /// The device to be partitioned.
        /// </param>
        /// <param name="properties"> 
        /// Specifies how in_device is to be partition described by a partition name and its corresponding value. Each partition name is immediately followed by the corresponding desired value. The list is terminated with 0. The list of supported partitioning schemes is described in the table below. Only one of the listed partitioning schemes can be specified in properties. cl_device_partition_ property enum (Partition value)DescriptionCL_DEVICE_PARTITION_EQUALLY (unsigned int) Split the aggregate device into as many smaller aggregate devices as can be created, each containing n compute units.  The value n is passed as the value accompanying this property. If n does not divide evenly into DevicePartitionMaxComputeUnits, then the remaining compute units are not used. CL_DEVICE_PARTITION_BY_COUNTS (unsigned int) This property is followed by a DevicePartitionByCountsListEnd terminated list of compute unit counts. For each nonzero count m in the list, a sub-device is created with m compute units in it. DevicePartitionByCountsListEnd is defined to be 0.  The number of non-zero count entries in the list may not exceed DevicePartitionMaxSubDevices.  The total number of compute units specified may not exceed DevicePartitionMaxComputeUnits. CL_DEVICE_PARTITION_BY_- AFFINITY_DOMAIN (cl_device_affinity_domain) Split the device into smaller aggregate devices containing one or more compute units that all share part of a cache hierarchy. The value accompanying this property may be drawn from the following list: DeviceAffinityDomainNuma - Split the device into sub-devices comprised of compute units that share a NUMA node. DeviceAffinityDomainL4Cache - Split the device into sub-devices comprised of compute units that share a level 4 data cache. DeviceAffinityDomainL3Cache - Split the device into sub-devices comprised of compute units that share a level 3 data cache. DeviceAffinityDomainL2Cache - Split the device into sub-devices comprised of compute units that share a level 2 data cache. DeviceAffinityDomainL1Cache - Split the device into sub-devices comprised of compute units that share a level 1 data cache. DeviceAffinityDomainNextPartitionable - Split the device along the next partitionable affinity domain. The implementation shall find the first level along which the device or sub-device may be further subdivided in the order NUMA, L4, L3, L2, L1, and partition the device into sub-devices comprised of compute units that share memory subsystems at this level.  The user may determine what happened by calling clGetDeviceInfo (DevicePartitionType) on the sub-devices.
        /// </param>
        /// <param name="num_devices"> 
        /// Size of memory pointed to by out_devices specified as the number of cl_device_id entries.
        /// </param>
        /// <param name="out_devices"> 
        /// The buffer where the OpenCL sub-devices will be returned.  If out_devices is NULL, this argument is ignored. If out_devices is not NULL, num_devices must be greater than or equal to the number of sub-devices that device may be partitioned into according to the partitioning scheme specified in properties.
        /// </param>
        /// <param name="num_devices_ret">[length: 1] 
        /// Returns the number of sub-devices that device may be partitioned into according to the partitioning scheme specified in properties.  If num_devices_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "", Version = "1.2", EntryPoint = "clCreateSubDevices")]
        [CLSCompliant(false)]
        public static ErrorCode CreateSubDevices(ComputeDevice in_device, ref OpenTK.Compute.CL12.DevicePartitionProperty properties, Int32 num_devices, [OutAttribute] out ComputeDevice out_devices, [OutAttribute] out Int32 num_devices_ret) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.2]
        /// Creates an array of sub-devices that each reference a non-intersecting set of compute units within in_device.
        /// </summary>
        /// <param name="in_device"> 
        /// The device to be partitioned.
        /// </param>
        /// <param name="properties"> 
        /// Specifies how in_device is to be partition described by a partition name and its corresponding value. Each partition name is immediately followed by the corresponding desired value. The list is terminated with 0. The list of supported partitioning schemes is described in the table below. Only one of the listed partitioning schemes can be specified in properties. cl_device_partition_ property enum (Partition value)DescriptionCL_DEVICE_PARTITION_EQUALLY (unsigned int) Split the aggregate device into as many smaller aggregate devices as can be created, each containing n compute units.  The value n is passed as the value accompanying this property. If n does not divide evenly into DevicePartitionMaxComputeUnits, then the remaining compute units are not used. CL_DEVICE_PARTITION_BY_COUNTS (unsigned int) This property is followed by a DevicePartitionByCountsListEnd terminated list of compute unit counts. For each nonzero count m in the list, a sub-device is created with m compute units in it. DevicePartitionByCountsListEnd is defined to be 0.  The number of non-zero count entries in the list may not exceed DevicePartitionMaxSubDevices.  The total number of compute units specified may not exceed DevicePartitionMaxComputeUnits. CL_DEVICE_PARTITION_BY_- AFFINITY_DOMAIN (cl_device_affinity_domain) Split the device into smaller aggregate devices containing one or more compute units that all share part of a cache hierarchy. The value accompanying this property may be drawn from the following list: DeviceAffinityDomainNuma - Split the device into sub-devices comprised of compute units that share a NUMA node. DeviceAffinityDomainL4Cache - Split the device into sub-devices comprised of compute units that share a level 4 data cache. DeviceAffinityDomainL3Cache - Split the device into sub-devices comprised of compute units that share a level 3 data cache. DeviceAffinityDomainL2Cache - Split the device into sub-devices comprised of compute units that share a level 2 data cache. DeviceAffinityDomainL1Cache - Split the device into sub-devices comprised of compute units that share a level 1 data cache. DeviceAffinityDomainNextPartitionable - Split the device along the next partitionable affinity domain. The implementation shall find the first level along which the device or sub-device may be further subdivided in the order NUMA, L4, L3, L2, L1, and partition the device into sub-devices comprised of compute units that share memory subsystems at this level.  The user may determine what happened by calling clGetDeviceInfo (DevicePartitionType) on the sub-devices.
        /// </param>
        /// <param name="num_devices"> 
        /// Size of memory pointed to by out_devices specified as the number of cl_device_id entries.
        /// </param>
        /// <param name="out_devices"> 
        /// The buffer where the OpenCL sub-devices will be returned.  If out_devices is NULL, this argument is ignored. If out_devices is not NULL, num_devices must be greater than or equal to the number of sub-devices that device may be partitioned into according to the partitioning scheme specified in properties.
        /// </param>
        /// <param name="num_devices_ret">[length: 1] 
        /// Returns the number of sub-devices that device may be partitioned into according to the partitioning scheme specified in properties.  If num_devices_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "", Version = "1.2", EntryPoint = "clCreateSubDevices")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode CreateSubDevices(ComputeDevice in_device, OpenTK.Compute.CL12.DevicePartitionProperty* properties, Int32 num_devices, [OutAttribute] ComputeDevice* out_devices, [OutAttribute] Int32* num_devices_ret) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.1]
        /// Creates a user event object.
        /// </summary>
        /// <param name="context"> 
        /// A valid OpenCL context used to create the user event object.
        /// </param>
        /// <param name="errcode_ret"> 
        /// Returns an appropriate error code. If errcode_ret is NULL, no error code is returned.
        /// </param>
        [AutoGenerated(Category = "", Version = "1.1", EntryPoint = "clCreateUserEvent")]
        [CLSCompliant(false)]
        public static ComputeEvent CreateUserEvent(ComputeContext context, [OutAttribute] Int32[] errcode_ret) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.1]
        /// Creates a user event object.
        /// </summary>
        /// <param name="context"> 
        /// A valid OpenCL context used to create the user event object.
        /// </param>
        /// <param name="errcode_ret"> 
        /// Returns an appropriate error code. If errcode_ret is NULL, no error code is returned.
        /// </param>
        [AutoGenerated(Category = "", Version = "1.1", EntryPoint = "clCreateUserEvent")]
        [CLSCompliant(false)]
        public static ComputeEvent CreateUserEvent(ComputeContext context, [OutAttribute] out Int32 errcode_ret) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.1]
        /// Creates a user event object.
        /// </summary>
        /// <param name="context"> 
        /// A valid OpenCL context used to create the user event object.
        /// </param>
        /// <param name="errcode_ret"> 
        /// Returns an appropriate error code. If errcode_ret is NULL, no error code is returned.
        /// </param>
        [AutoGenerated(Category = "", Version = "1.1", EntryPoint = "clCreateUserEvent")]
        [CLSCompliant(false)]
        public static unsafe ComputeEvent CreateUserEvent(ComputeContext context, [OutAttribute] Int32* errcode_ret) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]</summary>
        /// <param name="command_queue"></param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clEnqueueBarrier")]
        public static ErrorCode EnqueueBarrier(CommandQueue command_queue) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.2]
        /// A synchronization point that enqueues a barrier operation.
        /// </summary>
        /// <param name="command_queue"> 
        /// A valid command queue.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed.  If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.  If event_wait_list is NULL, then this particular command waits until all previous enqueued commands to command_queue have completed.
        /// </param>
        /// <param name="event_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed.  If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.  If event_wait_list is NULL, then this particular command waits until all previous enqueued commands to command_queue have completed.
        /// </param>
        /// <param name="event">[length: 1] 
        /// Returns an event object that identifies this particular command. Event objects are unique and can be used to identify this barrier command later on. event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete.  If the event_wait_list and the event arguments are not NULL, the event argument should not refer to an element of the event_wait_list array.
        /// </param>
        [AutoGenerated(Category = "", Version = "1.2", EntryPoint = "clEnqueueBarrierWithWaitList")]
        [CLSCompliant(false)]
        public static ErrorCode EnqueueBarrierWithWaitList(CommandQueue command_queue, Int32 num_events_in_wait_list, ComputeEvent[] event_wait_list, [OutAttribute] out ComputeEvent @event) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.2]
        /// A synchronization point that enqueues a barrier operation.
        /// </summary>
        /// <param name="command_queue"> 
        /// A valid command queue.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed.  If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.  If event_wait_list is NULL, then this particular command waits until all previous enqueued commands to command_queue have completed.
        /// </param>
        /// <param name="event_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed.  If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.  If event_wait_list is NULL, then this particular command waits until all previous enqueued commands to command_queue have completed.
        /// </param>
        /// <param name="event">[length: 1] 
        /// Returns an event object that identifies this particular command. Event objects are unique and can be used to identify this barrier command later on. event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete.  If the event_wait_list and the event arguments are not NULL, the event argument should not refer to an element of the event_wait_list array.
        /// </param>
        [AutoGenerated(Category = "", Version = "1.2", EntryPoint = "clEnqueueBarrierWithWaitList")]
        [CLSCompliant(false)]
        public static ErrorCode EnqueueBarrierWithWaitList(CommandQueue command_queue, Int32 num_events_in_wait_list, ref ComputeEvent event_wait_list, [OutAttribute] out ComputeEvent @event) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.2]
        /// A synchronization point that enqueues a barrier operation.
        /// </summary>
        /// <param name="command_queue"> 
        /// A valid command queue.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed.  If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.  If event_wait_list is NULL, then this particular command waits until all previous enqueued commands to command_queue have completed.
        /// </param>
        /// <param name="event_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed.  If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.  If event_wait_list is NULL, then this particular command waits until all previous enqueued commands to command_queue have completed.
        /// </param>
        /// <param name="event">[length: 1] 
        /// Returns an event object that identifies this particular command. Event objects are unique and can be used to identify this barrier command later on. event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete.  If the event_wait_list and the event arguments are not NULL, the event argument should not refer to an element of the event_wait_list array.
        /// </param>
        [AutoGenerated(Category = "", Version = "1.2", EntryPoint = "clEnqueueBarrierWithWaitList")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode EnqueueBarrierWithWaitList(CommandQueue command_queue, Int32 num_events_in_wait_list, ComputeEvent* event_wait_list, [OutAttribute] ComputeEvent* @event) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Enqueues a command to copy from one buffer object to another.
        /// </summary>
        /// <param name="command_queue"> 
        /// The command-queue in which the copy command will be queued. The OpenCL context associated with command_queue, src_buffer, and dst_buffer must be the same.
        /// </param>
        /// <param name="src_buffer"> 
        /// The offset where to begin copying data from src_buffer.
        /// </param>
        /// <param name="dst_buffer"> 
        /// The offset where to begin copying data into dst_buffer.
        /// </param>
        /// <param name="src_offset"> 
        /// The offset where to begin copying data from src_buffer.
        /// </param>
        /// <param name="dst_offset"> 
        /// The offset where to begin copying data into dst_buffer.
        /// </param>
        /// <param name="cb"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event"> 
        /// Returns an event object that identifies this particular copy command and can be used to query or queue a wait for this particular command to complete.  event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete. clEnqueueBarrierWithWaitList can be used instead.  If the event_wait_list and the event arguments are not NULL, the event argument should not refer to an element of the event_wait_list array.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clEnqueueCopyBuffer")]
        [CLSCompliant(false)]
        public static ErrorCode EnqueueCopyBuffer(CommandQueue command_queue, ComputeMemory src_buffer, ComputeMemory dst_buffer, IntPtr src_offset, IntPtr dst_offset, IntPtr cb, Int32 num_events_in_wait_list, ComputeEvent[] event_wait_list, [OutAttribute] out ComputeEvent @event) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Enqueues a command to copy from one buffer object to another.
        /// </summary>
        /// <param name="command_queue"> 
        /// The command-queue in which the copy command will be queued. The OpenCL context associated with command_queue, src_buffer, and dst_buffer must be the same.
        /// </param>
        /// <param name="src_buffer"> 
        /// The offset where to begin copying data from src_buffer.
        /// </param>
        /// <param name="dst_buffer"> 
        /// The offset where to begin copying data into dst_buffer.
        /// </param>
        /// <param name="src_offset"> 
        /// The offset where to begin copying data from src_buffer.
        /// </param>
        /// <param name="dst_offset"> 
        /// The offset where to begin copying data into dst_buffer.
        /// </param>
        /// <param name="cb"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event"> 
        /// Returns an event object that identifies this particular copy command and can be used to query or queue a wait for this particular command to complete.  event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete. clEnqueueBarrierWithWaitList can be used instead.  If the event_wait_list and the event arguments are not NULL, the event argument should not refer to an element of the event_wait_list array.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clEnqueueCopyBuffer")]
        [CLSCompliant(false)]
        public static ErrorCode EnqueueCopyBuffer(CommandQueue command_queue, ComputeMemory src_buffer, ComputeMemory dst_buffer, IntPtr src_offset, IntPtr dst_offset, IntPtr cb, Int32 num_events_in_wait_list, ref ComputeEvent event_wait_list, [OutAttribute] out ComputeEvent @event) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Enqueues a command to copy from one buffer object to another.
        /// </summary>
        /// <param name="command_queue"> 
        /// The command-queue in which the copy command will be queued. The OpenCL context associated with command_queue, src_buffer, and dst_buffer must be the same.
        /// </param>
        /// <param name="src_buffer"> 
        /// The offset where to begin copying data from src_buffer.
        /// </param>
        /// <param name="dst_buffer"> 
        /// The offset where to begin copying data into dst_buffer.
        /// </param>
        /// <param name="src_offset"> 
        /// The offset where to begin copying data from src_buffer.
        /// </param>
        /// <param name="dst_offset"> 
        /// The offset where to begin copying data into dst_buffer.
        /// </param>
        /// <param name="cb"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event"> 
        /// Returns an event object that identifies this particular copy command and can be used to query or queue a wait for this particular command to complete.  event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete. clEnqueueBarrierWithWaitList can be used instead.  If the event_wait_list and the event arguments are not NULL, the event argument should not refer to an element of the event_wait_list array.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clEnqueueCopyBuffer")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode EnqueueCopyBuffer(CommandQueue command_queue, ComputeMemory src_buffer, ComputeMemory dst_buffer, IntPtr src_offset, IntPtr dst_offset, IntPtr cb, Int32 num_events_in_wait_list, ComputeEvent* event_wait_list, [OutAttribute] ComputeEvent* @event) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.1]
        /// Enqueues a command to copy a rectangular region from a buffer object to another buffer object.
        /// </summary>
        /// <param name="command_queue"> 
        /// The command-queue in which the copy command will be queued. The OpenCL context associated with command_queue, src_buffer, and dst_buffer must be the same.
        /// </param>
        /// <param name="src_buffer"> 
        /// The (x, y, z) offset in the memory region associated with src_buffer. For a 2D rectangle region, the z value given by src_origin[2] should be 0. The offset in bytes is computed as src_origin[2] * src_slice_pitch + src_origin[1] * src_row_pitch + src_origin[0].
        /// </param>
        /// <param name="dst_buffer"> 
        /// The (x, y, z) offset in the memory region associated with dst_buffer. For a 2D rectangle region, the z value given by dst_origin[2] should be 0. The offset in bytes is computed as dst_origin[2] * dst_slice_pitch + dst_origin[1] * dst_row_pitch + dst_origin[0].
        /// </param>
        /// <param name="src_origin">[length: 3] 
        /// The (x, y, z) offset in the memory region associated with src_buffer. For a 2D rectangle region, the z value given by src_origin[2] should be 0. The offset in bytes is computed as src_origin[2] * src_slice_pitch + src_origin[1] * src_row_pitch + src_origin[0].
        /// </param>
        /// <param name="dst_origin">[length: 3] 
        /// The (x, y, z) offset in the memory region associated with dst_buffer. For a 2D rectangle region, the z value given by dst_origin[2] should be 0. The offset in bytes is computed as dst_origin[2] * dst_slice_pitch + dst_origin[1] * dst_row_pitch + dst_origin[0].
        /// </param>
        /// <param name="region">[length: 3] 
        /// The (width, height, depth) in bytes of the 2D or 3D rectangle being copied. For a 2D rectangle, the depth value given by region[2] should be 1.
        /// </param>
        /// <param name="src_row_pitch"> 
        /// The length of each row in bytes to be used for the memory region associated with src_buffer. If src_row_pitch is 0, src_row_pitch is computed as region[0].
        /// </param>
        /// <param name="src_slice_pitch"> 
        /// The length of each 2D slice in bytes to be used for the memory region associated with src_buffer. If src_slice_pitch is 0, src_slice_pitch is computed as region[1] * src_row_pitch.
        /// </param>
        /// <param name="dst_row_pitch"> 
        /// The length of each row in bytes to be used for the memory region associated with dst_buffer. If dst_row_pitch is 0, dst_row_pitch is computed as region[0].
        /// </param>
        /// <param name="dst_slice_pitch"> 
        /// The length of each 2D slice in bytes to be used for the memory region associated with dst_buffer. If dst_slice_pitch is 0, dst_slice_pitch is computed as region[1] * dst_row_pitch.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event"> 
        /// Returns an event object that identifies this particular copy command and can be used to query or queue a wait for this particular command to complete. event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete. clEnqueueBarrierWithWaitList can be used instead.  If the event_wait_list and the event arguments are not NULL, the event argument should not refer to an element of the event_wait_list array.
        /// </param>
        [AutoGenerated(Category = "", Version = "1.1", EntryPoint = "clEnqueueCopyBufferRect")]
        [CLSCompliant(false)]
        public static ErrorCode EnqueueCopyBufferRect(CommandQueue command_queue, ComputeMemory src_buffer, ComputeMemory dst_buffer, IntPtr[] src_origin, IntPtr[] dst_origin, IntPtr[] region, IntPtr src_row_pitch, IntPtr src_slice_pitch, IntPtr dst_row_pitch, IntPtr dst_slice_pitch, Int32 num_events_in_wait_list, ComputeEvent[] event_wait_list, [OutAttribute] out ComputeEvent @event) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.1]
        /// Enqueues a command to copy a rectangular region from a buffer object to another buffer object.
        /// </summary>
        /// <param name="command_queue"> 
        /// The command-queue in which the copy command will be queued. The OpenCL context associated with command_queue, src_buffer, and dst_buffer must be the same.
        /// </param>
        /// <param name="src_buffer"> 
        /// The (x, y, z) offset in the memory region associated with src_buffer. For a 2D rectangle region, the z value given by src_origin[2] should be 0. The offset in bytes is computed as src_origin[2] * src_slice_pitch + src_origin[1] * src_row_pitch + src_origin[0].
        /// </param>
        /// <param name="dst_buffer"> 
        /// The (x, y, z) offset in the memory region associated with dst_buffer. For a 2D rectangle region, the z value given by dst_origin[2] should be 0. The offset in bytes is computed as dst_origin[2] * dst_slice_pitch + dst_origin[1] * dst_row_pitch + dst_origin[0].
        /// </param>
        /// <param name="src_origin">[length: 3] 
        /// The (x, y, z) offset in the memory region associated with src_buffer. For a 2D rectangle region, the z value given by src_origin[2] should be 0. The offset in bytes is computed as src_origin[2] * src_slice_pitch + src_origin[1] * src_row_pitch + src_origin[0].
        /// </param>
        /// <param name="dst_origin">[length: 3] 
        /// The (x, y, z) offset in the memory region associated with dst_buffer. For a 2D rectangle region, the z value given by dst_origin[2] should be 0. The offset in bytes is computed as dst_origin[2] * dst_slice_pitch + dst_origin[1] * dst_row_pitch + dst_origin[0].
        /// </param>
        /// <param name="region">[length: 3] 
        /// The (width, height, depth) in bytes of the 2D or 3D rectangle being copied. For a 2D rectangle, the depth value given by region[2] should be 1.
        /// </param>
        /// <param name="src_row_pitch"> 
        /// The length of each row in bytes to be used for the memory region associated with src_buffer. If src_row_pitch is 0, src_row_pitch is computed as region[0].
        /// </param>
        /// <param name="src_slice_pitch"> 
        /// The length of each 2D slice in bytes to be used for the memory region associated with src_buffer. If src_slice_pitch is 0, src_slice_pitch is computed as region[1] * src_row_pitch.
        /// </param>
        /// <param name="dst_row_pitch"> 
        /// The length of each row in bytes to be used for the memory region associated with dst_buffer. If dst_row_pitch is 0, dst_row_pitch is computed as region[0].
        /// </param>
        /// <param name="dst_slice_pitch"> 
        /// The length of each 2D slice in bytes to be used for the memory region associated with dst_buffer. If dst_slice_pitch is 0, dst_slice_pitch is computed as region[1] * dst_row_pitch.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event"> 
        /// Returns an event object that identifies this particular copy command and can be used to query or queue a wait for this particular command to complete. event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete. clEnqueueBarrierWithWaitList can be used instead.  If the event_wait_list and the event arguments are not NULL, the event argument should not refer to an element of the event_wait_list array.
        /// </param>
        [AutoGenerated(Category = "", Version = "1.1", EntryPoint = "clEnqueueCopyBufferRect")]
        [CLSCompliant(false)]
        public static ErrorCode EnqueueCopyBufferRect(CommandQueue command_queue, ComputeMemory src_buffer, ComputeMemory dst_buffer, ref IntPtr src_origin, ref IntPtr dst_origin, ref IntPtr region, IntPtr src_row_pitch, IntPtr src_slice_pitch, IntPtr dst_row_pitch, IntPtr dst_slice_pitch, Int32 num_events_in_wait_list, ref ComputeEvent event_wait_list, [OutAttribute] out ComputeEvent @event) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.1]
        /// Enqueues a command to copy a rectangular region from a buffer object to another buffer object.
        /// </summary>
        /// <param name="command_queue"> 
        /// The command-queue in which the copy command will be queued. The OpenCL context associated with command_queue, src_buffer, and dst_buffer must be the same.
        /// </param>
        /// <param name="src_buffer"> 
        /// The (x, y, z) offset in the memory region associated with src_buffer. For a 2D rectangle region, the z value given by src_origin[2] should be 0. The offset in bytes is computed as src_origin[2] * src_slice_pitch + src_origin[1] * src_row_pitch + src_origin[0].
        /// </param>
        /// <param name="dst_buffer"> 
        /// The (x, y, z) offset in the memory region associated with dst_buffer. For a 2D rectangle region, the z value given by dst_origin[2] should be 0. The offset in bytes is computed as dst_origin[2] * dst_slice_pitch + dst_origin[1] * dst_row_pitch + dst_origin[0].
        /// </param>
        /// <param name="src_origin">[length: 3] 
        /// The (x, y, z) offset in the memory region associated with src_buffer. For a 2D rectangle region, the z value given by src_origin[2] should be 0. The offset in bytes is computed as src_origin[2] * src_slice_pitch + src_origin[1] * src_row_pitch + src_origin[0].
        /// </param>
        /// <param name="dst_origin">[length: 3] 
        /// The (x, y, z) offset in the memory region associated with dst_buffer. For a 2D rectangle region, the z value given by dst_origin[2] should be 0. The offset in bytes is computed as dst_origin[2] * dst_slice_pitch + dst_origin[1] * dst_row_pitch + dst_origin[0].
        /// </param>
        /// <param name="region">[length: 3] 
        /// The (width, height, depth) in bytes of the 2D or 3D rectangle being copied. For a 2D rectangle, the depth value given by region[2] should be 1.
        /// </param>
        /// <param name="src_row_pitch"> 
        /// The length of each row in bytes to be used for the memory region associated with src_buffer. If src_row_pitch is 0, src_row_pitch is computed as region[0].
        /// </param>
        /// <param name="src_slice_pitch"> 
        /// The length of each 2D slice in bytes to be used for the memory region associated with src_buffer. If src_slice_pitch is 0, src_slice_pitch is computed as region[1] * src_row_pitch.
        /// </param>
        /// <param name="dst_row_pitch"> 
        /// The length of each row in bytes to be used for the memory region associated with dst_buffer. If dst_row_pitch is 0, dst_row_pitch is computed as region[0].
        /// </param>
        /// <param name="dst_slice_pitch"> 
        /// The length of each 2D slice in bytes to be used for the memory region associated with dst_buffer. If dst_slice_pitch is 0, dst_slice_pitch is computed as region[1] * dst_row_pitch.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event"> 
        /// Returns an event object that identifies this particular copy command and can be used to query or queue a wait for this particular command to complete. event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete. clEnqueueBarrierWithWaitList can be used instead.  If the event_wait_list and the event arguments are not NULL, the event argument should not refer to an element of the event_wait_list array.
        /// </param>
        [AutoGenerated(Category = "", Version = "1.1", EntryPoint = "clEnqueueCopyBufferRect")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode EnqueueCopyBufferRect(CommandQueue command_queue, ComputeMemory src_buffer, ComputeMemory dst_buffer, IntPtr* src_origin, IntPtr* dst_origin, IntPtr* region, IntPtr src_row_pitch, IntPtr src_slice_pitch, IntPtr dst_row_pitch, IntPtr dst_slice_pitch, Int32 num_events_in_wait_list, ComputeEvent* event_wait_list, [OutAttribute] ComputeEvent* @event) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Enqueues a command to copy a buffer object to an image object.
        /// </summary>
        /// <param name="command_queue"> 
        /// A valid command-queue. The OpenCL context associated with command_queue, src_buffer, and dst_image must be the same.
        /// </param>
        /// <param name="src_buffer"> 
        /// A valid buffer object.
        /// </param>
        /// <param name="dst_image"> 
        /// A valid image object.
        /// </param>
        /// <param name="src_offset"> 
        /// The offset where to begin copying data from src_buffer.
        /// </param>
        /// <param name="dst_origin">[length: 3] 
        /// Defines the (x, y, z) offset in pixels in the 1D, 2D or 3D image, the (x, y) offset and the image index in the 2D image array or the (x) offset and the image index in the 1D image array.  If dst_image is a 2D image object, dst_origin[2] must be 0. If dst_image is a 1D image or 1D image buffer object, dst_origin[1] and dst_origin[2] must be 0.  If dst_image is a 1D image array object, dst_origin[2] must be 0.  If dst_image is a 1D image array object, dst_origin[1] describes the image index in the 1D image array. If dst_image is a 2D image array object, dst_origin[2] describes the image index in the 2D image array.
        /// </param>
        /// <param name="region">[length: 3] 
        /// Defines the (width, height, depth) in pixels of the 1D, 2D or 3D rectangle, the (width, height) in pixels of the 2D rectangle and the number of images of a 2D image array or the (width) in pixels of the 1D rectangle and the number of images of a 1D image array.  If dst_image is a 2D image object, region[2] must be 1. If dst_image is a 1D image or 1D image buffer object, region[1] and region[2] must be 1.  If dst_image is a 1D image array object, region[2] must be 1.  The size in bytes of the region to be copied from src_buffer referred to as src_cb is computed as width * height * depth * bytes/image_element if dst_image is a 3D image object, is computed as width * height * bytes/image_element if dst_image is a 2D image, is computed as width * height * arraysize * bytes/image_element if dst_image is a 2D image array object, is computed as width * bytes/image_element if dst_image is a 1D image or 1D image buffer object and is computed as width * arraysize * bytes/image_element if dst_image is a 1D image array object.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event"> 
        /// Returns an event object that identifies this particular copy command and can be used to query or queue a wait for this particular command to complete. event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete. clEnqueueBarrierWithWaitList can be used instead.  If the event_wait_list and the event arguments are not NULL, the event argument should not refer to an element of the event_wait_list array.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clEnqueueCopyBufferToImage")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode EnqueueCopyBufferToImage(CommandQueue command_queue, ComputeMemory src_buffer, ComputeMemory dst_image, IntPtr src_offset, IntPtr*[] dst_origin, IntPtr*[] region, Int32 num_events_in_wait_list, ComputeEvent[] event_wait_list, [OutAttribute] out ComputeEvent @event) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Enqueues a command to copy a buffer object to an image object.
        /// </summary>
        /// <param name="command_queue"> 
        /// A valid command-queue. The OpenCL context associated with command_queue, src_buffer, and dst_image must be the same.
        /// </param>
        /// <param name="src_buffer"> 
        /// A valid buffer object.
        /// </param>
        /// <param name="dst_image"> 
        /// A valid image object.
        /// </param>
        /// <param name="src_offset"> 
        /// The offset where to begin copying data from src_buffer.
        /// </param>
        /// <param name="dst_origin">[length: 3] 
        /// Defines the (x, y, z) offset in pixels in the 1D, 2D or 3D image, the (x, y) offset and the image index in the 2D image array or the (x) offset and the image index in the 1D image array.  If dst_image is a 2D image object, dst_origin[2] must be 0. If dst_image is a 1D image or 1D image buffer object, dst_origin[1] and dst_origin[2] must be 0.  If dst_image is a 1D image array object, dst_origin[2] must be 0.  If dst_image is a 1D image array object, dst_origin[1] describes the image index in the 1D image array. If dst_image is a 2D image array object, dst_origin[2] describes the image index in the 2D image array.
        /// </param>
        /// <param name="region">[length: 3] 
        /// Defines the (width, height, depth) in pixels of the 1D, 2D or 3D rectangle, the (width, height) in pixels of the 2D rectangle and the number of images of a 2D image array or the (width) in pixels of the 1D rectangle and the number of images of a 1D image array.  If dst_image is a 2D image object, region[2] must be 1. If dst_image is a 1D image or 1D image buffer object, region[1] and region[2] must be 1.  If dst_image is a 1D image array object, region[2] must be 1.  The size in bytes of the region to be copied from src_buffer referred to as src_cb is computed as width * height * depth * bytes/image_element if dst_image is a 3D image object, is computed as width * height * bytes/image_element if dst_image is a 2D image, is computed as width * height * arraysize * bytes/image_element if dst_image is a 2D image array object, is computed as width * bytes/image_element if dst_image is a 1D image or 1D image buffer object and is computed as width * arraysize * bytes/image_element if dst_image is a 1D image array object.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event"> 
        /// Returns an event object that identifies this particular copy command and can be used to query or queue a wait for this particular command to complete. event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete. clEnqueueBarrierWithWaitList can be used instead.  If the event_wait_list and the event arguments are not NULL, the event argument should not refer to an element of the event_wait_list array.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clEnqueueCopyBufferToImage")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode EnqueueCopyBufferToImage(CommandQueue command_queue, ComputeMemory src_buffer, ComputeMemory dst_image, IntPtr src_offset, ref IntPtr* dst_origin, ref IntPtr* region, Int32 num_events_in_wait_list, ref ComputeEvent event_wait_list, [OutAttribute] out ComputeEvent @event) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Enqueues a command to copy a buffer object to an image object.
        /// </summary>
        /// <param name="command_queue"> 
        /// A valid command-queue. The OpenCL context associated with command_queue, src_buffer, and dst_image must be the same.
        /// </param>
        /// <param name="src_buffer"> 
        /// A valid buffer object.
        /// </param>
        /// <param name="dst_image"> 
        /// A valid image object.
        /// </param>
        /// <param name="src_offset"> 
        /// The offset where to begin copying data from src_buffer.
        /// </param>
        /// <param name="dst_origin">[length: 3] 
        /// Defines the (x, y, z) offset in pixels in the 1D, 2D or 3D image, the (x, y) offset and the image index in the 2D image array or the (x) offset and the image index in the 1D image array.  If dst_image is a 2D image object, dst_origin[2] must be 0. If dst_image is a 1D image or 1D image buffer object, dst_origin[1] and dst_origin[2] must be 0.  If dst_image is a 1D image array object, dst_origin[2] must be 0.  If dst_image is a 1D image array object, dst_origin[1] describes the image index in the 1D image array. If dst_image is a 2D image array object, dst_origin[2] describes the image index in the 2D image array.
        /// </param>
        /// <param name="region">[length: 3] 
        /// Defines the (width, height, depth) in pixels of the 1D, 2D or 3D rectangle, the (width, height) in pixels of the 2D rectangle and the number of images of a 2D image array or the (width) in pixels of the 1D rectangle and the number of images of a 1D image array.  If dst_image is a 2D image object, region[2] must be 1. If dst_image is a 1D image or 1D image buffer object, region[1] and region[2] must be 1.  If dst_image is a 1D image array object, region[2] must be 1.  The size in bytes of the region to be copied from src_buffer referred to as src_cb is computed as width * height * depth * bytes/image_element if dst_image is a 3D image object, is computed as width * height * bytes/image_element if dst_image is a 2D image, is computed as width * height * arraysize * bytes/image_element if dst_image is a 2D image array object, is computed as width * bytes/image_element if dst_image is a 1D image or 1D image buffer object and is computed as width * arraysize * bytes/image_element if dst_image is a 1D image array object.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event"> 
        /// Returns an event object that identifies this particular copy command and can be used to query or queue a wait for this particular command to complete. event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete. clEnqueueBarrierWithWaitList can be used instead.  If the event_wait_list and the event arguments are not NULL, the event argument should not refer to an element of the event_wait_list array.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clEnqueueCopyBufferToImage")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode EnqueueCopyBufferToImage(CommandQueue command_queue, ComputeMemory src_buffer, ComputeMemory dst_image, IntPtr src_offset, IntPtr** dst_origin, IntPtr** region, Int32 num_events_in_wait_list, ComputeEvent* event_wait_list, [OutAttribute] ComputeEvent* @event) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Enqueues a command to copy image objects.
        /// </summary>
        /// <param name="command_queue"> 
        /// Refers to the command-queue in which the copy command will be queued. The OpenCL context associated with command_queue, src_image and dst_image must be the same.
        /// </param>
        /// <param name="src_image"> 
        /// Can be 1D, 2D, 3D image or a 1D, 2D image array objects allowing us to perform the following actions:  Copy a 1D image object to a 1D image object.  Copy a 1D image object to a scanline of a 2D image object and vice-versa.  Copy a 1D image object to a scanline of a 2D slice of a 3D image object and vice-versa.  Copy a 1D image object to a scanline of a specific image index of a 1D or 2D image array object and vice-versa.  Copy a 2D image object to a 2D image object.  Copy a 2D image object to a 2D slice of a 3D image object and vice-versa.  Copy a 2D image object to a specific image index of a 2D image array object and vice versa.  Copy images from a 1D image array object to a 1D image array object.  Copy images from a 2D image array object to a 2D image array object.  Copy a 3D image object to a 3D image object.
        /// </param>
        /// <param name="dst_image"> 
        /// Can be 1D, 2D, 3D image or a 1D, 2D image array objects allowing us to perform the following actions:  Copy a 1D image object to a 1D image object.  Copy a 1D image object to a scanline of a 2D image object and vice-versa.  Copy a 1D image object to a scanline of a 2D slice of a 3D image object and vice-versa.  Copy a 1D image object to a scanline of a specific image index of a 1D or 2D image array object and vice-versa.  Copy a 2D image object to a 2D image object.  Copy a 2D image object to a 2D slice of a 3D image object and vice-versa.  Copy a 2D image object to a specific image index of a 2D image array object and vice versa.  Copy images from a 1D image array object to a 1D image array object.  Copy images from a 2D image array object to a 2D image array object.  Copy a 3D image object to a 3D image object.
        /// </param>
        /// <param name="src_origin">[length: 3] 
        /// Defines the (x, y, z) offset in pixels in the 1D, 2D or 3D image, the (x, y) offset and the image index in the 2D image array or the (x) offset and the image index in the 1D image array.  If image is a 2D image object, src_origin[2] must be 0.  If src_image is a 1D image object, src_origin[1] and src_origin[2] must be 0.  If src_image is a 1D image array object, src_origin[2] must be 0.  If src_image is a 1D image array object, src_origin[1] describes the image index in the 1D image array. If src_image is a 2D image array object, src_origin[2] describes the image index in the 2D image array.
        /// </param>
        /// <param name="dst_origin">[length: 3] 
        /// Defines the (x, y, z) offset in pixels in the 1D, 2D or 3D image, the (x, y) offset and the image index in the 2D image array or the (x) offset and the image index in the 1D image array.  If dst_image is a 2D image object, dst_origin[2] must be 0. If dst_image is a 1D image or 1D image buffer object, dst_origin[1] and dst_origin[2] must be 0.  If dst_image is a 1D image array object, dst_origin[2] must be 0.  If dst_image is a 1D image array object, dst_origin[1] describes the image index in the 1D image array. If dst_image is a 2D image array object, dst_origin[2] describes the image index in the 2D image array.
        /// </param>
        /// <param name="region">[length: 3] 
        /// Defines the (width, height, depth) in pixels of the 1D, 2D or 3D rectangle, the (width, height) in pixels of the 2D rectangle and the number of images of a 2D image array or the (width) in pixels of the 1D rectangle and the number of images of a 1D image array.  If src_image or dst_image is a 2D image object, region[2] must be 1. If src_image or dst_image is a 1D image or 1D image buffer object, region[1] and region[2] must be 1. If src_image or dst_image is a 1D image array object, region[2] must be 1.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event"> 
        /// Returns an event object that identifies this particular copy command and can be used to query or queue a wait for this particular command to complete. event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete. clEnqueueBarrierWithWaitList can be used instead.  If the event_wait_list and the event arguments are not NULL, the event argument should not refer to an element of the event_wait_list array.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clEnqueueCopyImage")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode EnqueueCopyImage(CommandQueue command_queue, ComputeMemory src_image, ComputeMemory dst_image, IntPtr*[] src_origin, IntPtr*[] dst_origin, IntPtr*[] region, Int32 num_events_in_wait_list, ComputeEvent[] event_wait_list, [OutAttribute] out ComputeEvent @event) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Enqueues a command to copy image objects.
        /// </summary>
        /// <param name="command_queue"> 
        /// Refers to the command-queue in which the copy command will be queued. The OpenCL context associated with command_queue, src_image and dst_image must be the same.
        /// </param>
        /// <param name="src_image"> 
        /// Can be 1D, 2D, 3D image or a 1D, 2D image array objects allowing us to perform the following actions:  Copy a 1D image object to a 1D image object.  Copy a 1D image object to a scanline of a 2D image object and vice-versa.  Copy a 1D image object to a scanline of a 2D slice of a 3D image object and vice-versa.  Copy a 1D image object to a scanline of a specific image index of a 1D or 2D image array object and vice-versa.  Copy a 2D image object to a 2D image object.  Copy a 2D image object to a 2D slice of a 3D image object and vice-versa.  Copy a 2D image object to a specific image index of a 2D image array object and vice versa.  Copy images from a 1D image array object to a 1D image array object.  Copy images from a 2D image array object to a 2D image array object.  Copy a 3D image object to a 3D image object.
        /// </param>
        /// <param name="dst_image"> 
        /// Can be 1D, 2D, 3D image or a 1D, 2D image array objects allowing us to perform the following actions:  Copy a 1D image object to a 1D image object.  Copy a 1D image object to a scanline of a 2D image object and vice-versa.  Copy a 1D image object to a scanline of a 2D slice of a 3D image object and vice-versa.  Copy a 1D image object to a scanline of a specific image index of a 1D or 2D image array object and vice-versa.  Copy a 2D image object to a 2D image object.  Copy a 2D image object to a 2D slice of a 3D image object and vice-versa.  Copy a 2D image object to a specific image index of a 2D image array object and vice versa.  Copy images from a 1D image array object to a 1D image array object.  Copy images from a 2D image array object to a 2D image array object.  Copy a 3D image object to a 3D image object.
        /// </param>
        /// <param name="src_origin">[length: 3] 
        /// Defines the (x, y, z) offset in pixels in the 1D, 2D or 3D image, the (x, y) offset and the image index in the 2D image array or the (x) offset and the image index in the 1D image array.  If image is a 2D image object, src_origin[2] must be 0.  If src_image is a 1D image object, src_origin[1] and src_origin[2] must be 0.  If src_image is a 1D image array object, src_origin[2] must be 0.  If src_image is a 1D image array object, src_origin[1] describes the image index in the 1D image array. If src_image is a 2D image array object, src_origin[2] describes the image index in the 2D image array.
        /// </param>
        /// <param name="dst_origin">[length: 3] 
        /// Defines the (x, y, z) offset in pixels in the 1D, 2D or 3D image, the (x, y) offset and the image index in the 2D image array or the (x) offset and the image index in the 1D image array.  If dst_image is a 2D image object, dst_origin[2] must be 0. If dst_image is a 1D image or 1D image buffer object, dst_origin[1] and dst_origin[2] must be 0.  If dst_image is a 1D image array object, dst_origin[2] must be 0.  If dst_image is a 1D image array object, dst_origin[1] describes the image index in the 1D image array. If dst_image is a 2D image array object, dst_origin[2] describes the image index in the 2D image array.
        /// </param>
        /// <param name="region">[length: 3] 
        /// Defines the (width, height, depth) in pixels of the 1D, 2D or 3D rectangle, the (width, height) in pixels of the 2D rectangle and the number of images of a 2D image array or the (width) in pixels of the 1D rectangle and the number of images of a 1D image array.  If src_image or dst_image is a 2D image object, region[2] must be 1. If src_image or dst_image is a 1D image or 1D image buffer object, region[1] and region[2] must be 1. If src_image or dst_image is a 1D image array object, region[2] must be 1.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event"> 
        /// Returns an event object that identifies this particular copy command and can be used to query or queue a wait for this particular command to complete. event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete. clEnqueueBarrierWithWaitList can be used instead.  If the event_wait_list and the event arguments are not NULL, the event argument should not refer to an element of the event_wait_list array.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clEnqueueCopyImage")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode EnqueueCopyImage(CommandQueue command_queue, ComputeMemory src_image, ComputeMemory dst_image, ref IntPtr* src_origin, ref IntPtr* dst_origin, ref IntPtr* region, Int32 num_events_in_wait_list, ref ComputeEvent event_wait_list, [OutAttribute] out ComputeEvent @event) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Enqueues a command to copy image objects.
        /// </summary>
        /// <param name="command_queue"> 
        /// Refers to the command-queue in which the copy command will be queued. The OpenCL context associated with command_queue, src_image and dst_image must be the same.
        /// </param>
        /// <param name="src_image"> 
        /// Can be 1D, 2D, 3D image or a 1D, 2D image array objects allowing us to perform the following actions:  Copy a 1D image object to a 1D image object.  Copy a 1D image object to a scanline of a 2D image object and vice-versa.  Copy a 1D image object to a scanline of a 2D slice of a 3D image object and vice-versa.  Copy a 1D image object to a scanline of a specific image index of a 1D or 2D image array object and vice-versa.  Copy a 2D image object to a 2D image object.  Copy a 2D image object to a 2D slice of a 3D image object and vice-versa.  Copy a 2D image object to a specific image index of a 2D image array object and vice versa.  Copy images from a 1D image array object to a 1D image array object.  Copy images from a 2D image array object to a 2D image array object.  Copy a 3D image object to a 3D image object.
        /// </param>
        /// <param name="dst_image"> 
        /// Can be 1D, 2D, 3D image or a 1D, 2D image array objects allowing us to perform the following actions:  Copy a 1D image object to a 1D image object.  Copy a 1D image object to a scanline of a 2D image object and vice-versa.  Copy a 1D image object to a scanline of a 2D slice of a 3D image object and vice-versa.  Copy a 1D image object to a scanline of a specific image index of a 1D or 2D image array object and vice-versa.  Copy a 2D image object to a 2D image object.  Copy a 2D image object to a 2D slice of a 3D image object and vice-versa.  Copy a 2D image object to a specific image index of a 2D image array object and vice versa.  Copy images from a 1D image array object to a 1D image array object.  Copy images from a 2D image array object to a 2D image array object.  Copy a 3D image object to a 3D image object.
        /// </param>
        /// <param name="src_origin">[length: 3] 
        /// Defines the (x, y, z) offset in pixels in the 1D, 2D or 3D image, the (x, y) offset and the image index in the 2D image array or the (x) offset and the image index in the 1D image array.  If image is a 2D image object, src_origin[2] must be 0.  If src_image is a 1D image object, src_origin[1] and src_origin[2] must be 0.  If src_image is a 1D image array object, src_origin[2] must be 0.  If src_image is a 1D image array object, src_origin[1] describes the image index in the 1D image array. If src_image is a 2D image array object, src_origin[2] describes the image index in the 2D image array.
        /// </param>
        /// <param name="dst_origin">[length: 3] 
        /// Defines the (x, y, z) offset in pixels in the 1D, 2D or 3D image, the (x, y) offset and the image index in the 2D image array or the (x) offset and the image index in the 1D image array.  If dst_image is a 2D image object, dst_origin[2] must be 0. If dst_image is a 1D image or 1D image buffer object, dst_origin[1] and dst_origin[2] must be 0.  If dst_image is a 1D image array object, dst_origin[2] must be 0.  If dst_image is a 1D image array object, dst_origin[1] describes the image index in the 1D image array. If dst_image is a 2D image array object, dst_origin[2] describes the image index in the 2D image array.
        /// </param>
        /// <param name="region">[length: 3] 
        /// Defines the (width, height, depth) in pixels of the 1D, 2D or 3D rectangle, the (width, height) in pixels of the 2D rectangle and the number of images of a 2D image array or the (width) in pixels of the 1D rectangle and the number of images of a 1D image array.  If src_image or dst_image is a 2D image object, region[2] must be 1. If src_image or dst_image is a 1D image or 1D image buffer object, region[1] and region[2] must be 1. If src_image or dst_image is a 1D image array object, region[2] must be 1.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event"> 
        /// Returns an event object that identifies this particular copy command and can be used to query or queue a wait for this particular command to complete. event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete. clEnqueueBarrierWithWaitList can be used instead.  If the event_wait_list and the event arguments are not NULL, the event argument should not refer to an element of the event_wait_list array.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clEnqueueCopyImage")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode EnqueueCopyImage(CommandQueue command_queue, ComputeMemory src_image, ComputeMemory dst_image, IntPtr** src_origin, IntPtr** dst_origin, IntPtr** region, Int32 num_events_in_wait_list, ComputeEvent* event_wait_list, [OutAttribute] ComputeEvent* @event) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Enqueues a command to copy an image object to a buffer object.
        /// </summary>
        /// <param name="command_queue"> 
        /// Must be a valid command-queue. The OpenCL context associated with command_queue, src_image, and dst_buffer must be the same.
        /// </param>
        /// <param name="src_image"> 
        /// A valid image object.
        /// </param>
        /// <param name="dst_buffer"> 
        /// A valid buffer object.
        /// </param>
        /// <param name="src_origin">[length: 3] 
        /// Defines the (x, y, z) offset in pixels in the 1D, 2D or 3D image, the (x, y) offset and the image index in the 2D image array or the (x) offset and the image index in the 1D image array.  If src_image is a 2D image object, src_origin[2] must be 0. If src_image is a 1D image or 1D image buffer object, src_origin[1] and src_origin[2] must be 0.  If src_image is a 1D image array object, src_origin[2] must be 0.  If src_image is a 1D image array object, src_origin[1] describes the image index in the 1D image array. If src_image is a 2D image array object, src_origin[2] describes the image index in the 2D image array.
        /// </param>
        /// <param name="region">[length: 3] 
        /// Defines the (width, height, depth) in pixels of the 1D, 2D or 3D rectangle, the (width, height) in pixels of the 2D rectangle and the number of images of a 2D image array or the (width) in pixels of the 1D rectangle and the number of images of a 1D image array.  If src_image is a 2D image object, region[2] must be 1. If src_image is a 1D image or 1D image buffer object, region[1] and region[2] must be 1.  If src_image is a 1D image array object, region[2] must be 1.
        /// </param>
        /// <param name="dst_offset"> 
        /// Refers to the offset where to begin copying data into dst_buffer.  The size in bytes of the region to be copied referred to as dst_cb is computed as width * height * depth * bytes/image element if src_image is a 3D image object, is computed as width * height * bytes/image element if src_image is a 2D image, is computed as width * height * arraysize * bytes/image element if src_image is a 2D image array object, is computed as width * bytes/image element if src_image is a 1D image or 1D image buffer object and is computed as width * arraysize * bytes/image element if src_image is a 1D image array object.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event"> 
        /// Returns an event object that identifies this particular copy command and can be used to query or queue a wait for this particular command to complete. event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete. clEnqueueBarrierWithWaitList can be used instead.  If the event_wait_list and the event arguments are not NULL, the event argument should not refer to an element of the event_wait_list array.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clEnqueueCopyImageToBuffer")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode EnqueueCopyImageToBuffer(CommandQueue command_queue, ComputeMemory src_image, ComputeMemory dst_buffer, IntPtr*[] src_origin, IntPtr*[] region, IntPtr dst_offset, Int32 num_events_in_wait_list, ComputeEvent[] event_wait_list, [OutAttribute] out ComputeEvent @event) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Enqueues a command to copy an image object to a buffer object.
        /// </summary>
        /// <param name="command_queue"> 
        /// Must be a valid command-queue. The OpenCL context associated with command_queue, src_image, and dst_buffer must be the same.
        /// </param>
        /// <param name="src_image"> 
        /// A valid image object.
        /// </param>
        /// <param name="dst_buffer"> 
        /// A valid buffer object.
        /// </param>
        /// <param name="src_origin">[length: 3] 
        /// Defines the (x, y, z) offset in pixels in the 1D, 2D or 3D image, the (x, y) offset and the image index in the 2D image array or the (x) offset and the image index in the 1D image array.  If src_image is a 2D image object, src_origin[2] must be 0. If src_image is a 1D image or 1D image buffer object, src_origin[1] and src_origin[2] must be 0.  If src_image is a 1D image array object, src_origin[2] must be 0.  If src_image is a 1D image array object, src_origin[1] describes the image index in the 1D image array. If src_image is a 2D image array object, src_origin[2] describes the image index in the 2D image array.
        /// </param>
        /// <param name="region">[length: 3] 
        /// Defines the (width, height, depth) in pixels of the 1D, 2D or 3D rectangle, the (width, height) in pixels of the 2D rectangle and the number of images of a 2D image array or the (width) in pixels of the 1D rectangle and the number of images of a 1D image array.  If src_image is a 2D image object, region[2] must be 1. If src_image is a 1D image or 1D image buffer object, region[1] and region[2] must be 1.  If src_image is a 1D image array object, region[2] must be 1.
        /// </param>
        /// <param name="dst_offset"> 
        /// Refers to the offset where to begin copying data into dst_buffer.  The size in bytes of the region to be copied referred to as dst_cb is computed as width * height * depth * bytes/image element if src_image is a 3D image object, is computed as width * height * bytes/image element if src_image is a 2D image, is computed as width * height * arraysize * bytes/image element if src_image is a 2D image array object, is computed as width * bytes/image element if src_image is a 1D image or 1D image buffer object and is computed as width * arraysize * bytes/image element if src_image is a 1D image array object.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event"> 
        /// Returns an event object that identifies this particular copy command and can be used to query or queue a wait for this particular command to complete. event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete. clEnqueueBarrierWithWaitList can be used instead.  If the event_wait_list and the event arguments are not NULL, the event argument should not refer to an element of the event_wait_list array.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clEnqueueCopyImageToBuffer")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode EnqueueCopyImageToBuffer(CommandQueue command_queue, ComputeMemory src_image, ComputeMemory dst_buffer, ref IntPtr* src_origin, ref IntPtr* region, IntPtr dst_offset, Int32 num_events_in_wait_list, ref ComputeEvent event_wait_list, [OutAttribute] out ComputeEvent @event) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Enqueues a command to copy an image object to a buffer object.
        /// </summary>
        /// <param name="command_queue"> 
        /// Must be a valid command-queue. The OpenCL context associated with command_queue, src_image, and dst_buffer must be the same.
        /// </param>
        /// <param name="src_image"> 
        /// A valid image object.
        /// </param>
        /// <param name="dst_buffer"> 
        /// A valid buffer object.
        /// </param>
        /// <param name="src_origin">[length: 3] 
        /// Defines the (x, y, z) offset in pixels in the 1D, 2D or 3D image, the (x, y) offset and the image index in the 2D image array or the (x) offset and the image index in the 1D image array.  If src_image is a 2D image object, src_origin[2] must be 0. If src_image is a 1D image or 1D image buffer object, src_origin[1] and src_origin[2] must be 0.  If src_image is a 1D image array object, src_origin[2] must be 0.  If src_image is a 1D image array object, src_origin[1] describes the image index in the 1D image array. If src_image is a 2D image array object, src_origin[2] describes the image index in the 2D image array.
        /// </param>
        /// <param name="region">[length: 3] 
        /// Defines the (width, height, depth) in pixels of the 1D, 2D or 3D rectangle, the (width, height) in pixels of the 2D rectangle and the number of images of a 2D image array or the (width) in pixels of the 1D rectangle and the number of images of a 1D image array.  If src_image is a 2D image object, region[2] must be 1. If src_image is a 1D image or 1D image buffer object, region[1] and region[2] must be 1.  If src_image is a 1D image array object, region[2] must be 1.
        /// </param>
        /// <param name="dst_offset"> 
        /// Refers to the offset where to begin copying data into dst_buffer.  The size in bytes of the region to be copied referred to as dst_cb is computed as width * height * depth * bytes/image element if src_image is a 3D image object, is computed as width * height * bytes/image element if src_image is a 2D image, is computed as width * height * arraysize * bytes/image element if src_image is a 2D image array object, is computed as width * bytes/image element if src_image is a 1D image or 1D image buffer object and is computed as width * arraysize * bytes/image element if src_image is a 1D image array object.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event"> 
        /// Returns an event object that identifies this particular copy command and can be used to query or queue a wait for this particular command to complete. event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete. clEnqueueBarrierWithWaitList can be used instead.  If the event_wait_list and the event arguments are not NULL, the event argument should not refer to an element of the event_wait_list array.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clEnqueueCopyImageToBuffer")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode EnqueueCopyImageToBuffer(CommandQueue command_queue, ComputeMemory src_image, ComputeMemory dst_buffer, IntPtr** src_origin, IntPtr** region, IntPtr dst_offset, Int32 num_events_in_wait_list, ComputeEvent* event_wait_list, [OutAttribute] ComputeEvent* @event) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.2]
        /// Enqueues a command to fill a buffer object with a pattern of a given pattern size.
        /// </summary>
        /// <param name="command_queue"> 
        /// Refers to the command-queue in which the fill command will be queued. The OpenCL context associated with command_queue and buffer must be the same.
        /// </param>
        /// <param name="buffer"> 
        /// A valid buffer object.
        /// </param>
        /// <param name="pattern"> 
        /// A pointer to the data pattern of size pattern_size in bytes. pattern will be used to fill a region in buffer starting at offset and is size bytes in size. The data pattern must be a scalar or vector integer or floating-point data type. For example, if buffer is to be filled with a pattern of float4 values, then pattern will be a pointer to a cl_float4 value and pattern_size will be sizeof(cl_float4).  The maximum value of pattern_size is the size of the largest integer or floating-point vector data type supported by the OpenCL device. The memory associated with pattern can be reused or freed after the function returns.
        /// </param>
        /// <param name="pattern_size"> 
        /// The location in bytes of the region being filled in buffer and must be a multiple of pattern_size.
        /// </param>
        /// <param name="size"> 
        /// The size in bytes of region being filled in buffer and must be a multiple of pattern_size.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event">[length: 1] 
        /// Returns an event object that identifies this particular write command and can be used to query or queue a wait for this particular command to complete. event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete. clEnqueueBarrierWithWaitList can be used instead.  If the event_wait_list and the event arguments are not NULL, the event argument should not refer to an element of the event_wait_list array.
        /// </param>
        [AutoGenerated(Category = "", Version = "1.2", EntryPoint = "clEnqueueFillBuffer")]
        [CLSCompliant(false)]
        public static ErrorCode EnqueueFillBuffer(CommandQueue command_queue, ComputeMemory buffer, IntPtr pattern, IntPtr pattern_size, IntPtr size, Int32 num_events_in_wait_list, ComputeEvent[] event_wait_list, [OutAttribute] out ComputeEvent @event) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.2]
        /// Enqueues a command to fill a buffer object with a pattern of a given pattern size.
        /// </summary>
        /// <param name="command_queue"> 
        /// Refers to the command-queue in which the fill command will be queued. The OpenCL context associated with command_queue and buffer must be the same.
        /// </param>
        /// <param name="buffer"> 
        /// A valid buffer object.
        /// </param>
        /// <param name="pattern"> 
        /// A pointer to the data pattern of size pattern_size in bytes. pattern will be used to fill a region in buffer starting at offset and is size bytes in size. The data pattern must be a scalar or vector integer or floating-point data type. For example, if buffer is to be filled with a pattern of float4 values, then pattern will be a pointer to a cl_float4 value and pattern_size will be sizeof(cl_float4).  The maximum value of pattern_size is the size of the largest integer or floating-point vector data type supported by the OpenCL device. The memory associated with pattern can be reused or freed after the function returns.
        /// </param>
        /// <param name="pattern_size"> 
        /// The location in bytes of the region being filled in buffer and must be a multiple of pattern_size.
        /// </param>
        /// <param name="size"> 
        /// The size in bytes of region being filled in buffer and must be a multiple of pattern_size.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event">[length: 1] 
        /// Returns an event object that identifies this particular write command and can be used to query or queue a wait for this particular command to complete. event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete. clEnqueueBarrierWithWaitList can be used instead.  If the event_wait_list and the event arguments are not NULL, the event argument should not refer to an element of the event_wait_list array.
        /// </param>
        [AutoGenerated(Category = "", Version = "1.2", EntryPoint = "clEnqueueFillBuffer")]
        [CLSCompliant(false)]
        public static ErrorCode EnqueueFillBuffer(CommandQueue command_queue, ComputeMemory buffer, IntPtr pattern, IntPtr pattern_size, IntPtr size, Int32 num_events_in_wait_list, ref ComputeEvent event_wait_list, [OutAttribute] out ComputeEvent @event) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.2]
        /// Enqueues a command to fill a buffer object with a pattern of a given pattern size.
        /// </summary>
        /// <param name="command_queue"> 
        /// Refers to the command-queue in which the fill command will be queued. The OpenCL context associated with command_queue and buffer must be the same.
        /// </param>
        /// <param name="buffer"> 
        /// A valid buffer object.
        /// </param>
        /// <param name="pattern"> 
        /// A pointer to the data pattern of size pattern_size in bytes. pattern will be used to fill a region in buffer starting at offset and is size bytes in size. The data pattern must be a scalar or vector integer or floating-point data type. For example, if buffer is to be filled with a pattern of float4 values, then pattern will be a pointer to a cl_float4 value and pattern_size will be sizeof(cl_float4).  The maximum value of pattern_size is the size of the largest integer or floating-point vector data type supported by the OpenCL device. The memory associated with pattern can be reused or freed after the function returns.
        /// </param>
        /// <param name="pattern_size"> 
        /// The location in bytes of the region being filled in buffer and must be a multiple of pattern_size.
        /// </param>
        /// <param name="size"> 
        /// The size in bytes of region being filled in buffer and must be a multiple of pattern_size.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event">[length: 1] 
        /// Returns an event object that identifies this particular write command and can be used to query or queue a wait for this particular command to complete. event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete. clEnqueueBarrierWithWaitList can be used instead.  If the event_wait_list and the event arguments are not NULL, the event argument should not refer to an element of the event_wait_list array.
        /// </param>
        [AutoGenerated(Category = "", Version = "1.2", EntryPoint = "clEnqueueFillBuffer")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode EnqueueFillBuffer(CommandQueue command_queue, ComputeMemory buffer, IntPtr pattern, IntPtr pattern_size, IntPtr size, Int32 num_events_in_wait_list, ComputeEvent* event_wait_list, [OutAttribute] ComputeEvent* @event) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.2]
        /// Enqueues a command to fill a buffer object with a pattern of a given pattern size.
        /// </summary>
        /// <param name="command_queue"> 
        /// Refers to the command-queue in which the fill command will be queued. The OpenCL context associated with command_queue and buffer must be the same.
        /// </param>
        /// <param name="buffer"> 
        /// A valid buffer object.
        /// </param>
        /// <param name="pattern"> 
        /// A pointer to the data pattern of size pattern_size in bytes. pattern will be used to fill a region in buffer starting at offset and is size bytes in size. The data pattern must be a scalar or vector integer or floating-point data type. For example, if buffer is to be filled with a pattern of float4 values, then pattern will be a pointer to a cl_float4 value and pattern_size will be sizeof(cl_float4).  The maximum value of pattern_size is the size of the largest integer or floating-point vector data type supported by the OpenCL device. The memory associated with pattern can be reused or freed after the function returns.
        /// </param>
        /// <param name="pattern_size"> 
        /// The location in bytes of the region being filled in buffer and must be a multiple of pattern_size.
        /// </param>
        /// <param name="size"> 
        /// The size in bytes of region being filled in buffer and must be a multiple of pattern_size.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event">[length: 1] 
        /// Returns an event object that identifies this particular write command and can be used to query or queue a wait for this particular command to complete. event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete. clEnqueueBarrierWithWaitList can be used instead.  If the event_wait_list and the event arguments are not NULL, the event argument should not refer to an element of the event_wait_list array.
        /// </param>
        [AutoGenerated(Category = "", Version = "1.2", EntryPoint = "clEnqueueFillBuffer")]
        [CLSCompliant(false)]
        public static ErrorCode EnqueueFillBuffer<T2>(CommandQueue command_queue, ComputeMemory buffer, [InAttribute, OutAttribute] T2[] pattern, IntPtr pattern_size, IntPtr size, Int32 num_events_in_wait_list, ComputeEvent[] event_wait_list, [OutAttribute] out ComputeEvent @event)
            where T2 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.2]
        /// Enqueues a command to fill a buffer object with a pattern of a given pattern size.
        /// </summary>
        /// <param name="command_queue"> 
        /// Refers to the command-queue in which the fill command will be queued. The OpenCL context associated with command_queue and buffer must be the same.
        /// </param>
        /// <param name="buffer"> 
        /// A valid buffer object.
        /// </param>
        /// <param name="pattern"> 
        /// A pointer to the data pattern of size pattern_size in bytes. pattern will be used to fill a region in buffer starting at offset and is size bytes in size. The data pattern must be a scalar or vector integer or floating-point data type. For example, if buffer is to be filled with a pattern of float4 values, then pattern will be a pointer to a cl_float4 value and pattern_size will be sizeof(cl_float4).  The maximum value of pattern_size is the size of the largest integer or floating-point vector data type supported by the OpenCL device. The memory associated with pattern can be reused or freed after the function returns.
        /// </param>
        /// <param name="pattern_size"> 
        /// The location in bytes of the region being filled in buffer and must be a multiple of pattern_size.
        /// </param>
        /// <param name="size"> 
        /// The size in bytes of region being filled in buffer and must be a multiple of pattern_size.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event">[length: 1] 
        /// Returns an event object that identifies this particular write command and can be used to query or queue a wait for this particular command to complete. event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete. clEnqueueBarrierWithWaitList can be used instead.  If the event_wait_list and the event arguments are not NULL, the event argument should not refer to an element of the event_wait_list array.
        /// </param>
        [AutoGenerated(Category = "", Version = "1.2", EntryPoint = "clEnqueueFillBuffer")]
        [CLSCompliant(false)]
        public static ErrorCode EnqueueFillBuffer<T2>(CommandQueue command_queue, ComputeMemory buffer, [InAttribute, OutAttribute] T2[] pattern, IntPtr pattern_size, IntPtr size, Int32 num_events_in_wait_list, ref ComputeEvent event_wait_list, [OutAttribute] out ComputeEvent @event)
            where T2 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.2]
        /// Enqueues a command to fill a buffer object with a pattern of a given pattern size.
        /// </summary>
        /// <param name="command_queue"> 
        /// Refers to the command-queue in which the fill command will be queued. The OpenCL context associated with command_queue and buffer must be the same.
        /// </param>
        /// <param name="buffer"> 
        /// A valid buffer object.
        /// </param>
        /// <param name="pattern"> 
        /// A pointer to the data pattern of size pattern_size in bytes. pattern will be used to fill a region in buffer starting at offset and is size bytes in size. The data pattern must be a scalar or vector integer or floating-point data type. For example, if buffer is to be filled with a pattern of float4 values, then pattern will be a pointer to a cl_float4 value and pattern_size will be sizeof(cl_float4).  The maximum value of pattern_size is the size of the largest integer or floating-point vector data type supported by the OpenCL device. The memory associated with pattern can be reused or freed after the function returns.
        /// </param>
        /// <param name="pattern_size"> 
        /// The location in bytes of the region being filled in buffer and must be a multiple of pattern_size.
        /// </param>
        /// <param name="size"> 
        /// The size in bytes of region being filled in buffer and must be a multiple of pattern_size.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event">[length: 1] 
        /// Returns an event object that identifies this particular write command and can be used to query or queue a wait for this particular command to complete. event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete. clEnqueueBarrierWithWaitList can be used instead.  If the event_wait_list and the event arguments are not NULL, the event argument should not refer to an element of the event_wait_list array.
        /// </param>
        [AutoGenerated(Category = "", Version = "1.2", EntryPoint = "clEnqueueFillBuffer")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode EnqueueFillBuffer<T2>(CommandQueue command_queue, ComputeMemory buffer, [InAttribute, OutAttribute] T2[] pattern, IntPtr pattern_size, IntPtr size, Int32 num_events_in_wait_list, ComputeEvent* event_wait_list, [OutAttribute] ComputeEvent* @event)
            where T2 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.2]
        /// Enqueues a command to fill a buffer object with a pattern of a given pattern size.
        /// </summary>
        /// <param name="command_queue"> 
        /// Refers to the command-queue in which the fill command will be queued. The OpenCL context associated with command_queue and buffer must be the same.
        /// </param>
        /// <param name="buffer"> 
        /// A valid buffer object.
        /// </param>
        /// <param name="pattern"> 
        /// A pointer to the data pattern of size pattern_size in bytes. pattern will be used to fill a region in buffer starting at offset and is size bytes in size. The data pattern must be a scalar or vector integer or floating-point data type. For example, if buffer is to be filled with a pattern of float4 values, then pattern will be a pointer to a cl_float4 value and pattern_size will be sizeof(cl_float4).  The maximum value of pattern_size is the size of the largest integer or floating-point vector data type supported by the OpenCL device. The memory associated with pattern can be reused or freed after the function returns.
        /// </param>
        /// <param name="pattern_size"> 
        /// The location in bytes of the region being filled in buffer and must be a multiple of pattern_size.
        /// </param>
        /// <param name="size"> 
        /// The size in bytes of region being filled in buffer and must be a multiple of pattern_size.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event">[length: 1] 
        /// Returns an event object that identifies this particular write command and can be used to query or queue a wait for this particular command to complete. event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete. clEnqueueBarrierWithWaitList can be used instead.  If the event_wait_list and the event arguments are not NULL, the event argument should not refer to an element of the event_wait_list array.
        /// </param>
        [AutoGenerated(Category = "", Version = "1.2", EntryPoint = "clEnqueueFillBuffer")]
        [CLSCompliant(false)]
        public static ErrorCode EnqueueFillBuffer<T2>(CommandQueue command_queue, ComputeMemory buffer, [InAttribute, OutAttribute] T2[,] pattern, IntPtr pattern_size, IntPtr size, Int32 num_events_in_wait_list, ComputeEvent[] event_wait_list, [OutAttribute] out ComputeEvent @event)
            where T2 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.2]
        /// Enqueues a command to fill a buffer object with a pattern of a given pattern size.
        /// </summary>
        /// <param name="command_queue"> 
        /// Refers to the command-queue in which the fill command will be queued. The OpenCL context associated with command_queue and buffer must be the same.
        /// </param>
        /// <param name="buffer"> 
        /// A valid buffer object.
        /// </param>
        /// <param name="pattern"> 
        /// A pointer to the data pattern of size pattern_size in bytes. pattern will be used to fill a region in buffer starting at offset and is size bytes in size. The data pattern must be a scalar or vector integer or floating-point data type. For example, if buffer is to be filled with a pattern of float4 values, then pattern will be a pointer to a cl_float4 value and pattern_size will be sizeof(cl_float4).  The maximum value of pattern_size is the size of the largest integer or floating-point vector data type supported by the OpenCL device. The memory associated with pattern can be reused or freed after the function returns.
        /// </param>
        /// <param name="pattern_size"> 
        /// The location in bytes of the region being filled in buffer and must be a multiple of pattern_size.
        /// </param>
        /// <param name="size"> 
        /// The size in bytes of region being filled in buffer and must be a multiple of pattern_size.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event">[length: 1] 
        /// Returns an event object that identifies this particular write command and can be used to query or queue a wait for this particular command to complete. event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete. clEnqueueBarrierWithWaitList can be used instead.  If the event_wait_list and the event arguments are not NULL, the event argument should not refer to an element of the event_wait_list array.
        /// </param>
        [AutoGenerated(Category = "", Version = "1.2", EntryPoint = "clEnqueueFillBuffer")]
        [CLSCompliant(false)]
        public static ErrorCode EnqueueFillBuffer<T2>(CommandQueue command_queue, ComputeMemory buffer, [InAttribute, OutAttribute] T2[,] pattern, IntPtr pattern_size, IntPtr size, Int32 num_events_in_wait_list, ref ComputeEvent event_wait_list, [OutAttribute] out ComputeEvent @event)
            where T2 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.2]
        /// Enqueues a command to fill a buffer object with a pattern of a given pattern size.
        /// </summary>
        /// <param name="command_queue"> 
        /// Refers to the command-queue in which the fill command will be queued. The OpenCL context associated with command_queue and buffer must be the same.
        /// </param>
        /// <param name="buffer"> 
        /// A valid buffer object.
        /// </param>
        /// <param name="pattern"> 
        /// A pointer to the data pattern of size pattern_size in bytes. pattern will be used to fill a region in buffer starting at offset and is size bytes in size. The data pattern must be a scalar or vector integer or floating-point data type. For example, if buffer is to be filled with a pattern of float4 values, then pattern will be a pointer to a cl_float4 value and pattern_size will be sizeof(cl_float4).  The maximum value of pattern_size is the size of the largest integer or floating-point vector data type supported by the OpenCL device. The memory associated with pattern can be reused or freed after the function returns.
        /// </param>
        /// <param name="pattern_size"> 
        /// The location in bytes of the region being filled in buffer and must be a multiple of pattern_size.
        /// </param>
        /// <param name="size"> 
        /// The size in bytes of region being filled in buffer and must be a multiple of pattern_size.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event">[length: 1] 
        /// Returns an event object that identifies this particular write command and can be used to query or queue a wait for this particular command to complete. event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete. clEnqueueBarrierWithWaitList can be used instead.  If the event_wait_list and the event arguments are not NULL, the event argument should not refer to an element of the event_wait_list array.
        /// </param>
        [AutoGenerated(Category = "", Version = "1.2", EntryPoint = "clEnqueueFillBuffer")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode EnqueueFillBuffer<T2>(CommandQueue command_queue, ComputeMemory buffer, [InAttribute, OutAttribute] T2[,] pattern, IntPtr pattern_size, IntPtr size, Int32 num_events_in_wait_list, ComputeEvent* event_wait_list, [OutAttribute] ComputeEvent* @event)
            where T2 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.2]
        /// Enqueues a command to fill a buffer object with a pattern of a given pattern size.
        /// </summary>
        /// <param name="command_queue"> 
        /// Refers to the command-queue in which the fill command will be queued. The OpenCL context associated with command_queue and buffer must be the same.
        /// </param>
        /// <param name="buffer"> 
        /// A valid buffer object.
        /// </param>
        /// <param name="pattern"> 
        /// A pointer to the data pattern of size pattern_size in bytes. pattern will be used to fill a region in buffer starting at offset and is size bytes in size. The data pattern must be a scalar or vector integer or floating-point data type. For example, if buffer is to be filled with a pattern of float4 values, then pattern will be a pointer to a cl_float4 value and pattern_size will be sizeof(cl_float4).  The maximum value of pattern_size is the size of the largest integer or floating-point vector data type supported by the OpenCL device. The memory associated with pattern can be reused or freed after the function returns.
        /// </param>
        /// <param name="pattern_size"> 
        /// The location in bytes of the region being filled in buffer and must be a multiple of pattern_size.
        /// </param>
        /// <param name="size"> 
        /// The size in bytes of region being filled in buffer and must be a multiple of pattern_size.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event">[length: 1] 
        /// Returns an event object that identifies this particular write command and can be used to query or queue a wait for this particular command to complete. event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete. clEnqueueBarrierWithWaitList can be used instead.  If the event_wait_list and the event arguments are not NULL, the event argument should not refer to an element of the event_wait_list array.
        /// </param>
        [AutoGenerated(Category = "", Version = "1.2", EntryPoint = "clEnqueueFillBuffer")]
        [CLSCompliant(false)]
        public static ErrorCode EnqueueFillBuffer<T2>(CommandQueue command_queue, ComputeMemory buffer, [InAttribute, OutAttribute] T2[,,] pattern, IntPtr pattern_size, IntPtr size, Int32 num_events_in_wait_list, ComputeEvent[] event_wait_list, [OutAttribute] out ComputeEvent @event)
            where T2 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.2]
        /// Enqueues a command to fill a buffer object with a pattern of a given pattern size.
        /// </summary>
        /// <param name="command_queue"> 
        /// Refers to the command-queue in which the fill command will be queued. The OpenCL context associated with command_queue and buffer must be the same.
        /// </param>
        /// <param name="buffer"> 
        /// A valid buffer object.
        /// </param>
        /// <param name="pattern"> 
        /// A pointer to the data pattern of size pattern_size in bytes. pattern will be used to fill a region in buffer starting at offset and is size bytes in size. The data pattern must be a scalar or vector integer or floating-point data type. For example, if buffer is to be filled with a pattern of float4 values, then pattern will be a pointer to a cl_float4 value and pattern_size will be sizeof(cl_float4).  The maximum value of pattern_size is the size of the largest integer or floating-point vector data type supported by the OpenCL device. The memory associated with pattern can be reused or freed after the function returns.
        /// </param>
        /// <param name="pattern_size"> 
        /// The location in bytes of the region being filled in buffer and must be a multiple of pattern_size.
        /// </param>
        /// <param name="size"> 
        /// The size in bytes of region being filled in buffer and must be a multiple of pattern_size.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event">[length: 1] 
        /// Returns an event object that identifies this particular write command and can be used to query or queue a wait for this particular command to complete. event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete. clEnqueueBarrierWithWaitList can be used instead.  If the event_wait_list and the event arguments are not NULL, the event argument should not refer to an element of the event_wait_list array.
        /// </param>
        [AutoGenerated(Category = "", Version = "1.2", EntryPoint = "clEnqueueFillBuffer")]
        [CLSCompliant(false)]
        public static ErrorCode EnqueueFillBuffer<T2>(CommandQueue command_queue, ComputeMemory buffer, [InAttribute, OutAttribute] T2[,,] pattern, IntPtr pattern_size, IntPtr size, Int32 num_events_in_wait_list, ref ComputeEvent event_wait_list, [OutAttribute] out ComputeEvent @event)
            where T2 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.2]
        /// Enqueues a command to fill a buffer object with a pattern of a given pattern size.
        /// </summary>
        /// <param name="command_queue"> 
        /// Refers to the command-queue in which the fill command will be queued. The OpenCL context associated with command_queue and buffer must be the same.
        /// </param>
        /// <param name="buffer"> 
        /// A valid buffer object.
        /// </param>
        /// <param name="pattern"> 
        /// A pointer to the data pattern of size pattern_size in bytes. pattern will be used to fill a region in buffer starting at offset and is size bytes in size. The data pattern must be a scalar or vector integer or floating-point data type. For example, if buffer is to be filled with a pattern of float4 values, then pattern will be a pointer to a cl_float4 value and pattern_size will be sizeof(cl_float4).  The maximum value of pattern_size is the size of the largest integer or floating-point vector data type supported by the OpenCL device. The memory associated with pattern can be reused or freed after the function returns.
        /// </param>
        /// <param name="pattern_size"> 
        /// The location in bytes of the region being filled in buffer and must be a multiple of pattern_size.
        /// </param>
        /// <param name="size"> 
        /// The size in bytes of region being filled in buffer and must be a multiple of pattern_size.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event">[length: 1] 
        /// Returns an event object that identifies this particular write command and can be used to query or queue a wait for this particular command to complete. event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete. clEnqueueBarrierWithWaitList can be used instead.  If the event_wait_list and the event arguments are not NULL, the event argument should not refer to an element of the event_wait_list array.
        /// </param>
        [AutoGenerated(Category = "", Version = "1.2", EntryPoint = "clEnqueueFillBuffer")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode EnqueueFillBuffer<T2>(CommandQueue command_queue, ComputeMemory buffer, [InAttribute, OutAttribute] T2[,,] pattern, IntPtr pattern_size, IntPtr size, Int32 num_events_in_wait_list, ComputeEvent* event_wait_list, [OutAttribute] ComputeEvent* @event)
            where T2 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.2]
        /// Enqueues a command to fill a buffer object with a pattern of a given pattern size.
        /// </summary>
        /// <param name="command_queue"> 
        /// Refers to the command-queue in which the fill command will be queued. The OpenCL context associated with command_queue and buffer must be the same.
        /// </param>
        /// <param name="buffer"> 
        /// A valid buffer object.
        /// </param>
        /// <param name="pattern"> 
        /// A pointer to the data pattern of size pattern_size in bytes. pattern will be used to fill a region in buffer starting at offset and is size bytes in size. The data pattern must be a scalar or vector integer or floating-point data type. For example, if buffer is to be filled with a pattern of float4 values, then pattern will be a pointer to a cl_float4 value and pattern_size will be sizeof(cl_float4).  The maximum value of pattern_size is the size of the largest integer or floating-point vector data type supported by the OpenCL device. The memory associated with pattern can be reused or freed after the function returns.
        /// </param>
        /// <param name="pattern_size"> 
        /// The location in bytes of the region being filled in buffer and must be a multiple of pattern_size.
        /// </param>
        /// <param name="size"> 
        /// The size in bytes of region being filled in buffer and must be a multiple of pattern_size.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event">[length: 1] 
        /// Returns an event object that identifies this particular write command and can be used to query or queue a wait for this particular command to complete. event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete. clEnqueueBarrierWithWaitList can be used instead.  If the event_wait_list and the event arguments are not NULL, the event argument should not refer to an element of the event_wait_list array.
        /// </param>
        [AutoGenerated(Category = "", Version = "1.2", EntryPoint = "clEnqueueFillBuffer")]
        [CLSCompliant(false)]
        public static ErrorCode EnqueueFillBuffer<T2>(CommandQueue command_queue, ComputeMemory buffer, [InAttribute, OutAttribute] ref T2 pattern, IntPtr pattern_size, IntPtr size, Int32 num_events_in_wait_list, ComputeEvent[] event_wait_list, [OutAttribute] out ComputeEvent @event)
            where T2 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.2]
        /// Enqueues a command to fill a buffer object with a pattern of a given pattern size.
        /// </summary>
        /// <param name="command_queue"> 
        /// Refers to the command-queue in which the fill command will be queued. The OpenCL context associated with command_queue and buffer must be the same.
        /// </param>
        /// <param name="buffer"> 
        /// A valid buffer object.
        /// </param>
        /// <param name="pattern"> 
        /// A pointer to the data pattern of size pattern_size in bytes. pattern will be used to fill a region in buffer starting at offset and is size bytes in size. The data pattern must be a scalar or vector integer or floating-point data type. For example, if buffer is to be filled with a pattern of float4 values, then pattern will be a pointer to a cl_float4 value and pattern_size will be sizeof(cl_float4).  The maximum value of pattern_size is the size of the largest integer or floating-point vector data type supported by the OpenCL device. The memory associated with pattern can be reused or freed after the function returns.
        /// </param>
        /// <param name="pattern_size"> 
        /// The location in bytes of the region being filled in buffer and must be a multiple of pattern_size.
        /// </param>
        /// <param name="size"> 
        /// The size in bytes of region being filled in buffer and must be a multiple of pattern_size.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event">[length: 1] 
        /// Returns an event object that identifies this particular write command and can be used to query or queue a wait for this particular command to complete. event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete. clEnqueueBarrierWithWaitList can be used instead.  If the event_wait_list and the event arguments are not NULL, the event argument should not refer to an element of the event_wait_list array.
        /// </param>
        [AutoGenerated(Category = "", Version = "1.2", EntryPoint = "clEnqueueFillBuffer")]
        [CLSCompliant(false)]
        public static ErrorCode EnqueueFillBuffer<T2>(CommandQueue command_queue, ComputeMemory buffer, [InAttribute, OutAttribute] ref T2 pattern, IntPtr pattern_size, IntPtr size, Int32 num_events_in_wait_list, ref ComputeEvent event_wait_list, [OutAttribute] out ComputeEvent @event)
            where T2 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.2]
        /// Enqueues a command to fill a buffer object with a pattern of a given pattern size.
        /// </summary>
        /// <param name="command_queue"> 
        /// Refers to the command-queue in which the fill command will be queued. The OpenCL context associated with command_queue and buffer must be the same.
        /// </param>
        /// <param name="buffer"> 
        /// A valid buffer object.
        /// </param>
        /// <param name="pattern"> 
        /// A pointer to the data pattern of size pattern_size in bytes. pattern will be used to fill a region in buffer starting at offset and is size bytes in size. The data pattern must be a scalar or vector integer or floating-point data type. For example, if buffer is to be filled with a pattern of float4 values, then pattern will be a pointer to a cl_float4 value and pattern_size will be sizeof(cl_float4).  The maximum value of pattern_size is the size of the largest integer or floating-point vector data type supported by the OpenCL device. The memory associated with pattern can be reused or freed after the function returns.
        /// </param>
        /// <param name="pattern_size"> 
        /// The location in bytes of the region being filled in buffer and must be a multiple of pattern_size.
        /// </param>
        /// <param name="size"> 
        /// The size in bytes of region being filled in buffer and must be a multiple of pattern_size.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event">[length: 1] 
        /// Returns an event object that identifies this particular write command and can be used to query or queue a wait for this particular command to complete. event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete. clEnqueueBarrierWithWaitList can be used instead.  If the event_wait_list and the event arguments are not NULL, the event argument should not refer to an element of the event_wait_list array.
        /// </param>
        [AutoGenerated(Category = "", Version = "1.2", EntryPoint = "clEnqueueFillBuffer")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode EnqueueFillBuffer<T2>(CommandQueue command_queue, ComputeMemory buffer, [InAttribute, OutAttribute] ref T2 pattern, IntPtr pattern_size, IntPtr size, Int32 num_events_in_wait_list, ComputeEvent* event_wait_list, [OutAttribute] ComputeEvent* @event)
            where T2 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.2]
        /// Enqueues a command to fill an image object with a specified color.
        /// </summary>
        /// <param name="command_queue"> 
        /// Refers to the command-queue in which the fill command will be queued.  The OpenCL context associated with command_queue and image must be the same.
        /// </param>
        /// <param name="buffer"> 
        /// A valid image object.
        /// </param>
        /// <param name="fill_color"> 
        /// The fill color. The fill color is a four component RGBA floating-point color value if the image channel data type is not an unnormalized signed and unsigned integer type, is a four component signed integer value if the image channel data type is an unnormalized signed integer type and is a four component unsigned integer value if the image channel data type is an unormalized unsigned integer type.  The fill color will be converted to the appropriate image channel format and order associated with image.
        /// </param>
        /// <param name="origin">[length: 3] 
        /// Defines the (x, y, z) offset in pixels in the 1D, 2D, or 3D image, the (x, y) offset and the image index in the image array or the (x) offset and the image index in the 1D image array.  If image is a 2D image object, origin[2] must be 0. If image is a 1D image or 1D image buffer object, origin[1] and origin[2] must be 0. If image is a 1D image array object, origin[2] must be 0.  If image is a 1D image array object, origin[1] describes the image index in the 1D image array. If image is a 2D image array object, origin[2] describes the image index in the 2D image array.
        /// </param>
        /// <param name="region">[length: 3] 
        /// Defines the (width, height, depth) in pixels of the 1D, 2D or 3D rectangle, the (width, height) in pixels of the 2D rectangle and the number of images of a 2D image array or the (width) in pixels of the 1D rectangle and the number of images of a 1D image array. If image is a 2D image object, region[2] must be 1.  If image is a 1D image or 1D image buffer object, region[1] and region[2] must be 1.  If image is a 1D image array object, region[2] must be 1.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event">[length: 1] 
        /// Returns an event object that identifies this particular write command and can be used to query or queue a wait for this particular command to complete. event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete. clEnqueueBarrierWithWaitList can be used instead.  If the event_wait_list and the event arguments are not NULL, the event argument should not refer to an element of the event_wait_list array.
        /// </param>
        [AutoGenerated(Category = "", Version = "1.2", EntryPoint = "clEnqueueFillImage")]
        [CLSCompliant(false)]
        public static ErrorCode EnqueueFillImage(CommandQueue command_queue, ComputeMemory buffer, IntPtr fill_color, IntPtr[] origin, IntPtr[] region, Int32 num_events_in_wait_list, ComputeEvent[] event_wait_list, [OutAttribute] out ComputeEvent @event) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.2]
        /// Enqueues a command to fill an image object with a specified color.
        /// </summary>
        /// <param name="command_queue"> 
        /// Refers to the command-queue in which the fill command will be queued.  The OpenCL context associated with command_queue and image must be the same.
        /// </param>
        /// <param name="buffer"> 
        /// A valid image object.
        /// </param>
        /// <param name="fill_color"> 
        /// The fill color. The fill color is a four component RGBA floating-point color value if the image channel data type is not an unnormalized signed and unsigned integer type, is a four component signed integer value if the image channel data type is an unnormalized signed integer type and is a four component unsigned integer value if the image channel data type is an unormalized unsigned integer type.  The fill color will be converted to the appropriate image channel format and order associated with image.
        /// </param>
        /// <param name="origin">[length: 3] 
        /// Defines the (x, y, z) offset in pixels in the 1D, 2D, or 3D image, the (x, y) offset and the image index in the image array or the (x) offset and the image index in the 1D image array.  If image is a 2D image object, origin[2] must be 0. If image is a 1D image or 1D image buffer object, origin[1] and origin[2] must be 0. If image is a 1D image array object, origin[2] must be 0.  If image is a 1D image array object, origin[1] describes the image index in the 1D image array. If image is a 2D image array object, origin[2] describes the image index in the 2D image array.
        /// </param>
        /// <param name="region">[length: 3] 
        /// Defines the (width, height, depth) in pixels of the 1D, 2D or 3D rectangle, the (width, height) in pixels of the 2D rectangle and the number of images of a 2D image array or the (width) in pixels of the 1D rectangle and the number of images of a 1D image array. If image is a 2D image object, region[2] must be 1.  If image is a 1D image or 1D image buffer object, region[1] and region[2] must be 1.  If image is a 1D image array object, region[2] must be 1.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event">[length: 1] 
        /// Returns an event object that identifies this particular write command and can be used to query or queue a wait for this particular command to complete. event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete. clEnqueueBarrierWithWaitList can be used instead.  If the event_wait_list and the event arguments are not NULL, the event argument should not refer to an element of the event_wait_list array.
        /// </param>
        [AutoGenerated(Category = "", Version = "1.2", EntryPoint = "clEnqueueFillImage")]
        [CLSCompliant(false)]
        public static ErrorCode EnqueueFillImage(CommandQueue command_queue, ComputeMemory buffer, IntPtr fill_color, ref IntPtr origin, ref IntPtr region, Int32 num_events_in_wait_list, ref ComputeEvent event_wait_list, [OutAttribute] out ComputeEvent @event) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.2]
        /// Enqueues a command to fill an image object with a specified color.
        /// </summary>
        /// <param name="command_queue"> 
        /// Refers to the command-queue in which the fill command will be queued.  The OpenCL context associated with command_queue and image must be the same.
        /// </param>
        /// <param name="buffer"> 
        /// A valid image object.
        /// </param>
        /// <param name="fill_color"> 
        /// The fill color. The fill color is a four component RGBA floating-point color value if the image channel data type is not an unnormalized signed and unsigned integer type, is a four component signed integer value if the image channel data type is an unnormalized signed integer type and is a four component unsigned integer value if the image channel data type is an unormalized unsigned integer type.  The fill color will be converted to the appropriate image channel format and order associated with image.
        /// </param>
        /// <param name="origin">[length: 3] 
        /// Defines the (x, y, z) offset in pixels in the 1D, 2D, or 3D image, the (x, y) offset and the image index in the image array or the (x) offset and the image index in the 1D image array.  If image is a 2D image object, origin[2] must be 0. If image is a 1D image or 1D image buffer object, origin[1] and origin[2] must be 0. If image is a 1D image array object, origin[2] must be 0.  If image is a 1D image array object, origin[1] describes the image index in the 1D image array. If image is a 2D image array object, origin[2] describes the image index in the 2D image array.
        /// </param>
        /// <param name="region">[length: 3] 
        /// Defines the (width, height, depth) in pixels of the 1D, 2D or 3D rectangle, the (width, height) in pixels of the 2D rectangle and the number of images of a 2D image array or the (width) in pixels of the 1D rectangle and the number of images of a 1D image array. If image is a 2D image object, region[2] must be 1.  If image is a 1D image or 1D image buffer object, region[1] and region[2] must be 1.  If image is a 1D image array object, region[2] must be 1.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event">[length: 1] 
        /// Returns an event object that identifies this particular write command and can be used to query or queue a wait for this particular command to complete. event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete. clEnqueueBarrierWithWaitList can be used instead.  If the event_wait_list and the event arguments are not NULL, the event argument should not refer to an element of the event_wait_list array.
        /// </param>
        [AutoGenerated(Category = "", Version = "1.2", EntryPoint = "clEnqueueFillImage")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode EnqueueFillImage(CommandQueue command_queue, ComputeMemory buffer, IntPtr fill_color, IntPtr* origin, IntPtr* region, Int32 num_events_in_wait_list, ComputeEvent* event_wait_list, [OutAttribute] ComputeEvent* @event) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.2]
        /// Enqueues a command to fill an image object with a specified color.
        /// </summary>
        /// <param name="command_queue"> 
        /// Refers to the command-queue in which the fill command will be queued.  The OpenCL context associated with command_queue and image must be the same.
        /// </param>
        /// <param name="buffer"> 
        /// A valid image object.
        /// </param>
        /// <param name="fill_color"> 
        /// The fill color. The fill color is a four component RGBA floating-point color value if the image channel data type is not an unnormalized signed and unsigned integer type, is a four component signed integer value if the image channel data type is an unnormalized signed integer type and is a four component unsigned integer value if the image channel data type is an unormalized unsigned integer type.  The fill color will be converted to the appropriate image channel format and order associated with image.
        /// </param>
        /// <param name="origin">[length: 3] 
        /// Defines the (x, y, z) offset in pixels in the 1D, 2D, or 3D image, the (x, y) offset and the image index in the image array or the (x) offset and the image index in the 1D image array.  If image is a 2D image object, origin[2] must be 0. If image is a 1D image or 1D image buffer object, origin[1] and origin[2] must be 0. If image is a 1D image array object, origin[2] must be 0.  If image is a 1D image array object, origin[1] describes the image index in the 1D image array. If image is a 2D image array object, origin[2] describes the image index in the 2D image array.
        /// </param>
        /// <param name="region">[length: 3] 
        /// Defines the (width, height, depth) in pixels of the 1D, 2D or 3D rectangle, the (width, height) in pixels of the 2D rectangle and the number of images of a 2D image array or the (width) in pixels of the 1D rectangle and the number of images of a 1D image array. If image is a 2D image object, region[2] must be 1.  If image is a 1D image or 1D image buffer object, region[1] and region[2] must be 1.  If image is a 1D image array object, region[2] must be 1.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event">[length: 1] 
        /// Returns an event object that identifies this particular write command and can be used to query or queue a wait for this particular command to complete. event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete. clEnqueueBarrierWithWaitList can be used instead.  If the event_wait_list and the event arguments are not NULL, the event argument should not refer to an element of the event_wait_list array.
        /// </param>
        [AutoGenerated(Category = "", Version = "1.2", EntryPoint = "clEnqueueFillImage")]
        [CLSCompliant(false)]
        public static ErrorCode EnqueueFillImage<T2>(CommandQueue command_queue, ComputeMemory buffer, [InAttribute, OutAttribute] T2[] fill_color, IntPtr[] origin, IntPtr[] region, Int32 num_events_in_wait_list, ComputeEvent[] event_wait_list, [OutAttribute] out ComputeEvent @event)
            where T2 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.2]
        /// Enqueues a command to fill an image object with a specified color.
        /// </summary>
        /// <param name="command_queue"> 
        /// Refers to the command-queue in which the fill command will be queued.  The OpenCL context associated with command_queue and image must be the same.
        /// </param>
        /// <param name="buffer"> 
        /// A valid image object.
        /// </param>
        /// <param name="fill_color"> 
        /// The fill color. The fill color is a four component RGBA floating-point color value if the image channel data type is not an unnormalized signed and unsigned integer type, is a four component signed integer value if the image channel data type is an unnormalized signed integer type and is a four component unsigned integer value if the image channel data type is an unormalized unsigned integer type.  The fill color will be converted to the appropriate image channel format and order associated with image.
        /// </param>
        /// <param name="origin">[length: 3] 
        /// Defines the (x, y, z) offset in pixels in the 1D, 2D, or 3D image, the (x, y) offset and the image index in the image array or the (x) offset and the image index in the 1D image array.  If image is a 2D image object, origin[2] must be 0. If image is a 1D image or 1D image buffer object, origin[1] and origin[2] must be 0. If image is a 1D image array object, origin[2] must be 0.  If image is a 1D image array object, origin[1] describes the image index in the 1D image array. If image is a 2D image array object, origin[2] describes the image index in the 2D image array.
        /// </param>
        /// <param name="region">[length: 3] 
        /// Defines the (width, height, depth) in pixels of the 1D, 2D or 3D rectangle, the (width, height) in pixels of the 2D rectangle and the number of images of a 2D image array or the (width) in pixels of the 1D rectangle and the number of images of a 1D image array. If image is a 2D image object, region[2] must be 1.  If image is a 1D image or 1D image buffer object, region[1] and region[2] must be 1.  If image is a 1D image array object, region[2] must be 1.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event">[length: 1] 
        /// Returns an event object that identifies this particular write command and can be used to query or queue a wait for this particular command to complete. event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete. clEnqueueBarrierWithWaitList can be used instead.  If the event_wait_list and the event arguments are not NULL, the event argument should not refer to an element of the event_wait_list array.
        /// </param>
        [AutoGenerated(Category = "", Version = "1.2", EntryPoint = "clEnqueueFillImage")]
        [CLSCompliant(false)]
        public static ErrorCode EnqueueFillImage<T2>(CommandQueue command_queue, ComputeMemory buffer, [InAttribute, OutAttribute] T2[] fill_color, ref IntPtr origin, ref IntPtr region, Int32 num_events_in_wait_list, ref ComputeEvent event_wait_list, [OutAttribute] out ComputeEvent @event)
            where T2 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.2]
        /// Enqueues a command to fill an image object with a specified color.
        /// </summary>
        /// <param name="command_queue"> 
        /// Refers to the command-queue in which the fill command will be queued.  The OpenCL context associated with command_queue and image must be the same.
        /// </param>
        /// <param name="buffer"> 
        /// A valid image object.
        /// </param>
        /// <param name="fill_color"> 
        /// The fill color. The fill color is a four component RGBA floating-point color value if the image channel data type is not an unnormalized signed and unsigned integer type, is a four component signed integer value if the image channel data type is an unnormalized signed integer type and is a four component unsigned integer value if the image channel data type is an unormalized unsigned integer type.  The fill color will be converted to the appropriate image channel format and order associated with image.
        /// </param>
        /// <param name="origin">[length: 3] 
        /// Defines the (x, y, z) offset in pixels in the 1D, 2D, or 3D image, the (x, y) offset and the image index in the image array or the (x) offset and the image index in the 1D image array.  If image is a 2D image object, origin[2] must be 0. If image is a 1D image or 1D image buffer object, origin[1] and origin[2] must be 0. If image is a 1D image array object, origin[2] must be 0.  If image is a 1D image array object, origin[1] describes the image index in the 1D image array. If image is a 2D image array object, origin[2] describes the image index in the 2D image array.
        /// </param>
        /// <param name="region">[length: 3] 
        /// Defines the (width, height, depth) in pixels of the 1D, 2D or 3D rectangle, the (width, height) in pixels of the 2D rectangle and the number of images of a 2D image array or the (width) in pixels of the 1D rectangle and the number of images of a 1D image array. If image is a 2D image object, region[2] must be 1.  If image is a 1D image or 1D image buffer object, region[1] and region[2] must be 1.  If image is a 1D image array object, region[2] must be 1.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event">[length: 1] 
        /// Returns an event object that identifies this particular write command and can be used to query or queue a wait for this particular command to complete. event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete. clEnqueueBarrierWithWaitList can be used instead.  If the event_wait_list and the event arguments are not NULL, the event argument should not refer to an element of the event_wait_list array.
        /// </param>
        [AutoGenerated(Category = "", Version = "1.2", EntryPoint = "clEnqueueFillImage")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode EnqueueFillImage<T2>(CommandQueue command_queue, ComputeMemory buffer, [InAttribute, OutAttribute] T2[] fill_color, IntPtr* origin, IntPtr* region, Int32 num_events_in_wait_list, ComputeEvent* event_wait_list, [OutAttribute] ComputeEvent* @event)
            where T2 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.2]
        /// Enqueues a command to fill an image object with a specified color.
        /// </summary>
        /// <param name="command_queue"> 
        /// Refers to the command-queue in which the fill command will be queued.  The OpenCL context associated with command_queue and image must be the same.
        /// </param>
        /// <param name="buffer"> 
        /// A valid image object.
        /// </param>
        /// <param name="fill_color"> 
        /// The fill color. The fill color is a four component RGBA floating-point color value if the image channel data type is not an unnormalized signed and unsigned integer type, is a four component signed integer value if the image channel data type is an unnormalized signed integer type and is a four component unsigned integer value if the image channel data type is an unormalized unsigned integer type.  The fill color will be converted to the appropriate image channel format and order associated with image.
        /// </param>
        /// <param name="origin">[length: 3] 
        /// Defines the (x, y, z) offset in pixels in the 1D, 2D, or 3D image, the (x, y) offset and the image index in the image array or the (x) offset and the image index in the 1D image array.  If image is a 2D image object, origin[2] must be 0. If image is a 1D image or 1D image buffer object, origin[1] and origin[2] must be 0. If image is a 1D image array object, origin[2] must be 0.  If image is a 1D image array object, origin[1] describes the image index in the 1D image array. If image is a 2D image array object, origin[2] describes the image index in the 2D image array.
        /// </param>
        /// <param name="region">[length: 3] 
        /// Defines the (width, height, depth) in pixels of the 1D, 2D or 3D rectangle, the (width, height) in pixels of the 2D rectangle and the number of images of a 2D image array or the (width) in pixels of the 1D rectangle and the number of images of a 1D image array. If image is a 2D image object, region[2] must be 1.  If image is a 1D image or 1D image buffer object, region[1] and region[2] must be 1.  If image is a 1D image array object, region[2] must be 1.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event">[length: 1] 
        /// Returns an event object that identifies this particular write command and can be used to query or queue a wait for this particular command to complete. event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete. clEnqueueBarrierWithWaitList can be used instead.  If the event_wait_list and the event arguments are not NULL, the event argument should not refer to an element of the event_wait_list array.
        /// </param>
        [AutoGenerated(Category = "", Version = "1.2", EntryPoint = "clEnqueueFillImage")]
        [CLSCompliant(false)]
        public static ErrorCode EnqueueFillImage<T2>(CommandQueue command_queue, ComputeMemory buffer, [InAttribute, OutAttribute] T2[,] fill_color, IntPtr[] origin, IntPtr[] region, Int32 num_events_in_wait_list, ComputeEvent[] event_wait_list, [OutAttribute] out ComputeEvent @event)
            where T2 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.2]
        /// Enqueues a command to fill an image object with a specified color.
        /// </summary>
        /// <param name="command_queue"> 
        /// Refers to the command-queue in which the fill command will be queued.  The OpenCL context associated with command_queue and image must be the same.
        /// </param>
        /// <param name="buffer"> 
        /// A valid image object.
        /// </param>
        /// <param name="fill_color"> 
        /// The fill color. The fill color is a four component RGBA floating-point color value if the image channel data type is not an unnormalized signed and unsigned integer type, is a four component signed integer value if the image channel data type is an unnormalized signed integer type and is a four component unsigned integer value if the image channel data type is an unormalized unsigned integer type.  The fill color will be converted to the appropriate image channel format and order associated with image.
        /// </param>
        /// <param name="origin">[length: 3] 
        /// Defines the (x, y, z) offset in pixels in the 1D, 2D, or 3D image, the (x, y) offset and the image index in the image array or the (x) offset and the image index in the 1D image array.  If image is a 2D image object, origin[2] must be 0. If image is a 1D image or 1D image buffer object, origin[1] and origin[2] must be 0. If image is a 1D image array object, origin[2] must be 0.  If image is a 1D image array object, origin[1] describes the image index in the 1D image array. If image is a 2D image array object, origin[2] describes the image index in the 2D image array.
        /// </param>
        /// <param name="region">[length: 3] 
        /// Defines the (width, height, depth) in pixels of the 1D, 2D or 3D rectangle, the (width, height) in pixels of the 2D rectangle and the number of images of a 2D image array or the (width) in pixels of the 1D rectangle and the number of images of a 1D image array. If image is a 2D image object, region[2] must be 1.  If image is a 1D image or 1D image buffer object, region[1] and region[2] must be 1.  If image is a 1D image array object, region[2] must be 1.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event">[length: 1] 
        /// Returns an event object that identifies this particular write command and can be used to query or queue a wait for this particular command to complete. event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete. clEnqueueBarrierWithWaitList can be used instead.  If the event_wait_list and the event arguments are not NULL, the event argument should not refer to an element of the event_wait_list array.
        /// </param>
        [AutoGenerated(Category = "", Version = "1.2", EntryPoint = "clEnqueueFillImage")]
        [CLSCompliant(false)]
        public static ErrorCode EnqueueFillImage<T2>(CommandQueue command_queue, ComputeMemory buffer, [InAttribute, OutAttribute] T2[,] fill_color, ref IntPtr origin, ref IntPtr region, Int32 num_events_in_wait_list, ref ComputeEvent event_wait_list, [OutAttribute] out ComputeEvent @event)
            where T2 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.2]
        /// Enqueues a command to fill an image object with a specified color.
        /// </summary>
        /// <param name="command_queue"> 
        /// Refers to the command-queue in which the fill command will be queued.  The OpenCL context associated with command_queue and image must be the same.
        /// </param>
        /// <param name="buffer"> 
        /// A valid image object.
        /// </param>
        /// <param name="fill_color"> 
        /// The fill color. The fill color is a four component RGBA floating-point color value if the image channel data type is not an unnormalized signed and unsigned integer type, is a four component signed integer value if the image channel data type is an unnormalized signed integer type and is a four component unsigned integer value if the image channel data type is an unormalized unsigned integer type.  The fill color will be converted to the appropriate image channel format and order associated with image.
        /// </param>
        /// <param name="origin">[length: 3] 
        /// Defines the (x, y, z) offset in pixels in the 1D, 2D, or 3D image, the (x, y) offset and the image index in the image array or the (x) offset and the image index in the 1D image array.  If image is a 2D image object, origin[2] must be 0. If image is a 1D image or 1D image buffer object, origin[1] and origin[2] must be 0. If image is a 1D image array object, origin[2] must be 0.  If image is a 1D image array object, origin[1] describes the image index in the 1D image array. If image is a 2D image array object, origin[2] describes the image index in the 2D image array.
        /// </param>
        /// <param name="region">[length: 3] 
        /// Defines the (width, height, depth) in pixels of the 1D, 2D or 3D rectangle, the (width, height) in pixels of the 2D rectangle and the number of images of a 2D image array or the (width) in pixels of the 1D rectangle and the number of images of a 1D image array. If image is a 2D image object, region[2] must be 1.  If image is a 1D image or 1D image buffer object, region[1] and region[2] must be 1.  If image is a 1D image array object, region[2] must be 1.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event">[length: 1] 
        /// Returns an event object that identifies this particular write command and can be used to query or queue a wait for this particular command to complete. event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete. clEnqueueBarrierWithWaitList can be used instead.  If the event_wait_list and the event arguments are not NULL, the event argument should not refer to an element of the event_wait_list array.
        /// </param>
        [AutoGenerated(Category = "", Version = "1.2", EntryPoint = "clEnqueueFillImage")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode EnqueueFillImage<T2>(CommandQueue command_queue, ComputeMemory buffer, [InAttribute, OutAttribute] T2[,] fill_color, IntPtr* origin, IntPtr* region, Int32 num_events_in_wait_list, ComputeEvent* event_wait_list, [OutAttribute] ComputeEvent* @event)
            where T2 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.2]
        /// Enqueues a command to fill an image object with a specified color.
        /// </summary>
        /// <param name="command_queue"> 
        /// Refers to the command-queue in which the fill command will be queued.  The OpenCL context associated with command_queue and image must be the same.
        /// </param>
        /// <param name="buffer"> 
        /// A valid image object.
        /// </param>
        /// <param name="fill_color"> 
        /// The fill color. The fill color is a four component RGBA floating-point color value if the image channel data type is not an unnormalized signed and unsigned integer type, is a four component signed integer value if the image channel data type is an unnormalized signed integer type and is a four component unsigned integer value if the image channel data type is an unormalized unsigned integer type.  The fill color will be converted to the appropriate image channel format and order associated with image.
        /// </param>
        /// <param name="origin">[length: 3] 
        /// Defines the (x, y, z) offset in pixels in the 1D, 2D, or 3D image, the (x, y) offset and the image index in the image array or the (x) offset and the image index in the 1D image array.  If image is a 2D image object, origin[2] must be 0. If image is a 1D image or 1D image buffer object, origin[1] and origin[2] must be 0. If image is a 1D image array object, origin[2] must be 0.  If image is a 1D image array object, origin[1] describes the image index in the 1D image array. If image is a 2D image array object, origin[2] describes the image index in the 2D image array.
        /// </param>
        /// <param name="region">[length: 3] 
        /// Defines the (width, height, depth) in pixels of the 1D, 2D or 3D rectangle, the (width, height) in pixels of the 2D rectangle and the number of images of a 2D image array or the (width) in pixels of the 1D rectangle and the number of images of a 1D image array. If image is a 2D image object, region[2] must be 1.  If image is a 1D image or 1D image buffer object, region[1] and region[2] must be 1.  If image is a 1D image array object, region[2] must be 1.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event">[length: 1] 
        /// Returns an event object that identifies this particular write command and can be used to query or queue a wait for this particular command to complete. event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete. clEnqueueBarrierWithWaitList can be used instead.  If the event_wait_list and the event arguments are not NULL, the event argument should not refer to an element of the event_wait_list array.
        /// </param>
        [AutoGenerated(Category = "", Version = "1.2", EntryPoint = "clEnqueueFillImage")]
        [CLSCompliant(false)]
        public static ErrorCode EnqueueFillImage<T2>(CommandQueue command_queue, ComputeMemory buffer, [InAttribute, OutAttribute] T2[,,] fill_color, IntPtr[] origin, IntPtr[] region, Int32 num_events_in_wait_list, ComputeEvent[] event_wait_list, [OutAttribute] out ComputeEvent @event)
            where T2 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.2]
        /// Enqueues a command to fill an image object with a specified color.
        /// </summary>
        /// <param name="command_queue"> 
        /// Refers to the command-queue in which the fill command will be queued.  The OpenCL context associated with command_queue and image must be the same.
        /// </param>
        /// <param name="buffer"> 
        /// A valid image object.
        /// </param>
        /// <param name="fill_color"> 
        /// The fill color. The fill color is a four component RGBA floating-point color value if the image channel data type is not an unnormalized signed and unsigned integer type, is a four component signed integer value if the image channel data type is an unnormalized signed integer type and is a four component unsigned integer value if the image channel data type is an unormalized unsigned integer type.  The fill color will be converted to the appropriate image channel format and order associated with image.
        /// </param>
        /// <param name="origin">[length: 3] 
        /// Defines the (x, y, z) offset in pixels in the 1D, 2D, or 3D image, the (x, y) offset and the image index in the image array or the (x) offset and the image index in the 1D image array.  If image is a 2D image object, origin[2] must be 0. If image is a 1D image or 1D image buffer object, origin[1] and origin[2] must be 0. If image is a 1D image array object, origin[2] must be 0.  If image is a 1D image array object, origin[1] describes the image index in the 1D image array. If image is a 2D image array object, origin[2] describes the image index in the 2D image array.
        /// </param>
        /// <param name="region">[length: 3] 
        /// Defines the (width, height, depth) in pixels of the 1D, 2D or 3D rectangle, the (width, height) in pixels of the 2D rectangle and the number of images of a 2D image array or the (width) in pixels of the 1D rectangle and the number of images of a 1D image array. If image is a 2D image object, region[2] must be 1.  If image is a 1D image or 1D image buffer object, region[1] and region[2] must be 1.  If image is a 1D image array object, region[2] must be 1.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event">[length: 1] 
        /// Returns an event object that identifies this particular write command and can be used to query or queue a wait for this particular command to complete. event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete. clEnqueueBarrierWithWaitList can be used instead.  If the event_wait_list and the event arguments are not NULL, the event argument should not refer to an element of the event_wait_list array.
        /// </param>
        [AutoGenerated(Category = "", Version = "1.2", EntryPoint = "clEnqueueFillImage")]
        [CLSCompliant(false)]
        public static ErrorCode EnqueueFillImage<T2>(CommandQueue command_queue, ComputeMemory buffer, [InAttribute, OutAttribute] T2[,,] fill_color, ref IntPtr origin, ref IntPtr region, Int32 num_events_in_wait_list, ref ComputeEvent event_wait_list, [OutAttribute] out ComputeEvent @event)
            where T2 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.2]
        /// Enqueues a command to fill an image object with a specified color.
        /// </summary>
        /// <param name="command_queue"> 
        /// Refers to the command-queue in which the fill command will be queued.  The OpenCL context associated with command_queue and image must be the same.
        /// </param>
        /// <param name="buffer"> 
        /// A valid image object.
        /// </param>
        /// <param name="fill_color"> 
        /// The fill color. The fill color is a four component RGBA floating-point color value if the image channel data type is not an unnormalized signed and unsigned integer type, is a four component signed integer value if the image channel data type is an unnormalized signed integer type and is a four component unsigned integer value if the image channel data type is an unormalized unsigned integer type.  The fill color will be converted to the appropriate image channel format and order associated with image.
        /// </param>
        /// <param name="origin">[length: 3] 
        /// Defines the (x, y, z) offset in pixels in the 1D, 2D, or 3D image, the (x, y) offset and the image index in the image array or the (x) offset and the image index in the 1D image array.  If image is a 2D image object, origin[2] must be 0. If image is a 1D image or 1D image buffer object, origin[1] and origin[2] must be 0. If image is a 1D image array object, origin[2] must be 0.  If image is a 1D image array object, origin[1] describes the image index in the 1D image array. If image is a 2D image array object, origin[2] describes the image index in the 2D image array.
        /// </param>
        /// <param name="region">[length: 3] 
        /// Defines the (width, height, depth) in pixels of the 1D, 2D or 3D rectangle, the (width, height) in pixels of the 2D rectangle and the number of images of a 2D image array or the (width) in pixels of the 1D rectangle and the number of images of a 1D image array. If image is a 2D image object, region[2] must be 1.  If image is a 1D image or 1D image buffer object, region[1] and region[2] must be 1.  If image is a 1D image array object, region[2] must be 1.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event">[length: 1] 
        /// Returns an event object that identifies this particular write command and can be used to query or queue a wait for this particular command to complete. event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete. clEnqueueBarrierWithWaitList can be used instead.  If the event_wait_list and the event arguments are not NULL, the event argument should not refer to an element of the event_wait_list array.
        /// </param>
        [AutoGenerated(Category = "", Version = "1.2", EntryPoint = "clEnqueueFillImage")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode EnqueueFillImage<T2>(CommandQueue command_queue, ComputeMemory buffer, [InAttribute, OutAttribute] T2[,,] fill_color, IntPtr* origin, IntPtr* region, Int32 num_events_in_wait_list, ComputeEvent* event_wait_list, [OutAttribute] ComputeEvent* @event)
            where T2 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.2]
        /// Enqueues a command to fill an image object with a specified color.
        /// </summary>
        /// <param name="command_queue"> 
        /// Refers to the command-queue in which the fill command will be queued.  The OpenCL context associated with command_queue and image must be the same.
        /// </param>
        /// <param name="buffer"> 
        /// A valid image object.
        /// </param>
        /// <param name="fill_color"> 
        /// The fill color. The fill color is a four component RGBA floating-point color value if the image channel data type is not an unnormalized signed and unsigned integer type, is a four component signed integer value if the image channel data type is an unnormalized signed integer type and is a four component unsigned integer value if the image channel data type is an unormalized unsigned integer type.  The fill color will be converted to the appropriate image channel format and order associated with image.
        /// </param>
        /// <param name="origin">[length: 3] 
        /// Defines the (x, y, z) offset in pixels in the 1D, 2D, or 3D image, the (x, y) offset and the image index in the image array or the (x) offset and the image index in the 1D image array.  If image is a 2D image object, origin[2] must be 0. If image is a 1D image or 1D image buffer object, origin[1] and origin[2] must be 0. If image is a 1D image array object, origin[2] must be 0.  If image is a 1D image array object, origin[1] describes the image index in the 1D image array. If image is a 2D image array object, origin[2] describes the image index in the 2D image array.
        /// </param>
        /// <param name="region">[length: 3] 
        /// Defines the (width, height, depth) in pixels of the 1D, 2D or 3D rectangle, the (width, height) in pixels of the 2D rectangle and the number of images of a 2D image array or the (width) in pixels of the 1D rectangle and the number of images of a 1D image array. If image is a 2D image object, region[2] must be 1.  If image is a 1D image or 1D image buffer object, region[1] and region[2] must be 1.  If image is a 1D image array object, region[2] must be 1.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event">[length: 1] 
        /// Returns an event object that identifies this particular write command and can be used to query or queue a wait for this particular command to complete. event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete. clEnqueueBarrierWithWaitList can be used instead.  If the event_wait_list and the event arguments are not NULL, the event argument should not refer to an element of the event_wait_list array.
        /// </param>
        [AutoGenerated(Category = "", Version = "1.2", EntryPoint = "clEnqueueFillImage")]
        [CLSCompliant(false)]
        public static ErrorCode EnqueueFillImage<T2>(CommandQueue command_queue, ComputeMemory buffer, [InAttribute, OutAttribute] ref T2 fill_color, IntPtr[] origin, IntPtr[] region, Int32 num_events_in_wait_list, ComputeEvent[] event_wait_list, [OutAttribute] out ComputeEvent @event)
            where T2 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.2]
        /// Enqueues a command to fill an image object with a specified color.
        /// </summary>
        /// <param name="command_queue"> 
        /// Refers to the command-queue in which the fill command will be queued.  The OpenCL context associated with command_queue and image must be the same.
        /// </param>
        /// <param name="buffer"> 
        /// A valid image object.
        /// </param>
        /// <param name="fill_color"> 
        /// The fill color. The fill color is a four component RGBA floating-point color value if the image channel data type is not an unnormalized signed and unsigned integer type, is a four component signed integer value if the image channel data type is an unnormalized signed integer type and is a four component unsigned integer value if the image channel data type is an unormalized unsigned integer type.  The fill color will be converted to the appropriate image channel format and order associated with image.
        /// </param>
        /// <param name="origin">[length: 3] 
        /// Defines the (x, y, z) offset in pixels in the 1D, 2D, or 3D image, the (x, y) offset and the image index in the image array or the (x) offset and the image index in the 1D image array.  If image is a 2D image object, origin[2] must be 0. If image is a 1D image or 1D image buffer object, origin[1] and origin[2] must be 0. If image is a 1D image array object, origin[2] must be 0.  If image is a 1D image array object, origin[1] describes the image index in the 1D image array. If image is a 2D image array object, origin[2] describes the image index in the 2D image array.
        /// </param>
        /// <param name="region">[length: 3] 
        /// Defines the (width, height, depth) in pixels of the 1D, 2D or 3D rectangle, the (width, height) in pixels of the 2D rectangle and the number of images of a 2D image array or the (width) in pixels of the 1D rectangle and the number of images of a 1D image array. If image is a 2D image object, region[2] must be 1.  If image is a 1D image or 1D image buffer object, region[1] and region[2] must be 1.  If image is a 1D image array object, region[2] must be 1.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event">[length: 1] 
        /// Returns an event object that identifies this particular write command and can be used to query or queue a wait for this particular command to complete. event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete. clEnqueueBarrierWithWaitList can be used instead.  If the event_wait_list and the event arguments are not NULL, the event argument should not refer to an element of the event_wait_list array.
        /// </param>
        [AutoGenerated(Category = "", Version = "1.2", EntryPoint = "clEnqueueFillImage")]
        [CLSCompliant(false)]
        public static ErrorCode EnqueueFillImage<T2>(CommandQueue command_queue, ComputeMemory buffer, [InAttribute, OutAttribute] ref T2 fill_color, ref IntPtr origin, ref IntPtr region, Int32 num_events_in_wait_list, ref ComputeEvent event_wait_list, [OutAttribute] out ComputeEvent @event)
            where T2 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.2]
        /// Enqueues a command to fill an image object with a specified color.
        /// </summary>
        /// <param name="command_queue"> 
        /// Refers to the command-queue in which the fill command will be queued.  The OpenCL context associated with command_queue and image must be the same.
        /// </param>
        /// <param name="buffer"> 
        /// A valid image object.
        /// </param>
        /// <param name="fill_color"> 
        /// The fill color. The fill color is a four component RGBA floating-point color value if the image channel data type is not an unnormalized signed and unsigned integer type, is a four component signed integer value if the image channel data type is an unnormalized signed integer type and is a four component unsigned integer value if the image channel data type is an unormalized unsigned integer type.  The fill color will be converted to the appropriate image channel format and order associated with image.
        /// </param>
        /// <param name="origin">[length: 3] 
        /// Defines the (x, y, z) offset in pixels in the 1D, 2D, or 3D image, the (x, y) offset and the image index in the image array or the (x) offset and the image index in the 1D image array.  If image is a 2D image object, origin[2] must be 0. If image is a 1D image or 1D image buffer object, origin[1] and origin[2] must be 0. If image is a 1D image array object, origin[2] must be 0.  If image is a 1D image array object, origin[1] describes the image index in the 1D image array. If image is a 2D image array object, origin[2] describes the image index in the 2D image array.
        /// </param>
        /// <param name="region">[length: 3] 
        /// Defines the (width, height, depth) in pixels of the 1D, 2D or 3D rectangle, the (width, height) in pixels of the 2D rectangle and the number of images of a 2D image array or the (width) in pixels of the 1D rectangle and the number of images of a 1D image array. If image is a 2D image object, region[2] must be 1.  If image is a 1D image or 1D image buffer object, region[1] and region[2] must be 1.  If image is a 1D image array object, region[2] must be 1.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event">[length: 1] 
        /// Returns an event object that identifies this particular write command and can be used to query or queue a wait for this particular command to complete. event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete. clEnqueueBarrierWithWaitList can be used instead.  If the event_wait_list and the event arguments are not NULL, the event argument should not refer to an element of the event_wait_list array.
        /// </param>
        [AutoGenerated(Category = "", Version = "1.2", EntryPoint = "clEnqueueFillImage")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode EnqueueFillImage<T2>(CommandQueue command_queue, ComputeMemory buffer, [InAttribute, OutAttribute] ref T2 fill_color, IntPtr* origin, IntPtr* region, Int32 num_events_in_wait_list, ComputeEvent* event_wait_list, [OutAttribute] ComputeEvent* @event)
            where T2 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Enqueues a command to map a region of the buffer object given by buffer into the host address space and returns a pointer to this mapped region.
        /// </summary>
        /// <param name="command_queue"> 
        /// Must be a valid command-queue.
        /// </param>
        /// <param name="buffer"> 
        /// A valid buffer object. The OpenCL context associated with command_queue and buffer must be the same.
        /// </param>
        /// <param name="blocking_map"> 
        /// Indicates if the map operation is blocking or non-blocking.  If blocking_map is True, clEnqueueMapBuffer does not return until the specified region in buffer is mapped into the host address space and the application can access the contents of the mapped region using the pointer returned by clEnqueueMapBuffer.  If blocking_map is False i.e. map operation is non-blocking, the pointer to the mapped region returned by clEnqueueMapBuffer cannot be used until the map command has completed. The event argument returns an event object which can be used to query the execution status of the map command. When the map command is completed, the application can access the contents of the mapped region using the pointer returned by clEnqueueMapBuffer.
        /// </param>
        /// <param name="map_flags"> 
        /// A bit-bield with the following supported values. cl_map_flagsDescriptionMapRead This flag specifies that the region being mapped in the memory object is being mapped for reading.  The pointer returned by clEnqueueMapBuffer or clEnqueueMapImage is guaranteed to contain the latest bits in the region being mapped when the clEnqueueMapBuffer or clEnqueueMapImage command has completed. MapWrite This flag specifies that the region being mapped in the memory object is being mapped for writing.  The pointer returned by clEnqueueMapBuffer or clEnqueueMapImage is guaranteed to contain the latest bits in the region being mapped when the clEnqueueMapBuffer or clEnqueueMapImage command has completed. MapWriteInvalidateRegion This flag specifies that the region being mapped in the memory object is being mapped for writing.  The contents of the region being mapped are to be discarded. This is typically the case when the region being mapped is overwritten by the host. This flag allows the implementation to no longer guarantee that the pointer returned by clEnqueueMapBuffer or clEnqueueMapImage contains the latest bits in the region being mapped which can be a significant performance enhancement. MapRead or MapWrite and  clMapWriteInvalidateRegion are mutually exclusive.
        /// </param>
        /// <param name="offset"> 
        /// The offset in bytes and the size of the region in the buffer object that is being mapped.
        /// </param>
        /// <param name="cb"> 
        /// The offset in bytes and the size of the region in the buffer object that is being mapped.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event"> 
        /// Returns an event object that identifies this particular copy command and can be used to query or queue a wait for this particular command to complete. event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete.  If the event_wait_list and the event arguments are not NULL, the event argument should not refer to an element of the event_wait_list array.
        /// </param>
        /// <param name="errcode_ret"> 
        /// Returns an appropriate error code. If errcode_ret is NULL, no error code is returned.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clEnqueueMapBuffer")]
        [CLSCompliant(false)]
        public static IntPtr EnqueueMapBuffer(CommandQueue command_queue, ComputeMemory buffer, bool blocking_map, OpenTK.Compute.CL12.MapFlags map_flags, IntPtr offset, IntPtr cb, Int32 num_events_in_wait_list, ComputeEvent[] event_wait_list, ComputeEvent[] @event, [OutAttribute] Int32[] errcode_ret) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Enqueues a command to map a region of the buffer object given by buffer into the host address space and returns a pointer to this mapped region.
        /// </summary>
        /// <param name="command_queue"> 
        /// Must be a valid command-queue.
        /// </param>
        /// <param name="buffer"> 
        /// A valid buffer object. The OpenCL context associated with command_queue and buffer must be the same.
        /// </param>
        /// <param name="blocking_map"> 
        /// Indicates if the map operation is blocking or non-blocking.  If blocking_map is True, clEnqueueMapBuffer does not return until the specified region in buffer is mapped into the host address space and the application can access the contents of the mapped region using the pointer returned by clEnqueueMapBuffer.  If blocking_map is False i.e. map operation is non-blocking, the pointer to the mapped region returned by clEnqueueMapBuffer cannot be used until the map command has completed. The event argument returns an event object which can be used to query the execution status of the map command. When the map command is completed, the application can access the contents of the mapped region using the pointer returned by clEnqueueMapBuffer.
        /// </param>
        /// <param name="map_flags"> 
        /// A bit-bield with the following supported values. cl_map_flagsDescriptionMapRead This flag specifies that the region being mapped in the memory object is being mapped for reading.  The pointer returned by clEnqueueMapBuffer or clEnqueueMapImage is guaranteed to contain the latest bits in the region being mapped when the clEnqueueMapBuffer or clEnqueueMapImage command has completed. MapWrite This flag specifies that the region being mapped in the memory object is being mapped for writing.  The pointer returned by clEnqueueMapBuffer or clEnqueueMapImage is guaranteed to contain the latest bits in the region being mapped when the clEnqueueMapBuffer or clEnqueueMapImage command has completed. MapWriteInvalidateRegion This flag specifies that the region being mapped in the memory object is being mapped for writing.  The contents of the region being mapped are to be discarded. This is typically the case when the region being mapped is overwritten by the host. This flag allows the implementation to no longer guarantee that the pointer returned by clEnqueueMapBuffer or clEnqueueMapImage contains the latest bits in the region being mapped which can be a significant performance enhancement. MapRead or MapWrite and  clMapWriteInvalidateRegion are mutually exclusive.
        /// </param>
        /// <param name="offset"> 
        /// The offset in bytes and the size of the region in the buffer object that is being mapped.
        /// </param>
        /// <param name="cb"> 
        /// The offset in bytes and the size of the region in the buffer object that is being mapped.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event"> 
        /// Returns an event object that identifies this particular copy command and can be used to query or queue a wait for this particular command to complete. event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete.  If the event_wait_list and the event arguments are not NULL, the event argument should not refer to an element of the event_wait_list array.
        /// </param>
        /// <param name="errcode_ret"> 
        /// Returns an appropriate error code. If errcode_ret is NULL, no error code is returned.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clEnqueueMapBuffer")]
        [CLSCompliant(false)]
        public static IntPtr EnqueueMapBuffer(CommandQueue command_queue, ComputeMemory buffer, bool blocking_map, OpenTK.Compute.CL12.MapFlags map_flags, IntPtr offset, IntPtr cb, Int32 num_events_in_wait_list, ref ComputeEvent event_wait_list, ref ComputeEvent @event, [OutAttribute] out Int32 errcode_ret) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Enqueues a command to map a region of the buffer object given by buffer into the host address space and returns a pointer to this mapped region.
        /// </summary>
        /// <param name="command_queue"> 
        /// Must be a valid command-queue.
        /// </param>
        /// <param name="buffer"> 
        /// A valid buffer object. The OpenCL context associated with command_queue and buffer must be the same.
        /// </param>
        /// <param name="blocking_map"> 
        /// Indicates if the map operation is blocking or non-blocking.  If blocking_map is True, clEnqueueMapBuffer does not return until the specified region in buffer is mapped into the host address space and the application can access the contents of the mapped region using the pointer returned by clEnqueueMapBuffer.  If blocking_map is False i.e. map operation is non-blocking, the pointer to the mapped region returned by clEnqueueMapBuffer cannot be used until the map command has completed. The event argument returns an event object which can be used to query the execution status of the map command. When the map command is completed, the application can access the contents of the mapped region using the pointer returned by clEnqueueMapBuffer.
        /// </param>
        /// <param name="map_flags"> 
        /// A bit-bield with the following supported values. cl_map_flagsDescriptionMapRead This flag specifies that the region being mapped in the memory object is being mapped for reading.  The pointer returned by clEnqueueMapBuffer or clEnqueueMapImage is guaranteed to contain the latest bits in the region being mapped when the clEnqueueMapBuffer or clEnqueueMapImage command has completed. MapWrite This flag specifies that the region being mapped in the memory object is being mapped for writing.  The pointer returned by clEnqueueMapBuffer or clEnqueueMapImage is guaranteed to contain the latest bits in the region being mapped when the clEnqueueMapBuffer or clEnqueueMapImage command has completed. MapWriteInvalidateRegion This flag specifies that the region being mapped in the memory object is being mapped for writing.  The contents of the region being mapped are to be discarded. This is typically the case when the region being mapped is overwritten by the host. This flag allows the implementation to no longer guarantee that the pointer returned by clEnqueueMapBuffer or clEnqueueMapImage contains the latest bits in the region being mapped which can be a significant performance enhancement. MapRead or MapWrite and  clMapWriteInvalidateRegion are mutually exclusive.
        /// </param>
        /// <param name="offset"> 
        /// The offset in bytes and the size of the region in the buffer object that is being mapped.
        /// </param>
        /// <param name="cb"> 
        /// The offset in bytes and the size of the region in the buffer object that is being mapped.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event"> 
        /// Returns an event object that identifies this particular copy command and can be used to query or queue a wait for this particular command to complete. event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete.  If the event_wait_list and the event arguments are not NULL, the event argument should not refer to an element of the event_wait_list array.
        /// </param>
        /// <param name="errcode_ret"> 
        /// Returns an appropriate error code. If errcode_ret is NULL, no error code is returned.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clEnqueueMapBuffer")]
        [CLSCompliant(false)]
        public static unsafe IntPtr EnqueueMapBuffer(CommandQueue command_queue, ComputeMemory buffer, bool blocking_map, OpenTK.Compute.CL12.MapFlags map_flags, IntPtr offset, IntPtr cb, Int32 num_events_in_wait_list, ComputeEvent* event_wait_list, ComputeEvent* @event, [OutAttribute] Int32* errcode_ret) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Enqueues a command to map a region of an image object into the host address space and returns a pointer to this mapped region.
        /// </summary>
        /// <param name="command_queue"> 
        /// Must be a valid command-queue.
        /// </param>
        /// <param name="image"> 
        /// A valid image object. The OpenCL context associated with command_queue and image must be the same.
        /// </param>
        /// <param name="blocking_map"> 
        /// Indicates if the map operation is blocking or non-blocking.  If blocking_map is True, clEnqueueMapImage does not return until the specified region in image is mapped into the host address space and the application can access the contents of the mapped region using the pointer returned by clEnqueueMapImage.  If blocking_map is False i.e. map operation is non-blocking, the pointer to the mapped region returned by clEnqueueMapImage cannot be used until the map command has completed. The event argument returns an event object which can be used to query the execution status of the map command. When the map command is completed, the application can access the contents of the mapped region using the pointer returned by clEnqueueMapImage.
        /// </param>
        /// <param name="map_flags"> 
        /// A bit-bield with the following supported values. cl_map_flagsDescriptionMapRead This flag specifies that the region being mapped in the memory object is being mapped for reading.  The pointer returned by clEnqueueMapBuffer or clEnqueueMapImage is guaranteed to contain the latest bits in the region being mapped when the clEnqueueMapBuffer or clEnqueueMapImage command has completed MapWrite This flag specifies that the region being mapped in the memory object is being mapped for writing.  The pointer returned by clEnqueueMapBuffer or clEnqueueMapImage is guaranteed to contain the latest bits in the region being mapped when the clEnqueueMapBuffer or clEnqueueMapImage command has completed. MapWriteInvalidateRegion This flag specifies that the region being mapped in the memory object is being mapped for writing.  The contents of the region being mapped are to be discarded. This is typically the case when the region being mapped is overwritten by the host. This flag allows the implementation to no longer guarantee that the pointer returned by clEnqueueMapBuffer or clEnqueueMapImage contains the latest bits in the region being mapped which can be a significant performance enhancement. MapRead or MapWrite and MapWriteInvalidateRegion are mutually exclusive.
        /// </param>
        /// <param name="origin">[length: 3] 
        /// Defines the (x, y, z) offset in pixels in the 1D, 2D or 3D image, the (x, y) offset and the image index in the 2D image array or the (x) offset and the image index in the 1D image array.  If image is a 2D image object, origin[2] must be 0. If image is a 1D image or 1D image buffer object, origin[1] and origin[2] must be 0.  If image is a 1D image array object, origin[2] must be 0.  If image is a 1D image array object, origin[1] describes the image index in the 1D image array. If image is a 2D image array object, origin[2] describes the image index in the 2D image array.
        /// </param>
        /// <param name="region">[length: 3] 
        /// Defines the (width, height, depth) in pixels of the 1D, 2D or 3D rectangle, the (width, height) in pixels of the 2D rectangle and the number of images of a 2D image array or the (width) in pixels of the 1D rectangle and the number of images of a 1D image array.  If image is a 2D image object, region[2] must be 1. If image is a 1D image or 1D image buffer object, region[1] and region[2] must be 1.  If image is a 1D image array object, region[2] must be 1.
        /// </param>
        /// <param name="image_row_pitch"> 
        /// Returns the scan-line pitch in bytes for the mapped region. This must be a non-NULL value.
        /// </param>
        /// <param name="image_slice_pitch"> 
        /// Returns the size in bytes of each 2D slice of a 3D image or the size of each 1D or 2D image in a 1D or 2D image array for the mapped region. For a 1D and 2D image, zero is returned if this argument is not NULL. For a 3D image, 1D, and 2D image array, image_slice_pitch must be a non-NULL value.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// Specify events that need to complete before clEnqueueMapImage can be executed. If event_wait_list is NULL, then clEnqueueMapImage does not wait on any event to complete.  If event_wait_list is NULL,  num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// Specify events that need to complete before clEnqueueMapImage can be executed. If event_wait_list is NULL, then clEnqueueMapImage does not wait on any event to complete.  If event_wait_list is NULL,  num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event"> 
        /// Returns an event object that identifies this particular copy command and can be used to query or queue a wait for this particular command to complete.  event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete.  If the event_wait_list and the event arguments are not NULL, the event argument should not refer to an element of the event_wait_list array.
        /// </param>
        /// <param name="errcode_ret"> 
        /// Returns an appropriate error code. If errcode_ret is NULL, no error code is returned.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clEnqueueMapImage")]
        [CLSCompliant(false)]
        public static unsafe IntPtr EnqueueMapImage(CommandQueue command_queue, ComputeMemory image, bool blocking_map, OpenTK.Compute.CL12.MapFlags map_flags, IntPtr*[] origin, IntPtr*[] region, IntPtr[] image_row_pitch, IntPtr[] image_slice_pitch, Int32 num_events_in_wait_list, ComputeEvent[] event_wait_list, ComputeEvent[] @event, [OutAttribute] Int32[] errcode_ret) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Enqueues a command to map a region of an image object into the host address space and returns a pointer to this mapped region.
        /// </summary>
        /// <param name="command_queue"> 
        /// Must be a valid command-queue.
        /// </param>
        /// <param name="image"> 
        /// A valid image object. The OpenCL context associated with command_queue and image must be the same.
        /// </param>
        /// <param name="blocking_map"> 
        /// Indicates if the map operation is blocking or non-blocking.  If blocking_map is True, clEnqueueMapImage does not return until the specified region in image is mapped into the host address space and the application can access the contents of the mapped region using the pointer returned by clEnqueueMapImage.  If blocking_map is False i.e. map operation is non-blocking, the pointer to the mapped region returned by clEnqueueMapImage cannot be used until the map command has completed. The event argument returns an event object which can be used to query the execution status of the map command. When the map command is completed, the application can access the contents of the mapped region using the pointer returned by clEnqueueMapImage.
        /// </param>
        /// <param name="map_flags"> 
        /// A bit-bield with the following supported values. cl_map_flagsDescriptionMapRead This flag specifies that the region being mapped in the memory object is being mapped for reading.  The pointer returned by clEnqueueMapBuffer or clEnqueueMapImage is guaranteed to contain the latest bits in the region being mapped when the clEnqueueMapBuffer or clEnqueueMapImage command has completed MapWrite This flag specifies that the region being mapped in the memory object is being mapped for writing.  The pointer returned by clEnqueueMapBuffer or clEnqueueMapImage is guaranteed to contain the latest bits in the region being mapped when the clEnqueueMapBuffer or clEnqueueMapImage command has completed. MapWriteInvalidateRegion This flag specifies that the region being mapped in the memory object is being mapped for writing.  The contents of the region being mapped are to be discarded. This is typically the case when the region being mapped is overwritten by the host. This flag allows the implementation to no longer guarantee that the pointer returned by clEnqueueMapBuffer or clEnqueueMapImage contains the latest bits in the region being mapped which can be a significant performance enhancement. MapRead or MapWrite and MapWriteInvalidateRegion are mutually exclusive.
        /// </param>
        /// <param name="origin">[length: 3] 
        /// Defines the (x, y, z) offset in pixels in the 1D, 2D or 3D image, the (x, y) offset and the image index in the 2D image array or the (x) offset and the image index in the 1D image array.  If image is a 2D image object, origin[2] must be 0. If image is a 1D image or 1D image buffer object, origin[1] and origin[2] must be 0.  If image is a 1D image array object, origin[2] must be 0.  If image is a 1D image array object, origin[1] describes the image index in the 1D image array. If image is a 2D image array object, origin[2] describes the image index in the 2D image array.
        /// </param>
        /// <param name="region">[length: 3] 
        /// Defines the (width, height, depth) in pixels of the 1D, 2D or 3D rectangle, the (width, height) in pixels of the 2D rectangle and the number of images of a 2D image array or the (width) in pixels of the 1D rectangle and the number of images of a 1D image array.  If image is a 2D image object, region[2] must be 1. If image is a 1D image or 1D image buffer object, region[1] and region[2] must be 1.  If image is a 1D image array object, region[2] must be 1.
        /// </param>
        /// <param name="image_row_pitch"> 
        /// Returns the scan-line pitch in bytes for the mapped region. This must be a non-NULL value.
        /// </param>
        /// <param name="image_slice_pitch"> 
        /// Returns the size in bytes of each 2D slice of a 3D image or the size of each 1D or 2D image in a 1D or 2D image array for the mapped region. For a 1D and 2D image, zero is returned if this argument is not NULL. For a 3D image, 1D, and 2D image array, image_slice_pitch must be a non-NULL value.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// Specify events that need to complete before clEnqueueMapImage can be executed. If event_wait_list is NULL, then clEnqueueMapImage does not wait on any event to complete.  If event_wait_list is NULL,  num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// Specify events that need to complete before clEnqueueMapImage can be executed. If event_wait_list is NULL, then clEnqueueMapImage does not wait on any event to complete.  If event_wait_list is NULL,  num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event"> 
        /// Returns an event object that identifies this particular copy command and can be used to query or queue a wait for this particular command to complete.  event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete.  If the event_wait_list and the event arguments are not NULL, the event argument should not refer to an element of the event_wait_list array.
        /// </param>
        /// <param name="errcode_ret"> 
        /// Returns an appropriate error code. If errcode_ret is NULL, no error code is returned.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clEnqueueMapImage")]
        [CLSCompliant(false)]
        public static unsafe IntPtr EnqueueMapImage(CommandQueue command_queue, ComputeMemory image, bool blocking_map, OpenTK.Compute.CL12.MapFlags map_flags, ref IntPtr* origin, ref IntPtr* region, ref IntPtr image_row_pitch, ref IntPtr image_slice_pitch, Int32 num_events_in_wait_list, ref ComputeEvent event_wait_list, ref ComputeEvent @event, [OutAttribute] out Int32 errcode_ret) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Enqueues a command to map a region of an image object into the host address space and returns a pointer to this mapped region.
        /// </summary>
        /// <param name="command_queue"> 
        /// Must be a valid command-queue.
        /// </param>
        /// <param name="image"> 
        /// A valid image object. The OpenCL context associated with command_queue and image must be the same.
        /// </param>
        /// <param name="blocking_map"> 
        /// Indicates if the map operation is blocking or non-blocking.  If blocking_map is True, clEnqueueMapImage does not return until the specified region in image is mapped into the host address space and the application can access the contents of the mapped region using the pointer returned by clEnqueueMapImage.  If blocking_map is False i.e. map operation is non-blocking, the pointer to the mapped region returned by clEnqueueMapImage cannot be used until the map command has completed. The event argument returns an event object which can be used to query the execution status of the map command. When the map command is completed, the application can access the contents of the mapped region using the pointer returned by clEnqueueMapImage.
        /// </param>
        /// <param name="map_flags"> 
        /// A bit-bield with the following supported values. cl_map_flagsDescriptionMapRead This flag specifies that the region being mapped in the memory object is being mapped for reading.  The pointer returned by clEnqueueMapBuffer or clEnqueueMapImage is guaranteed to contain the latest bits in the region being mapped when the clEnqueueMapBuffer or clEnqueueMapImage command has completed MapWrite This flag specifies that the region being mapped in the memory object is being mapped for writing.  The pointer returned by clEnqueueMapBuffer or clEnqueueMapImage is guaranteed to contain the latest bits in the region being mapped when the clEnqueueMapBuffer or clEnqueueMapImage command has completed. MapWriteInvalidateRegion This flag specifies that the region being mapped in the memory object is being mapped for writing.  The contents of the region being mapped are to be discarded. This is typically the case when the region being mapped is overwritten by the host. This flag allows the implementation to no longer guarantee that the pointer returned by clEnqueueMapBuffer or clEnqueueMapImage contains the latest bits in the region being mapped which can be a significant performance enhancement. MapRead or MapWrite and MapWriteInvalidateRegion are mutually exclusive.
        /// </param>
        /// <param name="origin">[length: 3] 
        /// Defines the (x, y, z) offset in pixels in the 1D, 2D or 3D image, the (x, y) offset and the image index in the 2D image array or the (x) offset and the image index in the 1D image array.  If image is a 2D image object, origin[2] must be 0. If image is a 1D image or 1D image buffer object, origin[1] and origin[2] must be 0.  If image is a 1D image array object, origin[2] must be 0.  If image is a 1D image array object, origin[1] describes the image index in the 1D image array. If image is a 2D image array object, origin[2] describes the image index in the 2D image array.
        /// </param>
        /// <param name="region">[length: 3] 
        /// Defines the (width, height, depth) in pixels of the 1D, 2D or 3D rectangle, the (width, height) in pixels of the 2D rectangle and the number of images of a 2D image array or the (width) in pixels of the 1D rectangle and the number of images of a 1D image array.  If image is a 2D image object, region[2] must be 1. If image is a 1D image or 1D image buffer object, region[1] and region[2] must be 1.  If image is a 1D image array object, region[2] must be 1.
        /// </param>
        /// <param name="image_row_pitch"> 
        /// Returns the scan-line pitch in bytes for the mapped region. This must be a non-NULL value.
        /// </param>
        /// <param name="image_slice_pitch"> 
        /// Returns the size in bytes of each 2D slice of a 3D image or the size of each 1D or 2D image in a 1D or 2D image array for the mapped region. For a 1D and 2D image, zero is returned if this argument is not NULL. For a 3D image, 1D, and 2D image array, image_slice_pitch must be a non-NULL value.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// Specify events that need to complete before clEnqueueMapImage can be executed. If event_wait_list is NULL, then clEnqueueMapImage does not wait on any event to complete.  If event_wait_list is NULL,  num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// Specify events that need to complete before clEnqueueMapImage can be executed. If event_wait_list is NULL, then clEnqueueMapImage does not wait on any event to complete.  If event_wait_list is NULL,  num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event"> 
        /// Returns an event object that identifies this particular copy command and can be used to query or queue a wait for this particular command to complete.  event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete.  If the event_wait_list and the event arguments are not NULL, the event argument should not refer to an element of the event_wait_list array.
        /// </param>
        /// <param name="errcode_ret"> 
        /// Returns an appropriate error code. If errcode_ret is NULL, no error code is returned.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clEnqueueMapImage")]
        [CLSCompliant(false)]
        public static unsafe IntPtr EnqueueMapImage(CommandQueue command_queue, ComputeMemory image, bool blocking_map, OpenTK.Compute.CL12.MapFlags map_flags, IntPtr** origin, IntPtr** region, IntPtr* image_row_pitch, IntPtr* image_slice_pitch, Int32 num_events_in_wait_list, ComputeEvent* event_wait_list, ComputeEvent* @event, [OutAttribute] Int32* errcode_ret) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]</summary>
        /// <param name="command_queue"></param>
        /// <param name="event"></param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clEnqueueMarker")]
        [CLSCompliant(false)]
        public static Int32 EnqueueMarker(CommandQueue command_queue, ComputeEvent[] @event) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]</summary>
        /// <param name="command_queue"></param>
        /// <param name="event"></param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clEnqueueMarker")]
        [CLSCompliant(false)]
        public static Int32 EnqueueMarker(CommandQueue command_queue, ref ComputeEvent @event) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]</summary>
        /// <param name="command_queue"></param>
        /// <param name="event"></param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clEnqueueMarker")]
        [CLSCompliant(false)]
        public static unsafe Int32 EnqueueMarker(CommandQueue command_queue, ComputeEvent* @event) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.2]
        /// Enqueues a marker command which waits for either a list of events to complete, or all previously enqueued commands to complete.
        /// </summary>
        /// <param name="command_queue"> 
        /// A valid command-queue.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// These functions specify events that need to complete before this particular command can be executed.  If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points.  The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.  If event_wait_list is NULL, then this particular command waits until all previous enqueued commands to command_queue have completed.
        /// </param>
        /// <param name="event_wait_list"> 
        /// These functions specify events that need to complete before this particular command can be executed.  If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points.  The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.  If event_wait_list is NULL, then this particular command waits until all previous enqueued commands to command_queue have completed.
        /// </param>
        /// <param name="event">[length: 1] 
        /// Returns an event object that identifies this particular command. Event objects are unique and can be used to identify this marker command later on. event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete.  If the event_wait_list and the event arguments are not NULL, the event argument should not refer to an element of the event_wait_list array.
        /// </param>
        [AutoGenerated(Category = "", Version = "1.2", EntryPoint = "clEnqueueMarkerWithWaitList")]
        [CLSCompliant(false)]
        public static ErrorCode EnqueueMarkerWithWaitList(CommandQueue command_queue, Int32 num_events_in_wait_list, ComputeEvent[] event_wait_list, [OutAttribute] out ComputeEvent @event) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.2]
        /// Enqueues a marker command which waits for either a list of events to complete, or all previously enqueued commands to complete.
        /// </summary>
        /// <param name="command_queue"> 
        /// A valid command-queue.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// These functions specify events that need to complete before this particular command can be executed.  If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points.  The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.  If event_wait_list is NULL, then this particular command waits until all previous enqueued commands to command_queue have completed.
        /// </param>
        /// <param name="event_wait_list"> 
        /// These functions specify events that need to complete before this particular command can be executed.  If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points.  The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.  If event_wait_list is NULL, then this particular command waits until all previous enqueued commands to command_queue have completed.
        /// </param>
        /// <param name="event">[length: 1] 
        /// Returns an event object that identifies this particular command. Event objects are unique and can be used to identify this marker command later on. event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete.  If the event_wait_list and the event arguments are not NULL, the event argument should not refer to an element of the event_wait_list array.
        /// </param>
        [AutoGenerated(Category = "", Version = "1.2", EntryPoint = "clEnqueueMarkerWithWaitList")]
        [CLSCompliant(false)]
        public static ErrorCode EnqueueMarkerWithWaitList(CommandQueue command_queue, Int32 num_events_in_wait_list, ref ComputeEvent event_wait_list, [OutAttribute] out ComputeEvent @event) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.2]
        /// Enqueues a marker command which waits for either a list of events to complete, or all previously enqueued commands to complete.
        /// </summary>
        /// <param name="command_queue"> 
        /// A valid command-queue.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// These functions specify events that need to complete before this particular command can be executed.  If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points.  The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.  If event_wait_list is NULL, then this particular command waits until all previous enqueued commands to command_queue have completed.
        /// </param>
        /// <param name="event_wait_list"> 
        /// These functions specify events that need to complete before this particular command can be executed.  If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points.  The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.  If event_wait_list is NULL, then this particular command waits until all previous enqueued commands to command_queue have completed.
        /// </param>
        /// <param name="event">[length: 1] 
        /// Returns an event object that identifies this particular command. Event objects are unique and can be used to identify this marker command later on. event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete.  If the event_wait_list and the event arguments are not NULL, the event argument should not refer to an element of the event_wait_list array.
        /// </param>
        [AutoGenerated(Category = "", Version = "1.2", EntryPoint = "clEnqueueMarkerWithWaitList")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode EnqueueMarkerWithWaitList(CommandQueue command_queue, Int32 num_events_in_wait_list, ComputeEvent* event_wait_list, [OutAttribute] ComputeEvent* @event) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.2]
        /// Enqueues a command to indicate which device a set of memory objects should be associated with.
        /// </summary>
        /// <param name="command_queue"> 
        /// A valid command-queue. The specified set of memory objects in mem_objects will be migrated to the OpenCL device associated with command_queue or to the host if the MigrateMemObjectHost has been specified.
        /// </param>
        /// <param name="num_mem_objects"> 
        /// The number of memory objects specified in mem_objects.
        /// </param>
        /// <param name="mem_objects"> 
        /// A pointer to a list of memory objects.
        /// </param>
        /// <param name="flags"> 
        /// A bit-field that is used to specify migration options. The table below describes the possible values for flags. cl_mem_migration flagsDescriptionMigrateMemObjectHost This flag indicates that the specified set of memory objects are to be migrated to the host, regardless of the target command-queue. MigrateMemObject contentUndefined This flag indicates that the contents of the set of memory objects are undefined after migration.  The specified set of memory objects are migrated to the device associated with command_queue without incurring the overhead of migrating their contents.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed.  If event_wait_list is NULL, then this particular command does not wait on any event to complete.  If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// Returns an event object that identifies this particular command and can be used to query or queue a wait for this particular command to complete. event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete.  If the event_wait_list and the event arguments are not NULL, the event argument should not refer to an element of the event_wait_list array.
        /// </param>
        /// <param name="event">[length: 1] 
        /// Returns an event object that identifies this particular command and can be used to query or queue a wait for this particular command to complete. event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete.  If the event_wait_list and the event arguments are not NULL, the event argument should not refer to an element of the event_wait_list array.
        /// </param>
        [AutoGenerated(Category = "", Version = "1.2", EntryPoint = "clEnqueueMigrateMemObjects")]
        [CLSCompliant(false)]
        public static ErrorCode EnqueueMigrateMemObjects(CommandQueue command_queue, Int32 num_mem_objects, ComputeMemory[] mem_objects, OpenTK.Compute.CL12.MemMigrationFlags flags, Int32 num_events_in_wait_list, ComputeEvent[] event_wait_list, [OutAttribute] out ComputeEvent @event) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.2]
        /// Enqueues a command to indicate which device a set of memory objects should be associated with.
        /// </summary>
        /// <param name="command_queue"> 
        /// A valid command-queue. The specified set of memory objects in mem_objects will be migrated to the OpenCL device associated with command_queue or to the host if the MigrateMemObjectHost has been specified.
        /// </param>
        /// <param name="num_mem_objects"> 
        /// The number of memory objects specified in mem_objects.
        /// </param>
        /// <param name="mem_objects"> 
        /// A pointer to a list of memory objects.
        /// </param>
        /// <param name="flags"> 
        /// A bit-field that is used to specify migration options. The table below describes the possible values for flags. cl_mem_migration flagsDescriptionMigrateMemObjectHost This flag indicates that the specified set of memory objects are to be migrated to the host, regardless of the target command-queue. MigrateMemObject contentUndefined This flag indicates that the contents of the set of memory objects are undefined after migration.  The specified set of memory objects are migrated to the device associated with command_queue without incurring the overhead of migrating their contents.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed.  If event_wait_list is NULL, then this particular command does not wait on any event to complete.  If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// Returns an event object that identifies this particular command and can be used to query or queue a wait for this particular command to complete. event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete.  If the event_wait_list and the event arguments are not NULL, the event argument should not refer to an element of the event_wait_list array.
        /// </param>
        /// <param name="event">[length: 1] 
        /// Returns an event object that identifies this particular command and can be used to query or queue a wait for this particular command to complete. event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete.  If the event_wait_list and the event arguments are not NULL, the event argument should not refer to an element of the event_wait_list array.
        /// </param>
        [AutoGenerated(Category = "", Version = "1.2", EntryPoint = "clEnqueueMigrateMemObjects")]
        [CLSCompliant(false)]
        public static ErrorCode EnqueueMigrateMemObjects(CommandQueue command_queue, Int32 num_mem_objects, ref ComputeMemory mem_objects, OpenTK.Compute.CL12.MemMigrationFlags flags, Int32 num_events_in_wait_list, ref ComputeEvent event_wait_list, [OutAttribute] out ComputeEvent @event) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.2]
        /// Enqueues a command to indicate which device a set of memory objects should be associated with.
        /// </summary>
        /// <param name="command_queue"> 
        /// A valid command-queue. The specified set of memory objects in mem_objects will be migrated to the OpenCL device associated with command_queue or to the host if the MigrateMemObjectHost has been specified.
        /// </param>
        /// <param name="num_mem_objects"> 
        /// The number of memory objects specified in mem_objects.
        /// </param>
        /// <param name="mem_objects"> 
        /// A pointer to a list of memory objects.
        /// </param>
        /// <param name="flags"> 
        /// A bit-field that is used to specify migration options. The table below describes the possible values for flags. cl_mem_migration flagsDescriptionMigrateMemObjectHost This flag indicates that the specified set of memory objects are to be migrated to the host, regardless of the target command-queue. MigrateMemObject contentUndefined This flag indicates that the contents of the set of memory objects are undefined after migration.  The specified set of memory objects are migrated to the device associated with command_queue without incurring the overhead of migrating their contents.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed.  If event_wait_list is NULL, then this particular command does not wait on any event to complete.  If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// Returns an event object that identifies this particular command and can be used to query or queue a wait for this particular command to complete. event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete.  If the event_wait_list and the event arguments are not NULL, the event argument should not refer to an element of the event_wait_list array.
        /// </param>
        /// <param name="event">[length: 1] 
        /// Returns an event object that identifies this particular command and can be used to query or queue a wait for this particular command to complete. event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete.  If the event_wait_list and the event arguments are not NULL, the event argument should not refer to an element of the event_wait_list array.
        /// </param>
        [AutoGenerated(Category = "", Version = "1.2", EntryPoint = "clEnqueueMigrateMemObjects")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode EnqueueMigrateMemObjects(CommandQueue command_queue, Int32 num_mem_objects, ComputeMemory* mem_objects, OpenTK.Compute.CL12.MemMigrationFlags flags, Int32 num_events_in_wait_list, ComputeEvent* event_wait_list, [OutAttribute] ComputeEvent* @event) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Enqueues a command to execute a native C/C++ function not compiled using the OpenCL compiler.
        /// </summary>
        /// <param name="command_queue"> 
        /// A valid command-queue. A native user function can only be executed on a command-queue created on a device that has ExecNativeKernel capability set in DeviceExecutionCapabilities as specified in the table of OpenCL Device Queries for clGetDeviceInfo.
        /// </param>
        /// <param name="user_func"> 
        /// A pointer to a host-callable user function.
        /// </param>
        /// <param name="args"> 
        /// A pointer to the args list that user_func should be called with.
        /// </param>
        /// <param name="cb_args"> 
        /// The size in bytes of the args list that args points to.  The data pointed to by args and cb_args bytes in size will be copied and a pointer to this copied region will be passed to user_func. The copy needs to be done because the memory objects (cl_mem values) that args may contain need to be modified and replaced by appropriate pointers to global memory.  When clEnqueueNativeKernel returns, the memory region pointed to by args can be reused by the application.
        /// </param>
        /// <param name="num_mem_objects"> 
        /// The number of buffer objects that are passed in args.
        /// </param>
        /// <param name="mem_list"> 
        /// A list of valid buffer objects, if num_mem_objects  0. The buffer object values specified in mem_list are memory object handles (cl_mem values) returned by clCreateBuffer or NULL.
        /// </param>
        /// <param name="args_mem_loc"> 
        /// A pointer to appropriate locations that args points to where memory object handles (cl_mem values) are stored. Before the user function is executed, the memory object handles are replaced by pointers to global memory.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0.  The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0.  The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0.  The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clEnqueueNativeKernel")]
        [CLSCompliant(false)]
        public static ErrorCode EnqueueNativeKernel(CommandQueue command_queue, IntPtr user_func, IntPtr args, IntPtr cb_args, Int32 num_mem_objects, ComputeMemory[] mem_list, IntPtr args_mem_loc, Int32 num_events_in_wait_list, ComputeEvent[] event_wait_list, [OutAttribute] ComputeEvent[] @event) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Enqueues a command to execute a native C/C++ function not compiled using the OpenCL compiler.
        /// </summary>
        /// <param name="command_queue"> 
        /// A valid command-queue. A native user function can only be executed on a command-queue created on a device that has ExecNativeKernel capability set in DeviceExecutionCapabilities as specified in the table of OpenCL Device Queries for clGetDeviceInfo.
        /// </param>
        /// <param name="user_func"> 
        /// A pointer to a host-callable user function.
        /// </param>
        /// <param name="args"> 
        /// A pointer to the args list that user_func should be called with.
        /// </param>
        /// <param name="cb_args"> 
        /// The size in bytes of the args list that args points to.  The data pointed to by args and cb_args bytes in size will be copied and a pointer to this copied region will be passed to user_func. The copy needs to be done because the memory objects (cl_mem values) that args may contain need to be modified and replaced by appropriate pointers to global memory.  When clEnqueueNativeKernel returns, the memory region pointed to by args can be reused by the application.
        /// </param>
        /// <param name="num_mem_objects"> 
        /// The number of buffer objects that are passed in args.
        /// </param>
        /// <param name="mem_list"> 
        /// A list of valid buffer objects, if num_mem_objects  0. The buffer object values specified in mem_list are memory object handles (cl_mem values) returned by clCreateBuffer or NULL.
        /// </param>
        /// <param name="args_mem_loc"> 
        /// A pointer to appropriate locations that args points to where memory object handles (cl_mem values) are stored. Before the user function is executed, the memory object handles are replaced by pointers to global memory.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0.  The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0.  The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0.  The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clEnqueueNativeKernel")]
        [CLSCompliant(false)]
        public static ErrorCode EnqueueNativeKernel(CommandQueue command_queue, IntPtr user_func, IntPtr args, IntPtr cb_args, Int32 num_mem_objects, ref ComputeMemory mem_list, IntPtr args_mem_loc, Int32 num_events_in_wait_list, ref ComputeEvent event_wait_list, [OutAttribute] out ComputeEvent @event) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Enqueues a command to execute a native C/C++ function not compiled using the OpenCL compiler.
        /// </summary>
        /// <param name="command_queue"> 
        /// A valid command-queue. A native user function can only be executed on a command-queue created on a device that has ExecNativeKernel capability set in DeviceExecutionCapabilities as specified in the table of OpenCL Device Queries for clGetDeviceInfo.
        /// </param>
        /// <param name="user_func"> 
        /// A pointer to a host-callable user function.
        /// </param>
        /// <param name="args"> 
        /// A pointer to the args list that user_func should be called with.
        /// </param>
        /// <param name="cb_args"> 
        /// The size in bytes of the args list that args points to.  The data pointed to by args and cb_args bytes in size will be copied and a pointer to this copied region will be passed to user_func. The copy needs to be done because the memory objects (cl_mem values) that args may contain need to be modified and replaced by appropriate pointers to global memory.  When clEnqueueNativeKernel returns, the memory region pointed to by args can be reused by the application.
        /// </param>
        /// <param name="num_mem_objects"> 
        /// The number of buffer objects that are passed in args.
        /// </param>
        /// <param name="mem_list"> 
        /// A list of valid buffer objects, if num_mem_objects  0. The buffer object values specified in mem_list are memory object handles (cl_mem values) returned by clCreateBuffer or NULL.
        /// </param>
        /// <param name="args_mem_loc"> 
        /// A pointer to appropriate locations that args points to where memory object handles (cl_mem values) are stored. Before the user function is executed, the memory object handles are replaced by pointers to global memory.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0.  The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0.  The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0.  The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clEnqueueNativeKernel")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode EnqueueNativeKernel(CommandQueue command_queue, IntPtr user_func, IntPtr args, IntPtr cb_args, Int32 num_mem_objects, ComputeMemory* mem_list, IntPtr args_mem_loc, Int32 num_events_in_wait_list, ComputeEvent* event_wait_list, [OutAttribute] ComputeEvent* @event) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Enqueues a command to execute a native C/C++ function not compiled using the OpenCL compiler.
        /// </summary>
        /// <param name="command_queue"> 
        /// A valid command-queue. A native user function can only be executed on a command-queue created on a device that has ExecNativeKernel capability set in DeviceExecutionCapabilities as specified in the table of OpenCL Device Queries for clGetDeviceInfo.
        /// </param>
        /// <param name="user_func"> 
        /// A pointer to a host-callable user function.
        /// </param>
        /// <param name="args"> 
        /// A pointer to the args list that user_func should be called with.
        /// </param>
        /// <param name="cb_args"> 
        /// The size in bytes of the args list that args points to.  The data pointed to by args and cb_args bytes in size will be copied and a pointer to this copied region will be passed to user_func. The copy needs to be done because the memory objects (cl_mem values) that args may contain need to be modified and replaced by appropriate pointers to global memory.  When clEnqueueNativeKernel returns, the memory region pointed to by args can be reused by the application.
        /// </param>
        /// <param name="num_mem_objects"> 
        /// The number of buffer objects that are passed in args.
        /// </param>
        /// <param name="mem_list"> 
        /// A list of valid buffer objects, if num_mem_objects  0. The buffer object values specified in mem_list are memory object handles (cl_mem values) returned by clCreateBuffer or NULL.
        /// </param>
        /// <param name="args_mem_loc"> 
        /// A pointer to appropriate locations that args points to where memory object handles (cl_mem values) are stored. Before the user function is executed, the memory object handles are replaced by pointers to global memory.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0.  The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0.  The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0.  The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clEnqueueNativeKernel")]
        [CLSCompliant(false)]
        public static ErrorCode EnqueueNativeKernel<T2,T6>(CommandQueue command_queue, IntPtr user_func, [InAttribute, OutAttribute] T2[] args, IntPtr cb_args, Int32 num_mem_objects, ComputeMemory[] mem_list, [InAttribute, OutAttribute] T6[] args_mem_loc, Int32 num_events_in_wait_list, ComputeEvent[] event_wait_list, [OutAttribute] ComputeEvent[] @event)
            where T2 : struct
            where T6 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Enqueues a command to execute a native C/C++ function not compiled using the OpenCL compiler.
        /// </summary>
        /// <param name="command_queue"> 
        /// A valid command-queue. A native user function can only be executed on a command-queue created on a device that has ExecNativeKernel capability set in DeviceExecutionCapabilities as specified in the table of OpenCL Device Queries for clGetDeviceInfo.
        /// </param>
        /// <param name="user_func"> 
        /// A pointer to a host-callable user function.
        /// </param>
        /// <param name="args"> 
        /// A pointer to the args list that user_func should be called with.
        /// </param>
        /// <param name="cb_args"> 
        /// The size in bytes of the args list that args points to.  The data pointed to by args and cb_args bytes in size will be copied and a pointer to this copied region will be passed to user_func. The copy needs to be done because the memory objects (cl_mem values) that args may contain need to be modified and replaced by appropriate pointers to global memory.  When clEnqueueNativeKernel returns, the memory region pointed to by args can be reused by the application.
        /// </param>
        /// <param name="num_mem_objects"> 
        /// The number of buffer objects that are passed in args.
        /// </param>
        /// <param name="mem_list"> 
        /// A list of valid buffer objects, if num_mem_objects  0. The buffer object values specified in mem_list are memory object handles (cl_mem values) returned by clCreateBuffer or NULL.
        /// </param>
        /// <param name="args_mem_loc"> 
        /// A pointer to appropriate locations that args points to where memory object handles (cl_mem values) are stored. Before the user function is executed, the memory object handles are replaced by pointers to global memory.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0.  The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0.  The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0.  The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clEnqueueNativeKernel")]
        [CLSCompliant(false)]
        public static ErrorCode EnqueueNativeKernel<T2,T6>(CommandQueue command_queue, IntPtr user_func, [InAttribute, OutAttribute] T2[] args, IntPtr cb_args, Int32 num_mem_objects, ref ComputeMemory mem_list, [InAttribute, OutAttribute] T6[] args_mem_loc, Int32 num_events_in_wait_list, ref ComputeEvent event_wait_list, [OutAttribute] out ComputeEvent @event)
            where T2 : struct
            where T6 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Enqueues a command to execute a native C/C++ function not compiled using the OpenCL compiler.
        /// </summary>
        /// <param name="command_queue"> 
        /// A valid command-queue. A native user function can only be executed on a command-queue created on a device that has ExecNativeKernel capability set in DeviceExecutionCapabilities as specified in the table of OpenCL Device Queries for clGetDeviceInfo.
        /// </param>
        /// <param name="user_func"> 
        /// A pointer to a host-callable user function.
        /// </param>
        /// <param name="args"> 
        /// A pointer to the args list that user_func should be called with.
        /// </param>
        /// <param name="cb_args"> 
        /// The size in bytes of the args list that args points to.  The data pointed to by args and cb_args bytes in size will be copied and a pointer to this copied region will be passed to user_func. The copy needs to be done because the memory objects (cl_mem values) that args may contain need to be modified and replaced by appropriate pointers to global memory.  When clEnqueueNativeKernel returns, the memory region pointed to by args can be reused by the application.
        /// </param>
        /// <param name="num_mem_objects"> 
        /// The number of buffer objects that are passed in args.
        /// </param>
        /// <param name="mem_list"> 
        /// A list of valid buffer objects, if num_mem_objects  0. The buffer object values specified in mem_list are memory object handles (cl_mem values) returned by clCreateBuffer or NULL.
        /// </param>
        /// <param name="args_mem_loc"> 
        /// A pointer to appropriate locations that args points to where memory object handles (cl_mem values) are stored. Before the user function is executed, the memory object handles are replaced by pointers to global memory.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0.  The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0.  The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0.  The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clEnqueueNativeKernel")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode EnqueueNativeKernel<T2,T6>(CommandQueue command_queue, IntPtr user_func, [InAttribute, OutAttribute] T2[] args, IntPtr cb_args, Int32 num_mem_objects, ComputeMemory* mem_list, [InAttribute, OutAttribute] T6[] args_mem_loc, Int32 num_events_in_wait_list, ComputeEvent* event_wait_list, [OutAttribute] ComputeEvent* @event)
            where T2 : struct
            where T6 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Enqueues a command to execute a native C/C++ function not compiled using the OpenCL compiler.
        /// </summary>
        /// <param name="command_queue"> 
        /// A valid command-queue. A native user function can only be executed on a command-queue created on a device that has ExecNativeKernel capability set in DeviceExecutionCapabilities as specified in the table of OpenCL Device Queries for clGetDeviceInfo.
        /// </param>
        /// <param name="user_func"> 
        /// A pointer to a host-callable user function.
        /// </param>
        /// <param name="args"> 
        /// A pointer to the args list that user_func should be called with.
        /// </param>
        /// <param name="cb_args"> 
        /// The size in bytes of the args list that args points to.  The data pointed to by args and cb_args bytes in size will be copied and a pointer to this copied region will be passed to user_func. The copy needs to be done because the memory objects (cl_mem values) that args may contain need to be modified and replaced by appropriate pointers to global memory.  When clEnqueueNativeKernel returns, the memory region pointed to by args can be reused by the application.
        /// </param>
        /// <param name="num_mem_objects"> 
        /// The number of buffer objects that are passed in args.
        /// </param>
        /// <param name="mem_list"> 
        /// A list of valid buffer objects, if num_mem_objects  0. The buffer object values specified in mem_list are memory object handles (cl_mem values) returned by clCreateBuffer or NULL.
        /// </param>
        /// <param name="args_mem_loc"> 
        /// A pointer to appropriate locations that args points to where memory object handles (cl_mem values) are stored. Before the user function is executed, the memory object handles are replaced by pointers to global memory.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0.  The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0.  The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0.  The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clEnqueueNativeKernel")]
        [CLSCompliant(false)]
        public static ErrorCode EnqueueNativeKernel<T2,T6>(CommandQueue command_queue, IntPtr user_func, [InAttribute, OutAttribute] T2[,] args, IntPtr cb_args, Int32 num_mem_objects, ComputeMemory[] mem_list, [InAttribute, OutAttribute] T6[,] args_mem_loc, Int32 num_events_in_wait_list, ComputeEvent[] event_wait_list, [OutAttribute] ComputeEvent[] @event)
            where T2 : struct
            where T6 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Enqueues a command to execute a native C/C++ function not compiled using the OpenCL compiler.
        /// </summary>
        /// <param name="command_queue"> 
        /// A valid command-queue. A native user function can only be executed on a command-queue created on a device that has ExecNativeKernel capability set in DeviceExecutionCapabilities as specified in the table of OpenCL Device Queries for clGetDeviceInfo.
        /// </param>
        /// <param name="user_func"> 
        /// A pointer to a host-callable user function.
        /// </param>
        /// <param name="args"> 
        /// A pointer to the args list that user_func should be called with.
        /// </param>
        /// <param name="cb_args"> 
        /// The size in bytes of the args list that args points to.  The data pointed to by args and cb_args bytes in size will be copied and a pointer to this copied region will be passed to user_func. The copy needs to be done because the memory objects (cl_mem values) that args may contain need to be modified and replaced by appropriate pointers to global memory.  When clEnqueueNativeKernel returns, the memory region pointed to by args can be reused by the application.
        /// </param>
        /// <param name="num_mem_objects"> 
        /// The number of buffer objects that are passed in args.
        /// </param>
        /// <param name="mem_list"> 
        /// A list of valid buffer objects, if num_mem_objects  0. The buffer object values specified in mem_list are memory object handles (cl_mem values) returned by clCreateBuffer or NULL.
        /// </param>
        /// <param name="args_mem_loc"> 
        /// A pointer to appropriate locations that args points to where memory object handles (cl_mem values) are stored. Before the user function is executed, the memory object handles are replaced by pointers to global memory.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0.  The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0.  The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0.  The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clEnqueueNativeKernel")]
        [CLSCompliant(false)]
        public static ErrorCode EnqueueNativeKernel<T2,T6>(CommandQueue command_queue, IntPtr user_func, [InAttribute, OutAttribute] T2[,] args, IntPtr cb_args, Int32 num_mem_objects, ref ComputeMemory mem_list, [InAttribute, OutAttribute] T6[,] args_mem_loc, Int32 num_events_in_wait_list, ref ComputeEvent event_wait_list, [OutAttribute] out ComputeEvent @event)
            where T2 : struct
            where T6 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Enqueues a command to execute a native C/C++ function not compiled using the OpenCL compiler.
        /// </summary>
        /// <param name="command_queue"> 
        /// A valid command-queue. A native user function can only be executed on a command-queue created on a device that has ExecNativeKernel capability set in DeviceExecutionCapabilities as specified in the table of OpenCL Device Queries for clGetDeviceInfo.
        /// </param>
        /// <param name="user_func"> 
        /// A pointer to a host-callable user function.
        /// </param>
        /// <param name="args"> 
        /// A pointer to the args list that user_func should be called with.
        /// </param>
        /// <param name="cb_args"> 
        /// The size in bytes of the args list that args points to.  The data pointed to by args and cb_args bytes in size will be copied and a pointer to this copied region will be passed to user_func. The copy needs to be done because the memory objects (cl_mem values) that args may contain need to be modified and replaced by appropriate pointers to global memory.  When clEnqueueNativeKernel returns, the memory region pointed to by args can be reused by the application.
        /// </param>
        /// <param name="num_mem_objects"> 
        /// The number of buffer objects that are passed in args.
        /// </param>
        /// <param name="mem_list"> 
        /// A list of valid buffer objects, if num_mem_objects  0. The buffer object values specified in mem_list are memory object handles (cl_mem values) returned by clCreateBuffer or NULL.
        /// </param>
        /// <param name="args_mem_loc"> 
        /// A pointer to appropriate locations that args points to where memory object handles (cl_mem values) are stored. Before the user function is executed, the memory object handles are replaced by pointers to global memory.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0.  The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0.  The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0.  The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clEnqueueNativeKernel")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode EnqueueNativeKernel<T2,T6>(CommandQueue command_queue, IntPtr user_func, [InAttribute, OutAttribute] T2[,] args, IntPtr cb_args, Int32 num_mem_objects, ComputeMemory* mem_list, [InAttribute, OutAttribute] T6[,] args_mem_loc, Int32 num_events_in_wait_list, ComputeEvent* event_wait_list, [OutAttribute] ComputeEvent* @event)
            where T2 : struct
            where T6 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Enqueues a command to execute a native C/C++ function not compiled using the OpenCL compiler.
        /// </summary>
        /// <param name="command_queue"> 
        /// A valid command-queue. A native user function can only be executed on a command-queue created on a device that has ExecNativeKernel capability set in DeviceExecutionCapabilities as specified in the table of OpenCL Device Queries for clGetDeviceInfo.
        /// </param>
        /// <param name="user_func"> 
        /// A pointer to a host-callable user function.
        /// </param>
        /// <param name="args"> 
        /// A pointer to the args list that user_func should be called with.
        /// </param>
        /// <param name="cb_args"> 
        /// The size in bytes of the args list that args points to.  The data pointed to by args and cb_args bytes in size will be copied and a pointer to this copied region will be passed to user_func. The copy needs to be done because the memory objects (cl_mem values) that args may contain need to be modified and replaced by appropriate pointers to global memory.  When clEnqueueNativeKernel returns, the memory region pointed to by args can be reused by the application.
        /// </param>
        /// <param name="num_mem_objects"> 
        /// The number of buffer objects that are passed in args.
        /// </param>
        /// <param name="mem_list"> 
        /// A list of valid buffer objects, if num_mem_objects  0. The buffer object values specified in mem_list are memory object handles (cl_mem values) returned by clCreateBuffer or NULL.
        /// </param>
        /// <param name="args_mem_loc"> 
        /// A pointer to appropriate locations that args points to where memory object handles (cl_mem values) are stored. Before the user function is executed, the memory object handles are replaced by pointers to global memory.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0.  The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0.  The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0.  The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clEnqueueNativeKernel")]
        [CLSCompliant(false)]
        public static ErrorCode EnqueueNativeKernel<T2,T6>(CommandQueue command_queue, IntPtr user_func, [InAttribute, OutAttribute] T2[,,] args, IntPtr cb_args, Int32 num_mem_objects, ComputeMemory[] mem_list, [InAttribute, OutAttribute] T6[,,] args_mem_loc, Int32 num_events_in_wait_list, ComputeEvent[] event_wait_list, [OutAttribute] ComputeEvent[] @event)
            where T2 : struct
            where T6 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Enqueues a command to execute a native C/C++ function not compiled using the OpenCL compiler.
        /// </summary>
        /// <param name="command_queue"> 
        /// A valid command-queue. A native user function can only be executed on a command-queue created on a device that has ExecNativeKernel capability set in DeviceExecutionCapabilities as specified in the table of OpenCL Device Queries for clGetDeviceInfo.
        /// </param>
        /// <param name="user_func"> 
        /// A pointer to a host-callable user function.
        /// </param>
        /// <param name="args"> 
        /// A pointer to the args list that user_func should be called with.
        /// </param>
        /// <param name="cb_args"> 
        /// The size in bytes of the args list that args points to.  The data pointed to by args and cb_args bytes in size will be copied and a pointer to this copied region will be passed to user_func. The copy needs to be done because the memory objects (cl_mem values) that args may contain need to be modified and replaced by appropriate pointers to global memory.  When clEnqueueNativeKernel returns, the memory region pointed to by args can be reused by the application.
        /// </param>
        /// <param name="num_mem_objects"> 
        /// The number of buffer objects that are passed in args.
        /// </param>
        /// <param name="mem_list"> 
        /// A list of valid buffer objects, if num_mem_objects  0. The buffer object values specified in mem_list are memory object handles (cl_mem values) returned by clCreateBuffer or NULL.
        /// </param>
        /// <param name="args_mem_loc"> 
        /// A pointer to appropriate locations that args points to where memory object handles (cl_mem values) are stored. Before the user function is executed, the memory object handles are replaced by pointers to global memory.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0.  The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0.  The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0.  The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clEnqueueNativeKernel")]
        [CLSCompliant(false)]
        public static ErrorCode EnqueueNativeKernel<T2,T6>(CommandQueue command_queue, IntPtr user_func, [InAttribute, OutAttribute] T2[,,] args, IntPtr cb_args, Int32 num_mem_objects, ref ComputeMemory mem_list, [InAttribute, OutAttribute] T6[,,] args_mem_loc, Int32 num_events_in_wait_list, ref ComputeEvent event_wait_list, [OutAttribute] out ComputeEvent @event)
            where T2 : struct
            where T6 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Enqueues a command to execute a native C/C++ function not compiled using the OpenCL compiler.
        /// </summary>
        /// <param name="command_queue"> 
        /// A valid command-queue. A native user function can only be executed on a command-queue created on a device that has ExecNativeKernel capability set in DeviceExecutionCapabilities as specified in the table of OpenCL Device Queries for clGetDeviceInfo.
        /// </param>
        /// <param name="user_func"> 
        /// A pointer to a host-callable user function.
        /// </param>
        /// <param name="args"> 
        /// A pointer to the args list that user_func should be called with.
        /// </param>
        /// <param name="cb_args"> 
        /// The size in bytes of the args list that args points to.  The data pointed to by args and cb_args bytes in size will be copied and a pointer to this copied region will be passed to user_func. The copy needs to be done because the memory objects (cl_mem values) that args may contain need to be modified and replaced by appropriate pointers to global memory.  When clEnqueueNativeKernel returns, the memory region pointed to by args can be reused by the application.
        /// </param>
        /// <param name="num_mem_objects"> 
        /// The number of buffer objects that are passed in args.
        /// </param>
        /// <param name="mem_list"> 
        /// A list of valid buffer objects, if num_mem_objects  0. The buffer object values specified in mem_list are memory object handles (cl_mem values) returned by clCreateBuffer or NULL.
        /// </param>
        /// <param name="args_mem_loc"> 
        /// A pointer to appropriate locations that args points to where memory object handles (cl_mem values) are stored. Before the user function is executed, the memory object handles are replaced by pointers to global memory.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0.  The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0.  The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0.  The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clEnqueueNativeKernel")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode EnqueueNativeKernel<T2,T6>(CommandQueue command_queue, IntPtr user_func, [InAttribute, OutAttribute] T2[,,] args, IntPtr cb_args, Int32 num_mem_objects, ComputeMemory* mem_list, [InAttribute, OutAttribute] T6[,,] args_mem_loc, Int32 num_events_in_wait_list, ComputeEvent* event_wait_list, [OutAttribute] ComputeEvent* @event)
            where T2 : struct
            where T6 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Enqueues a command to execute a native C/C++ function not compiled using the OpenCL compiler.
        /// </summary>
        /// <param name="command_queue"> 
        /// A valid command-queue. A native user function can only be executed on a command-queue created on a device that has ExecNativeKernel capability set in DeviceExecutionCapabilities as specified in the table of OpenCL Device Queries for clGetDeviceInfo.
        /// </param>
        /// <param name="user_func"> 
        /// A pointer to a host-callable user function.
        /// </param>
        /// <param name="args"> 
        /// A pointer to the args list that user_func should be called with.
        /// </param>
        /// <param name="cb_args"> 
        /// The size in bytes of the args list that args points to.  The data pointed to by args and cb_args bytes in size will be copied and a pointer to this copied region will be passed to user_func. The copy needs to be done because the memory objects (cl_mem values) that args may contain need to be modified and replaced by appropriate pointers to global memory.  When clEnqueueNativeKernel returns, the memory region pointed to by args can be reused by the application.
        /// </param>
        /// <param name="num_mem_objects"> 
        /// The number of buffer objects that are passed in args.
        /// </param>
        /// <param name="mem_list"> 
        /// A list of valid buffer objects, if num_mem_objects  0. The buffer object values specified in mem_list are memory object handles (cl_mem values) returned by clCreateBuffer or NULL.
        /// </param>
        /// <param name="args_mem_loc"> 
        /// A pointer to appropriate locations that args points to where memory object handles (cl_mem values) are stored. Before the user function is executed, the memory object handles are replaced by pointers to global memory.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0.  The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0.  The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0.  The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clEnqueueNativeKernel")]
        [CLSCompliant(false)]
        public static ErrorCode EnqueueNativeKernel<T2,T6>(CommandQueue command_queue, IntPtr user_func, [InAttribute, OutAttribute] ref T2 args, IntPtr cb_args, Int32 num_mem_objects, ComputeMemory[] mem_list, [InAttribute, OutAttribute] ref T6 args_mem_loc, Int32 num_events_in_wait_list, ComputeEvent[] event_wait_list, [OutAttribute] ComputeEvent[] @event)
            where T2 : struct
            where T6 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Enqueues a command to execute a native C/C++ function not compiled using the OpenCL compiler.
        /// </summary>
        /// <param name="command_queue"> 
        /// A valid command-queue. A native user function can only be executed on a command-queue created on a device that has ExecNativeKernel capability set in DeviceExecutionCapabilities as specified in the table of OpenCL Device Queries for clGetDeviceInfo.
        /// </param>
        /// <param name="user_func"> 
        /// A pointer to a host-callable user function.
        /// </param>
        /// <param name="args"> 
        /// A pointer to the args list that user_func should be called with.
        /// </param>
        /// <param name="cb_args"> 
        /// The size in bytes of the args list that args points to.  The data pointed to by args and cb_args bytes in size will be copied and a pointer to this copied region will be passed to user_func. The copy needs to be done because the memory objects (cl_mem values) that args may contain need to be modified and replaced by appropriate pointers to global memory.  When clEnqueueNativeKernel returns, the memory region pointed to by args can be reused by the application.
        /// </param>
        /// <param name="num_mem_objects"> 
        /// The number of buffer objects that are passed in args.
        /// </param>
        /// <param name="mem_list"> 
        /// A list of valid buffer objects, if num_mem_objects  0. The buffer object values specified in mem_list are memory object handles (cl_mem values) returned by clCreateBuffer or NULL.
        /// </param>
        /// <param name="args_mem_loc"> 
        /// A pointer to appropriate locations that args points to where memory object handles (cl_mem values) are stored. Before the user function is executed, the memory object handles are replaced by pointers to global memory.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0.  The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0.  The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0.  The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clEnqueueNativeKernel")]
        [CLSCompliant(false)]
        public static ErrorCode EnqueueNativeKernel<T2,T6>(CommandQueue command_queue, IntPtr user_func, [InAttribute, OutAttribute] ref T2 args, IntPtr cb_args, Int32 num_mem_objects, ref ComputeMemory mem_list, [InAttribute, OutAttribute] ref T6 args_mem_loc, Int32 num_events_in_wait_list, ref ComputeEvent event_wait_list, [OutAttribute] out ComputeEvent @event)
            where T2 : struct
            where T6 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Enqueues a command to execute a native C/C++ function not compiled using the OpenCL compiler.
        /// </summary>
        /// <param name="command_queue"> 
        /// A valid command-queue. A native user function can only be executed on a command-queue created on a device that has ExecNativeKernel capability set in DeviceExecutionCapabilities as specified in the table of OpenCL Device Queries for clGetDeviceInfo.
        /// </param>
        /// <param name="user_func"> 
        /// A pointer to a host-callable user function.
        /// </param>
        /// <param name="args"> 
        /// A pointer to the args list that user_func should be called with.
        /// </param>
        /// <param name="cb_args"> 
        /// The size in bytes of the args list that args points to.  The data pointed to by args and cb_args bytes in size will be copied and a pointer to this copied region will be passed to user_func. The copy needs to be done because the memory objects (cl_mem values) that args may contain need to be modified and replaced by appropriate pointers to global memory.  When clEnqueueNativeKernel returns, the memory region pointed to by args can be reused by the application.
        /// </param>
        /// <param name="num_mem_objects"> 
        /// The number of buffer objects that are passed in args.
        /// </param>
        /// <param name="mem_list"> 
        /// A list of valid buffer objects, if num_mem_objects  0. The buffer object values specified in mem_list are memory object handles (cl_mem values) returned by clCreateBuffer or NULL.
        /// </param>
        /// <param name="args_mem_loc"> 
        /// A pointer to appropriate locations that args points to where memory object handles (cl_mem values) are stored. Before the user function is executed, the memory object handles are replaced by pointers to global memory.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0.  The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0.  The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0.  The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clEnqueueNativeKernel")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode EnqueueNativeKernel<T2,T6>(CommandQueue command_queue, IntPtr user_func, [InAttribute, OutAttribute] ref T2 args, IntPtr cb_args, Int32 num_mem_objects, ComputeMemory* mem_list, [InAttribute, OutAttribute] ref T6 args_mem_loc, Int32 num_events_in_wait_list, ComputeEvent* event_wait_list, [OutAttribute] ComputeEvent* @event)
            where T2 : struct
            where T6 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Enqueues a command to execute a kernel on a device.
        /// </summary>
        /// <param name="command_queue"> 
        /// A valid command-queue. The kernel will be queued for execution on the device associated with command_queue.
        /// </param>
        /// <param name="kernel"> 
        /// A valid kernel object. The OpenCL context associated with kernel and command_queue must be the same.
        /// </param>
        /// <param name="work_dim"> 
        /// The number of dimensions used to specify the global work-items and work-items in the work-group. work_dim must be greater than zero and less than or equal to DeviceMaxWorkItemDimensions.
        /// </param>
        /// <param name="global_work_offset"> 
        /// global_work_offset can be used to specify an array of work_dim unsigned values that describe the offset used to calculate the global ID of a work-item. If global_work_offset is NULL, the global IDs start at offset (0, 0, ... 0).
        /// </param>
        /// <param name="global_work_size"> 
        /// Points to an array of work_dim unsigned values that describe the number of global work-items in work_dim dimensions that will execute the kernel function. The total number of global work-items is computed as global_work_size[0] *...* global_work_size[work_dim - 1].
        /// </param>
        /// <param name="local_work_size"> 
        /// Points to an array of work_dim unsigned values that describe the number of work-items that make up a work-group (also referred to as the size of the work-group) that will execute the kernel specified by kernel.  The total number of work-items in a work-group is computed as local_work_size[0] *... * local_work_size[work_dim - 1]. The total number of work-items in the work-group must be less than or equal to the DeviceMaxWorkGroupSize value specified in table of OpenCL Device Queries for clGetDeviceInfo and the number of work-items specified in local_work_size[0],... local_work_size[work_dim - 1] must be less than or equal to the corresponding values specified by DeviceMaxWorkItemSizes[0],.... DeviceMaxWorkItemSizes[work_dim - 1].  The explicitly specified local_work_size will be used to determine how to break the global work-items specified by global_work_size into appropriate work-group instances.  If local_work_size is specified, the values specified in global_work_size[0],... global_work_size[work_dim - 1] must be evenly divisible by the corresponding values specified in local_work_size[0],... local_work_size[work_dim - 1]. local_work_size can also be a NULL value in which case the OpenCL implementation will determine how to be break the global work-items into appropriate work-group instances.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0.  The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0.  The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event"> 
        /// Returns an event object that identifies this particular kernel execution instance. Event objects are unique and can be used to identify a particular kernel execution instance later on. If event is NULL, no event will be created for this kernel execution instance and therefore it will not be possible for the application to query or queue a wait for this particular kernel execution instance.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clEnqueueNDRangeKernel")]
        [CLSCompliant(false)]
        public static ErrorCode EnqueueNDRangeKernel(CommandQueue command_queue, ComputeKernel kernel, Int32 work_dim, IntPtr[] global_work_offset, IntPtr[] global_work_size, IntPtr[] local_work_size, Int32 num_events_in_wait_list, ComputeEvent[] event_wait_list, [OutAttribute] out ComputeEvent @event) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Enqueues a command to execute a kernel on a device.
        /// </summary>
        /// <param name="command_queue"> 
        /// A valid command-queue. The kernel will be queued for execution on the device associated with command_queue.
        /// </param>
        /// <param name="kernel"> 
        /// A valid kernel object. The OpenCL context associated with kernel and command_queue must be the same.
        /// </param>
        /// <param name="work_dim"> 
        /// The number of dimensions used to specify the global work-items and work-items in the work-group. work_dim must be greater than zero and less than or equal to DeviceMaxWorkItemDimensions.
        /// </param>
        /// <param name="global_work_offset"> 
        /// global_work_offset can be used to specify an array of work_dim unsigned values that describe the offset used to calculate the global ID of a work-item. If global_work_offset is NULL, the global IDs start at offset (0, 0, ... 0).
        /// </param>
        /// <param name="global_work_size"> 
        /// Points to an array of work_dim unsigned values that describe the number of global work-items in work_dim dimensions that will execute the kernel function. The total number of global work-items is computed as global_work_size[0] *...* global_work_size[work_dim - 1].
        /// </param>
        /// <param name="local_work_size"> 
        /// Points to an array of work_dim unsigned values that describe the number of work-items that make up a work-group (also referred to as the size of the work-group) that will execute the kernel specified by kernel.  The total number of work-items in a work-group is computed as local_work_size[0] *... * local_work_size[work_dim - 1]. The total number of work-items in the work-group must be less than or equal to the DeviceMaxWorkGroupSize value specified in table of OpenCL Device Queries for clGetDeviceInfo and the number of work-items specified in local_work_size[0],... local_work_size[work_dim - 1] must be less than or equal to the corresponding values specified by DeviceMaxWorkItemSizes[0],.... DeviceMaxWorkItemSizes[work_dim - 1].  The explicitly specified local_work_size will be used to determine how to break the global work-items specified by global_work_size into appropriate work-group instances.  If local_work_size is specified, the values specified in global_work_size[0],... global_work_size[work_dim - 1] must be evenly divisible by the corresponding values specified in local_work_size[0],... local_work_size[work_dim - 1]. local_work_size can also be a NULL value in which case the OpenCL implementation will determine how to be break the global work-items into appropriate work-group instances.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0.  The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0.  The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event"> 
        /// Returns an event object that identifies this particular kernel execution instance. Event objects are unique and can be used to identify a particular kernel execution instance later on. If event is NULL, no event will be created for this kernel execution instance and therefore it will not be possible for the application to query or queue a wait for this particular kernel execution instance.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clEnqueueNDRangeKernel")]
        [CLSCompliant(false)]
        public static ErrorCode EnqueueNDRangeKernel(CommandQueue command_queue, ComputeKernel kernel, Int32 work_dim, ref IntPtr global_work_offset, ref IntPtr global_work_size, ref IntPtr local_work_size, Int32 num_events_in_wait_list, ref ComputeEvent event_wait_list, [OutAttribute] out ComputeEvent @event) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Enqueues a command to execute a kernel on a device.
        /// </summary>
        /// <param name="command_queue"> 
        /// A valid command-queue. The kernel will be queued for execution on the device associated with command_queue.
        /// </param>
        /// <param name="kernel"> 
        /// A valid kernel object. The OpenCL context associated with kernel and command_queue must be the same.
        /// </param>
        /// <param name="work_dim"> 
        /// The number of dimensions used to specify the global work-items and work-items in the work-group. work_dim must be greater than zero and less than or equal to DeviceMaxWorkItemDimensions.
        /// </param>
        /// <param name="global_work_offset"> 
        /// global_work_offset can be used to specify an array of work_dim unsigned values that describe the offset used to calculate the global ID of a work-item. If global_work_offset is NULL, the global IDs start at offset (0, 0, ... 0).
        /// </param>
        /// <param name="global_work_size"> 
        /// Points to an array of work_dim unsigned values that describe the number of global work-items in work_dim dimensions that will execute the kernel function. The total number of global work-items is computed as global_work_size[0] *...* global_work_size[work_dim - 1].
        /// </param>
        /// <param name="local_work_size"> 
        /// Points to an array of work_dim unsigned values that describe the number of work-items that make up a work-group (also referred to as the size of the work-group) that will execute the kernel specified by kernel.  The total number of work-items in a work-group is computed as local_work_size[0] *... * local_work_size[work_dim - 1]. The total number of work-items in the work-group must be less than or equal to the DeviceMaxWorkGroupSize value specified in table of OpenCL Device Queries for clGetDeviceInfo and the number of work-items specified in local_work_size[0],... local_work_size[work_dim - 1] must be less than or equal to the corresponding values specified by DeviceMaxWorkItemSizes[0],.... DeviceMaxWorkItemSizes[work_dim - 1].  The explicitly specified local_work_size will be used to determine how to break the global work-items specified by global_work_size into appropriate work-group instances.  If local_work_size is specified, the values specified in global_work_size[0],... global_work_size[work_dim - 1] must be evenly divisible by the corresponding values specified in local_work_size[0],... local_work_size[work_dim - 1]. local_work_size can also be a NULL value in which case the OpenCL implementation will determine how to be break the global work-items into appropriate work-group instances.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0.  The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0.  The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event"> 
        /// Returns an event object that identifies this particular kernel execution instance. Event objects are unique and can be used to identify a particular kernel execution instance later on. If event is NULL, no event will be created for this kernel execution instance and therefore it will not be possible for the application to query or queue a wait for this particular kernel execution instance.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clEnqueueNDRangeKernel")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode EnqueueNDRangeKernel(CommandQueue command_queue, ComputeKernel kernel, Int32 work_dim, IntPtr* global_work_offset, IntPtr* global_work_size, IntPtr* local_work_size, Int32 num_events_in_wait_list, ComputeEvent* event_wait_list, [OutAttribute] ComputeEvent* @event) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Enqueue commands to read from a buffer object to host memory.
        /// </summary>
        /// <param name="command_queue"> 
        /// Refers to the command-queue in which the read command will be queued. command_queue and buffer must be created with the same OpenCL context.
        /// </param>
        /// <param name="buffer"> 
        /// Refers to a valid buffer object.
        /// </param>
        /// <param name="blocking_read"> 
        /// Indicates if the read operations are blocking or non-blocking.  If blocking_read is True i.e. the read command is blocking, clEnqueueReadBuffer does not return until the buffer data has been read and copied into memory pointed to by ptr.  If blocking_read is False i.e. the read command is non-blocking, clEnqueueReadBuffer queues a non-blocking read command and returns. The contents of the buffer that ptr points to cannot be used until the read command has completed. The event argument returns an event object which can be used to query the execution status of the read command. When the read command has completed, the contents of the buffer that ptr points to can be used by the application.
        /// </param>
        /// <param name="offset"> 
        /// The offset in bytes in the buffer object to read from.
        /// </param>
        /// <param name="cb"> 
        /// The size in bytes of data being read.
        /// </param>
        /// <param name="ptr"> 
        /// The pointer to buffer in host memory where data is to be read into.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// event_wait_list and num_events_in_wait_list specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// event_wait_list and num_events_in_wait_list specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event"> 
        /// Returns an event object that identifies this particular read command and can be used to query or queue a wait for this particular command to complete.  event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete. If the event_wait_list and the event arguments are not NULL, the event argument should not refer to an element of the event_wait_list array.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clEnqueueReadBuffer")]
        [CLSCompliant(false)]
        public static ErrorCode EnqueueReadBuffer(CommandQueue command_queue, ComputeMemory buffer, bool blocking_read, IntPtr offset, IntPtr cb, IntPtr ptr, Int32 num_events_in_wait_list, ComputeEvent[] event_wait_list, [OutAttribute] out ComputeEvent @event) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Enqueue commands to read from a buffer object to host memory.
        /// </summary>
        /// <param name="command_queue"> 
        /// Refers to the command-queue in which the read command will be queued. command_queue and buffer must be created with the same OpenCL context.
        /// </param>
        /// <param name="buffer"> 
        /// Refers to a valid buffer object.
        /// </param>
        /// <param name="blocking_read"> 
        /// Indicates if the read operations are blocking or non-blocking.  If blocking_read is True i.e. the read command is blocking, clEnqueueReadBuffer does not return until the buffer data has been read and copied into memory pointed to by ptr.  If blocking_read is False i.e. the read command is non-blocking, clEnqueueReadBuffer queues a non-blocking read command and returns. The contents of the buffer that ptr points to cannot be used until the read command has completed. The event argument returns an event object which can be used to query the execution status of the read command. When the read command has completed, the contents of the buffer that ptr points to can be used by the application.
        /// </param>
        /// <param name="offset"> 
        /// The offset in bytes in the buffer object to read from.
        /// </param>
        /// <param name="cb"> 
        /// The size in bytes of data being read.
        /// </param>
        /// <param name="ptr"> 
        /// The pointer to buffer in host memory where data is to be read into.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// event_wait_list and num_events_in_wait_list specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// event_wait_list and num_events_in_wait_list specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event"> 
        /// Returns an event object that identifies this particular read command and can be used to query or queue a wait for this particular command to complete.  event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete. If the event_wait_list and the event arguments are not NULL, the event argument should not refer to an element of the event_wait_list array.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clEnqueueReadBuffer")]
        [CLSCompliant(false)]
        public static ErrorCode EnqueueReadBuffer(CommandQueue command_queue, ComputeMemory buffer, bool blocking_read, IntPtr offset, IntPtr cb, IntPtr ptr, Int32 num_events_in_wait_list, ref ComputeEvent event_wait_list, [OutAttribute] out ComputeEvent @event) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Enqueue commands to read from a buffer object to host memory.
        /// </summary>
        /// <param name="command_queue"> 
        /// Refers to the command-queue in which the read command will be queued. command_queue and buffer must be created with the same OpenCL context.
        /// </param>
        /// <param name="buffer"> 
        /// Refers to a valid buffer object.
        /// </param>
        /// <param name="blocking_read"> 
        /// Indicates if the read operations are blocking or non-blocking.  If blocking_read is True i.e. the read command is blocking, clEnqueueReadBuffer does not return until the buffer data has been read and copied into memory pointed to by ptr.  If blocking_read is False i.e. the read command is non-blocking, clEnqueueReadBuffer queues a non-blocking read command and returns. The contents of the buffer that ptr points to cannot be used until the read command has completed. The event argument returns an event object which can be used to query the execution status of the read command. When the read command has completed, the contents of the buffer that ptr points to can be used by the application.
        /// </param>
        /// <param name="offset"> 
        /// The offset in bytes in the buffer object to read from.
        /// </param>
        /// <param name="cb"> 
        /// The size in bytes of data being read.
        /// </param>
        /// <param name="ptr"> 
        /// The pointer to buffer in host memory where data is to be read into.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// event_wait_list and num_events_in_wait_list specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// event_wait_list and num_events_in_wait_list specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event"> 
        /// Returns an event object that identifies this particular read command and can be used to query or queue a wait for this particular command to complete.  event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete. If the event_wait_list and the event arguments are not NULL, the event argument should not refer to an element of the event_wait_list array.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clEnqueueReadBuffer")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode EnqueueReadBuffer(CommandQueue command_queue, ComputeMemory buffer, bool blocking_read, IntPtr offset, IntPtr cb, IntPtr ptr, Int32 num_events_in_wait_list, ComputeEvent* event_wait_list, [OutAttribute] ComputeEvent* @event) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Enqueue commands to read from a buffer object to host memory.
        /// </summary>
        /// <param name="command_queue"> 
        /// Refers to the command-queue in which the read command will be queued. command_queue and buffer must be created with the same OpenCL context.
        /// </param>
        /// <param name="buffer"> 
        /// Refers to a valid buffer object.
        /// </param>
        /// <param name="blocking_read"> 
        /// Indicates if the read operations are blocking or non-blocking.  If blocking_read is True i.e. the read command is blocking, clEnqueueReadBuffer does not return until the buffer data has been read and copied into memory pointed to by ptr.  If blocking_read is False i.e. the read command is non-blocking, clEnqueueReadBuffer queues a non-blocking read command and returns. The contents of the buffer that ptr points to cannot be used until the read command has completed. The event argument returns an event object which can be used to query the execution status of the read command. When the read command has completed, the contents of the buffer that ptr points to can be used by the application.
        /// </param>
        /// <param name="offset"> 
        /// The offset in bytes in the buffer object to read from.
        /// </param>
        /// <param name="cb"> 
        /// The size in bytes of data being read.
        /// </param>
        /// <param name="ptr"> 
        /// The pointer to buffer in host memory where data is to be read into.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// event_wait_list and num_events_in_wait_list specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// event_wait_list and num_events_in_wait_list specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event"> 
        /// Returns an event object that identifies this particular read command and can be used to query or queue a wait for this particular command to complete.  event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete. If the event_wait_list and the event arguments are not NULL, the event argument should not refer to an element of the event_wait_list array.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clEnqueueReadBuffer")]
        [CLSCompliant(false)]
        public static ErrorCode EnqueueReadBuffer<T5>(CommandQueue command_queue, ComputeMemory buffer, bool blocking_read, IntPtr offset, IntPtr cb, [InAttribute, OutAttribute] T5[] ptr, Int32 num_events_in_wait_list, ComputeEvent[] event_wait_list, [OutAttribute] out ComputeEvent @event)
            where T5 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Enqueue commands to read from a buffer object to host memory.
        /// </summary>
        /// <param name="command_queue"> 
        /// Refers to the command-queue in which the read command will be queued. command_queue and buffer must be created with the same OpenCL context.
        /// </param>
        /// <param name="buffer"> 
        /// Refers to a valid buffer object.
        /// </param>
        /// <param name="blocking_read"> 
        /// Indicates if the read operations are blocking or non-blocking.  If blocking_read is True i.e. the read command is blocking, clEnqueueReadBuffer does not return until the buffer data has been read and copied into memory pointed to by ptr.  If blocking_read is False i.e. the read command is non-blocking, clEnqueueReadBuffer queues a non-blocking read command and returns. The contents of the buffer that ptr points to cannot be used until the read command has completed. The event argument returns an event object which can be used to query the execution status of the read command. When the read command has completed, the contents of the buffer that ptr points to can be used by the application.
        /// </param>
        /// <param name="offset"> 
        /// The offset in bytes in the buffer object to read from.
        /// </param>
        /// <param name="cb"> 
        /// The size in bytes of data being read.
        /// </param>
        /// <param name="ptr"> 
        /// The pointer to buffer in host memory where data is to be read into.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// event_wait_list and num_events_in_wait_list specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// event_wait_list and num_events_in_wait_list specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event"> 
        /// Returns an event object that identifies this particular read command and can be used to query or queue a wait for this particular command to complete.  event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete. If the event_wait_list and the event arguments are not NULL, the event argument should not refer to an element of the event_wait_list array.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clEnqueueReadBuffer")]
        [CLSCompliant(false)]
        public static ErrorCode EnqueueReadBuffer<T5>(CommandQueue command_queue, ComputeMemory buffer, bool blocking_read, IntPtr offset, IntPtr cb, [InAttribute, OutAttribute] T5[] ptr, Int32 num_events_in_wait_list, ref ComputeEvent event_wait_list, [OutAttribute] out ComputeEvent @event)
            where T5 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Enqueue commands to read from a buffer object to host memory.
        /// </summary>
        /// <param name="command_queue"> 
        /// Refers to the command-queue in which the read command will be queued. command_queue and buffer must be created with the same OpenCL context.
        /// </param>
        /// <param name="buffer"> 
        /// Refers to a valid buffer object.
        /// </param>
        /// <param name="blocking_read"> 
        /// Indicates if the read operations are blocking or non-blocking.  If blocking_read is True i.e. the read command is blocking, clEnqueueReadBuffer does not return until the buffer data has been read and copied into memory pointed to by ptr.  If blocking_read is False i.e. the read command is non-blocking, clEnqueueReadBuffer queues a non-blocking read command and returns. The contents of the buffer that ptr points to cannot be used until the read command has completed. The event argument returns an event object which can be used to query the execution status of the read command. When the read command has completed, the contents of the buffer that ptr points to can be used by the application.
        /// </param>
        /// <param name="offset"> 
        /// The offset in bytes in the buffer object to read from.
        /// </param>
        /// <param name="cb"> 
        /// The size in bytes of data being read.
        /// </param>
        /// <param name="ptr"> 
        /// The pointer to buffer in host memory where data is to be read into.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// event_wait_list and num_events_in_wait_list specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// event_wait_list and num_events_in_wait_list specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event"> 
        /// Returns an event object that identifies this particular read command and can be used to query or queue a wait for this particular command to complete.  event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete. If the event_wait_list and the event arguments are not NULL, the event argument should not refer to an element of the event_wait_list array.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clEnqueueReadBuffer")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode EnqueueReadBuffer<T5>(CommandQueue command_queue, ComputeMemory buffer, bool blocking_read, IntPtr offset, IntPtr cb, [InAttribute, OutAttribute] T5[] ptr, Int32 num_events_in_wait_list, ComputeEvent* event_wait_list, [OutAttribute] ComputeEvent* @event)
            where T5 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Enqueue commands to read from a buffer object to host memory.
        /// </summary>
        /// <param name="command_queue"> 
        /// Refers to the command-queue in which the read command will be queued. command_queue and buffer must be created with the same OpenCL context.
        /// </param>
        /// <param name="buffer"> 
        /// Refers to a valid buffer object.
        /// </param>
        /// <param name="blocking_read"> 
        /// Indicates if the read operations are blocking or non-blocking.  If blocking_read is True i.e. the read command is blocking, clEnqueueReadBuffer does not return until the buffer data has been read and copied into memory pointed to by ptr.  If blocking_read is False i.e. the read command is non-blocking, clEnqueueReadBuffer queues a non-blocking read command and returns. The contents of the buffer that ptr points to cannot be used until the read command has completed. The event argument returns an event object which can be used to query the execution status of the read command. When the read command has completed, the contents of the buffer that ptr points to can be used by the application.
        /// </param>
        /// <param name="offset"> 
        /// The offset in bytes in the buffer object to read from.
        /// </param>
        /// <param name="cb"> 
        /// The size in bytes of data being read.
        /// </param>
        /// <param name="ptr"> 
        /// The pointer to buffer in host memory where data is to be read into.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// event_wait_list and num_events_in_wait_list specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// event_wait_list and num_events_in_wait_list specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event"> 
        /// Returns an event object that identifies this particular read command and can be used to query or queue a wait for this particular command to complete.  event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete. If the event_wait_list and the event arguments are not NULL, the event argument should not refer to an element of the event_wait_list array.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clEnqueueReadBuffer")]
        [CLSCompliant(false)]
        public static ErrorCode EnqueueReadBuffer<T5>(CommandQueue command_queue, ComputeMemory buffer, bool blocking_read, IntPtr offset, IntPtr cb, [InAttribute, OutAttribute] T5[,] ptr, Int32 num_events_in_wait_list, ComputeEvent[] event_wait_list, [OutAttribute] out ComputeEvent @event)
            where T5 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Enqueue commands to read from a buffer object to host memory.
        /// </summary>
        /// <param name="command_queue"> 
        /// Refers to the command-queue in which the read command will be queued. command_queue and buffer must be created with the same OpenCL context.
        /// </param>
        /// <param name="buffer"> 
        /// Refers to a valid buffer object.
        /// </param>
        /// <param name="blocking_read"> 
        /// Indicates if the read operations are blocking or non-blocking.  If blocking_read is True i.e. the read command is blocking, clEnqueueReadBuffer does not return until the buffer data has been read and copied into memory pointed to by ptr.  If blocking_read is False i.e. the read command is non-blocking, clEnqueueReadBuffer queues a non-blocking read command and returns. The contents of the buffer that ptr points to cannot be used until the read command has completed. The event argument returns an event object which can be used to query the execution status of the read command. When the read command has completed, the contents of the buffer that ptr points to can be used by the application.
        /// </param>
        /// <param name="offset"> 
        /// The offset in bytes in the buffer object to read from.
        /// </param>
        /// <param name="cb"> 
        /// The size in bytes of data being read.
        /// </param>
        /// <param name="ptr"> 
        /// The pointer to buffer in host memory where data is to be read into.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// event_wait_list and num_events_in_wait_list specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// event_wait_list and num_events_in_wait_list specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event"> 
        /// Returns an event object that identifies this particular read command and can be used to query or queue a wait for this particular command to complete.  event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete. If the event_wait_list and the event arguments are not NULL, the event argument should not refer to an element of the event_wait_list array.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clEnqueueReadBuffer")]
        [CLSCompliant(false)]
        public static ErrorCode EnqueueReadBuffer<T5>(CommandQueue command_queue, ComputeMemory buffer, bool blocking_read, IntPtr offset, IntPtr cb, [InAttribute, OutAttribute] T5[,] ptr, Int32 num_events_in_wait_list, ref ComputeEvent event_wait_list, [OutAttribute] out ComputeEvent @event)
            where T5 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Enqueue commands to read from a buffer object to host memory.
        /// </summary>
        /// <param name="command_queue"> 
        /// Refers to the command-queue in which the read command will be queued. command_queue and buffer must be created with the same OpenCL context.
        /// </param>
        /// <param name="buffer"> 
        /// Refers to a valid buffer object.
        /// </param>
        /// <param name="blocking_read"> 
        /// Indicates if the read operations are blocking or non-blocking.  If blocking_read is True i.e. the read command is blocking, clEnqueueReadBuffer does not return until the buffer data has been read and copied into memory pointed to by ptr.  If blocking_read is False i.e. the read command is non-blocking, clEnqueueReadBuffer queues a non-blocking read command and returns. The contents of the buffer that ptr points to cannot be used until the read command has completed. The event argument returns an event object which can be used to query the execution status of the read command. When the read command has completed, the contents of the buffer that ptr points to can be used by the application.
        /// </param>
        /// <param name="offset"> 
        /// The offset in bytes in the buffer object to read from.
        /// </param>
        /// <param name="cb"> 
        /// The size in bytes of data being read.
        /// </param>
        /// <param name="ptr"> 
        /// The pointer to buffer in host memory where data is to be read into.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// event_wait_list and num_events_in_wait_list specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// event_wait_list and num_events_in_wait_list specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event"> 
        /// Returns an event object that identifies this particular read command and can be used to query or queue a wait for this particular command to complete.  event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete. If the event_wait_list and the event arguments are not NULL, the event argument should not refer to an element of the event_wait_list array.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clEnqueueReadBuffer")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode EnqueueReadBuffer<T5>(CommandQueue command_queue, ComputeMemory buffer, bool blocking_read, IntPtr offset, IntPtr cb, [InAttribute, OutAttribute] T5[,] ptr, Int32 num_events_in_wait_list, ComputeEvent* event_wait_list, [OutAttribute] ComputeEvent* @event)
            where T5 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Enqueue commands to read from a buffer object to host memory.
        /// </summary>
        /// <param name="command_queue"> 
        /// Refers to the command-queue in which the read command will be queued. command_queue and buffer must be created with the same OpenCL context.
        /// </param>
        /// <param name="buffer"> 
        /// Refers to a valid buffer object.
        /// </param>
        /// <param name="blocking_read"> 
        /// Indicates if the read operations are blocking or non-blocking.  If blocking_read is True i.e. the read command is blocking, clEnqueueReadBuffer does not return until the buffer data has been read and copied into memory pointed to by ptr.  If blocking_read is False i.e. the read command is non-blocking, clEnqueueReadBuffer queues a non-blocking read command and returns. The contents of the buffer that ptr points to cannot be used until the read command has completed. The event argument returns an event object which can be used to query the execution status of the read command. When the read command has completed, the contents of the buffer that ptr points to can be used by the application.
        /// </param>
        /// <param name="offset"> 
        /// The offset in bytes in the buffer object to read from.
        /// </param>
        /// <param name="cb"> 
        /// The size in bytes of data being read.
        /// </param>
        /// <param name="ptr"> 
        /// The pointer to buffer in host memory where data is to be read into.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// event_wait_list and num_events_in_wait_list specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// event_wait_list and num_events_in_wait_list specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event"> 
        /// Returns an event object that identifies this particular read command and can be used to query or queue a wait for this particular command to complete.  event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete. If the event_wait_list and the event arguments are not NULL, the event argument should not refer to an element of the event_wait_list array.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clEnqueueReadBuffer")]
        [CLSCompliant(false)]
        public static ErrorCode EnqueueReadBuffer<T5>(CommandQueue command_queue, ComputeMemory buffer, bool blocking_read, IntPtr offset, IntPtr cb, [InAttribute, OutAttribute] T5[,,] ptr, Int32 num_events_in_wait_list, ComputeEvent[] event_wait_list, [OutAttribute] out ComputeEvent @event)
            where T5 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Enqueue commands to read from a buffer object to host memory.
        /// </summary>
        /// <param name="command_queue"> 
        /// Refers to the command-queue in which the read command will be queued. command_queue and buffer must be created with the same OpenCL context.
        /// </param>
        /// <param name="buffer"> 
        /// Refers to a valid buffer object.
        /// </param>
        /// <param name="blocking_read"> 
        /// Indicates if the read operations are blocking or non-blocking.  If blocking_read is True i.e. the read command is blocking, clEnqueueReadBuffer does not return until the buffer data has been read and copied into memory pointed to by ptr.  If blocking_read is False i.e. the read command is non-blocking, clEnqueueReadBuffer queues a non-blocking read command and returns. The contents of the buffer that ptr points to cannot be used until the read command has completed. The event argument returns an event object which can be used to query the execution status of the read command. When the read command has completed, the contents of the buffer that ptr points to can be used by the application.
        /// </param>
        /// <param name="offset"> 
        /// The offset in bytes in the buffer object to read from.
        /// </param>
        /// <param name="cb"> 
        /// The size in bytes of data being read.
        /// </param>
        /// <param name="ptr"> 
        /// The pointer to buffer in host memory where data is to be read into.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// event_wait_list and num_events_in_wait_list specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// event_wait_list and num_events_in_wait_list specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event"> 
        /// Returns an event object that identifies this particular read command and can be used to query or queue a wait for this particular command to complete.  event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete. If the event_wait_list and the event arguments are not NULL, the event argument should not refer to an element of the event_wait_list array.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clEnqueueReadBuffer")]
        [CLSCompliant(false)]
        public static ErrorCode EnqueueReadBuffer<T5>(CommandQueue command_queue, ComputeMemory buffer, bool blocking_read, IntPtr offset, IntPtr cb, [InAttribute, OutAttribute] T5[,,] ptr, Int32 num_events_in_wait_list, ref ComputeEvent event_wait_list, [OutAttribute] out ComputeEvent @event)
            where T5 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Enqueue commands to read from a buffer object to host memory.
        /// </summary>
        /// <param name="command_queue"> 
        /// Refers to the command-queue in which the read command will be queued. command_queue and buffer must be created with the same OpenCL context.
        /// </param>
        /// <param name="buffer"> 
        /// Refers to a valid buffer object.
        /// </param>
        /// <param name="blocking_read"> 
        /// Indicates if the read operations are blocking or non-blocking.  If blocking_read is True i.e. the read command is blocking, clEnqueueReadBuffer does not return until the buffer data has been read and copied into memory pointed to by ptr.  If blocking_read is False i.e. the read command is non-blocking, clEnqueueReadBuffer queues a non-blocking read command and returns. The contents of the buffer that ptr points to cannot be used until the read command has completed. The event argument returns an event object which can be used to query the execution status of the read command. When the read command has completed, the contents of the buffer that ptr points to can be used by the application.
        /// </param>
        /// <param name="offset"> 
        /// The offset in bytes in the buffer object to read from.
        /// </param>
        /// <param name="cb"> 
        /// The size in bytes of data being read.
        /// </param>
        /// <param name="ptr"> 
        /// The pointer to buffer in host memory where data is to be read into.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// event_wait_list and num_events_in_wait_list specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// event_wait_list and num_events_in_wait_list specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event"> 
        /// Returns an event object that identifies this particular read command and can be used to query or queue a wait for this particular command to complete.  event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete. If the event_wait_list and the event arguments are not NULL, the event argument should not refer to an element of the event_wait_list array.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clEnqueueReadBuffer")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode EnqueueReadBuffer<T5>(CommandQueue command_queue, ComputeMemory buffer, bool blocking_read, IntPtr offset, IntPtr cb, [InAttribute, OutAttribute] T5[,,] ptr, Int32 num_events_in_wait_list, ComputeEvent* event_wait_list, [OutAttribute] ComputeEvent* @event)
            where T5 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Enqueue commands to read from a buffer object to host memory.
        /// </summary>
        /// <param name="command_queue"> 
        /// Refers to the command-queue in which the read command will be queued. command_queue and buffer must be created with the same OpenCL context.
        /// </param>
        /// <param name="buffer"> 
        /// Refers to a valid buffer object.
        /// </param>
        /// <param name="blocking_read"> 
        /// Indicates if the read operations are blocking or non-blocking.  If blocking_read is True i.e. the read command is blocking, clEnqueueReadBuffer does not return until the buffer data has been read and copied into memory pointed to by ptr.  If blocking_read is False i.e. the read command is non-blocking, clEnqueueReadBuffer queues a non-blocking read command and returns. The contents of the buffer that ptr points to cannot be used until the read command has completed. The event argument returns an event object which can be used to query the execution status of the read command. When the read command has completed, the contents of the buffer that ptr points to can be used by the application.
        /// </param>
        /// <param name="offset"> 
        /// The offset in bytes in the buffer object to read from.
        /// </param>
        /// <param name="cb"> 
        /// The size in bytes of data being read.
        /// </param>
        /// <param name="ptr"> 
        /// The pointer to buffer in host memory where data is to be read into.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// event_wait_list and num_events_in_wait_list specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// event_wait_list and num_events_in_wait_list specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event"> 
        /// Returns an event object that identifies this particular read command and can be used to query or queue a wait for this particular command to complete.  event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete. If the event_wait_list and the event arguments are not NULL, the event argument should not refer to an element of the event_wait_list array.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clEnqueueReadBuffer")]
        [CLSCompliant(false)]
        public static ErrorCode EnqueueReadBuffer<T5>(CommandQueue command_queue, ComputeMemory buffer, bool blocking_read, IntPtr offset, IntPtr cb, [InAttribute, OutAttribute] ref T5 ptr, Int32 num_events_in_wait_list, ComputeEvent[] event_wait_list, [OutAttribute] out ComputeEvent @event)
            where T5 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Enqueue commands to read from a buffer object to host memory.
        /// </summary>
        /// <param name="command_queue"> 
        /// Refers to the command-queue in which the read command will be queued. command_queue and buffer must be created with the same OpenCL context.
        /// </param>
        /// <param name="buffer"> 
        /// Refers to a valid buffer object.
        /// </param>
        /// <param name="blocking_read"> 
        /// Indicates if the read operations are blocking or non-blocking.  If blocking_read is True i.e. the read command is blocking, clEnqueueReadBuffer does not return until the buffer data has been read and copied into memory pointed to by ptr.  If blocking_read is False i.e. the read command is non-blocking, clEnqueueReadBuffer queues a non-blocking read command and returns. The contents of the buffer that ptr points to cannot be used until the read command has completed. The event argument returns an event object which can be used to query the execution status of the read command. When the read command has completed, the contents of the buffer that ptr points to can be used by the application.
        /// </param>
        /// <param name="offset"> 
        /// The offset in bytes in the buffer object to read from.
        /// </param>
        /// <param name="cb"> 
        /// The size in bytes of data being read.
        /// </param>
        /// <param name="ptr"> 
        /// The pointer to buffer in host memory where data is to be read into.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// event_wait_list and num_events_in_wait_list specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// event_wait_list and num_events_in_wait_list specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event"> 
        /// Returns an event object that identifies this particular read command and can be used to query or queue a wait for this particular command to complete.  event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete. If the event_wait_list and the event arguments are not NULL, the event argument should not refer to an element of the event_wait_list array.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clEnqueueReadBuffer")]
        [CLSCompliant(false)]
        public static ErrorCode EnqueueReadBuffer<T5>(CommandQueue command_queue, ComputeMemory buffer, bool blocking_read, IntPtr offset, IntPtr cb, [InAttribute, OutAttribute] ref T5 ptr, Int32 num_events_in_wait_list, ref ComputeEvent event_wait_list, [OutAttribute] out ComputeEvent @event)
            where T5 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Enqueue commands to read from a buffer object to host memory.
        /// </summary>
        /// <param name="command_queue"> 
        /// Refers to the command-queue in which the read command will be queued. command_queue and buffer must be created with the same OpenCL context.
        /// </param>
        /// <param name="buffer"> 
        /// Refers to a valid buffer object.
        /// </param>
        /// <param name="blocking_read"> 
        /// Indicates if the read operations are blocking or non-blocking.  If blocking_read is True i.e. the read command is blocking, clEnqueueReadBuffer does not return until the buffer data has been read and copied into memory pointed to by ptr.  If blocking_read is False i.e. the read command is non-blocking, clEnqueueReadBuffer queues a non-blocking read command and returns. The contents of the buffer that ptr points to cannot be used until the read command has completed. The event argument returns an event object which can be used to query the execution status of the read command. When the read command has completed, the contents of the buffer that ptr points to can be used by the application.
        /// </param>
        /// <param name="offset"> 
        /// The offset in bytes in the buffer object to read from.
        /// </param>
        /// <param name="cb"> 
        /// The size in bytes of data being read.
        /// </param>
        /// <param name="ptr"> 
        /// The pointer to buffer in host memory where data is to be read into.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// event_wait_list and num_events_in_wait_list specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// event_wait_list and num_events_in_wait_list specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event"> 
        /// Returns an event object that identifies this particular read command and can be used to query or queue a wait for this particular command to complete.  event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete. If the event_wait_list and the event arguments are not NULL, the event argument should not refer to an element of the event_wait_list array.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clEnqueueReadBuffer")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode EnqueueReadBuffer<T5>(CommandQueue command_queue, ComputeMemory buffer, bool blocking_read, IntPtr offset, IntPtr cb, [InAttribute, OutAttribute] ref T5 ptr, Int32 num_events_in_wait_list, ComputeEvent* event_wait_list, [OutAttribute] ComputeEvent* @event)
            where T5 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.1]
        /// Enqueue commands to read from a rectangular region from a buffer object to host memory.
        /// </summary>
        /// <param name="command_queue"> 
        /// Refers to the command-queue in which the read command will be queued. command_queue and buffer must be created with the same OpenCL context.
        /// </param>
        /// <param name="buffer"> 
        /// Refers to a valid buffer object.
        /// </param>
        /// <param name="blocking_read"> 
        /// Indicates if the read operations are blocking or non-blocking.  If blocking_read is True i.e. the read command is blocking, clEnqueueReadBufferRect does not return until the buffer data has been read and copied into memory pointed to by ptr.  If blocking_read is False i.e. the read command is non-blocking, clEnqueueReadBufferRect queues a non-blocking read command and returns. The contents of the buffer that ptr points to cannot be used until the read command has completed. The event argument argument returns an event object which can be used to query the execution status of the read command. When the read command has completed, the contents of the buffer that ptr points to can be used by the application.
        /// </param>
        /// <param name="buffer_offset">[length: 3] 
        /// The (x, y, z) offset in the memory region associated with buffer. For a 2D rectangle region, the z value given by buffer_origin[2] should be 0. The offset in bytes is computed as buffer_origin[2] * buffer_slice_pitch + buffer_origin[1] * buffer_row_pitch + buffer_origin[0].
        /// </param>
        /// <param name="host_offset">[length: 3] 
        /// The (x, y, z) offset in the memory region pointed to by ptr. For a 2D rectangle region, the z value given by host_origin[2] should be 0. The offset in bytes is computed as host_origin[2] * host_slice_pitch + host_origin[1] * host_row_pitch + host_origin[0].
        /// </param>
        /// <param name="region">[length: 3] 
        /// The (width, height, depth) in bytes of the 2D or 3D rectangle being read or written. For a 2D rectangle copy, the depth value given by region[2] should be 1.
        /// </param>
        /// <param name="buffer_row_pitch"> 
        /// The length of each row in bytes to be used for the memory region associated with buffer. If buffer_row_pitch is 0, buffer_row_pitch is computed as region[0].
        /// </param>
        /// <param name="buffer_slice_pitch"> 
        /// The length of each 2D slice in bytes to be used for the memory region associated with buffer. If buffer_slice_pitch is 0, buffer_slice_pitch is computed as region[1] * buffer_row_pitch.
        /// </param>
        /// <param name="host_row_pitch"> 
        /// The length of each row in bytes to be used for the memory region pointed to by ptr. If host_row_pitch is 0, host_row_pitch is computed as region[0].
        /// </param>
        /// <param name="host_slice_pitch"> 
        /// The length of each 2D slice in bytes to be used for the memory region pointed to by ptr. If host_slice_pitch is 0, host_slice_pitch is computed as region[1] * host_row_pitch.
        /// </param>
        /// <param name="ptr"> 
        /// The pointer to buffer in host memory where data is to be read into.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// event_wait_list and num_events_in_wait_list specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0.  The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// event_wait_list and num_events_in_wait_list specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0.  The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event">[length: 1] 
        /// Returns an event object that identifies this particular read command and can be used to query or queue a wait for this particular command to complete.  event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete. If the event_wait_list and the event arguments are not NULL, the event argument should not refer to an element of the event_wait_list array.
        /// </param>
        [AutoGenerated(Category = "", Version = "1.1", EntryPoint = "clEnqueueReadBufferRect")]
        [CLSCompliant(false)]
        public static ErrorCode EnqueueReadBufferRect(CommandQueue command_queue, ComputeMemory buffer, bool blocking_read, IntPtr[] buffer_offset, IntPtr[] host_offset, IntPtr[] region, IntPtr buffer_row_pitch, IntPtr buffer_slice_pitch, IntPtr host_row_pitch, IntPtr host_slice_pitch, IntPtr ptr, Int32 num_events_in_wait_list, ComputeEvent[] event_wait_list, [OutAttribute] out ComputeEvent @event) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.1]
        /// Enqueue commands to read from a rectangular region from a buffer object to host memory.
        /// </summary>
        /// <param name="command_queue"> 
        /// Refers to the command-queue in which the read command will be queued. command_queue and buffer must be created with the same OpenCL context.
        /// </param>
        /// <param name="buffer"> 
        /// Refers to a valid buffer object.
        /// </param>
        /// <param name="blocking_read"> 
        /// Indicates if the read operations are blocking or non-blocking.  If blocking_read is True i.e. the read command is blocking, clEnqueueReadBufferRect does not return until the buffer data has been read and copied into memory pointed to by ptr.  If blocking_read is False i.e. the read command is non-blocking, clEnqueueReadBufferRect queues a non-blocking read command and returns. The contents of the buffer that ptr points to cannot be used until the read command has completed. The event argument argument returns an event object which can be used to query the execution status of the read command. When the read command has completed, the contents of the buffer that ptr points to can be used by the application.
        /// </param>
        /// <param name="buffer_offset">[length: 3] 
        /// The (x, y, z) offset in the memory region associated with buffer. For a 2D rectangle region, the z value given by buffer_origin[2] should be 0. The offset in bytes is computed as buffer_origin[2] * buffer_slice_pitch + buffer_origin[1] * buffer_row_pitch + buffer_origin[0].
        /// </param>
        /// <param name="host_offset">[length: 3] 
        /// The (x, y, z) offset in the memory region pointed to by ptr. For a 2D rectangle region, the z value given by host_origin[2] should be 0. The offset in bytes is computed as host_origin[2] * host_slice_pitch + host_origin[1] * host_row_pitch + host_origin[0].
        /// </param>
        /// <param name="region">[length: 3] 
        /// The (width, height, depth) in bytes of the 2D or 3D rectangle being read or written. For a 2D rectangle copy, the depth value given by region[2] should be 1.
        /// </param>
        /// <param name="buffer_row_pitch"> 
        /// The length of each row in bytes to be used for the memory region associated with buffer. If buffer_row_pitch is 0, buffer_row_pitch is computed as region[0].
        /// </param>
        /// <param name="buffer_slice_pitch"> 
        /// The length of each 2D slice in bytes to be used for the memory region associated with buffer. If buffer_slice_pitch is 0, buffer_slice_pitch is computed as region[1] * buffer_row_pitch.
        /// </param>
        /// <param name="host_row_pitch"> 
        /// The length of each row in bytes to be used for the memory region pointed to by ptr. If host_row_pitch is 0, host_row_pitch is computed as region[0].
        /// </param>
        /// <param name="host_slice_pitch"> 
        /// The length of each 2D slice in bytes to be used for the memory region pointed to by ptr. If host_slice_pitch is 0, host_slice_pitch is computed as region[1] * host_row_pitch.
        /// </param>
        /// <param name="ptr"> 
        /// The pointer to buffer in host memory where data is to be read into.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// event_wait_list and num_events_in_wait_list specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0.  The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// event_wait_list and num_events_in_wait_list specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0.  The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event">[length: 1] 
        /// Returns an event object that identifies this particular read command and can be used to query or queue a wait for this particular command to complete.  event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete. If the event_wait_list and the event arguments are not NULL, the event argument should not refer to an element of the event_wait_list array.
        /// </param>
        [AutoGenerated(Category = "", Version = "1.1", EntryPoint = "clEnqueueReadBufferRect")]
        [CLSCompliant(false)]
        public static ErrorCode EnqueueReadBufferRect<T10>(CommandQueue command_queue, ComputeMemory buffer, bool blocking_read, IntPtr[] buffer_offset, IntPtr[] host_offset, IntPtr[] region, IntPtr buffer_row_pitch, IntPtr buffer_slice_pitch, IntPtr host_row_pitch, IntPtr host_slice_pitch, [InAttribute, OutAttribute] T10[] ptr, Int32 num_events_in_wait_list, ComputeEvent[] event_wait_list, [OutAttribute] out ComputeEvent @event)
            where T10 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.1]
        /// Enqueue commands to read from a rectangular region from a buffer object to host memory.
        /// </summary>
        /// <param name="command_queue"> 
        /// Refers to the command-queue in which the read command will be queued. command_queue and buffer must be created with the same OpenCL context.
        /// </param>
        /// <param name="buffer"> 
        /// Refers to a valid buffer object.
        /// </param>
        /// <param name="blocking_read"> 
        /// Indicates if the read operations are blocking or non-blocking.  If blocking_read is True i.e. the read command is blocking, clEnqueueReadBufferRect does not return until the buffer data has been read and copied into memory pointed to by ptr.  If blocking_read is False i.e. the read command is non-blocking, clEnqueueReadBufferRect queues a non-blocking read command and returns. The contents of the buffer that ptr points to cannot be used until the read command has completed. The event argument argument returns an event object which can be used to query the execution status of the read command. When the read command has completed, the contents of the buffer that ptr points to can be used by the application.
        /// </param>
        /// <param name="buffer_offset">[length: 3] 
        /// The (x, y, z) offset in the memory region associated with buffer. For a 2D rectangle region, the z value given by buffer_origin[2] should be 0. The offset in bytes is computed as buffer_origin[2] * buffer_slice_pitch + buffer_origin[1] * buffer_row_pitch + buffer_origin[0].
        /// </param>
        /// <param name="host_offset">[length: 3] 
        /// The (x, y, z) offset in the memory region pointed to by ptr. For a 2D rectangle region, the z value given by host_origin[2] should be 0. The offset in bytes is computed as host_origin[2] * host_slice_pitch + host_origin[1] * host_row_pitch + host_origin[0].
        /// </param>
        /// <param name="region">[length: 3] 
        /// The (width, height, depth) in bytes of the 2D or 3D rectangle being read or written. For a 2D rectangle copy, the depth value given by region[2] should be 1.
        /// </param>
        /// <param name="buffer_row_pitch"> 
        /// The length of each row in bytes to be used for the memory region associated with buffer. If buffer_row_pitch is 0, buffer_row_pitch is computed as region[0].
        /// </param>
        /// <param name="buffer_slice_pitch"> 
        /// The length of each 2D slice in bytes to be used for the memory region associated with buffer. If buffer_slice_pitch is 0, buffer_slice_pitch is computed as region[1] * buffer_row_pitch.
        /// </param>
        /// <param name="host_row_pitch"> 
        /// The length of each row in bytes to be used for the memory region pointed to by ptr. If host_row_pitch is 0, host_row_pitch is computed as region[0].
        /// </param>
        /// <param name="host_slice_pitch"> 
        /// The length of each 2D slice in bytes to be used for the memory region pointed to by ptr. If host_slice_pitch is 0, host_slice_pitch is computed as region[1] * host_row_pitch.
        /// </param>
        /// <param name="ptr"> 
        /// The pointer to buffer in host memory where data is to be read into.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// event_wait_list and num_events_in_wait_list specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0.  The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// event_wait_list and num_events_in_wait_list specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0.  The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event">[length: 1] 
        /// Returns an event object that identifies this particular read command and can be used to query or queue a wait for this particular command to complete.  event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete. If the event_wait_list and the event arguments are not NULL, the event argument should not refer to an element of the event_wait_list array.
        /// </param>
        [AutoGenerated(Category = "", Version = "1.1", EntryPoint = "clEnqueueReadBufferRect")]
        [CLSCompliant(false)]
        public static ErrorCode EnqueueReadBufferRect<T10>(CommandQueue command_queue, ComputeMemory buffer, bool blocking_read, IntPtr[] buffer_offset, IntPtr[] host_offset, IntPtr[] region, IntPtr buffer_row_pitch, IntPtr buffer_slice_pitch, IntPtr host_row_pitch, IntPtr host_slice_pitch, [InAttribute, OutAttribute] T10[,] ptr, Int32 num_events_in_wait_list, ComputeEvent[] event_wait_list, [OutAttribute] out ComputeEvent @event)
            where T10 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.1]
        /// Enqueue commands to read from a rectangular region from a buffer object to host memory.
        /// </summary>
        /// <param name="command_queue"> 
        /// Refers to the command-queue in which the read command will be queued. command_queue and buffer must be created with the same OpenCL context.
        /// </param>
        /// <param name="buffer"> 
        /// Refers to a valid buffer object.
        /// </param>
        /// <param name="blocking_read"> 
        /// Indicates if the read operations are blocking or non-blocking.  If blocking_read is True i.e. the read command is blocking, clEnqueueReadBufferRect does not return until the buffer data has been read and copied into memory pointed to by ptr.  If blocking_read is False i.e. the read command is non-blocking, clEnqueueReadBufferRect queues a non-blocking read command and returns. The contents of the buffer that ptr points to cannot be used until the read command has completed. The event argument argument returns an event object which can be used to query the execution status of the read command. When the read command has completed, the contents of the buffer that ptr points to can be used by the application.
        /// </param>
        /// <param name="buffer_offset">[length: 3] 
        /// The (x, y, z) offset in the memory region associated with buffer. For a 2D rectangle region, the z value given by buffer_origin[2] should be 0. The offset in bytes is computed as buffer_origin[2] * buffer_slice_pitch + buffer_origin[1] * buffer_row_pitch + buffer_origin[0].
        /// </param>
        /// <param name="host_offset">[length: 3] 
        /// The (x, y, z) offset in the memory region pointed to by ptr. For a 2D rectangle region, the z value given by host_origin[2] should be 0. The offset in bytes is computed as host_origin[2] * host_slice_pitch + host_origin[1] * host_row_pitch + host_origin[0].
        /// </param>
        /// <param name="region">[length: 3] 
        /// The (width, height, depth) in bytes of the 2D or 3D rectangle being read or written. For a 2D rectangle copy, the depth value given by region[2] should be 1.
        /// </param>
        /// <param name="buffer_row_pitch"> 
        /// The length of each row in bytes to be used for the memory region associated with buffer. If buffer_row_pitch is 0, buffer_row_pitch is computed as region[0].
        /// </param>
        /// <param name="buffer_slice_pitch"> 
        /// The length of each 2D slice in bytes to be used for the memory region associated with buffer. If buffer_slice_pitch is 0, buffer_slice_pitch is computed as region[1] * buffer_row_pitch.
        /// </param>
        /// <param name="host_row_pitch"> 
        /// The length of each row in bytes to be used for the memory region pointed to by ptr. If host_row_pitch is 0, host_row_pitch is computed as region[0].
        /// </param>
        /// <param name="host_slice_pitch"> 
        /// The length of each 2D slice in bytes to be used for the memory region pointed to by ptr. If host_slice_pitch is 0, host_slice_pitch is computed as region[1] * host_row_pitch.
        /// </param>
        /// <param name="ptr"> 
        /// The pointer to buffer in host memory where data is to be read into.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// event_wait_list and num_events_in_wait_list specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0.  The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// event_wait_list and num_events_in_wait_list specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0.  The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event">[length: 1] 
        /// Returns an event object that identifies this particular read command and can be used to query or queue a wait for this particular command to complete.  event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete. If the event_wait_list and the event arguments are not NULL, the event argument should not refer to an element of the event_wait_list array.
        /// </param>
        [AutoGenerated(Category = "", Version = "1.1", EntryPoint = "clEnqueueReadBufferRect")]
        [CLSCompliant(false)]
        public static ErrorCode EnqueueReadBufferRect<T10>(CommandQueue command_queue, ComputeMemory buffer, bool blocking_read, IntPtr[] buffer_offset, IntPtr[] host_offset, IntPtr[] region, IntPtr buffer_row_pitch, IntPtr buffer_slice_pitch, IntPtr host_row_pitch, IntPtr host_slice_pitch, [InAttribute, OutAttribute] T10[,,] ptr, Int32 num_events_in_wait_list, ComputeEvent[] event_wait_list, [OutAttribute] out ComputeEvent @event)
            where T10 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.1]
        /// Enqueue commands to read from a rectangular region from a buffer object to host memory.
        /// </summary>
        /// <param name="command_queue"> 
        /// Refers to the command-queue in which the read command will be queued. command_queue and buffer must be created with the same OpenCL context.
        /// </param>
        /// <param name="buffer"> 
        /// Refers to a valid buffer object.
        /// </param>
        /// <param name="blocking_read"> 
        /// Indicates if the read operations are blocking or non-blocking.  If blocking_read is True i.e. the read command is blocking, clEnqueueReadBufferRect does not return until the buffer data has been read and copied into memory pointed to by ptr.  If blocking_read is False i.e. the read command is non-blocking, clEnqueueReadBufferRect queues a non-blocking read command and returns. The contents of the buffer that ptr points to cannot be used until the read command has completed. The event argument argument returns an event object which can be used to query the execution status of the read command. When the read command has completed, the contents of the buffer that ptr points to can be used by the application.
        /// </param>
        /// <param name="buffer_offset">[length: 3] 
        /// The (x, y, z) offset in the memory region associated with buffer. For a 2D rectangle region, the z value given by buffer_origin[2] should be 0. The offset in bytes is computed as buffer_origin[2] * buffer_slice_pitch + buffer_origin[1] * buffer_row_pitch + buffer_origin[0].
        /// </param>
        /// <param name="host_offset">[length: 3] 
        /// The (x, y, z) offset in the memory region pointed to by ptr. For a 2D rectangle region, the z value given by host_origin[2] should be 0. The offset in bytes is computed as host_origin[2] * host_slice_pitch + host_origin[1] * host_row_pitch + host_origin[0].
        /// </param>
        /// <param name="region">[length: 3] 
        /// The (width, height, depth) in bytes of the 2D or 3D rectangle being read or written. For a 2D rectangle copy, the depth value given by region[2] should be 1.
        /// </param>
        /// <param name="buffer_row_pitch"> 
        /// The length of each row in bytes to be used for the memory region associated with buffer. If buffer_row_pitch is 0, buffer_row_pitch is computed as region[0].
        /// </param>
        /// <param name="buffer_slice_pitch"> 
        /// The length of each 2D slice in bytes to be used for the memory region associated with buffer. If buffer_slice_pitch is 0, buffer_slice_pitch is computed as region[1] * buffer_row_pitch.
        /// </param>
        /// <param name="host_row_pitch"> 
        /// The length of each row in bytes to be used for the memory region pointed to by ptr. If host_row_pitch is 0, host_row_pitch is computed as region[0].
        /// </param>
        /// <param name="host_slice_pitch"> 
        /// The length of each 2D slice in bytes to be used for the memory region pointed to by ptr. If host_slice_pitch is 0, host_slice_pitch is computed as region[1] * host_row_pitch.
        /// </param>
        /// <param name="ptr"> 
        /// The pointer to buffer in host memory where data is to be read into.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// event_wait_list and num_events_in_wait_list specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0.  The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// event_wait_list and num_events_in_wait_list specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0.  The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event">[length: 1] 
        /// Returns an event object that identifies this particular read command and can be used to query or queue a wait for this particular command to complete.  event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete. If the event_wait_list and the event arguments are not NULL, the event argument should not refer to an element of the event_wait_list array.
        /// </param>
        [AutoGenerated(Category = "", Version = "1.1", EntryPoint = "clEnqueueReadBufferRect")]
        [CLSCompliant(false)]
        public static ErrorCode EnqueueReadBufferRect<T10>(CommandQueue command_queue, ComputeMemory buffer, bool blocking_read, IntPtr[] buffer_offset, IntPtr[] host_offset, IntPtr[] region, IntPtr buffer_row_pitch, IntPtr buffer_slice_pitch, IntPtr host_row_pitch, IntPtr host_slice_pitch, [InAttribute, OutAttribute] ref T10 ptr, Int32 num_events_in_wait_list, ComputeEvent[] event_wait_list, [OutAttribute] out ComputeEvent @event)
            where T10 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.1]
        /// Enqueue commands to read from a rectangular region from a buffer object to host memory.
        /// </summary>
        /// <param name="command_queue"> 
        /// Refers to the command-queue in which the read command will be queued. command_queue and buffer must be created with the same OpenCL context.
        /// </param>
        /// <param name="buffer"> 
        /// Refers to a valid buffer object.
        /// </param>
        /// <param name="blocking_read"> 
        /// Indicates if the read operations are blocking or non-blocking.  If blocking_read is True i.e. the read command is blocking, clEnqueueReadBufferRect does not return until the buffer data has been read and copied into memory pointed to by ptr.  If blocking_read is False i.e. the read command is non-blocking, clEnqueueReadBufferRect queues a non-blocking read command and returns. The contents of the buffer that ptr points to cannot be used until the read command has completed. The event argument argument returns an event object which can be used to query the execution status of the read command. When the read command has completed, the contents of the buffer that ptr points to can be used by the application.
        /// </param>
        /// <param name="buffer_offset">[length: 3] 
        /// The (x, y, z) offset in the memory region associated with buffer. For a 2D rectangle region, the z value given by buffer_origin[2] should be 0. The offset in bytes is computed as buffer_origin[2] * buffer_slice_pitch + buffer_origin[1] * buffer_row_pitch + buffer_origin[0].
        /// </param>
        /// <param name="host_offset">[length: 3] 
        /// The (x, y, z) offset in the memory region pointed to by ptr. For a 2D rectangle region, the z value given by host_origin[2] should be 0. The offset in bytes is computed as host_origin[2] * host_slice_pitch + host_origin[1] * host_row_pitch + host_origin[0].
        /// </param>
        /// <param name="region">[length: 3] 
        /// The (width, height, depth) in bytes of the 2D or 3D rectangle being read or written. For a 2D rectangle copy, the depth value given by region[2] should be 1.
        /// </param>
        /// <param name="buffer_row_pitch"> 
        /// The length of each row in bytes to be used for the memory region associated with buffer. If buffer_row_pitch is 0, buffer_row_pitch is computed as region[0].
        /// </param>
        /// <param name="buffer_slice_pitch"> 
        /// The length of each 2D slice in bytes to be used for the memory region associated with buffer. If buffer_slice_pitch is 0, buffer_slice_pitch is computed as region[1] * buffer_row_pitch.
        /// </param>
        /// <param name="host_row_pitch"> 
        /// The length of each row in bytes to be used for the memory region pointed to by ptr. If host_row_pitch is 0, host_row_pitch is computed as region[0].
        /// </param>
        /// <param name="host_slice_pitch"> 
        /// The length of each 2D slice in bytes to be used for the memory region pointed to by ptr. If host_slice_pitch is 0, host_slice_pitch is computed as region[1] * host_row_pitch.
        /// </param>
        /// <param name="ptr"> 
        /// The pointer to buffer in host memory where data is to be read into.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// event_wait_list and num_events_in_wait_list specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0.  The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// event_wait_list and num_events_in_wait_list specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0.  The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event">[length: 1] 
        /// Returns an event object that identifies this particular read command and can be used to query or queue a wait for this particular command to complete.  event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete. If the event_wait_list and the event arguments are not NULL, the event argument should not refer to an element of the event_wait_list array.
        /// </param>
        [AutoGenerated(Category = "", Version = "1.1", EntryPoint = "clEnqueueReadBufferRect")]
        [CLSCompliant(false)]
        public static ErrorCode EnqueueReadBufferRect(CommandQueue command_queue, ComputeMemory buffer, bool blocking_read, ref IntPtr buffer_offset, ref IntPtr host_offset, ref IntPtr region, IntPtr buffer_row_pitch, IntPtr buffer_slice_pitch, IntPtr host_row_pitch, IntPtr host_slice_pitch, IntPtr ptr, Int32 num_events_in_wait_list, ref ComputeEvent event_wait_list, [OutAttribute] out ComputeEvent @event) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.1]
        /// Enqueue commands to read from a rectangular region from a buffer object to host memory.
        /// </summary>
        /// <param name="command_queue"> 
        /// Refers to the command-queue in which the read command will be queued. command_queue and buffer must be created with the same OpenCL context.
        /// </param>
        /// <param name="buffer"> 
        /// Refers to a valid buffer object.
        /// </param>
        /// <param name="blocking_read"> 
        /// Indicates if the read operations are blocking or non-blocking.  If blocking_read is True i.e. the read command is blocking, clEnqueueReadBufferRect does not return until the buffer data has been read and copied into memory pointed to by ptr.  If blocking_read is False i.e. the read command is non-blocking, clEnqueueReadBufferRect queues a non-blocking read command and returns. The contents of the buffer that ptr points to cannot be used until the read command has completed. The event argument argument returns an event object which can be used to query the execution status of the read command. When the read command has completed, the contents of the buffer that ptr points to can be used by the application.
        /// </param>
        /// <param name="buffer_offset">[length: 3] 
        /// The (x, y, z) offset in the memory region associated with buffer. For a 2D rectangle region, the z value given by buffer_origin[2] should be 0. The offset in bytes is computed as buffer_origin[2] * buffer_slice_pitch + buffer_origin[1] * buffer_row_pitch + buffer_origin[0].
        /// </param>
        /// <param name="host_offset">[length: 3] 
        /// The (x, y, z) offset in the memory region pointed to by ptr. For a 2D rectangle region, the z value given by host_origin[2] should be 0. The offset in bytes is computed as host_origin[2] * host_slice_pitch + host_origin[1] * host_row_pitch + host_origin[0].
        /// </param>
        /// <param name="region">[length: 3] 
        /// The (width, height, depth) in bytes of the 2D or 3D rectangle being read or written. For a 2D rectangle copy, the depth value given by region[2] should be 1.
        /// </param>
        /// <param name="buffer_row_pitch"> 
        /// The length of each row in bytes to be used for the memory region associated with buffer. If buffer_row_pitch is 0, buffer_row_pitch is computed as region[0].
        /// </param>
        /// <param name="buffer_slice_pitch"> 
        /// The length of each 2D slice in bytes to be used for the memory region associated with buffer. If buffer_slice_pitch is 0, buffer_slice_pitch is computed as region[1] * buffer_row_pitch.
        /// </param>
        /// <param name="host_row_pitch"> 
        /// The length of each row in bytes to be used for the memory region pointed to by ptr. If host_row_pitch is 0, host_row_pitch is computed as region[0].
        /// </param>
        /// <param name="host_slice_pitch"> 
        /// The length of each 2D slice in bytes to be used for the memory region pointed to by ptr. If host_slice_pitch is 0, host_slice_pitch is computed as region[1] * host_row_pitch.
        /// </param>
        /// <param name="ptr"> 
        /// The pointer to buffer in host memory where data is to be read into.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// event_wait_list and num_events_in_wait_list specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0.  The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// event_wait_list and num_events_in_wait_list specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0.  The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event">[length: 1] 
        /// Returns an event object that identifies this particular read command and can be used to query or queue a wait for this particular command to complete.  event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete. If the event_wait_list and the event arguments are not NULL, the event argument should not refer to an element of the event_wait_list array.
        /// </param>
        [AutoGenerated(Category = "", Version = "1.1", EntryPoint = "clEnqueueReadBufferRect")]
        [CLSCompliant(false)]
        public static ErrorCode EnqueueReadBufferRect<T10>(CommandQueue command_queue, ComputeMemory buffer, bool blocking_read, ref IntPtr buffer_offset, ref IntPtr host_offset, ref IntPtr region, IntPtr buffer_row_pitch, IntPtr buffer_slice_pitch, IntPtr host_row_pitch, IntPtr host_slice_pitch, [InAttribute, OutAttribute] T10[] ptr, Int32 num_events_in_wait_list, ref ComputeEvent event_wait_list, [OutAttribute] out ComputeEvent @event)
            where T10 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.1]
        /// Enqueue commands to read from a rectangular region from a buffer object to host memory.
        /// </summary>
        /// <param name="command_queue"> 
        /// Refers to the command-queue in which the read command will be queued. command_queue and buffer must be created with the same OpenCL context.
        /// </param>
        /// <param name="buffer"> 
        /// Refers to a valid buffer object.
        /// </param>
        /// <param name="blocking_read"> 
        /// Indicates if the read operations are blocking or non-blocking.  If blocking_read is True i.e. the read command is blocking, clEnqueueReadBufferRect does not return until the buffer data has been read and copied into memory pointed to by ptr.  If blocking_read is False i.e. the read command is non-blocking, clEnqueueReadBufferRect queues a non-blocking read command and returns. The contents of the buffer that ptr points to cannot be used until the read command has completed. The event argument argument returns an event object which can be used to query the execution status of the read command. When the read command has completed, the contents of the buffer that ptr points to can be used by the application.
        /// </param>
        /// <param name="buffer_offset">[length: 3] 
        /// The (x, y, z) offset in the memory region associated with buffer. For a 2D rectangle region, the z value given by buffer_origin[2] should be 0. The offset in bytes is computed as buffer_origin[2] * buffer_slice_pitch + buffer_origin[1] * buffer_row_pitch + buffer_origin[0].
        /// </param>
        /// <param name="host_offset">[length: 3] 
        /// The (x, y, z) offset in the memory region pointed to by ptr. For a 2D rectangle region, the z value given by host_origin[2] should be 0. The offset in bytes is computed as host_origin[2] * host_slice_pitch + host_origin[1] * host_row_pitch + host_origin[0].
        /// </param>
        /// <param name="region">[length: 3] 
        /// The (width, height, depth) in bytes of the 2D or 3D rectangle being read or written. For a 2D rectangle copy, the depth value given by region[2] should be 1.
        /// </param>
        /// <param name="buffer_row_pitch"> 
        /// The length of each row in bytes to be used for the memory region associated with buffer. If buffer_row_pitch is 0, buffer_row_pitch is computed as region[0].
        /// </param>
        /// <param name="buffer_slice_pitch"> 
        /// The length of each 2D slice in bytes to be used for the memory region associated with buffer. If buffer_slice_pitch is 0, buffer_slice_pitch is computed as region[1] * buffer_row_pitch.
        /// </param>
        /// <param name="host_row_pitch"> 
        /// The length of each row in bytes to be used for the memory region pointed to by ptr. If host_row_pitch is 0, host_row_pitch is computed as region[0].
        /// </param>
        /// <param name="host_slice_pitch"> 
        /// The length of each 2D slice in bytes to be used for the memory region pointed to by ptr. If host_slice_pitch is 0, host_slice_pitch is computed as region[1] * host_row_pitch.
        /// </param>
        /// <param name="ptr"> 
        /// The pointer to buffer in host memory where data is to be read into.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// event_wait_list and num_events_in_wait_list specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0.  The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// event_wait_list and num_events_in_wait_list specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0.  The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event">[length: 1] 
        /// Returns an event object that identifies this particular read command and can be used to query or queue a wait for this particular command to complete.  event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete. If the event_wait_list and the event arguments are not NULL, the event argument should not refer to an element of the event_wait_list array.
        /// </param>
        [AutoGenerated(Category = "", Version = "1.1", EntryPoint = "clEnqueueReadBufferRect")]
        [CLSCompliant(false)]
        public static ErrorCode EnqueueReadBufferRect<T10>(CommandQueue command_queue, ComputeMemory buffer, bool blocking_read, ref IntPtr buffer_offset, ref IntPtr host_offset, ref IntPtr region, IntPtr buffer_row_pitch, IntPtr buffer_slice_pitch, IntPtr host_row_pitch, IntPtr host_slice_pitch, [InAttribute, OutAttribute] T10[,] ptr, Int32 num_events_in_wait_list, ref ComputeEvent event_wait_list, [OutAttribute] out ComputeEvent @event)
            where T10 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.1]
        /// Enqueue commands to read from a rectangular region from a buffer object to host memory.
        /// </summary>
        /// <param name="command_queue"> 
        /// Refers to the command-queue in which the read command will be queued. command_queue and buffer must be created with the same OpenCL context.
        /// </param>
        /// <param name="buffer"> 
        /// Refers to a valid buffer object.
        /// </param>
        /// <param name="blocking_read"> 
        /// Indicates if the read operations are blocking or non-blocking.  If blocking_read is True i.e. the read command is blocking, clEnqueueReadBufferRect does not return until the buffer data has been read and copied into memory pointed to by ptr.  If blocking_read is False i.e. the read command is non-blocking, clEnqueueReadBufferRect queues a non-blocking read command and returns. The contents of the buffer that ptr points to cannot be used until the read command has completed. The event argument argument returns an event object which can be used to query the execution status of the read command. When the read command has completed, the contents of the buffer that ptr points to can be used by the application.
        /// </param>
        /// <param name="buffer_offset">[length: 3] 
        /// The (x, y, z) offset in the memory region associated with buffer. For a 2D rectangle region, the z value given by buffer_origin[2] should be 0. The offset in bytes is computed as buffer_origin[2] * buffer_slice_pitch + buffer_origin[1] * buffer_row_pitch + buffer_origin[0].
        /// </param>
        /// <param name="host_offset">[length: 3] 
        /// The (x, y, z) offset in the memory region pointed to by ptr. For a 2D rectangle region, the z value given by host_origin[2] should be 0. The offset in bytes is computed as host_origin[2] * host_slice_pitch + host_origin[1] * host_row_pitch + host_origin[0].
        /// </param>
        /// <param name="region">[length: 3] 
        /// The (width, height, depth) in bytes of the 2D or 3D rectangle being read or written. For a 2D rectangle copy, the depth value given by region[2] should be 1.
        /// </param>
        /// <param name="buffer_row_pitch"> 
        /// The length of each row in bytes to be used for the memory region associated with buffer. If buffer_row_pitch is 0, buffer_row_pitch is computed as region[0].
        /// </param>
        /// <param name="buffer_slice_pitch"> 
        /// The length of each 2D slice in bytes to be used for the memory region associated with buffer. If buffer_slice_pitch is 0, buffer_slice_pitch is computed as region[1] * buffer_row_pitch.
        /// </param>
        /// <param name="host_row_pitch"> 
        /// The length of each row in bytes to be used for the memory region pointed to by ptr. If host_row_pitch is 0, host_row_pitch is computed as region[0].
        /// </param>
        /// <param name="host_slice_pitch"> 
        /// The length of each 2D slice in bytes to be used for the memory region pointed to by ptr. If host_slice_pitch is 0, host_slice_pitch is computed as region[1] * host_row_pitch.
        /// </param>
        /// <param name="ptr"> 
        /// The pointer to buffer in host memory where data is to be read into.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// event_wait_list and num_events_in_wait_list specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0.  The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// event_wait_list and num_events_in_wait_list specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0.  The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event">[length: 1] 
        /// Returns an event object that identifies this particular read command and can be used to query or queue a wait for this particular command to complete.  event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete. If the event_wait_list and the event arguments are not NULL, the event argument should not refer to an element of the event_wait_list array.
        /// </param>
        [AutoGenerated(Category = "", Version = "1.1", EntryPoint = "clEnqueueReadBufferRect")]
        [CLSCompliant(false)]
        public static ErrorCode EnqueueReadBufferRect<T10>(CommandQueue command_queue, ComputeMemory buffer, bool blocking_read, ref IntPtr buffer_offset, ref IntPtr host_offset, ref IntPtr region, IntPtr buffer_row_pitch, IntPtr buffer_slice_pitch, IntPtr host_row_pitch, IntPtr host_slice_pitch, [InAttribute, OutAttribute] T10[,,] ptr, Int32 num_events_in_wait_list, ref ComputeEvent event_wait_list, [OutAttribute] out ComputeEvent @event)
            where T10 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.1]
        /// Enqueue commands to read from a rectangular region from a buffer object to host memory.
        /// </summary>
        /// <param name="command_queue"> 
        /// Refers to the command-queue in which the read command will be queued. command_queue and buffer must be created with the same OpenCL context.
        /// </param>
        /// <param name="buffer"> 
        /// Refers to a valid buffer object.
        /// </param>
        /// <param name="blocking_read"> 
        /// Indicates if the read operations are blocking or non-blocking.  If blocking_read is True i.e. the read command is blocking, clEnqueueReadBufferRect does not return until the buffer data has been read and copied into memory pointed to by ptr.  If blocking_read is False i.e. the read command is non-blocking, clEnqueueReadBufferRect queues a non-blocking read command and returns. The contents of the buffer that ptr points to cannot be used until the read command has completed. The event argument argument returns an event object which can be used to query the execution status of the read command. When the read command has completed, the contents of the buffer that ptr points to can be used by the application.
        /// </param>
        /// <param name="buffer_offset">[length: 3] 
        /// The (x, y, z) offset in the memory region associated with buffer. For a 2D rectangle region, the z value given by buffer_origin[2] should be 0. The offset in bytes is computed as buffer_origin[2] * buffer_slice_pitch + buffer_origin[1] * buffer_row_pitch + buffer_origin[0].
        /// </param>
        /// <param name="host_offset">[length: 3] 
        /// The (x, y, z) offset in the memory region pointed to by ptr. For a 2D rectangle region, the z value given by host_origin[2] should be 0. The offset in bytes is computed as host_origin[2] * host_slice_pitch + host_origin[1] * host_row_pitch + host_origin[0].
        /// </param>
        /// <param name="region">[length: 3] 
        /// The (width, height, depth) in bytes of the 2D or 3D rectangle being read or written. For a 2D rectangle copy, the depth value given by region[2] should be 1.
        /// </param>
        /// <param name="buffer_row_pitch"> 
        /// The length of each row in bytes to be used for the memory region associated with buffer. If buffer_row_pitch is 0, buffer_row_pitch is computed as region[0].
        /// </param>
        /// <param name="buffer_slice_pitch"> 
        /// The length of each 2D slice in bytes to be used for the memory region associated with buffer. If buffer_slice_pitch is 0, buffer_slice_pitch is computed as region[1] * buffer_row_pitch.
        /// </param>
        /// <param name="host_row_pitch"> 
        /// The length of each row in bytes to be used for the memory region pointed to by ptr. If host_row_pitch is 0, host_row_pitch is computed as region[0].
        /// </param>
        /// <param name="host_slice_pitch"> 
        /// The length of each 2D slice in bytes to be used for the memory region pointed to by ptr. If host_slice_pitch is 0, host_slice_pitch is computed as region[1] * host_row_pitch.
        /// </param>
        /// <param name="ptr"> 
        /// The pointer to buffer in host memory where data is to be read into.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// event_wait_list and num_events_in_wait_list specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0.  The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// event_wait_list and num_events_in_wait_list specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0.  The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event">[length: 1] 
        /// Returns an event object that identifies this particular read command and can be used to query or queue a wait for this particular command to complete.  event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete. If the event_wait_list and the event arguments are not NULL, the event argument should not refer to an element of the event_wait_list array.
        /// </param>
        [AutoGenerated(Category = "", Version = "1.1", EntryPoint = "clEnqueueReadBufferRect")]
        [CLSCompliant(false)]
        public static ErrorCode EnqueueReadBufferRect<T10>(CommandQueue command_queue, ComputeMemory buffer, bool blocking_read, ref IntPtr buffer_offset, ref IntPtr host_offset, ref IntPtr region, IntPtr buffer_row_pitch, IntPtr buffer_slice_pitch, IntPtr host_row_pitch, IntPtr host_slice_pitch, [InAttribute, OutAttribute] ref T10 ptr, Int32 num_events_in_wait_list, ref ComputeEvent event_wait_list, [OutAttribute] out ComputeEvent @event)
            where T10 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.1]
        /// Enqueue commands to read from a rectangular region from a buffer object to host memory.
        /// </summary>
        /// <param name="command_queue"> 
        /// Refers to the command-queue in which the read command will be queued. command_queue and buffer must be created with the same OpenCL context.
        /// </param>
        /// <param name="buffer"> 
        /// Refers to a valid buffer object.
        /// </param>
        /// <param name="blocking_read"> 
        /// Indicates if the read operations are blocking or non-blocking.  If blocking_read is True i.e. the read command is blocking, clEnqueueReadBufferRect does not return until the buffer data has been read and copied into memory pointed to by ptr.  If blocking_read is False i.e. the read command is non-blocking, clEnqueueReadBufferRect queues a non-blocking read command and returns. The contents of the buffer that ptr points to cannot be used until the read command has completed. The event argument argument returns an event object which can be used to query the execution status of the read command. When the read command has completed, the contents of the buffer that ptr points to can be used by the application.
        /// </param>
        /// <param name="buffer_offset">[length: 3] 
        /// The (x, y, z) offset in the memory region associated with buffer. For a 2D rectangle region, the z value given by buffer_origin[2] should be 0. The offset in bytes is computed as buffer_origin[2] * buffer_slice_pitch + buffer_origin[1] * buffer_row_pitch + buffer_origin[0].
        /// </param>
        /// <param name="host_offset">[length: 3] 
        /// The (x, y, z) offset in the memory region pointed to by ptr. For a 2D rectangle region, the z value given by host_origin[2] should be 0. The offset in bytes is computed as host_origin[2] * host_slice_pitch + host_origin[1] * host_row_pitch + host_origin[0].
        /// </param>
        /// <param name="region">[length: 3] 
        /// The (width, height, depth) in bytes of the 2D or 3D rectangle being read or written. For a 2D rectangle copy, the depth value given by region[2] should be 1.
        /// </param>
        /// <param name="buffer_row_pitch"> 
        /// The length of each row in bytes to be used for the memory region associated with buffer. If buffer_row_pitch is 0, buffer_row_pitch is computed as region[0].
        /// </param>
        /// <param name="buffer_slice_pitch"> 
        /// The length of each 2D slice in bytes to be used for the memory region associated with buffer. If buffer_slice_pitch is 0, buffer_slice_pitch is computed as region[1] * buffer_row_pitch.
        /// </param>
        /// <param name="host_row_pitch"> 
        /// The length of each row in bytes to be used for the memory region pointed to by ptr. If host_row_pitch is 0, host_row_pitch is computed as region[0].
        /// </param>
        /// <param name="host_slice_pitch"> 
        /// The length of each 2D slice in bytes to be used for the memory region pointed to by ptr. If host_slice_pitch is 0, host_slice_pitch is computed as region[1] * host_row_pitch.
        /// </param>
        /// <param name="ptr"> 
        /// The pointer to buffer in host memory where data is to be read into.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// event_wait_list and num_events_in_wait_list specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0.  The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// event_wait_list and num_events_in_wait_list specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0.  The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event">[length: 1] 
        /// Returns an event object that identifies this particular read command and can be used to query or queue a wait for this particular command to complete.  event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete. If the event_wait_list and the event arguments are not NULL, the event argument should not refer to an element of the event_wait_list array.
        /// </param>
        [AutoGenerated(Category = "", Version = "1.1", EntryPoint = "clEnqueueReadBufferRect")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode EnqueueReadBufferRect(CommandQueue command_queue, ComputeMemory buffer, bool blocking_read, IntPtr* buffer_offset, IntPtr* host_offset, IntPtr* region, IntPtr buffer_row_pitch, IntPtr buffer_slice_pitch, IntPtr host_row_pitch, IntPtr host_slice_pitch, IntPtr ptr, Int32 num_events_in_wait_list, ComputeEvent* event_wait_list, [OutAttribute] ComputeEvent* @event) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.1]
        /// Enqueue commands to read from a rectangular region from a buffer object to host memory.
        /// </summary>
        /// <param name="command_queue"> 
        /// Refers to the command-queue in which the read command will be queued. command_queue and buffer must be created with the same OpenCL context.
        /// </param>
        /// <param name="buffer"> 
        /// Refers to a valid buffer object.
        /// </param>
        /// <param name="blocking_read"> 
        /// Indicates if the read operations are blocking or non-blocking.  If blocking_read is True i.e. the read command is blocking, clEnqueueReadBufferRect does not return until the buffer data has been read and copied into memory pointed to by ptr.  If blocking_read is False i.e. the read command is non-blocking, clEnqueueReadBufferRect queues a non-blocking read command and returns. The contents of the buffer that ptr points to cannot be used until the read command has completed. The event argument argument returns an event object which can be used to query the execution status of the read command. When the read command has completed, the contents of the buffer that ptr points to can be used by the application.
        /// </param>
        /// <param name="buffer_offset">[length: 3] 
        /// The (x, y, z) offset in the memory region associated with buffer. For a 2D rectangle region, the z value given by buffer_origin[2] should be 0. The offset in bytes is computed as buffer_origin[2] * buffer_slice_pitch + buffer_origin[1] * buffer_row_pitch + buffer_origin[0].
        /// </param>
        /// <param name="host_offset">[length: 3] 
        /// The (x, y, z) offset in the memory region pointed to by ptr. For a 2D rectangle region, the z value given by host_origin[2] should be 0. The offset in bytes is computed as host_origin[2] * host_slice_pitch + host_origin[1] * host_row_pitch + host_origin[0].
        /// </param>
        /// <param name="region">[length: 3] 
        /// The (width, height, depth) in bytes of the 2D or 3D rectangle being read or written. For a 2D rectangle copy, the depth value given by region[2] should be 1.
        /// </param>
        /// <param name="buffer_row_pitch"> 
        /// The length of each row in bytes to be used for the memory region associated with buffer. If buffer_row_pitch is 0, buffer_row_pitch is computed as region[0].
        /// </param>
        /// <param name="buffer_slice_pitch"> 
        /// The length of each 2D slice in bytes to be used for the memory region associated with buffer. If buffer_slice_pitch is 0, buffer_slice_pitch is computed as region[1] * buffer_row_pitch.
        /// </param>
        /// <param name="host_row_pitch"> 
        /// The length of each row in bytes to be used for the memory region pointed to by ptr. If host_row_pitch is 0, host_row_pitch is computed as region[0].
        /// </param>
        /// <param name="host_slice_pitch"> 
        /// The length of each 2D slice in bytes to be used for the memory region pointed to by ptr. If host_slice_pitch is 0, host_slice_pitch is computed as region[1] * host_row_pitch.
        /// </param>
        /// <param name="ptr"> 
        /// The pointer to buffer in host memory where data is to be read into.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// event_wait_list and num_events_in_wait_list specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0.  The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// event_wait_list and num_events_in_wait_list specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0.  The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event">[length: 1] 
        /// Returns an event object that identifies this particular read command and can be used to query or queue a wait for this particular command to complete.  event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete. If the event_wait_list and the event arguments are not NULL, the event argument should not refer to an element of the event_wait_list array.
        /// </param>
        [AutoGenerated(Category = "", Version = "1.1", EntryPoint = "clEnqueueReadBufferRect")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode EnqueueReadBufferRect<T10>(CommandQueue command_queue, ComputeMemory buffer, bool blocking_read, IntPtr* buffer_offset, IntPtr* host_offset, IntPtr* region, IntPtr buffer_row_pitch, IntPtr buffer_slice_pitch, IntPtr host_row_pitch, IntPtr host_slice_pitch, [InAttribute, OutAttribute] T10[] ptr, Int32 num_events_in_wait_list, ComputeEvent* event_wait_list, [OutAttribute] ComputeEvent* @event)
            where T10 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.1]
        /// Enqueue commands to read from a rectangular region from a buffer object to host memory.
        /// </summary>
        /// <param name="command_queue"> 
        /// Refers to the command-queue in which the read command will be queued. command_queue and buffer must be created with the same OpenCL context.
        /// </param>
        /// <param name="buffer"> 
        /// Refers to a valid buffer object.
        /// </param>
        /// <param name="blocking_read"> 
        /// Indicates if the read operations are blocking or non-blocking.  If blocking_read is True i.e. the read command is blocking, clEnqueueReadBufferRect does not return until the buffer data has been read and copied into memory pointed to by ptr.  If blocking_read is False i.e. the read command is non-blocking, clEnqueueReadBufferRect queues a non-blocking read command and returns. The contents of the buffer that ptr points to cannot be used until the read command has completed. The event argument argument returns an event object which can be used to query the execution status of the read command. When the read command has completed, the contents of the buffer that ptr points to can be used by the application.
        /// </param>
        /// <param name="buffer_offset">[length: 3] 
        /// The (x, y, z) offset in the memory region associated with buffer. For a 2D rectangle region, the z value given by buffer_origin[2] should be 0. The offset in bytes is computed as buffer_origin[2] * buffer_slice_pitch + buffer_origin[1] * buffer_row_pitch + buffer_origin[0].
        /// </param>
        /// <param name="host_offset">[length: 3] 
        /// The (x, y, z) offset in the memory region pointed to by ptr. For a 2D rectangle region, the z value given by host_origin[2] should be 0. The offset in bytes is computed as host_origin[2] * host_slice_pitch + host_origin[1] * host_row_pitch + host_origin[0].
        /// </param>
        /// <param name="region">[length: 3] 
        /// The (width, height, depth) in bytes of the 2D or 3D rectangle being read or written. For a 2D rectangle copy, the depth value given by region[2] should be 1.
        /// </param>
        /// <param name="buffer_row_pitch"> 
        /// The length of each row in bytes to be used for the memory region associated with buffer. If buffer_row_pitch is 0, buffer_row_pitch is computed as region[0].
        /// </param>
        /// <param name="buffer_slice_pitch"> 
        /// The length of each 2D slice in bytes to be used for the memory region associated with buffer. If buffer_slice_pitch is 0, buffer_slice_pitch is computed as region[1] * buffer_row_pitch.
        /// </param>
        /// <param name="host_row_pitch"> 
        /// The length of each row in bytes to be used for the memory region pointed to by ptr. If host_row_pitch is 0, host_row_pitch is computed as region[0].
        /// </param>
        /// <param name="host_slice_pitch"> 
        /// The length of each 2D slice in bytes to be used for the memory region pointed to by ptr. If host_slice_pitch is 0, host_slice_pitch is computed as region[1] * host_row_pitch.
        /// </param>
        /// <param name="ptr"> 
        /// The pointer to buffer in host memory where data is to be read into.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// event_wait_list and num_events_in_wait_list specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0.  The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// event_wait_list and num_events_in_wait_list specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0.  The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event">[length: 1] 
        /// Returns an event object that identifies this particular read command and can be used to query or queue a wait for this particular command to complete.  event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete. If the event_wait_list and the event arguments are not NULL, the event argument should not refer to an element of the event_wait_list array.
        /// </param>
        [AutoGenerated(Category = "", Version = "1.1", EntryPoint = "clEnqueueReadBufferRect")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode EnqueueReadBufferRect<T10>(CommandQueue command_queue, ComputeMemory buffer, bool blocking_read, IntPtr* buffer_offset, IntPtr* host_offset, IntPtr* region, IntPtr buffer_row_pitch, IntPtr buffer_slice_pitch, IntPtr host_row_pitch, IntPtr host_slice_pitch, [InAttribute, OutAttribute] T10[,] ptr, Int32 num_events_in_wait_list, ComputeEvent* event_wait_list, [OutAttribute] ComputeEvent* @event)
            where T10 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.1]
        /// Enqueue commands to read from a rectangular region from a buffer object to host memory.
        /// </summary>
        /// <param name="command_queue"> 
        /// Refers to the command-queue in which the read command will be queued. command_queue and buffer must be created with the same OpenCL context.
        /// </param>
        /// <param name="buffer"> 
        /// Refers to a valid buffer object.
        /// </param>
        /// <param name="blocking_read"> 
        /// Indicates if the read operations are blocking or non-blocking.  If blocking_read is True i.e. the read command is blocking, clEnqueueReadBufferRect does not return until the buffer data has been read and copied into memory pointed to by ptr.  If blocking_read is False i.e. the read command is non-blocking, clEnqueueReadBufferRect queues a non-blocking read command and returns. The contents of the buffer that ptr points to cannot be used until the read command has completed. The event argument argument returns an event object which can be used to query the execution status of the read command. When the read command has completed, the contents of the buffer that ptr points to can be used by the application.
        /// </param>
        /// <param name="buffer_offset">[length: 3] 
        /// The (x, y, z) offset in the memory region associated with buffer. For a 2D rectangle region, the z value given by buffer_origin[2] should be 0. The offset in bytes is computed as buffer_origin[2] * buffer_slice_pitch + buffer_origin[1] * buffer_row_pitch + buffer_origin[0].
        /// </param>
        /// <param name="host_offset">[length: 3] 
        /// The (x, y, z) offset in the memory region pointed to by ptr. For a 2D rectangle region, the z value given by host_origin[2] should be 0. The offset in bytes is computed as host_origin[2] * host_slice_pitch + host_origin[1] * host_row_pitch + host_origin[0].
        /// </param>
        /// <param name="region">[length: 3] 
        /// The (width, height, depth) in bytes of the 2D or 3D rectangle being read or written. For a 2D rectangle copy, the depth value given by region[2] should be 1.
        /// </param>
        /// <param name="buffer_row_pitch"> 
        /// The length of each row in bytes to be used for the memory region associated with buffer. If buffer_row_pitch is 0, buffer_row_pitch is computed as region[0].
        /// </param>
        /// <param name="buffer_slice_pitch"> 
        /// The length of each 2D slice in bytes to be used for the memory region associated with buffer. If buffer_slice_pitch is 0, buffer_slice_pitch is computed as region[1] * buffer_row_pitch.
        /// </param>
        /// <param name="host_row_pitch"> 
        /// The length of each row in bytes to be used for the memory region pointed to by ptr. If host_row_pitch is 0, host_row_pitch is computed as region[0].
        /// </param>
        /// <param name="host_slice_pitch"> 
        /// The length of each 2D slice in bytes to be used for the memory region pointed to by ptr. If host_slice_pitch is 0, host_slice_pitch is computed as region[1] * host_row_pitch.
        /// </param>
        /// <param name="ptr"> 
        /// The pointer to buffer in host memory where data is to be read into.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// event_wait_list and num_events_in_wait_list specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0.  The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// event_wait_list and num_events_in_wait_list specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0.  The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event">[length: 1] 
        /// Returns an event object that identifies this particular read command and can be used to query or queue a wait for this particular command to complete.  event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete. If the event_wait_list and the event arguments are not NULL, the event argument should not refer to an element of the event_wait_list array.
        /// </param>
        [AutoGenerated(Category = "", Version = "1.1", EntryPoint = "clEnqueueReadBufferRect")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode EnqueueReadBufferRect<T10>(CommandQueue command_queue, ComputeMemory buffer, bool blocking_read, IntPtr* buffer_offset, IntPtr* host_offset, IntPtr* region, IntPtr buffer_row_pitch, IntPtr buffer_slice_pitch, IntPtr host_row_pitch, IntPtr host_slice_pitch, [InAttribute, OutAttribute] T10[,,] ptr, Int32 num_events_in_wait_list, ComputeEvent* event_wait_list, [OutAttribute] ComputeEvent* @event)
            where T10 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.1]
        /// Enqueue commands to read from a rectangular region from a buffer object to host memory.
        /// </summary>
        /// <param name="command_queue"> 
        /// Refers to the command-queue in which the read command will be queued. command_queue and buffer must be created with the same OpenCL context.
        /// </param>
        /// <param name="buffer"> 
        /// Refers to a valid buffer object.
        /// </param>
        /// <param name="blocking_read"> 
        /// Indicates if the read operations are blocking or non-blocking.  If blocking_read is True i.e. the read command is blocking, clEnqueueReadBufferRect does not return until the buffer data has been read and copied into memory pointed to by ptr.  If blocking_read is False i.e. the read command is non-blocking, clEnqueueReadBufferRect queues a non-blocking read command and returns. The contents of the buffer that ptr points to cannot be used until the read command has completed. The event argument argument returns an event object which can be used to query the execution status of the read command. When the read command has completed, the contents of the buffer that ptr points to can be used by the application.
        /// </param>
        /// <param name="buffer_offset">[length: 3] 
        /// The (x, y, z) offset in the memory region associated with buffer. For a 2D rectangle region, the z value given by buffer_origin[2] should be 0. The offset in bytes is computed as buffer_origin[2] * buffer_slice_pitch + buffer_origin[1] * buffer_row_pitch + buffer_origin[0].
        /// </param>
        /// <param name="host_offset">[length: 3] 
        /// The (x, y, z) offset in the memory region pointed to by ptr. For a 2D rectangle region, the z value given by host_origin[2] should be 0. The offset in bytes is computed as host_origin[2] * host_slice_pitch + host_origin[1] * host_row_pitch + host_origin[0].
        /// </param>
        /// <param name="region">[length: 3] 
        /// The (width, height, depth) in bytes of the 2D or 3D rectangle being read or written. For a 2D rectangle copy, the depth value given by region[2] should be 1.
        /// </param>
        /// <param name="buffer_row_pitch"> 
        /// The length of each row in bytes to be used for the memory region associated with buffer. If buffer_row_pitch is 0, buffer_row_pitch is computed as region[0].
        /// </param>
        /// <param name="buffer_slice_pitch"> 
        /// The length of each 2D slice in bytes to be used for the memory region associated with buffer. If buffer_slice_pitch is 0, buffer_slice_pitch is computed as region[1] * buffer_row_pitch.
        /// </param>
        /// <param name="host_row_pitch"> 
        /// The length of each row in bytes to be used for the memory region pointed to by ptr. If host_row_pitch is 0, host_row_pitch is computed as region[0].
        /// </param>
        /// <param name="host_slice_pitch"> 
        /// The length of each 2D slice in bytes to be used for the memory region pointed to by ptr. If host_slice_pitch is 0, host_slice_pitch is computed as region[1] * host_row_pitch.
        /// </param>
        /// <param name="ptr"> 
        /// The pointer to buffer in host memory where data is to be read into.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// event_wait_list and num_events_in_wait_list specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0.  The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// event_wait_list and num_events_in_wait_list specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0.  The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event">[length: 1] 
        /// Returns an event object that identifies this particular read command and can be used to query or queue a wait for this particular command to complete.  event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete. If the event_wait_list and the event arguments are not NULL, the event argument should not refer to an element of the event_wait_list array.
        /// </param>
        [AutoGenerated(Category = "", Version = "1.1", EntryPoint = "clEnqueueReadBufferRect")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode EnqueueReadBufferRect<T10>(CommandQueue command_queue, ComputeMemory buffer, bool blocking_read, IntPtr* buffer_offset, IntPtr* host_offset, IntPtr* region, IntPtr buffer_row_pitch, IntPtr buffer_slice_pitch, IntPtr host_row_pitch, IntPtr host_slice_pitch, [InAttribute, OutAttribute] ref T10 ptr, Int32 num_events_in_wait_list, ComputeEvent* event_wait_list, [OutAttribute] ComputeEvent* @event)
            where T10 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Enqueue commands to read from an image or image array object to host memory.
        /// </summary>
        /// <param name="command_queue"> 
        /// Refers to the command-queue in which the read command will be queued. command_queue and image must be created with the same OpenCL context.
        /// </param>
        /// <param name="image"> 
        /// Refers to a valid image or image array object.
        /// </param>
        /// <param name="blocking_read"> 
        /// Indicates if the read operations are blocking or non-blocking.  If blocking_read is True i.e. the read command is blocking, clEnqueueReadImage does not return until the buffer data has been read and copied into memory pointed to by ptr.  If blocking_read is False i.e. map operation is non-blocking, clEnqueueReadImage queues a non-blocking read command and returns. The contents of the buffer that ptr points to cannot be used until the read command has completed. The event argument returns an event object which can be used to query the execution status of the read command. When the read command has completed, the contents of the buffer that ptr points to can be used by the application.
        /// </param>
        /// <param name="origin">[length: 3] 
        /// Defines the (x, y, z) offset in pixels in the 1D, 2D, or 3D image, the (x, y) offset and the image index in the image array or the (x) offset and the image index in the 1D image array.  If image is a 2D image object, origin[2] must be 0. If image is a 1D image or 1D image buffer object, origin[1] and origin[2] must be 0. If image is a 1D image array object, origin[2] must be 0.  If image is a 1D image array object, origin[1] describes the image index in the 1D image array. If image is a 2D image array object, origin[2] describes the image index in the 2D image array.
        /// </param>
        /// <param name="region">[length: 3] 
        /// Defines the (width, height, depth) in pixels of the 1D, 2D or 3D rectangle, the (width, height) in pixels of the 2D rectangle and the number of images of a 2D image array or the (width) in pixels of the 1D rectangle and the number of images of a 1D image array. If image is a 2D image object, region[2] must be 1.  If image is a 1D image or 1D image buffer object,  region[1] and region[2] must be 1. If image is a 1D image array object, region[2] must be 1.
        /// </param>
        /// <param name="row_pitch"> 
        /// The length of each row in bytes. This value must be greater than or equal to the element size in bytes * width. If row_pitch is set to 0, the appropriate row pitch is calculated based on the size of each element in bytes multiplied by width.
        /// </param>
        /// <param name="slice_pitch"> 
        /// Size in bytes of the 2D slice of the 3D region of a 3D image or each image of a 1D or 2D image array being read.  This must be 0 if image is a 1D or 2D image.  This value must be greater than or equal to row_pitch * height. If slice_pitch is set to 0, the appropriate slice pitch is calculated based on the row_pitch * height.
        /// </param>
        /// <param name="ptr"> 
        /// The pointer to a buffer in host memory where image data is to be read from.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed.  If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points.  The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed.  If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points.  The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event"> 
        /// Returns an event object that identifies this particular read command and can be used to query or queue a wait for this particular command to complete. event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete.  If the event_wait_list and the event arguments are not NULL, the event argument should not refer to an element of the event_wait_list array.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clEnqueueReadImage")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode EnqueueReadImage(CommandQueue command_queue, ComputeMemory image, bool blocking_read, IntPtr*[] origin, IntPtr*[] region, IntPtr row_pitch, IntPtr slice_pitch, IntPtr ptr, Int32 num_events_in_wait_list, ComputeEvent[] event_wait_list, [OutAttribute] out ComputeEvent @event) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Enqueue commands to read from an image or image array object to host memory.
        /// </summary>
        /// <param name="command_queue"> 
        /// Refers to the command-queue in which the read command will be queued. command_queue and image must be created with the same OpenCL context.
        /// </param>
        /// <param name="image"> 
        /// Refers to a valid image or image array object.
        /// </param>
        /// <param name="blocking_read"> 
        /// Indicates if the read operations are blocking or non-blocking.  If blocking_read is True i.e. the read command is blocking, clEnqueueReadImage does not return until the buffer data has been read and copied into memory pointed to by ptr.  If blocking_read is False i.e. map operation is non-blocking, clEnqueueReadImage queues a non-blocking read command and returns. The contents of the buffer that ptr points to cannot be used until the read command has completed. The event argument returns an event object which can be used to query the execution status of the read command. When the read command has completed, the contents of the buffer that ptr points to can be used by the application.
        /// </param>
        /// <param name="origin">[length: 3] 
        /// Defines the (x, y, z) offset in pixels in the 1D, 2D, or 3D image, the (x, y) offset and the image index in the image array or the (x) offset and the image index in the 1D image array.  If image is a 2D image object, origin[2] must be 0. If image is a 1D image or 1D image buffer object, origin[1] and origin[2] must be 0. If image is a 1D image array object, origin[2] must be 0.  If image is a 1D image array object, origin[1] describes the image index in the 1D image array. If image is a 2D image array object, origin[2] describes the image index in the 2D image array.
        /// </param>
        /// <param name="region">[length: 3] 
        /// Defines the (width, height, depth) in pixels of the 1D, 2D or 3D rectangle, the (width, height) in pixels of the 2D rectangle and the number of images of a 2D image array or the (width) in pixels of the 1D rectangle and the number of images of a 1D image array. If image is a 2D image object, region[2] must be 1.  If image is a 1D image or 1D image buffer object,  region[1] and region[2] must be 1. If image is a 1D image array object, region[2] must be 1.
        /// </param>
        /// <param name="row_pitch"> 
        /// The length of each row in bytes. This value must be greater than or equal to the element size in bytes * width. If row_pitch is set to 0, the appropriate row pitch is calculated based on the size of each element in bytes multiplied by width.
        /// </param>
        /// <param name="slice_pitch"> 
        /// Size in bytes of the 2D slice of the 3D region of a 3D image or each image of a 1D or 2D image array being read.  This must be 0 if image is a 1D or 2D image.  This value must be greater than or equal to row_pitch * height. If slice_pitch is set to 0, the appropriate slice pitch is calculated based on the row_pitch * height.
        /// </param>
        /// <param name="ptr"> 
        /// The pointer to a buffer in host memory where image data is to be read from.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed.  If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points.  The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed.  If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points.  The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event"> 
        /// Returns an event object that identifies this particular read command and can be used to query or queue a wait for this particular command to complete. event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete.  If the event_wait_list and the event arguments are not NULL, the event argument should not refer to an element of the event_wait_list array.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clEnqueueReadImage")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode EnqueueReadImage<T7>(CommandQueue command_queue, ComputeMemory image, bool blocking_read, IntPtr*[] origin, IntPtr*[] region, IntPtr row_pitch, IntPtr slice_pitch, [InAttribute, OutAttribute] T7[] ptr, Int32 num_events_in_wait_list, ComputeEvent[] event_wait_list, [OutAttribute] out ComputeEvent @event)
            where T7 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Enqueue commands to read from an image or image array object to host memory.
        /// </summary>
        /// <param name="command_queue"> 
        /// Refers to the command-queue in which the read command will be queued. command_queue and image must be created with the same OpenCL context.
        /// </param>
        /// <param name="image"> 
        /// Refers to a valid image or image array object.
        /// </param>
        /// <param name="blocking_read"> 
        /// Indicates if the read operations are blocking or non-blocking.  If blocking_read is True i.e. the read command is blocking, clEnqueueReadImage does not return until the buffer data has been read and copied into memory pointed to by ptr.  If blocking_read is False i.e. map operation is non-blocking, clEnqueueReadImage queues a non-blocking read command and returns. The contents of the buffer that ptr points to cannot be used until the read command has completed. The event argument returns an event object which can be used to query the execution status of the read command. When the read command has completed, the contents of the buffer that ptr points to can be used by the application.
        /// </param>
        /// <param name="origin">[length: 3] 
        /// Defines the (x, y, z) offset in pixels in the 1D, 2D, or 3D image, the (x, y) offset and the image index in the image array or the (x) offset and the image index in the 1D image array.  If image is a 2D image object, origin[2] must be 0. If image is a 1D image or 1D image buffer object, origin[1] and origin[2] must be 0. If image is a 1D image array object, origin[2] must be 0.  If image is a 1D image array object, origin[1] describes the image index in the 1D image array. If image is a 2D image array object, origin[2] describes the image index in the 2D image array.
        /// </param>
        /// <param name="region">[length: 3] 
        /// Defines the (width, height, depth) in pixels of the 1D, 2D or 3D rectangle, the (width, height) in pixels of the 2D rectangle and the number of images of a 2D image array or the (width) in pixels of the 1D rectangle and the number of images of a 1D image array. If image is a 2D image object, region[2] must be 1.  If image is a 1D image or 1D image buffer object,  region[1] and region[2] must be 1. If image is a 1D image array object, region[2] must be 1.
        /// </param>
        /// <param name="row_pitch"> 
        /// The length of each row in bytes. This value must be greater than or equal to the element size in bytes * width. If row_pitch is set to 0, the appropriate row pitch is calculated based on the size of each element in bytes multiplied by width.
        /// </param>
        /// <param name="slice_pitch"> 
        /// Size in bytes of the 2D slice of the 3D region of a 3D image or each image of a 1D or 2D image array being read.  This must be 0 if image is a 1D or 2D image.  This value must be greater than or equal to row_pitch * height. If slice_pitch is set to 0, the appropriate slice pitch is calculated based on the row_pitch * height.
        /// </param>
        /// <param name="ptr"> 
        /// The pointer to a buffer in host memory where image data is to be read from.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed.  If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points.  The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed.  If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points.  The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event"> 
        /// Returns an event object that identifies this particular read command and can be used to query or queue a wait for this particular command to complete. event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete.  If the event_wait_list and the event arguments are not NULL, the event argument should not refer to an element of the event_wait_list array.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clEnqueueReadImage")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode EnqueueReadImage<T7>(CommandQueue command_queue, ComputeMemory image, bool blocking_read, IntPtr*[] origin, IntPtr*[] region, IntPtr row_pitch, IntPtr slice_pitch, [InAttribute, OutAttribute] T7[,] ptr, Int32 num_events_in_wait_list, ComputeEvent[] event_wait_list, [OutAttribute] out ComputeEvent @event)
            where T7 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Enqueue commands to read from an image or image array object to host memory.
        /// </summary>
        /// <param name="command_queue"> 
        /// Refers to the command-queue in which the read command will be queued. command_queue and image must be created with the same OpenCL context.
        /// </param>
        /// <param name="image"> 
        /// Refers to a valid image or image array object.
        /// </param>
        /// <param name="blocking_read"> 
        /// Indicates if the read operations are blocking or non-blocking.  If blocking_read is True i.e. the read command is blocking, clEnqueueReadImage does not return until the buffer data has been read and copied into memory pointed to by ptr.  If blocking_read is False i.e. map operation is non-blocking, clEnqueueReadImage queues a non-blocking read command and returns. The contents of the buffer that ptr points to cannot be used until the read command has completed. The event argument returns an event object which can be used to query the execution status of the read command. When the read command has completed, the contents of the buffer that ptr points to can be used by the application.
        /// </param>
        /// <param name="origin">[length: 3] 
        /// Defines the (x, y, z) offset in pixels in the 1D, 2D, or 3D image, the (x, y) offset and the image index in the image array or the (x) offset and the image index in the 1D image array.  If image is a 2D image object, origin[2] must be 0. If image is a 1D image or 1D image buffer object, origin[1] and origin[2] must be 0. If image is a 1D image array object, origin[2] must be 0.  If image is a 1D image array object, origin[1] describes the image index in the 1D image array. If image is a 2D image array object, origin[2] describes the image index in the 2D image array.
        /// </param>
        /// <param name="region">[length: 3] 
        /// Defines the (width, height, depth) in pixels of the 1D, 2D or 3D rectangle, the (width, height) in pixels of the 2D rectangle and the number of images of a 2D image array or the (width) in pixels of the 1D rectangle and the number of images of a 1D image array. If image is a 2D image object, region[2] must be 1.  If image is a 1D image or 1D image buffer object,  region[1] and region[2] must be 1. If image is a 1D image array object, region[2] must be 1.
        /// </param>
        /// <param name="row_pitch"> 
        /// The length of each row in bytes. This value must be greater than or equal to the element size in bytes * width. If row_pitch is set to 0, the appropriate row pitch is calculated based on the size of each element in bytes multiplied by width.
        /// </param>
        /// <param name="slice_pitch"> 
        /// Size in bytes of the 2D slice of the 3D region of a 3D image or each image of a 1D or 2D image array being read.  This must be 0 if image is a 1D or 2D image.  This value must be greater than or equal to row_pitch * height. If slice_pitch is set to 0, the appropriate slice pitch is calculated based on the row_pitch * height.
        /// </param>
        /// <param name="ptr"> 
        /// The pointer to a buffer in host memory where image data is to be read from.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed.  If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points.  The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed.  If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points.  The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event"> 
        /// Returns an event object that identifies this particular read command and can be used to query or queue a wait for this particular command to complete. event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete.  If the event_wait_list and the event arguments are not NULL, the event argument should not refer to an element of the event_wait_list array.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clEnqueueReadImage")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode EnqueueReadImage<T7>(CommandQueue command_queue, ComputeMemory image, bool blocking_read, IntPtr*[] origin, IntPtr*[] region, IntPtr row_pitch, IntPtr slice_pitch, [InAttribute, OutAttribute] T7[,,] ptr, Int32 num_events_in_wait_list, ComputeEvent[] event_wait_list, [OutAttribute] out ComputeEvent @event)
            where T7 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Enqueue commands to read from an image or image array object to host memory.
        /// </summary>
        /// <param name="command_queue"> 
        /// Refers to the command-queue in which the read command will be queued. command_queue and image must be created with the same OpenCL context.
        /// </param>
        /// <param name="image"> 
        /// Refers to a valid image or image array object.
        /// </param>
        /// <param name="blocking_read"> 
        /// Indicates if the read operations are blocking or non-blocking.  If blocking_read is True i.e. the read command is blocking, clEnqueueReadImage does not return until the buffer data has been read and copied into memory pointed to by ptr.  If blocking_read is False i.e. map operation is non-blocking, clEnqueueReadImage queues a non-blocking read command and returns. The contents of the buffer that ptr points to cannot be used until the read command has completed. The event argument returns an event object which can be used to query the execution status of the read command. When the read command has completed, the contents of the buffer that ptr points to can be used by the application.
        /// </param>
        /// <param name="origin">[length: 3] 
        /// Defines the (x, y, z) offset in pixels in the 1D, 2D, or 3D image, the (x, y) offset and the image index in the image array or the (x) offset and the image index in the 1D image array.  If image is a 2D image object, origin[2] must be 0. If image is a 1D image or 1D image buffer object, origin[1] and origin[2] must be 0. If image is a 1D image array object, origin[2] must be 0.  If image is a 1D image array object, origin[1] describes the image index in the 1D image array. If image is a 2D image array object, origin[2] describes the image index in the 2D image array.
        /// </param>
        /// <param name="region">[length: 3] 
        /// Defines the (width, height, depth) in pixels of the 1D, 2D or 3D rectangle, the (width, height) in pixels of the 2D rectangle and the number of images of a 2D image array or the (width) in pixels of the 1D rectangle and the number of images of a 1D image array. If image is a 2D image object, region[2] must be 1.  If image is a 1D image or 1D image buffer object,  region[1] and region[2] must be 1. If image is a 1D image array object, region[2] must be 1.
        /// </param>
        /// <param name="row_pitch"> 
        /// The length of each row in bytes. This value must be greater than or equal to the element size in bytes * width. If row_pitch is set to 0, the appropriate row pitch is calculated based on the size of each element in bytes multiplied by width.
        /// </param>
        /// <param name="slice_pitch"> 
        /// Size in bytes of the 2D slice of the 3D region of a 3D image or each image of a 1D or 2D image array being read.  This must be 0 if image is a 1D or 2D image.  This value must be greater than or equal to row_pitch * height. If slice_pitch is set to 0, the appropriate slice pitch is calculated based on the row_pitch * height.
        /// </param>
        /// <param name="ptr"> 
        /// The pointer to a buffer in host memory where image data is to be read from.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed.  If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points.  The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed.  If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points.  The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event"> 
        /// Returns an event object that identifies this particular read command and can be used to query or queue a wait for this particular command to complete. event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete.  If the event_wait_list and the event arguments are not NULL, the event argument should not refer to an element of the event_wait_list array.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clEnqueueReadImage")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode EnqueueReadImage<T7>(CommandQueue command_queue, ComputeMemory image, bool blocking_read, IntPtr*[] origin, IntPtr*[] region, IntPtr row_pitch, IntPtr slice_pitch, [InAttribute, OutAttribute] ref T7 ptr, Int32 num_events_in_wait_list, ComputeEvent[] event_wait_list, [OutAttribute] out ComputeEvent @event)
            where T7 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Enqueue commands to read from an image or image array object to host memory.
        /// </summary>
        /// <param name="command_queue"> 
        /// Refers to the command-queue in which the read command will be queued. command_queue and image must be created with the same OpenCL context.
        /// </param>
        /// <param name="image"> 
        /// Refers to a valid image or image array object.
        /// </param>
        /// <param name="blocking_read"> 
        /// Indicates if the read operations are blocking or non-blocking.  If blocking_read is True i.e. the read command is blocking, clEnqueueReadImage does not return until the buffer data has been read and copied into memory pointed to by ptr.  If blocking_read is False i.e. map operation is non-blocking, clEnqueueReadImage queues a non-blocking read command and returns. The contents of the buffer that ptr points to cannot be used until the read command has completed. The event argument returns an event object which can be used to query the execution status of the read command. When the read command has completed, the contents of the buffer that ptr points to can be used by the application.
        /// </param>
        /// <param name="origin">[length: 3] 
        /// Defines the (x, y, z) offset in pixels in the 1D, 2D, or 3D image, the (x, y) offset and the image index in the image array or the (x) offset and the image index in the 1D image array.  If image is a 2D image object, origin[2] must be 0. If image is a 1D image or 1D image buffer object, origin[1] and origin[2] must be 0. If image is a 1D image array object, origin[2] must be 0.  If image is a 1D image array object, origin[1] describes the image index in the 1D image array. If image is a 2D image array object, origin[2] describes the image index in the 2D image array.
        /// </param>
        /// <param name="region">[length: 3] 
        /// Defines the (width, height, depth) in pixels of the 1D, 2D or 3D rectangle, the (width, height) in pixels of the 2D rectangle and the number of images of a 2D image array or the (width) in pixels of the 1D rectangle and the number of images of a 1D image array. If image is a 2D image object, region[2] must be 1.  If image is a 1D image or 1D image buffer object,  region[1] and region[2] must be 1. If image is a 1D image array object, region[2] must be 1.
        /// </param>
        /// <param name="row_pitch"> 
        /// The length of each row in bytes. This value must be greater than or equal to the element size in bytes * width. If row_pitch is set to 0, the appropriate row pitch is calculated based on the size of each element in bytes multiplied by width.
        /// </param>
        /// <param name="slice_pitch"> 
        /// Size in bytes of the 2D slice of the 3D region of a 3D image or each image of a 1D or 2D image array being read.  This must be 0 if image is a 1D or 2D image.  This value must be greater than or equal to row_pitch * height. If slice_pitch is set to 0, the appropriate slice pitch is calculated based on the row_pitch * height.
        /// </param>
        /// <param name="ptr"> 
        /// The pointer to a buffer in host memory where image data is to be read from.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed.  If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points.  The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed.  If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points.  The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event"> 
        /// Returns an event object that identifies this particular read command and can be used to query or queue a wait for this particular command to complete. event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete.  If the event_wait_list and the event arguments are not NULL, the event argument should not refer to an element of the event_wait_list array.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clEnqueueReadImage")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode EnqueueReadImage(CommandQueue command_queue, ComputeMemory image, bool blocking_read, ref IntPtr* origin, ref IntPtr* region, IntPtr row_pitch, IntPtr slice_pitch, IntPtr ptr, Int32 num_events_in_wait_list, ref ComputeEvent event_wait_list, [OutAttribute] out ComputeEvent @event) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Enqueue commands to read from an image or image array object to host memory.
        /// </summary>
        /// <param name="command_queue"> 
        /// Refers to the command-queue in which the read command will be queued. command_queue and image must be created with the same OpenCL context.
        /// </param>
        /// <param name="image"> 
        /// Refers to a valid image or image array object.
        /// </param>
        /// <param name="blocking_read"> 
        /// Indicates if the read operations are blocking or non-blocking.  If blocking_read is True i.e. the read command is blocking, clEnqueueReadImage does not return until the buffer data has been read and copied into memory pointed to by ptr.  If blocking_read is False i.e. map operation is non-blocking, clEnqueueReadImage queues a non-blocking read command and returns. The contents of the buffer that ptr points to cannot be used until the read command has completed. The event argument returns an event object which can be used to query the execution status of the read command. When the read command has completed, the contents of the buffer that ptr points to can be used by the application.
        /// </param>
        /// <param name="origin">[length: 3] 
        /// Defines the (x, y, z) offset in pixels in the 1D, 2D, or 3D image, the (x, y) offset and the image index in the image array or the (x) offset and the image index in the 1D image array.  If image is a 2D image object, origin[2] must be 0. If image is a 1D image or 1D image buffer object, origin[1] and origin[2] must be 0. If image is a 1D image array object, origin[2] must be 0.  If image is a 1D image array object, origin[1] describes the image index in the 1D image array. If image is a 2D image array object, origin[2] describes the image index in the 2D image array.
        /// </param>
        /// <param name="region">[length: 3] 
        /// Defines the (width, height, depth) in pixels of the 1D, 2D or 3D rectangle, the (width, height) in pixels of the 2D rectangle and the number of images of a 2D image array or the (width) in pixels of the 1D rectangle and the number of images of a 1D image array. If image is a 2D image object, region[2] must be 1.  If image is a 1D image or 1D image buffer object,  region[1] and region[2] must be 1. If image is a 1D image array object, region[2] must be 1.
        /// </param>
        /// <param name="row_pitch"> 
        /// The length of each row in bytes. This value must be greater than or equal to the element size in bytes * width. If row_pitch is set to 0, the appropriate row pitch is calculated based on the size of each element in bytes multiplied by width.
        /// </param>
        /// <param name="slice_pitch"> 
        /// Size in bytes of the 2D slice of the 3D region of a 3D image or each image of a 1D or 2D image array being read.  This must be 0 if image is a 1D or 2D image.  This value must be greater than or equal to row_pitch * height. If slice_pitch is set to 0, the appropriate slice pitch is calculated based on the row_pitch * height.
        /// </param>
        /// <param name="ptr"> 
        /// The pointer to a buffer in host memory where image data is to be read from.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed.  If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points.  The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed.  If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points.  The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event"> 
        /// Returns an event object that identifies this particular read command and can be used to query or queue a wait for this particular command to complete. event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete.  If the event_wait_list and the event arguments are not NULL, the event argument should not refer to an element of the event_wait_list array.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clEnqueueReadImage")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode EnqueueReadImage<T7>(CommandQueue command_queue, ComputeMemory image, bool blocking_read, ref IntPtr* origin, ref IntPtr* region, IntPtr row_pitch, IntPtr slice_pitch, [InAttribute, OutAttribute] T7[] ptr, Int32 num_events_in_wait_list, ref ComputeEvent event_wait_list, [OutAttribute] out ComputeEvent @event)
            where T7 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Enqueue commands to read from an image or image array object to host memory.
        /// </summary>
        /// <param name="command_queue"> 
        /// Refers to the command-queue in which the read command will be queued. command_queue and image must be created with the same OpenCL context.
        /// </param>
        /// <param name="image"> 
        /// Refers to a valid image or image array object.
        /// </param>
        /// <param name="blocking_read"> 
        /// Indicates if the read operations are blocking or non-blocking.  If blocking_read is True i.e. the read command is blocking, clEnqueueReadImage does not return until the buffer data has been read and copied into memory pointed to by ptr.  If blocking_read is False i.e. map operation is non-blocking, clEnqueueReadImage queues a non-blocking read command and returns. The contents of the buffer that ptr points to cannot be used until the read command has completed. The event argument returns an event object which can be used to query the execution status of the read command. When the read command has completed, the contents of the buffer that ptr points to can be used by the application.
        /// </param>
        /// <param name="origin">[length: 3] 
        /// Defines the (x, y, z) offset in pixels in the 1D, 2D, or 3D image, the (x, y) offset and the image index in the image array or the (x) offset and the image index in the 1D image array.  If image is a 2D image object, origin[2] must be 0. If image is a 1D image or 1D image buffer object, origin[1] and origin[2] must be 0. If image is a 1D image array object, origin[2] must be 0.  If image is a 1D image array object, origin[1] describes the image index in the 1D image array. If image is a 2D image array object, origin[2] describes the image index in the 2D image array.
        /// </param>
        /// <param name="region">[length: 3] 
        /// Defines the (width, height, depth) in pixels of the 1D, 2D or 3D rectangle, the (width, height) in pixels of the 2D rectangle and the number of images of a 2D image array or the (width) in pixels of the 1D rectangle and the number of images of a 1D image array. If image is a 2D image object, region[2] must be 1.  If image is a 1D image or 1D image buffer object,  region[1] and region[2] must be 1. If image is a 1D image array object, region[2] must be 1.
        /// </param>
        /// <param name="row_pitch"> 
        /// The length of each row in bytes. This value must be greater than or equal to the element size in bytes * width. If row_pitch is set to 0, the appropriate row pitch is calculated based on the size of each element in bytes multiplied by width.
        /// </param>
        /// <param name="slice_pitch"> 
        /// Size in bytes of the 2D slice of the 3D region of a 3D image or each image of a 1D or 2D image array being read.  This must be 0 if image is a 1D or 2D image.  This value must be greater than or equal to row_pitch * height. If slice_pitch is set to 0, the appropriate slice pitch is calculated based on the row_pitch * height.
        /// </param>
        /// <param name="ptr"> 
        /// The pointer to a buffer in host memory where image data is to be read from.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed.  If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points.  The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed.  If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points.  The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event"> 
        /// Returns an event object that identifies this particular read command and can be used to query or queue a wait for this particular command to complete. event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete.  If the event_wait_list and the event arguments are not NULL, the event argument should not refer to an element of the event_wait_list array.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clEnqueueReadImage")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode EnqueueReadImage<T7>(CommandQueue command_queue, ComputeMemory image, bool blocking_read, ref IntPtr* origin, ref IntPtr* region, IntPtr row_pitch, IntPtr slice_pitch, [InAttribute, OutAttribute] T7[,] ptr, Int32 num_events_in_wait_list, ref ComputeEvent event_wait_list, [OutAttribute] out ComputeEvent @event)
            where T7 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Enqueue commands to read from an image or image array object to host memory.
        /// </summary>
        /// <param name="command_queue"> 
        /// Refers to the command-queue in which the read command will be queued. command_queue and image must be created with the same OpenCL context.
        /// </param>
        /// <param name="image"> 
        /// Refers to a valid image or image array object.
        /// </param>
        /// <param name="blocking_read"> 
        /// Indicates if the read operations are blocking or non-blocking.  If blocking_read is True i.e. the read command is blocking, clEnqueueReadImage does not return until the buffer data has been read and copied into memory pointed to by ptr.  If blocking_read is False i.e. map operation is non-blocking, clEnqueueReadImage queues a non-blocking read command and returns. The contents of the buffer that ptr points to cannot be used until the read command has completed. The event argument returns an event object which can be used to query the execution status of the read command. When the read command has completed, the contents of the buffer that ptr points to can be used by the application.
        /// </param>
        /// <param name="origin">[length: 3] 
        /// Defines the (x, y, z) offset in pixels in the 1D, 2D, or 3D image, the (x, y) offset and the image index in the image array or the (x) offset and the image index in the 1D image array.  If image is a 2D image object, origin[2] must be 0. If image is a 1D image or 1D image buffer object, origin[1] and origin[2] must be 0. If image is a 1D image array object, origin[2] must be 0.  If image is a 1D image array object, origin[1] describes the image index in the 1D image array. If image is a 2D image array object, origin[2] describes the image index in the 2D image array.
        /// </param>
        /// <param name="region">[length: 3] 
        /// Defines the (width, height, depth) in pixels of the 1D, 2D or 3D rectangle, the (width, height) in pixels of the 2D rectangle and the number of images of a 2D image array or the (width) in pixels of the 1D rectangle and the number of images of a 1D image array. If image is a 2D image object, region[2] must be 1.  If image is a 1D image or 1D image buffer object,  region[1] and region[2] must be 1. If image is a 1D image array object, region[2] must be 1.
        /// </param>
        /// <param name="row_pitch"> 
        /// The length of each row in bytes. This value must be greater than or equal to the element size in bytes * width. If row_pitch is set to 0, the appropriate row pitch is calculated based on the size of each element in bytes multiplied by width.
        /// </param>
        /// <param name="slice_pitch"> 
        /// Size in bytes of the 2D slice of the 3D region of a 3D image or each image of a 1D or 2D image array being read.  This must be 0 if image is a 1D or 2D image.  This value must be greater than or equal to row_pitch * height. If slice_pitch is set to 0, the appropriate slice pitch is calculated based on the row_pitch * height.
        /// </param>
        /// <param name="ptr"> 
        /// The pointer to a buffer in host memory where image data is to be read from.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed.  If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points.  The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed.  If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points.  The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event"> 
        /// Returns an event object that identifies this particular read command and can be used to query or queue a wait for this particular command to complete. event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete.  If the event_wait_list and the event arguments are not NULL, the event argument should not refer to an element of the event_wait_list array.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clEnqueueReadImage")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode EnqueueReadImage<T7>(CommandQueue command_queue, ComputeMemory image, bool blocking_read, ref IntPtr* origin, ref IntPtr* region, IntPtr row_pitch, IntPtr slice_pitch, [InAttribute, OutAttribute] T7[,,] ptr, Int32 num_events_in_wait_list, ref ComputeEvent event_wait_list, [OutAttribute] out ComputeEvent @event)
            where T7 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Enqueue commands to read from an image or image array object to host memory.
        /// </summary>
        /// <param name="command_queue"> 
        /// Refers to the command-queue in which the read command will be queued. command_queue and image must be created with the same OpenCL context.
        /// </param>
        /// <param name="image"> 
        /// Refers to a valid image or image array object.
        /// </param>
        /// <param name="blocking_read"> 
        /// Indicates if the read operations are blocking or non-blocking.  If blocking_read is True i.e. the read command is blocking, clEnqueueReadImage does not return until the buffer data has been read and copied into memory pointed to by ptr.  If blocking_read is False i.e. map operation is non-blocking, clEnqueueReadImage queues a non-blocking read command and returns. The contents of the buffer that ptr points to cannot be used until the read command has completed. The event argument returns an event object which can be used to query the execution status of the read command. When the read command has completed, the contents of the buffer that ptr points to can be used by the application.
        /// </param>
        /// <param name="origin">[length: 3] 
        /// Defines the (x, y, z) offset in pixels in the 1D, 2D, or 3D image, the (x, y) offset and the image index in the image array or the (x) offset and the image index in the 1D image array.  If image is a 2D image object, origin[2] must be 0. If image is a 1D image or 1D image buffer object, origin[1] and origin[2] must be 0. If image is a 1D image array object, origin[2] must be 0.  If image is a 1D image array object, origin[1] describes the image index in the 1D image array. If image is a 2D image array object, origin[2] describes the image index in the 2D image array.
        /// </param>
        /// <param name="region">[length: 3] 
        /// Defines the (width, height, depth) in pixels of the 1D, 2D or 3D rectangle, the (width, height) in pixels of the 2D rectangle and the number of images of a 2D image array or the (width) in pixels of the 1D rectangle and the number of images of a 1D image array. If image is a 2D image object, region[2] must be 1.  If image is a 1D image or 1D image buffer object,  region[1] and region[2] must be 1. If image is a 1D image array object, region[2] must be 1.
        /// </param>
        /// <param name="row_pitch"> 
        /// The length of each row in bytes. This value must be greater than or equal to the element size in bytes * width. If row_pitch is set to 0, the appropriate row pitch is calculated based on the size of each element in bytes multiplied by width.
        /// </param>
        /// <param name="slice_pitch"> 
        /// Size in bytes of the 2D slice of the 3D region of a 3D image or each image of a 1D or 2D image array being read.  This must be 0 if image is a 1D or 2D image.  This value must be greater than or equal to row_pitch * height. If slice_pitch is set to 0, the appropriate slice pitch is calculated based on the row_pitch * height.
        /// </param>
        /// <param name="ptr"> 
        /// The pointer to a buffer in host memory where image data is to be read from.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed.  If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points.  The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed.  If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points.  The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event"> 
        /// Returns an event object that identifies this particular read command and can be used to query or queue a wait for this particular command to complete. event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete.  If the event_wait_list and the event arguments are not NULL, the event argument should not refer to an element of the event_wait_list array.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clEnqueueReadImage")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode EnqueueReadImage<T7>(CommandQueue command_queue, ComputeMemory image, bool blocking_read, ref IntPtr* origin, ref IntPtr* region, IntPtr row_pitch, IntPtr slice_pitch, [InAttribute, OutAttribute] ref T7 ptr, Int32 num_events_in_wait_list, ref ComputeEvent event_wait_list, [OutAttribute] out ComputeEvent @event)
            where T7 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Enqueue commands to read from an image or image array object to host memory.
        /// </summary>
        /// <param name="command_queue"> 
        /// Refers to the command-queue in which the read command will be queued. command_queue and image must be created with the same OpenCL context.
        /// </param>
        /// <param name="image"> 
        /// Refers to a valid image or image array object.
        /// </param>
        /// <param name="blocking_read"> 
        /// Indicates if the read operations are blocking or non-blocking.  If blocking_read is True i.e. the read command is blocking, clEnqueueReadImage does not return until the buffer data has been read and copied into memory pointed to by ptr.  If blocking_read is False i.e. map operation is non-blocking, clEnqueueReadImage queues a non-blocking read command and returns. The contents of the buffer that ptr points to cannot be used until the read command has completed. The event argument returns an event object which can be used to query the execution status of the read command. When the read command has completed, the contents of the buffer that ptr points to can be used by the application.
        /// </param>
        /// <param name="origin">[length: 3] 
        /// Defines the (x, y, z) offset in pixels in the 1D, 2D, or 3D image, the (x, y) offset and the image index in the image array or the (x) offset and the image index in the 1D image array.  If image is a 2D image object, origin[2] must be 0. If image is a 1D image or 1D image buffer object, origin[1] and origin[2] must be 0. If image is a 1D image array object, origin[2] must be 0.  If image is a 1D image array object, origin[1] describes the image index in the 1D image array. If image is a 2D image array object, origin[2] describes the image index in the 2D image array.
        /// </param>
        /// <param name="region">[length: 3] 
        /// Defines the (width, height, depth) in pixels of the 1D, 2D or 3D rectangle, the (width, height) in pixels of the 2D rectangle and the number of images of a 2D image array or the (width) in pixels of the 1D rectangle and the number of images of a 1D image array. If image is a 2D image object, region[2] must be 1.  If image is a 1D image or 1D image buffer object,  region[1] and region[2] must be 1. If image is a 1D image array object, region[2] must be 1.
        /// </param>
        /// <param name="row_pitch"> 
        /// The length of each row in bytes. This value must be greater than or equal to the element size in bytes * width. If row_pitch is set to 0, the appropriate row pitch is calculated based on the size of each element in bytes multiplied by width.
        /// </param>
        /// <param name="slice_pitch"> 
        /// Size in bytes of the 2D slice of the 3D region of a 3D image or each image of a 1D or 2D image array being read.  This must be 0 if image is a 1D or 2D image.  This value must be greater than or equal to row_pitch * height. If slice_pitch is set to 0, the appropriate slice pitch is calculated based on the row_pitch * height.
        /// </param>
        /// <param name="ptr"> 
        /// The pointer to a buffer in host memory where image data is to be read from.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed.  If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points.  The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed.  If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points.  The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event"> 
        /// Returns an event object that identifies this particular read command and can be used to query or queue a wait for this particular command to complete. event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete.  If the event_wait_list and the event arguments are not NULL, the event argument should not refer to an element of the event_wait_list array.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clEnqueueReadImage")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode EnqueueReadImage(CommandQueue command_queue, ComputeMemory image, bool blocking_read, IntPtr** origin, IntPtr** region, IntPtr row_pitch, IntPtr slice_pitch, IntPtr ptr, Int32 num_events_in_wait_list, ComputeEvent* event_wait_list, [OutAttribute] ComputeEvent* @event) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Enqueue commands to read from an image or image array object to host memory.
        /// </summary>
        /// <param name="command_queue"> 
        /// Refers to the command-queue in which the read command will be queued. command_queue and image must be created with the same OpenCL context.
        /// </param>
        /// <param name="image"> 
        /// Refers to a valid image or image array object.
        /// </param>
        /// <param name="blocking_read"> 
        /// Indicates if the read operations are blocking or non-blocking.  If blocking_read is True i.e. the read command is blocking, clEnqueueReadImage does not return until the buffer data has been read and copied into memory pointed to by ptr.  If blocking_read is False i.e. map operation is non-blocking, clEnqueueReadImage queues a non-blocking read command and returns. The contents of the buffer that ptr points to cannot be used until the read command has completed. The event argument returns an event object which can be used to query the execution status of the read command. When the read command has completed, the contents of the buffer that ptr points to can be used by the application.
        /// </param>
        /// <param name="origin">[length: 3] 
        /// Defines the (x, y, z) offset in pixels in the 1D, 2D, or 3D image, the (x, y) offset and the image index in the image array or the (x) offset and the image index in the 1D image array.  If image is a 2D image object, origin[2] must be 0. If image is a 1D image or 1D image buffer object, origin[1] and origin[2] must be 0. If image is a 1D image array object, origin[2] must be 0.  If image is a 1D image array object, origin[1] describes the image index in the 1D image array. If image is a 2D image array object, origin[2] describes the image index in the 2D image array.
        /// </param>
        /// <param name="region">[length: 3] 
        /// Defines the (width, height, depth) in pixels of the 1D, 2D or 3D rectangle, the (width, height) in pixels of the 2D rectangle and the number of images of a 2D image array or the (width) in pixels of the 1D rectangle and the number of images of a 1D image array. If image is a 2D image object, region[2] must be 1.  If image is a 1D image or 1D image buffer object,  region[1] and region[2] must be 1. If image is a 1D image array object, region[2] must be 1.
        /// </param>
        /// <param name="row_pitch"> 
        /// The length of each row in bytes. This value must be greater than or equal to the element size in bytes * width. If row_pitch is set to 0, the appropriate row pitch is calculated based on the size of each element in bytes multiplied by width.
        /// </param>
        /// <param name="slice_pitch"> 
        /// Size in bytes of the 2D slice of the 3D region of a 3D image or each image of a 1D or 2D image array being read.  This must be 0 if image is a 1D or 2D image.  This value must be greater than or equal to row_pitch * height. If slice_pitch is set to 0, the appropriate slice pitch is calculated based on the row_pitch * height.
        /// </param>
        /// <param name="ptr"> 
        /// The pointer to a buffer in host memory where image data is to be read from.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed.  If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points.  The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed.  If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points.  The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event"> 
        /// Returns an event object that identifies this particular read command and can be used to query or queue a wait for this particular command to complete. event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete.  If the event_wait_list and the event arguments are not NULL, the event argument should not refer to an element of the event_wait_list array.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clEnqueueReadImage")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode EnqueueReadImage<T7>(CommandQueue command_queue, ComputeMemory image, bool blocking_read, IntPtr** origin, IntPtr** region, IntPtr row_pitch, IntPtr slice_pitch, [InAttribute, OutAttribute] T7[] ptr, Int32 num_events_in_wait_list, ComputeEvent* event_wait_list, [OutAttribute] ComputeEvent* @event)
            where T7 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Enqueue commands to read from an image or image array object to host memory.
        /// </summary>
        /// <param name="command_queue"> 
        /// Refers to the command-queue in which the read command will be queued. command_queue and image must be created with the same OpenCL context.
        /// </param>
        /// <param name="image"> 
        /// Refers to a valid image or image array object.
        /// </param>
        /// <param name="blocking_read"> 
        /// Indicates if the read operations are blocking or non-blocking.  If blocking_read is True i.e. the read command is blocking, clEnqueueReadImage does not return until the buffer data has been read and copied into memory pointed to by ptr.  If blocking_read is False i.e. map operation is non-blocking, clEnqueueReadImage queues a non-blocking read command and returns. The contents of the buffer that ptr points to cannot be used until the read command has completed. The event argument returns an event object which can be used to query the execution status of the read command. When the read command has completed, the contents of the buffer that ptr points to can be used by the application.
        /// </param>
        /// <param name="origin">[length: 3] 
        /// Defines the (x, y, z) offset in pixels in the 1D, 2D, or 3D image, the (x, y) offset and the image index in the image array or the (x) offset and the image index in the 1D image array.  If image is a 2D image object, origin[2] must be 0. If image is a 1D image or 1D image buffer object, origin[1] and origin[2] must be 0. If image is a 1D image array object, origin[2] must be 0.  If image is a 1D image array object, origin[1] describes the image index in the 1D image array. If image is a 2D image array object, origin[2] describes the image index in the 2D image array.
        /// </param>
        /// <param name="region">[length: 3] 
        /// Defines the (width, height, depth) in pixels of the 1D, 2D or 3D rectangle, the (width, height) in pixels of the 2D rectangle and the number of images of a 2D image array or the (width) in pixels of the 1D rectangle and the number of images of a 1D image array. If image is a 2D image object, region[2] must be 1.  If image is a 1D image or 1D image buffer object,  region[1] and region[2] must be 1. If image is a 1D image array object, region[2] must be 1.
        /// </param>
        /// <param name="row_pitch"> 
        /// The length of each row in bytes. This value must be greater than or equal to the element size in bytes * width. If row_pitch is set to 0, the appropriate row pitch is calculated based on the size of each element in bytes multiplied by width.
        /// </param>
        /// <param name="slice_pitch"> 
        /// Size in bytes of the 2D slice of the 3D region of a 3D image or each image of a 1D or 2D image array being read.  This must be 0 if image is a 1D or 2D image.  This value must be greater than or equal to row_pitch * height. If slice_pitch is set to 0, the appropriate slice pitch is calculated based on the row_pitch * height.
        /// </param>
        /// <param name="ptr"> 
        /// The pointer to a buffer in host memory where image data is to be read from.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed.  If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points.  The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed.  If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points.  The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event"> 
        /// Returns an event object that identifies this particular read command and can be used to query or queue a wait for this particular command to complete. event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete.  If the event_wait_list and the event arguments are not NULL, the event argument should not refer to an element of the event_wait_list array.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clEnqueueReadImage")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode EnqueueReadImage<T7>(CommandQueue command_queue, ComputeMemory image, bool blocking_read, IntPtr** origin, IntPtr** region, IntPtr row_pitch, IntPtr slice_pitch, [InAttribute, OutAttribute] T7[,] ptr, Int32 num_events_in_wait_list, ComputeEvent* event_wait_list, [OutAttribute] ComputeEvent* @event)
            where T7 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Enqueue commands to read from an image or image array object to host memory.
        /// </summary>
        /// <param name="command_queue"> 
        /// Refers to the command-queue in which the read command will be queued. command_queue and image must be created with the same OpenCL context.
        /// </param>
        /// <param name="image"> 
        /// Refers to a valid image or image array object.
        /// </param>
        /// <param name="blocking_read"> 
        /// Indicates if the read operations are blocking or non-blocking.  If blocking_read is True i.e. the read command is blocking, clEnqueueReadImage does not return until the buffer data has been read and copied into memory pointed to by ptr.  If blocking_read is False i.e. map operation is non-blocking, clEnqueueReadImage queues a non-blocking read command and returns. The contents of the buffer that ptr points to cannot be used until the read command has completed. The event argument returns an event object which can be used to query the execution status of the read command. When the read command has completed, the contents of the buffer that ptr points to can be used by the application.
        /// </param>
        /// <param name="origin">[length: 3] 
        /// Defines the (x, y, z) offset in pixels in the 1D, 2D, or 3D image, the (x, y) offset and the image index in the image array or the (x) offset and the image index in the 1D image array.  If image is a 2D image object, origin[2] must be 0. If image is a 1D image or 1D image buffer object, origin[1] and origin[2] must be 0. If image is a 1D image array object, origin[2] must be 0.  If image is a 1D image array object, origin[1] describes the image index in the 1D image array. If image is a 2D image array object, origin[2] describes the image index in the 2D image array.
        /// </param>
        /// <param name="region">[length: 3] 
        /// Defines the (width, height, depth) in pixels of the 1D, 2D or 3D rectangle, the (width, height) in pixels of the 2D rectangle and the number of images of a 2D image array or the (width) in pixels of the 1D rectangle and the number of images of a 1D image array. If image is a 2D image object, region[2] must be 1.  If image is a 1D image or 1D image buffer object,  region[1] and region[2] must be 1. If image is a 1D image array object, region[2] must be 1.
        /// </param>
        /// <param name="row_pitch"> 
        /// The length of each row in bytes. This value must be greater than or equal to the element size in bytes * width. If row_pitch is set to 0, the appropriate row pitch is calculated based on the size of each element in bytes multiplied by width.
        /// </param>
        /// <param name="slice_pitch"> 
        /// Size in bytes of the 2D slice of the 3D region of a 3D image or each image of a 1D or 2D image array being read.  This must be 0 if image is a 1D or 2D image.  This value must be greater than or equal to row_pitch * height. If slice_pitch is set to 0, the appropriate slice pitch is calculated based on the row_pitch * height.
        /// </param>
        /// <param name="ptr"> 
        /// The pointer to a buffer in host memory where image data is to be read from.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed.  If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points.  The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed.  If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points.  The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event"> 
        /// Returns an event object that identifies this particular read command and can be used to query or queue a wait for this particular command to complete. event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete.  If the event_wait_list and the event arguments are not NULL, the event argument should not refer to an element of the event_wait_list array.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clEnqueueReadImage")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode EnqueueReadImage<T7>(CommandQueue command_queue, ComputeMemory image, bool blocking_read, IntPtr** origin, IntPtr** region, IntPtr row_pitch, IntPtr slice_pitch, [InAttribute, OutAttribute] T7[,,] ptr, Int32 num_events_in_wait_list, ComputeEvent* event_wait_list, [OutAttribute] ComputeEvent* @event)
            where T7 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Enqueue commands to read from an image or image array object to host memory.
        /// </summary>
        /// <param name="command_queue"> 
        /// Refers to the command-queue in which the read command will be queued. command_queue and image must be created with the same OpenCL context.
        /// </param>
        /// <param name="image"> 
        /// Refers to a valid image or image array object.
        /// </param>
        /// <param name="blocking_read"> 
        /// Indicates if the read operations are blocking or non-blocking.  If blocking_read is True i.e. the read command is blocking, clEnqueueReadImage does not return until the buffer data has been read and copied into memory pointed to by ptr.  If blocking_read is False i.e. map operation is non-blocking, clEnqueueReadImage queues a non-blocking read command and returns. The contents of the buffer that ptr points to cannot be used until the read command has completed. The event argument returns an event object which can be used to query the execution status of the read command. When the read command has completed, the contents of the buffer that ptr points to can be used by the application.
        /// </param>
        /// <param name="origin">[length: 3] 
        /// Defines the (x, y, z) offset in pixels in the 1D, 2D, or 3D image, the (x, y) offset and the image index in the image array or the (x) offset and the image index in the 1D image array.  If image is a 2D image object, origin[2] must be 0. If image is a 1D image or 1D image buffer object, origin[1] and origin[2] must be 0. If image is a 1D image array object, origin[2] must be 0.  If image is a 1D image array object, origin[1] describes the image index in the 1D image array. If image is a 2D image array object, origin[2] describes the image index in the 2D image array.
        /// </param>
        /// <param name="region">[length: 3] 
        /// Defines the (width, height, depth) in pixels of the 1D, 2D or 3D rectangle, the (width, height) in pixels of the 2D rectangle and the number of images of a 2D image array or the (width) in pixels of the 1D rectangle and the number of images of a 1D image array. If image is a 2D image object, region[2] must be 1.  If image is a 1D image or 1D image buffer object,  region[1] and region[2] must be 1. If image is a 1D image array object, region[2] must be 1.
        /// </param>
        /// <param name="row_pitch"> 
        /// The length of each row in bytes. This value must be greater than or equal to the element size in bytes * width. If row_pitch is set to 0, the appropriate row pitch is calculated based on the size of each element in bytes multiplied by width.
        /// </param>
        /// <param name="slice_pitch"> 
        /// Size in bytes of the 2D slice of the 3D region of a 3D image or each image of a 1D or 2D image array being read.  This must be 0 if image is a 1D or 2D image.  This value must be greater than or equal to row_pitch * height. If slice_pitch is set to 0, the appropriate slice pitch is calculated based on the row_pitch * height.
        /// </param>
        /// <param name="ptr"> 
        /// The pointer to a buffer in host memory where image data is to be read from.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed.  If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points.  The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed.  If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points.  The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event"> 
        /// Returns an event object that identifies this particular read command and can be used to query or queue a wait for this particular command to complete. event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete.  If the event_wait_list and the event arguments are not NULL, the event argument should not refer to an element of the event_wait_list array.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clEnqueueReadImage")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode EnqueueReadImage<T7>(CommandQueue command_queue, ComputeMemory image, bool blocking_read, IntPtr** origin, IntPtr** region, IntPtr row_pitch, IntPtr slice_pitch, [InAttribute, OutAttribute] ref T7 ptr, Int32 num_events_in_wait_list, ComputeEvent* event_wait_list, [OutAttribute] ComputeEvent* @event)
            where T7 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Enqueues a command to execute a kernel on a device.
        /// </summary>
        /// <param name="command_queue"> 
        /// A valid command-queue. The kernel will be queued for execution on the device associated with command_queue.
        /// </param>
        /// <param name="kernel"> 
        /// A valid kernel object. The OpenCL context associated with kernel and command_queue must be the same.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// Sspecify events that need to complete before this particular command can be executed.  If event_wait_list is NULL, then this particular command does not wait on any event to complete.  If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0.  The events specified in event_wait_list act as synchronization points.  The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// Sspecify events that need to complete before this particular command can be executed.  If event_wait_list is NULL, then this particular command does not wait on any event to complete.  If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0.  The events specified in event_wait_list act as synchronization points.  The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event"> 
        /// Returns an event object that identifies this particular kernel execution instance. Event objects are unique and can be used to identify a particular kernel execution instance later on. If event is NULL, no event will be created for this kernel execution instance and therefore it will not be possible for the application to query or queue a wait for this particular kernel execution instance.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clEnqueueTask")]
        [CLSCompliant(false)]
        public static Int32 EnqueueTask(CommandQueue command_queue, ComputeKernel kernel, Int32 num_events_in_wait_list, ComputeEvent[] event_wait_list, ComputeEvent[] @event) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Enqueues a command to execute a kernel on a device.
        /// </summary>
        /// <param name="command_queue"> 
        /// A valid command-queue. The kernel will be queued for execution on the device associated with command_queue.
        /// </param>
        /// <param name="kernel"> 
        /// A valid kernel object. The OpenCL context associated with kernel and command_queue must be the same.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// Sspecify events that need to complete before this particular command can be executed.  If event_wait_list is NULL, then this particular command does not wait on any event to complete.  If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0.  The events specified in event_wait_list act as synchronization points.  The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// Sspecify events that need to complete before this particular command can be executed.  If event_wait_list is NULL, then this particular command does not wait on any event to complete.  If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0.  The events specified in event_wait_list act as synchronization points.  The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event"> 
        /// Returns an event object that identifies this particular kernel execution instance. Event objects are unique and can be used to identify a particular kernel execution instance later on. If event is NULL, no event will be created for this kernel execution instance and therefore it will not be possible for the application to query or queue a wait for this particular kernel execution instance.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clEnqueueTask")]
        [CLSCompliant(false)]
        public static Int32 EnqueueTask(CommandQueue command_queue, ComputeKernel kernel, Int32 num_events_in_wait_list, ref ComputeEvent event_wait_list, ref ComputeEvent @event) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Enqueues a command to execute a kernel on a device.
        /// </summary>
        /// <param name="command_queue"> 
        /// A valid command-queue. The kernel will be queued for execution on the device associated with command_queue.
        /// </param>
        /// <param name="kernel"> 
        /// A valid kernel object. The OpenCL context associated with kernel and command_queue must be the same.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// Sspecify events that need to complete before this particular command can be executed.  If event_wait_list is NULL, then this particular command does not wait on any event to complete.  If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0.  The events specified in event_wait_list act as synchronization points.  The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// Sspecify events that need to complete before this particular command can be executed.  If event_wait_list is NULL, then this particular command does not wait on any event to complete.  If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0.  The events specified in event_wait_list act as synchronization points.  The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event"> 
        /// Returns an event object that identifies this particular kernel execution instance. Event objects are unique and can be used to identify a particular kernel execution instance later on. If event is NULL, no event will be created for this kernel execution instance and therefore it will not be possible for the application to query or queue a wait for this particular kernel execution instance.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clEnqueueTask")]
        [CLSCompliant(false)]
        public static unsafe Int32 EnqueueTask(CommandQueue command_queue, ComputeKernel kernel, Int32 num_events_in_wait_list, ComputeEvent* event_wait_list, ComputeEvent* @event) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Enqueues a command to unmap a previously mapped region of a memory object.
        /// </summary>
        /// <param name="command_queue"> 
        /// Must be a valid command-queue.
        /// </param>
        /// <param name="memobj"> 
        /// A valid memory object. The OpenCL context associated with command_queue and memobj must be the same.
        /// </param>
        /// <param name="mapped_ptr"> 
        /// The host address returned by a previous call to clEnqueueMapBuffer or clEnqueueMapImage for memobj.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// Specify events that need to complete before clEnqueueUnmapMemObject can be executed. If  event_wait_list is NULL, then clEnqueueUnmapMemObject does not wait on any event to complete.  If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// Specify events that need to complete before clEnqueueUnmapMemObject can be executed. If  event_wait_list is NULL, then clEnqueueUnmapMemObject does not wait on any event to complete.  If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event"> 
        /// Returns an event object that identifies this particular copy command and can be used to query or queue a wait for this particular command to complete. event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete. clEnqueueBarrierWithWaitList can be used instead.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clEnqueueUnmapMemObject")]
        [CLSCompliant(false)]
        public static ErrorCode EnqueueUnmapMemObject(CommandQueue command_queue, ComputeMemory memobj, IntPtr mapped_ptr, Int32 num_events_in_wait_list, ComputeEvent[] event_wait_list, [OutAttribute] out ComputeEvent @event) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Enqueues a command to unmap a previously mapped region of a memory object.
        /// </summary>
        /// <param name="command_queue"> 
        /// Must be a valid command-queue.
        /// </param>
        /// <param name="memobj"> 
        /// A valid memory object. The OpenCL context associated with command_queue and memobj must be the same.
        /// </param>
        /// <param name="mapped_ptr"> 
        /// The host address returned by a previous call to clEnqueueMapBuffer or clEnqueueMapImage for memobj.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// Specify events that need to complete before clEnqueueUnmapMemObject can be executed. If  event_wait_list is NULL, then clEnqueueUnmapMemObject does not wait on any event to complete.  If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// Specify events that need to complete before clEnqueueUnmapMemObject can be executed. If  event_wait_list is NULL, then clEnqueueUnmapMemObject does not wait on any event to complete.  If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event"> 
        /// Returns an event object that identifies this particular copy command and can be used to query or queue a wait for this particular command to complete. event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete. clEnqueueBarrierWithWaitList can be used instead.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clEnqueueUnmapMemObject")]
        [CLSCompliant(false)]
        public static ErrorCode EnqueueUnmapMemObject(CommandQueue command_queue, ComputeMemory memobj, IntPtr mapped_ptr, Int32 num_events_in_wait_list, ref ComputeEvent event_wait_list, [OutAttribute] out ComputeEvent @event) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Enqueues a command to unmap a previously mapped region of a memory object.
        /// </summary>
        /// <param name="command_queue"> 
        /// Must be a valid command-queue.
        /// </param>
        /// <param name="memobj"> 
        /// A valid memory object. The OpenCL context associated with command_queue and memobj must be the same.
        /// </param>
        /// <param name="mapped_ptr"> 
        /// The host address returned by a previous call to clEnqueueMapBuffer or clEnqueueMapImage for memobj.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// Specify events that need to complete before clEnqueueUnmapMemObject can be executed. If  event_wait_list is NULL, then clEnqueueUnmapMemObject does not wait on any event to complete.  If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// Specify events that need to complete before clEnqueueUnmapMemObject can be executed. If  event_wait_list is NULL, then clEnqueueUnmapMemObject does not wait on any event to complete.  If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event"> 
        /// Returns an event object that identifies this particular copy command and can be used to query or queue a wait for this particular command to complete. event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete. clEnqueueBarrierWithWaitList can be used instead.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clEnqueueUnmapMemObject")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode EnqueueUnmapMemObject(CommandQueue command_queue, ComputeMemory memobj, IntPtr mapped_ptr, Int32 num_events_in_wait_list, ComputeEvent* event_wait_list, [OutAttribute] ComputeEvent* @event) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Enqueues a command to unmap a previously mapped region of a memory object.
        /// </summary>
        /// <param name="command_queue"> 
        /// Must be a valid command-queue.
        /// </param>
        /// <param name="memobj"> 
        /// A valid memory object. The OpenCL context associated with command_queue and memobj must be the same.
        /// </param>
        /// <param name="mapped_ptr"> 
        /// The host address returned by a previous call to clEnqueueMapBuffer or clEnqueueMapImage for memobj.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// Specify events that need to complete before clEnqueueUnmapMemObject can be executed. If  event_wait_list is NULL, then clEnqueueUnmapMemObject does not wait on any event to complete.  If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// Specify events that need to complete before clEnqueueUnmapMemObject can be executed. If  event_wait_list is NULL, then clEnqueueUnmapMemObject does not wait on any event to complete.  If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event"> 
        /// Returns an event object that identifies this particular copy command and can be used to query or queue a wait for this particular command to complete. event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete. clEnqueueBarrierWithWaitList can be used instead.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clEnqueueUnmapMemObject")]
        [CLSCompliant(false)]
        public static ErrorCode EnqueueUnmapMemObject<T2>(CommandQueue command_queue, ComputeMemory memobj, [InAttribute, OutAttribute] T2[] mapped_ptr, Int32 num_events_in_wait_list, ComputeEvent[] event_wait_list, [OutAttribute] out ComputeEvent @event)
            where T2 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Enqueues a command to unmap a previously mapped region of a memory object.
        /// </summary>
        /// <param name="command_queue"> 
        /// Must be a valid command-queue.
        /// </param>
        /// <param name="memobj"> 
        /// A valid memory object. The OpenCL context associated with command_queue and memobj must be the same.
        /// </param>
        /// <param name="mapped_ptr"> 
        /// The host address returned by a previous call to clEnqueueMapBuffer or clEnqueueMapImage for memobj.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// Specify events that need to complete before clEnqueueUnmapMemObject can be executed. If  event_wait_list is NULL, then clEnqueueUnmapMemObject does not wait on any event to complete.  If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// Specify events that need to complete before clEnqueueUnmapMemObject can be executed. If  event_wait_list is NULL, then clEnqueueUnmapMemObject does not wait on any event to complete.  If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event"> 
        /// Returns an event object that identifies this particular copy command and can be used to query or queue a wait for this particular command to complete. event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete. clEnqueueBarrierWithWaitList can be used instead.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clEnqueueUnmapMemObject")]
        [CLSCompliant(false)]
        public static ErrorCode EnqueueUnmapMemObject<T2>(CommandQueue command_queue, ComputeMemory memobj, [InAttribute, OutAttribute] T2[] mapped_ptr, Int32 num_events_in_wait_list, ref ComputeEvent event_wait_list, [OutAttribute] out ComputeEvent @event)
            where T2 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Enqueues a command to unmap a previously mapped region of a memory object.
        /// </summary>
        /// <param name="command_queue"> 
        /// Must be a valid command-queue.
        /// </param>
        /// <param name="memobj"> 
        /// A valid memory object. The OpenCL context associated with command_queue and memobj must be the same.
        /// </param>
        /// <param name="mapped_ptr"> 
        /// The host address returned by a previous call to clEnqueueMapBuffer or clEnqueueMapImage for memobj.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// Specify events that need to complete before clEnqueueUnmapMemObject can be executed. If  event_wait_list is NULL, then clEnqueueUnmapMemObject does not wait on any event to complete.  If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// Specify events that need to complete before clEnqueueUnmapMemObject can be executed. If  event_wait_list is NULL, then clEnqueueUnmapMemObject does not wait on any event to complete.  If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event"> 
        /// Returns an event object that identifies this particular copy command and can be used to query or queue a wait for this particular command to complete. event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete. clEnqueueBarrierWithWaitList can be used instead.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clEnqueueUnmapMemObject")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode EnqueueUnmapMemObject<T2>(CommandQueue command_queue, ComputeMemory memobj, [InAttribute, OutAttribute] T2[] mapped_ptr, Int32 num_events_in_wait_list, ComputeEvent* event_wait_list, [OutAttribute] ComputeEvent* @event)
            where T2 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Enqueues a command to unmap a previously mapped region of a memory object.
        /// </summary>
        /// <param name="command_queue"> 
        /// Must be a valid command-queue.
        /// </param>
        /// <param name="memobj"> 
        /// A valid memory object. The OpenCL context associated with command_queue and memobj must be the same.
        /// </param>
        /// <param name="mapped_ptr"> 
        /// The host address returned by a previous call to clEnqueueMapBuffer or clEnqueueMapImage for memobj.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// Specify events that need to complete before clEnqueueUnmapMemObject can be executed. If  event_wait_list is NULL, then clEnqueueUnmapMemObject does not wait on any event to complete.  If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// Specify events that need to complete before clEnqueueUnmapMemObject can be executed. If  event_wait_list is NULL, then clEnqueueUnmapMemObject does not wait on any event to complete.  If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event"> 
        /// Returns an event object that identifies this particular copy command and can be used to query or queue a wait for this particular command to complete. event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete. clEnqueueBarrierWithWaitList can be used instead.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clEnqueueUnmapMemObject")]
        [CLSCompliant(false)]
        public static ErrorCode EnqueueUnmapMemObject<T2>(CommandQueue command_queue, ComputeMemory memobj, [InAttribute, OutAttribute] T2[,] mapped_ptr, Int32 num_events_in_wait_list, ComputeEvent[] event_wait_list, [OutAttribute] out ComputeEvent @event)
            where T2 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Enqueues a command to unmap a previously mapped region of a memory object.
        /// </summary>
        /// <param name="command_queue"> 
        /// Must be a valid command-queue.
        /// </param>
        /// <param name="memobj"> 
        /// A valid memory object. The OpenCL context associated with command_queue and memobj must be the same.
        /// </param>
        /// <param name="mapped_ptr"> 
        /// The host address returned by a previous call to clEnqueueMapBuffer or clEnqueueMapImage for memobj.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// Specify events that need to complete before clEnqueueUnmapMemObject can be executed. If  event_wait_list is NULL, then clEnqueueUnmapMemObject does not wait on any event to complete.  If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// Specify events that need to complete before clEnqueueUnmapMemObject can be executed. If  event_wait_list is NULL, then clEnqueueUnmapMemObject does not wait on any event to complete.  If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event"> 
        /// Returns an event object that identifies this particular copy command and can be used to query or queue a wait for this particular command to complete. event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete. clEnqueueBarrierWithWaitList can be used instead.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clEnqueueUnmapMemObject")]
        [CLSCompliant(false)]
        public static ErrorCode EnqueueUnmapMemObject<T2>(CommandQueue command_queue, ComputeMemory memobj, [InAttribute, OutAttribute] T2[,] mapped_ptr, Int32 num_events_in_wait_list, ref ComputeEvent event_wait_list, [OutAttribute] out ComputeEvent @event)
            where T2 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Enqueues a command to unmap a previously mapped region of a memory object.
        /// </summary>
        /// <param name="command_queue"> 
        /// Must be a valid command-queue.
        /// </param>
        /// <param name="memobj"> 
        /// A valid memory object. The OpenCL context associated with command_queue and memobj must be the same.
        /// </param>
        /// <param name="mapped_ptr"> 
        /// The host address returned by a previous call to clEnqueueMapBuffer or clEnqueueMapImage for memobj.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// Specify events that need to complete before clEnqueueUnmapMemObject can be executed. If  event_wait_list is NULL, then clEnqueueUnmapMemObject does not wait on any event to complete.  If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// Specify events that need to complete before clEnqueueUnmapMemObject can be executed. If  event_wait_list is NULL, then clEnqueueUnmapMemObject does not wait on any event to complete.  If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event"> 
        /// Returns an event object that identifies this particular copy command and can be used to query or queue a wait for this particular command to complete. event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete. clEnqueueBarrierWithWaitList can be used instead.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clEnqueueUnmapMemObject")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode EnqueueUnmapMemObject<T2>(CommandQueue command_queue, ComputeMemory memobj, [InAttribute, OutAttribute] T2[,] mapped_ptr, Int32 num_events_in_wait_list, ComputeEvent* event_wait_list, [OutAttribute] ComputeEvent* @event)
            where T2 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Enqueues a command to unmap a previously mapped region of a memory object.
        /// </summary>
        /// <param name="command_queue"> 
        /// Must be a valid command-queue.
        /// </param>
        /// <param name="memobj"> 
        /// A valid memory object. The OpenCL context associated with command_queue and memobj must be the same.
        /// </param>
        /// <param name="mapped_ptr"> 
        /// The host address returned by a previous call to clEnqueueMapBuffer or clEnqueueMapImage for memobj.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// Specify events that need to complete before clEnqueueUnmapMemObject can be executed. If  event_wait_list is NULL, then clEnqueueUnmapMemObject does not wait on any event to complete.  If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// Specify events that need to complete before clEnqueueUnmapMemObject can be executed. If  event_wait_list is NULL, then clEnqueueUnmapMemObject does not wait on any event to complete.  If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event"> 
        /// Returns an event object that identifies this particular copy command and can be used to query or queue a wait for this particular command to complete. event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete. clEnqueueBarrierWithWaitList can be used instead.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clEnqueueUnmapMemObject")]
        [CLSCompliant(false)]
        public static ErrorCode EnqueueUnmapMemObject<T2>(CommandQueue command_queue, ComputeMemory memobj, [InAttribute, OutAttribute] T2[,,] mapped_ptr, Int32 num_events_in_wait_list, ComputeEvent[] event_wait_list, [OutAttribute] out ComputeEvent @event)
            where T2 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Enqueues a command to unmap a previously mapped region of a memory object.
        /// </summary>
        /// <param name="command_queue"> 
        /// Must be a valid command-queue.
        /// </param>
        /// <param name="memobj"> 
        /// A valid memory object. The OpenCL context associated with command_queue and memobj must be the same.
        /// </param>
        /// <param name="mapped_ptr"> 
        /// The host address returned by a previous call to clEnqueueMapBuffer or clEnqueueMapImage for memobj.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// Specify events that need to complete before clEnqueueUnmapMemObject can be executed. If  event_wait_list is NULL, then clEnqueueUnmapMemObject does not wait on any event to complete.  If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// Specify events that need to complete before clEnqueueUnmapMemObject can be executed. If  event_wait_list is NULL, then clEnqueueUnmapMemObject does not wait on any event to complete.  If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event"> 
        /// Returns an event object that identifies this particular copy command and can be used to query or queue a wait for this particular command to complete. event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete. clEnqueueBarrierWithWaitList can be used instead.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clEnqueueUnmapMemObject")]
        [CLSCompliant(false)]
        public static ErrorCode EnqueueUnmapMemObject<T2>(CommandQueue command_queue, ComputeMemory memobj, [InAttribute, OutAttribute] T2[,,] mapped_ptr, Int32 num_events_in_wait_list, ref ComputeEvent event_wait_list, [OutAttribute] out ComputeEvent @event)
            where T2 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Enqueues a command to unmap a previously mapped region of a memory object.
        /// </summary>
        /// <param name="command_queue"> 
        /// Must be a valid command-queue.
        /// </param>
        /// <param name="memobj"> 
        /// A valid memory object. The OpenCL context associated with command_queue and memobj must be the same.
        /// </param>
        /// <param name="mapped_ptr"> 
        /// The host address returned by a previous call to clEnqueueMapBuffer or clEnqueueMapImage for memobj.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// Specify events that need to complete before clEnqueueUnmapMemObject can be executed. If  event_wait_list is NULL, then clEnqueueUnmapMemObject does not wait on any event to complete.  If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// Specify events that need to complete before clEnqueueUnmapMemObject can be executed. If  event_wait_list is NULL, then clEnqueueUnmapMemObject does not wait on any event to complete.  If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event"> 
        /// Returns an event object that identifies this particular copy command and can be used to query or queue a wait for this particular command to complete. event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete. clEnqueueBarrierWithWaitList can be used instead.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clEnqueueUnmapMemObject")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode EnqueueUnmapMemObject<T2>(CommandQueue command_queue, ComputeMemory memobj, [InAttribute, OutAttribute] T2[,,] mapped_ptr, Int32 num_events_in_wait_list, ComputeEvent* event_wait_list, [OutAttribute] ComputeEvent* @event)
            where T2 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Enqueues a command to unmap a previously mapped region of a memory object.
        /// </summary>
        /// <param name="command_queue"> 
        /// Must be a valid command-queue.
        /// </param>
        /// <param name="memobj"> 
        /// A valid memory object. The OpenCL context associated with command_queue and memobj must be the same.
        /// </param>
        /// <param name="mapped_ptr"> 
        /// The host address returned by a previous call to clEnqueueMapBuffer or clEnqueueMapImage for memobj.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// Specify events that need to complete before clEnqueueUnmapMemObject can be executed. If  event_wait_list is NULL, then clEnqueueUnmapMemObject does not wait on any event to complete.  If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// Specify events that need to complete before clEnqueueUnmapMemObject can be executed. If  event_wait_list is NULL, then clEnqueueUnmapMemObject does not wait on any event to complete.  If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event"> 
        /// Returns an event object that identifies this particular copy command and can be used to query or queue a wait for this particular command to complete. event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete. clEnqueueBarrierWithWaitList can be used instead.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clEnqueueUnmapMemObject")]
        [CLSCompliant(false)]
        public static ErrorCode EnqueueUnmapMemObject<T2>(CommandQueue command_queue, ComputeMemory memobj, [InAttribute, OutAttribute] ref T2 mapped_ptr, Int32 num_events_in_wait_list, ComputeEvent[] event_wait_list, [OutAttribute] out ComputeEvent @event)
            where T2 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Enqueues a command to unmap a previously mapped region of a memory object.
        /// </summary>
        /// <param name="command_queue"> 
        /// Must be a valid command-queue.
        /// </param>
        /// <param name="memobj"> 
        /// A valid memory object. The OpenCL context associated with command_queue and memobj must be the same.
        /// </param>
        /// <param name="mapped_ptr"> 
        /// The host address returned by a previous call to clEnqueueMapBuffer or clEnqueueMapImage for memobj.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// Specify events that need to complete before clEnqueueUnmapMemObject can be executed. If  event_wait_list is NULL, then clEnqueueUnmapMemObject does not wait on any event to complete.  If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// Specify events that need to complete before clEnqueueUnmapMemObject can be executed. If  event_wait_list is NULL, then clEnqueueUnmapMemObject does not wait on any event to complete.  If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event"> 
        /// Returns an event object that identifies this particular copy command and can be used to query or queue a wait for this particular command to complete. event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete. clEnqueueBarrierWithWaitList can be used instead.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clEnqueueUnmapMemObject")]
        [CLSCompliant(false)]
        public static ErrorCode EnqueueUnmapMemObject<T2>(CommandQueue command_queue, ComputeMemory memobj, [InAttribute, OutAttribute] ref T2 mapped_ptr, Int32 num_events_in_wait_list, ref ComputeEvent event_wait_list, [OutAttribute] out ComputeEvent @event)
            where T2 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Enqueues a command to unmap a previously mapped region of a memory object.
        /// </summary>
        /// <param name="command_queue"> 
        /// Must be a valid command-queue.
        /// </param>
        /// <param name="memobj"> 
        /// A valid memory object. The OpenCL context associated with command_queue and memobj must be the same.
        /// </param>
        /// <param name="mapped_ptr"> 
        /// The host address returned by a previous call to clEnqueueMapBuffer or clEnqueueMapImage for memobj.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// Specify events that need to complete before clEnqueueUnmapMemObject can be executed. If  event_wait_list is NULL, then clEnqueueUnmapMemObject does not wait on any event to complete.  If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// Specify events that need to complete before clEnqueueUnmapMemObject can be executed. If  event_wait_list is NULL, then clEnqueueUnmapMemObject does not wait on any event to complete.  If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event"> 
        /// Returns an event object that identifies this particular copy command and can be used to query or queue a wait for this particular command to complete. event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete. clEnqueueBarrierWithWaitList can be used instead.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clEnqueueUnmapMemObject")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode EnqueueUnmapMemObject<T2>(CommandQueue command_queue, ComputeMemory memobj, [InAttribute, OutAttribute] ref T2 mapped_ptr, Int32 num_events_in_wait_list, ComputeEvent* event_wait_list, [OutAttribute] ComputeEvent* @event)
            where T2 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]</summary>
        /// <param name="command_queue"></param>
        /// <param name="num_events"></param>
        /// <param name="event_list"></param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clEnqueueWaitForEvents")]
        [CLSCompliant(false)]
        public static Int32 EnqueueWaitForEvents(CommandQueue command_queue, Int32 num_events, ComputeEvent[] event_list) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]</summary>
        /// <param name="command_queue"></param>
        /// <param name="num_events"></param>
        /// <param name="event_list"></param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clEnqueueWaitForEvents")]
        [CLSCompliant(false)]
        public static Int32 EnqueueWaitForEvents(CommandQueue command_queue, Int32 num_events, ref ComputeEvent event_list) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]</summary>
        /// <param name="command_queue"></param>
        /// <param name="num_events"></param>
        /// <param name="event_list"></param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clEnqueueWaitForEvents")]
        [CLSCompliant(false)]
        public static unsafe Int32 EnqueueWaitForEvents(CommandQueue command_queue, Int32 num_events, ComputeEvent* event_list) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Enqueue commands to write to a buffer object from host memory.
        /// </summary>
        /// <param name="command_queue"> 
        /// Refers to the command-queue in which the write command will be queued. command_queue and buffer must be created with the same OpenCL context.
        /// </param>
        /// <param name="buffer"> 
        /// Refers to a valid buffer object.
        /// </param>
        /// <param name="blocking_write"> 
        /// Indicates if the write operations are blocking or nonblocking.  If blocking_write is True, the OpenCL implementation copies the data referred to by ptr and enqueues the write operation in the command-queue. The memory pointed to by ptr can be reused by the application after the clEnqueueWriteBuffer call returns.  If blocking_write is False, the OpenCL implementation will use ptr to perform a nonblocking write. As the write is non-blocking the implementation can return immediately. The memory pointed to by ptr cannot be reused by the application after the call returns. The event argument returns an event object which can be used to query the execution status of the write command. When the write command has completed, the memory pointed to by ptr can then be reused by the application.
        /// </param>
        /// <param name="offset"> 
        /// The offset in bytes in the buffer object to write to.
        /// </param>
        /// <param name="cb"> 
        /// The size in bytes of data being written.
        /// </param>
        /// <param name="ptr"> 
        /// The pointer to buffer in host memory where data is to be written from.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// event_wait_list and num_events_in_wait_list specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points.  The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// event_wait_list and num_events_in_wait_list specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points.  The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event"> 
        /// Returns an event object that identifies this particular write command and can be used to query or queue a wait for this particular command to complete. event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clEnqueueWriteBuffer")]
        [CLSCompliant(false)]
        public static ErrorCode EnqueueWriteBuffer(CommandQueue command_queue, ComputeMemory buffer, bool blocking_write, IntPtr offset, IntPtr cb, IntPtr ptr, Int32 num_events_in_wait_list, ComputeEvent[] event_wait_list, [OutAttribute] out ComputeEvent @event) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Enqueue commands to write to a buffer object from host memory.
        /// </summary>
        /// <param name="command_queue"> 
        /// Refers to the command-queue in which the write command will be queued. command_queue and buffer must be created with the same OpenCL context.
        /// </param>
        /// <param name="buffer"> 
        /// Refers to a valid buffer object.
        /// </param>
        /// <param name="blocking_write"> 
        /// Indicates if the write operations are blocking or nonblocking.  If blocking_write is True, the OpenCL implementation copies the data referred to by ptr and enqueues the write operation in the command-queue. The memory pointed to by ptr can be reused by the application after the clEnqueueWriteBuffer call returns.  If blocking_write is False, the OpenCL implementation will use ptr to perform a nonblocking write. As the write is non-blocking the implementation can return immediately. The memory pointed to by ptr cannot be reused by the application after the call returns. The event argument returns an event object which can be used to query the execution status of the write command. When the write command has completed, the memory pointed to by ptr can then be reused by the application.
        /// </param>
        /// <param name="offset"> 
        /// The offset in bytes in the buffer object to write to.
        /// </param>
        /// <param name="cb"> 
        /// The size in bytes of data being written.
        /// </param>
        /// <param name="ptr"> 
        /// The pointer to buffer in host memory where data is to be written from.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// event_wait_list and num_events_in_wait_list specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points.  The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// event_wait_list and num_events_in_wait_list specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points.  The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event"> 
        /// Returns an event object that identifies this particular write command and can be used to query or queue a wait for this particular command to complete. event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clEnqueueWriteBuffer")]
        [CLSCompliant(false)]
        public static ErrorCode EnqueueWriteBuffer(CommandQueue command_queue, ComputeMemory buffer, bool blocking_write, IntPtr offset, IntPtr cb, IntPtr ptr, Int32 num_events_in_wait_list, ref ComputeEvent event_wait_list, [OutAttribute] out ComputeEvent @event) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Enqueue commands to write to a buffer object from host memory.
        /// </summary>
        /// <param name="command_queue"> 
        /// Refers to the command-queue in which the write command will be queued. command_queue and buffer must be created with the same OpenCL context.
        /// </param>
        /// <param name="buffer"> 
        /// Refers to a valid buffer object.
        /// </param>
        /// <param name="blocking_write"> 
        /// Indicates if the write operations are blocking or nonblocking.  If blocking_write is True, the OpenCL implementation copies the data referred to by ptr and enqueues the write operation in the command-queue. The memory pointed to by ptr can be reused by the application after the clEnqueueWriteBuffer call returns.  If blocking_write is False, the OpenCL implementation will use ptr to perform a nonblocking write. As the write is non-blocking the implementation can return immediately. The memory pointed to by ptr cannot be reused by the application after the call returns. The event argument returns an event object which can be used to query the execution status of the write command. When the write command has completed, the memory pointed to by ptr can then be reused by the application.
        /// </param>
        /// <param name="offset"> 
        /// The offset in bytes in the buffer object to write to.
        /// </param>
        /// <param name="cb"> 
        /// The size in bytes of data being written.
        /// </param>
        /// <param name="ptr"> 
        /// The pointer to buffer in host memory where data is to be written from.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// event_wait_list and num_events_in_wait_list specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points.  The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// event_wait_list and num_events_in_wait_list specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points.  The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event"> 
        /// Returns an event object that identifies this particular write command and can be used to query or queue a wait for this particular command to complete. event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clEnqueueWriteBuffer")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode EnqueueWriteBuffer(CommandQueue command_queue, ComputeMemory buffer, bool blocking_write, IntPtr offset, IntPtr cb, IntPtr ptr, Int32 num_events_in_wait_list, ComputeEvent* event_wait_list, [OutAttribute] ComputeEvent* @event) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Enqueue commands to write to a buffer object from host memory.
        /// </summary>
        /// <param name="command_queue"> 
        /// Refers to the command-queue in which the write command will be queued. command_queue and buffer must be created with the same OpenCL context.
        /// </param>
        /// <param name="buffer"> 
        /// Refers to a valid buffer object.
        /// </param>
        /// <param name="blocking_write"> 
        /// Indicates if the write operations are blocking or nonblocking.  If blocking_write is True, the OpenCL implementation copies the data referred to by ptr and enqueues the write operation in the command-queue. The memory pointed to by ptr can be reused by the application after the clEnqueueWriteBuffer call returns.  If blocking_write is False, the OpenCL implementation will use ptr to perform a nonblocking write. As the write is non-blocking the implementation can return immediately. The memory pointed to by ptr cannot be reused by the application after the call returns. The event argument returns an event object which can be used to query the execution status of the write command. When the write command has completed, the memory pointed to by ptr can then be reused by the application.
        /// </param>
        /// <param name="offset"> 
        /// The offset in bytes in the buffer object to write to.
        /// </param>
        /// <param name="cb"> 
        /// The size in bytes of data being written.
        /// </param>
        /// <param name="ptr"> 
        /// The pointer to buffer in host memory where data is to be written from.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// event_wait_list and num_events_in_wait_list specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points.  The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// event_wait_list and num_events_in_wait_list specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points.  The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event"> 
        /// Returns an event object that identifies this particular write command and can be used to query or queue a wait for this particular command to complete. event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clEnqueueWriteBuffer")]
        [CLSCompliant(false)]
        public static ErrorCode EnqueueWriteBuffer<T5>(CommandQueue command_queue, ComputeMemory buffer, bool blocking_write, IntPtr offset, IntPtr cb, [InAttribute, OutAttribute] T5[] ptr, Int32 num_events_in_wait_list, ComputeEvent[] event_wait_list, [OutAttribute] out ComputeEvent @event)
            where T5 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Enqueue commands to write to a buffer object from host memory.
        /// </summary>
        /// <param name="command_queue"> 
        /// Refers to the command-queue in which the write command will be queued. command_queue and buffer must be created with the same OpenCL context.
        /// </param>
        /// <param name="buffer"> 
        /// Refers to a valid buffer object.
        /// </param>
        /// <param name="blocking_write"> 
        /// Indicates if the write operations are blocking or nonblocking.  If blocking_write is True, the OpenCL implementation copies the data referred to by ptr and enqueues the write operation in the command-queue. The memory pointed to by ptr can be reused by the application after the clEnqueueWriteBuffer call returns.  If blocking_write is False, the OpenCL implementation will use ptr to perform a nonblocking write. As the write is non-blocking the implementation can return immediately. The memory pointed to by ptr cannot be reused by the application after the call returns. The event argument returns an event object which can be used to query the execution status of the write command. When the write command has completed, the memory pointed to by ptr can then be reused by the application.
        /// </param>
        /// <param name="offset"> 
        /// The offset in bytes in the buffer object to write to.
        /// </param>
        /// <param name="cb"> 
        /// The size in bytes of data being written.
        /// </param>
        /// <param name="ptr"> 
        /// The pointer to buffer in host memory where data is to be written from.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// event_wait_list and num_events_in_wait_list specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points.  The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// event_wait_list and num_events_in_wait_list specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points.  The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event"> 
        /// Returns an event object that identifies this particular write command and can be used to query or queue a wait for this particular command to complete. event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clEnqueueWriteBuffer")]
        [CLSCompliant(false)]
        public static ErrorCode EnqueueWriteBuffer<T5>(CommandQueue command_queue, ComputeMemory buffer, bool blocking_write, IntPtr offset, IntPtr cb, [InAttribute, OutAttribute] T5[] ptr, Int32 num_events_in_wait_list, ref ComputeEvent event_wait_list, [OutAttribute] out ComputeEvent @event)
            where T5 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Enqueue commands to write to a buffer object from host memory.
        /// </summary>
        /// <param name="command_queue"> 
        /// Refers to the command-queue in which the write command will be queued. command_queue and buffer must be created with the same OpenCL context.
        /// </param>
        /// <param name="buffer"> 
        /// Refers to a valid buffer object.
        /// </param>
        /// <param name="blocking_write"> 
        /// Indicates if the write operations are blocking or nonblocking.  If blocking_write is True, the OpenCL implementation copies the data referred to by ptr and enqueues the write operation in the command-queue. The memory pointed to by ptr can be reused by the application after the clEnqueueWriteBuffer call returns.  If blocking_write is False, the OpenCL implementation will use ptr to perform a nonblocking write. As the write is non-blocking the implementation can return immediately. The memory pointed to by ptr cannot be reused by the application after the call returns. The event argument returns an event object which can be used to query the execution status of the write command. When the write command has completed, the memory pointed to by ptr can then be reused by the application.
        /// </param>
        /// <param name="offset"> 
        /// The offset in bytes in the buffer object to write to.
        /// </param>
        /// <param name="cb"> 
        /// The size in bytes of data being written.
        /// </param>
        /// <param name="ptr"> 
        /// The pointer to buffer in host memory where data is to be written from.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// event_wait_list and num_events_in_wait_list specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points.  The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// event_wait_list and num_events_in_wait_list specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points.  The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event"> 
        /// Returns an event object that identifies this particular write command and can be used to query or queue a wait for this particular command to complete. event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clEnqueueWriteBuffer")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode EnqueueWriteBuffer<T5>(CommandQueue command_queue, ComputeMemory buffer, bool blocking_write, IntPtr offset, IntPtr cb, [InAttribute, OutAttribute] T5[] ptr, Int32 num_events_in_wait_list, ComputeEvent* event_wait_list, [OutAttribute] ComputeEvent* @event)
            where T5 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Enqueue commands to write to a buffer object from host memory.
        /// </summary>
        /// <param name="command_queue"> 
        /// Refers to the command-queue in which the write command will be queued. command_queue and buffer must be created with the same OpenCL context.
        /// </param>
        /// <param name="buffer"> 
        /// Refers to a valid buffer object.
        /// </param>
        /// <param name="blocking_write"> 
        /// Indicates if the write operations are blocking or nonblocking.  If blocking_write is True, the OpenCL implementation copies the data referred to by ptr and enqueues the write operation in the command-queue. The memory pointed to by ptr can be reused by the application after the clEnqueueWriteBuffer call returns.  If blocking_write is False, the OpenCL implementation will use ptr to perform a nonblocking write. As the write is non-blocking the implementation can return immediately. The memory pointed to by ptr cannot be reused by the application after the call returns. The event argument returns an event object which can be used to query the execution status of the write command. When the write command has completed, the memory pointed to by ptr can then be reused by the application.
        /// </param>
        /// <param name="offset"> 
        /// The offset in bytes in the buffer object to write to.
        /// </param>
        /// <param name="cb"> 
        /// The size in bytes of data being written.
        /// </param>
        /// <param name="ptr"> 
        /// The pointer to buffer in host memory where data is to be written from.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// event_wait_list and num_events_in_wait_list specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points.  The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// event_wait_list and num_events_in_wait_list specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points.  The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event"> 
        /// Returns an event object that identifies this particular write command and can be used to query or queue a wait for this particular command to complete. event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clEnqueueWriteBuffer")]
        [CLSCompliant(false)]
        public static ErrorCode EnqueueWriteBuffer<T5>(CommandQueue command_queue, ComputeMemory buffer, bool blocking_write, IntPtr offset, IntPtr cb, [InAttribute, OutAttribute] T5[,] ptr, Int32 num_events_in_wait_list, ComputeEvent[] event_wait_list, [OutAttribute] out ComputeEvent @event)
            where T5 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Enqueue commands to write to a buffer object from host memory.
        /// </summary>
        /// <param name="command_queue"> 
        /// Refers to the command-queue in which the write command will be queued. command_queue and buffer must be created with the same OpenCL context.
        /// </param>
        /// <param name="buffer"> 
        /// Refers to a valid buffer object.
        /// </param>
        /// <param name="blocking_write"> 
        /// Indicates if the write operations are blocking or nonblocking.  If blocking_write is True, the OpenCL implementation copies the data referred to by ptr and enqueues the write operation in the command-queue. The memory pointed to by ptr can be reused by the application after the clEnqueueWriteBuffer call returns.  If blocking_write is False, the OpenCL implementation will use ptr to perform a nonblocking write. As the write is non-blocking the implementation can return immediately. The memory pointed to by ptr cannot be reused by the application after the call returns. The event argument returns an event object which can be used to query the execution status of the write command. When the write command has completed, the memory pointed to by ptr can then be reused by the application.
        /// </param>
        /// <param name="offset"> 
        /// The offset in bytes in the buffer object to write to.
        /// </param>
        /// <param name="cb"> 
        /// The size in bytes of data being written.
        /// </param>
        /// <param name="ptr"> 
        /// The pointer to buffer in host memory where data is to be written from.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// event_wait_list and num_events_in_wait_list specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points.  The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// event_wait_list and num_events_in_wait_list specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points.  The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event"> 
        /// Returns an event object that identifies this particular write command and can be used to query or queue a wait for this particular command to complete. event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clEnqueueWriteBuffer")]
        [CLSCompliant(false)]
        public static ErrorCode EnqueueWriteBuffer<T5>(CommandQueue command_queue, ComputeMemory buffer, bool blocking_write, IntPtr offset, IntPtr cb, [InAttribute, OutAttribute] T5[,] ptr, Int32 num_events_in_wait_list, ref ComputeEvent event_wait_list, [OutAttribute] out ComputeEvent @event)
            where T5 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Enqueue commands to write to a buffer object from host memory.
        /// </summary>
        /// <param name="command_queue"> 
        /// Refers to the command-queue in which the write command will be queued. command_queue and buffer must be created with the same OpenCL context.
        /// </param>
        /// <param name="buffer"> 
        /// Refers to a valid buffer object.
        /// </param>
        /// <param name="blocking_write"> 
        /// Indicates if the write operations are blocking or nonblocking.  If blocking_write is True, the OpenCL implementation copies the data referred to by ptr and enqueues the write operation in the command-queue. The memory pointed to by ptr can be reused by the application after the clEnqueueWriteBuffer call returns.  If blocking_write is False, the OpenCL implementation will use ptr to perform a nonblocking write. As the write is non-blocking the implementation can return immediately. The memory pointed to by ptr cannot be reused by the application after the call returns. The event argument returns an event object which can be used to query the execution status of the write command. When the write command has completed, the memory pointed to by ptr can then be reused by the application.
        /// </param>
        /// <param name="offset"> 
        /// The offset in bytes in the buffer object to write to.
        /// </param>
        /// <param name="cb"> 
        /// The size in bytes of data being written.
        /// </param>
        /// <param name="ptr"> 
        /// The pointer to buffer in host memory where data is to be written from.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// event_wait_list and num_events_in_wait_list specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points.  The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// event_wait_list and num_events_in_wait_list specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points.  The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event"> 
        /// Returns an event object that identifies this particular write command and can be used to query or queue a wait for this particular command to complete. event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clEnqueueWriteBuffer")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode EnqueueWriteBuffer<T5>(CommandQueue command_queue, ComputeMemory buffer, bool blocking_write, IntPtr offset, IntPtr cb, [InAttribute, OutAttribute] T5[,] ptr, Int32 num_events_in_wait_list, ComputeEvent* event_wait_list, [OutAttribute] ComputeEvent* @event)
            where T5 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Enqueue commands to write to a buffer object from host memory.
        /// </summary>
        /// <param name="command_queue"> 
        /// Refers to the command-queue in which the write command will be queued. command_queue and buffer must be created with the same OpenCL context.
        /// </param>
        /// <param name="buffer"> 
        /// Refers to a valid buffer object.
        /// </param>
        /// <param name="blocking_write"> 
        /// Indicates if the write operations are blocking or nonblocking.  If blocking_write is True, the OpenCL implementation copies the data referred to by ptr and enqueues the write operation in the command-queue. The memory pointed to by ptr can be reused by the application after the clEnqueueWriteBuffer call returns.  If blocking_write is False, the OpenCL implementation will use ptr to perform a nonblocking write. As the write is non-blocking the implementation can return immediately. The memory pointed to by ptr cannot be reused by the application after the call returns. The event argument returns an event object which can be used to query the execution status of the write command. When the write command has completed, the memory pointed to by ptr can then be reused by the application.
        /// </param>
        /// <param name="offset"> 
        /// The offset in bytes in the buffer object to write to.
        /// </param>
        /// <param name="cb"> 
        /// The size in bytes of data being written.
        /// </param>
        /// <param name="ptr"> 
        /// The pointer to buffer in host memory where data is to be written from.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// event_wait_list and num_events_in_wait_list specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points.  The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// event_wait_list and num_events_in_wait_list specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points.  The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event"> 
        /// Returns an event object that identifies this particular write command and can be used to query or queue a wait for this particular command to complete. event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clEnqueueWriteBuffer")]
        [CLSCompliant(false)]
        public static ErrorCode EnqueueWriteBuffer<T5>(CommandQueue command_queue, ComputeMemory buffer, bool blocking_write, IntPtr offset, IntPtr cb, [InAttribute, OutAttribute] T5[,,] ptr, Int32 num_events_in_wait_list, ComputeEvent[] event_wait_list, [OutAttribute] out ComputeEvent @event)
            where T5 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Enqueue commands to write to a buffer object from host memory.
        /// </summary>
        /// <param name="command_queue"> 
        /// Refers to the command-queue in which the write command will be queued. command_queue and buffer must be created with the same OpenCL context.
        /// </param>
        /// <param name="buffer"> 
        /// Refers to a valid buffer object.
        /// </param>
        /// <param name="blocking_write"> 
        /// Indicates if the write operations are blocking or nonblocking.  If blocking_write is True, the OpenCL implementation copies the data referred to by ptr and enqueues the write operation in the command-queue. The memory pointed to by ptr can be reused by the application after the clEnqueueWriteBuffer call returns.  If blocking_write is False, the OpenCL implementation will use ptr to perform a nonblocking write. As the write is non-blocking the implementation can return immediately. The memory pointed to by ptr cannot be reused by the application after the call returns. The event argument returns an event object which can be used to query the execution status of the write command. When the write command has completed, the memory pointed to by ptr can then be reused by the application.
        /// </param>
        /// <param name="offset"> 
        /// The offset in bytes in the buffer object to write to.
        /// </param>
        /// <param name="cb"> 
        /// The size in bytes of data being written.
        /// </param>
        /// <param name="ptr"> 
        /// The pointer to buffer in host memory where data is to be written from.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// event_wait_list and num_events_in_wait_list specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points.  The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// event_wait_list and num_events_in_wait_list specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points.  The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event"> 
        /// Returns an event object that identifies this particular write command and can be used to query or queue a wait for this particular command to complete. event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clEnqueueWriteBuffer")]
        [CLSCompliant(false)]
        public static ErrorCode EnqueueWriteBuffer<T5>(CommandQueue command_queue, ComputeMemory buffer, bool blocking_write, IntPtr offset, IntPtr cb, [InAttribute, OutAttribute] T5[,,] ptr, Int32 num_events_in_wait_list, ref ComputeEvent event_wait_list, [OutAttribute] out ComputeEvent @event)
            where T5 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Enqueue commands to write to a buffer object from host memory.
        /// </summary>
        /// <param name="command_queue"> 
        /// Refers to the command-queue in which the write command will be queued. command_queue and buffer must be created with the same OpenCL context.
        /// </param>
        /// <param name="buffer"> 
        /// Refers to a valid buffer object.
        /// </param>
        /// <param name="blocking_write"> 
        /// Indicates if the write operations are blocking or nonblocking.  If blocking_write is True, the OpenCL implementation copies the data referred to by ptr and enqueues the write operation in the command-queue. The memory pointed to by ptr can be reused by the application after the clEnqueueWriteBuffer call returns.  If blocking_write is False, the OpenCL implementation will use ptr to perform a nonblocking write. As the write is non-blocking the implementation can return immediately. The memory pointed to by ptr cannot be reused by the application after the call returns. The event argument returns an event object which can be used to query the execution status of the write command. When the write command has completed, the memory pointed to by ptr can then be reused by the application.
        /// </param>
        /// <param name="offset"> 
        /// The offset in bytes in the buffer object to write to.
        /// </param>
        /// <param name="cb"> 
        /// The size in bytes of data being written.
        /// </param>
        /// <param name="ptr"> 
        /// The pointer to buffer in host memory where data is to be written from.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// event_wait_list and num_events_in_wait_list specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points.  The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// event_wait_list and num_events_in_wait_list specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points.  The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event"> 
        /// Returns an event object that identifies this particular write command and can be used to query or queue a wait for this particular command to complete. event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clEnqueueWriteBuffer")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode EnqueueWriteBuffer<T5>(CommandQueue command_queue, ComputeMemory buffer, bool blocking_write, IntPtr offset, IntPtr cb, [InAttribute, OutAttribute] T5[,,] ptr, Int32 num_events_in_wait_list, ComputeEvent* event_wait_list, [OutAttribute] ComputeEvent* @event)
            where T5 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Enqueue commands to write to a buffer object from host memory.
        /// </summary>
        /// <param name="command_queue"> 
        /// Refers to the command-queue in which the write command will be queued. command_queue and buffer must be created with the same OpenCL context.
        /// </param>
        /// <param name="buffer"> 
        /// Refers to a valid buffer object.
        /// </param>
        /// <param name="blocking_write"> 
        /// Indicates if the write operations are blocking or nonblocking.  If blocking_write is True, the OpenCL implementation copies the data referred to by ptr and enqueues the write operation in the command-queue. The memory pointed to by ptr can be reused by the application after the clEnqueueWriteBuffer call returns.  If blocking_write is False, the OpenCL implementation will use ptr to perform a nonblocking write. As the write is non-blocking the implementation can return immediately. The memory pointed to by ptr cannot be reused by the application after the call returns. The event argument returns an event object which can be used to query the execution status of the write command. When the write command has completed, the memory pointed to by ptr can then be reused by the application.
        /// </param>
        /// <param name="offset"> 
        /// The offset in bytes in the buffer object to write to.
        /// </param>
        /// <param name="cb"> 
        /// The size in bytes of data being written.
        /// </param>
        /// <param name="ptr"> 
        /// The pointer to buffer in host memory where data is to be written from.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// event_wait_list and num_events_in_wait_list specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points.  The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// event_wait_list and num_events_in_wait_list specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points.  The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event"> 
        /// Returns an event object that identifies this particular write command and can be used to query or queue a wait for this particular command to complete. event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clEnqueueWriteBuffer")]
        [CLSCompliant(false)]
        public static ErrorCode EnqueueWriteBuffer<T5>(CommandQueue command_queue, ComputeMemory buffer, bool blocking_write, IntPtr offset, IntPtr cb, [InAttribute, OutAttribute] ref T5 ptr, Int32 num_events_in_wait_list, ComputeEvent[] event_wait_list, [OutAttribute] out ComputeEvent @event)
            where T5 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Enqueue commands to write to a buffer object from host memory.
        /// </summary>
        /// <param name="command_queue"> 
        /// Refers to the command-queue in which the write command will be queued. command_queue and buffer must be created with the same OpenCL context.
        /// </param>
        /// <param name="buffer"> 
        /// Refers to a valid buffer object.
        /// </param>
        /// <param name="blocking_write"> 
        /// Indicates if the write operations are blocking or nonblocking.  If blocking_write is True, the OpenCL implementation copies the data referred to by ptr and enqueues the write operation in the command-queue. The memory pointed to by ptr can be reused by the application after the clEnqueueWriteBuffer call returns.  If blocking_write is False, the OpenCL implementation will use ptr to perform a nonblocking write. As the write is non-blocking the implementation can return immediately. The memory pointed to by ptr cannot be reused by the application after the call returns. The event argument returns an event object which can be used to query the execution status of the write command. When the write command has completed, the memory pointed to by ptr can then be reused by the application.
        /// </param>
        /// <param name="offset"> 
        /// The offset in bytes in the buffer object to write to.
        /// </param>
        /// <param name="cb"> 
        /// The size in bytes of data being written.
        /// </param>
        /// <param name="ptr"> 
        /// The pointer to buffer in host memory where data is to be written from.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// event_wait_list and num_events_in_wait_list specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points.  The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// event_wait_list and num_events_in_wait_list specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points.  The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event"> 
        /// Returns an event object that identifies this particular write command and can be used to query or queue a wait for this particular command to complete. event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clEnqueueWriteBuffer")]
        [CLSCompliant(false)]
        public static ErrorCode EnqueueWriteBuffer<T5>(CommandQueue command_queue, ComputeMemory buffer, bool blocking_write, IntPtr offset, IntPtr cb, [InAttribute, OutAttribute] ref T5 ptr, Int32 num_events_in_wait_list, ref ComputeEvent event_wait_list, [OutAttribute] out ComputeEvent @event)
            where T5 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Enqueue commands to write to a buffer object from host memory.
        /// </summary>
        /// <param name="command_queue"> 
        /// Refers to the command-queue in which the write command will be queued. command_queue and buffer must be created with the same OpenCL context.
        /// </param>
        /// <param name="buffer"> 
        /// Refers to a valid buffer object.
        /// </param>
        /// <param name="blocking_write"> 
        /// Indicates if the write operations are blocking or nonblocking.  If blocking_write is True, the OpenCL implementation copies the data referred to by ptr and enqueues the write operation in the command-queue. The memory pointed to by ptr can be reused by the application after the clEnqueueWriteBuffer call returns.  If blocking_write is False, the OpenCL implementation will use ptr to perform a nonblocking write. As the write is non-blocking the implementation can return immediately. The memory pointed to by ptr cannot be reused by the application after the call returns. The event argument returns an event object which can be used to query the execution status of the write command. When the write command has completed, the memory pointed to by ptr can then be reused by the application.
        /// </param>
        /// <param name="offset"> 
        /// The offset in bytes in the buffer object to write to.
        /// </param>
        /// <param name="cb"> 
        /// The size in bytes of data being written.
        /// </param>
        /// <param name="ptr"> 
        /// The pointer to buffer in host memory where data is to be written from.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// event_wait_list and num_events_in_wait_list specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points.  The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// event_wait_list and num_events_in_wait_list specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points.  The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event"> 
        /// Returns an event object that identifies this particular write command and can be used to query or queue a wait for this particular command to complete. event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clEnqueueWriteBuffer")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode EnqueueWriteBuffer<T5>(CommandQueue command_queue, ComputeMemory buffer, bool blocking_write, IntPtr offset, IntPtr cb, [InAttribute, OutAttribute] ref T5 ptr, Int32 num_events_in_wait_list, ComputeEvent* event_wait_list, [OutAttribute] ComputeEvent* @event)
            where T5 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.1]
        /// Enqueue commands to write a 2D or 3D rectangular region to a buffer object from host memory.
        /// </summary>
        /// <param name="command_queue"> 
        /// Refers to the command-queue in which the write command will be queued. command_queue and buffer must be created with the same OpenCL context.
        /// </param>
        /// <param name="buffer"> 
        /// Refers to a valid buffer object.
        /// </param>
        /// <param name="blocking_write"> 
        /// Indicates if the write operations are blocking or non-blocking.  If blocking_write is True, the OpenCL implementation copies the data referred to by ptr and enqueues the write operation in the command-queue. The memory pointed to by ptr can be reused by the application after the clEnqueueWriteBufferRect call returns.  If blocking_write is False, the OpenCL implementation will use ptr to perform a nonblocking write. As the write is non-blocking the implementation can return immediately.  The memory pointed to by ptr cannot be reused by the application after the call returns. The event argument returns an event object which can be used to query the execution status of the write command. When the write command has completed, the memory pointed to by ptr can then be reused by the application.
        /// </param>
        /// <param name="buffer_offset">[length: 3] 
        /// The (x, y, z) offset in the memory region associated with buffer. For a 2D rectangle region, the z value given by buffer_origin[2] should be 0. The offset in bytes is computed as buffer_origin[2] * buffer_slice_pitch + buffer_origin[1] * buffer_row_pitch + buffer_origin[0].
        /// </param>
        /// <param name="host_offset">[length: 3] 
        /// The (x, y, z) offset in the memory region pointed to by ptr. For a 2D rectangle region, the z value given by host_origin[2] should be 0. The offset in bytes is computed as host_origin[2] * host_slice_pitch + host_origin[1] * host_row_pitch + host_origin[0].
        /// </param>
        /// <param name="region">[length: 3] 
        /// The (width, height, depth) in bytes of the 2D or 3D rectangle being read or written. For a 2D rectangle copy, the depth value given by region[2] should be 1.
        /// </param>
        /// <param name="buffer_row_pitch"> 
        /// The length of each row in bytes to be used for the memory region associated with buffer. If buffer_row_pitch is 0, buffer_row_pitch is computed as region[0].
        /// </param>
        /// <param name="buffer_slice_pitch"> 
        /// The length of each 2D slice in bytes to be used for the memory region associated with buffer. If buffer_slice_pitch is 0, buffer_slice_pitch is computed as region[1] * buffer_row_pitch.
        /// </param>
        /// <param name="host_row_pitch"> 
        /// The length of each row in bytes to be used for the memory region pointed to by ptr. If host_row_pitch is 0, host_row_pitch is computed as region[0].
        /// </param>
        /// <param name="host_slice_pitch"> 
        /// The length of each 2D slice in bytes to be used for the memory region pointed to by ptr. If host_slice_pitch is 0, host_slice_pitch is computed as region[1] * host_row_pitch.
        /// </param>
        /// <param name="ptr"> 
        /// The pointer to buffer in host memory where data is to be written from.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// event_wait_list and num_events_in_wait_list specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// event_wait_list and num_events_in_wait_list specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event"> 
        /// Returns an event object that identifies this particular write command and can be used to query or queue a wait for this particular command to complete. event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete.
        /// </param>
        [AutoGenerated(Category = "", Version = "1.1", EntryPoint = "clEnqueueWriteBufferRect")]
        [CLSCompliant(false)]
        public static ErrorCode EnqueueWriteBufferRect(CommandQueue command_queue, ComputeMemory buffer, bool blocking_write, IntPtr[] buffer_offset, IntPtr[] host_offset, IntPtr[] region, IntPtr buffer_row_pitch, IntPtr buffer_slice_pitch, IntPtr host_row_pitch, IntPtr host_slice_pitch, IntPtr ptr, Int32 num_events_in_wait_list, ComputeEvent[] event_wait_list, [OutAttribute] out ComputeEvent @event) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.1]
        /// Enqueue commands to write a 2D or 3D rectangular region to a buffer object from host memory.
        /// </summary>
        /// <param name="command_queue"> 
        /// Refers to the command-queue in which the write command will be queued. command_queue and buffer must be created with the same OpenCL context.
        /// </param>
        /// <param name="buffer"> 
        /// Refers to a valid buffer object.
        /// </param>
        /// <param name="blocking_write"> 
        /// Indicates if the write operations are blocking or non-blocking.  If blocking_write is True, the OpenCL implementation copies the data referred to by ptr and enqueues the write operation in the command-queue. The memory pointed to by ptr can be reused by the application after the clEnqueueWriteBufferRect call returns.  If blocking_write is False, the OpenCL implementation will use ptr to perform a nonblocking write. As the write is non-blocking the implementation can return immediately.  The memory pointed to by ptr cannot be reused by the application after the call returns. The event argument returns an event object which can be used to query the execution status of the write command. When the write command has completed, the memory pointed to by ptr can then be reused by the application.
        /// </param>
        /// <param name="buffer_offset">[length: 3] 
        /// The (x, y, z) offset in the memory region associated with buffer. For a 2D rectangle region, the z value given by buffer_origin[2] should be 0. The offset in bytes is computed as buffer_origin[2] * buffer_slice_pitch + buffer_origin[1] * buffer_row_pitch + buffer_origin[0].
        /// </param>
        /// <param name="host_offset">[length: 3] 
        /// The (x, y, z) offset in the memory region pointed to by ptr. For a 2D rectangle region, the z value given by host_origin[2] should be 0. The offset in bytes is computed as host_origin[2] * host_slice_pitch + host_origin[1] * host_row_pitch + host_origin[0].
        /// </param>
        /// <param name="region">[length: 3] 
        /// The (width, height, depth) in bytes of the 2D or 3D rectangle being read or written. For a 2D rectangle copy, the depth value given by region[2] should be 1.
        /// </param>
        /// <param name="buffer_row_pitch"> 
        /// The length of each row in bytes to be used for the memory region associated with buffer. If buffer_row_pitch is 0, buffer_row_pitch is computed as region[0].
        /// </param>
        /// <param name="buffer_slice_pitch"> 
        /// The length of each 2D slice in bytes to be used for the memory region associated with buffer. If buffer_slice_pitch is 0, buffer_slice_pitch is computed as region[1] * buffer_row_pitch.
        /// </param>
        /// <param name="host_row_pitch"> 
        /// The length of each row in bytes to be used for the memory region pointed to by ptr. If host_row_pitch is 0, host_row_pitch is computed as region[0].
        /// </param>
        /// <param name="host_slice_pitch"> 
        /// The length of each 2D slice in bytes to be used for the memory region pointed to by ptr. If host_slice_pitch is 0, host_slice_pitch is computed as region[1] * host_row_pitch.
        /// </param>
        /// <param name="ptr"> 
        /// The pointer to buffer in host memory where data is to be written from.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// event_wait_list and num_events_in_wait_list specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// event_wait_list and num_events_in_wait_list specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event"> 
        /// Returns an event object that identifies this particular write command and can be used to query or queue a wait for this particular command to complete. event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete.
        /// </param>
        [AutoGenerated(Category = "", Version = "1.1", EntryPoint = "clEnqueueWriteBufferRect")]
        [CLSCompliant(false)]
        public static ErrorCode EnqueueWriteBufferRect<T10>(CommandQueue command_queue, ComputeMemory buffer, bool blocking_write, IntPtr[] buffer_offset, IntPtr[] host_offset, IntPtr[] region, IntPtr buffer_row_pitch, IntPtr buffer_slice_pitch, IntPtr host_row_pitch, IntPtr host_slice_pitch, [InAttribute, OutAttribute] T10[] ptr, Int32 num_events_in_wait_list, ComputeEvent[] event_wait_list, [OutAttribute] out ComputeEvent @event)
            where T10 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.1]
        /// Enqueue commands to write a 2D or 3D rectangular region to a buffer object from host memory.
        /// </summary>
        /// <param name="command_queue"> 
        /// Refers to the command-queue in which the write command will be queued. command_queue and buffer must be created with the same OpenCL context.
        /// </param>
        /// <param name="buffer"> 
        /// Refers to a valid buffer object.
        /// </param>
        /// <param name="blocking_write"> 
        /// Indicates if the write operations are blocking or non-blocking.  If blocking_write is True, the OpenCL implementation copies the data referred to by ptr and enqueues the write operation in the command-queue. The memory pointed to by ptr can be reused by the application after the clEnqueueWriteBufferRect call returns.  If blocking_write is False, the OpenCL implementation will use ptr to perform a nonblocking write. As the write is non-blocking the implementation can return immediately.  The memory pointed to by ptr cannot be reused by the application after the call returns. The event argument returns an event object which can be used to query the execution status of the write command. When the write command has completed, the memory pointed to by ptr can then be reused by the application.
        /// </param>
        /// <param name="buffer_offset">[length: 3] 
        /// The (x, y, z) offset in the memory region associated with buffer. For a 2D rectangle region, the z value given by buffer_origin[2] should be 0. The offset in bytes is computed as buffer_origin[2] * buffer_slice_pitch + buffer_origin[1] * buffer_row_pitch + buffer_origin[0].
        /// </param>
        /// <param name="host_offset">[length: 3] 
        /// The (x, y, z) offset in the memory region pointed to by ptr. For a 2D rectangle region, the z value given by host_origin[2] should be 0. The offset in bytes is computed as host_origin[2] * host_slice_pitch + host_origin[1] * host_row_pitch + host_origin[0].
        /// </param>
        /// <param name="region">[length: 3] 
        /// The (width, height, depth) in bytes of the 2D or 3D rectangle being read or written. For a 2D rectangle copy, the depth value given by region[2] should be 1.
        /// </param>
        /// <param name="buffer_row_pitch"> 
        /// The length of each row in bytes to be used for the memory region associated with buffer. If buffer_row_pitch is 0, buffer_row_pitch is computed as region[0].
        /// </param>
        /// <param name="buffer_slice_pitch"> 
        /// The length of each 2D slice in bytes to be used for the memory region associated with buffer. If buffer_slice_pitch is 0, buffer_slice_pitch is computed as region[1] * buffer_row_pitch.
        /// </param>
        /// <param name="host_row_pitch"> 
        /// The length of each row in bytes to be used for the memory region pointed to by ptr. If host_row_pitch is 0, host_row_pitch is computed as region[0].
        /// </param>
        /// <param name="host_slice_pitch"> 
        /// The length of each 2D slice in bytes to be used for the memory region pointed to by ptr. If host_slice_pitch is 0, host_slice_pitch is computed as region[1] * host_row_pitch.
        /// </param>
        /// <param name="ptr"> 
        /// The pointer to buffer in host memory where data is to be written from.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// event_wait_list and num_events_in_wait_list specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// event_wait_list and num_events_in_wait_list specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event"> 
        /// Returns an event object that identifies this particular write command and can be used to query or queue a wait for this particular command to complete. event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete.
        /// </param>
        [AutoGenerated(Category = "", Version = "1.1", EntryPoint = "clEnqueueWriteBufferRect")]
        [CLSCompliant(false)]
        public static ErrorCode EnqueueWriteBufferRect<T10>(CommandQueue command_queue, ComputeMemory buffer, bool blocking_write, IntPtr[] buffer_offset, IntPtr[] host_offset, IntPtr[] region, IntPtr buffer_row_pitch, IntPtr buffer_slice_pitch, IntPtr host_row_pitch, IntPtr host_slice_pitch, [InAttribute, OutAttribute] T10[,] ptr, Int32 num_events_in_wait_list, ComputeEvent[] event_wait_list, [OutAttribute] out ComputeEvent @event)
            where T10 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.1]
        /// Enqueue commands to write a 2D or 3D rectangular region to a buffer object from host memory.
        /// </summary>
        /// <param name="command_queue"> 
        /// Refers to the command-queue in which the write command will be queued. command_queue and buffer must be created with the same OpenCL context.
        /// </param>
        /// <param name="buffer"> 
        /// Refers to a valid buffer object.
        /// </param>
        /// <param name="blocking_write"> 
        /// Indicates if the write operations are blocking or non-blocking.  If blocking_write is True, the OpenCL implementation copies the data referred to by ptr and enqueues the write operation in the command-queue. The memory pointed to by ptr can be reused by the application after the clEnqueueWriteBufferRect call returns.  If blocking_write is False, the OpenCL implementation will use ptr to perform a nonblocking write. As the write is non-blocking the implementation can return immediately.  The memory pointed to by ptr cannot be reused by the application after the call returns. The event argument returns an event object which can be used to query the execution status of the write command. When the write command has completed, the memory pointed to by ptr can then be reused by the application.
        /// </param>
        /// <param name="buffer_offset">[length: 3] 
        /// The (x, y, z) offset in the memory region associated with buffer. For a 2D rectangle region, the z value given by buffer_origin[2] should be 0. The offset in bytes is computed as buffer_origin[2] * buffer_slice_pitch + buffer_origin[1] * buffer_row_pitch + buffer_origin[0].
        /// </param>
        /// <param name="host_offset">[length: 3] 
        /// The (x, y, z) offset in the memory region pointed to by ptr. For a 2D rectangle region, the z value given by host_origin[2] should be 0. The offset in bytes is computed as host_origin[2] * host_slice_pitch + host_origin[1] * host_row_pitch + host_origin[0].
        /// </param>
        /// <param name="region">[length: 3] 
        /// The (width, height, depth) in bytes of the 2D or 3D rectangle being read or written. For a 2D rectangle copy, the depth value given by region[2] should be 1.
        /// </param>
        /// <param name="buffer_row_pitch"> 
        /// The length of each row in bytes to be used for the memory region associated with buffer. If buffer_row_pitch is 0, buffer_row_pitch is computed as region[0].
        /// </param>
        /// <param name="buffer_slice_pitch"> 
        /// The length of each 2D slice in bytes to be used for the memory region associated with buffer. If buffer_slice_pitch is 0, buffer_slice_pitch is computed as region[1] * buffer_row_pitch.
        /// </param>
        /// <param name="host_row_pitch"> 
        /// The length of each row in bytes to be used for the memory region pointed to by ptr. If host_row_pitch is 0, host_row_pitch is computed as region[0].
        /// </param>
        /// <param name="host_slice_pitch"> 
        /// The length of each 2D slice in bytes to be used for the memory region pointed to by ptr. If host_slice_pitch is 0, host_slice_pitch is computed as region[1] * host_row_pitch.
        /// </param>
        /// <param name="ptr"> 
        /// The pointer to buffer in host memory where data is to be written from.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// event_wait_list and num_events_in_wait_list specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// event_wait_list and num_events_in_wait_list specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event"> 
        /// Returns an event object that identifies this particular write command and can be used to query or queue a wait for this particular command to complete. event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete.
        /// </param>
        [AutoGenerated(Category = "", Version = "1.1", EntryPoint = "clEnqueueWriteBufferRect")]
        [CLSCompliant(false)]
        public static ErrorCode EnqueueWriteBufferRect<T10>(CommandQueue command_queue, ComputeMemory buffer, bool blocking_write, IntPtr[] buffer_offset, IntPtr[] host_offset, IntPtr[] region, IntPtr buffer_row_pitch, IntPtr buffer_slice_pitch, IntPtr host_row_pitch, IntPtr host_slice_pitch, [InAttribute, OutAttribute] T10[,,] ptr, Int32 num_events_in_wait_list, ComputeEvent[] event_wait_list, [OutAttribute] out ComputeEvent @event)
            where T10 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.1]
        /// Enqueue commands to write a 2D or 3D rectangular region to a buffer object from host memory.
        /// </summary>
        /// <param name="command_queue"> 
        /// Refers to the command-queue in which the write command will be queued. command_queue and buffer must be created with the same OpenCL context.
        /// </param>
        /// <param name="buffer"> 
        /// Refers to a valid buffer object.
        /// </param>
        /// <param name="blocking_write"> 
        /// Indicates if the write operations are blocking or non-blocking.  If blocking_write is True, the OpenCL implementation copies the data referred to by ptr and enqueues the write operation in the command-queue. The memory pointed to by ptr can be reused by the application after the clEnqueueWriteBufferRect call returns.  If blocking_write is False, the OpenCL implementation will use ptr to perform a nonblocking write. As the write is non-blocking the implementation can return immediately.  The memory pointed to by ptr cannot be reused by the application after the call returns. The event argument returns an event object which can be used to query the execution status of the write command. When the write command has completed, the memory pointed to by ptr can then be reused by the application.
        /// </param>
        /// <param name="buffer_offset">[length: 3] 
        /// The (x, y, z) offset in the memory region associated with buffer. For a 2D rectangle region, the z value given by buffer_origin[2] should be 0. The offset in bytes is computed as buffer_origin[2] * buffer_slice_pitch + buffer_origin[1] * buffer_row_pitch + buffer_origin[0].
        /// </param>
        /// <param name="host_offset">[length: 3] 
        /// The (x, y, z) offset in the memory region pointed to by ptr. For a 2D rectangle region, the z value given by host_origin[2] should be 0. The offset in bytes is computed as host_origin[2] * host_slice_pitch + host_origin[1] * host_row_pitch + host_origin[0].
        /// </param>
        /// <param name="region">[length: 3] 
        /// The (width, height, depth) in bytes of the 2D or 3D rectangle being read or written. For a 2D rectangle copy, the depth value given by region[2] should be 1.
        /// </param>
        /// <param name="buffer_row_pitch"> 
        /// The length of each row in bytes to be used for the memory region associated with buffer. If buffer_row_pitch is 0, buffer_row_pitch is computed as region[0].
        /// </param>
        /// <param name="buffer_slice_pitch"> 
        /// The length of each 2D slice in bytes to be used for the memory region associated with buffer. If buffer_slice_pitch is 0, buffer_slice_pitch is computed as region[1] * buffer_row_pitch.
        /// </param>
        /// <param name="host_row_pitch"> 
        /// The length of each row in bytes to be used for the memory region pointed to by ptr. If host_row_pitch is 0, host_row_pitch is computed as region[0].
        /// </param>
        /// <param name="host_slice_pitch"> 
        /// The length of each 2D slice in bytes to be used for the memory region pointed to by ptr. If host_slice_pitch is 0, host_slice_pitch is computed as region[1] * host_row_pitch.
        /// </param>
        /// <param name="ptr"> 
        /// The pointer to buffer in host memory where data is to be written from.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// event_wait_list and num_events_in_wait_list specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// event_wait_list and num_events_in_wait_list specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event"> 
        /// Returns an event object that identifies this particular write command and can be used to query or queue a wait for this particular command to complete. event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete.
        /// </param>
        [AutoGenerated(Category = "", Version = "1.1", EntryPoint = "clEnqueueWriteBufferRect")]
        [CLSCompliant(false)]
        public static ErrorCode EnqueueWriteBufferRect<T10>(CommandQueue command_queue, ComputeMemory buffer, bool blocking_write, IntPtr[] buffer_offset, IntPtr[] host_offset, IntPtr[] region, IntPtr buffer_row_pitch, IntPtr buffer_slice_pitch, IntPtr host_row_pitch, IntPtr host_slice_pitch, [InAttribute, OutAttribute] ref T10 ptr, Int32 num_events_in_wait_list, ComputeEvent[] event_wait_list, [OutAttribute] out ComputeEvent @event)
            where T10 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.1]
        /// Enqueue commands to write a 2D or 3D rectangular region to a buffer object from host memory.
        /// </summary>
        /// <param name="command_queue"> 
        /// Refers to the command-queue in which the write command will be queued. command_queue and buffer must be created with the same OpenCL context.
        /// </param>
        /// <param name="buffer"> 
        /// Refers to a valid buffer object.
        /// </param>
        /// <param name="blocking_write"> 
        /// Indicates if the write operations are blocking or non-blocking.  If blocking_write is True, the OpenCL implementation copies the data referred to by ptr and enqueues the write operation in the command-queue. The memory pointed to by ptr can be reused by the application after the clEnqueueWriteBufferRect call returns.  If blocking_write is False, the OpenCL implementation will use ptr to perform a nonblocking write. As the write is non-blocking the implementation can return immediately.  The memory pointed to by ptr cannot be reused by the application after the call returns. The event argument returns an event object which can be used to query the execution status of the write command. When the write command has completed, the memory pointed to by ptr can then be reused by the application.
        /// </param>
        /// <param name="buffer_offset">[length: 3] 
        /// The (x, y, z) offset in the memory region associated with buffer. For a 2D rectangle region, the z value given by buffer_origin[2] should be 0. The offset in bytes is computed as buffer_origin[2] * buffer_slice_pitch + buffer_origin[1] * buffer_row_pitch + buffer_origin[0].
        /// </param>
        /// <param name="host_offset">[length: 3] 
        /// The (x, y, z) offset in the memory region pointed to by ptr. For a 2D rectangle region, the z value given by host_origin[2] should be 0. The offset in bytes is computed as host_origin[2] * host_slice_pitch + host_origin[1] * host_row_pitch + host_origin[0].
        /// </param>
        /// <param name="region">[length: 3] 
        /// The (width, height, depth) in bytes of the 2D or 3D rectangle being read or written. For a 2D rectangle copy, the depth value given by region[2] should be 1.
        /// </param>
        /// <param name="buffer_row_pitch"> 
        /// The length of each row in bytes to be used for the memory region associated with buffer. If buffer_row_pitch is 0, buffer_row_pitch is computed as region[0].
        /// </param>
        /// <param name="buffer_slice_pitch"> 
        /// The length of each 2D slice in bytes to be used for the memory region associated with buffer. If buffer_slice_pitch is 0, buffer_slice_pitch is computed as region[1] * buffer_row_pitch.
        /// </param>
        /// <param name="host_row_pitch"> 
        /// The length of each row in bytes to be used for the memory region pointed to by ptr. If host_row_pitch is 0, host_row_pitch is computed as region[0].
        /// </param>
        /// <param name="host_slice_pitch"> 
        /// The length of each 2D slice in bytes to be used for the memory region pointed to by ptr. If host_slice_pitch is 0, host_slice_pitch is computed as region[1] * host_row_pitch.
        /// </param>
        /// <param name="ptr"> 
        /// The pointer to buffer in host memory where data is to be written from.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// event_wait_list and num_events_in_wait_list specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// event_wait_list and num_events_in_wait_list specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event"> 
        /// Returns an event object that identifies this particular write command and can be used to query or queue a wait for this particular command to complete. event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete.
        /// </param>
        [AutoGenerated(Category = "", Version = "1.1", EntryPoint = "clEnqueueWriteBufferRect")]
        [CLSCompliant(false)]
        public static ErrorCode EnqueueWriteBufferRect(CommandQueue command_queue, ComputeMemory buffer, bool blocking_write, ref IntPtr buffer_offset, ref IntPtr host_offset, ref IntPtr region, IntPtr buffer_row_pitch, IntPtr buffer_slice_pitch, IntPtr host_row_pitch, IntPtr host_slice_pitch, IntPtr ptr, Int32 num_events_in_wait_list, ref ComputeEvent event_wait_list, [OutAttribute] out ComputeEvent @event) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.1]
        /// Enqueue commands to write a 2D or 3D rectangular region to a buffer object from host memory.
        /// </summary>
        /// <param name="command_queue"> 
        /// Refers to the command-queue in which the write command will be queued. command_queue and buffer must be created with the same OpenCL context.
        /// </param>
        /// <param name="buffer"> 
        /// Refers to a valid buffer object.
        /// </param>
        /// <param name="blocking_write"> 
        /// Indicates if the write operations are blocking or non-blocking.  If blocking_write is True, the OpenCL implementation copies the data referred to by ptr and enqueues the write operation in the command-queue. The memory pointed to by ptr can be reused by the application after the clEnqueueWriteBufferRect call returns.  If blocking_write is False, the OpenCL implementation will use ptr to perform a nonblocking write. As the write is non-blocking the implementation can return immediately.  The memory pointed to by ptr cannot be reused by the application after the call returns. The event argument returns an event object which can be used to query the execution status of the write command. When the write command has completed, the memory pointed to by ptr can then be reused by the application.
        /// </param>
        /// <param name="buffer_offset">[length: 3] 
        /// The (x, y, z) offset in the memory region associated with buffer. For a 2D rectangle region, the z value given by buffer_origin[2] should be 0. The offset in bytes is computed as buffer_origin[2] * buffer_slice_pitch + buffer_origin[1] * buffer_row_pitch + buffer_origin[0].
        /// </param>
        /// <param name="host_offset">[length: 3] 
        /// The (x, y, z) offset in the memory region pointed to by ptr. For a 2D rectangle region, the z value given by host_origin[2] should be 0. The offset in bytes is computed as host_origin[2] * host_slice_pitch + host_origin[1] * host_row_pitch + host_origin[0].
        /// </param>
        /// <param name="region">[length: 3] 
        /// The (width, height, depth) in bytes of the 2D or 3D rectangle being read or written. For a 2D rectangle copy, the depth value given by region[2] should be 1.
        /// </param>
        /// <param name="buffer_row_pitch"> 
        /// The length of each row in bytes to be used for the memory region associated with buffer. If buffer_row_pitch is 0, buffer_row_pitch is computed as region[0].
        /// </param>
        /// <param name="buffer_slice_pitch"> 
        /// The length of each 2D slice in bytes to be used for the memory region associated with buffer. If buffer_slice_pitch is 0, buffer_slice_pitch is computed as region[1] * buffer_row_pitch.
        /// </param>
        /// <param name="host_row_pitch"> 
        /// The length of each row in bytes to be used for the memory region pointed to by ptr. If host_row_pitch is 0, host_row_pitch is computed as region[0].
        /// </param>
        /// <param name="host_slice_pitch"> 
        /// The length of each 2D slice in bytes to be used for the memory region pointed to by ptr. If host_slice_pitch is 0, host_slice_pitch is computed as region[1] * host_row_pitch.
        /// </param>
        /// <param name="ptr"> 
        /// The pointer to buffer in host memory where data is to be written from.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// event_wait_list and num_events_in_wait_list specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// event_wait_list and num_events_in_wait_list specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event"> 
        /// Returns an event object that identifies this particular write command and can be used to query or queue a wait for this particular command to complete. event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete.
        /// </param>
        [AutoGenerated(Category = "", Version = "1.1", EntryPoint = "clEnqueueWriteBufferRect")]
        [CLSCompliant(false)]
        public static ErrorCode EnqueueWriteBufferRect<T10>(CommandQueue command_queue, ComputeMemory buffer, bool blocking_write, ref IntPtr buffer_offset, ref IntPtr host_offset, ref IntPtr region, IntPtr buffer_row_pitch, IntPtr buffer_slice_pitch, IntPtr host_row_pitch, IntPtr host_slice_pitch, [InAttribute, OutAttribute] T10[] ptr, Int32 num_events_in_wait_list, ref ComputeEvent event_wait_list, [OutAttribute] out ComputeEvent @event)
            where T10 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.1]
        /// Enqueue commands to write a 2D or 3D rectangular region to a buffer object from host memory.
        /// </summary>
        /// <param name="command_queue"> 
        /// Refers to the command-queue in which the write command will be queued. command_queue and buffer must be created with the same OpenCL context.
        /// </param>
        /// <param name="buffer"> 
        /// Refers to a valid buffer object.
        /// </param>
        /// <param name="blocking_write"> 
        /// Indicates if the write operations are blocking or non-blocking.  If blocking_write is True, the OpenCL implementation copies the data referred to by ptr and enqueues the write operation in the command-queue. The memory pointed to by ptr can be reused by the application after the clEnqueueWriteBufferRect call returns.  If blocking_write is False, the OpenCL implementation will use ptr to perform a nonblocking write. As the write is non-blocking the implementation can return immediately.  The memory pointed to by ptr cannot be reused by the application after the call returns. The event argument returns an event object which can be used to query the execution status of the write command. When the write command has completed, the memory pointed to by ptr can then be reused by the application.
        /// </param>
        /// <param name="buffer_offset">[length: 3] 
        /// The (x, y, z) offset in the memory region associated with buffer. For a 2D rectangle region, the z value given by buffer_origin[2] should be 0. The offset in bytes is computed as buffer_origin[2] * buffer_slice_pitch + buffer_origin[1] * buffer_row_pitch + buffer_origin[0].
        /// </param>
        /// <param name="host_offset">[length: 3] 
        /// The (x, y, z) offset in the memory region pointed to by ptr. For a 2D rectangle region, the z value given by host_origin[2] should be 0. The offset in bytes is computed as host_origin[2] * host_slice_pitch + host_origin[1] * host_row_pitch + host_origin[0].
        /// </param>
        /// <param name="region">[length: 3] 
        /// The (width, height, depth) in bytes of the 2D or 3D rectangle being read or written. For a 2D rectangle copy, the depth value given by region[2] should be 1.
        /// </param>
        /// <param name="buffer_row_pitch"> 
        /// The length of each row in bytes to be used for the memory region associated with buffer. If buffer_row_pitch is 0, buffer_row_pitch is computed as region[0].
        /// </param>
        /// <param name="buffer_slice_pitch"> 
        /// The length of each 2D slice in bytes to be used for the memory region associated with buffer. If buffer_slice_pitch is 0, buffer_slice_pitch is computed as region[1] * buffer_row_pitch.
        /// </param>
        /// <param name="host_row_pitch"> 
        /// The length of each row in bytes to be used for the memory region pointed to by ptr. If host_row_pitch is 0, host_row_pitch is computed as region[0].
        /// </param>
        /// <param name="host_slice_pitch"> 
        /// The length of each 2D slice in bytes to be used for the memory region pointed to by ptr. If host_slice_pitch is 0, host_slice_pitch is computed as region[1] * host_row_pitch.
        /// </param>
        /// <param name="ptr"> 
        /// The pointer to buffer in host memory where data is to be written from.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// event_wait_list and num_events_in_wait_list specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// event_wait_list and num_events_in_wait_list specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event"> 
        /// Returns an event object that identifies this particular write command and can be used to query or queue a wait for this particular command to complete. event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete.
        /// </param>
        [AutoGenerated(Category = "", Version = "1.1", EntryPoint = "clEnqueueWriteBufferRect")]
        [CLSCompliant(false)]
        public static ErrorCode EnqueueWriteBufferRect<T10>(CommandQueue command_queue, ComputeMemory buffer, bool blocking_write, ref IntPtr buffer_offset, ref IntPtr host_offset, ref IntPtr region, IntPtr buffer_row_pitch, IntPtr buffer_slice_pitch, IntPtr host_row_pitch, IntPtr host_slice_pitch, [InAttribute, OutAttribute] T10[,] ptr, Int32 num_events_in_wait_list, ref ComputeEvent event_wait_list, [OutAttribute] out ComputeEvent @event)
            where T10 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.1]
        /// Enqueue commands to write a 2D or 3D rectangular region to a buffer object from host memory.
        /// </summary>
        /// <param name="command_queue"> 
        /// Refers to the command-queue in which the write command will be queued. command_queue and buffer must be created with the same OpenCL context.
        /// </param>
        /// <param name="buffer"> 
        /// Refers to a valid buffer object.
        /// </param>
        /// <param name="blocking_write"> 
        /// Indicates if the write operations are blocking or non-blocking.  If blocking_write is True, the OpenCL implementation copies the data referred to by ptr and enqueues the write operation in the command-queue. The memory pointed to by ptr can be reused by the application after the clEnqueueWriteBufferRect call returns.  If blocking_write is False, the OpenCL implementation will use ptr to perform a nonblocking write. As the write is non-blocking the implementation can return immediately.  The memory pointed to by ptr cannot be reused by the application after the call returns. The event argument returns an event object which can be used to query the execution status of the write command. When the write command has completed, the memory pointed to by ptr can then be reused by the application.
        /// </param>
        /// <param name="buffer_offset">[length: 3] 
        /// The (x, y, z) offset in the memory region associated with buffer. For a 2D rectangle region, the z value given by buffer_origin[2] should be 0. The offset in bytes is computed as buffer_origin[2] * buffer_slice_pitch + buffer_origin[1] * buffer_row_pitch + buffer_origin[0].
        /// </param>
        /// <param name="host_offset">[length: 3] 
        /// The (x, y, z) offset in the memory region pointed to by ptr. For a 2D rectangle region, the z value given by host_origin[2] should be 0. The offset in bytes is computed as host_origin[2] * host_slice_pitch + host_origin[1] * host_row_pitch + host_origin[0].
        /// </param>
        /// <param name="region">[length: 3] 
        /// The (width, height, depth) in bytes of the 2D or 3D rectangle being read or written. For a 2D rectangle copy, the depth value given by region[2] should be 1.
        /// </param>
        /// <param name="buffer_row_pitch"> 
        /// The length of each row in bytes to be used for the memory region associated with buffer. If buffer_row_pitch is 0, buffer_row_pitch is computed as region[0].
        /// </param>
        /// <param name="buffer_slice_pitch"> 
        /// The length of each 2D slice in bytes to be used for the memory region associated with buffer. If buffer_slice_pitch is 0, buffer_slice_pitch is computed as region[1] * buffer_row_pitch.
        /// </param>
        /// <param name="host_row_pitch"> 
        /// The length of each row in bytes to be used for the memory region pointed to by ptr. If host_row_pitch is 0, host_row_pitch is computed as region[0].
        /// </param>
        /// <param name="host_slice_pitch"> 
        /// The length of each 2D slice in bytes to be used for the memory region pointed to by ptr. If host_slice_pitch is 0, host_slice_pitch is computed as region[1] * host_row_pitch.
        /// </param>
        /// <param name="ptr"> 
        /// The pointer to buffer in host memory where data is to be written from.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// event_wait_list and num_events_in_wait_list specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// event_wait_list and num_events_in_wait_list specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event"> 
        /// Returns an event object that identifies this particular write command and can be used to query or queue a wait for this particular command to complete. event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete.
        /// </param>
        [AutoGenerated(Category = "", Version = "1.1", EntryPoint = "clEnqueueWriteBufferRect")]
        [CLSCompliant(false)]
        public static ErrorCode EnqueueWriteBufferRect<T10>(CommandQueue command_queue, ComputeMemory buffer, bool blocking_write, ref IntPtr buffer_offset, ref IntPtr host_offset, ref IntPtr region, IntPtr buffer_row_pitch, IntPtr buffer_slice_pitch, IntPtr host_row_pitch, IntPtr host_slice_pitch, [InAttribute, OutAttribute] T10[,,] ptr, Int32 num_events_in_wait_list, ref ComputeEvent event_wait_list, [OutAttribute] out ComputeEvent @event)
            where T10 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.1]
        /// Enqueue commands to write a 2D or 3D rectangular region to a buffer object from host memory.
        /// </summary>
        /// <param name="command_queue"> 
        /// Refers to the command-queue in which the write command will be queued. command_queue and buffer must be created with the same OpenCL context.
        /// </param>
        /// <param name="buffer"> 
        /// Refers to a valid buffer object.
        /// </param>
        /// <param name="blocking_write"> 
        /// Indicates if the write operations are blocking or non-blocking.  If blocking_write is True, the OpenCL implementation copies the data referred to by ptr and enqueues the write operation in the command-queue. The memory pointed to by ptr can be reused by the application after the clEnqueueWriteBufferRect call returns.  If blocking_write is False, the OpenCL implementation will use ptr to perform a nonblocking write. As the write is non-blocking the implementation can return immediately.  The memory pointed to by ptr cannot be reused by the application after the call returns. The event argument returns an event object which can be used to query the execution status of the write command. When the write command has completed, the memory pointed to by ptr can then be reused by the application.
        /// </param>
        /// <param name="buffer_offset">[length: 3] 
        /// The (x, y, z) offset in the memory region associated with buffer. For a 2D rectangle region, the z value given by buffer_origin[2] should be 0. The offset in bytes is computed as buffer_origin[2] * buffer_slice_pitch + buffer_origin[1] * buffer_row_pitch + buffer_origin[0].
        /// </param>
        /// <param name="host_offset">[length: 3] 
        /// The (x, y, z) offset in the memory region pointed to by ptr. For a 2D rectangle region, the z value given by host_origin[2] should be 0. The offset in bytes is computed as host_origin[2] * host_slice_pitch + host_origin[1] * host_row_pitch + host_origin[0].
        /// </param>
        /// <param name="region">[length: 3] 
        /// The (width, height, depth) in bytes of the 2D or 3D rectangle being read or written. For a 2D rectangle copy, the depth value given by region[2] should be 1.
        /// </param>
        /// <param name="buffer_row_pitch"> 
        /// The length of each row in bytes to be used for the memory region associated with buffer. If buffer_row_pitch is 0, buffer_row_pitch is computed as region[0].
        /// </param>
        /// <param name="buffer_slice_pitch"> 
        /// The length of each 2D slice in bytes to be used for the memory region associated with buffer. If buffer_slice_pitch is 0, buffer_slice_pitch is computed as region[1] * buffer_row_pitch.
        /// </param>
        /// <param name="host_row_pitch"> 
        /// The length of each row in bytes to be used for the memory region pointed to by ptr. If host_row_pitch is 0, host_row_pitch is computed as region[0].
        /// </param>
        /// <param name="host_slice_pitch"> 
        /// The length of each 2D slice in bytes to be used for the memory region pointed to by ptr. If host_slice_pitch is 0, host_slice_pitch is computed as region[1] * host_row_pitch.
        /// </param>
        /// <param name="ptr"> 
        /// The pointer to buffer in host memory where data is to be written from.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// event_wait_list and num_events_in_wait_list specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// event_wait_list and num_events_in_wait_list specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event"> 
        /// Returns an event object that identifies this particular write command and can be used to query or queue a wait for this particular command to complete. event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete.
        /// </param>
        [AutoGenerated(Category = "", Version = "1.1", EntryPoint = "clEnqueueWriteBufferRect")]
        [CLSCompliant(false)]
        public static ErrorCode EnqueueWriteBufferRect<T10>(CommandQueue command_queue, ComputeMemory buffer, bool blocking_write, ref IntPtr buffer_offset, ref IntPtr host_offset, ref IntPtr region, IntPtr buffer_row_pitch, IntPtr buffer_slice_pitch, IntPtr host_row_pitch, IntPtr host_slice_pitch, [InAttribute, OutAttribute] ref T10 ptr, Int32 num_events_in_wait_list, ref ComputeEvent event_wait_list, [OutAttribute] out ComputeEvent @event)
            where T10 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.1]
        /// Enqueue commands to write a 2D or 3D rectangular region to a buffer object from host memory.
        /// </summary>
        /// <param name="command_queue"> 
        /// Refers to the command-queue in which the write command will be queued. command_queue and buffer must be created with the same OpenCL context.
        /// </param>
        /// <param name="buffer"> 
        /// Refers to a valid buffer object.
        /// </param>
        /// <param name="blocking_write"> 
        /// Indicates if the write operations are blocking or non-blocking.  If blocking_write is True, the OpenCL implementation copies the data referred to by ptr and enqueues the write operation in the command-queue. The memory pointed to by ptr can be reused by the application after the clEnqueueWriteBufferRect call returns.  If blocking_write is False, the OpenCL implementation will use ptr to perform a nonblocking write. As the write is non-blocking the implementation can return immediately.  The memory pointed to by ptr cannot be reused by the application after the call returns. The event argument returns an event object which can be used to query the execution status of the write command. When the write command has completed, the memory pointed to by ptr can then be reused by the application.
        /// </param>
        /// <param name="buffer_offset">[length: 3] 
        /// The (x, y, z) offset in the memory region associated with buffer. For a 2D rectangle region, the z value given by buffer_origin[2] should be 0. The offset in bytes is computed as buffer_origin[2] * buffer_slice_pitch + buffer_origin[1] * buffer_row_pitch + buffer_origin[0].
        /// </param>
        /// <param name="host_offset">[length: 3] 
        /// The (x, y, z) offset in the memory region pointed to by ptr. For a 2D rectangle region, the z value given by host_origin[2] should be 0. The offset in bytes is computed as host_origin[2] * host_slice_pitch + host_origin[1] * host_row_pitch + host_origin[0].
        /// </param>
        /// <param name="region">[length: 3] 
        /// The (width, height, depth) in bytes of the 2D or 3D rectangle being read or written. For a 2D rectangle copy, the depth value given by region[2] should be 1.
        /// </param>
        /// <param name="buffer_row_pitch"> 
        /// The length of each row in bytes to be used for the memory region associated with buffer. If buffer_row_pitch is 0, buffer_row_pitch is computed as region[0].
        /// </param>
        /// <param name="buffer_slice_pitch"> 
        /// The length of each 2D slice in bytes to be used for the memory region associated with buffer. If buffer_slice_pitch is 0, buffer_slice_pitch is computed as region[1] * buffer_row_pitch.
        /// </param>
        /// <param name="host_row_pitch"> 
        /// The length of each row in bytes to be used for the memory region pointed to by ptr. If host_row_pitch is 0, host_row_pitch is computed as region[0].
        /// </param>
        /// <param name="host_slice_pitch"> 
        /// The length of each 2D slice in bytes to be used for the memory region pointed to by ptr. If host_slice_pitch is 0, host_slice_pitch is computed as region[1] * host_row_pitch.
        /// </param>
        /// <param name="ptr"> 
        /// The pointer to buffer in host memory where data is to be written from.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// event_wait_list and num_events_in_wait_list specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// event_wait_list and num_events_in_wait_list specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event"> 
        /// Returns an event object that identifies this particular write command and can be used to query or queue a wait for this particular command to complete. event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete.
        /// </param>
        [AutoGenerated(Category = "", Version = "1.1", EntryPoint = "clEnqueueWriteBufferRect")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode EnqueueWriteBufferRect(CommandQueue command_queue, ComputeMemory buffer, bool blocking_write, IntPtr* buffer_offset, IntPtr* host_offset, IntPtr* region, IntPtr buffer_row_pitch, IntPtr buffer_slice_pitch, IntPtr host_row_pitch, IntPtr host_slice_pitch, IntPtr ptr, Int32 num_events_in_wait_list, ComputeEvent* event_wait_list, [OutAttribute] ComputeEvent* @event) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.1]
        /// Enqueue commands to write a 2D or 3D rectangular region to a buffer object from host memory.
        /// </summary>
        /// <param name="command_queue"> 
        /// Refers to the command-queue in which the write command will be queued. command_queue and buffer must be created with the same OpenCL context.
        /// </param>
        /// <param name="buffer"> 
        /// Refers to a valid buffer object.
        /// </param>
        /// <param name="blocking_write"> 
        /// Indicates if the write operations are blocking or non-blocking.  If blocking_write is True, the OpenCL implementation copies the data referred to by ptr and enqueues the write operation in the command-queue. The memory pointed to by ptr can be reused by the application after the clEnqueueWriteBufferRect call returns.  If blocking_write is False, the OpenCL implementation will use ptr to perform a nonblocking write. As the write is non-blocking the implementation can return immediately.  The memory pointed to by ptr cannot be reused by the application after the call returns. The event argument returns an event object which can be used to query the execution status of the write command. When the write command has completed, the memory pointed to by ptr can then be reused by the application.
        /// </param>
        /// <param name="buffer_offset">[length: 3] 
        /// The (x, y, z) offset in the memory region associated with buffer. For a 2D rectangle region, the z value given by buffer_origin[2] should be 0. The offset in bytes is computed as buffer_origin[2] * buffer_slice_pitch + buffer_origin[1] * buffer_row_pitch + buffer_origin[0].
        /// </param>
        /// <param name="host_offset">[length: 3] 
        /// The (x, y, z) offset in the memory region pointed to by ptr. For a 2D rectangle region, the z value given by host_origin[2] should be 0. The offset in bytes is computed as host_origin[2] * host_slice_pitch + host_origin[1] * host_row_pitch + host_origin[0].
        /// </param>
        /// <param name="region">[length: 3] 
        /// The (width, height, depth) in bytes of the 2D or 3D rectangle being read or written. For a 2D rectangle copy, the depth value given by region[2] should be 1.
        /// </param>
        /// <param name="buffer_row_pitch"> 
        /// The length of each row in bytes to be used for the memory region associated with buffer. If buffer_row_pitch is 0, buffer_row_pitch is computed as region[0].
        /// </param>
        /// <param name="buffer_slice_pitch"> 
        /// The length of each 2D slice in bytes to be used for the memory region associated with buffer. If buffer_slice_pitch is 0, buffer_slice_pitch is computed as region[1] * buffer_row_pitch.
        /// </param>
        /// <param name="host_row_pitch"> 
        /// The length of each row in bytes to be used for the memory region pointed to by ptr. If host_row_pitch is 0, host_row_pitch is computed as region[0].
        /// </param>
        /// <param name="host_slice_pitch"> 
        /// The length of each 2D slice in bytes to be used for the memory region pointed to by ptr. If host_slice_pitch is 0, host_slice_pitch is computed as region[1] * host_row_pitch.
        /// </param>
        /// <param name="ptr"> 
        /// The pointer to buffer in host memory where data is to be written from.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// event_wait_list and num_events_in_wait_list specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// event_wait_list and num_events_in_wait_list specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event"> 
        /// Returns an event object that identifies this particular write command and can be used to query or queue a wait for this particular command to complete. event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete.
        /// </param>
        [AutoGenerated(Category = "", Version = "1.1", EntryPoint = "clEnqueueWriteBufferRect")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode EnqueueWriteBufferRect<T10>(CommandQueue command_queue, ComputeMemory buffer, bool blocking_write, IntPtr* buffer_offset, IntPtr* host_offset, IntPtr* region, IntPtr buffer_row_pitch, IntPtr buffer_slice_pitch, IntPtr host_row_pitch, IntPtr host_slice_pitch, [InAttribute, OutAttribute] T10[] ptr, Int32 num_events_in_wait_list, ComputeEvent* event_wait_list, [OutAttribute] ComputeEvent* @event)
            where T10 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.1]
        /// Enqueue commands to write a 2D or 3D rectangular region to a buffer object from host memory.
        /// </summary>
        /// <param name="command_queue"> 
        /// Refers to the command-queue in which the write command will be queued. command_queue and buffer must be created with the same OpenCL context.
        /// </param>
        /// <param name="buffer"> 
        /// Refers to a valid buffer object.
        /// </param>
        /// <param name="blocking_write"> 
        /// Indicates if the write operations are blocking or non-blocking.  If blocking_write is True, the OpenCL implementation copies the data referred to by ptr and enqueues the write operation in the command-queue. The memory pointed to by ptr can be reused by the application after the clEnqueueWriteBufferRect call returns.  If blocking_write is False, the OpenCL implementation will use ptr to perform a nonblocking write. As the write is non-blocking the implementation can return immediately.  The memory pointed to by ptr cannot be reused by the application after the call returns. The event argument returns an event object which can be used to query the execution status of the write command. When the write command has completed, the memory pointed to by ptr can then be reused by the application.
        /// </param>
        /// <param name="buffer_offset">[length: 3] 
        /// The (x, y, z) offset in the memory region associated with buffer. For a 2D rectangle region, the z value given by buffer_origin[2] should be 0. The offset in bytes is computed as buffer_origin[2] * buffer_slice_pitch + buffer_origin[1] * buffer_row_pitch + buffer_origin[0].
        /// </param>
        /// <param name="host_offset">[length: 3] 
        /// The (x, y, z) offset in the memory region pointed to by ptr. For a 2D rectangle region, the z value given by host_origin[2] should be 0. The offset in bytes is computed as host_origin[2] * host_slice_pitch + host_origin[1] * host_row_pitch + host_origin[0].
        /// </param>
        /// <param name="region">[length: 3] 
        /// The (width, height, depth) in bytes of the 2D or 3D rectangle being read or written. For a 2D rectangle copy, the depth value given by region[2] should be 1.
        /// </param>
        /// <param name="buffer_row_pitch"> 
        /// The length of each row in bytes to be used for the memory region associated with buffer. If buffer_row_pitch is 0, buffer_row_pitch is computed as region[0].
        /// </param>
        /// <param name="buffer_slice_pitch"> 
        /// The length of each 2D slice in bytes to be used for the memory region associated with buffer. If buffer_slice_pitch is 0, buffer_slice_pitch is computed as region[1] * buffer_row_pitch.
        /// </param>
        /// <param name="host_row_pitch"> 
        /// The length of each row in bytes to be used for the memory region pointed to by ptr. If host_row_pitch is 0, host_row_pitch is computed as region[0].
        /// </param>
        /// <param name="host_slice_pitch"> 
        /// The length of each 2D slice in bytes to be used for the memory region pointed to by ptr. If host_slice_pitch is 0, host_slice_pitch is computed as region[1] * host_row_pitch.
        /// </param>
        /// <param name="ptr"> 
        /// The pointer to buffer in host memory where data is to be written from.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// event_wait_list and num_events_in_wait_list specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// event_wait_list and num_events_in_wait_list specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event"> 
        /// Returns an event object that identifies this particular write command and can be used to query or queue a wait for this particular command to complete. event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete.
        /// </param>
        [AutoGenerated(Category = "", Version = "1.1", EntryPoint = "clEnqueueWriteBufferRect")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode EnqueueWriteBufferRect<T10>(CommandQueue command_queue, ComputeMemory buffer, bool blocking_write, IntPtr* buffer_offset, IntPtr* host_offset, IntPtr* region, IntPtr buffer_row_pitch, IntPtr buffer_slice_pitch, IntPtr host_row_pitch, IntPtr host_slice_pitch, [InAttribute, OutAttribute] T10[,] ptr, Int32 num_events_in_wait_list, ComputeEvent* event_wait_list, [OutAttribute] ComputeEvent* @event)
            where T10 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.1]
        /// Enqueue commands to write a 2D or 3D rectangular region to a buffer object from host memory.
        /// </summary>
        /// <param name="command_queue"> 
        /// Refers to the command-queue in which the write command will be queued. command_queue and buffer must be created with the same OpenCL context.
        /// </param>
        /// <param name="buffer"> 
        /// Refers to a valid buffer object.
        /// </param>
        /// <param name="blocking_write"> 
        /// Indicates if the write operations are blocking or non-blocking.  If blocking_write is True, the OpenCL implementation copies the data referred to by ptr and enqueues the write operation in the command-queue. The memory pointed to by ptr can be reused by the application after the clEnqueueWriteBufferRect call returns.  If blocking_write is False, the OpenCL implementation will use ptr to perform a nonblocking write. As the write is non-blocking the implementation can return immediately.  The memory pointed to by ptr cannot be reused by the application after the call returns. The event argument returns an event object which can be used to query the execution status of the write command. When the write command has completed, the memory pointed to by ptr can then be reused by the application.
        /// </param>
        /// <param name="buffer_offset">[length: 3] 
        /// The (x, y, z) offset in the memory region associated with buffer. For a 2D rectangle region, the z value given by buffer_origin[2] should be 0. The offset in bytes is computed as buffer_origin[2] * buffer_slice_pitch + buffer_origin[1] * buffer_row_pitch + buffer_origin[0].
        /// </param>
        /// <param name="host_offset">[length: 3] 
        /// The (x, y, z) offset in the memory region pointed to by ptr. For a 2D rectangle region, the z value given by host_origin[2] should be 0. The offset in bytes is computed as host_origin[2] * host_slice_pitch + host_origin[1] * host_row_pitch + host_origin[0].
        /// </param>
        /// <param name="region">[length: 3] 
        /// The (width, height, depth) in bytes of the 2D or 3D rectangle being read or written. For a 2D rectangle copy, the depth value given by region[2] should be 1.
        /// </param>
        /// <param name="buffer_row_pitch"> 
        /// The length of each row in bytes to be used for the memory region associated with buffer. If buffer_row_pitch is 0, buffer_row_pitch is computed as region[0].
        /// </param>
        /// <param name="buffer_slice_pitch"> 
        /// The length of each 2D slice in bytes to be used for the memory region associated with buffer. If buffer_slice_pitch is 0, buffer_slice_pitch is computed as region[1] * buffer_row_pitch.
        /// </param>
        /// <param name="host_row_pitch"> 
        /// The length of each row in bytes to be used for the memory region pointed to by ptr. If host_row_pitch is 0, host_row_pitch is computed as region[0].
        /// </param>
        /// <param name="host_slice_pitch"> 
        /// The length of each 2D slice in bytes to be used for the memory region pointed to by ptr. If host_slice_pitch is 0, host_slice_pitch is computed as region[1] * host_row_pitch.
        /// </param>
        /// <param name="ptr"> 
        /// The pointer to buffer in host memory where data is to be written from.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// event_wait_list and num_events_in_wait_list specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// event_wait_list and num_events_in_wait_list specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event"> 
        /// Returns an event object that identifies this particular write command and can be used to query or queue a wait for this particular command to complete. event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete.
        /// </param>
        [AutoGenerated(Category = "", Version = "1.1", EntryPoint = "clEnqueueWriteBufferRect")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode EnqueueWriteBufferRect<T10>(CommandQueue command_queue, ComputeMemory buffer, bool blocking_write, IntPtr* buffer_offset, IntPtr* host_offset, IntPtr* region, IntPtr buffer_row_pitch, IntPtr buffer_slice_pitch, IntPtr host_row_pitch, IntPtr host_slice_pitch, [InAttribute, OutAttribute] T10[,,] ptr, Int32 num_events_in_wait_list, ComputeEvent* event_wait_list, [OutAttribute] ComputeEvent* @event)
            where T10 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.1]
        /// Enqueue commands to write a 2D or 3D rectangular region to a buffer object from host memory.
        /// </summary>
        /// <param name="command_queue"> 
        /// Refers to the command-queue in which the write command will be queued. command_queue and buffer must be created with the same OpenCL context.
        /// </param>
        /// <param name="buffer"> 
        /// Refers to a valid buffer object.
        /// </param>
        /// <param name="blocking_write"> 
        /// Indicates if the write operations are blocking or non-blocking.  If blocking_write is True, the OpenCL implementation copies the data referred to by ptr and enqueues the write operation in the command-queue. The memory pointed to by ptr can be reused by the application after the clEnqueueWriteBufferRect call returns.  If blocking_write is False, the OpenCL implementation will use ptr to perform a nonblocking write. As the write is non-blocking the implementation can return immediately.  The memory pointed to by ptr cannot be reused by the application after the call returns. The event argument returns an event object which can be used to query the execution status of the write command. When the write command has completed, the memory pointed to by ptr can then be reused by the application.
        /// </param>
        /// <param name="buffer_offset">[length: 3] 
        /// The (x, y, z) offset in the memory region associated with buffer. For a 2D rectangle region, the z value given by buffer_origin[2] should be 0. The offset in bytes is computed as buffer_origin[2] * buffer_slice_pitch + buffer_origin[1] * buffer_row_pitch + buffer_origin[0].
        /// </param>
        /// <param name="host_offset">[length: 3] 
        /// The (x, y, z) offset in the memory region pointed to by ptr. For a 2D rectangle region, the z value given by host_origin[2] should be 0. The offset in bytes is computed as host_origin[2] * host_slice_pitch + host_origin[1] * host_row_pitch + host_origin[0].
        /// </param>
        /// <param name="region">[length: 3] 
        /// The (width, height, depth) in bytes of the 2D or 3D rectangle being read or written. For a 2D rectangle copy, the depth value given by region[2] should be 1.
        /// </param>
        /// <param name="buffer_row_pitch"> 
        /// The length of each row in bytes to be used for the memory region associated with buffer. If buffer_row_pitch is 0, buffer_row_pitch is computed as region[0].
        /// </param>
        /// <param name="buffer_slice_pitch"> 
        /// The length of each 2D slice in bytes to be used for the memory region associated with buffer. If buffer_slice_pitch is 0, buffer_slice_pitch is computed as region[1] * buffer_row_pitch.
        /// </param>
        /// <param name="host_row_pitch"> 
        /// The length of each row in bytes to be used for the memory region pointed to by ptr. If host_row_pitch is 0, host_row_pitch is computed as region[0].
        /// </param>
        /// <param name="host_slice_pitch"> 
        /// The length of each 2D slice in bytes to be used for the memory region pointed to by ptr. If host_slice_pitch is 0, host_slice_pitch is computed as region[1] * host_row_pitch.
        /// </param>
        /// <param name="ptr"> 
        /// The pointer to buffer in host memory where data is to be written from.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// event_wait_list and num_events_in_wait_list specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// event_wait_list and num_events_in_wait_list specify events that need to complete before this particular command can be executed. If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points. The context associated with events in event_wait_list and command_queue must be the same.  The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event"> 
        /// Returns an event object that identifies this particular write command and can be used to query or queue a wait for this particular command to complete. event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete.
        /// </param>
        [AutoGenerated(Category = "", Version = "1.1", EntryPoint = "clEnqueueWriteBufferRect")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode EnqueueWriteBufferRect<T10>(CommandQueue command_queue, ComputeMemory buffer, bool blocking_write, IntPtr* buffer_offset, IntPtr* host_offset, IntPtr* region, IntPtr buffer_row_pitch, IntPtr buffer_slice_pitch, IntPtr host_row_pitch, IntPtr host_slice_pitch, [InAttribute, OutAttribute] ref T10 ptr, Int32 num_events_in_wait_list, ComputeEvent* event_wait_list, [OutAttribute] ComputeEvent* @event)
            where T10 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Enqueues a command to write to an image or image array object from host memory.
        /// </summary>
        /// <param name="command_queue"> 
        /// Refers to the command-queue in which the write command will be queued. command_queue and image must be created with the same OpenCL context.
        /// </param>
        /// <param name="image"> 
        /// Refers to a valid image or image array object.
        /// </param>
        /// <param name="blocking_write"> 
        /// Indicates if the write operation is blocking or non-blocking.  If blocking_write is True the OpenCL implementation copies the data referred to by ptr and enqueues the write command in the command-queue. The memory pointed to by ptr can be reused by the application after the clEnqueueWriteImage call returns.  If blocking_write is False the OpenCL implementation will use ptr to perform a nonblocking write. As the write is non-blocking the implementation can return immediately. The memory pointed to by ptr cannot be reused by the application after the call returns. The event argument returns an event object which can be used to query the execution status of the write command. When the write command has completed, the memory pointed to by ptr can then be reused by the application.
        /// </param>
        /// <param name="origin">[length: 3] 
        /// Defines the (x, y, z) offset in pixels in the 1D, 2D, or 3D image, the (x, y) offset and the image index in the image array or the (x) offset and the image index in the 1D image array.  If image is a 2D image object, origin[2] must be 0. If image is a 1D image or 1D image buffer object, origin[1] and origin[2] must be 0. If image is a 1D image array object, origin[2] must be 0.  If image is a 1D image array object, origin[1] describes the image index in the 1D image array. If image is a 2D image array object, origin[2] describes the image index in the 2D image array.
        /// </param>
        /// <param name="region">[length: 3] 
        /// Defines the (width, height, depth) in pixels of the 1D, 2D or 3D rectangle, the (width, height) in pixels of the 2D rectangle and the number of images of a 2D image array or the (width) in pixels of the 1D rectangle and the number of images of a 1D image array. If image is a 2D image object, region[2] must be 1.  If image is a 1D image or 1D image buffer object,  region[1] and region[2] must be 1. If image is a 1D image array object, region[2] must be 1.
        /// </param>
        /// <param name="input_row_pitch"> 
        /// The length of each row in bytes. This value must be greater than or equal to the element size in bytes * width. If row_pitch is set to 0, the appropriate row pitch is calculated based on the size of each element in bytes multiplied by width.
        /// </param>
        /// <param name="input_slice_pitch"> 
        /// Size in bytes of the 2D slice of the 3D region of a 3D image or each image of a 1D or 2D image array being written.  This must be 0 if image is a 1D or 2D image.  This value must be greater than or equal to row_pitch * height. If slice_pitch is set to 0, the appropriate slice pitch is calculated based on the row_pitch * height.
        /// </param>
        /// <param name="ptr"> 
        /// The pointer to a buffer in host memory where image data is to be written to.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed.  If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points.  The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed.  If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points.  The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event"> 
        /// Returns an event object that identifies this particular write command and can be used to query or queue a wait for this particular command to complete.  event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clEnqueueWriteImage")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode EnqueueWriteImage(CommandQueue command_queue, ComputeMemory image, bool blocking_write, IntPtr*[] origin, IntPtr*[] region, IntPtr input_row_pitch, IntPtr input_slice_pitch, IntPtr ptr, Int32 num_events_in_wait_list, ComputeEvent[] event_wait_list, [OutAttribute] out ComputeEvent @event) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Enqueues a command to write to an image or image array object from host memory.
        /// </summary>
        /// <param name="command_queue"> 
        /// Refers to the command-queue in which the write command will be queued. command_queue and image must be created with the same OpenCL context.
        /// </param>
        /// <param name="image"> 
        /// Refers to a valid image or image array object.
        /// </param>
        /// <param name="blocking_write"> 
        /// Indicates if the write operation is blocking or non-blocking.  If blocking_write is True the OpenCL implementation copies the data referred to by ptr and enqueues the write command in the command-queue. The memory pointed to by ptr can be reused by the application after the clEnqueueWriteImage call returns.  If blocking_write is False the OpenCL implementation will use ptr to perform a nonblocking write. As the write is non-blocking the implementation can return immediately. The memory pointed to by ptr cannot be reused by the application after the call returns. The event argument returns an event object which can be used to query the execution status of the write command. When the write command has completed, the memory pointed to by ptr can then be reused by the application.
        /// </param>
        /// <param name="origin">[length: 3] 
        /// Defines the (x, y, z) offset in pixels in the 1D, 2D, or 3D image, the (x, y) offset and the image index in the image array or the (x) offset and the image index in the 1D image array.  If image is a 2D image object, origin[2] must be 0. If image is a 1D image or 1D image buffer object, origin[1] and origin[2] must be 0. If image is a 1D image array object, origin[2] must be 0.  If image is a 1D image array object, origin[1] describes the image index in the 1D image array. If image is a 2D image array object, origin[2] describes the image index in the 2D image array.
        /// </param>
        /// <param name="region">[length: 3] 
        /// Defines the (width, height, depth) in pixels of the 1D, 2D or 3D rectangle, the (width, height) in pixels of the 2D rectangle and the number of images of a 2D image array or the (width) in pixels of the 1D rectangle and the number of images of a 1D image array. If image is a 2D image object, region[2] must be 1.  If image is a 1D image or 1D image buffer object,  region[1] and region[2] must be 1. If image is a 1D image array object, region[2] must be 1.
        /// </param>
        /// <param name="input_row_pitch"> 
        /// The length of each row in bytes. This value must be greater than or equal to the element size in bytes * width. If row_pitch is set to 0, the appropriate row pitch is calculated based on the size of each element in bytes multiplied by width.
        /// </param>
        /// <param name="input_slice_pitch"> 
        /// Size in bytes of the 2D slice of the 3D region of a 3D image or each image of a 1D or 2D image array being written.  This must be 0 if image is a 1D or 2D image.  This value must be greater than or equal to row_pitch * height. If slice_pitch is set to 0, the appropriate slice pitch is calculated based on the row_pitch * height.
        /// </param>
        /// <param name="ptr"> 
        /// The pointer to a buffer in host memory where image data is to be written to.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed.  If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points.  The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed.  If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points.  The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event"> 
        /// Returns an event object that identifies this particular write command and can be used to query or queue a wait for this particular command to complete.  event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clEnqueueWriteImage")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode EnqueueWriteImage<T7>(CommandQueue command_queue, ComputeMemory image, bool blocking_write, IntPtr*[] origin, IntPtr*[] region, IntPtr input_row_pitch, IntPtr input_slice_pitch, [InAttribute, OutAttribute] T7[] ptr, Int32 num_events_in_wait_list, ComputeEvent[] event_wait_list, [OutAttribute] out ComputeEvent @event)
            where T7 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Enqueues a command to write to an image or image array object from host memory.
        /// </summary>
        /// <param name="command_queue"> 
        /// Refers to the command-queue in which the write command will be queued. command_queue and image must be created with the same OpenCL context.
        /// </param>
        /// <param name="image"> 
        /// Refers to a valid image or image array object.
        /// </param>
        /// <param name="blocking_write"> 
        /// Indicates if the write operation is blocking or non-blocking.  If blocking_write is True the OpenCL implementation copies the data referred to by ptr and enqueues the write command in the command-queue. The memory pointed to by ptr can be reused by the application after the clEnqueueWriteImage call returns.  If blocking_write is False the OpenCL implementation will use ptr to perform a nonblocking write. As the write is non-blocking the implementation can return immediately. The memory pointed to by ptr cannot be reused by the application after the call returns. The event argument returns an event object which can be used to query the execution status of the write command. When the write command has completed, the memory pointed to by ptr can then be reused by the application.
        /// </param>
        /// <param name="origin">[length: 3] 
        /// Defines the (x, y, z) offset in pixels in the 1D, 2D, or 3D image, the (x, y) offset and the image index in the image array or the (x) offset and the image index in the 1D image array.  If image is a 2D image object, origin[2] must be 0. If image is a 1D image or 1D image buffer object, origin[1] and origin[2] must be 0. If image is a 1D image array object, origin[2] must be 0.  If image is a 1D image array object, origin[1] describes the image index in the 1D image array. If image is a 2D image array object, origin[2] describes the image index in the 2D image array.
        /// </param>
        /// <param name="region">[length: 3] 
        /// Defines the (width, height, depth) in pixels of the 1D, 2D or 3D rectangle, the (width, height) in pixels of the 2D rectangle and the number of images of a 2D image array or the (width) in pixels of the 1D rectangle and the number of images of a 1D image array. If image is a 2D image object, region[2] must be 1.  If image is a 1D image or 1D image buffer object,  region[1] and region[2] must be 1. If image is a 1D image array object, region[2] must be 1.
        /// </param>
        /// <param name="input_row_pitch"> 
        /// The length of each row in bytes. This value must be greater than or equal to the element size in bytes * width. If row_pitch is set to 0, the appropriate row pitch is calculated based on the size of each element in bytes multiplied by width.
        /// </param>
        /// <param name="input_slice_pitch"> 
        /// Size in bytes of the 2D slice of the 3D region of a 3D image or each image of a 1D or 2D image array being written.  This must be 0 if image is a 1D or 2D image.  This value must be greater than or equal to row_pitch * height. If slice_pitch is set to 0, the appropriate slice pitch is calculated based on the row_pitch * height.
        /// </param>
        /// <param name="ptr"> 
        /// The pointer to a buffer in host memory where image data is to be written to.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed.  If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points.  The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed.  If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points.  The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event"> 
        /// Returns an event object that identifies this particular write command and can be used to query or queue a wait for this particular command to complete.  event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clEnqueueWriteImage")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode EnqueueWriteImage<T7>(CommandQueue command_queue, ComputeMemory image, bool blocking_write, IntPtr*[] origin, IntPtr*[] region, IntPtr input_row_pitch, IntPtr input_slice_pitch, [InAttribute, OutAttribute] T7[,] ptr, Int32 num_events_in_wait_list, ComputeEvent[] event_wait_list, [OutAttribute] out ComputeEvent @event)
            where T7 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Enqueues a command to write to an image or image array object from host memory.
        /// </summary>
        /// <param name="command_queue"> 
        /// Refers to the command-queue in which the write command will be queued. command_queue and image must be created with the same OpenCL context.
        /// </param>
        /// <param name="image"> 
        /// Refers to a valid image or image array object.
        /// </param>
        /// <param name="blocking_write"> 
        /// Indicates if the write operation is blocking or non-blocking.  If blocking_write is True the OpenCL implementation copies the data referred to by ptr and enqueues the write command in the command-queue. The memory pointed to by ptr can be reused by the application after the clEnqueueWriteImage call returns.  If blocking_write is False the OpenCL implementation will use ptr to perform a nonblocking write. As the write is non-blocking the implementation can return immediately. The memory pointed to by ptr cannot be reused by the application after the call returns. The event argument returns an event object which can be used to query the execution status of the write command. When the write command has completed, the memory pointed to by ptr can then be reused by the application.
        /// </param>
        /// <param name="origin">[length: 3] 
        /// Defines the (x, y, z) offset in pixels in the 1D, 2D, or 3D image, the (x, y) offset and the image index in the image array or the (x) offset and the image index in the 1D image array.  If image is a 2D image object, origin[2] must be 0. If image is a 1D image or 1D image buffer object, origin[1] and origin[2] must be 0. If image is a 1D image array object, origin[2] must be 0.  If image is a 1D image array object, origin[1] describes the image index in the 1D image array. If image is a 2D image array object, origin[2] describes the image index in the 2D image array.
        /// </param>
        /// <param name="region">[length: 3] 
        /// Defines the (width, height, depth) in pixels of the 1D, 2D or 3D rectangle, the (width, height) in pixels of the 2D rectangle and the number of images of a 2D image array or the (width) in pixels of the 1D rectangle and the number of images of a 1D image array. If image is a 2D image object, region[2] must be 1.  If image is a 1D image or 1D image buffer object,  region[1] and region[2] must be 1. If image is a 1D image array object, region[2] must be 1.
        /// </param>
        /// <param name="input_row_pitch"> 
        /// The length of each row in bytes. This value must be greater than or equal to the element size in bytes * width. If row_pitch is set to 0, the appropriate row pitch is calculated based on the size of each element in bytes multiplied by width.
        /// </param>
        /// <param name="input_slice_pitch"> 
        /// Size in bytes of the 2D slice of the 3D region of a 3D image or each image of a 1D or 2D image array being written.  This must be 0 if image is a 1D or 2D image.  This value must be greater than or equal to row_pitch * height. If slice_pitch is set to 0, the appropriate slice pitch is calculated based on the row_pitch * height.
        /// </param>
        /// <param name="ptr"> 
        /// The pointer to a buffer in host memory where image data is to be written to.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed.  If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points.  The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed.  If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points.  The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event"> 
        /// Returns an event object that identifies this particular write command and can be used to query or queue a wait for this particular command to complete.  event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clEnqueueWriteImage")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode EnqueueWriteImage<T7>(CommandQueue command_queue, ComputeMemory image, bool blocking_write, IntPtr*[] origin, IntPtr*[] region, IntPtr input_row_pitch, IntPtr input_slice_pitch, [InAttribute, OutAttribute] T7[,,] ptr, Int32 num_events_in_wait_list, ComputeEvent[] event_wait_list, [OutAttribute] out ComputeEvent @event)
            where T7 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Enqueues a command to write to an image or image array object from host memory.
        /// </summary>
        /// <param name="command_queue"> 
        /// Refers to the command-queue in which the write command will be queued. command_queue and image must be created with the same OpenCL context.
        /// </param>
        /// <param name="image"> 
        /// Refers to a valid image or image array object.
        /// </param>
        /// <param name="blocking_write"> 
        /// Indicates if the write operation is blocking or non-blocking.  If blocking_write is True the OpenCL implementation copies the data referred to by ptr and enqueues the write command in the command-queue. The memory pointed to by ptr can be reused by the application after the clEnqueueWriteImage call returns.  If blocking_write is False the OpenCL implementation will use ptr to perform a nonblocking write. As the write is non-blocking the implementation can return immediately. The memory pointed to by ptr cannot be reused by the application after the call returns. The event argument returns an event object which can be used to query the execution status of the write command. When the write command has completed, the memory pointed to by ptr can then be reused by the application.
        /// </param>
        /// <param name="origin">[length: 3] 
        /// Defines the (x, y, z) offset in pixels in the 1D, 2D, or 3D image, the (x, y) offset and the image index in the image array or the (x) offset and the image index in the 1D image array.  If image is a 2D image object, origin[2] must be 0. If image is a 1D image or 1D image buffer object, origin[1] and origin[2] must be 0. If image is a 1D image array object, origin[2] must be 0.  If image is a 1D image array object, origin[1] describes the image index in the 1D image array. If image is a 2D image array object, origin[2] describes the image index in the 2D image array.
        /// </param>
        /// <param name="region">[length: 3] 
        /// Defines the (width, height, depth) in pixels of the 1D, 2D or 3D rectangle, the (width, height) in pixels of the 2D rectangle and the number of images of a 2D image array or the (width) in pixels of the 1D rectangle and the number of images of a 1D image array. If image is a 2D image object, region[2] must be 1.  If image is a 1D image or 1D image buffer object,  region[1] and region[2] must be 1. If image is a 1D image array object, region[2] must be 1.
        /// </param>
        /// <param name="input_row_pitch"> 
        /// The length of each row in bytes. This value must be greater than or equal to the element size in bytes * width. If row_pitch is set to 0, the appropriate row pitch is calculated based on the size of each element in bytes multiplied by width.
        /// </param>
        /// <param name="input_slice_pitch"> 
        /// Size in bytes of the 2D slice of the 3D region of a 3D image or each image of a 1D or 2D image array being written.  This must be 0 if image is a 1D or 2D image.  This value must be greater than or equal to row_pitch * height. If slice_pitch is set to 0, the appropriate slice pitch is calculated based on the row_pitch * height.
        /// </param>
        /// <param name="ptr"> 
        /// The pointer to a buffer in host memory where image data is to be written to.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed.  If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points.  The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed.  If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points.  The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event"> 
        /// Returns an event object that identifies this particular write command and can be used to query or queue a wait for this particular command to complete.  event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clEnqueueWriteImage")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode EnqueueWriteImage<T7>(CommandQueue command_queue, ComputeMemory image, bool blocking_write, IntPtr*[] origin, IntPtr*[] region, IntPtr input_row_pitch, IntPtr input_slice_pitch, [InAttribute, OutAttribute] ref T7 ptr, Int32 num_events_in_wait_list, ComputeEvent[] event_wait_list, [OutAttribute] out ComputeEvent @event)
            where T7 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Enqueues a command to write to an image or image array object from host memory.
        /// </summary>
        /// <param name="command_queue"> 
        /// Refers to the command-queue in which the write command will be queued. command_queue and image must be created with the same OpenCL context.
        /// </param>
        /// <param name="image"> 
        /// Refers to a valid image or image array object.
        /// </param>
        /// <param name="blocking_write"> 
        /// Indicates if the write operation is blocking or non-blocking.  If blocking_write is True the OpenCL implementation copies the data referred to by ptr and enqueues the write command in the command-queue. The memory pointed to by ptr can be reused by the application after the clEnqueueWriteImage call returns.  If blocking_write is False the OpenCL implementation will use ptr to perform a nonblocking write. As the write is non-blocking the implementation can return immediately. The memory pointed to by ptr cannot be reused by the application after the call returns. The event argument returns an event object which can be used to query the execution status of the write command. When the write command has completed, the memory pointed to by ptr can then be reused by the application.
        /// </param>
        /// <param name="origin">[length: 3] 
        /// Defines the (x, y, z) offset in pixels in the 1D, 2D, or 3D image, the (x, y) offset and the image index in the image array or the (x) offset and the image index in the 1D image array.  If image is a 2D image object, origin[2] must be 0. If image is a 1D image or 1D image buffer object, origin[1] and origin[2] must be 0. If image is a 1D image array object, origin[2] must be 0.  If image is a 1D image array object, origin[1] describes the image index in the 1D image array. If image is a 2D image array object, origin[2] describes the image index in the 2D image array.
        /// </param>
        /// <param name="region">[length: 3] 
        /// Defines the (width, height, depth) in pixels of the 1D, 2D or 3D rectangle, the (width, height) in pixels of the 2D rectangle and the number of images of a 2D image array or the (width) in pixels of the 1D rectangle and the number of images of a 1D image array. If image is a 2D image object, region[2] must be 1.  If image is a 1D image or 1D image buffer object,  region[1] and region[2] must be 1. If image is a 1D image array object, region[2] must be 1.
        /// </param>
        /// <param name="input_row_pitch"> 
        /// The length of each row in bytes. This value must be greater than or equal to the element size in bytes * width. If row_pitch is set to 0, the appropriate row pitch is calculated based on the size of each element in bytes multiplied by width.
        /// </param>
        /// <param name="input_slice_pitch"> 
        /// Size in bytes of the 2D slice of the 3D region of a 3D image or each image of a 1D or 2D image array being written.  This must be 0 if image is a 1D or 2D image.  This value must be greater than or equal to row_pitch * height. If slice_pitch is set to 0, the appropriate slice pitch is calculated based on the row_pitch * height.
        /// </param>
        /// <param name="ptr"> 
        /// The pointer to a buffer in host memory where image data is to be written to.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed.  If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points.  The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed.  If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points.  The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event"> 
        /// Returns an event object that identifies this particular write command and can be used to query or queue a wait for this particular command to complete.  event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clEnqueueWriteImage")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode EnqueueWriteImage(CommandQueue command_queue, ComputeMemory image, bool blocking_write, ref IntPtr* origin, ref IntPtr* region, IntPtr input_row_pitch, IntPtr input_slice_pitch, IntPtr ptr, Int32 num_events_in_wait_list, ref ComputeEvent event_wait_list, [OutAttribute] out ComputeEvent @event) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Enqueues a command to write to an image or image array object from host memory.
        /// </summary>
        /// <param name="command_queue"> 
        /// Refers to the command-queue in which the write command will be queued. command_queue and image must be created with the same OpenCL context.
        /// </param>
        /// <param name="image"> 
        /// Refers to a valid image or image array object.
        /// </param>
        /// <param name="blocking_write"> 
        /// Indicates if the write operation is blocking or non-blocking.  If blocking_write is True the OpenCL implementation copies the data referred to by ptr and enqueues the write command in the command-queue. The memory pointed to by ptr can be reused by the application after the clEnqueueWriteImage call returns.  If blocking_write is False the OpenCL implementation will use ptr to perform a nonblocking write. As the write is non-blocking the implementation can return immediately. The memory pointed to by ptr cannot be reused by the application after the call returns. The event argument returns an event object which can be used to query the execution status of the write command. When the write command has completed, the memory pointed to by ptr can then be reused by the application.
        /// </param>
        /// <param name="origin">[length: 3] 
        /// Defines the (x, y, z) offset in pixels in the 1D, 2D, or 3D image, the (x, y) offset and the image index in the image array or the (x) offset and the image index in the 1D image array.  If image is a 2D image object, origin[2] must be 0. If image is a 1D image or 1D image buffer object, origin[1] and origin[2] must be 0. If image is a 1D image array object, origin[2] must be 0.  If image is a 1D image array object, origin[1] describes the image index in the 1D image array. If image is a 2D image array object, origin[2] describes the image index in the 2D image array.
        /// </param>
        /// <param name="region">[length: 3] 
        /// Defines the (width, height, depth) in pixels of the 1D, 2D or 3D rectangle, the (width, height) in pixels of the 2D rectangle and the number of images of a 2D image array or the (width) in pixels of the 1D rectangle and the number of images of a 1D image array. If image is a 2D image object, region[2] must be 1.  If image is a 1D image or 1D image buffer object,  region[1] and region[2] must be 1. If image is a 1D image array object, region[2] must be 1.
        /// </param>
        /// <param name="input_row_pitch"> 
        /// The length of each row in bytes. This value must be greater than or equal to the element size in bytes * width. If row_pitch is set to 0, the appropriate row pitch is calculated based on the size of each element in bytes multiplied by width.
        /// </param>
        /// <param name="input_slice_pitch"> 
        /// Size in bytes of the 2D slice of the 3D region of a 3D image or each image of a 1D or 2D image array being written.  This must be 0 if image is a 1D or 2D image.  This value must be greater than or equal to row_pitch * height. If slice_pitch is set to 0, the appropriate slice pitch is calculated based on the row_pitch * height.
        /// </param>
        /// <param name="ptr"> 
        /// The pointer to a buffer in host memory where image data is to be written to.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed.  If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points.  The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed.  If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points.  The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event"> 
        /// Returns an event object that identifies this particular write command and can be used to query or queue a wait for this particular command to complete.  event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clEnqueueWriteImage")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode EnqueueWriteImage<T7>(CommandQueue command_queue, ComputeMemory image, bool blocking_write, ref IntPtr* origin, ref IntPtr* region, IntPtr input_row_pitch, IntPtr input_slice_pitch, [InAttribute, OutAttribute] T7[] ptr, Int32 num_events_in_wait_list, ref ComputeEvent event_wait_list, [OutAttribute] out ComputeEvent @event)
            where T7 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Enqueues a command to write to an image or image array object from host memory.
        /// </summary>
        /// <param name="command_queue"> 
        /// Refers to the command-queue in which the write command will be queued. command_queue and image must be created with the same OpenCL context.
        /// </param>
        /// <param name="image"> 
        /// Refers to a valid image or image array object.
        /// </param>
        /// <param name="blocking_write"> 
        /// Indicates if the write operation is blocking or non-blocking.  If blocking_write is True the OpenCL implementation copies the data referred to by ptr and enqueues the write command in the command-queue. The memory pointed to by ptr can be reused by the application after the clEnqueueWriteImage call returns.  If blocking_write is False the OpenCL implementation will use ptr to perform a nonblocking write. As the write is non-blocking the implementation can return immediately. The memory pointed to by ptr cannot be reused by the application after the call returns. The event argument returns an event object which can be used to query the execution status of the write command. When the write command has completed, the memory pointed to by ptr can then be reused by the application.
        /// </param>
        /// <param name="origin">[length: 3] 
        /// Defines the (x, y, z) offset in pixels in the 1D, 2D, or 3D image, the (x, y) offset and the image index in the image array or the (x) offset and the image index in the 1D image array.  If image is a 2D image object, origin[2] must be 0. If image is a 1D image or 1D image buffer object, origin[1] and origin[2] must be 0. If image is a 1D image array object, origin[2] must be 0.  If image is a 1D image array object, origin[1] describes the image index in the 1D image array. If image is a 2D image array object, origin[2] describes the image index in the 2D image array.
        /// </param>
        /// <param name="region">[length: 3] 
        /// Defines the (width, height, depth) in pixels of the 1D, 2D or 3D rectangle, the (width, height) in pixels of the 2D rectangle and the number of images of a 2D image array or the (width) in pixels of the 1D rectangle and the number of images of a 1D image array. If image is a 2D image object, region[2] must be 1.  If image is a 1D image or 1D image buffer object,  region[1] and region[2] must be 1. If image is a 1D image array object, region[2] must be 1.
        /// </param>
        /// <param name="input_row_pitch"> 
        /// The length of each row in bytes. This value must be greater than or equal to the element size in bytes * width. If row_pitch is set to 0, the appropriate row pitch is calculated based on the size of each element in bytes multiplied by width.
        /// </param>
        /// <param name="input_slice_pitch"> 
        /// Size in bytes of the 2D slice of the 3D region of a 3D image or each image of a 1D or 2D image array being written.  This must be 0 if image is a 1D or 2D image.  This value must be greater than or equal to row_pitch * height. If slice_pitch is set to 0, the appropriate slice pitch is calculated based on the row_pitch * height.
        /// </param>
        /// <param name="ptr"> 
        /// The pointer to a buffer in host memory where image data is to be written to.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed.  If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points.  The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed.  If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points.  The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event"> 
        /// Returns an event object that identifies this particular write command and can be used to query or queue a wait for this particular command to complete.  event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clEnqueueWriteImage")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode EnqueueWriteImage<T7>(CommandQueue command_queue, ComputeMemory image, bool blocking_write, ref IntPtr* origin, ref IntPtr* region, IntPtr input_row_pitch, IntPtr input_slice_pitch, [InAttribute, OutAttribute] T7[,] ptr, Int32 num_events_in_wait_list, ref ComputeEvent event_wait_list, [OutAttribute] out ComputeEvent @event)
            where T7 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Enqueues a command to write to an image or image array object from host memory.
        /// </summary>
        /// <param name="command_queue"> 
        /// Refers to the command-queue in which the write command will be queued. command_queue and image must be created with the same OpenCL context.
        /// </param>
        /// <param name="image"> 
        /// Refers to a valid image or image array object.
        /// </param>
        /// <param name="blocking_write"> 
        /// Indicates if the write operation is blocking or non-blocking.  If blocking_write is True the OpenCL implementation copies the data referred to by ptr and enqueues the write command in the command-queue. The memory pointed to by ptr can be reused by the application after the clEnqueueWriteImage call returns.  If blocking_write is False the OpenCL implementation will use ptr to perform a nonblocking write. As the write is non-blocking the implementation can return immediately. The memory pointed to by ptr cannot be reused by the application after the call returns. The event argument returns an event object which can be used to query the execution status of the write command. When the write command has completed, the memory pointed to by ptr can then be reused by the application.
        /// </param>
        /// <param name="origin">[length: 3] 
        /// Defines the (x, y, z) offset in pixels in the 1D, 2D, or 3D image, the (x, y) offset and the image index in the image array or the (x) offset and the image index in the 1D image array.  If image is a 2D image object, origin[2] must be 0. If image is a 1D image or 1D image buffer object, origin[1] and origin[2] must be 0. If image is a 1D image array object, origin[2] must be 0.  If image is a 1D image array object, origin[1] describes the image index in the 1D image array. If image is a 2D image array object, origin[2] describes the image index in the 2D image array.
        /// </param>
        /// <param name="region">[length: 3] 
        /// Defines the (width, height, depth) in pixels of the 1D, 2D or 3D rectangle, the (width, height) in pixels of the 2D rectangle and the number of images of a 2D image array or the (width) in pixels of the 1D rectangle and the number of images of a 1D image array. If image is a 2D image object, region[2] must be 1.  If image is a 1D image or 1D image buffer object,  region[1] and region[2] must be 1. If image is a 1D image array object, region[2] must be 1.
        /// </param>
        /// <param name="input_row_pitch"> 
        /// The length of each row in bytes. This value must be greater than or equal to the element size in bytes * width. If row_pitch is set to 0, the appropriate row pitch is calculated based on the size of each element in bytes multiplied by width.
        /// </param>
        /// <param name="input_slice_pitch"> 
        /// Size in bytes of the 2D slice of the 3D region of a 3D image or each image of a 1D or 2D image array being written.  This must be 0 if image is a 1D or 2D image.  This value must be greater than or equal to row_pitch * height. If slice_pitch is set to 0, the appropriate slice pitch is calculated based on the row_pitch * height.
        /// </param>
        /// <param name="ptr"> 
        /// The pointer to a buffer in host memory where image data is to be written to.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed.  If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points.  The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed.  If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points.  The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event"> 
        /// Returns an event object that identifies this particular write command and can be used to query or queue a wait for this particular command to complete.  event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clEnqueueWriteImage")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode EnqueueWriteImage<T7>(CommandQueue command_queue, ComputeMemory image, bool blocking_write, ref IntPtr* origin, ref IntPtr* region, IntPtr input_row_pitch, IntPtr input_slice_pitch, [InAttribute, OutAttribute] T7[,,] ptr, Int32 num_events_in_wait_list, ref ComputeEvent event_wait_list, [OutAttribute] out ComputeEvent @event)
            where T7 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Enqueues a command to write to an image or image array object from host memory.
        /// </summary>
        /// <param name="command_queue"> 
        /// Refers to the command-queue in which the write command will be queued. command_queue and image must be created with the same OpenCL context.
        /// </param>
        /// <param name="image"> 
        /// Refers to a valid image or image array object.
        /// </param>
        /// <param name="blocking_write"> 
        /// Indicates if the write operation is blocking or non-blocking.  If blocking_write is True the OpenCL implementation copies the data referred to by ptr and enqueues the write command in the command-queue. The memory pointed to by ptr can be reused by the application after the clEnqueueWriteImage call returns.  If blocking_write is False the OpenCL implementation will use ptr to perform a nonblocking write. As the write is non-blocking the implementation can return immediately. The memory pointed to by ptr cannot be reused by the application after the call returns. The event argument returns an event object which can be used to query the execution status of the write command. When the write command has completed, the memory pointed to by ptr can then be reused by the application.
        /// </param>
        /// <param name="origin">[length: 3] 
        /// Defines the (x, y, z) offset in pixels in the 1D, 2D, or 3D image, the (x, y) offset and the image index in the image array or the (x) offset and the image index in the 1D image array.  If image is a 2D image object, origin[2] must be 0. If image is a 1D image or 1D image buffer object, origin[1] and origin[2] must be 0. If image is a 1D image array object, origin[2] must be 0.  If image is a 1D image array object, origin[1] describes the image index in the 1D image array. If image is a 2D image array object, origin[2] describes the image index in the 2D image array.
        /// </param>
        /// <param name="region">[length: 3] 
        /// Defines the (width, height, depth) in pixels of the 1D, 2D or 3D rectangle, the (width, height) in pixels of the 2D rectangle and the number of images of a 2D image array or the (width) in pixels of the 1D rectangle and the number of images of a 1D image array. If image is a 2D image object, region[2] must be 1.  If image is a 1D image or 1D image buffer object,  region[1] and region[2] must be 1. If image is a 1D image array object, region[2] must be 1.
        /// </param>
        /// <param name="input_row_pitch"> 
        /// The length of each row in bytes. This value must be greater than or equal to the element size in bytes * width. If row_pitch is set to 0, the appropriate row pitch is calculated based on the size of each element in bytes multiplied by width.
        /// </param>
        /// <param name="input_slice_pitch"> 
        /// Size in bytes of the 2D slice of the 3D region of a 3D image or each image of a 1D or 2D image array being written.  This must be 0 if image is a 1D or 2D image.  This value must be greater than or equal to row_pitch * height. If slice_pitch is set to 0, the appropriate slice pitch is calculated based on the row_pitch * height.
        /// </param>
        /// <param name="ptr"> 
        /// The pointer to a buffer in host memory where image data is to be written to.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed.  If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points.  The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed.  If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points.  The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event"> 
        /// Returns an event object that identifies this particular write command and can be used to query or queue a wait for this particular command to complete.  event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clEnqueueWriteImage")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode EnqueueWriteImage<T7>(CommandQueue command_queue, ComputeMemory image, bool blocking_write, ref IntPtr* origin, ref IntPtr* region, IntPtr input_row_pitch, IntPtr input_slice_pitch, [InAttribute, OutAttribute] ref T7 ptr, Int32 num_events_in_wait_list, ref ComputeEvent event_wait_list, [OutAttribute] out ComputeEvent @event)
            where T7 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Enqueues a command to write to an image or image array object from host memory.
        /// </summary>
        /// <param name="command_queue"> 
        /// Refers to the command-queue in which the write command will be queued. command_queue and image must be created with the same OpenCL context.
        /// </param>
        /// <param name="image"> 
        /// Refers to a valid image or image array object.
        /// </param>
        /// <param name="blocking_write"> 
        /// Indicates if the write operation is blocking or non-blocking.  If blocking_write is True the OpenCL implementation copies the data referred to by ptr and enqueues the write command in the command-queue. The memory pointed to by ptr can be reused by the application after the clEnqueueWriteImage call returns.  If blocking_write is False the OpenCL implementation will use ptr to perform a nonblocking write. As the write is non-blocking the implementation can return immediately. The memory pointed to by ptr cannot be reused by the application after the call returns. The event argument returns an event object which can be used to query the execution status of the write command. When the write command has completed, the memory pointed to by ptr can then be reused by the application.
        /// </param>
        /// <param name="origin">[length: 3] 
        /// Defines the (x, y, z) offset in pixels in the 1D, 2D, or 3D image, the (x, y) offset and the image index in the image array or the (x) offset and the image index in the 1D image array.  If image is a 2D image object, origin[2] must be 0. If image is a 1D image or 1D image buffer object, origin[1] and origin[2] must be 0. If image is a 1D image array object, origin[2] must be 0.  If image is a 1D image array object, origin[1] describes the image index in the 1D image array. If image is a 2D image array object, origin[2] describes the image index in the 2D image array.
        /// </param>
        /// <param name="region">[length: 3] 
        /// Defines the (width, height, depth) in pixels of the 1D, 2D or 3D rectangle, the (width, height) in pixels of the 2D rectangle and the number of images of a 2D image array or the (width) in pixels of the 1D rectangle and the number of images of a 1D image array. If image is a 2D image object, region[2] must be 1.  If image is a 1D image or 1D image buffer object,  region[1] and region[2] must be 1. If image is a 1D image array object, region[2] must be 1.
        /// </param>
        /// <param name="input_row_pitch"> 
        /// The length of each row in bytes. This value must be greater than or equal to the element size in bytes * width. If row_pitch is set to 0, the appropriate row pitch is calculated based on the size of each element in bytes multiplied by width.
        /// </param>
        /// <param name="input_slice_pitch"> 
        /// Size in bytes of the 2D slice of the 3D region of a 3D image or each image of a 1D or 2D image array being written.  This must be 0 if image is a 1D or 2D image.  This value must be greater than or equal to row_pitch * height. If slice_pitch is set to 0, the appropriate slice pitch is calculated based on the row_pitch * height.
        /// </param>
        /// <param name="ptr"> 
        /// The pointer to a buffer in host memory where image data is to be written to.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed.  If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points.  The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed.  If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points.  The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event"> 
        /// Returns an event object that identifies this particular write command and can be used to query or queue a wait for this particular command to complete.  event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clEnqueueWriteImage")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode EnqueueWriteImage(CommandQueue command_queue, ComputeMemory image, bool blocking_write, IntPtr** origin, IntPtr** region, IntPtr input_row_pitch, IntPtr input_slice_pitch, IntPtr ptr, Int32 num_events_in_wait_list, ComputeEvent* event_wait_list, [OutAttribute] ComputeEvent* @event) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Enqueues a command to write to an image or image array object from host memory.
        /// </summary>
        /// <param name="command_queue"> 
        /// Refers to the command-queue in which the write command will be queued. command_queue and image must be created with the same OpenCL context.
        /// </param>
        /// <param name="image"> 
        /// Refers to a valid image or image array object.
        /// </param>
        /// <param name="blocking_write"> 
        /// Indicates if the write operation is blocking or non-blocking.  If blocking_write is True the OpenCL implementation copies the data referred to by ptr and enqueues the write command in the command-queue. The memory pointed to by ptr can be reused by the application after the clEnqueueWriteImage call returns.  If blocking_write is False the OpenCL implementation will use ptr to perform a nonblocking write. As the write is non-blocking the implementation can return immediately. The memory pointed to by ptr cannot be reused by the application after the call returns. The event argument returns an event object which can be used to query the execution status of the write command. When the write command has completed, the memory pointed to by ptr can then be reused by the application.
        /// </param>
        /// <param name="origin">[length: 3] 
        /// Defines the (x, y, z) offset in pixels in the 1D, 2D, or 3D image, the (x, y) offset and the image index in the image array or the (x) offset and the image index in the 1D image array.  If image is a 2D image object, origin[2] must be 0. If image is a 1D image or 1D image buffer object, origin[1] and origin[2] must be 0. If image is a 1D image array object, origin[2] must be 0.  If image is a 1D image array object, origin[1] describes the image index in the 1D image array. If image is a 2D image array object, origin[2] describes the image index in the 2D image array.
        /// </param>
        /// <param name="region">[length: 3] 
        /// Defines the (width, height, depth) in pixels of the 1D, 2D or 3D rectangle, the (width, height) in pixels of the 2D rectangle and the number of images of a 2D image array or the (width) in pixels of the 1D rectangle and the number of images of a 1D image array. If image is a 2D image object, region[2] must be 1.  If image is a 1D image or 1D image buffer object,  region[1] and region[2] must be 1. If image is a 1D image array object, region[2] must be 1.
        /// </param>
        /// <param name="input_row_pitch"> 
        /// The length of each row in bytes. This value must be greater than or equal to the element size in bytes * width. If row_pitch is set to 0, the appropriate row pitch is calculated based on the size of each element in bytes multiplied by width.
        /// </param>
        /// <param name="input_slice_pitch"> 
        /// Size in bytes of the 2D slice of the 3D region of a 3D image or each image of a 1D or 2D image array being written.  This must be 0 if image is a 1D or 2D image.  This value must be greater than or equal to row_pitch * height. If slice_pitch is set to 0, the appropriate slice pitch is calculated based on the row_pitch * height.
        /// </param>
        /// <param name="ptr"> 
        /// The pointer to a buffer in host memory where image data is to be written to.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed.  If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points.  The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed.  If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points.  The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event"> 
        /// Returns an event object that identifies this particular write command and can be used to query or queue a wait for this particular command to complete.  event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clEnqueueWriteImage")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode EnqueueWriteImage<T7>(CommandQueue command_queue, ComputeMemory image, bool blocking_write, IntPtr** origin, IntPtr** region, IntPtr input_row_pitch, IntPtr input_slice_pitch, [InAttribute, OutAttribute] T7[] ptr, Int32 num_events_in_wait_list, ComputeEvent* event_wait_list, [OutAttribute] ComputeEvent* @event)
            where T7 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Enqueues a command to write to an image or image array object from host memory.
        /// </summary>
        /// <param name="command_queue"> 
        /// Refers to the command-queue in which the write command will be queued. command_queue and image must be created with the same OpenCL context.
        /// </param>
        /// <param name="image"> 
        /// Refers to a valid image or image array object.
        /// </param>
        /// <param name="blocking_write"> 
        /// Indicates if the write operation is blocking or non-blocking.  If blocking_write is True the OpenCL implementation copies the data referred to by ptr and enqueues the write command in the command-queue. The memory pointed to by ptr can be reused by the application after the clEnqueueWriteImage call returns.  If blocking_write is False the OpenCL implementation will use ptr to perform a nonblocking write. As the write is non-blocking the implementation can return immediately. The memory pointed to by ptr cannot be reused by the application after the call returns. The event argument returns an event object which can be used to query the execution status of the write command. When the write command has completed, the memory pointed to by ptr can then be reused by the application.
        /// </param>
        /// <param name="origin">[length: 3] 
        /// Defines the (x, y, z) offset in pixels in the 1D, 2D, or 3D image, the (x, y) offset and the image index in the image array or the (x) offset and the image index in the 1D image array.  If image is a 2D image object, origin[2] must be 0. If image is a 1D image or 1D image buffer object, origin[1] and origin[2] must be 0. If image is a 1D image array object, origin[2] must be 0.  If image is a 1D image array object, origin[1] describes the image index in the 1D image array. If image is a 2D image array object, origin[2] describes the image index in the 2D image array.
        /// </param>
        /// <param name="region">[length: 3] 
        /// Defines the (width, height, depth) in pixels of the 1D, 2D or 3D rectangle, the (width, height) in pixels of the 2D rectangle and the number of images of a 2D image array or the (width) in pixels of the 1D rectangle and the number of images of a 1D image array. If image is a 2D image object, region[2] must be 1.  If image is a 1D image or 1D image buffer object,  region[1] and region[2] must be 1. If image is a 1D image array object, region[2] must be 1.
        /// </param>
        /// <param name="input_row_pitch"> 
        /// The length of each row in bytes. This value must be greater than or equal to the element size in bytes * width. If row_pitch is set to 0, the appropriate row pitch is calculated based on the size of each element in bytes multiplied by width.
        /// </param>
        /// <param name="input_slice_pitch"> 
        /// Size in bytes of the 2D slice of the 3D region of a 3D image or each image of a 1D or 2D image array being written.  This must be 0 if image is a 1D or 2D image.  This value must be greater than or equal to row_pitch * height. If slice_pitch is set to 0, the appropriate slice pitch is calculated based on the row_pitch * height.
        /// </param>
        /// <param name="ptr"> 
        /// The pointer to a buffer in host memory where image data is to be written to.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed.  If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points.  The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed.  If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points.  The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event"> 
        /// Returns an event object that identifies this particular write command and can be used to query or queue a wait for this particular command to complete.  event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clEnqueueWriteImage")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode EnqueueWriteImage<T7>(CommandQueue command_queue, ComputeMemory image, bool blocking_write, IntPtr** origin, IntPtr** region, IntPtr input_row_pitch, IntPtr input_slice_pitch, [InAttribute, OutAttribute] T7[,] ptr, Int32 num_events_in_wait_list, ComputeEvent* event_wait_list, [OutAttribute] ComputeEvent* @event)
            where T7 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Enqueues a command to write to an image or image array object from host memory.
        /// </summary>
        /// <param name="command_queue"> 
        /// Refers to the command-queue in which the write command will be queued. command_queue and image must be created with the same OpenCL context.
        /// </param>
        /// <param name="image"> 
        /// Refers to a valid image or image array object.
        /// </param>
        /// <param name="blocking_write"> 
        /// Indicates if the write operation is blocking or non-blocking.  If blocking_write is True the OpenCL implementation copies the data referred to by ptr and enqueues the write command in the command-queue. The memory pointed to by ptr can be reused by the application after the clEnqueueWriteImage call returns.  If blocking_write is False the OpenCL implementation will use ptr to perform a nonblocking write. As the write is non-blocking the implementation can return immediately. The memory pointed to by ptr cannot be reused by the application after the call returns. The event argument returns an event object which can be used to query the execution status of the write command. When the write command has completed, the memory pointed to by ptr can then be reused by the application.
        /// </param>
        /// <param name="origin">[length: 3] 
        /// Defines the (x, y, z) offset in pixels in the 1D, 2D, or 3D image, the (x, y) offset and the image index in the image array or the (x) offset and the image index in the 1D image array.  If image is a 2D image object, origin[2] must be 0. If image is a 1D image or 1D image buffer object, origin[1] and origin[2] must be 0. If image is a 1D image array object, origin[2] must be 0.  If image is a 1D image array object, origin[1] describes the image index in the 1D image array. If image is a 2D image array object, origin[2] describes the image index in the 2D image array.
        /// </param>
        /// <param name="region">[length: 3] 
        /// Defines the (width, height, depth) in pixels of the 1D, 2D or 3D rectangle, the (width, height) in pixels of the 2D rectangle and the number of images of a 2D image array or the (width) in pixels of the 1D rectangle and the number of images of a 1D image array. If image is a 2D image object, region[2] must be 1.  If image is a 1D image or 1D image buffer object,  region[1] and region[2] must be 1. If image is a 1D image array object, region[2] must be 1.
        /// </param>
        /// <param name="input_row_pitch"> 
        /// The length of each row in bytes. This value must be greater than or equal to the element size in bytes * width. If row_pitch is set to 0, the appropriate row pitch is calculated based on the size of each element in bytes multiplied by width.
        /// </param>
        /// <param name="input_slice_pitch"> 
        /// Size in bytes of the 2D slice of the 3D region of a 3D image or each image of a 1D or 2D image array being written.  This must be 0 if image is a 1D or 2D image.  This value must be greater than or equal to row_pitch * height. If slice_pitch is set to 0, the appropriate slice pitch is calculated based on the row_pitch * height.
        /// </param>
        /// <param name="ptr"> 
        /// The pointer to a buffer in host memory where image data is to be written to.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed.  If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points.  The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed.  If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points.  The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event"> 
        /// Returns an event object that identifies this particular write command and can be used to query or queue a wait for this particular command to complete.  event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clEnqueueWriteImage")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode EnqueueWriteImage<T7>(CommandQueue command_queue, ComputeMemory image, bool blocking_write, IntPtr** origin, IntPtr** region, IntPtr input_row_pitch, IntPtr input_slice_pitch, [InAttribute, OutAttribute] T7[,,] ptr, Int32 num_events_in_wait_list, ComputeEvent* event_wait_list, [OutAttribute] ComputeEvent* @event)
            where T7 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Enqueues a command to write to an image or image array object from host memory.
        /// </summary>
        /// <param name="command_queue"> 
        /// Refers to the command-queue in which the write command will be queued. command_queue and image must be created with the same OpenCL context.
        /// </param>
        /// <param name="image"> 
        /// Refers to a valid image or image array object.
        /// </param>
        /// <param name="blocking_write"> 
        /// Indicates if the write operation is blocking or non-blocking.  If blocking_write is True the OpenCL implementation copies the data referred to by ptr and enqueues the write command in the command-queue. The memory pointed to by ptr can be reused by the application after the clEnqueueWriteImage call returns.  If blocking_write is False the OpenCL implementation will use ptr to perform a nonblocking write. As the write is non-blocking the implementation can return immediately. The memory pointed to by ptr cannot be reused by the application after the call returns. The event argument returns an event object which can be used to query the execution status of the write command. When the write command has completed, the memory pointed to by ptr can then be reused by the application.
        /// </param>
        /// <param name="origin">[length: 3] 
        /// Defines the (x, y, z) offset in pixels in the 1D, 2D, or 3D image, the (x, y) offset and the image index in the image array or the (x) offset and the image index in the 1D image array.  If image is a 2D image object, origin[2] must be 0. If image is a 1D image or 1D image buffer object, origin[1] and origin[2] must be 0. If image is a 1D image array object, origin[2] must be 0.  If image is a 1D image array object, origin[1] describes the image index in the 1D image array. If image is a 2D image array object, origin[2] describes the image index in the 2D image array.
        /// </param>
        /// <param name="region">[length: 3] 
        /// Defines the (width, height, depth) in pixels of the 1D, 2D or 3D rectangle, the (width, height) in pixels of the 2D rectangle and the number of images of a 2D image array or the (width) in pixels of the 1D rectangle and the number of images of a 1D image array. If image is a 2D image object, region[2] must be 1.  If image is a 1D image or 1D image buffer object,  region[1] and region[2] must be 1. If image is a 1D image array object, region[2] must be 1.
        /// </param>
        /// <param name="input_row_pitch"> 
        /// The length of each row in bytes. This value must be greater than or equal to the element size in bytes * width. If row_pitch is set to 0, the appropriate row pitch is calculated based on the size of each element in bytes multiplied by width.
        /// </param>
        /// <param name="input_slice_pitch"> 
        /// Size in bytes of the 2D slice of the 3D region of a 3D image or each image of a 1D or 2D image array being written.  This must be 0 if image is a 1D or 2D image.  This value must be greater than or equal to row_pitch * height. If slice_pitch is set to 0, the appropriate slice pitch is calculated based on the row_pitch * height.
        /// </param>
        /// <param name="ptr"> 
        /// The pointer to a buffer in host memory where image data is to be written to.
        /// </param>
        /// <param name="num_events_in_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed.  If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points.  The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event_wait_list"> 
        /// Specify events that need to complete before this particular command can be executed.  If event_wait_list is NULL, then this particular command does not wait on any event to complete. If event_wait_list is NULL, num_events_in_wait_list must be 0. If event_wait_list is not NULL, the list of events pointed to by event_wait_list must be valid and num_events_in_wait_list must be greater than 0. The events specified in event_wait_list act as synchronization points.  The context associated with events in event_wait_list and command_queue must be the same. The memory associated with event_wait_list can be reused or freed after the function returns.
        /// </param>
        /// <param name="event"> 
        /// Returns an event object that identifies this particular write command and can be used to query or queue a wait for this particular command to complete.  event can be NULL in which case it will not be possible for the application to query the status of this command or queue a wait for this command to complete.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clEnqueueWriteImage")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode EnqueueWriteImage<T7>(CommandQueue command_queue, ComputeMemory image, bool blocking_write, IntPtr** origin, IntPtr** region, IntPtr input_row_pitch, IntPtr input_slice_pitch, [InAttribute, OutAttribute] ref T7 ptr, Int32 num_events_in_wait_list, ComputeEvent* event_wait_list, [OutAttribute] ComputeEvent* @event)
            where T7 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Blocks until all previously queued OpenCL commands in a command-queue are issued to the associated device and have completed.
        /// </summary>
        /// <param name="command_queue"></param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clFinish")]
        public static ErrorCode Finish(CommandQueue command_queue) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Issues all previously queued OpenCL commands in a command-queue to the device associated with the command-queue.
        /// </summary>
        /// <param name="command_queue"></param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clFlush")]
        public static ErrorCode Flush(CommandQueue command_queue) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Query information about a command-queue.
        /// </summary>
        /// <param name="command_queue"> 
        /// Specifies the command-queue being queried.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the information to query.
        /// </param>
        /// <param name="param_value_size"> 
        /// Specifies the size in bytes of memory pointed to by param_value. This size must be ≥ size of return type as described in the table below. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data being queried by param_value. If param_value_size_ret is NULL, it is ignored
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetCommandQueueInfo")]
        [CLSCompliant(false)]
        public static ErrorCode GetCommandQueueInfo(CommandQueue command_queue, OpenTK.Compute.CL12.CommandQueueInfo param_name, IntPtr param_value_size, IntPtr param_value, [OutAttribute] IntPtr[] param_value_size_ret) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Query information about a command-queue.
        /// </summary>
        /// <param name="command_queue"> 
        /// Specifies the command-queue being queried.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the information to query.
        /// </param>
        /// <param name="param_value_size"> 
        /// Specifies the size in bytes of memory pointed to by param_value. This size must be ≥ size of return type as described in the table below. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data being queried by param_value. If param_value_size_ret is NULL, it is ignored
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetCommandQueueInfo")]
        [CLSCompliant(false)]
        public static ErrorCode GetCommandQueueInfo(CommandQueue command_queue, OpenTK.Compute.CL12.CommandQueueInfo param_name, IntPtr param_value_size, IntPtr param_value, [OutAttribute] out IntPtr param_value_size_ret) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Query information about a command-queue.
        /// </summary>
        /// <param name="command_queue"> 
        /// Specifies the command-queue being queried.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the information to query.
        /// </param>
        /// <param name="param_value_size"> 
        /// Specifies the size in bytes of memory pointed to by param_value. This size must be ≥ size of return type as described in the table below. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data being queried by param_value. If param_value_size_ret is NULL, it is ignored
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetCommandQueueInfo")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode GetCommandQueueInfo(CommandQueue command_queue, OpenTK.Compute.CL12.CommandQueueInfo param_name, IntPtr param_value_size, IntPtr param_value, [OutAttribute] IntPtr* param_value_size_ret) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Query information about a command-queue.
        /// </summary>
        /// <param name="command_queue"> 
        /// Specifies the command-queue being queried.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the information to query.
        /// </param>
        /// <param name="param_value_size"> 
        /// Specifies the size in bytes of memory pointed to by param_value. This size must be ≥ size of return type as described in the table below. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data being queried by param_value. If param_value_size_ret is NULL, it is ignored
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetCommandQueueInfo")]
        [CLSCompliant(false)]
        public static ErrorCode GetCommandQueueInfo<T3>(CommandQueue command_queue, OpenTK.Compute.CL12.CommandQueueInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] T3[] param_value, [OutAttribute] IntPtr[] param_value_size_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Query information about a command-queue.
        /// </summary>
        /// <param name="command_queue"> 
        /// Specifies the command-queue being queried.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the information to query.
        /// </param>
        /// <param name="param_value_size"> 
        /// Specifies the size in bytes of memory pointed to by param_value. This size must be ≥ size of return type as described in the table below. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data being queried by param_value. If param_value_size_ret is NULL, it is ignored
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetCommandQueueInfo")]
        [CLSCompliant(false)]
        public static ErrorCode GetCommandQueueInfo<T3>(CommandQueue command_queue, OpenTK.Compute.CL12.CommandQueueInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] T3[] param_value, [OutAttribute] out IntPtr param_value_size_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Query information about a command-queue.
        /// </summary>
        /// <param name="command_queue"> 
        /// Specifies the command-queue being queried.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the information to query.
        /// </param>
        /// <param name="param_value_size"> 
        /// Specifies the size in bytes of memory pointed to by param_value. This size must be ≥ size of return type as described in the table below. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data being queried by param_value. If param_value_size_ret is NULL, it is ignored
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetCommandQueueInfo")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode GetCommandQueueInfo<T3>(CommandQueue command_queue, OpenTK.Compute.CL12.CommandQueueInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] T3[] param_value, [OutAttribute] IntPtr* param_value_size_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Query information about a command-queue.
        /// </summary>
        /// <param name="command_queue"> 
        /// Specifies the command-queue being queried.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the information to query.
        /// </param>
        /// <param name="param_value_size"> 
        /// Specifies the size in bytes of memory pointed to by param_value. This size must be ≥ size of return type as described in the table below. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data being queried by param_value. If param_value_size_ret is NULL, it is ignored
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetCommandQueueInfo")]
        [CLSCompliant(false)]
        public static ErrorCode GetCommandQueueInfo<T3>(CommandQueue command_queue, OpenTK.Compute.CL12.CommandQueueInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] T3[,] param_value, [OutAttribute] IntPtr[] param_value_size_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Query information about a command-queue.
        /// </summary>
        /// <param name="command_queue"> 
        /// Specifies the command-queue being queried.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the information to query.
        /// </param>
        /// <param name="param_value_size"> 
        /// Specifies the size in bytes of memory pointed to by param_value. This size must be ≥ size of return type as described in the table below. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data being queried by param_value. If param_value_size_ret is NULL, it is ignored
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetCommandQueueInfo")]
        [CLSCompliant(false)]
        public static ErrorCode GetCommandQueueInfo<T3>(CommandQueue command_queue, OpenTK.Compute.CL12.CommandQueueInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] T3[,] param_value, [OutAttribute] out IntPtr param_value_size_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Query information about a command-queue.
        /// </summary>
        /// <param name="command_queue"> 
        /// Specifies the command-queue being queried.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the information to query.
        /// </param>
        /// <param name="param_value_size"> 
        /// Specifies the size in bytes of memory pointed to by param_value. This size must be ≥ size of return type as described in the table below. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data being queried by param_value. If param_value_size_ret is NULL, it is ignored
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetCommandQueueInfo")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode GetCommandQueueInfo<T3>(CommandQueue command_queue, OpenTK.Compute.CL12.CommandQueueInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] T3[,] param_value, [OutAttribute] IntPtr* param_value_size_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Query information about a command-queue.
        /// </summary>
        /// <param name="command_queue"> 
        /// Specifies the command-queue being queried.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the information to query.
        /// </param>
        /// <param name="param_value_size"> 
        /// Specifies the size in bytes of memory pointed to by param_value. This size must be ≥ size of return type as described in the table below. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data being queried by param_value. If param_value_size_ret is NULL, it is ignored
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetCommandQueueInfo")]
        [CLSCompliant(false)]
        public static ErrorCode GetCommandQueueInfo<T3>(CommandQueue command_queue, OpenTK.Compute.CL12.CommandQueueInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] T3[,,] param_value, [OutAttribute] IntPtr[] param_value_size_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Query information about a command-queue.
        /// </summary>
        /// <param name="command_queue"> 
        /// Specifies the command-queue being queried.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the information to query.
        /// </param>
        /// <param name="param_value_size"> 
        /// Specifies the size in bytes of memory pointed to by param_value. This size must be ≥ size of return type as described in the table below. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data being queried by param_value. If param_value_size_ret is NULL, it is ignored
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetCommandQueueInfo")]
        [CLSCompliant(false)]
        public static ErrorCode GetCommandQueueInfo<T3>(CommandQueue command_queue, OpenTK.Compute.CL12.CommandQueueInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] T3[,,] param_value, [OutAttribute] out IntPtr param_value_size_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Query information about a command-queue.
        /// </summary>
        /// <param name="command_queue"> 
        /// Specifies the command-queue being queried.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the information to query.
        /// </param>
        /// <param name="param_value_size"> 
        /// Specifies the size in bytes of memory pointed to by param_value. This size must be ≥ size of return type as described in the table below. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data being queried by param_value. If param_value_size_ret is NULL, it is ignored
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetCommandQueueInfo")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode GetCommandQueueInfo<T3>(CommandQueue command_queue, OpenTK.Compute.CL12.CommandQueueInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] T3[,,] param_value, [OutAttribute] IntPtr* param_value_size_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Query information about a command-queue.
        /// </summary>
        /// <param name="command_queue"> 
        /// Specifies the command-queue being queried.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the information to query.
        /// </param>
        /// <param name="param_value_size"> 
        /// Specifies the size in bytes of memory pointed to by param_value. This size must be ≥ size of return type as described in the table below. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data being queried by param_value. If param_value_size_ret is NULL, it is ignored
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetCommandQueueInfo")]
        [CLSCompliant(false)]
        public static ErrorCode GetCommandQueueInfo<T3>(CommandQueue command_queue, OpenTK.Compute.CL12.CommandQueueInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] ref T3 param_value, [OutAttribute] IntPtr[] param_value_size_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Query information about a command-queue.
        /// </summary>
        /// <param name="command_queue"> 
        /// Specifies the command-queue being queried.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the information to query.
        /// </param>
        /// <param name="param_value_size"> 
        /// Specifies the size in bytes of memory pointed to by param_value. This size must be ≥ size of return type as described in the table below. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data being queried by param_value. If param_value_size_ret is NULL, it is ignored
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetCommandQueueInfo")]
        [CLSCompliant(false)]
        public static ErrorCode GetCommandQueueInfo<T3>(CommandQueue command_queue, OpenTK.Compute.CL12.CommandQueueInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] ref T3 param_value, [OutAttribute] out IntPtr param_value_size_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Query information about a command-queue.
        /// </summary>
        /// <param name="command_queue"> 
        /// Specifies the command-queue being queried.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the information to query.
        /// </param>
        /// <param name="param_value_size"> 
        /// Specifies the size in bytes of memory pointed to by param_value. This size must be ≥ size of return type as described in the table below. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data being queried by param_value. If param_value_size_ret is NULL, it is ignored
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetCommandQueueInfo")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode GetCommandQueueInfo<T3>(CommandQueue command_queue, OpenTK.Compute.CL12.CommandQueueInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] ref T3 param_value, [OutAttribute] IntPtr* param_value_size_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Query information about a context.
        /// </summary>
        /// <param name="context"> 
        /// Specifies the OpenCL context being queried.
        /// </param>
        /// <param name="param_name"> 
        /// An enumeration constant that specifies the information to query. The valid values for param_name are: cl_context_infoReturn TypeInformation returned in param_valueContextReferenceCountcl_uint Return the context reference count. The reference count returned should be considered immediately stale. It is unsuitable for general use in applications. This feature is provided for identifying memory leaks. ContextNumDevicescl_uint Return the number of devices in context. ContextDevicescl_device_id[] Return the list of devices in context. ContextPropertiescl_context_- properties[] Return the properties argument specified in clCreateContext or clCreateContextFromType. If the properties argument specified in clCreateContext or clCreateContextFromType used to create context is not NULL, the implementation must return the values specified in the properties argument.   If the properties argument specified in clCreateContext or clCreateContextFromType used to create context is NULL, the implementation may return either a param_value_size_ret of 0, i.e. there is no context property value to be returned or can return a context property value of 0 (where 0 is used to terminate the context properties list) in the memory that param_value points to.  ContextD3D10Prefer sharedResourcesKhrcl_bool If the cl_khr_d3d10_sharing extension is enabled, returns CL_TRUE if Direct3D 10 resources created as shared by setting MiscFlags to include D3D10ResourceMiscShared will perform faster when shared with OpenCL, compared with resources which have not set this flag. Otherwise returns False. ContextD3D11Prefer sharedResourcesKhrcl_bool If the cl_khr_d3d11_sharing extension is supported, Returns True if Direct3D 11 resources created as shared by setting MiscFlags to include D3D11ResourceMiscShared will perform faster when shared with OpenCL, compared with resources which have not set this flag. Otherwise returns False.
        /// </param>
        /// <param name="param_value_size"> 
        /// Specifies the size in bytes of memory pointed to by param_value.  This size must be greater than or equal to the size of return type as described in the table above.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data being queried by param_value. If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetContextInfo")]
        [CLSCompliant(false)]
        public static ErrorCode GetContextInfo(ComputeContext context, OpenTK.Compute.CL12.ContextInfo param_name, IntPtr param_value_size, IntPtr param_value, [OutAttribute] out IntPtr param_value_size_ret) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Query information about a context.
        /// </summary>
        /// <param name="context"> 
        /// Specifies the OpenCL context being queried.
        /// </param>
        /// <param name="param_name"> 
        /// An enumeration constant that specifies the information to query. The valid values for param_name are: cl_context_infoReturn TypeInformation returned in param_valueContextReferenceCountcl_uint Return the context reference count. The reference count returned should be considered immediately stale. It is unsuitable for general use in applications. This feature is provided for identifying memory leaks. ContextNumDevicescl_uint Return the number of devices in context. ContextDevicescl_device_id[] Return the list of devices in context. ContextPropertiescl_context_- properties[] Return the properties argument specified in clCreateContext or clCreateContextFromType. If the properties argument specified in clCreateContext or clCreateContextFromType used to create context is not NULL, the implementation must return the values specified in the properties argument.   If the properties argument specified in clCreateContext or clCreateContextFromType used to create context is NULL, the implementation may return either a param_value_size_ret of 0, i.e. there is no context property value to be returned or can return a context property value of 0 (where 0 is used to terminate the context properties list) in the memory that param_value points to.  ContextD3D10Prefer sharedResourcesKhrcl_bool If the cl_khr_d3d10_sharing extension is enabled, returns CL_TRUE if Direct3D 10 resources created as shared by setting MiscFlags to include D3D10ResourceMiscShared will perform faster when shared with OpenCL, compared with resources which have not set this flag. Otherwise returns False. ContextD3D11Prefer sharedResourcesKhrcl_bool If the cl_khr_d3d11_sharing extension is supported, Returns True if Direct3D 11 resources created as shared by setting MiscFlags to include D3D11ResourceMiscShared will perform faster when shared with OpenCL, compared with resources which have not set this flag. Otherwise returns False.
        /// </param>
        /// <param name="param_value_size"> 
        /// Specifies the size in bytes of memory pointed to by param_value.  This size must be greater than or equal to the size of return type as described in the table above.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data being queried by param_value. If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetContextInfo")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode GetContextInfo(ComputeContext context, OpenTK.Compute.CL12.ContextInfo param_name, IntPtr param_value_size, IntPtr param_value, [OutAttribute] IntPtr* param_value_size_ret) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Query information about a context.
        /// </summary>
        /// <param name="context"> 
        /// Specifies the OpenCL context being queried.
        /// </param>
        /// <param name="param_name"> 
        /// An enumeration constant that specifies the information to query. The valid values for param_name are: cl_context_infoReturn TypeInformation returned in param_valueContextReferenceCountcl_uint Return the context reference count. The reference count returned should be considered immediately stale. It is unsuitable for general use in applications. This feature is provided for identifying memory leaks. ContextNumDevicescl_uint Return the number of devices in context. ContextDevicescl_device_id[] Return the list of devices in context. ContextPropertiescl_context_- properties[] Return the properties argument specified in clCreateContext or clCreateContextFromType. If the properties argument specified in clCreateContext or clCreateContextFromType used to create context is not NULL, the implementation must return the values specified in the properties argument.   If the properties argument specified in clCreateContext or clCreateContextFromType used to create context is NULL, the implementation may return either a param_value_size_ret of 0, i.e. there is no context property value to be returned or can return a context property value of 0 (where 0 is used to terminate the context properties list) in the memory that param_value points to.  ContextD3D10Prefer sharedResourcesKhrcl_bool If the cl_khr_d3d10_sharing extension is enabled, returns CL_TRUE if Direct3D 10 resources created as shared by setting MiscFlags to include D3D10ResourceMiscShared will perform faster when shared with OpenCL, compared with resources which have not set this flag. Otherwise returns False. ContextD3D11Prefer sharedResourcesKhrcl_bool If the cl_khr_d3d11_sharing extension is supported, Returns True if Direct3D 11 resources created as shared by setting MiscFlags to include D3D11ResourceMiscShared will perform faster when shared with OpenCL, compared with resources which have not set this flag. Otherwise returns False.
        /// </param>
        /// <param name="param_value_size"> 
        /// Specifies the size in bytes of memory pointed to by param_value.  This size must be greater than or equal to the size of return type as described in the table above.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data being queried by param_value. If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetContextInfo")]
        [CLSCompliant(false)]
        public static ErrorCode GetContextInfo<T3>(ComputeContext context, OpenTK.Compute.CL12.ContextInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] T3[] param_value, [OutAttribute] out IntPtr param_value_size_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Query information about a context.
        /// </summary>
        /// <param name="context"> 
        /// Specifies the OpenCL context being queried.
        /// </param>
        /// <param name="param_name"> 
        /// An enumeration constant that specifies the information to query. The valid values for param_name are: cl_context_infoReturn TypeInformation returned in param_valueContextReferenceCountcl_uint Return the context reference count. The reference count returned should be considered immediately stale. It is unsuitable for general use in applications. This feature is provided for identifying memory leaks. ContextNumDevicescl_uint Return the number of devices in context. ContextDevicescl_device_id[] Return the list of devices in context. ContextPropertiescl_context_- properties[] Return the properties argument specified in clCreateContext or clCreateContextFromType. If the properties argument specified in clCreateContext or clCreateContextFromType used to create context is not NULL, the implementation must return the values specified in the properties argument.   If the properties argument specified in clCreateContext or clCreateContextFromType used to create context is NULL, the implementation may return either a param_value_size_ret of 0, i.e. there is no context property value to be returned or can return a context property value of 0 (where 0 is used to terminate the context properties list) in the memory that param_value points to.  ContextD3D10Prefer sharedResourcesKhrcl_bool If the cl_khr_d3d10_sharing extension is enabled, returns CL_TRUE if Direct3D 10 resources created as shared by setting MiscFlags to include D3D10ResourceMiscShared will perform faster when shared with OpenCL, compared with resources which have not set this flag. Otherwise returns False. ContextD3D11Prefer sharedResourcesKhrcl_bool If the cl_khr_d3d11_sharing extension is supported, Returns True if Direct3D 11 resources created as shared by setting MiscFlags to include D3D11ResourceMiscShared will perform faster when shared with OpenCL, compared with resources which have not set this flag. Otherwise returns False.
        /// </param>
        /// <param name="param_value_size"> 
        /// Specifies the size in bytes of memory pointed to by param_value.  This size must be greater than or equal to the size of return type as described in the table above.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data being queried by param_value. If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetContextInfo")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode GetContextInfo<T3>(ComputeContext context, OpenTK.Compute.CL12.ContextInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] T3[] param_value, [OutAttribute] IntPtr* param_value_size_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Query information about a context.
        /// </summary>
        /// <param name="context"> 
        /// Specifies the OpenCL context being queried.
        /// </param>
        /// <param name="param_name"> 
        /// An enumeration constant that specifies the information to query. The valid values for param_name are: cl_context_infoReturn TypeInformation returned in param_valueContextReferenceCountcl_uint Return the context reference count. The reference count returned should be considered immediately stale. It is unsuitable for general use in applications. This feature is provided for identifying memory leaks. ContextNumDevicescl_uint Return the number of devices in context. ContextDevicescl_device_id[] Return the list of devices in context. ContextPropertiescl_context_- properties[] Return the properties argument specified in clCreateContext or clCreateContextFromType. If the properties argument specified in clCreateContext or clCreateContextFromType used to create context is not NULL, the implementation must return the values specified in the properties argument.   If the properties argument specified in clCreateContext or clCreateContextFromType used to create context is NULL, the implementation may return either a param_value_size_ret of 0, i.e. there is no context property value to be returned or can return a context property value of 0 (where 0 is used to terminate the context properties list) in the memory that param_value points to.  ContextD3D10Prefer sharedResourcesKhrcl_bool If the cl_khr_d3d10_sharing extension is enabled, returns CL_TRUE if Direct3D 10 resources created as shared by setting MiscFlags to include D3D10ResourceMiscShared will perform faster when shared with OpenCL, compared with resources which have not set this flag. Otherwise returns False. ContextD3D11Prefer sharedResourcesKhrcl_bool If the cl_khr_d3d11_sharing extension is supported, Returns True if Direct3D 11 resources created as shared by setting MiscFlags to include D3D11ResourceMiscShared will perform faster when shared with OpenCL, compared with resources which have not set this flag. Otherwise returns False.
        /// </param>
        /// <param name="param_value_size"> 
        /// Specifies the size in bytes of memory pointed to by param_value.  This size must be greater than or equal to the size of return type as described in the table above.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data being queried by param_value. If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetContextInfo")]
        [CLSCompliant(false)]
        public static ErrorCode GetContextInfo<T3>(ComputeContext context, OpenTK.Compute.CL12.ContextInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] T3[,] param_value, [OutAttribute] out IntPtr param_value_size_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Query information about a context.
        /// </summary>
        /// <param name="context"> 
        /// Specifies the OpenCL context being queried.
        /// </param>
        /// <param name="param_name"> 
        /// An enumeration constant that specifies the information to query. The valid values for param_name are: cl_context_infoReturn TypeInformation returned in param_valueContextReferenceCountcl_uint Return the context reference count. The reference count returned should be considered immediately stale. It is unsuitable for general use in applications. This feature is provided for identifying memory leaks. ContextNumDevicescl_uint Return the number of devices in context. ContextDevicescl_device_id[] Return the list of devices in context. ContextPropertiescl_context_- properties[] Return the properties argument specified in clCreateContext or clCreateContextFromType. If the properties argument specified in clCreateContext or clCreateContextFromType used to create context is not NULL, the implementation must return the values specified in the properties argument.   If the properties argument specified in clCreateContext or clCreateContextFromType used to create context is NULL, the implementation may return either a param_value_size_ret of 0, i.e. there is no context property value to be returned or can return a context property value of 0 (where 0 is used to terminate the context properties list) in the memory that param_value points to.  ContextD3D10Prefer sharedResourcesKhrcl_bool If the cl_khr_d3d10_sharing extension is enabled, returns CL_TRUE if Direct3D 10 resources created as shared by setting MiscFlags to include D3D10ResourceMiscShared will perform faster when shared with OpenCL, compared with resources which have not set this flag. Otherwise returns False. ContextD3D11Prefer sharedResourcesKhrcl_bool If the cl_khr_d3d11_sharing extension is supported, Returns True if Direct3D 11 resources created as shared by setting MiscFlags to include D3D11ResourceMiscShared will perform faster when shared with OpenCL, compared with resources which have not set this flag. Otherwise returns False.
        /// </param>
        /// <param name="param_value_size"> 
        /// Specifies the size in bytes of memory pointed to by param_value.  This size must be greater than or equal to the size of return type as described in the table above.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data being queried by param_value. If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetContextInfo")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode GetContextInfo<T3>(ComputeContext context, OpenTK.Compute.CL12.ContextInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] T3[,] param_value, [OutAttribute] IntPtr* param_value_size_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Query information about a context.
        /// </summary>
        /// <param name="context"> 
        /// Specifies the OpenCL context being queried.
        /// </param>
        /// <param name="param_name"> 
        /// An enumeration constant that specifies the information to query. The valid values for param_name are: cl_context_infoReturn TypeInformation returned in param_valueContextReferenceCountcl_uint Return the context reference count. The reference count returned should be considered immediately stale. It is unsuitable for general use in applications. This feature is provided for identifying memory leaks. ContextNumDevicescl_uint Return the number of devices in context. ContextDevicescl_device_id[] Return the list of devices in context. ContextPropertiescl_context_- properties[] Return the properties argument specified in clCreateContext or clCreateContextFromType. If the properties argument specified in clCreateContext or clCreateContextFromType used to create context is not NULL, the implementation must return the values specified in the properties argument.   If the properties argument specified in clCreateContext or clCreateContextFromType used to create context is NULL, the implementation may return either a param_value_size_ret of 0, i.e. there is no context property value to be returned or can return a context property value of 0 (where 0 is used to terminate the context properties list) in the memory that param_value points to.  ContextD3D10Prefer sharedResourcesKhrcl_bool If the cl_khr_d3d10_sharing extension is enabled, returns CL_TRUE if Direct3D 10 resources created as shared by setting MiscFlags to include D3D10ResourceMiscShared will perform faster when shared with OpenCL, compared with resources which have not set this flag. Otherwise returns False. ContextD3D11Prefer sharedResourcesKhrcl_bool If the cl_khr_d3d11_sharing extension is supported, Returns True if Direct3D 11 resources created as shared by setting MiscFlags to include D3D11ResourceMiscShared will perform faster when shared with OpenCL, compared with resources which have not set this flag. Otherwise returns False.
        /// </param>
        /// <param name="param_value_size"> 
        /// Specifies the size in bytes of memory pointed to by param_value.  This size must be greater than or equal to the size of return type as described in the table above.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data being queried by param_value. If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetContextInfo")]
        [CLSCompliant(false)]
        public static ErrorCode GetContextInfo<T3>(ComputeContext context, OpenTK.Compute.CL12.ContextInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] T3[,,] param_value, [OutAttribute] out IntPtr param_value_size_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Query information about a context.
        /// </summary>
        /// <param name="context"> 
        /// Specifies the OpenCL context being queried.
        /// </param>
        /// <param name="param_name"> 
        /// An enumeration constant that specifies the information to query. The valid values for param_name are: cl_context_infoReturn TypeInformation returned in param_valueContextReferenceCountcl_uint Return the context reference count. The reference count returned should be considered immediately stale. It is unsuitable for general use in applications. This feature is provided for identifying memory leaks. ContextNumDevicescl_uint Return the number of devices in context. ContextDevicescl_device_id[] Return the list of devices in context. ContextPropertiescl_context_- properties[] Return the properties argument specified in clCreateContext or clCreateContextFromType. If the properties argument specified in clCreateContext or clCreateContextFromType used to create context is not NULL, the implementation must return the values specified in the properties argument.   If the properties argument specified in clCreateContext or clCreateContextFromType used to create context is NULL, the implementation may return either a param_value_size_ret of 0, i.e. there is no context property value to be returned or can return a context property value of 0 (where 0 is used to terminate the context properties list) in the memory that param_value points to.  ContextD3D10Prefer sharedResourcesKhrcl_bool If the cl_khr_d3d10_sharing extension is enabled, returns CL_TRUE if Direct3D 10 resources created as shared by setting MiscFlags to include D3D10ResourceMiscShared will perform faster when shared with OpenCL, compared with resources which have not set this flag. Otherwise returns False. ContextD3D11Prefer sharedResourcesKhrcl_bool If the cl_khr_d3d11_sharing extension is supported, Returns True if Direct3D 11 resources created as shared by setting MiscFlags to include D3D11ResourceMiscShared will perform faster when shared with OpenCL, compared with resources which have not set this flag. Otherwise returns False.
        /// </param>
        /// <param name="param_value_size"> 
        /// Specifies the size in bytes of memory pointed to by param_value.  This size must be greater than or equal to the size of return type as described in the table above.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data being queried by param_value. If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetContextInfo")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode GetContextInfo<T3>(ComputeContext context, OpenTK.Compute.CL12.ContextInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] T3[,,] param_value, [OutAttribute] IntPtr* param_value_size_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Query information about a context.
        /// </summary>
        /// <param name="context"> 
        /// Specifies the OpenCL context being queried.
        /// </param>
        /// <param name="param_name"> 
        /// An enumeration constant that specifies the information to query. The valid values for param_name are: cl_context_infoReturn TypeInformation returned in param_valueContextReferenceCountcl_uint Return the context reference count. The reference count returned should be considered immediately stale. It is unsuitable for general use in applications. This feature is provided for identifying memory leaks. ContextNumDevicescl_uint Return the number of devices in context. ContextDevicescl_device_id[] Return the list of devices in context. ContextPropertiescl_context_- properties[] Return the properties argument specified in clCreateContext or clCreateContextFromType. If the properties argument specified in clCreateContext or clCreateContextFromType used to create context is not NULL, the implementation must return the values specified in the properties argument.   If the properties argument specified in clCreateContext or clCreateContextFromType used to create context is NULL, the implementation may return either a param_value_size_ret of 0, i.e. there is no context property value to be returned or can return a context property value of 0 (where 0 is used to terminate the context properties list) in the memory that param_value points to.  ContextD3D10Prefer sharedResourcesKhrcl_bool If the cl_khr_d3d10_sharing extension is enabled, returns CL_TRUE if Direct3D 10 resources created as shared by setting MiscFlags to include D3D10ResourceMiscShared will perform faster when shared with OpenCL, compared with resources which have not set this flag. Otherwise returns False. ContextD3D11Prefer sharedResourcesKhrcl_bool If the cl_khr_d3d11_sharing extension is supported, Returns True if Direct3D 11 resources created as shared by setting MiscFlags to include D3D11ResourceMiscShared will perform faster when shared with OpenCL, compared with resources which have not set this flag. Otherwise returns False.
        /// </param>
        /// <param name="param_value_size"> 
        /// Specifies the size in bytes of memory pointed to by param_value.  This size must be greater than or equal to the size of return type as described in the table above.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data being queried by param_value. If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetContextInfo")]
        [CLSCompliant(false)]
        public static ErrorCode GetContextInfo<T3>(ComputeContext context, OpenTK.Compute.CL12.ContextInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] ref T3 param_value, [OutAttribute] out IntPtr param_value_size_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Query information about a context.
        /// </summary>
        /// <param name="context"> 
        /// Specifies the OpenCL context being queried.
        /// </param>
        /// <param name="param_name"> 
        /// An enumeration constant that specifies the information to query. The valid values for param_name are: cl_context_infoReturn TypeInformation returned in param_valueContextReferenceCountcl_uint Return the context reference count. The reference count returned should be considered immediately stale. It is unsuitable for general use in applications. This feature is provided for identifying memory leaks. ContextNumDevicescl_uint Return the number of devices in context. ContextDevicescl_device_id[] Return the list of devices in context. ContextPropertiescl_context_- properties[] Return the properties argument specified in clCreateContext or clCreateContextFromType. If the properties argument specified in clCreateContext or clCreateContextFromType used to create context is not NULL, the implementation must return the values specified in the properties argument.   If the properties argument specified in clCreateContext or clCreateContextFromType used to create context is NULL, the implementation may return either a param_value_size_ret of 0, i.e. there is no context property value to be returned or can return a context property value of 0 (where 0 is used to terminate the context properties list) in the memory that param_value points to.  ContextD3D10Prefer sharedResourcesKhrcl_bool If the cl_khr_d3d10_sharing extension is enabled, returns CL_TRUE if Direct3D 10 resources created as shared by setting MiscFlags to include D3D10ResourceMiscShared will perform faster when shared with OpenCL, compared with resources which have not set this flag. Otherwise returns False. ContextD3D11Prefer sharedResourcesKhrcl_bool If the cl_khr_d3d11_sharing extension is supported, Returns True if Direct3D 11 resources created as shared by setting MiscFlags to include D3D11ResourceMiscShared will perform faster when shared with OpenCL, compared with resources which have not set this flag. Otherwise returns False.
        /// </param>
        /// <param name="param_value_size"> 
        /// Specifies the size in bytes of memory pointed to by param_value.  This size must be greater than or equal to the size of return type as described in the table above.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data being queried by param_value. If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetContextInfo")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode GetContextInfo<T3>(ComputeContext context, OpenTK.Compute.CL12.ContextInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] ref T3 param_value, [OutAttribute] IntPtr* param_value_size_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Obtain the list of devices available on a platform.
        /// </summary>
        /// <param name="platform"> 
        /// Refers to the platform ID returned by clGetPlatformIDs or can be NULL. If platform is NULL, the behavior is implementation-defined.
        /// </param>
        /// <param name="device_type"> 
        /// A bitfield that identifies the type of OpenCL device. The device_type can be used to query specific OpenCL devices or all OpenCL devices available. The valid values for device_type are specified in the following table. cl_device_typeDescriptionDeviceTypeCpu An OpenCL device that is the host processor. The host processor runs the OpenCL implementations and is a single or multi-core CPU. DeviceTypeGpu An OpenCL device that is a GPU. By this we mean that the device can also be used to accelerate a 3D API such as OpenGL or DirectX. DeviceTypeAccelerator Dedicated OpenCL accelerators (for example the IBM CELL Blade). These devices communicate with the host processor using a peripheral interconnect such as PCIe. DeviceTypeCustom Dedicated accelerators that do not support programs written in OpenCL C. DeviceTypeDefault The default OpenCL device in the system. The default device cannot be a DeviceTypeCustom device. DeviceTypeAll All OpenCL devices available in the system except DeviceTypeCustom devices.
        /// </param>
        /// <param name="num_entries"> 
        /// The number of cl_device_id entries that can be added to devices.  If devices is not NULL, the num_entries must be greater than zero.
        /// </param>
        /// <param name="devices"> 
        /// A list of OpenCL devices found. The cl_device_id values returned in devices can be used to identify a specific OpenCL device. If devices argument is NULL, this argument is ignored. The number of OpenCL devices returned is the mininum of the value specified by num_entries or the number of OpenCL devices whose type matches device_type.
        /// </param>
        /// <param name="num_devices"> 
        /// The number of OpenCL devices available that match device_type. If num_devices is NULL, this argument is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetDeviceIDs")]
        [CLSCompliant(false)]
        public static ErrorCode GetDeviceIDs(ComputePlatform platform, OpenTK.Compute.CL12.DeviceTypeFlags device_type, Int32 num_entries, ComputeDevice[] devices, [OutAttribute] out Int32 num_devices) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Obtain the list of devices available on a platform.
        /// </summary>
        /// <param name="platform"> 
        /// Refers to the platform ID returned by clGetPlatformIDs or can be NULL. If platform is NULL, the behavior is implementation-defined.
        /// </param>
        /// <param name="device_type"> 
        /// A bitfield that identifies the type of OpenCL device. The device_type can be used to query specific OpenCL devices or all OpenCL devices available. The valid values for device_type are specified in the following table. cl_device_typeDescriptionDeviceTypeCpu An OpenCL device that is the host processor. The host processor runs the OpenCL implementations and is a single or multi-core CPU. DeviceTypeGpu An OpenCL device that is a GPU. By this we mean that the device can also be used to accelerate a 3D API such as OpenGL or DirectX. DeviceTypeAccelerator Dedicated OpenCL accelerators (for example the IBM CELL Blade). These devices communicate with the host processor using a peripheral interconnect such as PCIe. DeviceTypeCustom Dedicated accelerators that do not support programs written in OpenCL C. DeviceTypeDefault The default OpenCL device in the system. The default device cannot be a DeviceTypeCustom device. DeviceTypeAll All OpenCL devices available in the system except DeviceTypeCustom devices.
        /// </param>
        /// <param name="num_entries"> 
        /// The number of cl_device_id entries that can be added to devices.  If devices is not NULL, the num_entries must be greater than zero.
        /// </param>
        /// <param name="devices"> 
        /// A list of OpenCL devices found. The cl_device_id values returned in devices can be used to identify a specific OpenCL device. If devices argument is NULL, this argument is ignored. The number of OpenCL devices returned is the mininum of the value specified by num_entries or the number of OpenCL devices whose type matches device_type.
        /// </param>
        /// <param name="num_devices"> 
        /// The number of OpenCL devices available that match device_type. If num_devices is NULL, this argument is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetDeviceIDs")]
        [CLSCompliant(false)]
        public static ErrorCode GetDeviceIDs(ComputePlatform platform, OpenTK.Compute.CL12.DeviceTypeFlags device_type, Int32 num_entries, ref ComputeDevice devices, [OutAttribute] out Int32 num_devices) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Obtain the list of devices available on a platform.
        /// </summary>
        /// <param name="platform"> 
        /// Refers to the platform ID returned by clGetPlatformIDs or can be NULL. If platform is NULL, the behavior is implementation-defined.
        /// </param>
        /// <param name="device_type"> 
        /// A bitfield that identifies the type of OpenCL device. The device_type can be used to query specific OpenCL devices or all OpenCL devices available. The valid values for device_type are specified in the following table. cl_device_typeDescriptionDeviceTypeCpu An OpenCL device that is the host processor. The host processor runs the OpenCL implementations and is a single or multi-core CPU. DeviceTypeGpu An OpenCL device that is a GPU. By this we mean that the device can also be used to accelerate a 3D API such as OpenGL or DirectX. DeviceTypeAccelerator Dedicated OpenCL accelerators (for example the IBM CELL Blade). These devices communicate with the host processor using a peripheral interconnect such as PCIe. DeviceTypeCustom Dedicated accelerators that do not support programs written in OpenCL C. DeviceTypeDefault The default OpenCL device in the system. The default device cannot be a DeviceTypeCustom device. DeviceTypeAll All OpenCL devices available in the system except DeviceTypeCustom devices.
        /// </param>
        /// <param name="num_entries"> 
        /// The number of cl_device_id entries that can be added to devices.  If devices is not NULL, the num_entries must be greater than zero.
        /// </param>
        /// <param name="devices"> 
        /// A list of OpenCL devices found. The cl_device_id values returned in devices can be used to identify a specific OpenCL device. If devices argument is NULL, this argument is ignored. The number of OpenCL devices returned is the mininum of the value specified by num_entries or the number of OpenCL devices whose type matches device_type.
        /// </param>
        /// <param name="num_devices"> 
        /// The number of OpenCL devices available that match device_type. If num_devices is NULL, this argument is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetDeviceIDs")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode GetDeviceIDs(ComputePlatform platform, OpenTK.Compute.CL12.DeviceTypeFlags device_type, Int32 num_entries, ComputeDevice* devices, [OutAttribute] Int32* num_devices) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Get information about an OpenCL device.
        /// </summary>
        /// <param name="device"> 
        /// May be a device returned by clGetDeviceIDs or a sub-device created by clCreateSubDevices. If device is a sub-device, the specific information for the sub-device will be returned. The information that can be queried using clGetDeviceInfo is specified in the table below.
        /// </param>
        /// <param name="param_name"> 
        /// An enumeration constant that identifies the device information being queried. It can be one of the values as specified in the table below.
        /// </param>
        /// <param name="param_value_size"> 
        /// Specifies the size in bytes of memory pointed to by param_value.  This size in bytes must be ≥ size of return type specified in the table below.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory location where appropriate values for a given param_name as specified in the table below will be returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data being queried by param_value. If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetDeviceInfo")]
        [CLSCompliant(false)]
        public static ErrorCode GetDeviceInfo(ComputeDevice device, OpenTK.Compute.CL12.DeviceInfo param_name, IntPtr param_value_size, IntPtr param_value, [OutAttribute] out IntPtr param_value_size_ret) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Get information about an OpenCL device.
        /// </summary>
        /// <param name="device"> 
        /// May be a device returned by clGetDeviceIDs or a sub-device created by clCreateSubDevices. If device is a sub-device, the specific information for the sub-device will be returned. The information that can be queried using clGetDeviceInfo is specified in the table below.
        /// </param>
        /// <param name="param_name"> 
        /// An enumeration constant that identifies the device information being queried. It can be one of the values as specified in the table below.
        /// </param>
        /// <param name="param_value_size"> 
        /// Specifies the size in bytes of memory pointed to by param_value.  This size in bytes must be ≥ size of return type specified in the table below.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory location where appropriate values for a given param_name as specified in the table below will be returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data being queried by param_value. If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetDeviceInfo")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode GetDeviceInfo(ComputeDevice device, OpenTK.Compute.CL12.DeviceInfo param_name, IntPtr param_value_size, IntPtr param_value, [OutAttribute] IntPtr* param_value_size_ret) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Get information about an OpenCL device.
        /// </summary>
        /// <param name="device"> 
        /// May be a device returned by clGetDeviceIDs or a sub-device created by clCreateSubDevices. If device is a sub-device, the specific information for the sub-device will be returned. The information that can be queried using clGetDeviceInfo is specified in the table below.
        /// </param>
        /// <param name="param_name"> 
        /// An enumeration constant that identifies the device information being queried. It can be one of the values as specified in the table below.
        /// </param>
        /// <param name="param_value_size"> 
        /// Specifies the size in bytes of memory pointed to by param_value.  This size in bytes must be ≥ size of return type specified in the table below.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory location where appropriate values for a given param_name as specified in the table below will be returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data being queried by param_value. If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetDeviceInfo")]
        [CLSCompliant(false)]
        public static ErrorCode GetDeviceInfo<T3>(ComputeDevice device, OpenTK.Compute.CL12.DeviceInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] T3[] param_value, [OutAttribute] out IntPtr param_value_size_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Get information about an OpenCL device.
        /// </summary>
        /// <param name="device"> 
        /// May be a device returned by clGetDeviceIDs or a sub-device created by clCreateSubDevices. If device is a sub-device, the specific information for the sub-device will be returned. The information that can be queried using clGetDeviceInfo is specified in the table below.
        /// </param>
        /// <param name="param_name"> 
        /// An enumeration constant that identifies the device information being queried. It can be one of the values as specified in the table below.
        /// </param>
        /// <param name="param_value_size"> 
        /// Specifies the size in bytes of memory pointed to by param_value.  This size in bytes must be ≥ size of return type specified in the table below.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory location where appropriate values for a given param_name as specified in the table below will be returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data being queried by param_value. If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetDeviceInfo")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode GetDeviceInfo<T3>(ComputeDevice device, OpenTK.Compute.CL12.DeviceInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] T3[] param_value, [OutAttribute] IntPtr* param_value_size_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Get information about an OpenCL device.
        /// </summary>
        /// <param name="device"> 
        /// May be a device returned by clGetDeviceIDs or a sub-device created by clCreateSubDevices. If device is a sub-device, the specific information for the sub-device will be returned. The information that can be queried using clGetDeviceInfo is specified in the table below.
        /// </param>
        /// <param name="param_name"> 
        /// An enumeration constant that identifies the device information being queried. It can be one of the values as specified in the table below.
        /// </param>
        /// <param name="param_value_size"> 
        /// Specifies the size in bytes of memory pointed to by param_value.  This size in bytes must be ≥ size of return type specified in the table below.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory location where appropriate values for a given param_name as specified in the table below will be returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data being queried by param_value. If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetDeviceInfo")]
        [CLSCompliant(false)]
        public static ErrorCode GetDeviceInfo<T3>(ComputeDevice device, OpenTK.Compute.CL12.DeviceInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] T3[,] param_value, [OutAttribute] out IntPtr param_value_size_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Get information about an OpenCL device.
        /// </summary>
        /// <param name="device"> 
        /// May be a device returned by clGetDeviceIDs or a sub-device created by clCreateSubDevices. If device is a sub-device, the specific information for the sub-device will be returned. The information that can be queried using clGetDeviceInfo is specified in the table below.
        /// </param>
        /// <param name="param_name"> 
        /// An enumeration constant that identifies the device information being queried. It can be one of the values as specified in the table below.
        /// </param>
        /// <param name="param_value_size"> 
        /// Specifies the size in bytes of memory pointed to by param_value.  This size in bytes must be ≥ size of return type specified in the table below.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory location where appropriate values for a given param_name as specified in the table below will be returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data being queried by param_value. If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetDeviceInfo")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode GetDeviceInfo<T3>(ComputeDevice device, OpenTK.Compute.CL12.DeviceInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] T3[,] param_value, [OutAttribute] IntPtr* param_value_size_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Get information about an OpenCL device.
        /// </summary>
        /// <param name="device"> 
        /// May be a device returned by clGetDeviceIDs or a sub-device created by clCreateSubDevices. If device is a sub-device, the specific information for the sub-device will be returned. The information that can be queried using clGetDeviceInfo is specified in the table below.
        /// </param>
        /// <param name="param_name"> 
        /// An enumeration constant that identifies the device information being queried. It can be one of the values as specified in the table below.
        /// </param>
        /// <param name="param_value_size"> 
        /// Specifies the size in bytes of memory pointed to by param_value.  This size in bytes must be ≥ size of return type specified in the table below.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory location where appropriate values for a given param_name as specified in the table below will be returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data being queried by param_value. If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetDeviceInfo")]
        [CLSCompliant(false)]
        public static ErrorCode GetDeviceInfo<T3>(ComputeDevice device, OpenTK.Compute.CL12.DeviceInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] T3[,,] param_value, [OutAttribute] out IntPtr param_value_size_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Get information about an OpenCL device.
        /// </summary>
        /// <param name="device"> 
        /// May be a device returned by clGetDeviceIDs or a sub-device created by clCreateSubDevices. If device is a sub-device, the specific information for the sub-device will be returned. The information that can be queried using clGetDeviceInfo is specified in the table below.
        /// </param>
        /// <param name="param_name"> 
        /// An enumeration constant that identifies the device information being queried. It can be one of the values as specified in the table below.
        /// </param>
        /// <param name="param_value_size"> 
        /// Specifies the size in bytes of memory pointed to by param_value.  This size in bytes must be ≥ size of return type specified in the table below.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory location where appropriate values for a given param_name as specified in the table below will be returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data being queried by param_value. If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetDeviceInfo")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode GetDeviceInfo<T3>(ComputeDevice device, OpenTK.Compute.CL12.DeviceInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] T3[,,] param_value, [OutAttribute] IntPtr* param_value_size_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Get information about an OpenCL device.
        /// </summary>
        /// <param name="device"> 
        /// May be a device returned by clGetDeviceIDs or a sub-device created by clCreateSubDevices. If device is a sub-device, the specific information for the sub-device will be returned. The information that can be queried using clGetDeviceInfo is specified in the table below.
        /// </param>
        /// <param name="param_name"> 
        /// An enumeration constant that identifies the device information being queried. It can be one of the values as specified in the table below.
        /// </param>
        /// <param name="param_value_size"> 
        /// Specifies the size in bytes of memory pointed to by param_value.  This size in bytes must be ≥ size of return type specified in the table below.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory location where appropriate values for a given param_name as specified in the table below will be returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data being queried by param_value. If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetDeviceInfo")]
        [CLSCompliant(false)]
        public static ErrorCode GetDeviceInfo<T3>(ComputeDevice device, OpenTK.Compute.CL12.DeviceInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] ref T3 param_value, [OutAttribute] out IntPtr param_value_size_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Get information about an OpenCL device.
        /// </summary>
        /// <param name="device"> 
        /// May be a device returned by clGetDeviceIDs or a sub-device created by clCreateSubDevices. If device is a sub-device, the specific information for the sub-device will be returned. The information that can be queried using clGetDeviceInfo is specified in the table below.
        /// </param>
        /// <param name="param_name"> 
        /// An enumeration constant that identifies the device information being queried. It can be one of the values as specified in the table below.
        /// </param>
        /// <param name="param_value_size"> 
        /// Specifies the size in bytes of memory pointed to by param_value.  This size in bytes must be ≥ size of return type specified in the table below.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory location where appropriate values for a given param_name as specified in the table below will be returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data being queried by param_value. If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetDeviceInfo")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode GetDeviceInfo<T3>(ComputeDevice device, OpenTK.Compute.CL12.DeviceInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] ref T3 param_value, [OutAttribute] IntPtr* param_value_size_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Returns information about the event object.
        /// </summary>
        /// <param name="event"> 
        /// Specifies the event object being queried.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the information to query. The list of supported param_name types and the information returned in param_value by clGetEventInfo is described in the table below: cl_event_infoReturn TypeInformation returned in param_valueEventCommandQueuecl_command_queue Return the command-queue associated with event. For user event objects, a NULL value is returned. EventContextcl_context Return the context associated with event. EventCommandTypecl_command_typeReturn the command associated with event. Can be one of the following values: CommandNdrangeKernel commandTask commandNativeKernel commandReadBuffer commandWriteBuffer commandCopyBuffer commandReadImage commandWriteImage commandCopyImage commandCopyBufferToImage commandCopyImageToBuffer commandMapBuffer commandMapImage commandUnmapMemObject commandMarker commandAcquireGlObjects commandReleaseGlObjects commandReadBufferRect commandWriteBufferRect commandCopyBufferRect commandUser commandBarrier commandMigrateMemObjects commandFillBuffer commandFillImage commandGlFenceSyncObjectKhr (if cl_khr_gl_event is enabled) CommandAcquireD3D10ObjectsKhr (if cl_khr_d3d10_sharing is enabled) CommandReleaseD3D10ObjectsKhr (if cl_khr_d3d10_sharing is enabled) CommandAcquireDx9MediaSurfacesKhr (if cl_khr_dx9_media_sharing is enabled) CommandReleaseDx9MediaSurfacesKhr (if cl_khr_dx9_media_sharing is enabled) CommandAcquireD3D11ObjectsKhr (if  cl_khr_d3d11_sharing is enabled) CommandReleaseD3D11ObjectsKhr (if  cl_khr_d3d11_sharing is enabled) EventCommand executionStatuscl_int Return the execution status of the command identified by event. The valid values are: Queued (command has been enqueued in the command-queue), Submitted (enqueued command has been submitted by the host to the device associated with the command-queue), Running (device is currently executing this command), Complete (the command has completed), or  Error code given by a negative integer value. (command was abnormally terminated – this may be caused by a bad memory access etc.) These error codes come from the same set of error codes that are returned from the platform or runtime API calls as return values or errcode_ret values.  The error code values are negative, and event state values are positive. The event state values are ordered from the largest value (Queued) for the first or initial state to the smallest value (Complete or negative integer value) for the last or complete state. The value of Complete and Success are the same. EventReferenceCountcl_uint Return the event reference count. The reference count returned should be considered immediately stale. It is unsuitable for general use in applications.  This feature is provided for identifying memory leaks.
        /// </param>
        /// <param name="param_value_size"> 
        /// Specifies the size in bytes of memory pointed to by param_value. This size must be ≥ size of the return type as described in the table below.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data copied to param_value. If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetEventInfo")]
        [CLSCompliant(false)]
        public static ErrorCode GetEventInfo(ComputeEvent @event, OpenTK.Compute.CL12.EventInfo param_name, IntPtr param_value_size, IntPtr param_value, [OutAttribute] IntPtr[] param_value_size_ret) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Returns information about the event object.
        /// </summary>
        /// <param name="event"> 
        /// Specifies the event object being queried.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the information to query. The list of supported param_name types and the information returned in param_value by clGetEventInfo is described in the table below: cl_event_infoReturn TypeInformation returned in param_valueEventCommandQueuecl_command_queue Return the command-queue associated with event. For user event objects, a NULL value is returned. EventContextcl_context Return the context associated with event. EventCommandTypecl_command_typeReturn the command associated with event. Can be one of the following values: CommandNdrangeKernel commandTask commandNativeKernel commandReadBuffer commandWriteBuffer commandCopyBuffer commandReadImage commandWriteImage commandCopyImage commandCopyBufferToImage commandCopyImageToBuffer commandMapBuffer commandMapImage commandUnmapMemObject commandMarker commandAcquireGlObjects commandReleaseGlObjects commandReadBufferRect commandWriteBufferRect commandCopyBufferRect commandUser commandBarrier commandMigrateMemObjects commandFillBuffer commandFillImage commandGlFenceSyncObjectKhr (if cl_khr_gl_event is enabled) CommandAcquireD3D10ObjectsKhr (if cl_khr_d3d10_sharing is enabled) CommandReleaseD3D10ObjectsKhr (if cl_khr_d3d10_sharing is enabled) CommandAcquireDx9MediaSurfacesKhr (if cl_khr_dx9_media_sharing is enabled) CommandReleaseDx9MediaSurfacesKhr (if cl_khr_dx9_media_sharing is enabled) CommandAcquireD3D11ObjectsKhr (if  cl_khr_d3d11_sharing is enabled) CommandReleaseD3D11ObjectsKhr (if  cl_khr_d3d11_sharing is enabled) EventCommand executionStatuscl_int Return the execution status of the command identified by event. The valid values are: Queued (command has been enqueued in the command-queue), Submitted (enqueued command has been submitted by the host to the device associated with the command-queue), Running (device is currently executing this command), Complete (the command has completed), or  Error code given by a negative integer value. (command was abnormally terminated – this may be caused by a bad memory access etc.) These error codes come from the same set of error codes that are returned from the platform or runtime API calls as return values or errcode_ret values.  The error code values are negative, and event state values are positive. The event state values are ordered from the largest value (Queued) for the first or initial state to the smallest value (Complete or negative integer value) for the last or complete state. The value of Complete and Success are the same. EventReferenceCountcl_uint Return the event reference count. The reference count returned should be considered immediately stale. It is unsuitable for general use in applications.  This feature is provided for identifying memory leaks.
        /// </param>
        /// <param name="param_value_size"> 
        /// Specifies the size in bytes of memory pointed to by param_value. This size must be ≥ size of the return type as described in the table below.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data copied to param_value. If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetEventInfo")]
        [CLSCompliant(false)]
        public static ErrorCode GetEventInfo(ComputeEvent @event, OpenTK.Compute.CL12.EventInfo param_name, IntPtr param_value_size, IntPtr param_value, [OutAttribute] out IntPtr param_value_size_ret) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Returns information about the event object.
        /// </summary>
        /// <param name="event"> 
        /// Specifies the event object being queried.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the information to query. The list of supported param_name types and the information returned in param_value by clGetEventInfo is described in the table below: cl_event_infoReturn TypeInformation returned in param_valueEventCommandQueuecl_command_queue Return the command-queue associated with event. For user event objects, a NULL value is returned. EventContextcl_context Return the context associated with event. EventCommandTypecl_command_typeReturn the command associated with event. Can be one of the following values: CommandNdrangeKernel commandTask commandNativeKernel commandReadBuffer commandWriteBuffer commandCopyBuffer commandReadImage commandWriteImage commandCopyImage commandCopyBufferToImage commandCopyImageToBuffer commandMapBuffer commandMapImage commandUnmapMemObject commandMarker commandAcquireGlObjects commandReleaseGlObjects commandReadBufferRect commandWriteBufferRect commandCopyBufferRect commandUser commandBarrier commandMigrateMemObjects commandFillBuffer commandFillImage commandGlFenceSyncObjectKhr (if cl_khr_gl_event is enabled) CommandAcquireD3D10ObjectsKhr (if cl_khr_d3d10_sharing is enabled) CommandReleaseD3D10ObjectsKhr (if cl_khr_d3d10_sharing is enabled) CommandAcquireDx9MediaSurfacesKhr (if cl_khr_dx9_media_sharing is enabled) CommandReleaseDx9MediaSurfacesKhr (if cl_khr_dx9_media_sharing is enabled) CommandAcquireD3D11ObjectsKhr (if  cl_khr_d3d11_sharing is enabled) CommandReleaseD3D11ObjectsKhr (if  cl_khr_d3d11_sharing is enabled) EventCommand executionStatuscl_int Return the execution status of the command identified by event. The valid values are: Queued (command has been enqueued in the command-queue), Submitted (enqueued command has been submitted by the host to the device associated with the command-queue), Running (device is currently executing this command), Complete (the command has completed), or  Error code given by a negative integer value. (command was abnormally terminated – this may be caused by a bad memory access etc.) These error codes come from the same set of error codes that are returned from the platform or runtime API calls as return values or errcode_ret values.  The error code values are negative, and event state values are positive. The event state values are ordered from the largest value (Queued) for the first or initial state to the smallest value (Complete or negative integer value) for the last or complete state. The value of Complete and Success are the same. EventReferenceCountcl_uint Return the event reference count. The reference count returned should be considered immediately stale. It is unsuitable for general use in applications.  This feature is provided for identifying memory leaks.
        /// </param>
        /// <param name="param_value_size"> 
        /// Specifies the size in bytes of memory pointed to by param_value. This size must be ≥ size of the return type as described in the table below.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data copied to param_value. If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetEventInfo")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode GetEventInfo(ComputeEvent @event, OpenTK.Compute.CL12.EventInfo param_name, IntPtr param_value_size, IntPtr param_value, [OutAttribute] IntPtr* param_value_size_ret) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Returns information about the event object.
        /// </summary>
        /// <param name="event"> 
        /// Specifies the event object being queried.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the information to query. The list of supported param_name types and the information returned in param_value by clGetEventInfo is described in the table below: cl_event_infoReturn TypeInformation returned in param_valueEventCommandQueuecl_command_queue Return the command-queue associated with event. For user event objects, a NULL value is returned. EventContextcl_context Return the context associated with event. EventCommandTypecl_command_typeReturn the command associated with event. Can be one of the following values: CommandNdrangeKernel commandTask commandNativeKernel commandReadBuffer commandWriteBuffer commandCopyBuffer commandReadImage commandWriteImage commandCopyImage commandCopyBufferToImage commandCopyImageToBuffer commandMapBuffer commandMapImage commandUnmapMemObject commandMarker commandAcquireGlObjects commandReleaseGlObjects commandReadBufferRect commandWriteBufferRect commandCopyBufferRect commandUser commandBarrier commandMigrateMemObjects commandFillBuffer commandFillImage commandGlFenceSyncObjectKhr (if cl_khr_gl_event is enabled) CommandAcquireD3D10ObjectsKhr (if cl_khr_d3d10_sharing is enabled) CommandReleaseD3D10ObjectsKhr (if cl_khr_d3d10_sharing is enabled) CommandAcquireDx9MediaSurfacesKhr (if cl_khr_dx9_media_sharing is enabled) CommandReleaseDx9MediaSurfacesKhr (if cl_khr_dx9_media_sharing is enabled) CommandAcquireD3D11ObjectsKhr (if  cl_khr_d3d11_sharing is enabled) CommandReleaseD3D11ObjectsKhr (if  cl_khr_d3d11_sharing is enabled) EventCommand executionStatuscl_int Return the execution status of the command identified by event. The valid values are: Queued (command has been enqueued in the command-queue), Submitted (enqueued command has been submitted by the host to the device associated with the command-queue), Running (device is currently executing this command), Complete (the command has completed), or  Error code given by a negative integer value. (command was abnormally terminated – this may be caused by a bad memory access etc.) These error codes come from the same set of error codes that are returned from the platform or runtime API calls as return values or errcode_ret values.  The error code values are negative, and event state values are positive. The event state values are ordered from the largest value (Queued) for the first or initial state to the smallest value (Complete or negative integer value) for the last or complete state. The value of Complete and Success are the same. EventReferenceCountcl_uint Return the event reference count. The reference count returned should be considered immediately stale. It is unsuitable for general use in applications.  This feature is provided for identifying memory leaks.
        /// </param>
        /// <param name="param_value_size"> 
        /// Specifies the size in bytes of memory pointed to by param_value. This size must be ≥ size of the return type as described in the table below.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data copied to param_value. If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetEventInfo")]
        [CLSCompliant(false)]
        public static ErrorCode GetEventInfo<T3>(ComputeEvent @event, OpenTK.Compute.CL12.EventInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] T3[] param_value, [OutAttribute] IntPtr[] param_value_size_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Returns information about the event object.
        /// </summary>
        /// <param name="event"> 
        /// Specifies the event object being queried.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the information to query. The list of supported param_name types and the information returned in param_value by clGetEventInfo is described in the table below: cl_event_infoReturn TypeInformation returned in param_valueEventCommandQueuecl_command_queue Return the command-queue associated with event. For user event objects, a NULL value is returned. EventContextcl_context Return the context associated with event. EventCommandTypecl_command_typeReturn the command associated with event. Can be one of the following values: CommandNdrangeKernel commandTask commandNativeKernel commandReadBuffer commandWriteBuffer commandCopyBuffer commandReadImage commandWriteImage commandCopyImage commandCopyBufferToImage commandCopyImageToBuffer commandMapBuffer commandMapImage commandUnmapMemObject commandMarker commandAcquireGlObjects commandReleaseGlObjects commandReadBufferRect commandWriteBufferRect commandCopyBufferRect commandUser commandBarrier commandMigrateMemObjects commandFillBuffer commandFillImage commandGlFenceSyncObjectKhr (if cl_khr_gl_event is enabled) CommandAcquireD3D10ObjectsKhr (if cl_khr_d3d10_sharing is enabled) CommandReleaseD3D10ObjectsKhr (if cl_khr_d3d10_sharing is enabled) CommandAcquireDx9MediaSurfacesKhr (if cl_khr_dx9_media_sharing is enabled) CommandReleaseDx9MediaSurfacesKhr (if cl_khr_dx9_media_sharing is enabled) CommandAcquireD3D11ObjectsKhr (if  cl_khr_d3d11_sharing is enabled) CommandReleaseD3D11ObjectsKhr (if  cl_khr_d3d11_sharing is enabled) EventCommand executionStatuscl_int Return the execution status of the command identified by event. The valid values are: Queued (command has been enqueued in the command-queue), Submitted (enqueued command has been submitted by the host to the device associated with the command-queue), Running (device is currently executing this command), Complete (the command has completed), or  Error code given by a negative integer value. (command was abnormally terminated – this may be caused by a bad memory access etc.) These error codes come from the same set of error codes that are returned from the platform or runtime API calls as return values or errcode_ret values.  The error code values are negative, and event state values are positive. The event state values are ordered from the largest value (Queued) for the first or initial state to the smallest value (Complete or negative integer value) for the last or complete state. The value of Complete and Success are the same. EventReferenceCountcl_uint Return the event reference count. The reference count returned should be considered immediately stale. It is unsuitable for general use in applications.  This feature is provided for identifying memory leaks.
        /// </param>
        /// <param name="param_value_size"> 
        /// Specifies the size in bytes of memory pointed to by param_value. This size must be ≥ size of the return type as described in the table below.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data copied to param_value. If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetEventInfo")]
        [CLSCompliant(false)]
        public static ErrorCode GetEventInfo<T3>(ComputeEvent @event, OpenTK.Compute.CL12.EventInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] T3[] param_value, [OutAttribute] out IntPtr param_value_size_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Returns information about the event object.
        /// </summary>
        /// <param name="event"> 
        /// Specifies the event object being queried.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the information to query. The list of supported param_name types and the information returned in param_value by clGetEventInfo is described in the table below: cl_event_infoReturn TypeInformation returned in param_valueEventCommandQueuecl_command_queue Return the command-queue associated with event. For user event objects, a NULL value is returned. EventContextcl_context Return the context associated with event. EventCommandTypecl_command_typeReturn the command associated with event. Can be one of the following values: CommandNdrangeKernel commandTask commandNativeKernel commandReadBuffer commandWriteBuffer commandCopyBuffer commandReadImage commandWriteImage commandCopyImage commandCopyBufferToImage commandCopyImageToBuffer commandMapBuffer commandMapImage commandUnmapMemObject commandMarker commandAcquireGlObjects commandReleaseGlObjects commandReadBufferRect commandWriteBufferRect commandCopyBufferRect commandUser commandBarrier commandMigrateMemObjects commandFillBuffer commandFillImage commandGlFenceSyncObjectKhr (if cl_khr_gl_event is enabled) CommandAcquireD3D10ObjectsKhr (if cl_khr_d3d10_sharing is enabled) CommandReleaseD3D10ObjectsKhr (if cl_khr_d3d10_sharing is enabled) CommandAcquireDx9MediaSurfacesKhr (if cl_khr_dx9_media_sharing is enabled) CommandReleaseDx9MediaSurfacesKhr (if cl_khr_dx9_media_sharing is enabled) CommandAcquireD3D11ObjectsKhr (if  cl_khr_d3d11_sharing is enabled) CommandReleaseD3D11ObjectsKhr (if  cl_khr_d3d11_sharing is enabled) EventCommand executionStatuscl_int Return the execution status of the command identified by event. The valid values are: Queued (command has been enqueued in the command-queue), Submitted (enqueued command has been submitted by the host to the device associated with the command-queue), Running (device is currently executing this command), Complete (the command has completed), or  Error code given by a negative integer value. (command was abnormally terminated – this may be caused by a bad memory access etc.) These error codes come from the same set of error codes that are returned from the platform or runtime API calls as return values or errcode_ret values.  The error code values are negative, and event state values are positive. The event state values are ordered from the largest value (Queued) for the first or initial state to the smallest value (Complete or negative integer value) for the last or complete state. The value of Complete and Success are the same. EventReferenceCountcl_uint Return the event reference count. The reference count returned should be considered immediately stale. It is unsuitable for general use in applications.  This feature is provided for identifying memory leaks.
        /// </param>
        /// <param name="param_value_size"> 
        /// Specifies the size in bytes of memory pointed to by param_value. This size must be ≥ size of the return type as described in the table below.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data copied to param_value. If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetEventInfo")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode GetEventInfo<T3>(ComputeEvent @event, OpenTK.Compute.CL12.EventInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] T3[] param_value, [OutAttribute] IntPtr* param_value_size_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Returns information about the event object.
        /// </summary>
        /// <param name="event"> 
        /// Specifies the event object being queried.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the information to query. The list of supported param_name types and the information returned in param_value by clGetEventInfo is described in the table below: cl_event_infoReturn TypeInformation returned in param_valueEventCommandQueuecl_command_queue Return the command-queue associated with event. For user event objects, a NULL value is returned. EventContextcl_context Return the context associated with event. EventCommandTypecl_command_typeReturn the command associated with event. Can be one of the following values: CommandNdrangeKernel commandTask commandNativeKernel commandReadBuffer commandWriteBuffer commandCopyBuffer commandReadImage commandWriteImage commandCopyImage commandCopyBufferToImage commandCopyImageToBuffer commandMapBuffer commandMapImage commandUnmapMemObject commandMarker commandAcquireGlObjects commandReleaseGlObjects commandReadBufferRect commandWriteBufferRect commandCopyBufferRect commandUser commandBarrier commandMigrateMemObjects commandFillBuffer commandFillImage commandGlFenceSyncObjectKhr (if cl_khr_gl_event is enabled) CommandAcquireD3D10ObjectsKhr (if cl_khr_d3d10_sharing is enabled) CommandReleaseD3D10ObjectsKhr (if cl_khr_d3d10_sharing is enabled) CommandAcquireDx9MediaSurfacesKhr (if cl_khr_dx9_media_sharing is enabled) CommandReleaseDx9MediaSurfacesKhr (if cl_khr_dx9_media_sharing is enabled) CommandAcquireD3D11ObjectsKhr (if  cl_khr_d3d11_sharing is enabled) CommandReleaseD3D11ObjectsKhr (if  cl_khr_d3d11_sharing is enabled) EventCommand executionStatuscl_int Return the execution status of the command identified by event. The valid values are: Queued (command has been enqueued in the command-queue), Submitted (enqueued command has been submitted by the host to the device associated with the command-queue), Running (device is currently executing this command), Complete (the command has completed), or  Error code given by a negative integer value. (command was abnormally terminated – this may be caused by a bad memory access etc.) These error codes come from the same set of error codes that are returned from the platform or runtime API calls as return values or errcode_ret values.  The error code values are negative, and event state values are positive. The event state values are ordered from the largest value (Queued) for the first or initial state to the smallest value (Complete or negative integer value) for the last or complete state. The value of Complete and Success are the same. EventReferenceCountcl_uint Return the event reference count. The reference count returned should be considered immediately stale. It is unsuitable for general use in applications.  This feature is provided for identifying memory leaks.
        /// </param>
        /// <param name="param_value_size"> 
        /// Specifies the size in bytes of memory pointed to by param_value. This size must be ≥ size of the return type as described in the table below.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data copied to param_value. If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetEventInfo")]
        [CLSCompliant(false)]
        public static ErrorCode GetEventInfo<T3>(ComputeEvent @event, OpenTK.Compute.CL12.EventInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] T3[,] param_value, [OutAttribute] IntPtr[] param_value_size_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Returns information about the event object.
        /// </summary>
        /// <param name="event"> 
        /// Specifies the event object being queried.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the information to query. The list of supported param_name types and the information returned in param_value by clGetEventInfo is described in the table below: cl_event_infoReturn TypeInformation returned in param_valueEventCommandQueuecl_command_queue Return the command-queue associated with event. For user event objects, a NULL value is returned. EventContextcl_context Return the context associated with event. EventCommandTypecl_command_typeReturn the command associated with event. Can be one of the following values: CommandNdrangeKernel commandTask commandNativeKernel commandReadBuffer commandWriteBuffer commandCopyBuffer commandReadImage commandWriteImage commandCopyImage commandCopyBufferToImage commandCopyImageToBuffer commandMapBuffer commandMapImage commandUnmapMemObject commandMarker commandAcquireGlObjects commandReleaseGlObjects commandReadBufferRect commandWriteBufferRect commandCopyBufferRect commandUser commandBarrier commandMigrateMemObjects commandFillBuffer commandFillImage commandGlFenceSyncObjectKhr (if cl_khr_gl_event is enabled) CommandAcquireD3D10ObjectsKhr (if cl_khr_d3d10_sharing is enabled) CommandReleaseD3D10ObjectsKhr (if cl_khr_d3d10_sharing is enabled) CommandAcquireDx9MediaSurfacesKhr (if cl_khr_dx9_media_sharing is enabled) CommandReleaseDx9MediaSurfacesKhr (if cl_khr_dx9_media_sharing is enabled) CommandAcquireD3D11ObjectsKhr (if  cl_khr_d3d11_sharing is enabled) CommandReleaseD3D11ObjectsKhr (if  cl_khr_d3d11_sharing is enabled) EventCommand executionStatuscl_int Return the execution status of the command identified by event. The valid values are: Queued (command has been enqueued in the command-queue), Submitted (enqueued command has been submitted by the host to the device associated with the command-queue), Running (device is currently executing this command), Complete (the command has completed), or  Error code given by a negative integer value. (command was abnormally terminated – this may be caused by a bad memory access etc.) These error codes come from the same set of error codes that are returned from the platform or runtime API calls as return values or errcode_ret values.  The error code values are negative, and event state values are positive. The event state values are ordered from the largest value (Queued) for the first or initial state to the smallest value (Complete or negative integer value) for the last or complete state. The value of Complete and Success are the same. EventReferenceCountcl_uint Return the event reference count. The reference count returned should be considered immediately stale. It is unsuitable for general use in applications.  This feature is provided for identifying memory leaks.
        /// </param>
        /// <param name="param_value_size"> 
        /// Specifies the size in bytes of memory pointed to by param_value. This size must be ≥ size of the return type as described in the table below.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data copied to param_value. If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetEventInfo")]
        [CLSCompliant(false)]
        public static ErrorCode GetEventInfo<T3>(ComputeEvent @event, OpenTK.Compute.CL12.EventInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] T3[,] param_value, [OutAttribute] out IntPtr param_value_size_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Returns information about the event object.
        /// </summary>
        /// <param name="event"> 
        /// Specifies the event object being queried.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the information to query. The list of supported param_name types and the information returned in param_value by clGetEventInfo is described in the table below: cl_event_infoReturn TypeInformation returned in param_valueEventCommandQueuecl_command_queue Return the command-queue associated with event. For user event objects, a NULL value is returned. EventContextcl_context Return the context associated with event. EventCommandTypecl_command_typeReturn the command associated with event. Can be one of the following values: CommandNdrangeKernel commandTask commandNativeKernel commandReadBuffer commandWriteBuffer commandCopyBuffer commandReadImage commandWriteImage commandCopyImage commandCopyBufferToImage commandCopyImageToBuffer commandMapBuffer commandMapImage commandUnmapMemObject commandMarker commandAcquireGlObjects commandReleaseGlObjects commandReadBufferRect commandWriteBufferRect commandCopyBufferRect commandUser commandBarrier commandMigrateMemObjects commandFillBuffer commandFillImage commandGlFenceSyncObjectKhr (if cl_khr_gl_event is enabled) CommandAcquireD3D10ObjectsKhr (if cl_khr_d3d10_sharing is enabled) CommandReleaseD3D10ObjectsKhr (if cl_khr_d3d10_sharing is enabled) CommandAcquireDx9MediaSurfacesKhr (if cl_khr_dx9_media_sharing is enabled) CommandReleaseDx9MediaSurfacesKhr (if cl_khr_dx9_media_sharing is enabled) CommandAcquireD3D11ObjectsKhr (if  cl_khr_d3d11_sharing is enabled) CommandReleaseD3D11ObjectsKhr (if  cl_khr_d3d11_sharing is enabled) EventCommand executionStatuscl_int Return the execution status of the command identified by event. The valid values are: Queued (command has been enqueued in the command-queue), Submitted (enqueued command has been submitted by the host to the device associated with the command-queue), Running (device is currently executing this command), Complete (the command has completed), or  Error code given by a negative integer value. (command was abnormally terminated – this may be caused by a bad memory access etc.) These error codes come from the same set of error codes that are returned from the platform or runtime API calls as return values or errcode_ret values.  The error code values are negative, and event state values are positive. The event state values are ordered from the largest value (Queued) for the first or initial state to the smallest value (Complete or negative integer value) for the last or complete state. The value of Complete and Success are the same. EventReferenceCountcl_uint Return the event reference count. The reference count returned should be considered immediately stale. It is unsuitable for general use in applications.  This feature is provided for identifying memory leaks.
        /// </param>
        /// <param name="param_value_size"> 
        /// Specifies the size in bytes of memory pointed to by param_value. This size must be ≥ size of the return type as described in the table below.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data copied to param_value. If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetEventInfo")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode GetEventInfo<T3>(ComputeEvent @event, OpenTK.Compute.CL12.EventInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] T3[,] param_value, [OutAttribute] IntPtr* param_value_size_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Returns information about the event object.
        /// </summary>
        /// <param name="event"> 
        /// Specifies the event object being queried.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the information to query. The list of supported param_name types and the information returned in param_value by clGetEventInfo is described in the table below: cl_event_infoReturn TypeInformation returned in param_valueEventCommandQueuecl_command_queue Return the command-queue associated with event. For user event objects, a NULL value is returned. EventContextcl_context Return the context associated with event. EventCommandTypecl_command_typeReturn the command associated with event. Can be one of the following values: CommandNdrangeKernel commandTask commandNativeKernel commandReadBuffer commandWriteBuffer commandCopyBuffer commandReadImage commandWriteImage commandCopyImage commandCopyBufferToImage commandCopyImageToBuffer commandMapBuffer commandMapImage commandUnmapMemObject commandMarker commandAcquireGlObjects commandReleaseGlObjects commandReadBufferRect commandWriteBufferRect commandCopyBufferRect commandUser commandBarrier commandMigrateMemObjects commandFillBuffer commandFillImage commandGlFenceSyncObjectKhr (if cl_khr_gl_event is enabled) CommandAcquireD3D10ObjectsKhr (if cl_khr_d3d10_sharing is enabled) CommandReleaseD3D10ObjectsKhr (if cl_khr_d3d10_sharing is enabled) CommandAcquireDx9MediaSurfacesKhr (if cl_khr_dx9_media_sharing is enabled) CommandReleaseDx9MediaSurfacesKhr (if cl_khr_dx9_media_sharing is enabled) CommandAcquireD3D11ObjectsKhr (if  cl_khr_d3d11_sharing is enabled) CommandReleaseD3D11ObjectsKhr (if  cl_khr_d3d11_sharing is enabled) EventCommand executionStatuscl_int Return the execution status of the command identified by event. The valid values are: Queued (command has been enqueued in the command-queue), Submitted (enqueued command has been submitted by the host to the device associated with the command-queue), Running (device is currently executing this command), Complete (the command has completed), or  Error code given by a negative integer value. (command was abnormally terminated – this may be caused by a bad memory access etc.) These error codes come from the same set of error codes that are returned from the platform or runtime API calls as return values or errcode_ret values.  The error code values are negative, and event state values are positive. The event state values are ordered from the largest value (Queued) for the first or initial state to the smallest value (Complete or negative integer value) for the last or complete state. The value of Complete and Success are the same. EventReferenceCountcl_uint Return the event reference count. The reference count returned should be considered immediately stale. It is unsuitable for general use in applications.  This feature is provided for identifying memory leaks.
        /// </param>
        /// <param name="param_value_size"> 
        /// Specifies the size in bytes of memory pointed to by param_value. This size must be ≥ size of the return type as described in the table below.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data copied to param_value. If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetEventInfo")]
        [CLSCompliant(false)]
        public static ErrorCode GetEventInfo<T3>(ComputeEvent @event, OpenTK.Compute.CL12.EventInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] T3[,,] param_value, [OutAttribute] IntPtr[] param_value_size_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Returns information about the event object.
        /// </summary>
        /// <param name="event"> 
        /// Specifies the event object being queried.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the information to query. The list of supported param_name types and the information returned in param_value by clGetEventInfo is described in the table below: cl_event_infoReturn TypeInformation returned in param_valueEventCommandQueuecl_command_queue Return the command-queue associated with event. For user event objects, a NULL value is returned. EventContextcl_context Return the context associated with event. EventCommandTypecl_command_typeReturn the command associated with event. Can be one of the following values: CommandNdrangeKernel commandTask commandNativeKernel commandReadBuffer commandWriteBuffer commandCopyBuffer commandReadImage commandWriteImage commandCopyImage commandCopyBufferToImage commandCopyImageToBuffer commandMapBuffer commandMapImage commandUnmapMemObject commandMarker commandAcquireGlObjects commandReleaseGlObjects commandReadBufferRect commandWriteBufferRect commandCopyBufferRect commandUser commandBarrier commandMigrateMemObjects commandFillBuffer commandFillImage commandGlFenceSyncObjectKhr (if cl_khr_gl_event is enabled) CommandAcquireD3D10ObjectsKhr (if cl_khr_d3d10_sharing is enabled) CommandReleaseD3D10ObjectsKhr (if cl_khr_d3d10_sharing is enabled) CommandAcquireDx9MediaSurfacesKhr (if cl_khr_dx9_media_sharing is enabled) CommandReleaseDx9MediaSurfacesKhr (if cl_khr_dx9_media_sharing is enabled) CommandAcquireD3D11ObjectsKhr (if  cl_khr_d3d11_sharing is enabled) CommandReleaseD3D11ObjectsKhr (if  cl_khr_d3d11_sharing is enabled) EventCommand executionStatuscl_int Return the execution status of the command identified by event. The valid values are: Queued (command has been enqueued in the command-queue), Submitted (enqueued command has been submitted by the host to the device associated with the command-queue), Running (device is currently executing this command), Complete (the command has completed), or  Error code given by a negative integer value. (command was abnormally terminated – this may be caused by a bad memory access etc.) These error codes come from the same set of error codes that are returned from the platform or runtime API calls as return values or errcode_ret values.  The error code values are negative, and event state values are positive. The event state values are ordered from the largest value (Queued) for the first or initial state to the smallest value (Complete or negative integer value) for the last or complete state. The value of Complete and Success are the same. EventReferenceCountcl_uint Return the event reference count. The reference count returned should be considered immediately stale. It is unsuitable for general use in applications.  This feature is provided for identifying memory leaks.
        /// </param>
        /// <param name="param_value_size"> 
        /// Specifies the size in bytes of memory pointed to by param_value. This size must be ≥ size of the return type as described in the table below.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data copied to param_value. If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetEventInfo")]
        [CLSCompliant(false)]
        public static ErrorCode GetEventInfo<T3>(ComputeEvent @event, OpenTK.Compute.CL12.EventInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] T3[,,] param_value, [OutAttribute] out IntPtr param_value_size_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Returns information about the event object.
        /// </summary>
        /// <param name="event"> 
        /// Specifies the event object being queried.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the information to query. The list of supported param_name types and the information returned in param_value by clGetEventInfo is described in the table below: cl_event_infoReturn TypeInformation returned in param_valueEventCommandQueuecl_command_queue Return the command-queue associated with event. For user event objects, a NULL value is returned. EventContextcl_context Return the context associated with event. EventCommandTypecl_command_typeReturn the command associated with event. Can be one of the following values: CommandNdrangeKernel commandTask commandNativeKernel commandReadBuffer commandWriteBuffer commandCopyBuffer commandReadImage commandWriteImage commandCopyImage commandCopyBufferToImage commandCopyImageToBuffer commandMapBuffer commandMapImage commandUnmapMemObject commandMarker commandAcquireGlObjects commandReleaseGlObjects commandReadBufferRect commandWriteBufferRect commandCopyBufferRect commandUser commandBarrier commandMigrateMemObjects commandFillBuffer commandFillImage commandGlFenceSyncObjectKhr (if cl_khr_gl_event is enabled) CommandAcquireD3D10ObjectsKhr (if cl_khr_d3d10_sharing is enabled) CommandReleaseD3D10ObjectsKhr (if cl_khr_d3d10_sharing is enabled) CommandAcquireDx9MediaSurfacesKhr (if cl_khr_dx9_media_sharing is enabled) CommandReleaseDx9MediaSurfacesKhr (if cl_khr_dx9_media_sharing is enabled) CommandAcquireD3D11ObjectsKhr (if  cl_khr_d3d11_sharing is enabled) CommandReleaseD3D11ObjectsKhr (if  cl_khr_d3d11_sharing is enabled) EventCommand executionStatuscl_int Return the execution status of the command identified by event. The valid values are: Queued (command has been enqueued in the command-queue), Submitted (enqueued command has been submitted by the host to the device associated with the command-queue), Running (device is currently executing this command), Complete (the command has completed), or  Error code given by a negative integer value. (command was abnormally terminated – this may be caused by a bad memory access etc.) These error codes come from the same set of error codes that are returned from the platform or runtime API calls as return values or errcode_ret values.  The error code values are negative, and event state values are positive. The event state values are ordered from the largest value (Queued) for the first or initial state to the smallest value (Complete or negative integer value) for the last or complete state. The value of Complete and Success are the same. EventReferenceCountcl_uint Return the event reference count. The reference count returned should be considered immediately stale. It is unsuitable for general use in applications.  This feature is provided for identifying memory leaks.
        /// </param>
        /// <param name="param_value_size"> 
        /// Specifies the size in bytes of memory pointed to by param_value. This size must be ≥ size of the return type as described in the table below.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data copied to param_value. If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetEventInfo")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode GetEventInfo<T3>(ComputeEvent @event, OpenTK.Compute.CL12.EventInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] T3[,,] param_value, [OutAttribute] IntPtr* param_value_size_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Returns information about the event object.
        /// </summary>
        /// <param name="event"> 
        /// Specifies the event object being queried.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the information to query. The list of supported param_name types and the information returned in param_value by clGetEventInfo is described in the table below: cl_event_infoReturn TypeInformation returned in param_valueEventCommandQueuecl_command_queue Return the command-queue associated with event. For user event objects, a NULL value is returned. EventContextcl_context Return the context associated with event. EventCommandTypecl_command_typeReturn the command associated with event. Can be one of the following values: CommandNdrangeKernel commandTask commandNativeKernel commandReadBuffer commandWriteBuffer commandCopyBuffer commandReadImage commandWriteImage commandCopyImage commandCopyBufferToImage commandCopyImageToBuffer commandMapBuffer commandMapImage commandUnmapMemObject commandMarker commandAcquireGlObjects commandReleaseGlObjects commandReadBufferRect commandWriteBufferRect commandCopyBufferRect commandUser commandBarrier commandMigrateMemObjects commandFillBuffer commandFillImage commandGlFenceSyncObjectKhr (if cl_khr_gl_event is enabled) CommandAcquireD3D10ObjectsKhr (if cl_khr_d3d10_sharing is enabled) CommandReleaseD3D10ObjectsKhr (if cl_khr_d3d10_sharing is enabled) CommandAcquireDx9MediaSurfacesKhr (if cl_khr_dx9_media_sharing is enabled) CommandReleaseDx9MediaSurfacesKhr (if cl_khr_dx9_media_sharing is enabled) CommandAcquireD3D11ObjectsKhr (if  cl_khr_d3d11_sharing is enabled) CommandReleaseD3D11ObjectsKhr (if  cl_khr_d3d11_sharing is enabled) EventCommand executionStatuscl_int Return the execution status of the command identified by event. The valid values are: Queued (command has been enqueued in the command-queue), Submitted (enqueued command has been submitted by the host to the device associated with the command-queue), Running (device is currently executing this command), Complete (the command has completed), or  Error code given by a negative integer value. (command was abnormally terminated – this may be caused by a bad memory access etc.) These error codes come from the same set of error codes that are returned from the platform or runtime API calls as return values or errcode_ret values.  The error code values are negative, and event state values are positive. The event state values are ordered from the largest value (Queued) for the first or initial state to the smallest value (Complete or negative integer value) for the last or complete state. The value of Complete and Success are the same. EventReferenceCountcl_uint Return the event reference count. The reference count returned should be considered immediately stale. It is unsuitable for general use in applications.  This feature is provided for identifying memory leaks.
        /// </param>
        /// <param name="param_value_size"> 
        /// Specifies the size in bytes of memory pointed to by param_value. This size must be ≥ size of the return type as described in the table below.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data copied to param_value. If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetEventInfo")]
        [CLSCompliant(false)]
        public static ErrorCode GetEventInfo<T3>(ComputeEvent @event, OpenTK.Compute.CL12.EventInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] ref T3 param_value, [OutAttribute] IntPtr[] param_value_size_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Returns information about the event object.
        /// </summary>
        /// <param name="event"> 
        /// Specifies the event object being queried.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the information to query. The list of supported param_name types and the information returned in param_value by clGetEventInfo is described in the table below: cl_event_infoReturn TypeInformation returned in param_valueEventCommandQueuecl_command_queue Return the command-queue associated with event. For user event objects, a NULL value is returned. EventContextcl_context Return the context associated with event. EventCommandTypecl_command_typeReturn the command associated with event. Can be one of the following values: CommandNdrangeKernel commandTask commandNativeKernel commandReadBuffer commandWriteBuffer commandCopyBuffer commandReadImage commandWriteImage commandCopyImage commandCopyBufferToImage commandCopyImageToBuffer commandMapBuffer commandMapImage commandUnmapMemObject commandMarker commandAcquireGlObjects commandReleaseGlObjects commandReadBufferRect commandWriteBufferRect commandCopyBufferRect commandUser commandBarrier commandMigrateMemObjects commandFillBuffer commandFillImage commandGlFenceSyncObjectKhr (if cl_khr_gl_event is enabled) CommandAcquireD3D10ObjectsKhr (if cl_khr_d3d10_sharing is enabled) CommandReleaseD3D10ObjectsKhr (if cl_khr_d3d10_sharing is enabled) CommandAcquireDx9MediaSurfacesKhr (if cl_khr_dx9_media_sharing is enabled) CommandReleaseDx9MediaSurfacesKhr (if cl_khr_dx9_media_sharing is enabled) CommandAcquireD3D11ObjectsKhr (if  cl_khr_d3d11_sharing is enabled) CommandReleaseD3D11ObjectsKhr (if  cl_khr_d3d11_sharing is enabled) EventCommand executionStatuscl_int Return the execution status of the command identified by event. The valid values are: Queued (command has been enqueued in the command-queue), Submitted (enqueued command has been submitted by the host to the device associated with the command-queue), Running (device is currently executing this command), Complete (the command has completed), or  Error code given by a negative integer value. (command was abnormally terminated – this may be caused by a bad memory access etc.) These error codes come from the same set of error codes that are returned from the platform or runtime API calls as return values or errcode_ret values.  The error code values are negative, and event state values are positive. The event state values are ordered from the largest value (Queued) for the first or initial state to the smallest value (Complete or negative integer value) for the last or complete state. The value of Complete and Success are the same. EventReferenceCountcl_uint Return the event reference count. The reference count returned should be considered immediately stale. It is unsuitable for general use in applications.  This feature is provided for identifying memory leaks.
        /// </param>
        /// <param name="param_value_size"> 
        /// Specifies the size in bytes of memory pointed to by param_value. This size must be ≥ size of the return type as described in the table below.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data copied to param_value. If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetEventInfo")]
        [CLSCompliant(false)]
        public static ErrorCode GetEventInfo<T3>(ComputeEvent @event, OpenTK.Compute.CL12.EventInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] ref T3 param_value, [OutAttribute] out IntPtr param_value_size_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Returns information about the event object.
        /// </summary>
        /// <param name="event"> 
        /// Specifies the event object being queried.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the information to query. The list of supported param_name types and the information returned in param_value by clGetEventInfo is described in the table below: cl_event_infoReturn TypeInformation returned in param_valueEventCommandQueuecl_command_queue Return the command-queue associated with event. For user event objects, a NULL value is returned. EventContextcl_context Return the context associated with event. EventCommandTypecl_command_typeReturn the command associated with event. Can be one of the following values: CommandNdrangeKernel commandTask commandNativeKernel commandReadBuffer commandWriteBuffer commandCopyBuffer commandReadImage commandWriteImage commandCopyImage commandCopyBufferToImage commandCopyImageToBuffer commandMapBuffer commandMapImage commandUnmapMemObject commandMarker commandAcquireGlObjects commandReleaseGlObjects commandReadBufferRect commandWriteBufferRect commandCopyBufferRect commandUser commandBarrier commandMigrateMemObjects commandFillBuffer commandFillImage commandGlFenceSyncObjectKhr (if cl_khr_gl_event is enabled) CommandAcquireD3D10ObjectsKhr (if cl_khr_d3d10_sharing is enabled) CommandReleaseD3D10ObjectsKhr (if cl_khr_d3d10_sharing is enabled) CommandAcquireDx9MediaSurfacesKhr (if cl_khr_dx9_media_sharing is enabled) CommandReleaseDx9MediaSurfacesKhr (if cl_khr_dx9_media_sharing is enabled) CommandAcquireD3D11ObjectsKhr (if  cl_khr_d3d11_sharing is enabled) CommandReleaseD3D11ObjectsKhr (if  cl_khr_d3d11_sharing is enabled) EventCommand executionStatuscl_int Return the execution status of the command identified by event. The valid values are: Queued (command has been enqueued in the command-queue), Submitted (enqueued command has been submitted by the host to the device associated with the command-queue), Running (device is currently executing this command), Complete (the command has completed), or  Error code given by a negative integer value. (command was abnormally terminated – this may be caused by a bad memory access etc.) These error codes come from the same set of error codes that are returned from the platform or runtime API calls as return values or errcode_ret values.  The error code values are negative, and event state values are positive. The event state values are ordered from the largest value (Queued) for the first or initial state to the smallest value (Complete or negative integer value) for the last or complete state. The value of Complete and Success are the same. EventReferenceCountcl_uint Return the event reference count. The reference count returned should be considered immediately stale. It is unsuitable for general use in applications.  This feature is provided for identifying memory leaks.
        /// </param>
        /// <param name="param_value_size"> 
        /// Specifies the size in bytes of memory pointed to by param_value. This size must be ≥ size of the return type as described in the table below.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data copied to param_value. If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetEventInfo")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode GetEventInfo<T3>(ComputeEvent @event, OpenTK.Compute.CL12.EventInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] ref T3 param_value, [OutAttribute] IntPtr* param_value_size_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Returns profiling information for the command associated with event if profiling is enabled.
        /// </summary>
        /// <param name="event"> 
        /// Specifies the event object.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the profiling data to query. The list of supported param_name types and the information returned in param_value by clGetEventProfilingInfo is described in the table of parameter queries below.
        /// </param>
        /// <param name="param_value_size"> 
        /// Specifies the size in bytes of memory pointed to by param_value.  This size must be ≥ size of return type as described in the table below.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. if param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data copied to param_value.  If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetEventProfilingInfo")]
        [CLSCompliant(false)]
        public static ErrorCode GetEventProfilingInfo(ComputeEvent @event, OpenTK.Compute.CL12.ProfilingInfo param_name, IntPtr param_value_size, IntPtr param_value, [OutAttribute] IntPtr[] param_value_size_ret) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Returns profiling information for the command associated with event if profiling is enabled.
        /// </summary>
        /// <param name="event"> 
        /// Specifies the event object.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the profiling data to query. The list of supported param_name types and the information returned in param_value by clGetEventProfilingInfo is described in the table of parameter queries below.
        /// </param>
        /// <param name="param_value_size"> 
        /// Specifies the size in bytes of memory pointed to by param_value.  This size must be ≥ size of return type as described in the table below.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. if param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data copied to param_value.  If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetEventProfilingInfo")]
        [CLSCompliant(false)]
        public static ErrorCode GetEventProfilingInfo(ComputeEvent @event, OpenTK.Compute.CL12.ProfilingInfo param_name, IntPtr param_value_size, IntPtr param_value, [OutAttribute] out IntPtr param_value_size_ret) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Returns profiling information for the command associated with event if profiling is enabled.
        /// </summary>
        /// <param name="event"> 
        /// Specifies the event object.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the profiling data to query. The list of supported param_name types and the information returned in param_value by clGetEventProfilingInfo is described in the table of parameter queries below.
        /// </param>
        /// <param name="param_value_size"> 
        /// Specifies the size in bytes of memory pointed to by param_value.  This size must be ≥ size of return type as described in the table below.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. if param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data copied to param_value.  If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetEventProfilingInfo")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode GetEventProfilingInfo(ComputeEvent @event, OpenTK.Compute.CL12.ProfilingInfo param_name, IntPtr param_value_size, IntPtr param_value, [OutAttribute] IntPtr* param_value_size_ret) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Returns profiling information for the command associated with event if profiling is enabled.
        /// </summary>
        /// <param name="event"> 
        /// Specifies the event object.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the profiling data to query. The list of supported param_name types and the information returned in param_value by clGetEventProfilingInfo is described in the table of parameter queries below.
        /// </param>
        /// <param name="param_value_size"> 
        /// Specifies the size in bytes of memory pointed to by param_value.  This size must be ≥ size of return type as described in the table below.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. if param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data copied to param_value.  If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetEventProfilingInfo")]
        [CLSCompliant(false)]
        public static ErrorCode GetEventProfilingInfo<T3>(ComputeEvent @event, OpenTK.Compute.CL12.ProfilingInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] T3[] param_value, [OutAttribute] IntPtr[] param_value_size_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Returns profiling information for the command associated with event if profiling is enabled.
        /// </summary>
        /// <param name="event"> 
        /// Specifies the event object.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the profiling data to query. The list of supported param_name types and the information returned in param_value by clGetEventProfilingInfo is described in the table of parameter queries below.
        /// </param>
        /// <param name="param_value_size"> 
        /// Specifies the size in bytes of memory pointed to by param_value.  This size must be ≥ size of return type as described in the table below.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. if param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data copied to param_value.  If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetEventProfilingInfo")]
        [CLSCompliant(false)]
        public static ErrorCode GetEventProfilingInfo<T3>(ComputeEvent @event, OpenTK.Compute.CL12.ProfilingInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] T3[] param_value, [OutAttribute] out IntPtr param_value_size_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Returns profiling information for the command associated with event if profiling is enabled.
        /// </summary>
        /// <param name="event"> 
        /// Specifies the event object.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the profiling data to query. The list of supported param_name types and the information returned in param_value by clGetEventProfilingInfo is described in the table of parameter queries below.
        /// </param>
        /// <param name="param_value_size"> 
        /// Specifies the size in bytes of memory pointed to by param_value.  This size must be ≥ size of return type as described in the table below.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. if param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data copied to param_value.  If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetEventProfilingInfo")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode GetEventProfilingInfo<T3>(ComputeEvent @event, OpenTK.Compute.CL12.ProfilingInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] T3[] param_value, [OutAttribute] IntPtr* param_value_size_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Returns profiling information for the command associated with event if profiling is enabled.
        /// </summary>
        /// <param name="event"> 
        /// Specifies the event object.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the profiling data to query. The list of supported param_name types and the information returned in param_value by clGetEventProfilingInfo is described in the table of parameter queries below.
        /// </param>
        /// <param name="param_value_size"> 
        /// Specifies the size in bytes of memory pointed to by param_value.  This size must be ≥ size of return type as described in the table below.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. if param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data copied to param_value.  If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetEventProfilingInfo")]
        [CLSCompliant(false)]
        public static ErrorCode GetEventProfilingInfo<T3>(ComputeEvent @event, OpenTK.Compute.CL12.ProfilingInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] T3[,] param_value, [OutAttribute] IntPtr[] param_value_size_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Returns profiling information for the command associated with event if profiling is enabled.
        /// </summary>
        /// <param name="event"> 
        /// Specifies the event object.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the profiling data to query. The list of supported param_name types and the information returned in param_value by clGetEventProfilingInfo is described in the table of parameter queries below.
        /// </param>
        /// <param name="param_value_size"> 
        /// Specifies the size in bytes of memory pointed to by param_value.  This size must be ≥ size of return type as described in the table below.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. if param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data copied to param_value.  If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetEventProfilingInfo")]
        [CLSCompliant(false)]
        public static ErrorCode GetEventProfilingInfo<T3>(ComputeEvent @event, OpenTK.Compute.CL12.ProfilingInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] T3[,] param_value, [OutAttribute] out IntPtr param_value_size_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Returns profiling information for the command associated with event if profiling is enabled.
        /// </summary>
        /// <param name="event"> 
        /// Specifies the event object.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the profiling data to query. The list of supported param_name types and the information returned in param_value by clGetEventProfilingInfo is described in the table of parameter queries below.
        /// </param>
        /// <param name="param_value_size"> 
        /// Specifies the size in bytes of memory pointed to by param_value.  This size must be ≥ size of return type as described in the table below.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. if param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data copied to param_value.  If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetEventProfilingInfo")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode GetEventProfilingInfo<T3>(ComputeEvent @event, OpenTK.Compute.CL12.ProfilingInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] T3[,] param_value, [OutAttribute] IntPtr* param_value_size_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Returns profiling information for the command associated with event if profiling is enabled.
        /// </summary>
        /// <param name="event"> 
        /// Specifies the event object.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the profiling data to query. The list of supported param_name types and the information returned in param_value by clGetEventProfilingInfo is described in the table of parameter queries below.
        /// </param>
        /// <param name="param_value_size"> 
        /// Specifies the size in bytes of memory pointed to by param_value.  This size must be ≥ size of return type as described in the table below.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. if param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data copied to param_value.  If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetEventProfilingInfo")]
        [CLSCompliant(false)]
        public static ErrorCode GetEventProfilingInfo<T3>(ComputeEvent @event, OpenTK.Compute.CL12.ProfilingInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] T3[,,] param_value, [OutAttribute] IntPtr[] param_value_size_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Returns profiling information for the command associated with event if profiling is enabled.
        /// </summary>
        /// <param name="event"> 
        /// Specifies the event object.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the profiling data to query. The list of supported param_name types and the information returned in param_value by clGetEventProfilingInfo is described in the table of parameter queries below.
        /// </param>
        /// <param name="param_value_size"> 
        /// Specifies the size in bytes of memory pointed to by param_value.  This size must be ≥ size of return type as described in the table below.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. if param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data copied to param_value.  If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetEventProfilingInfo")]
        [CLSCompliant(false)]
        public static ErrorCode GetEventProfilingInfo<T3>(ComputeEvent @event, OpenTK.Compute.CL12.ProfilingInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] T3[,,] param_value, [OutAttribute] out IntPtr param_value_size_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Returns profiling information for the command associated with event if profiling is enabled.
        /// </summary>
        /// <param name="event"> 
        /// Specifies the event object.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the profiling data to query. The list of supported param_name types and the information returned in param_value by clGetEventProfilingInfo is described in the table of parameter queries below.
        /// </param>
        /// <param name="param_value_size"> 
        /// Specifies the size in bytes of memory pointed to by param_value.  This size must be ≥ size of return type as described in the table below.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. if param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data copied to param_value.  If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetEventProfilingInfo")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode GetEventProfilingInfo<T3>(ComputeEvent @event, OpenTK.Compute.CL12.ProfilingInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] T3[,,] param_value, [OutAttribute] IntPtr* param_value_size_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Returns profiling information for the command associated with event if profiling is enabled.
        /// </summary>
        /// <param name="event"> 
        /// Specifies the event object.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the profiling data to query. The list of supported param_name types and the information returned in param_value by clGetEventProfilingInfo is described in the table of parameter queries below.
        /// </param>
        /// <param name="param_value_size"> 
        /// Specifies the size in bytes of memory pointed to by param_value.  This size must be ≥ size of return type as described in the table below.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. if param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data copied to param_value.  If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetEventProfilingInfo")]
        [CLSCompliant(false)]
        public static ErrorCode GetEventProfilingInfo<T3>(ComputeEvent @event, OpenTK.Compute.CL12.ProfilingInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] ref T3 param_value, [OutAttribute] IntPtr[] param_value_size_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Returns profiling information for the command associated with event if profiling is enabled.
        /// </summary>
        /// <param name="event"> 
        /// Specifies the event object.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the profiling data to query. The list of supported param_name types and the information returned in param_value by clGetEventProfilingInfo is described in the table of parameter queries below.
        /// </param>
        /// <param name="param_value_size"> 
        /// Specifies the size in bytes of memory pointed to by param_value.  This size must be ≥ size of return type as described in the table below.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. if param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data copied to param_value.  If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetEventProfilingInfo")]
        [CLSCompliant(false)]
        public static ErrorCode GetEventProfilingInfo<T3>(ComputeEvent @event, OpenTK.Compute.CL12.ProfilingInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] ref T3 param_value, [OutAttribute] out IntPtr param_value_size_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Returns profiling information for the command associated with event if profiling is enabled.
        /// </summary>
        /// <param name="event"> 
        /// Specifies the event object.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the profiling data to query. The list of supported param_name types and the information returned in param_value by clGetEventProfilingInfo is described in the table of parameter queries below.
        /// </param>
        /// <param name="param_value_size"> 
        /// Specifies the size in bytes of memory pointed to by param_value.  This size must be ≥ size of return type as described in the table below.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. if param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data copied to param_value.  If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetEventProfilingInfo")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode GetEventProfilingInfo<T3>(ComputeEvent @event, OpenTK.Compute.CL12.ProfilingInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] ref T3 param_value, [OutAttribute] IntPtr* param_value_size_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.2]
        /// Returns the address of the extension function named by funcname for a given platform.
        /// </summary>
        /// <param name="platform"> 
        /// Name of an extension function.
        /// </param>
        /// <param name="func_name"></param>
        [AutoGenerated(Category = "", Version = "1.2", EntryPoint = "clGetExtensionFunctionAddressForPlatform")]
        public static IntPtr GetExtensionFunctionAddressForPlatform(ComputePlatform platform, String func_name) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Get information specific to an image object created with clCreateImage.
        /// </summary>
        /// <param name="image"> 
        /// Specifies the image object being queried.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the information to query. The list of supported param_name types and the information returned in param_value by clGetImageInfo is described in the table  below.
        /// </param>
        /// <param name="param_value_size"> 
        /// Used to specify the size in bytes of memory pointed to by param_value.  This size must be ≥ size of return type as described in the table below. cl_image_infoReturn TypeInfo. returned in  param_valueImageFormatcl_image_format Return image format descriptor specified when image is created with clCreateImage. ImageElementSizesize_t Return size of each element of the image memory object given by image. An element is made up of n channels. The value of n is given in cl_image_format descriptor. ImageRowPitchsize_t Return size in bytes of a row of elements of the image object given by image. ImageSlicePitchsize_t Return calculated slice pitch in bytes of a 2D slice for the 3D image object or size of each image in a 1D or 2D image array given by image. For a 1D image, 1D image buffer and 2D image object return 0. ImageWidthsize_t Return width of image in pixels. ImageHeightsize_t Return height of image in pixels. For a 1D image, 1D image buffer and 1D image array object, height = 0. ImageDepthsize_t Return depth of the image in pixels.  For a 1D image, 1D image buffer, 2D image or 1D and 2D image array object, depth = 0. ImageArraySizesize_t Return number of images in the image array. If image is not an image array, 0 is returned. ImageBuffercl_mem Return buffer object associated with image. ImageNumMipLevelscl_uint Return num_mip_levels associated with image. ImageNumSamplescl_uint Return num_samples associated with image. ImageD3D10SubresourceKhrID3D10Resource * (if the cl_khr_d3d10_sharing extension is enabled) If image was created using clCreateFromD3D10Texture2DKHR or clCreateFromD3D10Texture3DKHR, returns the subresource argument specified when image was created. ImageDx9MediaPlaneKhrcl_uint Returns the plane argument value specified when memobj is created using clCreateFromDX9MediaSurfaceKHR. (If the cl_khr_dx9_media_sharing extension is supported) ImageDx9Media surfacePlaneKhrcl_uint Returns the plane argument value specified when memobj is created using clCreateFromDX9MediaSurfaceKHR. (If the cl_khr_dx9_media_sharing extension is supported) ImageD3D11 subresourceKhrID3D11Resource * If the cl_khr_d3d11_sharing extension is suported, If image was created using clCreateFromD3D11Texture2DKHR, or clCreateFromD3D11Texture3DKHR, returns the subresource argument specified when image was created.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data being queried by param_value. If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetImageInfo")]
        [CLSCompliant(false)]
        public static ErrorCode GetImageInfo(ComputeMemory image, OpenTK.Compute.CL12.ImageInfo param_name, IntPtr param_value_size, IntPtr param_value, [OutAttribute] IntPtr[] param_value_size_ret) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Get information specific to an image object created with clCreateImage.
        /// </summary>
        /// <param name="image"> 
        /// Specifies the image object being queried.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the information to query. The list of supported param_name types and the information returned in param_value by clGetImageInfo is described in the table  below.
        /// </param>
        /// <param name="param_value_size"> 
        /// Used to specify the size in bytes of memory pointed to by param_value.  This size must be ≥ size of return type as described in the table below. cl_image_infoReturn TypeInfo. returned in  param_valueImageFormatcl_image_format Return image format descriptor specified when image is created with clCreateImage. ImageElementSizesize_t Return size of each element of the image memory object given by image. An element is made up of n channels. The value of n is given in cl_image_format descriptor. ImageRowPitchsize_t Return size in bytes of a row of elements of the image object given by image. ImageSlicePitchsize_t Return calculated slice pitch in bytes of a 2D slice for the 3D image object or size of each image in a 1D or 2D image array given by image. For a 1D image, 1D image buffer and 2D image object return 0. ImageWidthsize_t Return width of image in pixels. ImageHeightsize_t Return height of image in pixels. For a 1D image, 1D image buffer and 1D image array object, height = 0. ImageDepthsize_t Return depth of the image in pixels.  For a 1D image, 1D image buffer, 2D image or 1D and 2D image array object, depth = 0. ImageArraySizesize_t Return number of images in the image array. If image is not an image array, 0 is returned. ImageBuffercl_mem Return buffer object associated with image. ImageNumMipLevelscl_uint Return num_mip_levels associated with image. ImageNumSamplescl_uint Return num_samples associated with image. ImageD3D10SubresourceKhrID3D10Resource * (if the cl_khr_d3d10_sharing extension is enabled) If image was created using clCreateFromD3D10Texture2DKHR or clCreateFromD3D10Texture3DKHR, returns the subresource argument specified when image was created. ImageDx9MediaPlaneKhrcl_uint Returns the plane argument value specified when memobj is created using clCreateFromDX9MediaSurfaceKHR. (If the cl_khr_dx9_media_sharing extension is supported) ImageDx9Media surfacePlaneKhrcl_uint Returns the plane argument value specified when memobj is created using clCreateFromDX9MediaSurfaceKHR. (If the cl_khr_dx9_media_sharing extension is supported) ImageD3D11 subresourceKhrID3D11Resource * If the cl_khr_d3d11_sharing extension is suported, If image was created using clCreateFromD3D11Texture2DKHR, or clCreateFromD3D11Texture3DKHR, returns the subresource argument specified when image was created.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data being queried by param_value. If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetImageInfo")]
        [CLSCompliant(false)]
        public static ErrorCode GetImageInfo(ComputeMemory image, OpenTK.Compute.CL12.ImageInfo param_name, IntPtr param_value_size, IntPtr param_value, [OutAttribute] out IntPtr param_value_size_ret) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Get information specific to an image object created with clCreateImage.
        /// </summary>
        /// <param name="image"> 
        /// Specifies the image object being queried.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the information to query. The list of supported param_name types and the information returned in param_value by clGetImageInfo is described in the table  below.
        /// </param>
        /// <param name="param_value_size"> 
        /// Used to specify the size in bytes of memory pointed to by param_value.  This size must be ≥ size of return type as described in the table below. cl_image_infoReturn TypeInfo. returned in  param_valueImageFormatcl_image_format Return image format descriptor specified when image is created with clCreateImage. ImageElementSizesize_t Return size of each element of the image memory object given by image. An element is made up of n channels. The value of n is given in cl_image_format descriptor. ImageRowPitchsize_t Return size in bytes of a row of elements of the image object given by image. ImageSlicePitchsize_t Return calculated slice pitch in bytes of a 2D slice for the 3D image object or size of each image in a 1D or 2D image array given by image. For a 1D image, 1D image buffer and 2D image object return 0. ImageWidthsize_t Return width of image in pixels. ImageHeightsize_t Return height of image in pixels. For a 1D image, 1D image buffer and 1D image array object, height = 0. ImageDepthsize_t Return depth of the image in pixels.  For a 1D image, 1D image buffer, 2D image or 1D and 2D image array object, depth = 0. ImageArraySizesize_t Return number of images in the image array. If image is not an image array, 0 is returned. ImageBuffercl_mem Return buffer object associated with image. ImageNumMipLevelscl_uint Return num_mip_levels associated with image. ImageNumSamplescl_uint Return num_samples associated with image. ImageD3D10SubresourceKhrID3D10Resource * (if the cl_khr_d3d10_sharing extension is enabled) If image was created using clCreateFromD3D10Texture2DKHR or clCreateFromD3D10Texture3DKHR, returns the subresource argument specified when image was created. ImageDx9MediaPlaneKhrcl_uint Returns the plane argument value specified when memobj is created using clCreateFromDX9MediaSurfaceKHR. (If the cl_khr_dx9_media_sharing extension is supported) ImageDx9Media surfacePlaneKhrcl_uint Returns the plane argument value specified when memobj is created using clCreateFromDX9MediaSurfaceKHR. (If the cl_khr_dx9_media_sharing extension is supported) ImageD3D11 subresourceKhrID3D11Resource * If the cl_khr_d3d11_sharing extension is suported, If image was created using clCreateFromD3D11Texture2DKHR, or clCreateFromD3D11Texture3DKHR, returns the subresource argument specified when image was created.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data being queried by param_value. If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetImageInfo")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode GetImageInfo(ComputeMemory image, OpenTK.Compute.CL12.ImageInfo param_name, IntPtr param_value_size, IntPtr param_value, [OutAttribute] IntPtr* param_value_size_ret) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Get information specific to an image object created with clCreateImage.
        /// </summary>
        /// <param name="image"> 
        /// Specifies the image object being queried.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the information to query. The list of supported param_name types and the information returned in param_value by clGetImageInfo is described in the table  below.
        /// </param>
        /// <param name="param_value_size"> 
        /// Used to specify the size in bytes of memory pointed to by param_value.  This size must be ≥ size of return type as described in the table below. cl_image_infoReturn TypeInfo. returned in  param_valueImageFormatcl_image_format Return image format descriptor specified when image is created with clCreateImage. ImageElementSizesize_t Return size of each element of the image memory object given by image. An element is made up of n channels. The value of n is given in cl_image_format descriptor. ImageRowPitchsize_t Return size in bytes of a row of elements of the image object given by image. ImageSlicePitchsize_t Return calculated slice pitch in bytes of a 2D slice for the 3D image object or size of each image in a 1D or 2D image array given by image. For a 1D image, 1D image buffer and 2D image object return 0. ImageWidthsize_t Return width of image in pixels. ImageHeightsize_t Return height of image in pixels. For a 1D image, 1D image buffer and 1D image array object, height = 0. ImageDepthsize_t Return depth of the image in pixels.  For a 1D image, 1D image buffer, 2D image or 1D and 2D image array object, depth = 0. ImageArraySizesize_t Return number of images in the image array. If image is not an image array, 0 is returned. ImageBuffercl_mem Return buffer object associated with image. ImageNumMipLevelscl_uint Return num_mip_levels associated with image. ImageNumSamplescl_uint Return num_samples associated with image. ImageD3D10SubresourceKhrID3D10Resource * (if the cl_khr_d3d10_sharing extension is enabled) If image was created using clCreateFromD3D10Texture2DKHR or clCreateFromD3D10Texture3DKHR, returns the subresource argument specified when image was created. ImageDx9MediaPlaneKhrcl_uint Returns the plane argument value specified when memobj is created using clCreateFromDX9MediaSurfaceKHR. (If the cl_khr_dx9_media_sharing extension is supported) ImageDx9Media surfacePlaneKhrcl_uint Returns the plane argument value specified when memobj is created using clCreateFromDX9MediaSurfaceKHR. (If the cl_khr_dx9_media_sharing extension is supported) ImageD3D11 subresourceKhrID3D11Resource * If the cl_khr_d3d11_sharing extension is suported, If image was created using clCreateFromD3D11Texture2DKHR, or clCreateFromD3D11Texture3DKHR, returns the subresource argument specified when image was created.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data being queried by param_value. If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetImageInfo")]
        [CLSCompliant(false)]
        public static ErrorCode GetImageInfo<T3>(ComputeMemory image, OpenTK.Compute.CL12.ImageInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] T3[] param_value, [OutAttribute] IntPtr[] param_value_size_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Get information specific to an image object created with clCreateImage.
        /// </summary>
        /// <param name="image"> 
        /// Specifies the image object being queried.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the information to query. The list of supported param_name types and the information returned in param_value by clGetImageInfo is described in the table  below.
        /// </param>
        /// <param name="param_value_size"> 
        /// Used to specify the size in bytes of memory pointed to by param_value.  This size must be ≥ size of return type as described in the table below. cl_image_infoReturn TypeInfo. returned in  param_valueImageFormatcl_image_format Return image format descriptor specified when image is created with clCreateImage. ImageElementSizesize_t Return size of each element of the image memory object given by image. An element is made up of n channels. The value of n is given in cl_image_format descriptor. ImageRowPitchsize_t Return size in bytes of a row of elements of the image object given by image. ImageSlicePitchsize_t Return calculated slice pitch in bytes of a 2D slice for the 3D image object or size of each image in a 1D or 2D image array given by image. For a 1D image, 1D image buffer and 2D image object return 0. ImageWidthsize_t Return width of image in pixels. ImageHeightsize_t Return height of image in pixels. For a 1D image, 1D image buffer and 1D image array object, height = 0. ImageDepthsize_t Return depth of the image in pixels.  For a 1D image, 1D image buffer, 2D image or 1D and 2D image array object, depth = 0. ImageArraySizesize_t Return number of images in the image array. If image is not an image array, 0 is returned. ImageBuffercl_mem Return buffer object associated with image. ImageNumMipLevelscl_uint Return num_mip_levels associated with image. ImageNumSamplescl_uint Return num_samples associated with image. ImageD3D10SubresourceKhrID3D10Resource * (if the cl_khr_d3d10_sharing extension is enabled) If image was created using clCreateFromD3D10Texture2DKHR or clCreateFromD3D10Texture3DKHR, returns the subresource argument specified when image was created. ImageDx9MediaPlaneKhrcl_uint Returns the plane argument value specified when memobj is created using clCreateFromDX9MediaSurfaceKHR. (If the cl_khr_dx9_media_sharing extension is supported) ImageDx9Media surfacePlaneKhrcl_uint Returns the plane argument value specified when memobj is created using clCreateFromDX9MediaSurfaceKHR. (If the cl_khr_dx9_media_sharing extension is supported) ImageD3D11 subresourceKhrID3D11Resource * If the cl_khr_d3d11_sharing extension is suported, If image was created using clCreateFromD3D11Texture2DKHR, or clCreateFromD3D11Texture3DKHR, returns the subresource argument specified when image was created.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data being queried by param_value. If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetImageInfo")]
        [CLSCompliant(false)]
        public static ErrorCode GetImageInfo<T3>(ComputeMemory image, OpenTK.Compute.CL12.ImageInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] T3[] param_value, [OutAttribute] out IntPtr param_value_size_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Get information specific to an image object created with clCreateImage.
        /// </summary>
        /// <param name="image"> 
        /// Specifies the image object being queried.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the information to query. The list of supported param_name types and the information returned in param_value by clGetImageInfo is described in the table  below.
        /// </param>
        /// <param name="param_value_size"> 
        /// Used to specify the size in bytes of memory pointed to by param_value.  This size must be ≥ size of return type as described in the table below. cl_image_infoReturn TypeInfo. returned in  param_valueImageFormatcl_image_format Return image format descriptor specified when image is created with clCreateImage. ImageElementSizesize_t Return size of each element of the image memory object given by image. An element is made up of n channels. The value of n is given in cl_image_format descriptor. ImageRowPitchsize_t Return size in bytes of a row of elements of the image object given by image. ImageSlicePitchsize_t Return calculated slice pitch in bytes of a 2D slice for the 3D image object or size of each image in a 1D or 2D image array given by image. For a 1D image, 1D image buffer and 2D image object return 0. ImageWidthsize_t Return width of image in pixels. ImageHeightsize_t Return height of image in pixels. For a 1D image, 1D image buffer and 1D image array object, height = 0. ImageDepthsize_t Return depth of the image in pixels.  For a 1D image, 1D image buffer, 2D image or 1D and 2D image array object, depth = 0. ImageArraySizesize_t Return number of images in the image array. If image is not an image array, 0 is returned. ImageBuffercl_mem Return buffer object associated with image. ImageNumMipLevelscl_uint Return num_mip_levels associated with image. ImageNumSamplescl_uint Return num_samples associated with image. ImageD3D10SubresourceKhrID3D10Resource * (if the cl_khr_d3d10_sharing extension is enabled) If image was created using clCreateFromD3D10Texture2DKHR or clCreateFromD3D10Texture3DKHR, returns the subresource argument specified when image was created. ImageDx9MediaPlaneKhrcl_uint Returns the plane argument value specified when memobj is created using clCreateFromDX9MediaSurfaceKHR. (If the cl_khr_dx9_media_sharing extension is supported) ImageDx9Media surfacePlaneKhrcl_uint Returns the plane argument value specified when memobj is created using clCreateFromDX9MediaSurfaceKHR. (If the cl_khr_dx9_media_sharing extension is supported) ImageD3D11 subresourceKhrID3D11Resource * If the cl_khr_d3d11_sharing extension is suported, If image was created using clCreateFromD3D11Texture2DKHR, or clCreateFromD3D11Texture3DKHR, returns the subresource argument specified when image was created.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data being queried by param_value. If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetImageInfo")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode GetImageInfo<T3>(ComputeMemory image, OpenTK.Compute.CL12.ImageInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] T3[] param_value, [OutAttribute] IntPtr* param_value_size_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Get information specific to an image object created with clCreateImage.
        /// </summary>
        /// <param name="image"> 
        /// Specifies the image object being queried.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the information to query. The list of supported param_name types and the information returned in param_value by clGetImageInfo is described in the table  below.
        /// </param>
        /// <param name="param_value_size"> 
        /// Used to specify the size in bytes of memory pointed to by param_value.  This size must be ≥ size of return type as described in the table below. cl_image_infoReturn TypeInfo. returned in  param_valueImageFormatcl_image_format Return image format descriptor specified when image is created with clCreateImage. ImageElementSizesize_t Return size of each element of the image memory object given by image. An element is made up of n channels. The value of n is given in cl_image_format descriptor. ImageRowPitchsize_t Return size in bytes of a row of elements of the image object given by image. ImageSlicePitchsize_t Return calculated slice pitch in bytes of a 2D slice for the 3D image object or size of each image in a 1D or 2D image array given by image. For a 1D image, 1D image buffer and 2D image object return 0. ImageWidthsize_t Return width of image in pixels. ImageHeightsize_t Return height of image in pixels. For a 1D image, 1D image buffer and 1D image array object, height = 0. ImageDepthsize_t Return depth of the image in pixels.  For a 1D image, 1D image buffer, 2D image or 1D and 2D image array object, depth = 0. ImageArraySizesize_t Return number of images in the image array. If image is not an image array, 0 is returned. ImageBuffercl_mem Return buffer object associated with image. ImageNumMipLevelscl_uint Return num_mip_levels associated with image. ImageNumSamplescl_uint Return num_samples associated with image. ImageD3D10SubresourceKhrID3D10Resource * (if the cl_khr_d3d10_sharing extension is enabled) If image was created using clCreateFromD3D10Texture2DKHR or clCreateFromD3D10Texture3DKHR, returns the subresource argument specified when image was created. ImageDx9MediaPlaneKhrcl_uint Returns the plane argument value specified when memobj is created using clCreateFromDX9MediaSurfaceKHR. (If the cl_khr_dx9_media_sharing extension is supported) ImageDx9Media surfacePlaneKhrcl_uint Returns the plane argument value specified when memobj is created using clCreateFromDX9MediaSurfaceKHR. (If the cl_khr_dx9_media_sharing extension is supported) ImageD3D11 subresourceKhrID3D11Resource * If the cl_khr_d3d11_sharing extension is suported, If image was created using clCreateFromD3D11Texture2DKHR, or clCreateFromD3D11Texture3DKHR, returns the subresource argument specified when image was created.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data being queried by param_value. If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetImageInfo")]
        [CLSCompliant(false)]
        public static ErrorCode GetImageInfo<T3>(ComputeMemory image, OpenTK.Compute.CL12.ImageInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] T3[,] param_value, [OutAttribute] IntPtr[] param_value_size_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Get information specific to an image object created with clCreateImage.
        /// </summary>
        /// <param name="image"> 
        /// Specifies the image object being queried.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the information to query. The list of supported param_name types and the information returned in param_value by clGetImageInfo is described in the table  below.
        /// </param>
        /// <param name="param_value_size"> 
        /// Used to specify the size in bytes of memory pointed to by param_value.  This size must be ≥ size of return type as described in the table below. cl_image_infoReturn TypeInfo. returned in  param_valueImageFormatcl_image_format Return image format descriptor specified when image is created with clCreateImage. ImageElementSizesize_t Return size of each element of the image memory object given by image. An element is made up of n channels. The value of n is given in cl_image_format descriptor. ImageRowPitchsize_t Return size in bytes of a row of elements of the image object given by image. ImageSlicePitchsize_t Return calculated slice pitch in bytes of a 2D slice for the 3D image object or size of each image in a 1D or 2D image array given by image. For a 1D image, 1D image buffer and 2D image object return 0. ImageWidthsize_t Return width of image in pixels. ImageHeightsize_t Return height of image in pixels. For a 1D image, 1D image buffer and 1D image array object, height = 0. ImageDepthsize_t Return depth of the image in pixels.  For a 1D image, 1D image buffer, 2D image or 1D and 2D image array object, depth = 0. ImageArraySizesize_t Return number of images in the image array. If image is not an image array, 0 is returned. ImageBuffercl_mem Return buffer object associated with image. ImageNumMipLevelscl_uint Return num_mip_levels associated with image. ImageNumSamplescl_uint Return num_samples associated with image. ImageD3D10SubresourceKhrID3D10Resource * (if the cl_khr_d3d10_sharing extension is enabled) If image was created using clCreateFromD3D10Texture2DKHR or clCreateFromD3D10Texture3DKHR, returns the subresource argument specified when image was created. ImageDx9MediaPlaneKhrcl_uint Returns the plane argument value specified when memobj is created using clCreateFromDX9MediaSurfaceKHR. (If the cl_khr_dx9_media_sharing extension is supported) ImageDx9Media surfacePlaneKhrcl_uint Returns the plane argument value specified when memobj is created using clCreateFromDX9MediaSurfaceKHR. (If the cl_khr_dx9_media_sharing extension is supported) ImageD3D11 subresourceKhrID3D11Resource * If the cl_khr_d3d11_sharing extension is suported, If image was created using clCreateFromD3D11Texture2DKHR, or clCreateFromD3D11Texture3DKHR, returns the subresource argument specified when image was created.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data being queried by param_value. If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetImageInfo")]
        [CLSCompliant(false)]
        public static ErrorCode GetImageInfo<T3>(ComputeMemory image, OpenTK.Compute.CL12.ImageInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] T3[,] param_value, [OutAttribute] out IntPtr param_value_size_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Get information specific to an image object created with clCreateImage.
        /// </summary>
        /// <param name="image"> 
        /// Specifies the image object being queried.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the information to query. The list of supported param_name types and the information returned in param_value by clGetImageInfo is described in the table  below.
        /// </param>
        /// <param name="param_value_size"> 
        /// Used to specify the size in bytes of memory pointed to by param_value.  This size must be ≥ size of return type as described in the table below. cl_image_infoReturn TypeInfo. returned in  param_valueImageFormatcl_image_format Return image format descriptor specified when image is created with clCreateImage. ImageElementSizesize_t Return size of each element of the image memory object given by image. An element is made up of n channels. The value of n is given in cl_image_format descriptor. ImageRowPitchsize_t Return size in bytes of a row of elements of the image object given by image. ImageSlicePitchsize_t Return calculated slice pitch in bytes of a 2D slice for the 3D image object or size of each image in a 1D or 2D image array given by image. For a 1D image, 1D image buffer and 2D image object return 0. ImageWidthsize_t Return width of image in pixels. ImageHeightsize_t Return height of image in pixels. For a 1D image, 1D image buffer and 1D image array object, height = 0. ImageDepthsize_t Return depth of the image in pixels.  For a 1D image, 1D image buffer, 2D image or 1D and 2D image array object, depth = 0. ImageArraySizesize_t Return number of images in the image array. If image is not an image array, 0 is returned. ImageBuffercl_mem Return buffer object associated with image. ImageNumMipLevelscl_uint Return num_mip_levels associated with image. ImageNumSamplescl_uint Return num_samples associated with image. ImageD3D10SubresourceKhrID3D10Resource * (if the cl_khr_d3d10_sharing extension is enabled) If image was created using clCreateFromD3D10Texture2DKHR or clCreateFromD3D10Texture3DKHR, returns the subresource argument specified when image was created. ImageDx9MediaPlaneKhrcl_uint Returns the plane argument value specified when memobj is created using clCreateFromDX9MediaSurfaceKHR. (If the cl_khr_dx9_media_sharing extension is supported) ImageDx9Media surfacePlaneKhrcl_uint Returns the plane argument value specified when memobj is created using clCreateFromDX9MediaSurfaceKHR. (If the cl_khr_dx9_media_sharing extension is supported) ImageD3D11 subresourceKhrID3D11Resource * If the cl_khr_d3d11_sharing extension is suported, If image was created using clCreateFromD3D11Texture2DKHR, or clCreateFromD3D11Texture3DKHR, returns the subresource argument specified when image was created.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data being queried by param_value. If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetImageInfo")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode GetImageInfo<T3>(ComputeMemory image, OpenTK.Compute.CL12.ImageInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] T3[,] param_value, [OutAttribute] IntPtr* param_value_size_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Get information specific to an image object created with clCreateImage.
        /// </summary>
        /// <param name="image"> 
        /// Specifies the image object being queried.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the information to query. The list of supported param_name types and the information returned in param_value by clGetImageInfo is described in the table  below.
        /// </param>
        /// <param name="param_value_size"> 
        /// Used to specify the size in bytes of memory pointed to by param_value.  This size must be ≥ size of return type as described in the table below. cl_image_infoReturn TypeInfo. returned in  param_valueImageFormatcl_image_format Return image format descriptor specified when image is created with clCreateImage. ImageElementSizesize_t Return size of each element of the image memory object given by image. An element is made up of n channels. The value of n is given in cl_image_format descriptor. ImageRowPitchsize_t Return size in bytes of a row of elements of the image object given by image. ImageSlicePitchsize_t Return calculated slice pitch in bytes of a 2D slice for the 3D image object or size of each image in a 1D or 2D image array given by image. For a 1D image, 1D image buffer and 2D image object return 0. ImageWidthsize_t Return width of image in pixels. ImageHeightsize_t Return height of image in pixels. For a 1D image, 1D image buffer and 1D image array object, height = 0. ImageDepthsize_t Return depth of the image in pixels.  For a 1D image, 1D image buffer, 2D image or 1D and 2D image array object, depth = 0. ImageArraySizesize_t Return number of images in the image array. If image is not an image array, 0 is returned. ImageBuffercl_mem Return buffer object associated with image. ImageNumMipLevelscl_uint Return num_mip_levels associated with image. ImageNumSamplescl_uint Return num_samples associated with image. ImageD3D10SubresourceKhrID3D10Resource * (if the cl_khr_d3d10_sharing extension is enabled) If image was created using clCreateFromD3D10Texture2DKHR or clCreateFromD3D10Texture3DKHR, returns the subresource argument specified when image was created. ImageDx9MediaPlaneKhrcl_uint Returns the plane argument value specified when memobj is created using clCreateFromDX9MediaSurfaceKHR. (If the cl_khr_dx9_media_sharing extension is supported) ImageDx9Media surfacePlaneKhrcl_uint Returns the plane argument value specified when memobj is created using clCreateFromDX9MediaSurfaceKHR. (If the cl_khr_dx9_media_sharing extension is supported) ImageD3D11 subresourceKhrID3D11Resource * If the cl_khr_d3d11_sharing extension is suported, If image was created using clCreateFromD3D11Texture2DKHR, or clCreateFromD3D11Texture3DKHR, returns the subresource argument specified when image was created.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data being queried by param_value. If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetImageInfo")]
        [CLSCompliant(false)]
        public static ErrorCode GetImageInfo<T3>(ComputeMemory image, OpenTK.Compute.CL12.ImageInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] T3[,,] param_value, [OutAttribute] IntPtr[] param_value_size_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Get information specific to an image object created with clCreateImage.
        /// </summary>
        /// <param name="image"> 
        /// Specifies the image object being queried.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the information to query. The list of supported param_name types and the information returned in param_value by clGetImageInfo is described in the table  below.
        /// </param>
        /// <param name="param_value_size"> 
        /// Used to specify the size in bytes of memory pointed to by param_value.  This size must be ≥ size of return type as described in the table below. cl_image_infoReturn TypeInfo. returned in  param_valueImageFormatcl_image_format Return image format descriptor specified when image is created with clCreateImage. ImageElementSizesize_t Return size of each element of the image memory object given by image. An element is made up of n channels. The value of n is given in cl_image_format descriptor. ImageRowPitchsize_t Return size in bytes of a row of elements of the image object given by image. ImageSlicePitchsize_t Return calculated slice pitch in bytes of a 2D slice for the 3D image object or size of each image in a 1D or 2D image array given by image. For a 1D image, 1D image buffer and 2D image object return 0. ImageWidthsize_t Return width of image in pixels. ImageHeightsize_t Return height of image in pixels. For a 1D image, 1D image buffer and 1D image array object, height = 0. ImageDepthsize_t Return depth of the image in pixels.  For a 1D image, 1D image buffer, 2D image or 1D and 2D image array object, depth = 0. ImageArraySizesize_t Return number of images in the image array. If image is not an image array, 0 is returned. ImageBuffercl_mem Return buffer object associated with image. ImageNumMipLevelscl_uint Return num_mip_levels associated with image. ImageNumSamplescl_uint Return num_samples associated with image. ImageD3D10SubresourceKhrID3D10Resource * (if the cl_khr_d3d10_sharing extension is enabled) If image was created using clCreateFromD3D10Texture2DKHR or clCreateFromD3D10Texture3DKHR, returns the subresource argument specified when image was created. ImageDx9MediaPlaneKhrcl_uint Returns the plane argument value specified when memobj is created using clCreateFromDX9MediaSurfaceKHR. (If the cl_khr_dx9_media_sharing extension is supported) ImageDx9Media surfacePlaneKhrcl_uint Returns the plane argument value specified when memobj is created using clCreateFromDX9MediaSurfaceKHR. (If the cl_khr_dx9_media_sharing extension is supported) ImageD3D11 subresourceKhrID3D11Resource * If the cl_khr_d3d11_sharing extension is suported, If image was created using clCreateFromD3D11Texture2DKHR, or clCreateFromD3D11Texture3DKHR, returns the subresource argument specified when image was created.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data being queried by param_value. If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetImageInfo")]
        [CLSCompliant(false)]
        public static ErrorCode GetImageInfo<T3>(ComputeMemory image, OpenTK.Compute.CL12.ImageInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] T3[,,] param_value, [OutAttribute] out IntPtr param_value_size_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Get information specific to an image object created with clCreateImage.
        /// </summary>
        /// <param name="image"> 
        /// Specifies the image object being queried.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the information to query. The list of supported param_name types and the information returned in param_value by clGetImageInfo is described in the table  below.
        /// </param>
        /// <param name="param_value_size"> 
        /// Used to specify the size in bytes of memory pointed to by param_value.  This size must be ≥ size of return type as described in the table below. cl_image_infoReturn TypeInfo. returned in  param_valueImageFormatcl_image_format Return image format descriptor specified when image is created with clCreateImage. ImageElementSizesize_t Return size of each element of the image memory object given by image. An element is made up of n channels. The value of n is given in cl_image_format descriptor. ImageRowPitchsize_t Return size in bytes of a row of elements of the image object given by image. ImageSlicePitchsize_t Return calculated slice pitch in bytes of a 2D slice for the 3D image object or size of each image in a 1D or 2D image array given by image. For a 1D image, 1D image buffer and 2D image object return 0. ImageWidthsize_t Return width of image in pixels. ImageHeightsize_t Return height of image in pixels. For a 1D image, 1D image buffer and 1D image array object, height = 0. ImageDepthsize_t Return depth of the image in pixels.  For a 1D image, 1D image buffer, 2D image or 1D and 2D image array object, depth = 0. ImageArraySizesize_t Return number of images in the image array. If image is not an image array, 0 is returned. ImageBuffercl_mem Return buffer object associated with image. ImageNumMipLevelscl_uint Return num_mip_levels associated with image. ImageNumSamplescl_uint Return num_samples associated with image. ImageD3D10SubresourceKhrID3D10Resource * (if the cl_khr_d3d10_sharing extension is enabled) If image was created using clCreateFromD3D10Texture2DKHR or clCreateFromD3D10Texture3DKHR, returns the subresource argument specified when image was created. ImageDx9MediaPlaneKhrcl_uint Returns the plane argument value specified when memobj is created using clCreateFromDX9MediaSurfaceKHR. (If the cl_khr_dx9_media_sharing extension is supported) ImageDx9Media surfacePlaneKhrcl_uint Returns the plane argument value specified when memobj is created using clCreateFromDX9MediaSurfaceKHR. (If the cl_khr_dx9_media_sharing extension is supported) ImageD3D11 subresourceKhrID3D11Resource * If the cl_khr_d3d11_sharing extension is suported, If image was created using clCreateFromD3D11Texture2DKHR, or clCreateFromD3D11Texture3DKHR, returns the subresource argument specified when image was created.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data being queried by param_value. If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetImageInfo")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode GetImageInfo<T3>(ComputeMemory image, OpenTK.Compute.CL12.ImageInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] T3[,,] param_value, [OutAttribute] IntPtr* param_value_size_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Get information specific to an image object created with clCreateImage.
        /// </summary>
        /// <param name="image"> 
        /// Specifies the image object being queried.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the information to query. The list of supported param_name types and the information returned in param_value by clGetImageInfo is described in the table  below.
        /// </param>
        /// <param name="param_value_size"> 
        /// Used to specify the size in bytes of memory pointed to by param_value.  This size must be ≥ size of return type as described in the table below. cl_image_infoReturn TypeInfo. returned in  param_valueImageFormatcl_image_format Return image format descriptor specified when image is created with clCreateImage. ImageElementSizesize_t Return size of each element of the image memory object given by image. An element is made up of n channels. The value of n is given in cl_image_format descriptor. ImageRowPitchsize_t Return size in bytes of a row of elements of the image object given by image. ImageSlicePitchsize_t Return calculated slice pitch in bytes of a 2D slice for the 3D image object or size of each image in a 1D or 2D image array given by image. For a 1D image, 1D image buffer and 2D image object return 0. ImageWidthsize_t Return width of image in pixels. ImageHeightsize_t Return height of image in pixels. For a 1D image, 1D image buffer and 1D image array object, height = 0. ImageDepthsize_t Return depth of the image in pixels.  For a 1D image, 1D image buffer, 2D image or 1D and 2D image array object, depth = 0. ImageArraySizesize_t Return number of images in the image array. If image is not an image array, 0 is returned. ImageBuffercl_mem Return buffer object associated with image. ImageNumMipLevelscl_uint Return num_mip_levels associated with image. ImageNumSamplescl_uint Return num_samples associated with image. ImageD3D10SubresourceKhrID3D10Resource * (if the cl_khr_d3d10_sharing extension is enabled) If image was created using clCreateFromD3D10Texture2DKHR or clCreateFromD3D10Texture3DKHR, returns the subresource argument specified when image was created. ImageDx9MediaPlaneKhrcl_uint Returns the plane argument value specified when memobj is created using clCreateFromDX9MediaSurfaceKHR. (If the cl_khr_dx9_media_sharing extension is supported) ImageDx9Media surfacePlaneKhrcl_uint Returns the plane argument value specified when memobj is created using clCreateFromDX9MediaSurfaceKHR. (If the cl_khr_dx9_media_sharing extension is supported) ImageD3D11 subresourceKhrID3D11Resource * If the cl_khr_d3d11_sharing extension is suported, If image was created using clCreateFromD3D11Texture2DKHR, or clCreateFromD3D11Texture3DKHR, returns the subresource argument specified when image was created.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data being queried by param_value. If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetImageInfo")]
        [CLSCompliant(false)]
        public static ErrorCode GetImageInfo<T3>(ComputeMemory image, OpenTK.Compute.CL12.ImageInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] ref T3 param_value, [OutAttribute] IntPtr[] param_value_size_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Get information specific to an image object created with clCreateImage.
        /// </summary>
        /// <param name="image"> 
        /// Specifies the image object being queried.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the information to query. The list of supported param_name types and the information returned in param_value by clGetImageInfo is described in the table  below.
        /// </param>
        /// <param name="param_value_size"> 
        /// Used to specify the size in bytes of memory pointed to by param_value.  This size must be ≥ size of return type as described in the table below. cl_image_infoReturn TypeInfo. returned in  param_valueImageFormatcl_image_format Return image format descriptor specified when image is created with clCreateImage. ImageElementSizesize_t Return size of each element of the image memory object given by image. An element is made up of n channels. The value of n is given in cl_image_format descriptor. ImageRowPitchsize_t Return size in bytes of a row of elements of the image object given by image. ImageSlicePitchsize_t Return calculated slice pitch in bytes of a 2D slice for the 3D image object or size of each image in a 1D or 2D image array given by image. For a 1D image, 1D image buffer and 2D image object return 0. ImageWidthsize_t Return width of image in pixels. ImageHeightsize_t Return height of image in pixels. For a 1D image, 1D image buffer and 1D image array object, height = 0. ImageDepthsize_t Return depth of the image in pixels.  For a 1D image, 1D image buffer, 2D image or 1D and 2D image array object, depth = 0. ImageArraySizesize_t Return number of images in the image array. If image is not an image array, 0 is returned. ImageBuffercl_mem Return buffer object associated with image. ImageNumMipLevelscl_uint Return num_mip_levels associated with image. ImageNumSamplescl_uint Return num_samples associated with image. ImageD3D10SubresourceKhrID3D10Resource * (if the cl_khr_d3d10_sharing extension is enabled) If image was created using clCreateFromD3D10Texture2DKHR or clCreateFromD3D10Texture3DKHR, returns the subresource argument specified when image was created. ImageDx9MediaPlaneKhrcl_uint Returns the plane argument value specified when memobj is created using clCreateFromDX9MediaSurfaceKHR. (If the cl_khr_dx9_media_sharing extension is supported) ImageDx9Media surfacePlaneKhrcl_uint Returns the plane argument value specified when memobj is created using clCreateFromDX9MediaSurfaceKHR. (If the cl_khr_dx9_media_sharing extension is supported) ImageD3D11 subresourceKhrID3D11Resource * If the cl_khr_d3d11_sharing extension is suported, If image was created using clCreateFromD3D11Texture2DKHR, or clCreateFromD3D11Texture3DKHR, returns the subresource argument specified when image was created.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data being queried by param_value. If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetImageInfo")]
        [CLSCompliant(false)]
        public static ErrorCode GetImageInfo<T3>(ComputeMemory image, OpenTK.Compute.CL12.ImageInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] ref T3 param_value, [OutAttribute] out IntPtr param_value_size_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Get information specific to an image object created with clCreateImage.
        /// </summary>
        /// <param name="image"> 
        /// Specifies the image object being queried.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the information to query. The list of supported param_name types and the information returned in param_value by clGetImageInfo is described in the table  below.
        /// </param>
        /// <param name="param_value_size"> 
        /// Used to specify the size in bytes of memory pointed to by param_value.  This size must be ≥ size of return type as described in the table below. cl_image_infoReturn TypeInfo. returned in  param_valueImageFormatcl_image_format Return image format descriptor specified when image is created with clCreateImage. ImageElementSizesize_t Return size of each element of the image memory object given by image. An element is made up of n channels. The value of n is given in cl_image_format descriptor. ImageRowPitchsize_t Return size in bytes of a row of elements of the image object given by image. ImageSlicePitchsize_t Return calculated slice pitch in bytes of a 2D slice for the 3D image object or size of each image in a 1D or 2D image array given by image. For a 1D image, 1D image buffer and 2D image object return 0. ImageWidthsize_t Return width of image in pixels. ImageHeightsize_t Return height of image in pixels. For a 1D image, 1D image buffer and 1D image array object, height = 0. ImageDepthsize_t Return depth of the image in pixels.  For a 1D image, 1D image buffer, 2D image or 1D and 2D image array object, depth = 0. ImageArraySizesize_t Return number of images in the image array. If image is not an image array, 0 is returned. ImageBuffercl_mem Return buffer object associated with image. ImageNumMipLevelscl_uint Return num_mip_levels associated with image. ImageNumSamplescl_uint Return num_samples associated with image. ImageD3D10SubresourceKhrID3D10Resource * (if the cl_khr_d3d10_sharing extension is enabled) If image was created using clCreateFromD3D10Texture2DKHR or clCreateFromD3D10Texture3DKHR, returns the subresource argument specified when image was created. ImageDx9MediaPlaneKhrcl_uint Returns the plane argument value specified when memobj is created using clCreateFromDX9MediaSurfaceKHR. (If the cl_khr_dx9_media_sharing extension is supported) ImageDx9Media surfacePlaneKhrcl_uint Returns the plane argument value specified when memobj is created using clCreateFromDX9MediaSurfaceKHR. (If the cl_khr_dx9_media_sharing extension is supported) ImageD3D11 subresourceKhrID3D11Resource * If the cl_khr_d3d11_sharing extension is suported, If image was created using clCreateFromD3D11Texture2DKHR, or clCreateFromD3D11Texture3DKHR, returns the subresource argument specified when image was created.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data being queried by param_value. If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetImageInfo")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode GetImageInfo<T3>(ComputeMemory image, OpenTK.Compute.CL12.ImageInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] ref T3 param_value, [OutAttribute] IntPtr* param_value_size_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.2]
        /// Returns information about the arguments of a kernel.
        /// </summary>
        /// <param name="kernel"> 
        /// Specifies the kernel object being queried.
        /// </param>
        /// <param name="arg_indx"> 
        /// The argument index. Arguments to the kernel are referred by indices that go from 0 for the leftmost argument to n - 1, where n is the total number of arguments declared by a kernel.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the argument information to query. The list of supported param_name types and the information returned in param_value by clGetKernelArgInfo is described in the table below.
        /// </param>
        /// <param name="param_value_size"> 
        /// Used to specify the size in bytes of memory pointed to by param_value. This size must be  size of return type as described in the table below. cl_kernel_arg_infoReturn TypeInfo. returned in param_valueKernelArgAddressQualifiercl_kernel_arg_- address_qualifier Returns the address qualifier specified for the argument given by arg_indx. This can be one of the following values: KernelArgAddressGlobalKernelArgAddressLocalKernelArgAddressConstantKernelArgAddressPrivate If no address qualifier is specified, the default address qualifier which is KernelArgAddressPrivate is returned. KernelArgAccessQualifiercl_kernel_arg_- access_qualifier Returns the access qualifier specified for the argument given by arg_indx. This can be one of the following values: KernelArgAccessReadOnlyKernelArgAccessWriteOnlyKernelArgAccessReadWriteKernelArgAccessNone If argument is not an image type, KernelArgAccessNone is returned. If argument is an image type, the access qualifier specified or the default access qualifier is returned. KernelArgTypeNamechar[] Returns the type name specified for the argument given by arg_indx.  The type name returned will be the argument type name as it was declared with any whitespace removed.  If argument type name is an unsigned scalar type (i.e. unsigned char, unsigned short, unsigned int, unsigned long), uchar, ushort, uint and ulong will be returned.  The argument type name returned does not include any type qualifiers. KernelArgTypeQualifiercl_kernel_arg- type_qualifier Returns the type qualifier specified for the argument given by arg_indx.  The returned value can be: KernelArgTypeConst, KernelArgTypeRestrict, KernelArgTypeVolatile, a combination of the above enums or KernelArgTypeNone.  NOTE: KernelArgTypeVolatile is returned if the argument is a pointer and the pointer is declared with the volatile qualifier. KernelArgNamechar[] Returns the  name specified for the argument given by arg_indx.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret">[length: 1] 
        /// Returns the actual size in bytes of data copied to param_value. If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "", Version = "1.2", EntryPoint = "clGetKernelArgInfo")]
        [CLSCompliant(false)]
        public static ErrorCode GetKernelArgInfo(ComputeKernel kernel, Int32 arg_indx, OpenTK.Compute.CL12.KernelArgInfo param_name, IntPtr param_value_size, IntPtr param_value, [OutAttribute] out IntPtr param_value_size_ret) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.2]
        /// Returns information about the arguments of a kernel.
        /// </summary>
        /// <param name="kernel"> 
        /// Specifies the kernel object being queried.
        /// </param>
        /// <param name="arg_indx"> 
        /// The argument index. Arguments to the kernel are referred by indices that go from 0 for the leftmost argument to n - 1, where n is the total number of arguments declared by a kernel.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the argument information to query. The list of supported param_name types and the information returned in param_value by clGetKernelArgInfo is described in the table below.
        /// </param>
        /// <param name="param_value_size"> 
        /// Used to specify the size in bytes of memory pointed to by param_value. This size must be  size of return type as described in the table below. cl_kernel_arg_infoReturn TypeInfo. returned in param_valueKernelArgAddressQualifiercl_kernel_arg_- address_qualifier Returns the address qualifier specified for the argument given by arg_indx. This can be one of the following values: KernelArgAddressGlobalKernelArgAddressLocalKernelArgAddressConstantKernelArgAddressPrivate If no address qualifier is specified, the default address qualifier which is KernelArgAddressPrivate is returned. KernelArgAccessQualifiercl_kernel_arg_- access_qualifier Returns the access qualifier specified for the argument given by arg_indx. This can be one of the following values: KernelArgAccessReadOnlyKernelArgAccessWriteOnlyKernelArgAccessReadWriteKernelArgAccessNone If argument is not an image type, KernelArgAccessNone is returned. If argument is an image type, the access qualifier specified or the default access qualifier is returned. KernelArgTypeNamechar[] Returns the type name specified for the argument given by arg_indx.  The type name returned will be the argument type name as it was declared with any whitespace removed.  If argument type name is an unsigned scalar type (i.e. unsigned char, unsigned short, unsigned int, unsigned long), uchar, ushort, uint and ulong will be returned.  The argument type name returned does not include any type qualifiers. KernelArgTypeQualifiercl_kernel_arg- type_qualifier Returns the type qualifier specified for the argument given by arg_indx.  The returned value can be: KernelArgTypeConst, KernelArgTypeRestrict, KernelArgTypeVolatile, a combination of the above enums or KernelArgTypeNone.  NOTE: KernelArgTypeVolatile is returned if the argument is a pointer and the pointer is declared with the volatile qualifier. KernelArgNamechar[] Returns the  name specified for the argument given by arg_indx.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret">[length: 1] 
        /// Returns the actual size in bytes of data copied to param_value. If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "", Version = "1.2", EntryPoint = "clGetKernelArgInfo")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode GetKernelArgInfo(ComputeKernel kernel, Int32 arg_indx, OpenTK.Compute.CL12.KernelArgInfo param_name, IntPtr param_value_size, IntPtr param_value, [OutAttribute] IntPtr* param_value_size_ret) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.2]
        /// Returns information about the arguments of a kernel.
        /// </summary>
        /// <param name="kernel"> 
        /// Specifies the kernel object being queried.
        /// </param>
        /// <param name="arg_indx"> 
        /// The argument index. Arguments to the kernel are referred by indices that go from 0 for the leftmost argument to n - 1, where n is the total number of arguments declared by a kernel.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the argument information to query. The list of supported param_name types and the information returned in param_value by clGetKernelArgInfo is described in the table below.
        /// </param>
        /// <param name="param_value_size"> 
        /// Used to specify the size in bytes of memory pointed to by param_value. This size must be  size of return type as described in the table below. cl_kernel_arg_infoReturn TypeInfo. returned in param_valueKernelArgAddressQualifiercl_kernel_arg_- address_qualifier Returns the address qualifier specified for the argument given by arg_indx. This can be one of the following values: KernelArgAddressGlobalKernelArgAddressLocalKernelArgAddressConstantKernelArgAddressPrivate If no address qualifier is specified, the default address qualifier which is KernelArgAddressPrivate is returned. KernelArgAccessQualifiercl_kernel_arg_- access_qualifier Returns the access qualifier specified for the argument given by arg_indx. This can be one of the following values: KernelArgAccessReadOnlyKernelArgAccessWriteOnlyKernelArgAccessReadWriteKernelArgAccessNone If argument is not an image type, KernelArgAccessNone is returned. If argument is an image type, the access qualifier specified or the default access qualifier is returned. KernelArgTypeNamechar[] Returns the type name specified for the argument given by arg_indx.  The type name returned will be the argument type name as it was declared with any whitespace removed.  If argument type name is an unsigned scalar type (i.e. unsigned char, unsigned short, unsigned int, unsigned long), uchar, ushort, uint and ulong will be returned.  The argument type name returned does not include any type qualifiers. KernelArgTypeQualifiercl_kernel_arg- type_qualifier Returns the type qualifier specified for the argument given by arg_indx.  The returned value can be: KernelArgTypeConst, KernelArgTypeRestrict, KernelArgTypeVolatile, a combination of the above enums or KernelArgTypeNone.  NOTE: KernelArgTypeVolatile is returned if the argument is a pointer and the pointer is declared with the volatile qualifier. KernelArgNamechar[] Returns the  name specified for the argument given by arg_indx.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret">[length: 1] 
        /// Returns the actual size in bytes of data copied to param_value. If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "", Version = "1.2", EntryPoint = "clGetKernelArgInfo")]
        [CLSCompliant(false)]
        public static ErrorCode GetKernelArgInfo<T4>(ComputeKernel kernel, Int32 arg_indx, OpenTK.Compute.CL12.KernelArgInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] T4[] param_value, [OutAttribute] out IntPtr param_value_size_ret)
            where T4 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.2]
        /// Returns information about the arguments of a kernel.
        /// </summary>
        /// <param name="kernel"> 
        /// Specifies the kernel object being queried.
        /// </param>
        /// <param name="arg_indx"> 
        /// The argument index. Arguments to the kernel are referred by indices that go from 0 for the leftmost argument to n - 1, where n is the total number of arguments declared by a kernel.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the argument information to query. The list of supported param_name types and the information returned in param_value by clGetKernelArgInfo is described in the table below.
        /// </param>
        /// <param name="param_value_size"> 
        /// Used to specify the size in bytes of memory pointed to by param_value. This size must be  size of return type as described in the table below. cl_kernel_arg_infoReturn TypeInfo. returned in param_valueKernelArgAddressQualifiercl_kernel_arg_- address_qualifier Returns the address qualifier specified for the argument given by arg_indx. This can be one of the following values: KernelArgAddressGlobalKernelArgAddressLocalKernelArgAddressConstantKernelArgAddressPrivate If no address qualifier is specified, the default address qualifier which is KernelArgAddressPrivate is returned. KernelArgAccessQualifiercl_kernel_arg_- access_qualifier Returns the access qualifier specified for the argument given by arg_indx. This can be one of the following values: KernelArgAccessReadOnlyKernelArgAccessWriteOnlyKernelArgAccessReadWriteKernelArgAccessNone If argument is not an image type, KernelArgAccessNone is returned. If argument is an image type, the access qualifier specified or the default access qualifier is returned. KernelArgTypeNamechar[] Returns the type name specified for the argument given by arg_indx.  The type name returned will be the argument type name as it was declared with any whitespace removed.  If argument type name is an unsigned scalar type (i.e. unsigned char, unsigned short, unsigned int, unsigned long), uchar, ushort, uint and ulong will be returned.  The argument type name returned does not include any type qualifiers. KernelArgTypeQualifiercl_kernel_arg- type_qualifier Returns the type qualifier specified for the argument given by arg_indx.  The returned value can be: KernelArgTypeConst, KernelArgTypeRestrict, KernelArgTypeVolatile, a combination of the above enums or KernelArgTypeNone.  NOTE: KernelArgTypeVolatile is returned if the argument is a pointer and the pointer is declared with the volatile qualifier. KernelArgNamechar[] Returns the  name specified for the argument given by arg_indx.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret">[length: 1] 
        /// Returns the actual size in bytes of data copied to param_value. If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "", Version = "1.2", EntryPoint = "clGetKernelArgInfo")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode GetKernelArgInfo<T4>(ComputeKernel kernel, Int32 arg_indx, OpenTK.Compute.CL12.KernelArgInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] T4[] param_value, [OutAttribute] IntPtr* param_value_size_ret)
            where T4 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.2]
        /// Returns information about the arguments of a kernel.
        /// </summary>
        /// <param name="kernel"> 
        /// Specifies the kernel object being queried.
        /// </param>
        /// <param name="arg_indx"> 
        /// The argument index. Arguments to the kernel are referred by indices that go from 0 for the leftmost argument to n - 1, where n is the total number of arguments declared by a kernel.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the argument information to query. The list of supported param_name types and the information returned in param_value by clGetKernelArgInfo is described in the table below.
        /// </param>
        /// <param name="param_value_size"> 
        /// Used to specify the size in bytes of memory pointed to by param_value. This size must be  size of return type as described in the table below. cl_kernel_arg_infoReturn TypeInfo. returned in param_valueKernelArgAddressQualifiercl_kernel_arg_- address_qualifier Returns the address qualifier specified for the argument given by arg_indx. This can be one of the following values: KernelArgAddressGlobalKernelArgAddressLocalKernelArgAddressConstantKernelArgAddressPrivate If no address qualifier is specified, the default address qualifier which is KernelArgAddressPrivate is returned. KernelArgAccessQualifiercl_kernel_arg_- access_qualifier Returns the access qualifier specified for the argument given by arg_indx. This can be one of the following values: KernelArgAccessReadOnlyKernelArgAccessWriteOnlyKernelArgAccessReadWriteKernelArgAccessNone If argument is not an image type, KernelArgAccessNone is returned. If argument is an image type, the access qualifier specified or the default access qualifier is returned. KernelArgTypeNamechar[] Returns the type name specified for the argument given by arg_indx.  The type name returned will be the argument type name as it was declared with any whitespace removed.  If argument type name is an unsigned scalar type (i.e. unsigned char, unsigned short, unsigned int, unsigned long), uchar, ushort, uint and ulong will be returned.  The argument type name returned does not include any type qualifiers. KernelArgTypeQualifiercl_kernel_arg- type_qualifier Returns the type qualifier specified for the argument given by arg_indx.  The returned value can be: KernelArgTypeConst, KernelArgTypeRestrict, KernelArgTypeVolatile, a combination of the above enums or KernelArgTypeNone.  NOTE: KernelArgTypeVolatile is returned if the argument is a pointer and the pointer is declared with the volatile qualifier. KernelArgNamechar[] Returns the  name specified for the argument given by arg_indx.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret">[length: 1] 
        /// Returns the actual size in bytes of data copied to param_value. If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "", Version = "1.2", EntryPoint = "clGetKernelArgInfo")]
        [CLSCompliant(false)]
        public static ErrorCode GetKernelArgInfo<T4>(ComputeKernel kernel, Int32 arg_indx, OpenTK.Compute.CL12.KernelArgInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] T4[,] param_value, [OutAttribute] out IntPtr param_value_size_ret)
            where T4 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.2]
        /// Returns information about the arguments of a kernel.
        /// </summary>
        /// <param name="kernel"> 
        /// Specifies the kernel object being queried.
        /// </param>
        /// <param name="arg_indx"> 
        /// The argument index. Arguments to the kernel are referred by indices that go from 0 for the leftmost argument to n - 1, where n is the total number of arguments declared by a kernel.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the argument information to query. The list of supported param_name types and the information returned in param_value by clGetKernelArgInfo is described in the table below.
        /// </param>
        /// <param name="param_value_size"> 
        /// Used to specify the size in bytes of memory pointed to by param_value. This size must be  size of return type as described in the table below. cl_kernel_arg_infoReturn TypeInfo. returned in param_valueKernelArgAddressQualifiercl_kernel_arg_- address_qualifier Returns the address qualifier specified for the argument given by arg_indx. This can be one of the following values: KernelArgAddressGlobalKernelArgAddressLocalKernelArgAddressConstantKernelArgAddressPrivate If no address qualifier is specified, the default address qualifier which is KernelArgAddressPrivate is returned. KernelArgAccessQualifiercl_kernel_arg_- access_qualifier Returns the access qualifier specified for the argument given by arg_indx. This can be one of the following values: KernelArgAccessReadOnlyKernelArgAccessWriteOnlyKernelArgAccessReadWriteKernelArgAccessNone If argument is not an image type, KernelArgAccessNone is returned. If argument is an image type, the access qualifier specified or the default access qualifier is returned. KernelArgTypeNamechar[] Returns the type name specified for the argument given by arg_indx.  The type name returned will be the argument type name as it was declared with any whitespace removed.  If argument type name is an unsigned scalar type (i.e. unsigned char, unsigned short, unsigned int, unsigned long), uchar, ushort, uint and ulong will be returned.  The argument type name returned does not include any type qualifiers. KernelArgTypeQualifiercl_kernel_arg- type_qualifier Returns the type qualifier specified for the argument given by arg_indx.  The returned value can be: KernelArgTypeConst, KernelArgTypeRestrict, KernelArgTypeVolatile, a combination of the above enums or KernelArgTypeNone.  NOTE: KernelArgTypeVolatile is returned if the argument is a pointer and the pointer is declared with the volatile qualifier. KernelArgNamechar[] Returns the  name specified for the argument given by arg_indx.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret">[length: 1] 
        /// Returns the actual size in bytes of data copied to param_value. If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "", Version = "1.2", EntryPoint = "clGetKernelArgInfo")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode GetKernelArgInfo<T4>(ComputeKernel kernel, Int32 arg_indx, OpenTK.Compute.CL12.KernelArgInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] T4[,] param_value, [OutAttribute] IntPtr* param_value_size_ret)
            where T4 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.2]
        /// Returns information about the arguments of a kernel.
        /// </summary>
        /// <param name="kernel"> 
        /// Specifies the kernel object being queried.
        /// </param>
        /// <param name="arg_indx"> 
        /// The argument index. Arguments to the kernel are referred by indices that go from 0 for the leftmost argument to n - 1, where n is the total number of arguments declared by a kernel.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the argument information to query. The list of supported param_name types and the information returned in param_value by clGetKernelArgInfo is described in the table below.
        /// </param>
        /// <param name="param_value_size"> 
        /// Used to specify the size in bytes of memory pointed to by param_value. This size must be  size of return type as described in the table below. cl_kernel_arg_infoReturn TypeInfo. returned in param_valueKernelArgAddressQualifiercl_kernel_arg_- address_qualifier Returns the address qualifier specified for the argument given by arg_indx. This can be one of the following values: KernelArgAddressGlobalKernelArgAddressLocalKernelArgAddressConstantKernelArgAddressPrivate If no address qualifier is specified, the default address qualifier which is KernelArgAddressPrivate is returned. KernelArgAccessQualifiercl_kernel_arg_- access_qualifier Returns the access qualifier specified for the argument given by arg_indx. This can be one of the following values: KernelArgAccessReadOnlyKernelArgAccessWriteOnlyKernelArgAccessReadWriteKernelArgAccessNone If argument is not an image type, KernelArgAccessNone is returned. If argument is an image type, the access qualifier specified or the default access qualifier is returned. KernelArgTypeNamechar[] Returns the type name specified for the argument given by arg_indx.  The type name returned will be the argument type name as it was declared with any whitespace removed.  If argument type name is an unsigned scalar type (i.e. unsigned char, unsigned short, unsigned int, unsigned long), uchar, ushort, uint and ulong will be returned.  The argument type name returned does not include any type qualifiers. KernelArgTypeQualifiercl_kernel_arg- type_qualifier Returns the type qualifier specified for the argument given by arg_indx.  The returned value can be: KernelArgTypeConst, KernelArgTypeRestrict, KernelArgTypeVolatile, a combination of the above enums or KernelArgTypeNone.  NOTE: KernelArgTypeVolatile is returned if the argument is a pointer and the pointer is declared with the volatile qualifier. KernelArgNamechar[] Returns the  name specified for the argument given by arg_indx.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret">[length: 1] 
        /// Returns the actual size in bytes of data copied to param_value. If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "", Version = "1.2", EntryPoint = "clGetKernelArgInfo")]
        [CLSCompliant(false)]
        public static ErrorCode GetKernelArgInfo<T4>(ComputeKernel kernel, Int32 arg_indx, OpenTK.Compute.CL12.KernelArgInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] T4[,,] param_value, [OutAttribute] out IntPtr param_value_size_ret)
            where T4 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.2]
        /// Returns information about the arguments of a kernel.
        /// </summary>
        /// <param name="kernel"> 
        /// Specifies the kernel object being queried.
        /// </param>
        /// <param name="arg_indx"> 
        /// The argument index. Arguments to the kernel are referred by indices that go from 0 for the leftmost argument to n - 1, where n is the total number of arguments declared by a kernel.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the argument information to query. The list of supported param_name types and the information returned in param_value by clGetKernelArgInfo is described in the table below.
        /// </param>
        /// <param name="param_value_size"> 
        /// Used to specify the size in bytes of memory pointed to by param_value. This size must be  size of return type as described in the table below. cl_kernel_arg_infoReturn TypeInfo. returned in param_valueKernelArgAddressQualifiercl_kernel_arg_- address_qualifier Returns the address qualifier specified for the argument given by arg_indx. This can be one of the following values: KernelArgAddressGlobalKernelArgAddressLocalKernelArgAddressConstantKernelArgAddressPrivate If no address qualifier is specified, the default address qualifier which is KernelArgAddressPrivate is returned. KernelArgAccessQualifiercl_kernel_arg_- access_qualifier Returns the access qualifier specified for the argument given by arg_indx. This can be one of the following values: KernelArgAccessReadOnlyKernelArgAccessWriteOnlyKernelArgAccessReadWriteKernelArgAccessNone If argument is not an image type, KernelArgAccessNone is returned. If argument is an image type, the access qualifier specified or the default access qualifier is returned. KernelArgTypeNamechar[] Returns the type name specified for the argument given by arg_indx.  The type name returned will be the argument type name as it was declared with any whitespace removed.  If argument type name is an unsigned scalar type (i.e. unsigned char, unsigned short, unsigned int, unsigned long), uchar, ushort, uint and ulong will be returned.  The argument type name returned does not include any type qualifiers. KernelArgTypeQualifiercl_kernel_arg- type_qualifier Returns the type qualifier specified for the argument given by arg_indx.  The returned value can be: KernelArgTypeConst, KernelArgTypeRestrict, KernelArgTypeVolatile, a combination of the above enums or KernelArgTypeNone.  NOTE: KernelArgTypeVolatile is returned if the argument is a pointer and the pointer is declared with the volatile qualifier. KernelArgNamechar[] Returns the  name specified for the argument given by arg_indx.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret">[length: 1] 
        /// Returns the actual size in bytes of data copied to param_value. If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "", Version = "1.2", EntryPoint = "clGetKernelArgInfo")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode GetKernelArgInfo<T4>(ComputeKernel kernel, Int32 arg_indx, OpenTK.Compute.CL12.KernelArgInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] T4[,,] param_value, [OutAttribute] IntPtr* param_value_size_ret)
            where T4 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.2]
        /// Returns information about the arguments of a kernel.
        /// </summary>
        /// <param name="kernel"> 
        /// Specifies the kernel object being queried.
        /// </param>
        /// <param name="arg_indx"> 
        /// The argument index. Arguments to the kernel are referred by indices that go from 0 for the leftmost argument to n - 1, where n is the total number of arguments declared by a kernel.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the argument information to query. The list of supported param_name types and the information returned in param_value by clGetKernelArgInfo is described in the table below.
        /// </param>
        /// <param name="param_value_size"> 
        /// Used to specify the size in bytes of memory pointed to by param_value. This size must be  size of return type as described in the table below. cl_kernel_arg_infoReturn TypeInfo. returned in param_valueKernelArgAddressQualifiercl_kernel_arg_- address_qualifier Returns the address qualifier specified for the argument given by arg_indx. This can be one of the following values: KernelArgAddressGlobalKernelArgAddressLocalKernelArgAddressConstantKernelArgAddressPrivate If no address qualifier is specified, the default address qualifier which is KernelArgAddressPrivate is returned. KernelArgAccessQualifiercl_kernel_arg_- access_qualifier Returns the access qualifier specified for the argument given by arg_indx. This can be one of the following values: KernelArgAccessReadOnlyKernelArgAccessWriteOnlyKernelArgAccessReadWriteKernelArgAccessNone If argument is not an image type, KernelArgAccessNone is returned. If argument is an image type, the access qualifier specified or the default access qualifier is returned. KernelArgTypeNamechar[] Returns the type name specified for the argument given by arg_indx.  The type name returned will be the argument type name as it was declared with any whitespace removed.  If argument type name is an unsigned scalar type (i.e. unsigned char, unsigned short, unsigned int, unsigned long), uchar, ushort, uint and ulong will be returned.  The argument type name returned does not include any type qualifiers. KernelArgTypeQualifiercl_kernel_arg- type_qualifier Returns the type qualifier specified for the argument given by arg_indx.  The returned value can be: KernelArgTypeConst, KernelArgTypeRestrict, KernelArgTypeVolatile, a combination of the above enums or KernelArgTypeNone.  NOTE: KernelArgTypeVolatile is returned if the argument is a pointer and the pointer is declared with the volatile qualifier. KernelArgNamechar[] Returns the  name specified for the argument given by arg_indx.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret">[length: 1] 
        /// Returns the actual size in bytes of data copied to param_value. If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "", Version = "1.2", EntryPoint = "clGetKernelArgInfo")]
        [CLSCompliant(false)]
        public static ErrorCode GetKernelArgInfo<T4>(ComputeKernel kernel, Int32 arg_indx, OpenTK.Compute.CL12.KernelArgInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] ref T4 param_value, [OutAttribute] out IntPtr param_value_size_ret)
            where T4 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.2]
        /// Returns information about the arguments of a kernel.
        /// </summary>
        /// <param name="kernel"> 
        /// Specifies the kernel object being queried.
        /// </param>
        /// <param name="arg_indx"> 
        /// The argument index. Arguments to the kernel are referred by indices that go from 0 for the leftmost argument to n - 1, where n is the total number of arguments declared by a kernel.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the argument information to query. The list of supported param_name types and the information returned in param_value by clGetKernelArgInfo is described in the table below.
        /// </param>
        /// <param name="param_value_size"> 
        /// Used to specify the size in bytes of memory pointed to by param_value. This size must be  size of return type as described in the table below. cl_kernel_arg_infoReturn TypeInfo. returned in param_valueKernelArgAddressQualifiercl_kernel_arg_- address_qualifier Returns the address qualifier specified for the argument given by arg_indx. This can be one of the following values: KernelArgAddressGlobalKernelArgAddressLocalKernelArgAddressConstantKernelArgAddressPrivate If no address qualifier is specified, the default address qualifier which is KernelArgAddressPrivate is returned. KernelArgAccessQualifiercl_kernel_arg_- access_qualifier Returns the access qualifier specified for the argument given by arg_indx. This can be one of the following values: KernelArgAccessReadOnlyKernelArgAccessWriteOnlyKernelArgAccessReadWriteKernelArgAccessNone If argument is not an image type, KernelArgAccessNone is returned. If argument is an image type, the access qualifier specified or the default access qualifier is returned. KernelArgTypeNamechar[] Returns the type name specified for the argument given by arg_indx.  The type name returned will be the argument type name as it was declared with any whitespace removed.  If argument type name is an unsigned scalar type (i.e. unsigned char, unsigned short, unsigned int, unsigned long), uchar, ushort, uint and ulong will be returned.  The argument type name returned does not include any type qualifiers. KernelArgTypeQualifiercl_kernel_arg- type_qualifier Returns the type qualifier specified for the argument given by arg_indx.  The returned value can be: KernelArgTypeConst, KernelArgTypeRestrict, KernelArgTypeVolatile, a combination of the above enums or KernelArgTypeNone.  NOTE: KernelArgTypeVolatile is returned if the argument is a pointer and the pointer is declared with the volatile qualifier. KernelArgNamechar[] Returns the  name specified for the argument given by arg_indx.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret">[length: 1] 
        /// Returns the actual size in bytes of data copied to param_value. If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "", Version = "1.2", EntryPoint = "clGetKernelArgInfo")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode GetKernelArgInfo<T4>(ComputeKernel kernel, Int32 arg_indx, OpenTK.Compute.CL12.KernelArgInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] ref T4 param_value, [OutAttribute] IntPtr* param_value_size_ret)
            where T4 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Returns information about the kernel object.
        /// </summary>
        /// <param name="kernel"> 
        /// Specifies the kernel object being queried.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the information to query. The list of supported param_name types and the information returned in param_value by clGetKernelInfo is described in the table below.
        /// </param>
        /// <param name="param_value_size"> 
        /// Used to specify the size in bytes of memory pointed to by param_value. This size must be ≥ size of return type as described in the table below. cl_kernel_infoReturn TypeInfo. returned in param_valueKernelFunctionNamechar[] Return the kernel function name. KernelNumArgscl_uint Return the number of arguments to kernel. KernelReferenceCountcl_uint Return the kernel reference count.  The reference count returned should be considered immediately stale. It is unsuitable for general use in applications. This feature is provided for identifying memory leaks. KernelContextcl_context Return the context associated with kernel. KernelProgramcl_program Return the program object associated with kernel. KernelAttributeschar[] Returns any attributes specified using the __attribute__ qualifier with the kernel function declaration in the program source. These attributes include those on the __attribute__ page and other attributes supported by an implementation.  Attributes are returned as they were declared inside __attribute__((...)), with any surrounding whitespace and embedded newlines removed. When multiple attributes are present, they are returned as a single, space delimited string.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// the actual size in bytes of data copied to param_value. If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetKernelInfo")]
        [CLSCompliant(false)]
        public static ErrorCode GetKernelInfo(ComputeKernel kernel, OpenTK.Compute.CL12.KernelInfo param_name, IntPtr param_value_size, IntPtr param_value, [OutAttribute] IntPtr[] param_value_size_ret) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Returns information about the kernel object.
        /// </summary>
        /// <param name="kernel"> 
        /// Specifies the kernel object being queried.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the information to query. The list of supported param_name types and the information returned in param_value by clGetKernelInfo is described in the table below.
        /// </param>
        /// <param name="param_value_size"> 
        /// Used to specify the size in bytes of memory pointed to by param_value. This size must be ≥ size of return type as described in the table below. cl_kernel_infoReturn TypeInfo. returned in param_valueKernelFunctionNamechar[] Return the kernel function name. KernelNumArgscl_uint Return the number of arguments to kernel. KernelReferenceCountcl_uint Return the kernel reference count.  The reference count returned should be considered immediately stale. It is unsuitable for general use in applications. This feature is provided for identifying memory leaks. KernelContextcl_context Return the context associated with kernel. KernelProgramcl_program Return the program object associated with kernel. KernelAttributeschar[] Returns any attributes specified using the __attribute__ qualifier with the kernel function declaration in the program source. These attributes include those on the __attribute__ page and other attributes supported by an implementation.  Attributes are returned as they were declared inside __attribute__((...)), with any surrounding whitespace and embedded newlines removed. When multiple attributes are present, they are returned as a single, space delimited string.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// the actual size in bytes of data copied to param_value. If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetKernelInfo")]
        [CLSCompliant(false)]
        public static ErrorCode GetKernelInfo(ComputeKernel kernel, OpenTK.Compute.CL12.KernelInfo param_name, IntPtr param_value_size, IntPtr param_value, [OutAttribute] out IntPtr param_value_size_ret) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Returns information about the kernel object.
        /// </summary>
        /// <param name="kernel"> 
        /// Specifies the kernel object being queried.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the information to query. The list of supported param_name types and the information returned in param_value by clGetKernelInfo is described in the table below.
        /// </param>
        /// <param name="param_value_size"> 
        /// Used to specify the size in bytes of memory pointed to by param_value. This size must be ≥ size of return type as described in the table below. cl_kernel_infoReturn TypeInfo. returned in param_valueKernelFunctionNamechar[] Return the kernel function name. KernelNumArgscl_uint Return the number of arguments to kernel. KernelReferenceCountcl_uint Return the kernel reference count.  The reference count returned should be considered immediately stale. It is unsuitable for general use in applications. This feature is provided for identifying memory leaks. KernelContextcl_context Return the context associated with kernel. KernelProgramcl_program Return the program object associated with kernel. KernelAttributeschar[] Returns any attributes specified using the __attribute__ qualifier with the kernel function declaration in the program source. These attributes include those on the __attribute__ page and other attributes supported by an implementation.  Attributes are returned as they were declared inside __attribute__((...)), with any surrounding whitespace and embedded newlines removed. When multiple attributes are present, they are returned as a single, space delimited string.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// the actual size in bytes of data copied to param_value. If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetKernelInfo")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode GetKernelInfo(ComputeKernel kernel, OpenTK.Compute.CL12.KernelInfo param_name, IntPtr param_value_size, IntPtr param_value, [OutAttribute] IntPtr* param_value_size_ret) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Returns information about the kernel object.
        /// </summary>
        /// <param name="kernel"> 
        /// Specifies the kernel object being queried.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the information to query. The list of supported param_name types and the information returned in param_value by clGetKernelInfo is described in the table below.
        /// </param>
        /// <param name="param_value_size"> 
        /// Used to specify the size in bytes of memory pointed to by param_value. This size must be ≥ size of return type as described in the table below. cl_kernel_infoReturn TypeInfo. returned in param_valueKernelFunctionNamechar[] Return the kernel function name. KernelNumArgscl_uint Return the number of arguments to kernel. KernelReferenceCountcl_uint Return the kernel reference count.  The reference count returned should be considered immediately stale. It is unsuitable for general use in applications. This feature is provided for identifying memory leaks. KernelContextcl_context Return the context associated with kernel. KernelProgramcl_program Return the program object associated with kernel. KernelAttributeschar[] Returns any attributes specified using the __attribute__ qualifier with the kernel function declaration in the program source. These attributes include those on the __attribute__ page and other attributes supported by an implementation.  Attributes are returned as they were declared inside __attribute__((...)), with any surrounding whitespace and embedded newlines removed. When multiple attributes are present, they are returned as a single, space delimited string.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// the actual size in bytes of data copied to param_value. If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetKernelInfo")]
        [CLSCompliant(false)]
        public static ErrorCode GetKernelInfo<T3>(ComputeKernel kernel, OpenTK.Compute.CL12.KernelInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] T3[] param_value, [OutAttribute] IntPtr[] param_value_size_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Returns information about the kernel object.
        /// </summary>
        /// <param name="kernel"> 
        /// Specifies the kernel object being queried.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the information to query. The list of supported param_name types and the information returned in param_value by clGetKernelInfo is described in the table below.
        /// </param>
        /// <param name="param_value_size"> 
        /// Used to specify the size in bytes of memory pointed to by param_value. This size must be ≥ size of return type as described in the table below. cl_kernel_infoReturn TypeInfo. returned in param_valueKernelFunctionNamechar[] Return the kernel function name. KernelNumArgscl_uint Return the number of arguments to kernel. KernelReferenceCountcl_uint Return the kernel reference count.  The reference count returned should be considered immediately stale. It is unsuitable for general use in applications. This feature is provided for identifying memory leaks. KernelContextcl_context Return the context associated with kernel. KernelProgramcl_program Return the program object associated with kernel. KernelAttributeschar[] Returns any attributes specified using the __attribute__ qualifier with the kernel function declaration in the program source. These attributes include those on the __attribute__ page and other attributes supported by an implementation.  Attributes are returned as they were declared inside __attribute__((...)), with any surrounding whitespace and embedded newlines removed. When multiple attributes are present, they are returned as a single, space delimited string.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// the actual size in bytes of data copied to param_value. If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetKernelInfo")]
        [CLSCompliant(false)]
        public static ErrorCode GetKernelInfo<T3>(ComputeKernel kernel, OpenTK.Compute.CL12.KernelInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] T3[] param_value, [OutAttribute] out IntPtr param_value_size_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Returns information about the kernel object.
        /// </summary>
        /// <param name="kernel"> 
        /// Specifies the kernel object being queried.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the information to query. The list of supported param_name types and the information returned in param_value by clGetKernelInfo is described in the table below.
        /// </param>
        /// <param name="param_value_size"> 
        /// Used to specify the size in bytes of memory pointed to by param_value. This size must be ≥ size of return type as described in the table below. cl_kernel_infoReturn TypeInfo. returned in param_valueKernelFunctionNamechar[] Return the kernel function name. KernelNumArgscl_uint Return the number of arguments to kernel. KernelReferenceCountcl_uint Return the kernel reference count.  The reference count returned should be considered immediately stale. It is unsuitable for general use in applications. This feature is provided for identifying memory leaks. KernelContextcl_context Return the context associated with kernel. KernelProgramcl_program Return the program object associated with kernel. KernelAttributeschar[] Returns any attributes specified using the __attribute__ qualifier with the kernel function declaration in the program source. These attributes include those on the __attribute__ page and other attributes supported by an implementation.  Attributes are returned as they were declared inside __attribute__((...)), with any surrounding whitespace and embedded newlines removed. When multiple attributes are present, they are returned as a single, space delimited string.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// the actual size in bytes of data copied to param_value. If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetKernelInfo")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode GetKernelInfo<T3>(ComputeKernel kernel, OpenTK.Compute.CL12.KernelInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] T3[] param_value, [OutAttribute] IntPtr* param_value_size_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Returns information about the kernel object.
        /// </summary>
        /// <param name="kernel"> 
        /// Specifies the kernel object being queried.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the information to query. The list of supported param_name types and the information returned in param_value by clGetKernelInfo is described in the table below.
        /// </param>
        /// <param name="param_value_size"> 
        /// Used to specify the size in bytes of memory pointed to by param_value. This size must be ≥ size of return type as described in the table below. cl_kernel_infoReturn TypeInfo. returned in param_valueKernelFunctionNamechar[] Return the kernel function name. KernelNumArgscl_uint Return the number of arguments to kernel. KernelReferenceCountcl_uint Return the kernel reference count.  The reference count returned should be considered immediately stale. It is unsuitable for general use in applications. This feature is provided for identifying memory leaks. KernelContextcl_context Return the context associated with kernel. KernelProgramcl_program Return the program object associated with kernel. KernelAttributeschar[] Returns any attributes specified using the __attribute__ qualifier with the kernel function declaration in the program source. These attributes include those on the __attribute__ page and other attributes supported by an implementation.  Attributes are returned as they were declared inside __attribute__((...)), with any surrounding whitespace and embedded newlines removed. When multiple attributes are present, they are returned as a single, space delimited string.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// the actual size in bytes of data copied to param_value. If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetKernelInfo")]
        [CLSCompliant(false)]
        public static ErrorCode GetKernelInfo<T3>(ComputeKernel kernel, OpenTK.Compute.CL12.KernelInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] T3[,] param_value, [OutAttribute] IntPtr[] param_value_size_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Returns information about the kernel object.
        /// </summary>
        /// <param name="kernel"> 
        /// Specifies the kernel object being queried.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the information to query. The list of supported param_name types and the information returned in param_value by clGetKernelInfo is described in the table below.
        /// </param>
        /// <param name="param_value_size"> 
        /// Used to specify the size in bytes of memory pointed to by param_value. This size must be ≥ size of return type as described in the table below. cl_kernel_infoReturn TypeInfo. returned in param_valueKernelFunctionNamechar[] Return the kernel function name. KernelNumArgscl_uint Return the number of arguments to kernel. KernelReferenceCountcl_uint Return the kernel reference count.  The reference count returned should be considered immediately stale. It is unsuitable for general use in applications. This feature is provided for identifying memory leaks. KernelContextcl_context Return the context associated with kernel. KernelProgramcl_program Return the program object associated with kernel. KernelAttributeschar[] Returns any attributes specified using the __attribute__ qualifier with the kernel function declaration in the program source. These attributes include those on the __attribute__ page and other attributes supported by an implementation.  Attributes are returned as they were declared inside __attribute__((...)), with any surrounding whitespace and embedded newlines removed. When multiple attributes are present, they are returned as a single, space delimited string.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// the actual size in bytes of data copied to param_value. If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetKernelInfo")]
        [CLSCompliant(false)]
        public static ErrorCode GetKernelInfo<T3>(ComputeKernel kernel, OpenTK.Compute.CL12.KernelInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] T3[,] param_value, [OutAttribute] out IntPtr param_value_size_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Returns information about the kernel object.
        /// </summary>
        /// <param name="kernel"> 
        /// Specifies the kernel object being queried.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the information to query. The list of supported param_name types and the information returned in param_value by clGetKernelInfo is described in the table below.
        /// </param>
        /// <param name="param_value_size"> 
        /// Used to specify the size in bytes of memory pointed to by param_value. This size must be ≥ size of return type as described in the table below. cl_kernel_infoReturn TypeInfo. returned in param_valueKernelFunctionNamechar[] Return the kernel function name. KernelNumArgscl_uint Return the number of arguments to kernel. KernelReferenceCountcl_uint Return the kernel reference count.  The reference count returned should be considered immediately stale. It is unsuitable for general use in applications. This feature is provided for identifying memory leaks. KernelContextcl_context Return the context associated with kernel. KernelProgramcl_program Return the program object associated with kernel. KernelAttributeschar[] Returns any attributes specified using the __attribute__ qualifier with the kernel function declaration in the program source. These attributes include those on the __attribute__ page and other attributes supported by an implementation.  Attributes are returned as they were declared inside __attribute__((...)), with any surrounding whitespace and embedded newlines removed. When multiple attributes are present, they are returned as a single, space delimited string.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// the actual size in bytes of data copied to param_value. If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetKernelInfo")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode GetKernelInfo<T3>(ComputeKernel kernel, OpenTK.Compute.CL12.KernelInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] T3[,] param_value, [OutAttribute] IntPtr* param_value_size_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Returns information about the kernel object.
        /// </summary>
        /// <param name="kernel"> 
        /// Specifies the kernel object being queried.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the information to query. The list of supported param_name types and the information returned in param_value by clGetKernelInfo is described in the table below.
        /// </param>
        /// <param name="param_value_size"> 
        /// Used to specify the size in bytes of memory pointed to by param_value. This size must be ≥ size of return type as described in the table below. cl_kernel_infoReturn TypeInfo. returned in param_valueKernelFunctionNamechar[] Return the kernel function name. KernelNumArgscl_uint Return the number of arguments to kernel. KernelReferenceCountcl_uint Return the kernel reference count.  The reference count returned should be considered immediately stale. It is unsuitable for general use in applications. This feature is provided for identifying memory leaks. KernelContextcl_context Return the context associated with kernel. KernelProgramcl_program Return the program object associated with kernel. KernelAttributeschar[] Returns any attributes specified using the __attribute__ qualifier with the kernel function declaration in the program source. These attributes include those on the __attribute__ page and other attributes supported by an implementation.  Attributes are returned as they were declared inside __attribute__((...)), with any surrounding whitespace and embedded newlines removed. When multiple attributes are present, they are returned as a single, space delimited string.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// the actual size in bytes of data copied to param_value. If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetKernelInfo")]
        [CLSCompliant(false)]
        public static ErrorCode GetKernelInfo<T3>(ComputeKernel kernel, OpenTK.Compute.CL12.KernelInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] T3[,,] param_value, [OutAttribute] IntPtr[] param_value_size_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Returns information about the kernel object.
        /// </summary>
        /// <param name="kernel"> 
        /// Specifies the kernel object being queried.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the information to query. The list of supported param_name types and the information returned in param_value by clGetKernelInfo is described in the table below.
        /// </param>
        /// <param name="param_value_size"> 
        /// Used to specify the size in bytes of memory pointed to by param_value. This size must be ≥ size of return type as described in the table below. cl_kernel_infoReturn TypeInfo. returned in param_valueKernelFunctionNamechar[] Return the kernel function name. KernelNumArgscl_uint Return the number of arguments to kernel. KernelReferenceCountcl_uint Return the kernel reference count.  The reference count returned should be considered immediately stale. It is unsuitable for general use in applications. This feature is provided for identifying memory leaks. KernelContextcl_context Return the context associated with kernel. KernelProgramcl_program Return the program object associated with kernel. KernelAttributeschar[] Returns any attributes specified using the __attribute__ qualifier with the kernel function declaration in the program source. These attributes include those on the __attribute__ page and other attributes supported by an implementation.  Attributes are returned as they were declared inside __attribute__((...)), with any surrounding whitespace and embedded newlines removed. When multiple attributes are present, they are returned as a single, space delimited string.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// the actual size in bytes of data copied to param_value. If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetKernelInfo")]
        [CLSCompliant(false)]
        public static ErrorCode GetKernelInfo<T3>(ComputeKernel kernel, OpenTK.Compute.CL12.KernelInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] T3[,,] param_value, [OutAttribute] out IntPtr param_value_size_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Returns information about the kernel object.
        /// </summary>
        /// <param name="kernel"> 
        /// Specifies the kernel object being queried.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the information to query. The list of supported param_name types and the information returned in param_value by clGetKernelInfo is described in the table below.
        /// </param>
        /// <param name="param_value_size"> 
        /// Used to specify the size in bytes of memory pointed to by param_value. This size must be ≥ size of return type as described in the table below. cl_kernel_infoReturn TypeInfo. returned in param_valueKernelFunctionNamechar[] Return the kernel function name. KernelNumArgscl_uint Return the number of arguments to kernel. KernelReferenceCountcl_uint Return the kernel reference count.  The reference count returned should be considered immediately stale. It is unsuitable for general use in applications. This feature is provided for identifying memory leaks. KernelContextcl_context Return the context associated with kernel. KernelProgramcl_program Return the program object associated with kernel. KernelAttributeschar[] Returns any attributes specified using the __attribute__ qualifier with the kernel function declaration in the program source. These attributes include those on the __attribute__ page and other attributes supported by an implementation.  Attributes are returned as they were declared inside __attribute__((...)), with any surrounding whitespace and embedded newlines removed. When multiple attributes are present, they are returned as a single, space delimited string.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// the actual size in bytes of data copied to param_value. If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetKernelInfo")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode GetKernelInfo<T3>(ComputeKernel kernel, OpenTK.Compute.CL12.KernelInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] T3[,,] param_value, [OutAttribute] IntPtr* param_value_size_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Returns information about the kernel object.
        /// </summary>
        /// <param name="kernel"> 
        /// Specifies the kernel object being queried.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the information to query. The list of supported param_name types and the information returned in param_value by clGetKernelInfo is described in the table below.
        /// </param>
        /// <param name="param_value_size"> 
        /// Used to specify the size in bytes of memory pointed to by param_value. This size must be ≥ size of return type as described in the table below. cl_kernel_infoReturn TypeInfo. returned in param_valueKernelFunctionNamechar[] Return the kernel function name. KernelNumArgscl_uint Return the number of arguments to kernel. KernelReferenceCountcl_uint Return the kernel reference count.  The reference count returned should be considered immediately stale. It is unsuitable for general use in applications. This feature is provided for identifying memory leaks. KernelContextcl_context Return the context associated with kernel. KernelProgramcl_program Return the program object associated with kernel. KernelAttributeschar[] Returns any attributes specified using the __attribute__ qualifier with the kernel function declaration in the program source. These attributes include those on the __attribute__ page and other attributes supported by an implementation.  Attributes are returned as they were declared inside __attribute__((...)), with any surrounding whitespace and embedded newlines removed. When multiple attributes are present, they are returned as a single, space delimited string.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// the actual size in bytes of data copied to param_value. If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetKernelInfo")]
        [CLSCompliant(false)]
        public static ErrorCode GetKernelInfo<T3>(ComputeKernel kernel, OpenTK.Compute.CL12.KernelInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] ref T3 param_value, [OutAttribute] IntPtr[] param_value_size_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Returns information about the kernel object.
        /// </summary>
        /// <param name="kernel"> 
        /// Specifies the kernel object being queried.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the information to query. The list of supported param_name types and the information returned in param_value by clGetKernelInfo is described in the table below.
        /// </param>
        /// <param name="param_value_size"> 
        /// Used to specify the size in bytes of memory pointed to by param_value. This size must be ≥ size of return type as described in the table below. cl_kernel_infoReturn TypeInfo. returned in param_valueKernelFunctionNamechar[] Return the kernel function name. KernelNumArgscl_uint Return the number of arguments to kernel. KernelReferenceCountcl_uint Return the kernel reference count.  The reference count returned should be considered immediately stale. It is unsuitable for general use in applications. This feature is provided for identifying memory leaks. KernelContextcl_context Return the context associated with kernel. KernelProgramcl_program Return the program object associated with kernel. KernelAttributeschar[] Returns any attributes specified using the __attribute__ qualifier with the kernel function declaration in the program source. These attributes include those on the __attribute__ page and other attributes supported by an implementation.  Attributes are returned as they were declared inside __attribute__((...)), with any surrounding whitespace and embedded newlines removed. When multiple attributes are present, they are returned as a single, space delimited string.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// the actual size in bytes of data copied to param_value. If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetKernelInfo")]
        [CLSCompliant(false)]
        public static ErrorCode GetKernelInfo<T3>(ComputeKernel kernel, OpenTK.Compute.CL12.KernelInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] ref T3 param_value, [OutAttribute] out IntPtr param_value_size_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Returns information about the kernel object.
        /// </summary>
        /// <param name="kernel"> 
        /// Specifies the kernel object being queried.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the information to query. The list of supported param_name types and the information returned in param_value by clGetKernelInfo is described in the table below.
        /// </param>
        /// <param name="param_value_size"> 
        /// Used to specify the size in bytes of memory pointed to by param_value. This size must be ≥ size of return type as described in the table below. cl_kernel_infoReturn TypeInfo. returned in param_valueKernelFunctionNamechar[] Return the kernel function name. KernelNumArgscl_uint Return the number of arguments to kernel. KernelReferenceCountcl_uint Return the kernel reference count.  The reference count returned should be considered immediately stale. It is unsuitable for general use in applications. This feature is provided for identifying memory leaks. KernelContextcl_context Return the context associated with kernel. KernelProgramcl_program Return the program object associated with kernel. KernelAttributeschar[] Returns any attributes specified using the __attribute__ qualifier with the kernel function declaration in the program source. These attributes include those on the __attribute__ page and other attributes supported by an implementation.  Attributes are returned as they were declared inside __attribute__((...)), with any surrounding whitespace and embedded newlines removed. When multiple attributes are present, they are returned as a single, space delimited string.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// the actual size in bytes of data copied to param_value. If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetKernelInfo")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode GetKernelInfo<T3>(ComputeKernel kernel, OpenTK.Compute.CL12.KernelInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] ref T3 param_value, [OutAttribute] IntPtr* param_value_size_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Returns information about the kernel object that may be specific to a device.
        /// </summary>
        /// <param name="kernel"> 
        /// Specifies the kernel object being queried.
        /// </param>
        /// <param name="device"> 
        /// Identifies a specific device in the list of devices associated with kernel. The list of devices is the list of devices in the OpenCL context that is associated with kernel. If the list of devices associated with kernel is a single device, device can be a NULL value.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the information to query. The list of supported param_name types and the information returned in param_value by clGetKernelWorkGroupInfo is described in the table below.
        /// </param>
        /// <param name="param_value_size"> 
        /// Used to specify the size in bytes of memory pointed to by param_value.  This size must be ≥ size of return type as described in the table below. cl_kernel_work_group_infoReturn TypeInfo. returned in param_valueKernelGlobalWorkSizesize_t[3] This provides a mechanism for the application to query the maximum global size that can be used to execute a kernel (i.e. global_work_size argument to clEnqueueNDRangeKernel) on a custom device given by device or a built-in kernel on an OpenCL device given by device.  If device is not a custom device or kernel is not a built-in kernel, clGetKernelArgInfo returns the error InvalidValue. KernelWorkGroupSizesize_t This provides a mechanism for the application to query the maximum work-group size that can be used to execute a kernel on a specific device given by device. The OpenCL implementation uses the resource requirements of the kernel (register usage etc.) to determine what this work-group size should be. KernelCompile workGroupSizesize_t[3] Returns the work-group size specified by the Attribute((reqdWorkGroupSize(x, y, z))) qualifier. See Function Qualifiers. If the work-group size is not specified using the above attribute qualifier (0, 0, 0) is returned. KernelLocalMemSizecl_ulong Returns the amount of local memory in bytes being used by a kernel. This includes local memory that may be needed by an implementation to execute the kernel, variables declared inside the kernel with the __local address qualifier and local memory to be allocated for arguments to the kernel declared as pointers with the __local address qualifier and whose size is specified with clSetKernelArg.  If the local memory size, for any pointer argument to the kernel declared with the __local address qualifier, is not specified, its size is assumed to be 0. KernelPreferredWork groupSizeMultiplesize_t Returns the preferred multiple of workgroup size for launch. This is a performance hint. Specifying a workgroup size that is not a multiple of the value returned by this query as the value of the local work size argument to clEnqueueNDRangeKernelwill not fail to enqueue the kernel for execution unless the work-group size specified is larger than the device maximum. KernelPrivateMemSizecl_ulong Returns the minimum amount of private memory, in bytes, used by each workitem in the kernel. This value may include any private memory needed by an implementation to execute the kernel, including that used by the language built-ins and variable declared inside the kernel with the __private qualifier.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data copied to param_value. If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetKernelWorkGroupInfo")]
        [CLSCompliant(false)]
        public static ErrorCode GetKernelWorkGroupInfo(ComputeKernel kernel, ComputeDevice device, OpenTK.Compute.CL12.KernelWorkGroupInfo param_name, IntPtr param_value_size, IntPtr param_value, [OutAttribute] IntPtr[] param_value_size_ret) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Returns information about the kernel object that may be specific to a device.
        /// </summary>
        /// <param name="kernel"> 
        /// Specifies the kernel object being queried.
        /// </param>
        /// <param name="device"> 
        /// Identifies a specific device in the list of devices associated with kernel. The list of devices is the list of devices in the OpenCL context that is associated with kernel. If the list of devices associated with kernel is a single device, device can be a NULL value.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the information to query. The list of supported param_name types and the information returned in param_value by clGetKernelWorkGroupInfo is described in the table below.
        /// </param>
        /// <param name="param_value_size"> 
        /// Used to specify the size in bytes of memory pointed to by param_value.  This size must be ≥ size of return type as described in the table below. cl_kernel_work_group_infoReturn TypeInfo. returned in param_valueKernelGlobalWorkSizesize_t[3] This provides a mechanism for the application to query the maximum global size that can be used to execute a kernel (i.e. global_work_size argument to clEnqueueNDRangeKernel) on a custom device given by device or a built-in kernel on an OpenCL device given by device.  If device is not a custom device or kernel is not a built-in kernel, clGetKernelArgInfo returns the error InvalidValue. KernelWorkGroupSizesize_t This provides a mechanism for the application to query the maximum work-group size that can be used to execute a kernel on a specific device given by device. The OpenCL implementation uses the resource requirements of the kernel (register usage etc.) to determine what this work-group size should be. KernelCompile workGroupSizesize_t[3] Returns the work-group size specified by the Attribute((reqdWorkGroupSize(x, y, z))) qualifier. See Function Qualifiers. If the work-group size is not specified using the above attribute qualifier (0, 0, 0) is returned. KernelLocalMemSizecl_ulong Returns the amount of local memory in bytes being used by a kernel. This includes local memory that may be needed by an implementation to execute the kernel, variables declared inside the kernel with the __local address qualifier and local memory to be allocated for arguments to the kernel declared as pointers with the __local address qualifier and whose size is specified with clSetKernelArg.  If the local memory size, for any pointer argument to the kernel declared with the __local address qualifier, is not specified, its size is assumed to be 0. KernelPreferredWork groupSizeMultiplesize_t Returns the preferred multiple of workgroup size for launch. This is a performance hint. Specifying a workgroup size that is not a multiple of the value returned by this query as the value of the local work size argument to clEnqueueNDRangeKernelwill not fail to enqueue the kernel for execution unless the work-group size specified is larger than the device maximum. KernelPrivateMemSizecl_ulong Returns the minimum amount of private memory, in bytes, used by each workitem in the kernel. This value may include any private memory needed by an implementation to execute the kernel, including that used by the language built-ins and variable declared inside the kernel with the __private qualifier.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data copied to param_value. If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetKernelWorkGroupInfo")]
        [CLSCompliant(false)]
        public static ErrorCode GetKernelWorkGroupInfo(ComputeKernel kernel, ComputeDevice device, OpenTK.Compute.CL12.KernelWorkGroupInfo param_name, IntPtr param_value_size, IntPtr param_value, [OutAttribute] out IntPtr param_value_size_ret) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Returns information about the kernel object that may be specific to a device.
        /// </summary>
        /// <param name="kernel"> 
        /// Specifies the kernel object being queried.
        /// </param>
        /// <param name="device"> 
        /// Identifies a specific device in the list of devices associated with kernel. The list of devices is the list of devices in the OpenCL context that is associated with kernel. If the list of devices associated with kernel is a single device, device can be a NULL value.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the information to query. The list of supported param_name types and the information returned in param_value by clGetKernelWorkGroupInfo is described in the table below.
        /// </param>
        /// <param name="param_value_size"> 
        /// Used to specify the size in bytes of memory pointed to by param_value.  This size must be ≥ size of return type as described in the table below. cl_kernel_work_group_infoReturn TypeInfo. returned in param_valueKernelGlobalWorkSizesize_t[3] This provides a mechanism for the application to query the maximum global size that can be used to execute a kernel (i.e. global_work_size argument to clEnqueueNDRangeKernel) on a custom device given by device or a built-in kernel on an OpenCL device given by device.  If device is not a custom device or kernel is not a built-in kernel, clGetKernelArgInfo returns the error InvalidValue. KernelWorkGroupSizesize_t This provides a mechanism for the application to query the maximum work-group size that can be used to execute a kernel on a specific device given by device. The OpenCL implementation uses the resource requirements of the kernel (register usage etc.) to determine what this work-group size should be. KernelCompile workGroupSizesize_t[3] Returns the work-group size specified by the Attribute((reqdWorkGroupSize(x, y, z))) qualifier. See Function Qualifiers. If the work-group size is not specified using the above attribute qualifier (0, 0, 0) is returned. KernelLocalMemSizecl_ulong Returns the amount of local memory in bytes being used by a kernel. This includes local memory that may be needed by an implementation to execute the kernel, variables declared inside the kernel with the __local address qualifier and local memory to be allocated for arguments to the kernel declared as pointers with the __local address qualifier and whose size is specified with clSetKernelArg.  If the local memory size, for any pointer argument to the kernel declared with the __local address qualifier, is not specified, its size is assumed to be 0. KernelPreferredWork groupSizeMultiplesize_t Returns the preferred multiple of workgroup size for launch. This is a performance hint. Specifying a workgroup size that is not a multiple of the value returned by this query as the value of the local work size argument to clEnqueueNDRangeKernelwill not fail to enqueue the kernel for execution unless the work-group size specified is larger than the device maximum. KernelPrivateMemSizecl_ulong Returns the minimum amount of private memory, in bytes, used by each workitem in the kernel. This value may include any private memory needed by an implementation to execute the kernel, including that used by the language built-ins and variable declared inside the kernel with the __private qualifier.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data copied to param_value. If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetKernelWorkGroupInfo")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode GetKernelWorkGroupInfo(ComputeKernel kernel, ComputeDevice device, OpenTK.Compute.CL12.KernelWorkGroupInfo param_name, IntPtr param_value_size, IntPtr param_value, [OutAttribute] IntPtr* param_value_size_ret) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Returns information about the kernel object that may be specific to a device.
        /// </summary>
        /// <param name="kernel"> 
        /// Specifies the kernel object being queried.
        /// </param>
        /// <param name="device"> 
        /// Identifies a specific device in the list of devices associated with kernel. The list of devices is the list of devices in the OpenCL context that is associated with kernel. If the list of devices associated with kernel is a single device, device can be a NULL value.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the information to query. The list of supported param_name types and the information returned in param_value by clGetKernelWorkGroupInfo is described in the table below.
        /// </param>
        /// <param name="param_value_size"> 
        /// Used to specify the size in bytes of memory pointed to by param_value.  This size must be ≥ size of return type as described in the table below. cl_kernel_work_group_infoReturn TypeInfo. returned in param_valueKernelGlobalWorkSizesize_t[3] This provides a mechanism for the application to query the maximum global size that can be used to execute a kernel (i.e. global_work_size argument to clEnqueueNDRangeKernel) on a custom device given by device or a built-in kernel on an OpenCL device given by device.  If device is not a custom device or kernel is not a built-in kernel, clGetKernelArgInfo returns the error InvalidValue. KernelWorkGroupSizesize_t This provides a mechanism for the application to query the maximum work-group size that can be used to execute a kernel on a specific device given by device. The OpenCL implementation uses the resource requirements of the kernel (register usage etc.) to determine what this work-group size should be. KernelCompile workGroupSizesize_t[3] Returns the work-group size specified by the Attribute((reqdWorkGroupSize(x, y, z))) qualifier. See Function Qualifiers. If the work-group size is not specified using the above attribute qualifier (0, 0, 0) is returned. KernelLocalMemSizecl_ulong Returns the amount of local memory in bytes being used by a kernel. This includes local memory that may be needed by an implementation to execute the kernel, variables declared inside the kernel with the __local address qualifier and local memory to be allocated for arguments to the kernel declared as pointers with the __local address qualifier and whose size is specified with clSetKernelArg.  If the local memory size, for any pointer argument to the kernel declared with the __local address qualifier, is not specified, its size is assumed to be 0. KernelPreferredWork groupSizeMultiplesize_t Returns the preferred multiple of workgroup size for launch. This is a performance hint. Specifying a workgroup size that is not a multiple of the value returned by this query as the value of the local work size argument to clEnqueueNDRangeKernelwill not fail to enqueue the kernel for execution unless the work-group size specified is larger than the device maximum. KernelPrivateMemSizecl_ulong Returns the minimum amount of private memory, in bytes, used by each workitem in the kernel. This value may include any private memory needed by an implementation to execute the kernel, including that used by the language built-ins and variable declared inside the kernel with the __private qualifier.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data copied to param_value. If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetKernelWorkGroupInfo")]
        [CLSCompliant(false)]
        public static ErrorCode GetKernelWorkGroupInfo<T4>(ComputeKernel kernel, ComputeDevice device, OpenTK.Compute.CL12.KernelWorkGroupInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] T4[] param_value, [OutAttribute] IntPtr[] param_value_size_ret)
            where T4 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Returns information about the kernel object that may be specific to a device.
        /// </summary>
        /// <param name="kernel"> 
        /// Specifies the kernel object being queried.
        /// </param>
        /// <param name="device"> 
        /// Identifies a specific device in the list of devices associated with kernel. The list of devices is the list of devices in the OpenCL context that is associated with kernel. If the list of devices associated with kernel is a single device, device can be a NULL value.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the information to query. The list of supported param_name types and the information returned in param_value by clGetKernelWorkGroupInfo is described in the table below.
        /// </param>
        /// <param name="param_value_size"> 
        /// Used to specify the size in bytes of memory pointed to by param_value.  This size must be ≥ size of return type as described in the table below. cl_kernel_work_group_infoReturn TypeInfo. returned in param_valueKernelGlobalWorkSizesize_t[3] This provides a mechanism for the application to query the maximum global size that can be used to execute a kernel (i.e. global_work_size argument to clEnqueueNDRangeKernel) on a custom device given by device or a built-in kernel on an OpenCL device given by device.  If device is not a custom device or kernel is not a built-in kernel, clGetKernelArgInfo returns the error InvalidValue. KernelWorkGroupSizesize_t This provides a mechanism for the application to query the maximum work-group size that can be used to execute a kernel on a specific device given by device. The OpenCL implementation uses the resource requirements of the kernel (register usage etc.) to determine what this work-group size should be. KernelCompile workGroupSizesize_t[3] Returns the work-group size specified by the Attribute((reqdWorkGroupSize(x, y, z))) qualifier. See Function Qualifiers. If the work-group size is not specified using the above attribute qualifier (0, 0, 0) is returned. KernelLocalMemSizecl_ulong Returns the amount of local memory in bytes being used by a kernel. This includes local memory that may be needed by an implementation to execute the kernel, variables declared inside the kernel with the __local address qualifier and local memory to be allocated for arguments to the kernel declared as pointers with the __local address qualifier and whose size is specified with clSetKernelArg.  If the local memory size, for any pointer argument to the kernel declared with the __local address qualifier, is not specified, its size is assumed to be 0. KernelPreferredWork groupSizeMultiplesize_t Returns the preferred multiple of workgroup size for launch. This is a performance hint. Specifying a workgroup size that is not a multiple of the value returned by this query as the value of the local work size argument to clEnqueueNDRangeKernelwill not fail to enqueue the kernel for execution unless the work-group size specified is larger than the device maximum. KernelPrivateMemSizecl_ulong Returns the minimum amount of private memory, in bytes, used by each workitem in the kernel. This value may include any private memory needed by an implementation to execute the kernel, including that used by the language built-ins and variable declared inside the kernel with the __private qualifier.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data copied to param_value. If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetKernelWorkGroupInfo")]
        [CLSCompliant(false)]
        public static ErrorCode GetKernelWorkGroupInfo<T4>(ComputeKernel kernel, ComputeDevice device, OpenTK.Compute.CL12.KernelWorkGroupInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] T4[] param_value, [OutAttribute] out IntPtr param_value_size_ret)
            where T4 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Returns information about the kernel object that may be specific to a device.
        /// </summary>
        /// <param name="kernel"> 
        /// Specifies the kernel object being queried.
        /// </param>
        /// <param name="device"> 
        /// Identifies a specific device in the list of devices associated with kernel. The list of devices is the list of devices in the OpenCL context that is associated with kernel. If the list of devices associated with kernel is a single device, device can be a NULL value.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the information to query. The list of supported param_name types and the information returned in param_value by clGetKernelWorkGroupInfo is described in the table below.
        /// </param>
        /// <param name="param_value_size"> 
        /// Used to specify the size in bytes of memory pointed to by param_value.  This size must be ≥ size of return type as described in the table below. cl_kernel_work_group_infoReturn TypeInfo. returned in param_valueKernelGlobalWorkSizesize_t[3] This provides a mechanism for the application to query the maximum global size that can be used to execute a kernel (i.e. global_work_size argument to clEnqueueNDRangeKernel) on a custom device given by device or a built-in kernel on an OpenCL device given by device.  If device is not a custom device or kernel is not a built-in kernel, clGetKernelArgInfo returns the error InvalidValue. KernelWorkGroupSizesize_t This provides a mechanism for the application to query the maximum work-group size that can be used to execute a kernel on a specific device given by device. The OpenCL implementation uses the resource requirements of the kernel (register usage etc.) to determine what this work-group size should be. KernelCompile workGroupSizesize_t[3] Returns the work-group size specified by the Attribute((reqdWorkGroupSize(x, y, z))) qualifier. See Function Qualifiers. If the work-group size is not specified using the above attribute qualifier (0, 0, 0) is returned. KernelLocalMemSizecl_ulong Returns the amount of local memory in bytes being used by a kernel. This includes local memory that may be needed by an implementation to execute the kernel, variables declared inside the kernel with the __local address qualifier and local memory to be allocated for arguments to the kernel declared as pointers with the __local address qualifier and whose size is specified with clSetKernelArg.  If the local memory size, for any pointer argument to the kernel declared with the __local address qualifier, is not specified, its size is assumed to be 0. KernelPreferredWork groupSizeMultiplesize_t Returns the preferred multiple of workgroup size for launch. This is a performance hint. Specifying a workgroup size that is not a multiple of the value returned by this query as the value of the local work size argument to clEnqueueNDRangeKernelwill not fail to enqueue the kernel for execution unless the work-group size specified is larger than the device maximum. KernelPrivateMemSizecl_ulong Returns the minimum amount of private memory, in bytes, used by each workitem in the kernel. This value may include any private memory needed by an implementation to execute the kernel, including that used by the language built-ins and variable declared inside the kernel with the __private qualifier.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data copied to param_value. If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetKernelWorkGroupInfo")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode GetKernelWorkGroupInfo<T4>(ComputeKernel kernel, ComputeDevice device, OpenTK.Compute.CL12.KernelWorkGroupInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] T4[] param_value, [OutAttribute] IntPtr* param_value_size_ret)
            where T4 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Returns information about the kernel object that may be specific to a device.
        /// </summary>
        /// <param name="kernel"> 
        /// Specifies the kernel object being queried.
        /// </param>
        /// <param name="device"> 
        /// Identifies a specific device in the list of devices associated with kernel. The list of devices is the list of devices in the OpenCL context that is associated with kernel. If the list of devices associated with kernel is a single device, device can be a NULL value.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the information to query. The list of supported param_name types and the information returned in param_value by clGetKernelWorkGroupInfo is described in the table below.
        /// </param>
        /// <param name="param_value_size"> 
        /// Used to specify the size in bytes of memory pointed to by param_value.  This size must be ≥ size of return type as described in the table below. cl_kernel_work_group_infoReturn TypeInfo. returned in param_valueKernelGlobalWorkSizesize_t[3] This provides a mechanism for the application to query the maximum global size that can be used to execute a kernel (i.e. global_work_size argument to clEnqueueNDRangeKernel) on a custom device given by device or a built-in kernel on an OpenCL device given by device.  If device is not a custom device or kernel is not a built-in kernel, clGetKernelArgInfo returns the error InvalidValue. KernelWorkGroupSizesize_t This provides a mechanism for the application to query the maximum work-group size that can be used to execute a kernel on a specific device given by device. The OpenCL implementation uses the resource requirements of the kernel (register usage etc.) to determine what this work-group size should be. KernelCompile workGroupSizesize_t[3] Returns the work-group size specified by the Attribute((reqdWorkGroupSize(x, y, z))) qualifier. See Function Qualifiers. If the work-group size is not specified using the above attribute qualifier (0, 0, 0) is returned. KernelLocalMemSizecl_ulong Returns the amount of local memory in bytes being used by a kernel. This includes local memory that may be needed by an implementation to execute the kernel, variables declared inside the kernel with the __local address qualifier and local memory to be allocated for arguments to the kernel declared as pointers with the __local address qualifier and whose size is specified with clSetKernelArg.  If the local memory size, for any pointer argument to the kernel declared with the __local address qualifier, is not specified, its size is assumed to be 0. KernelPreferredWork groupSizeMultiplesize_t Returns the preferred multiple of workgroup size for launch. This is a performance hint. Specifying a workgroup size that is not a multiple of the value returned by this query as the value of the local work size argument to clEnqueueNDRangeKernelwill not fail to enqueue the kernel for execution unless the work-group size specified is larger than the device maximum. KernelPrivateMemSizecl_ulong Returns the minimum amount of private memory, in bytes, used by each workitem in the kernel. This value may include any private memory needed by an implementation to execute the kernel, including that used by the language built-ins and variable declared inside the kernel with the __private qualifier.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data copied to param_value. If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetKernelWorkGroupInfo")]
        [CLSCompliant(false)]
        public static ErrorCode GetKernelWorkGroupInfo<T4>(ComputeKernel kernel, ComputeDevice device, OpenTK.Compute.CL12.KernelWorkGroupInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] T4[,] param_value, [OutAttribute] IntPtr[] param_value_size_ret)
            where T4 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Returns information about the kernel object that may be specific to a device.
        /// </summary>
        /// <param name="kernel"> 
        /// Specifies the kernel object being queried.
        /// </param>
        /// <param name="device"> 
        /// Identifies a specific device in the list of devices associated with kernel. The list of devices is the list of devices in the OpenCL context that is associated with kernel. If the list of devices associated with kernel is a single device, device can be a NULL value.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the information to query. The list of supported param_name types and the information returned in param_value by clGetKernelWorkGroupInfo is described in the table below.
        /// </param>
        /// <param name="param_value_size"> 
        /// Used to specify the size in bytes of memory pointed to by param_value.  This size must be ≥ size of return type as described in the table below. cl_kernel_work_group_infoReturn TypeInfo. returned in param_valueKernelGlobalWorkSizesize_t[3] This provides a mechanism for the application to query the maximum global size that can be used to execute a kernel (i.e. global_work_size argument to clEnqueueNDRangeKernel) on a custom device given by device or a built-in kernel on an OpenCL device given by device.  If device is not a custom device or kernel is not a built-in kernel, clGetKernelArgInfo returns the error InvalidValue. KernelWorkGroupSizesize_t This provides a mechanism for the application to query the maximum work-group size that can be used to execute a kernel on a specific device given by device. The OpenCL implementation uses the resource requirements of the kernel (register usage etc.) to determine what this work-group size should be. KernelCompile workGroupSizesize_t[3] Returns the work-group size specified by the Attribute((reqdWorkGroupSize(x, y, z))) qualifier. See Function Qualifiers. If the work-group size is not specified using the above attribute qualifier (0, 0, 0) is returned. KernelLocalMemSizecl_ulong Returns the amount of local memory in bytes being used by a kernel. This includes local memory that may be needed by an implementation to execute the kernel, variables declared inside the kernel with the __local address qualifier and local memory to be allocated for arguments to the kernel declared as pointers with the __local address qualifier and whose size is specified with clSetKernelArg.  If the local memory size, for any pointer argument to the kernel declared with the __local address qualifier, is not specified, its size is assumed to be 0. KernelPreferredWork groupSizeMultiplesize_t Returns the preferred multiple of workgroup size for launch. This is a performance hint. Specifying a workgroup size that is not a multiple of the value returned by this query as the value of the local work size argument to clEnqueueNDRangeKernelwill not fail to enqueue the kernel for execution unless the work-group size specified is larger than the device maximum. KernelPrivateMemSizecl_ulong Returns the minimum amount of private memory, in bytes, used by each workitem in the kernel. This value may include any private memory needed by an implementation to execute the kernel, including that used by the language built-ins and variable declared inside the kernel with the __private qualifier.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data copied to param_value. If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetKernelWorkGroupInfo")]
        [CLSCompliant(false)]
        public static ErrorCode GetKernelWorkGroupInfo<T4>(ComputeKernel kernel, ComputeDevice device, OpenTK.Compute.CL12.KernelWorkGroupInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] T4[,] param_value, [OutAttribute] out IntPtr param_value_size_ret)
            where T4 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Returns information about the kernel object that may be specific to a device.
        /// </summary>
        /// <param name="kernel"> 
        /// Specifies the kernel object being queried.
        /// </param>
        /// <param name="device"> 
        /// Identifies a specific device in the list of devices associated with kernel. The list of devices is the list of devices in the OpenCL context that is associated with kernel. If the list of devices associated with kernel is a single device, device can be a NULL value.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the information to query. The list of supported param_name types and the information returned in param_value by clGetKernelWorkGroupInfo is described in the table below.
        /// </param>
        /// <param name="param_value_size"> 
        /// Used to specify the size in bytes of memory pointed to by param_value.  This size must be ≥ size of return type as described in the table below. cl_kernel_work_group_infoReturn TypeInfo. returned in param_valueKernelGlobalWorkSizesize_t[3] This provides a mechanism for the application to query the maximum global size that can be used to execute a kernel (i.e. global_work_size argument to clEnqueueNDRangeKernel) on a custom device given by device or a built-in kernel on an OpenCL device given by device.  If device is not a custom device or kernel is not a built-in kernel, clGetKernelArgInfo returns the error InvalidValue. KernelWorkGroupSizesize_t This provides a mechanism for the application to query the maximum work-group size that can be used to execute a kernel on a specific device given by device. The OpenCL implementation uses the resource requirements of the kernel (register usage etc.) to determine what this work-group size should be. KernelCompile workGroupSizesize_t[3] Returns the work-group size specified by the Attribute((reqdWorkGroupSize(x, y, z))) qualifier. See Function Qualifiers. If the work-group size is not specified using the above attribute qualifier (0, 0, 0) is returned. KernelLocalMemSizecl_ulong Returns the amount of local memory in bytes being used by a kernel. This includes local memory that may be needed by an implementation to execute the kernel, variables declared inside the kernel with the __local address qualifier and local memory to be allocated for arguments to the kernel declared as pointers with the __local address qualifier and whose size is specified with clSetKernelArg.  If the local memory size, for any pointer argument to the kernel declared with the __local address qualifier, is not specified, its size is assumed to be 0. KernelPreferredWork groupSizeMultiplesize_t Returns the preferred multiple of workgroup size for launch. This is a performance hint. Specifying a workgroup size that is not a multiple of the value returned by this query as the value of the local work size argument to clEnqueueNDRangeKernelwill not fail to enqueue the kernel for execution unless the work-group size specified is larger than the device maximum. KernelPrivateMemSizecl_ulong Returns the minimum amount of private memory, in bytes, used by each workitem in the kernel. This value may include any private memory needed by an implementation to execute the kernel, including that used by the language built-ins and variable declared inside the kernel with the __private qualifier.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data copied to param_value. If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetKernelWorkGroupInfo")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode GetKernelWorkGroupInfo<T4>(ComputeKernel kernel, ComputeDevice device, OpenTK.Compute.CL12.KernelWorkGroupInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] T4[,] param_value, [OutAttribute] IntPtr* param_value_size_ret)
            where T4 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Returns information about the kernel object that may be specific to a device.
        /// </summary>
        /// <param name="kernel"> 
        /// Specifies the kernel object being queried.
        /// </param>
        /// <param name="device"> 
        /// Identifies a specific device in the list of devices associated with kernel. The list of devices is the list of devices in the OpenCL context that is associated with kernel. If the list of devices associated with kernel is a single device, device can be a NULL value.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the information to query. The list of supported param_name types and the information returned in param_value by clGetKernelWorkGroupInfo is described in the table below.
        /// </param>
        /// <param name="param_value_size"> 
        /// Used to specify the size in bytes of memory pointed to by param_value.  This size must be ≥ size of return type as described in the table below. cl_kernel_work_group_infoReturn TypeInfo. returned in param_valueKernelGlobalWorkSizesize_t[3] This provides a mechanism for the application to query the maximum global size that can be used to execute a kernel (i.e. global_work_size argument to clEnqueueNDRangeKernel) on a custom device given by device or a built-in kernel on an OpenCL device given by device.  If device is not a custom device or kernel is not a built-in kernel, clGetKernelArgInfo returns the error InvalidValue. KernelWorkGroupSizesize_t This provides a mechanism for the application to query the maximum work-group size that can be used to execute a kernel on a specific device given by device. The OpenCL implementation uses the resource requirements of the kernel (register usage etc.) to determine what this work-group size should be. KernelCompile workGroupSizesize_t[3] Returns the work-group size specified by the Attribute((reqdWorkGroupSize(x, y, z))) qualifier. See Function Qualifiers. If the work-group size is not specified using the above attribute qualifier (0, 0, 0) is returned. KernelLocalMemSizecl_ulong Returns the amount of local memory in bytes being used by a kernel. This includes local memory that may be needed by an implementation to execute the kernel, variables declared inside the kernel with the __local address qualifier and local memory to be allocated for arguments to the kernel declared as pointers with the __local address qualifier and whose size is specified with clSetKernelArg.  If the local memory size, for any pointer argument to the kernel declared with the __local address qualifier, is not specified, its size is assumed to be 0. KernelPreferredWork groupSizeMultiplesize_t Returns the preferred multiple of workgroup size for launch. This is a performance hint. Specifying a workgroup size that is not a multiple of the value returned by this query as the value of the local work size argument to clEnqueueNDRangeKernelwill not fail to enqueue the kernel for execution unless the work-group size specified is larger than the device maximum. KernelPrivateMemSizecl_ulong Returns the minimum amount of private memory, in bytes, used by each workitem in the kernel. This value may include any private memory needed by an implementation to execute the kernel, including that used by the language built-ins and variable declared inside the kernel with the __private qualifier.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data copied to param_value. If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetKernelWorkGroupInfo")]
        [CLSCompliant(false)]
        public static ErrorCode GetKernelWorkGroupInfo<T4>(ComputeKernel kernel, ComputeDevice device, OpenTK.Compute.CL12.KernelWorkGroupInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] T4[,,] param_value, [OutAttribute] IntPtr[] param_value_size_ret)
            where T4 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Returns information about the kernel object that may be specific to a device.
        /// </summary>
        /// <param name="kernel"> 
        /// Specifies the kernel object being queried.
        /// </param>
        /// <param name="device"> 
        /// Identifies a specific device in the list of devices associated with kernel. The list of devices is the list of devices in the OpenCL context that is associated with kernel. If the list of devices associated with kernel is a single device, device can be a NULL value.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the information to query. The list of supported param_name types and the information returned in param_value by clGetKernelWorkGroupInfo is described in the table below.
        /// </param>
        /// <param name="param_value_size"> 
        /// Used to specify the size in bytes of memory pointed to by param_value.  This size must be ≥ size of return type as described in the table below. cl_kernel_work_group_infoReturn TypeInfo. returned in param_valueKernelGlobalWorkSizesize_t[3] This provides a mechanism for the application to query the maximum global size that can be used to execute a kernel (i.e. global_work_size argument to clEnqueueNDRangeKernel) on a custom device given by device or a built-in kernel on an OpenCL device given by device.  If device is not a custom device or kernel is not a built-in kernel, clGetKernelArgInfo returns the error InvalidValue. KernelWorkGroupSizesize_t This provides a mechanism for the application to query the maximum work-group size that can be used to execute a kernel on a specific device given by device. The OpenCL implementation uses the resource requirements of the kernel (register usage etc.) to determine what this work-group size should be. KernelCompile workGroupSizesize_t[3] Returns the work-group size specified by the Attribute((reqdWorkGroupSize(x, y, z))) qualifier. See Function Qualifiers. If the work-group size is not specified using the above attribute qualifier (0, 0, 0) is returned. KernelLocalMemSizecl_ulong Returns the amount of local memory in bytes being used by a kernel. This includes local memory that may be needed by an implementation to execute the kernel, variables declared inside the kernel with the __local address qualifier and local memory to be allocated for arguments to the kernel declared as pointers with the __local address qualifier and whose size is specified with clSetKernelArg.  If the local memory size, for any pointer argument to the kernel declared with the __local address qualifier, is not specified, its size is assumed to be 0. KernelPreferredWork groupSizeMultiplesize_t Returns the preferred multiple of workgroup size for launch. This is a performance hint. Specifying a workgroup size that is not a multiple of the value returned by this query as the value of the local work size argument to clEnqueueNDRangeKernelwill not fail to enqueue the kernel for execution unless the work-group size specified is larger than the device maximum. KernelPrivateMemSizecl_ulong Returns the minimum amount of private memory, in bytes, used by each workitem in the kernel. This value may include any private memory needed by an implementation to execute the kernel, including that used by the language built-ins and variable declared inside the kernel with the __private qualifier.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data copied to param_value. If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetKernelWorkGroupInfo")]
        [CLSCompliant(false)]
        public static ErrorCode GetKernelWorkGroupInfo<T4>(ComputeKernel kernel, ComputeDevice device, OpenTK.Compute.CL12.KernelWorkGroupInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] T4[,,] param_value, [OutAttribute] out IntPtr param_value_size_ret)
            where T4 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Returns information about the kernel object that may be specific to a device.
        /// </summary>
        /// <param name="kernel"> 
        /// Specifies the kernel object being queried.
        /// </param>
        /// <param name="device"> 
        /// Identifies a specific device in the list of devices associated with kernel. The list of devices is the list of devices in the OpenCL context that is associated with kernel. If the list of devices associated with kernel is a single device, device can be a NULL value.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the information to query. The list of supported param_name types and the information returned in param_value by clGetKernelWorkGroupInfo is described in the table below.
        /// </param>
        /// <param name="param_value_size"> 
        /// Used to specify the size in bytes of memory pointed to by param_value.  This size must be ≥ size of return type as described in the table below. cl_kernel_work_group_infoReturn TypeInfo. returned in param_valueKernelGlobalWorkSizesize_t[3] This provides a mechanism for the application to query the maximum global size that can be used to execute a kernel (i.e. global_work_size argument to clEnqueueNDRangeKernel) on a custom device given by device or a built-in kernel on an OpenCL device given by device.  If device is not a custom device or kernel is not a built-in kernel, clGetKernelArgInfo returns the error InvalidValue. KernelWorkGroupSizesize_t This provides a mechanism for the application to query the maximum work-group size that can be used to execute a kernel on a specific device given by device. The OpenCL implementation uses the resource requirements of the kernel (register usage etc.) to determine what this work-group size should be. KernelCompile workGroupSizesize_t[3] Returns the work-group size specified by the Attribute((reqdWorkGroupSize(x, y, z))) qualifier. See Function Qualifiers. If the work-group size is not specified using the above attribute qualifier (0, 0, 0) is returned. KernelLocalMemSizecl_ulong Returns the amount of local memory in bytes being used by a kernel. This includes local memory that may be needed by an implementation to execute the kernel, variables declared inside the kernel with the __local address qualifier and local memory to be allocated for arguments to the kernel declared as pointers with the __local address qualifier and whose size is specified with clSetKernelArg.  If the local memory size, for any pointer argument to the kernel declared with the __local address qualifier, is not specified, its size is assumed to be 0. KernelPreferredWork groupSizeMultiplesize_t Returns the preferred multiple of workgroup size for launch. This is a performance hint. Specifying a workgroup size that is not a multiple of the value returned by this query as the value of the local work size argument to clEnqueueNDRangeKernelwill not fail to enqueue the kernel for execution unless the work-group size specified is larger than the device maximum. KernelPrivateMemSizecl_ulong Returns the minimum amount of private memory, in bytes, used by each workitem in the kernel. This value may include any private memory needed by an implementation to execute the kernel, including that used by the language built-ins and variable declared inside the kernel with the __private qualifier.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data copied to param_value. If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetKernelWorkGroupInfo")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode GetKernelWorkGroupInfo<T4>(ComputeKernel kernel, ComputeDevice device, OpenTK.Compute.CL12.KernelWorkGroupInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] T4[,,] param_value, [OutAttribute] IntPtr* param_value_size_ret)
            where T4 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Returns information about the kernel object that may be specific to a device.
        /// </summary>
        /// <param name="kernel"> 
        /// Specifies the kernel object being queried.
        /// </param>
        /// <param name="device"> 
        /// Identifies a specific device in the list of devices associated with kernel. The list of devices is the list of devices in the OpenCL context that is associated with kernel. If the list of devices associated with kernel is a single device, device can be a NULL value.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the information to query. The list of supported param_name types and the information returned in param_value by clGetKernelWorkGroupInfo is described in the table below.
        /// </param>
        /// <param name="param_value_size"> 
        /// Used to specify the size in bytes of memory pointed to by param_value.  This size must be ≥ size of return type as described in the table below. cl_kernel_work_group_infoReturn TypeInfo. returned in param_valueKernelGlobalWorkSizesize_t[3] This provides a mechanism for the application to query the maximum global size that can be used to execute a kernel (i.e. global_work_size argument to clEnqueueNDRangeKernel) on a custom device given by device or a built-in kernel on an OpenCL device given by device.  If device is not a custom device or kernel is not a built-in kernel, clGetKernelArgInfo returns the error InvalidValue. KernelWorkGroupSizesize_t This provides a mechanism for the application to query the maximum work-group size that can be used to execute a kernel on a specific device given by device. The OpenCL implementation uses the resource requirements of the kernel (register usage etc.) to determine what this work-group size should be. KernelCompile workGroupSizesize_t[3] Returns the work-group size specified by the Attribute((reqdWorkGroupSize(x, y, z))) qualifier. See Function Qualifiers. If the work-group size is not specified using the above attribute qualifier (0, 0, 0) is returned. KernelLocalMemSizecl_ulong Returns the amount of local memory in bytes being used by a kernel. This includes local memory that may be needed by an implementation to execute the kernel, variables declared inside the kernel with the __local address qualifier and local memory to be allocated for arguments to the kernel declared as pointers with the __local address qualifier and whose size is specified with clSetKernelArg.  If the local memory size, for any pointer argument to the kernel declared with the __local address qualifier, is not specified, its size is assumed to be 0. KernelPreferredWork groupSizeMultiplesize_t Returns the preferred multiple of workgroup size for launch. This is a performance hint. Specifying a workgroup size that is not a multiple of the value returned by this query as the value of the local work size argument to clEnqueueNDRangeKernelwill not fail to enqueue the kernel for execution unless the work-group size specified is larger than the device maximum. KernelPrivateMemSizecl_ulong Returns the minimum amount of private memory, in bytes, used by each workitem in the kernel. This value may include any private memory needed by an implementation to execute the kernel, including that used by the language built-ins and variable declared inside the kernel with the __private qualifier.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data copied to param_value. If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetKernelWorkGroupInfo")]
        [CLSCompliant(false)]
        public static ErrorCode GetKernelWorkGroupInfo<T4>(ComputeKernel kernel, ComputeDevice device, OpenTK.Compute.CL12.KernelWorkGroupInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] ref T4 param_value, [OutAttribute] IntPtr[] param_value_size_ret)
            where T4 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Returns information about the kernel object that may be specific to a device.
        /// </summary>
        /// <param name="kernel"> 
        /// Specifies the kernel object being queried.
        /// </param>
        /// <param name="device"> 
        /// Identifies a specific device in the list of devices associated with kernel. The list of devices is the list of devices in the OpenCL context that is associated with kernel. If the list of devices associated with kernel is a single device, device can be a NULL value.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the information to query. The list of supported param_name types and the information returned in param_value by clGetKernelWorkGroupInfo is described in the table below.
        /// </param>
        /// <param name="param_value_size"> 
        /// Used to specify the size in bytes of memory pointed to by param_value.  This size must be ≥ size of return type as described in the table below. cl_kernel_work_group_infoReturn TypeInfo. returned in param_valueKernelGlobalWorkSizesize_t[3] This provides a mechanism for the application to query the maximum global size that can be used to execute a kernel (i.e. global_work_size argument to clEnqueueNDRangeKernel) on a custom device given by device or a built-in kernel on an OpenCL device given by device.  If device is not a custom device or kernel is not a built-in kernel, clGetKernelArgInfo returns the error InvalidValue. KernelWorkGroupSizesize_t This provides a mechanism for the application to query the maximum work-group size that can be used to execute a kernel on a specific device given by device. The OpenCL implementation uses the resource requirements of the kernel (register usage etc.) to determine what this work-group size should be. KernelCompile workGroupSizesize_t[3] Returns the work-group size specified by the Attribute((reqdWorkGroupSize(x, y, z))) qualifier. See Function Qualifiers. If the work-group size is not specified using the above attribute qualifier (0, 0, 0) is returned. KernelLocalMemSizecl_ulong Returns the amount of local memory in bytes being used by a kernel. This includes local memory that may be needed by an implementation to execute the kernel, variables declared inside the kernel with the __local address qualifier and local memory to be allocated for arguments to the kernel declared as pointers with the __local address qualifier and whose size is specified with clSetKernelArg.  If the local memory size, for any pointer argument to the kernel declared with the __local address qualifier, is not specified, its size is assumed to be 0. KernelPreferredWork groupSizeMultiplesize_t Returns the preferred multiple of workgroup size for launch. This is a performance hint. Specifying a workgroup size that is not a multiple of the value returned by this query as the value of the local work size argument to clEnqueueNDRangeKernelwill not fail to enqueue the kernel for execution unless the work-group size specified is larger than the device maximum. KernelPrivateMemSizecl_ulong Returns the minimum amount of private memory, in bytes, used by each workitem in the kernel. This value may include any private memory needed by an implementation to execute the kernel, including that used by the language built-ins and variable declared inside the kernel with the __private qualifier.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data copied to param_value. If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetKernelWorkGroupInfo")]
        [CLSCompliant(false)]
        public static ErrorCode GetKernelWorkGroupInfo<T4>(ComputeKernel kernel, ComputeDevice device, OpenTK.Compute.CL12.KernelWorkGroupInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] ref T4 param_value, [OutAttribute] out IntPtr param_value_size_ret)
            where T4 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Returns information about the kernel object that may be specific to a device.
        /// </summary>
        /// <param name="kernel"> 
        /// Specifies the kernel object being queried.
        /// </param>
        /// <param name="device"> 
        /// Identifies a specific device in the list of devices associated with kernel. The list of devices is the list of devices in the OpenCL context that is associated with kernel. If the list of devices associated with kernel is a single device, device can be a NULL value.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the information to query. The list of supported param_name types and the information returned in param_value by clGetKernelWorkGroupInfo is described in the table below.
        /// </param>
        /// <param name="param_value_size"> 
        /// Used to specify the size in bytes of memory pointed to by param_value.  This size must be ≥ size of return type as described in the table below. cl_kernel_work_group_infoReturn TypeInfo. returned in param_valueKernelGlobalWorkSizesize_t[3] This provides a mechanism for the application to query the maximum global size that can be used to execute a kernel (i.e. global_work_size argument to clEnqueueNDRangeKernel) on a custom device given by device or a built-in kernel on an OpenCL device given by device.  If device is not a custom device or kernel is not a built-in kernel, clGetKernelArgInfo returns the error InvalidValue. KernelWorkGroupSizesize_t This provides a mechanism for the application to query the maximum work-group size that can be used to execute a kernel on a specific device given by device. The OpenCL implementation uses the resource requirements of the kernel (register usage etc.) to determine what this work-group size should be. KernelCompile workGroupSizesize_t[3] Returns the work-group size specified by the Attribute((reqdWorkGroupSize(x, y, z))) qualifier. See Function Qualifiers. If the work-group size is not specified using the above attribute qualifier (0, 0, 0) is returned. KernelLocalMemSizecl_ulong Returns the amount of local memory in bytes being used by a kernel. This includes local memory that may be needed by an implementation to execute the kernel, variables declared inside the kernel with the __local address qualifier and local memory to be allocated for arguments to the kernel declared as pointers with the __local address qualifier and whose size is specified with clSetKernelArg.  If the local memory size, for any pointer argument to the kernel declared with the __local address qualifier, is not specified, its size is assumed to be 0. KernelPreferredWork groupSizeMultiplesize_t Returns the preferred multiple of workgroup size for launch. This is a performance hint. Specifying a workgroup size that is not a multiple of the value returned by this query as the value of the local work size argument to clEnqueueNDRangeKernelwill not fail to enqueue the kernel for execution unless the work-group size specified is larger than the device maximum. KernelPrivateMemSizecl_ulong Returns the minimum amount of private memory, in bytes, used by each workitem in the kernel. This value may include any private memory needed by an implementation to execute the kernel, including that used by the language built-ins and variable declared inside the kernel with the __private qualifier.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data copied to param_value. If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetKernelWorkGroupInfo")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode GetKernelWorkGroupInfo<T4>(ComputeKernel kernel, ComputeDevice device, OpenTK.Compute.CL12.KernelWorkGroupInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] ref T4 param_value, [OutAttribute] IntPtr* param_value_size_ret)
            where T4 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Get information that is common to all memory objects (buffer and image objects).
        /// </summary>
        /// <param name="memobj"> 
        /// Specifies the memory object being queried.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the information to query. The list of supported param_name types and the information returned in param_value by clGetMemObjectInfo is described in the table below. cl_mem_infoReturn TypeInfo. returned in param_valueMemTypecl_mem_object_type Returns one of the following values: MemObjectBuffer if memobj is created with clCreateBuffer or clCreateSubBuffer.  cl_image_desc.image_type argument value if memobj is created with clCreateImage. MemFlagscl_mem_flags Returns the flags argument value specified when memobj is created with clCreateBuffer, clCreateSubBuffer, or clCreateImage. If memobj is a sub-buffer the memory access qualifiers inherited from parent buffer is also returned MemSizesize_t Return actual size of the data store associated with memobj in bytes. MemHostPtrvoid * If memobj is created with clCreateBuffer or clCreateImage and MemUseHostPtr is specified in mem_flags, return the host_ptr argument value specified when memobj is created. Otherwise a NULL value is returned.  If memobj is created with clCreateSubBuffer, return the host_ptr + origin value specified when memobj is created. host_ptr is the argument value specified to clCreateBuffer and MemUseHostPtr is specified in mem_flags for memory object from which memobj is created. Otherwise a NULL value is returned. MemMapCountcl_uint Map count. The map count returned should be considered immediately stale. It is unsuitable for general use in applications. This feature is provided for debugging. MemReferenceCountcl_uint Return memobj reference count. The reference count returned should be considered immediately stale. It is unsuitable for general use in applications. This feature is provided for identifying memory leaks. MemContextcl_context Return context specified when memory object is created. If memobj is created using clCreateSubBuffer, the context associated with the memory object specified as the buffer argument to clCreateSubBuffer is returned. MemAssociated memobjectcl_mem Return memory object from which memobj is created.  This returns the memory object specified as buffer argument to clCreateSubBuffer.  Otherwise a NULL value is returned. MemOffsetsize_t Return offset if memobj is a sub-buffer object created using clCreateSubBuffer.  This returns 0 if memobj is not a subbuffer object. MemD3D10ResourceKhrID3D10Resource * The property being queried (if the cl_khr_d3d10_sharing extension is enabled). If memobj was created using clCreateFromD3D10BufferKHR, clCreateFromD3D10Texture2DKHR, or clCreateFromD3D10Texture3DKHR, returns the resource argument specified when memobj was created. MemDx9Media adapterTypeKhrcl_dx9_media_- adapter_type_khr Returns the cl_dx9_media_adapter_type_khr argument value specified when memobj is created using clCreateFromDX9MediaSurfaceKHR (If the cl_khr_dx9_media_sharing extension is supported)MemDx9Media surfaceInfoKhrcl_dx9_- surface_info_khr Returns the cl_dx9_surface_info_khr argument value specified when memobj is created using clCreateFromDX9MediaSurfaceKHR (If the cl_khr_dx9_media_sharing extension is supported) MemD3D11ResourceKhrID3D11Resource *If the cl_khr_d3d11_sharing extension is supported, If memobj was created using clCreateFromD3D11BufferKHR, clCreateFromD3D11Texture2DKHR, or clCreateFromD3D11Texture3DKHR, returns the resource argument specified when memobj was created.
        /// </param>
        /// <param name="param_value_size"> 
        /// Used to specify the size in bytes of memory pointed to by param_value. This size must be ≥ size of return type as described in the table above.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data being queried by param_value. If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetMemObjectInfo")]
        [CLSCompliant(false)]
        public static ErrorCode GetMemObjectInfo(ComputeMemory memobj, OpenTK.Compute.CL12.MemInfo param_name, IntPtr param_value_size, IntPtr param_value, [OutAttribute] IntPtr[] param_value_size_ret) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Get information that is common to all memory objects (buffer and image objects).
        /// </summary>
        /// <param name="memobj"> 
        /// Specifies the memory object being queried.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the information to query. The list of supported param_name types and the information returned in param_value by clGetMemObjectInfo is described in the table below. cl_mem_infoReturn TypeInfo. returned in param_valueMemTypecl_mem_object_type Returns one of the following values: MemObjectBuffer if memobj is created with clCreateBuffer or clCreateSubBuffer.  cl_image_desc.image_type argument value if memobj is created with clCreateImage. MemFlagscl_mem_flags Returns the flags argument value specified when memobj is created with clCreateBuffer, clCreateSubBuffer, or clCreateImage. If memobj is a sub-buffer the memory access qualifiers inherited from parent buffer is also returned MemSizesize_t Return actual size of the data store associated with memobj in bytes. MemHostPtrvoid * If memobj is created with clCreateBuffer or clCreateImage and MemUseHostPtr is specified in mem_flags, return the host_ptr argument value specified when memobj is created. Otherwise a NULL value is returned.  If memobj is created with clCreateSubBuffer, return the host_ptr + origin value specified when memobj is created. host_ptr is the argument value specified to clCreateBuffer and MemUseHostPtr is specified in mem_flags for memory object from which memobj is created. Otherwise a NULL value is returned. MemMapCountcl_uint Map count. The map count returned should be considered immediately stale. It is unsuitable for general use in applications. This feature is provided for debugging. MemReferenceCountcl_uint Return memobj reference count. The reference count returned should be considered immediately stale. It is unsuitable for general use in applications. This feature is provided for identifying memory leaks. MemContextcl_context Return context specified when memory object is created. If memobj is created using clCreateSubBuffer, the context associated with the memory object specified as the buffer argument to clCreateSubBuffer is returned. MemAssociated memobjectcl_mem Return memory object from which memobj is created.  This returns the memory object specified as buffer argument to clCreateSubBuffer.  Otherwise a NULL value is returned. MemOffsetsize_t Return offset if memobj is a sub-buffer object created using clCreateSubBuffer.  This returns 0 if memobj is not a subbuffer object. MemD3D10ResourceKhrID3D10Resource * The property being queried (if the cl_khr_d3d10_sharing extension is enabled). If memobj was created using clCreateFromD3D10BufferKHR, clCreateFromD3D10Texture2DKHR, or clCreateFromD3D10Texture3DKHR, returns the resource argument specified when memobj was created. MemDx9Media adapterTypeKhrcl_dx9_media_- adapter_type_khr Returns the cl_dx9_media_adapter_type_khr argument value specified when memobj is created using clCreateFromDX9MediaSurfaceKHR (If the cl_khr_dx9_media_sharing extension is supported)MemDx9Media surfaceInfoKhrcl_dx9_- surface_info_khr Returns the cl_dx9_surface_info_khr argument value specified when memobj is created using clCreateFromDX9MediaSurfaceKHR (If the cl_khr_dx9_media_sharing extension is supported) MemD3D11ResourceKhrID3D11Resource *If the cl_khr_d3d11_sharing extension is supported, If memobj was created using clCreateFromD3D11BufferKHR, clCreateFromD3D11Texture2DKHR, or clCreateFromD3D11Texture3DKHR, returns the resource argument specified when memobj was created.
        /// </param>
        /// <param name="param_value_size"> 
        /// Used to specify the size in bytes of memory pointed to by param_value. This size must be ≥ size of return type as described in the table above.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data being queried by param_value. If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetMemObjectInfo")]
        [CLSCompliant(false)]
        public static ErrorCode GetMemObjectInfo(ComputeMemory memobj, OpenTK.Compute.CL12.MemInfo param_name, IntPtr param_value_size, IntPtr param_value, [OutAttribute] out IntPtr param_value_size_ret) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Get information that is common to all memory objects (buffer and image objects).
        /// </summary>
        /// <param name="memobj"> 
        /// Specifies the memory object being queried.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the information to query. The list of supported param_name types and the information returned in param_value by clGetMemObjectInfo is described in the table below. cl_mem_infoReturn TypeInfo. returned in param_valueMemTypecl_mem_object_type Returns one of the following values: MemObjectBuffer if memobj is created with clCreateBuffer or clCreateSubBuffer.  cl_image_desc.image_type argument value if memobj is created with clCreateImage. MemFlagscl_mem_flags Returns the flags argument value specified when memobj is created with clCreateBuffer, clCreateSubBuffer, or clCreateImage. If memobj is a sub-buffer the memory access qualifiers inherited from parent buffer is also returned MemSizesize_t Return actual size of the data store associated with memobj in bytes. MemHostPtrvoid * If memobj is created with clCreateBuffer or clCreateImage and MemUseHostPtr is specified in mem_flags, return the host_ptr argument value specified when memobj is created. Otherwise a NULL value is returned.  If memobj is created with clCreateSubBuffer, return the host_ptr + origin value specified when memobj is created. host_ptr is the argument value specified to clCreateBuffer and MemUseHostPtr is specified in mem_flags for memory object from which memobj is created. Otherwise a NULL value is returned. MemMapCountcl_uint Map count. The map count returned should be considered immediately stale. It is unsuitable for general use in applications. This feature is provided for debugging. MemReferenceCountcl_uint Return memobj reference count. The reference count returned should be considered immediately stale. It is unsuitable for general use in applications. This feature is provided for identifying memory leaks. MemContextcl_context Return context specified when memory object is created. If memobj is created using clCreateSubBuffer, the context associated with the memory object specified as the buffer argument to clCreateSubBuffer is returned. MemAssociated memobjectcl_mem Return memory object from which memobj is created.  This returns the memory object specified as buffer argument to clCreateSubBuffer.  Otherwise a NULL value is returned. MemOffsetsize_t Return offset if memobj is a sub-buffer object created using clCreateSubBuffer.  This returns 0 if memobj is not a subbuffer object. MemD3D10ResourceKhrID3D10Resource * The property being queried (if the cl_khr_d3d10_sharing extension is enabled). If memobj was created using clCreateFromD3D10BufferKHR, clCreateFromD3D10Texture2DKHR, or clCreateFromD3D10Texture3DKHR, returns the resource argument specified when memobj was created. MemDx9Media adapterTypeKhrcl_dx9_media_- adapter_type_khr Returns the cl_dx9_media_adapter_type_khr argument value specified when memobj is created using clCreateFromDX9MediaSurfaceKHR (If the cl_khr_dx9_media_sharing extension is supported)MemDx9Media surfaceInfoKhrcl_dx9_- surface_info_khr Returns the cl_dx9_surface_info_khr argument value specified when memobj is created using clCreateFromDX9MediaSurfaceKHR (If the cl_khr_dx9_media_sharing extension is supported) MemD3D11ResourceKhrID3D11Resource *If the cl_khr_d3d11_sharing extension is supported, If memobj was created using clCreateFromD3D11BufferKHR, clCreateFromD3D11Texture2DKHR, or clCreateFromD3D11Texture3DKHR, returns the resource argument specified when memobj was created.
        /// </param>
        /// <param name="param_value_size"> 
        /// Used to specify the size in bytes of memory pointed to by param_value. This size must be ≥ size of return type as described in the table above.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data being queried by param_value. If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetMemObjectInfo")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode GetMemObjectInfo(ComputeMemory memobj, OpenTK.Compute.CL12.MemInfo param_name, IntPtr param_value_size, IntPtr param_value, [OutAttribute] IntPtr* param_value_size_ret) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Get information that is common to all memory objects (buffer and image objects).
        /// </summary>
        /// <param name="memobj"> 
        /// Specifies the memory object being queried.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the information to query. The list of supported param_name types and the information returned in param_value by clGetMemObjectInfo is described in the table below. cl_mem_infoReturn TypeInfo. returned in param_valueMemTypecl_mem_object_type Returns one of the following values: MemObjectBuffer if memobj is created with clCreateBuffer or clCreateSubBuffer.  cl_image_desc.image_type argument value if memobj is created with clCreateImage. MemFlagscl_mem_flags Returns the flags argument value specified when memobj is created with clCreateBuffer, clCreateSubBuffer, or clCreateImage. If memobj is a sub-buffer the memory access qualifiers inherited from parent buffer is also returned MemSizesize_t Return actual size of the data store associated with memobj in bytes. MemHostPtrvoid * If memobj is created with clCreateBuffer or clCreateImage and MemUseHostPtr is specified in mem_flags, return the host_ptr argument value specified when memobj is created. Otherwise a NULL value is returned.  If memobj is created with clCreateSubBuffer, return the host_ptr + origin value specified when memobj is created. host_ptr is the argument value specified to clCreateBuffer and MemUseHostPtr is specified in mem_flags for memory object from which memobj is created. Otherwise a NULL value is returned. MemMapCountcl_uint Map count. The map count returned should be considered immediately stale. It is unsuitable for general use in applications. This feature is provided for debugging. MemReferenceCountcl_uint Return memobj reference count. The reference count returned should be considered immediately stale. It is unsuitable for general use in applications. This feature is provided for identifying memory leaks. MemContextcl_context Return context specified when memory object is created. If memobj is created using clCreateSubBuffer, the context associated with the memory object specified as the buffer argument to clCreateSubBuffer is returned. MemAssociated memobjectcl_mem Return memory object from which memobj is created.  This returns the memory object specified as buffer argument to clCreateSubBuffer.  Otherwise a NULL value is returned. MemOffsetsize_t Return offset if memobj is a sub-buffer object created using clCreateSubBuffer.  This returns 0 if memobj is not a subbuffer object. MemD3D10ResourceKhrID3D10Resource * The property being queried (if the cl_khr_d3d10_sharing extension is enabled). If memobj was created using clCreateFromD3D10BufferKHR, clCreateFromD3D10Texture2DKHR, or clCreateFromD3D10Texture3DKHR, returns the resource argument specified when memobj was created. MemDx9Media adapterTypeKhrcl_dx9_media_- adapter_type_khr Returns the cl_dx9_media_adapter_type_khr argument value specified when memobj is created using clCreateFromDX9MediaSurfaceKHR (If the cl_khr_dx9_media_sharing extension is supported)MemDx9Media surfaceInfoKhrcl_dx9_- surface_info_khr Returns the cl_dx9_surface_info_khr argument value specified when memobj is created using clCreateFromDX9MediaSurfaceKHR (If the cl_khr_dx9_media_sharing extension is supported) MemD3D11ResourceKhrID3D11Resource *If the cl_khr_d3d11_sharing extension is supported, If memobj was created using clCreateFromD3D11BufferKHR, clCreateFromD3D11Texture2DKHR, or clCreateFromD3D11Texture3DKHR, returns the resource argument specified when memobj was created.
        /// </param>
        /// <param name="param_value_size"> 
        /// Used to specify the size in bytes of memory pointed to by param_value. This size must be ≥ size of return type as described in the table above.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data being queried by param_value. If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetMemObjectInfo")]
        [CLSCompliant(false)]
        public static ErrorCode GetMemObjectInfo<T3>(ComputeMemory memobj, OpenTK.Compute.CL12.MemInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] T3[] param_value, [OutAttribute] IntPtr[] param_value_size_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Get information that is common to all memory objects (buffer and image objects).
        /// </summary>
        /// <param name="memobj"> 
        /// Specifies the memory object being queried.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the information to query. The list of supported param_name types and the information returned in param_value by clGetMemObjectInfo is described in the table below. cl_mem_infoReturn TypeInfo. returned in param_valueMemTypecl_mem_object_type Returns one of the following values: MemObjectBuffer if memobj is created with clCreateBuffer or clCreateSubBuffer.  cl_image_desc.image_type argument value if memobj is created with clCreateImage. MemFlagscl_mem_flags Returns the flags argument value specified when memobj is created with clCreateBuffer, clCreateSubBuffer, or clCreateImage. If memobj is a sub-buffer the memory access qualifiers inherited from parent buffer is also returned MemSizesize_t Return actual size of the data store associated with memobj in bytes. MemHostPtrvoid * If memobj is created with clCreateBuffer or clCreateImage and MemUseHostPtr is specified in mem_flags, return the host_ptr argument value specified when memobj is created. Otherwise a NULL value is returned.  If memobj is created with clCreateSubBuffer, return the host_ptr + origin value specified when memobj is created. host_ptr is the argument value specified to clCreateBuffer and MemUseHostPtr is specified in mem_flags for memory object from which memobj is created. Otherwise a NULL value is returned. MemMapCountcl_uint Map count. The map count returned should be considered immediately stale. It is unsuitable for general use in applications. This feature is provided for debugging. MemReferenceCountcl_uint Return memobj reference count. The reference count returned should be considered immediately stale. It is unsuitable for general use in applications. This feature is provided for identifying memory leaks. MemContextcl_context Return context specified when memory object is created. If memobj is created using clCreateSubBuffer, the context associated with the memory object specified as the buffer argument to clCreateSubBuffer is returned. MemAssociated memobjectcl_mem Return memory object from which memobj is created.  This returns the memory object specified as buffer argument to clCreateSubBuffer.  Otherwise a NULL value is returned. MemOffsetsize_t Return offset if memobj is a sub-buffer object created using clCreateSubBuffer.  This returns 0 if memobj is not a subbuffer object. MemD3D10ResourceKhrID3D10Resource * The property being queried (if the cl_khr_d3d10_sharing extension is enabled). If memobj was created using clCreateFromD3D10BufferKHR, clCreateFromD3D10Texture2DKHR, or clCreateFromD3D10Texture3DKHR, returns the resource argument specified when memobj was created. MemDx9Media adapterTypeKhrcl_dx9_media_- adapter_type_khr Returns the cl_dx9_media_adapter_type_khr argument value specified when memobj is created using clCreateFromDX9MediaSurfaceKHR (If the cl_khr_dx9_media_sharing extension is supported)MemDx9Media surfaceInfoKhrcl_dx9_- surface_info_khr Returns the cl_dx9_surface_info_khr argument value specified when memobj is created using clCreateFromDX9MediaSurfaceKHR (If the cl_khr_dx9_media_sharing extension is supported) MemD3D11ResourceKhrID3D11Resource *If the cl_khr_d3d11_sharing extension is supported, If memobj was created using clCreateFromD3D11BufferKHR, clCreateFromD3D11Texture2DKHR, or clCreateFromD3D11Texture3DKHR, returns the resource argument specified when memobj was created.
        /// </param>
        /// <param name="param_value_size"> 
        /// Used to specify the size in bytes of memory pointed to by param_value. This size must be ≥ size of return type as described in the table above.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data being queried by param_value. If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetMemObjectInfo")]
        [CLSCompliant(false)]
        public static ErrorCode GetMemObjectInfo<T3>(ComputeMemory memobj, OpenTK.Compute.CL12.MemInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] T3[] param_value, [OutAttribute] out IntPtr param_value_size_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Get information that is common to all memory objects (buffer and image objects).
        /// </summary>
        /// <param name="memobj"> 
        /// Specifies the memory object being queried.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the information to query. The list of supported param_name types and the information returned in param_value by clGetMemObjectInfo is described in the table below. cl_mem_infoReturn TypeInfo. returned in param_valueMemTypecl_mem_object_type Returns one of the following values: MemObjectBuffer if memobj is created with clCreateBuffer or clCreateSubBuffer.  cl_image_desc.image_type argument value if memobj is created with clCreateImage. MemFlagscl_mem_flags Returns the flags argument value specified when memobj is created with clCreateBuffer, clCreateSubBuffer, or clCreateImage. If memobj is a sub-buffer the memory access qualifiers inherited from parent buffer is also returned MemSizesize_t Return actual size of the data store associated with memobj in bytes. MemHostPtrvoid * If memobj is created with clCreateBuffer or clCreateImage and MemUseHostPtr is specified in mem_flags, return the host_ptr argument value specified when memobj is created. Otherwise a NULL value is returned.  If memobj is created with clCreateSubBuffer, return the host_ptr + origin value specified when memobj is created. host_ptr is the argument value specified to clCreateBuffer and MemUseHostPtr is specified in mem_flags for memory object from which memobj is created. Otherwise a NULL value is returned. MemMapCountcl_uint Map count. The map count returned should be considered immediately stale. It is unsuitable for general use in applications. This feature is provided for debugging. MemReferenceCountcl_uint Return memobj reference count. The reference count returned should be considered immediately stale. It is unsuitable for general use in applications. This feature is provided for identifying memory leaks. MemContextcl_context Return context specified when memory object is created. If memobj is created using clCreateSubBuffer, the context associated with the memory object specified as the buffer argument to clCreateSubBuffer is returned. MemAssociated memobjectcl_mem Return memory object from which memobj is created.  This returns the memory object specified as buffer argument to clCreateSubBuffer.  Otherwise a NULL value is returned. MemOffsetsize_t Return offset if memobj is a sub-buffer object created using clCreateSubBuffer.  This returns 0 if memobj is not a subbuffer object. MemD3D10ResourceKhrID3D10Resource * The property being queried (if the cl_khr_d3d10_sharing extension is enabled). If memobj was created using clCreateFromD3D10BufferKHR, clCreateFromD3D10Texture2DKHR, or clCreateFromD3D10Texture3DKHR, returns the resource argument specified when memobj was created. MemDx9Media adapterTypeKhrcl_dx9_media_- adapter_type_khr Returns the cl_dx9_media_adapter_type_khr argument value specified when memobj is created using clCreateFromDX9MediaSurfaceKHR (If the cl_khr_dx9_media_sharing extension is supported)MemDx9Media surfaceInfoKhrcl_dx9_- surface_info_khr Returns the cl_dx9_surface_info_khr argument value specified when memobj is created using clCreateFromDX9MediaSurfaceKHR (If the cl_khr_dx9_media_sharing extension is supported) MemD3D11ResourceKhrID3D11Resource *If the cl_khr_d3d11_sharing extension is supported, If memobj was created using clCreateFromD3D11BufferKHR, clCreateFromD3D11Texture2DKHR, or clCreateFromD3D11Texture3DKHR, returns the resource argument specified when memobj was created.
        /// </param>
        /// <param name="param_value_size"> 
        /// Used to specify the size in bytes of memory pointed to by param_value. This size must be ≥ size of return type as described in the table above.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data being queried by param_value. If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetMemObjectInfo")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode GetMemObjectInfo<T3>(ComputeMemory memobj, OpenTK.Compute.CL12.MemInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] T3[] param_value, [OutAttribute] IntPtr* param_value_size_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Get information that is common to all memory objects (buffer and image objects).
        /// </summary>
        /// <param name="memobj"> 
        /// Specifies the memory object being queried.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the information to query. The list of supported param_name types and the information returned in param_value by clGetMemObjectInfo is described in the table below. cl_mem_infoReturn TypeInfo. returned in param_valueMemTypecl_mem_object_type Returns one of the following values: MemObjectBuffer if memobj is created with clCreateBuffer or clCreateSubBuffer.  cl_image_desc.image_type argument value if memobj is created with clCreateImage. MemFlagscl_mem_flags Returns the flags argument value specified when memobj is created with clCreateBuffer, clCreateSubBuffer, or clCreateImage. If memobj is a sub-buffer the memory access qualifiers inherited from parent buffer is also returned MemSizesize_t Return actual size of the data store associated with memobj in bytes. MemHostPtrvoid * If memobj is created with clCreateBuffer or clCreateImage and MemUseHostPtr is specified in mem_flags, return the host_ptr argument value specified when memobj is created. Otherwise a NULL value is returned.  If memobj is created with clCreateSubBuffer, return the host_ptr + origin value specified when memobj is created. host_ptr is the argument value specified to clCreateBuffer and MemUseHostPtr is specified in mem_flags for memory object from which memobj is created. Otherwise a NULL value is returned. MemMapCountcl_uint Map count. The map count returned should be considered immediately stale. It is unsuitable for general use in applications. This feature is provided for debugging. MemReferenceCountcl_uint Return memobj reference count. The reference count returned should be considered immediately stale. It is unsuitable for general use in applications. This feature is provided for identifying memory leaks. MemContextcl_context Return context specified when memory object is created. If memobj is created using clCreateSubBuffer, the context associated with the memory object specified as the buffer argument to clCreateSubBuffer is returned. MemAssociated memobjectcl_mem Return memory object from which memobj is created.  This returns the memory object specified as buffer argument to clCreateSubBuffer.  Otherwise a NULL value is returned. MemOffsetsize_t Return offset if memobj is a sub-buffer object created using clCreateSubBuffer.  This returns 0 if memobj is not a subbuffer object. MemD3D10ResourceKhrID3D10Resource * The property being queried (if the cl_khr_d3d10_sharing extension is enabled). If memobj was created using clCreateFromD3D10BufferKHR, clCreateFromD3D10Texture2DKHR, or clCreateFromD3D10Texture3DKHR, returns the resource argument specified when memobj was created. MemDx9Media adapterTypeKhrcl_dx9_media_- adapter_type_khr Returns the cl_dx9_media_adapter_type_khr argument value specified when memobj is created using clCreateFromDX9MediaSurfaceKHR (If the cl_khr_dx9_media_sharing extension is supported)MemDx9Media surfaceInfoKhrcl_dx9_- surface_info_khr Returns the cl_dx9_surface_info_khr argument value specified when memobj is created using clCreateFromDX9MediaSurfaceKHR (If the cl_khr_dx9_media_sharing extension is supported) MemD3D11ResourceKhrID3D11Resource *If the cl_khr_d3d11_sharing extension is supported, If memobj was created using clCreateFromD3D11BufferKHR, clCreateFromD3D11Texture2DKHR, or clCreateFromD3D11Texture3DKHR, returns the resource argument specified when memobj was created.
        /// </param>
        /// <param name="param_value_size"> 
        /// Used to specify the size in bytes of memory pointed to by param_value. This size must be ≥ size of return type as described in the table above.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data being queried by param_value. If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetMemObjectInfo")]
        [CLSCompliant(false)]
        public static ErrorCode GetMemObjectInfo<T3>(ComputeMemory memobj, OpenTK.Compute.CL12.MemInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] T3[,] param_value, [OutAttribute] IntPtr[] param_value_size_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Get information that is common to all memory objects (buffer and image objects).
        /// </summary>
        /// <param name="memobj"> 
        /// Specifies the memory object being queried.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the information to query. The list of supported param_name types and the information returned in param_value by clGetMemObjectInfo is described in the table below. cl_mem_infoReturn TypeInfo. returned in param_valueMemTypecl_mem_object_type Returns one of the following values: MemObjectBuffer if memobj is created with clCreateBuffer or clCreateSubBuffer.  cl_image_desc.image_type argument value if memobj is created with clCreateImage. MemFlagscl_mem_flags Returns the flags argument value specified when memobj is created with clCreateBuffer, clCreateSubBuffer, or clCreateImage. If memobj is a sub-buffer the memory access qualifiers inherited from parent buffer is also returned MemSizesize_t Return actual size of the data store associated with memobj in bytes. MemHostPtrvoid * If memobj is created with clCreateBuffer or clCreateImage and MemUseHostPtr is specified in mem_flags, return the host_ptr argument value specified when memobj is created. Otherwise a NULL value is returned.  If memobj is created with clCreateSubBuffer, return the host_ptr + origin value specified when memobj is created. host_ptr is the argument value specified to clCreateBuffer and MemUseHostPtr is specified in mem_flags for memory object from which memobj is created. Otherwise a NULL value is returned. MemMapCountcl_uint Map count. The map count returned should be considered immediately stale. It is unsuitable for general use in applications. This feature is provided for debugging. MemReferenceCountcl_uint Return memobj reference count. The reference count returned should be considered immediately stale. It is unsuitable for general use in applications. This feature is provided for identifying memory leaks. MemContextcl_context Return context specified when memory object is created. If memobj is created using clCreateSubBuffer, the context associated with the memory object specified as the buffer argument to clCreateSubBuffer is returned. MemAssociated memobjectcl_mem Return memory object from which memobj is created.  This returns the memory object specified as buffer argument to clCreateSubBuffer.  Otherwise a NULL value is returned. MemOffsetsize_t Return offset if memobj is a sub-buffer object created using clCreateSubBuffer.  This returns 0 if memobj is not a subbuffer object. MemD3D10ResourceKhrID3D10Resource * The property being queried (if the cl_khr_d3d10_sharing extension is enabled). If memobj was created using clCreateFromD3D10BufferKHR, clCreateFromD3D10Texture2DKHR, or clCreateFromD3D10Texture3DKHR, returns the resource argument specified when memobj was created. MemDx9Media adapterTypeKhrcl_dx9_media_- adapter_type_khr Returns the cl_dx9_media_adapter_type_khr argument value specified when memobj is created using clCreateFromDX9MediaSurfaceKHR (If the cl_khr_dx9_media_sharing extension is supported)MemDx9Media surfaceInfoKhrcl_dx9_- surface_info_khr Returns the cl_dx9_surface_info_khr argument value specified when memobj is created using clCreateFromDX9MediaSurfaceKHR (If the cl_khr_dx9_media_sharing extension is supported) MemD3D11ResourceKhrID3D11Resource *If the cl_khr_d3d11_sharing extension is supported, If memobj was created using clCreateFromD3D11BufferKHR, clCreateFromD3D11Texture2DKHR, or clCreateFromD3D11Texture3DKHR, returns the resource argument specified when memobj was created.
        /// </param>
        /// <param name="param_value_size"> 
        /// Used to specify the size in bytes of memory pointed to by param_value. This size must be ≥ size of return type as described in the table above.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data being queried by param_value. If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetMemObjectInfo")]
        [CLSCompliant(false)]
        public static ErrorCode GetMemObjectInfo<T3>(ComputeMemory memobj, OpenTK.Compute.CL12.MemInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] T3[,] param_value, [OutAttribute] out IntPtr param_value_size_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Get information that is common to all memory objects (buffer and image objects).
        /// </summary>
        /// <param name="memobj"> 
        /// Specifies the memory object being queried.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the information to query. The list of supported param_name types and the information returned in param_value by clGetMemObjectInfo is described in the table below. cl_mem_infoReturn TypeInfo. returned in param_valueMemTypecl_mem_object_type Returns one of the following values: MemObjectBuffer if memobj is created with clCreateBuffer or clCreateSubBuffer.  cl_image_desc.image_type argument value if memobj is created with clCreateImage. MemFlagscl_mem_flags Returns the flags argument value specified when memobj is created with clCreateBuffer, clCreateSubBuffer, or clCreateImage. If memobj is a sub-buffer the memory access qualifiers inherited from parent buffer is also returned MemSizesize_t Return actual size of the data store associated with memobj in bytes. MemHostPtrvoid * If memobj is created with clCreateBuffer or clCreateImage and MemUseHostPtr is specified in mem_flags, return the host_ptr argument value specified when memobj is created. Otherwise a NULL value is returned.  If memobj is created with clCreateSubBuffer, return the host_ptr + origin value specified when memobj is created. host_ptr is the argument value specified to clCreateBuffer and MemUseHostPtr is specified in mem_flags for memory object from which memobj is created. Otherwise a NULL value is returned. MemMapCountcl_uint Map count. The map count returned should be considered immediately stale. It is unsuitable for general use in applications. This feature is provided for debugging. MemReferenceCountcl_uint Return memobj reference count. The reference count returned should be considered immediately stale. It is unsuitable for general use in applications. This feature is provided for identifying memory leaks. MemContextcl_context Return context specified when memory object is created. If memobj is created using clCreateSubBuffer, the context associated with the memory object specified as the buffer argument to clCreateSubBuffer is returned. MemAssociated memobjectcl_mem Return memory object from which memobj is created.  This returns the memory object specified as buffer argument to clCreateSubBuffer.  Otherwise a NULL value is returned. MemOffsetsize_t Return offset if memobj is a sub-buffer object created using clCreateSubBuffer.  This returns 0 if memobj is not a subbuffer object. MemD3D10ResourceKhrID3D10Resource * The property being queried (if the cl_khr_d3d10_sharing extension is enabled). If memobj was created using clCreateFromD3D10BufferKHR, clCreateFromD3D10Texture2DKHR, or clCreateFromD3D10Texture3DKHR, returns the resource argument specified when memobj was created. MemDx9Media adapterTypeKhrcl_dx9_media_- adapter_type_khr Returns the cl_dx9_media_adapter_type_khr argument value specified when memobj is created using clCreateFromDX9MediaSurfaceKHR (If the cl_khr_dx9_media_sharing extension is supported)MemDx9Media surfaceInfoKhrcl_dx9_- surface_info_khr Returns the cl_dx9_surface_info_khr argument value specified when memobj is created using clCreateFromDX9MediaSurfaceKHR (If the cl_khr_dx9_media_sharing extension is supported) MemD3D11ResourceKhrID3D11Resource *If the cl_khr_d3d11_sharing extension is supported, If memobj was created using clCreateFromD3D11BufferKHR, clCreateFromD3D11Texture2DKHR, or clCreateFromD3D11Texture3DKHR, returns the resource argument specified when memobj was created.
        /// </param>
        /// <param name="param_value_size"> 
        /// Used to specify the size in bytes of memory pointed to by param_value. This size must be ≥ size of return type as described in the table above.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data being queried by param_value. If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetMemObjectInfo")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode GetMemObjectInfo<T3>(ComputeMemory memobj, OpenTK.Compute.CL12.MemInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] T3[,] param_value, [OutAttribute] IntPtr* param_value_size_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Get information that is common to all memory objects (buffer and image objects).
        /// </summary>
        /// <param name="memobj"> 
        /// Specifies the memory object being queried.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the information to query. The list of supported param_name types and the information returned in param_value by clGetMemObjectInfo is described in the table below. cl_mem_infoReturn TypeInfo. returned in param_valueMemTypecl_mem_object_type Returns one of the following values: MemObjectBuffer if memobj is created with clCreateBuffer or clCreateSubBuffer.  cl_image_desc.image_type argument value if memobj is created with clCreateImage. MemFlagscl_mem_flags Returns the flags argument value specified when memobj is created with clCreateBuffer, clCreateSubBuffer, or clCreateImage. If memobj is a sub-buffer the memory access qualifiers inherited from parent buffer is also returned MemSizesize_t Return actual size of the data store associated with memobj in bytes. MemHostPtrvoid * If memobj is created with clCreateBuffer or clCreateImage and MemUseHostPtr is specified in mem_flags, return the host_ptr argument value specified when memobj is created. Otherwise a NULL value is returned.  If memobj is created with clCreateSubBuffer, return the host_ptr + origin value specified when memobj is created. host_ptr is the argument value specified to clCreateBuffer and MemUseHostPtr is specified in mem_flags for memory object from which memobj is created. Otherwise a NULL value is returned. MemMapCountcl_uint Map count. The map count returned should be considered immediately stale. It is unsuitable for general use in applications. This feature is provided for debugging. MemReferenceCountcl_uint Return memobj reference count. The reference count returned should be considered immediately stale. It is unsuitable for general use in applications. This feature is provided for identifying memory leaks. MemContextcl_context Return context specified when memory object is created. If memobj is created using clCreateSubBuffer, the context associated with the memory object specified as the buffer argument to clCreateSubBuffer is returned. MemAssociated memobjectcl_mem Return memory object from which memobj is created.  This returns the memory object specified as buffer argument to clCreateSubBuffer.  Otherwise a NULL value is returned. MemOffsetsize_t Return offset if memobj is a sub-buffer object created using clCreateSubBuffer.  This returns 0 if memobj is not a subbuffer object. MemD3D10ResourceKhrID3D10Resource * The property being queried (if the cl_khr_d3d10_sharing extension is enabled). If memobj was created using clCreateFromD3D10BufferKHR, clCreateFromD3D10Texture2DKHR, or clCreateFromD3D10Texture3DKHR, returns the resource argument specified when memobj was created. MemDx9Media adapterTypeKhrcl_dx9_media_- adapter_type_khr Returns the cl_dx9_media_adapter_type_khr argument value specified when memobj is created using clCreateFromDX9MediaSurfaceKHR (If the cl_khr_dx9_media_sharing extension is supported)MemDx9Media surfaceInfoKhrcl_dx9_- surface_info_khr Returns the cl_dx9_surface_info_khr argument value specified when memobj is created using clCreateFromDX9MediaSurfaceKHR (If the cl_khr_dx9_media_sharing extension is supported) MemD3D11ResourceKhrID3D11Resource *If the cl_khr_d3d11_sharing extension is supported, If memobj was created using clCreateFromD3D11BufferKHR, clCreateFromD3D11Texture2DKHR, or clCreateFromD3D11Texture3DKHR, returns the resource argument specified when memobj was created.
        /// </param>
        /// <param name="param_value_size"> 
        /// Used to specify the size in bytes of memory pointed to by param_value. This size must be ≥ size of return type as described in the table above.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data being queried by param_value. If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetMemObjectInfo")]
        [CLSCompliant(false)]
        public static ErrorCode GetMemObjectInfo<T3>(ComputeMemory memobj, OpenTK.Compute.CL12.MemInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] T3[,,] param_value, [OutAttribute] IntPtr[] param_value_size_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Get information that is common to all memory objects (buffer and image objects).
        /// </summary>
        /// <param name="memobj"> 
        /// Specifies the memory object being queried.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the information to query. The list of supported param_name types and the information returned in param_value by clGetMemObjectInfo is described in the table below. cl_mem_infoReturn TypeInfo. returned in param_valueMemTypecl_mem_object_type Returns one of the following values: MemObjectBuffer if memobj is created with clCreateBuffer or clCreateSubBuffer.  cl_image_desc.image_type argument value if memobj is created with clCreateImage. MemFlagscl_mem_flags Returns the flags argument value specified when memobj is created with clCreateBuffer, clCreateSubBuffer, or clCreateImage. If memobj is a sub-buffer the memory access qualifiers inherited from parent buffer is also returned MemSizesize_t Return actual size of the data store associated with memobj in bytes. MemHostPtrvoid * If memobj is created with clCreateBuffer or clCreateImage and MemUseHostPtr is specified in mem_flags, return the host_ptr argument value specified when memobj is created. Otherwise a NULL value is returned.  If memobj is created with clCreateSubBuffer, return the host_ptr + origin value specified when memobj is created. host_ptr is the argument value specified to clCreateBuffer and MemUseHostPtr is specified in mem_flags for memory object from which memobj is created. Otherwise a NULL value is returned. MemMapCountcl_uint Map count. The map count returned should be considered immediately stale. It is unsuitable for general use in applications. This feature is provided for debugging. MemReferenceCountcl_uint Return memobj reference count. The reference count returned should be considered immediately stale. It is unsuitable for general use in applications. This feature is provided for identifying memory leaks. MemContextcl_context Return context specified when memory object is created. If memobj is created using clCreateSubBuffer, the context associated with the memory object specified as the buffer argument to clCreateSubBuffer is returned. MemAssociated memobjectcl_mem Return memory object from which memobj is created.  This returns the memory object specified as buffer argument to clCreateSubBuffer.  Otherwise a NULL value is returned. MemOffsetsize_t Return offset if memobj is a sub-buffer object created using clCreateSubBuffer.  This returns 0 if memobj is not a subbuffer object. MemD3D10ResourceKhrID3D10Resource * The property being queried (if the cl_khr_d3d10_sharing extension is enabled). If memobj was created using clCreateFromD3D10BufferKHR, clCreateFromD3D10Texture2DKHR, or clCreateFromD3D10Texture3DKHR, returns the resource argument specified when memobj was created. MemDx9Media adapterTypeKhrcl_dx9_media_- adapter_type_khr Returns the cl_dx9_media_adapter_type_khr argument value specified when memobj is created using clCreateFromDX9MediaSurfaceKHR (If the cl_khr_dx9_media_sharing extension is supported)MemDx9Media surfaceInfoKhrcl_dx9_- surface_info_khr Returns the cl_dx9_surface_info_khr argument value specified when memobj is created using clCreateFromDX9MediaSurfaceKHR (If the cl_khr_dx9_media_sharing extension is supported) MemD3D11ResourceKhrID3D11Resource *If the cl_khr_d3d11_sharing extension is supported, If memobj was created using clCreateFromD3D11BufferKHR, clCreateFromD3D11Texture2DKHR, or clCreateFromD3D11Texture3DKHR, returns the resource argument specified when memobj was created.
        /// </param>
        /// <param name="param_value_size"> 
        /// Used to specify the size in bytes of memory pointed to by param_value. This size must be ≥ size of return type as described in the table above.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data being queried by param_value. If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetMemObjectInfo")]
        [CLSCompliant(false)]
        public static ErrorCode GetMemObjectInfo<T3>(ComputeMemory memobj, OpenTK.Compute.CL12.MemInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] T3[,,] param_value, [OutAttribute] out IntPtr param_value_size_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Get information that is common to all memory objects (buffer and image objects).
        /// </summary>
        /// <param name="memobj"> 
        /// Specifies the memory object being queried.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the information to query. The list of supported param_name types and the information returned in param_value by clGetMemObjectInfo is described in the table below. cl_mem_infoReturn TypeInfo. returned in param_valueMemTypecl_mem_object_type Returns one of the following values: MemObjectBuffer if memobj is created with clCreateBuffer or clCreateSubBuffer.  cl_image_desc.image_type argument value if memobj is created with clCreateImage. MemFlagscl_mem_flags Returns the flags argument value specified when memobj is created with clCreateBuffer, clCreateSubBuffer, or clCreateImage. If memobj is a sub-buffer the memory access qualifiers inherited from parent buffer is also returned MemSizesize_t Return actual size of the data store associated with memobj in bytes. MemHostPtrvoid * If memobj is created with clCreateBuffer or clCreateImage and MemUseHostPtr is specified in mem_flags, return the host_ptr argument value specified when memobj is created. Otherwise a NULL value is returned.  If memobj is created with clCreateSubBuffer, return the host_ptr + origin value specified when memobj is created. host_ptr is the argument value specified to clCreateBuffer and MemUseHostPtr is specified in mem_flags for memory object from which memobj is created. Otherwise a NULL value is returned. MemMapCountcl_uint Map count. The map count returned should be considered immediately stale. It is unsuitable for general use in applications. This feature is provided for debugging. MemReferenceCountcl_uint Return memobj reference count. The reference count returned should be considered immediately stale. It is unsuitable for general use in applications. This feature is provided for identifying memory leaks. MemContextcl_context Return context specified when memory object is created. If memobj is created using clCreateSubBuffer, the context associated with the memory object specified as the buffer argument to clCreateSubBuffer is returned. MemAssociated memobjectcl_mem Return memory object from which memobj is created.  This returns the memory object specified as buffer argument to clCreateSubBuffer.  Otherwise a NULL value is returned. MemOffsetsize_t Return offset if memobj is a sub-buffer object created using clCreateSubBuffer.  This returns 0 if memobj is not a subbuffer object. MemD3D10ResourceKhrID3D10Resource * The property being queried (if the cl_khr_d3d10_sharing extension is enabled). If memobj was created using clCreateFromD3D10BufferKHR, clCreateFromD3D10Texture2DKHR, or clCreateFromD3D10Texture3DKHR, returns the resource argument specified when memobj was created. MemDx9Media adapterTypeKhrcl_dx9_media_- adapter_type_khr Returns the cl_dx9_media_adapter_type_khr argument value specified when memobj is created using clCreateFromDX9MediaSurfaceKHR (If the cl_khr_dx9_media_sharing extension is supported)MemDx9Media surfaceInfoKhrcl_dx9_- surface_info_khr Returns the cl_dx9_surface_info_khr argument value specified when memobj is created using clCreateFromDX9MediaSurfaceKHR (If the cl_khr_dx9_media_sharing extension is supported) MemD3D11ResourceKhrID3D11Resource *If the cl_khr_d3d11_sharing extension is supported, If memobj was created using clCreateFromD3D11BufferKHR, clCreateFromD3D11Texture2DKHR, or clCreateFromD3D11Texture3DKHR, returns the resource argument specified when memobj was created.
        /// </param>
        /// <param name="param_value_size"> 
        /// Used to specify the size in bytes of memory pointed to by param_value. This size must be ≥ size of return type as described in the table above.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data being queried by param_value. If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetMemObjectInfo")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode GetMemObjectInfo<T3>(ComputeMemory memobj, OpenTK.Compute.CL12.MemInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] T3[,,] param_value, [OutAttribute] IntPtr* param_value_size_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Get information that is common to all memory objects (buffer and image objects).
        /// </summary>
        /// <param name="memobj"> 
        /// Specifies the memory object being queried.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the information to query. The list of supported param_name types and the information returned in param_value by clGetMemObjectInfo is described in the table below. cl_mem_infoReturn TypeInfo. returned in param_valueMemTypecl_mem_object_type Returns one of the following values: MemObjectBuffer if memobj is created with clCreateBuffer or clCreateSubBuffer.  cl_image_desc.image_type argument value if memobj is created with clCreateImage. MemFlagscl_mem_flags Returns the flags argument value specified when memobj is created with clCreateBuffer, clCreateSubBuffer, or clCreateImage. If memobj is a sub-buffer the memory access qualifiers inherited from parent buffer is also returned MemSizesize_t Return actual size of the data store associated with memobj in bytes. MemHostPtrvoid * If memobj is created with clCreateBuffer or clCreateImage and MemUseHostPtr is specified in mem_flags, return the host_ptr argument value specified when memobj is created. Otherwise a NULL value is returned.  If memobj is created with clCreateSubBuffer, return the host_ptr + origin value specified when memobj is created. host_ptr is the argument value specified to clCreateBuffer and MemUseHostPtr is specified in mem_flags for memory object from which memobj is created. Otherwise a NULL value is returned. MemMapCountcl_uint Map count. The map count returned should be considered immediately stale. It is unsuitable for general use in applications. This feature is provided for debugging. MemReferenceCountcl_uint Return memobj reference count. The reference count returned should be considered immediately stale. It is unsuitable for general use in applications. This feature is provided for identifying memory leaks. MemContextcl_context Return context specified when memory object is created. If memobj is created using clCreateSubBuffer, the context associated with the memory object specified as the buffer argument to clCreateSubBuffer is returned. MemAssociated memobjectcl_mem Return memory object from which memobj is created.  This returns the memory object specified as buffer argument to clCreateSubBuffer.  Otherwise a NULL value is returned. MemOffsetsize_t Return offset if memobj is a sub-buffer object created using clCreateSubBuffer.  This returns 0 if memobj is not a subbuffer object. MemD3D10ResourceKhrID3D10Resource * The property being queried (if the cl_khr_d3d10_sharing extension is enabled). If memobj was created using clCreateFromD3D10BufferKHR, clCreateFromD3D10Texture2DKHR, or clCreateFromD3D10Texture3DKHR, returns the resource argument specified when memobj was created. MemDx9Media adapterTypeKhrcl_dx9_media_- adapter_type_khr Returns the cl_dx9_media_adapter_type_khr argument value specified when memobj is created using clCreateFromDX9MediaSurfaceKHR (If the cl_khr_dx9_media_sharing extension is supported)MemDx9Media surfaceInfoKhrcl_dx9_- surface_info_khr Returns the cl_dx9_surface_info_khr argument value specified when memobj is created using clCreateFromDX9MediaSurfaceKHR (If the cl_khr_dx9_media_sharing extension is supported) MemD3D11ResourceKhrID3D11Resource *If the cl_khr_d3d11_sharing extension is supported, If memobj was created using clCreateFromD3D11BufferKHR, clCreateFromD3D11Texture2DKHR, or clCreateFromD3D11Texture3DKHR, returns the resource argument specified when memobj was created.
        /// </param>
        /// <param name="param_value_size"> 
        /// Used to specify the size in bytes of memory pointed to by param_value. This size must be ≥ size of return type as described in the table above.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data being queried by param_value. If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetMemObjectInfo")]
        [CLSCompliant(false)]
        public static ErrorCode GetMemObjectInfo<T3>(ComputeMemory memobj, OpenTK.Compute.CL12.MemInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] ref T3 param_value, [OutAttribute] IntPtr[] param_value_size_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Get information that is common to all memory objects (buffer and image objects).
        /// </summary>
        /// <param name="memobj"> 
        /// Specifies the memory object being queried.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the information to query. The list of supported param_name types and the information returned in param_value by clGetMemObjectInfo is described in the table below. cl_mem_infoReturn TypeInfo. returned in param_valueMemTypecl_mem_object_type Returns one of the following values: MemObjectBuffer if memobj is created with clCreateBuffer or clCreateSubBuffer.  cl_image_desc.image_type argument value if memobj is created with clCreateImage. MemFlagscl_mem_flags Returns the flags argument value specified when memobj is created with clCreateBuffer, clCreateSubBuffer, or clCreateImage. If memobj is a sub-buffer the memory access qualifiers inherited from parent buffer is also returned MemSizesize_t Return actual size of the data store associated with memobj in bytes. MemHostPtrvoid * If memobj is created with clCreateBuffer or clCreateImage and MemUseHostPtr is specified in mem_flags, return the host_ptr argument value specified when memobj is created. Otherwise a NULL value is returned.  If memobj is created with clCreateSubBuffer, return the host_ptr + origin value specified when memobj is created. host_ptr is the argument value specified to clCreateBuffer and MemUseHostPtr is specified in mem_flags for memory object from which memobj is created. Otherwise a NULL value is returned. MemMapCountcl_uint Map count. The map count returned should be considered immediately stale. It is unsuitable for general use in applications. This feature is provided for debugging. MemReferenceCountcl_uint Return memobj reference count. The reference count returned should be considered immediately stale. It is unsuitable for general use in applications. This feature is provided for identifying memory leaks. MemContextcl_context Return context specified when memory object is created. If memobj is created using clCreateSubBuffer, the context associated with the memory object specified as the buffer argument to clCreateSubBuffer is returned. MemAssociated memobjectcl_mem Return memory object from which memobj is created.  This returns the memory object specified as buffer argument to clCreateSubBuffer.  Otherwise a NULL value is returned. MemOffsetsize_t Return offset if memobj is a sub-buffer object created using clCreateSubBuffer.  This returns 0 if memobj is not a subbuffer object. MemD3D10ResourceKhrID3D10Resource * The property being queried (if the cl_khr_d3d10_sharing extension is enabled). If memobj was created using clCreateFromD3D10BufferKHR, clCreateFromD3D10Texture2DKHR, or clCreateFromD3D10Texture3DKHR, returns the resource argument specified when memobj was created. MemDx9Media adapterTypeKhrcl_dx9_media_- adapter_type_khr Returns the cl_dx9_media_adapter_type_khr argument value specified when memobj is created using clCreateFromDX9MediaSurfaceKHR (If the cl_khr_dx9_media_sharing extension is supported)MemDx9Media surfaceInfoKhrcl_dx9_- surface_info_khr Returns the cl_dx9_surface_info_khr argument value specified when memobj is created using clCreateFromDX9MediaSurfaceKHR (If the cl_khr_dx9_media_sharing extension is supported) MemD3D11ResourceKhrID3D11Resource *If the cl_khr_d3d11_sharing extension is supported, If memobj was created using clCreateFromD3D11BufferKHR, clCreateFromD3D11Texture2DKHR, or clCreateFromD3D11Texture3DKHR, returns the resource argument specified when memobj was created.
        /// </param>
        /// <param name="param_value_size"> 
        /// Used to specify the size in bytes of memory pointed to by param_value. This size must be ≥ size of return type as described in the table above.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data being queried by param_value. If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetMemObjectInfo")]
        [CLSCompliant(false)]
        public static ErrorCode GetMemObjectInfo<T3>(ComputeMemory memobj, OpenTK.Compute.CL12.MemInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] ref T3 param_value, [OutAttribute] out IntPtr param_value_size_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Get information that is common to all memory objects (buffer and image objects).
        /// </summary>
        /// <param name="memobj"> 
        /// Specifies the memory object being queried.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the information to query. The list of supported param_name types and the information returned in param_value by clGetMemObjectInfo is described in the table below. cl_mem_infoReturn TypeInfo. returned in param_valueMemTypecl_mem_object_type Returns one of the following values: MemObjectBuffer if memobj is created with clCreateBuffer or clCreateSubBuffer.  cl_image_desc.image_type argument value if memobj is created with clCreateImage. MemFlagscl_mem_flags Returns the flags argument value specified when memobj is created with clCreateBuffer, clCreateSubBuffer, or clCreateImage. If memobj is a sub-buffer the memory access qualifiers inherited from parent buffer is also returned MemSizesize_t Return actual size of the data store associated with memobj in bytes. MemHostPtrvoid * If memobj is created with clCreateBuffer or clCreateImage and MemUseHostPtr is specified in mem_flags, return the host_ptr argument value specified when memobj is created. Otherwise a NULL value is returned.  If memobj is created with clCreateSubBuffer, return the host_ptr + origin value specified when memobj is created. host_ptr is the argument value specified to clCreateBuffer and MemUseHostPtr is specified in mem_flags for memory object from which memobj is created. Otherwise a NULL value is returned. MemMapCountcl_uint Map count. The map count returned should be considered immediately stale. It is unsuitable for general use in applications. This feature is provided for debugging. MemReferenceCountcl_uint Return memobj reference count. The reference count returned should be considered immediately stale. It is unsuitable for general use in applications. This feature is provided for identifying memory leaks. MemContextcl_context Return context specified when memory object is created. If memobj is created using clCreateSubBuffer, the context associated with the memory object specified as the buffer argument to clCreateSubBuffer is returned. MemAssociated memobjectcl_mem Return memory object from which memobj is created.  This returns the memory object specified as buffer argument to clCreateSubBuffer.  Otherwise a NULL value is returned. MemOffsetsize_t Return offset if memobj is a sub-buffer object created using clCreateSubBuffer.  This returns 0 if memobj is not a subbuffer object. MemD3D10ResourceKhrID3D10Resource * The property being queried (if the cl_khr_d3d10_sharing extension is enabled). If memobj was created using clCreateFromD3D10BufferKHR, clCreateFromD3D10Texture2DKHR, or clCreateFromD3D10Texture3DKHR, returns the resource argument specified when memobj was created. MemDx9Media adapterTypeKhrcl_dx9_media_- adapter_type_khr Returns the cl_dx9_media_adapter_type_khr argument value specified when memobj is created using clCreateFromDX9MediaSurfaceKHR (If the cl_khr_dx9_media_sharing extension is supported)MemDx9Media surfaceInfoKhrcl_dx9_- surface_info_khr Returns the cl_dx9_surface_info_khr argument value specified when memobj is created using clCreateFromDX9MediaSurfaceKHR (If the cl_khr_dx9_media_sharing extension is supported) MemD3D11ResourceKhrID3D11Resource *If the cl_khr_d3d11_sharing extension is supported, If memobj was created using clCreateFromD3D11BufferKHR, clCreateFromD3D11Texture2DKHR, or clCreateFromD3D11Texture3DKHR, returns the resource argument specified when memobj was created.
        /// </param>
        /// <param name="param_value_size"> 
        /// Used to specify the size in bytes of memory pointed to by param_value. This size must be ≥ size of return type as described in the table above.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data being queried by param_value. If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetMemObjectInfo")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode GetMemObjectInfo<T3>(ComputeMemory memobj, OpenTK.Compute.CL12.MemInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] ref T3 param_value, [OutAttribute] IntPtr* param_value_size_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Obtain the list of platforms available.
        /// </summary>
        /// <param name="num_entries"> 
        /// The number of cl_platform_id entries that can be added to platforms. If platforms is not NULL, the num_entries must be greater than zero.
        /// </param>
        /// <param name="platforms"> 
        /// Returns a list of OpenCL platforms found. The cl_platform_id values returned in platforms can be used to identify a specific OpenCL platform. If platforms argument is NULL, this argument is ignored. The number of OpenCL platforms returned is the mininum of the value specified by num_entries or the number of OpenCL platforms available.
        /// </param>
        /// <param name="num_platforms"> 
        /// Returns the number of OpenCL platforms available. If num_platforms is NULL, this argument is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetPlatformIDs")]
        [CLSCompliant(false)]
        public static ErrorCode GetPlatformIDs(Int32 num_entries, ComputePlatform[] platforms, [OutAttribute] out Int32 num_platforms) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Obtain the list of platforms available.
        /// </summary>
        /// <param name="num_entries"> 
        /// The number of cl_platform_id entries that can be added to platforms. If platforms is not NULL, the num_entries must be greater than zero.
        /// </param>
        /// <param name="platforms"> 
        /// Returns a list of OpenCL platforms found. The cl_platform_id values returned in platforms can be used to identify a specific OpenCL platform. If platforms argument is NULL, this argument is ignored. The number of OpenCL platforms returned is the mininum of the value specified by num_entries or the number of OpenCL platforms available.
        /// </param>
        /// <param name="num_platforms"> 
        /// Returns the number of OpenCL platforms available. If num_platforms is NULL, this argument is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetPlatformIDs")]
        [CLSCompliant(false)]
        public static ErrorCode GetPlatformIDs(Int32 num_entries, ref ComputePlatform platforms, [OutAttribute] out Int32 num_platforms) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Obtain the list of platforms available.
        /// </summary>
        /// <param name="num_entries"> 
        /// The number of cl_platform_id entries that can be added to platforms. If platforms is not NULL, the num_entries must be greater than zero.
        /// </param>
        /// <param name="platforms"> 
        /// Returns a list of OpenCL platforms found. The cl_platform_id values returned in platforms can be used to identify a specific OpenCL platform. If platforms argument is NULL, this argument is ignored. The number of OpenCL platforms returned is the mininum of the value specified by num_entries or the number of OpenCL platforms available.
        /// </param>
        /// <param name="num_platforms"> 
        /// Returns the number of OpenCL platforms available. If num_platforms is NULL, this argument is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetPlatformIDs")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode GetPlatformIDs(Int32 num_entries, ComputePlatform* platforms, [OutAttribute] Int32* num_platforms) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Get specific information about the OpenCL platform.
        /// </summary>
        /// <param name="platform"> 
        /// The platform ID returned by clGetPlatformIDs or can be NULL. If platform is NULL, the behavior is implementation-defined.
        /// </param>
        /// <param name="param_name"> 
        /// An enumeration constant that identifies the platform information being queried. It can be one of the values specified in the table below.
        /// </param>
        /// <param name="param_value_size"> 
        /// Specifies the size in bytes of memory pointed to by param_value. This size in bytes must be ≥ size of return type specified in the table below.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory location where appropriate values for a given param_value will be returned. Possible param_value values returned are listed in the table below. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data being queried by param_value. If param_value_size_ret is NULL, it is ignored
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetPlatformInfo")]
        [CLSCompliant(false)]
        public static ErrorCode GetPlatformInfo(ComputePlatform platform, OpenTK.Compute.CL12.PlatformInfo param_name, IntPtr param_value_size, IntPtr param_value, [OutAttribute] IntPtr[] param_value_size_ret) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Get specific information about the OpenCL platform.
        /// </summary>
        /// <param name="platform"> 
        /// The platform ID returned by clGetPlatformIDs or can be NULL. If platform is NULL, the behavior is implementation-defined.
        /// </param>
        /// <param name="param_name"> 
        /// An enumeration constant that identifies the platform information being queried. It can be one of the values specified in the table below.
        /// </param>
        /// <param name="param_value_size"> 
        /// Specifies the size in bytes of memory pointed to by param_value. This size in bytes must be ≥ size of return type specified in the table below.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory location where appropriate values for a given param_value will be returned. Possible param_value values returned are listed in the table below. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data being queried by param_value. If param_value_size_ret is NULL, it is ignored
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetPlatformInfo")]
        [CLSCompliant(false)]
        public static ErrorCode GetPlatformInfo(ComputePlatform platform, OpenTK.Compute.CL12.PlatformInfo param_name, IntPtr param_value_size, IntPtr param_value, [OutAttribute] out IntPtr param_value_size_ret) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Get specific information about the OpenCL platform.
        /// </summary>
        /// <param name="platform"> 
        /// The platform ID returned by clGetPlatformIDs or can be NULL. If platform is NULL, the behavior is implementation-defined.
        /// </param>
        /// <param name="param_name"> 
        /// An enumeration constant that identifies the platform information being queried. It can be one of the values specified in the table below.
        /// </param>
        /// <param name="param_value_size"> 
        /// Specifies the size in bytes of memory pointed to by param_value. This size in bytes must be ≥ size of return type specified in the table below.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory location where appropriate values for a given param_value will be returned. Possible param_value values returned are listed in the table below. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data being queried by param_value. If param_value_size_ret is NULL, it is ignored
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetPlatformInfo")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode GetPlatformInfo(ComputePlatform platform, OpenTK.Compute.CL12.PlatformInfo param_name, IntPtr param_value_size, IntPtr param_value, [OutAttribute] IntPtr* param_value_size_ret) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Get specific information about the OpenCL platform.
        /// </summary>
        /// <param name="platform"> 
        /// The platform ID returned by clGetPlatformIDs or can be NULL. If platform is NULL, the behavior is implementation-defined.
        /// </param>
        /// <param name="param_name"> 
        /// An enumeration constant that identifies the platform information being queried. It can be one of the values specified in the table below.
        /// </param>
        /// <param name="param_value_size"> 
        /// Specifies the size in bytes of memory pointed to by param_value. This size in bytes must be ≥ size of return type specified in the table below.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory location where appropriate values for a given param_value will be returned. Possible param_value values returned are listed in the table below. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data being queried by param_value. If param_value_size_ret is NULL, it is ignored
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetPlatformInfo")]
        [CLSCompliant(false)]
        public static ErrorCode GetPlatformInfo<T3>(ComputePlatform platform, OpenTK.Compute.CL12.PlatformInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] T3[] param_value, [OutAttribute] IntPtr[] param_value_size_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Get specific information about the OpenCL platform.
        /// </summary>
        /// <param name="platform"> 
        /// The platform ID returned by clGetPlatformIDs or can be NULL. If platform is NULL, the behavior is implementation-defined.
        /// </param>
        /// <param name="param_name"> 
        /// An enumeration constant that identifies the platform information being queried. It can be one of the values specified in the table below.
        /// </param>
        /// <param name="param_value_size"> 
        /// Specifies the size in bytes of memory pointed to by param_value. This size in bytes must be ≥ size of return type specified in the table below.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory location where appropriate values for a given param_value will be returned. Possible param_value values returned are listed in the table below. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data being queried by param_value. If param_value_size_ret is NULL, it is ignored
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetPlatformInfo")]
        [CLSCompliant(false)]
        public static ErrorCode GetPlatformInfo<T3>(ComputePlatform platform, OpenTK.Compute.CL12.PlatformInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] T3[] param_value, [OutAttribute] out IntPtr param_value_size_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Get specific information about the OpenCL platform.
        /// </summary>
        /// <param name="platform"> 
        /// The platform ID returned by clGetPlatformIDs or can be NULL. If platform is NULL, the behavior is implementation-defined.
        /// </param>
        /// <param name="param_name"> 
        /// An enumeration constant that identifies the platform information being queried. It can be one of the values specified in the table below.
        /// </param>
        /// <param name="param_value_size"> 
        /// Specifies the size in bytes of memory pointed to by param_value. This size in bytes must be ≥ size of return type specified in the table below.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory location where appropriate values for a given param_value will be returned. Possible param_value values returned are listed in the table below. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data being queried by param_value. If param_value_size_ret is NULL, it is ignored
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetPlatformInfo")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode GetPlatformInfo<T3>(ComputePlatform platform, OpenTK.Compute.CL12.PlatformInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] T3[] param_value, [OutAttribute] IntPtr* param_value_size_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Get specific information about the OpenCL platform.
        /// </summary>
        /// <param name="platform"> 
        /// The platform ID returned by clGetPlatformIDs or can be NULL. If platform is NULL, the behavior is implementation-defined.
        /// </param>
        /// <param name="param_name"> 
        /// An enumeration constant that identifies the platform information being queried. It can be one of the values specified in the table below.
        /// </param>
        /// <param name="param_value_size"> 
        /// Specifies the size in bytes of memory pointed to by param_value. This size in bytes must be ≥ size of return type specified in the table below.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory location where appropriate values for a given param_value will be returned. Possible param_value values returned are listed in the table below. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data being queried by param_value. If param_value_size_ret is NULL, it is ignored
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetPlatformInfo")]
        [CLSCompliant(false)]
        public static ErrorCode GetPlatformInfo<T3>(ComputePlatform platform, OpenTK.Compute.CL12.PlatformInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] T3[,] param_value, [OutAttribute] IntPtr[] param_value_size_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Get specific information about the OpenCL platform.
        /// </summary>
        /// <param name="platform"> 
        /// The platform ID returned by clGetPlatformIDs or can be NULL. If platform is NULL, the behavior is implementation-defined.
        /// </param>
        /// <param name="param_name"> 
        /// An enumeration constant that identifies the platform information being queried. It can be one of the values specified in the table below.
        /// </param>
        /// <param name="param_value_size"> 
        /// Specifies the size in bytes of memory pointed to by param_value. This size in bytes must be ≥ size of return type specified in the table below.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory location where appropriate values for a given param_value will be returned. Possible param_value values returned are listed in the table below. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data being queried by param_value. If param_value_size_ret is NULL, it is ignored
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetPlatformInfo")]
        [CLSCompliant(false)]
        public static ErrorCode GetPlatformInfo<T3>(ComputePlatform platform, OpenTK.Compute.CL12.PlatformInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] T3[,] param_value, [OutAttribute] out IntPtr param_value_size_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Get specific information about the OpenCL platform.
        /// </summary>
        /// <param name="platform"> 
        /// The platform ID returned by clGetPlatformIDs or can be NULL. If platform is NULL, the behavior is implementation-defined.
        /// </param>
        /// <param name="param_name"> 
        /// An enumeration constant that identifies the platform information being queried. It can be one of the values specified in the table below.
        /// </param>
        /// <param name="param_value_size"> 
        /// Specifies the size in bytes of memory pointed to by param_value. This size in bytes must be ≥ size of return type specified in the table below.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory location where appropriate values for a given param_value will be returned. Possible param_value values returned are listed in the table below. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data being queried by param_value. If param_value_size_ret is NULL, it is ignored
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetPlatformInfo")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode GetPlatformInfo<T3>(ComputePlatform platform, OpenTK.Compute.CL12.PlatformInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] T3[,] param_value, [OutAttribute] IntPtr* param_value_size_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Get specific information about the OpenCL platform.
        /// </summary>
        /// <param name="platform"> 
        /// The platform ID returned by clGetPlatformIDs or can be NULL. If platform is NULL, the behavior is implementation-defined.
        /// </param>
        /// <param name="param_name"> 
        /// An enumeration constant that identifies the platform information being queried. It can be one of the values specified in the table below.
        /// </param>
        /// <param name="param_value_size"> 
        /// Specifies the size in bytes of memory pointed to by param_value. This size in bytes must be ≥ size of return type specified in the table below.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory location where appropriate values for a given param_value will be returned. Possible param_value values returned are listed in the table below. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data being queried by param_value. If param_value_size_ret is NULL, it is ignored
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetPlatformInfo")]
        [CLSCompliant(false)]
        public static ErrorCode GetPlatformInfo<T3>(ComputePlatform platform, OpenTK.Compute.CL12.PlatformInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] T3[,,] param_value, [OutAttribute] IntPtr[] param_value_size_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Get specific information about the OpenCL platform.
        /// </summary>
        /// <param name="platform"> 
        /// The platform ID returned by clGetPlatformIDs or can be NULL. If platform is NULL, the behavior is implementation-defined.
        /// </param>
        /// <param name="param_name"> 
        /// An enumeration constant that identifies the platform information being queried. It can be one of the values specified in the table below.
        /// </param>
        /// <param name="param_value_size"> 
        /// Specifies the size in bytes of memory pointed to by param_value. This size in bytes must be ≥ size of return type specified in the table below.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory location where appropriate values for a given param_value will be returned. Possible param_value values returned are listed in the table below. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data being queried by param_value. If param_value_size_ret is NULL, it is ignored
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetPlatformInfo")]
        [CLSCompliant(false)]
        public static ErrorCode GetPlatformInfo<T3>(ComputePlatform platform, OpenTK.Compute.CL12.PlatformInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] T3[,,] param_value, [OutAttribute] out IntPtr param_value_size_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Get specific information about the OpenCL platform.
        /// </summary>
        /// <param name="platform"> 
        /// The platform ID returned by clGetPlatformIDs or can be NULL. If platform is NULL, the behavior is implementation-defined.
        /// </param>
        /// <param name="param_name"> 
        /// An enumeration constant that identifies the platform information being queried. It can be one of the values specified in the table below.
        /// </param>
        /// <param name="param_value_size"> 
        /// Specifies the size in bytes of memory pointed to by param_value. This size in bytes must be ≥ size of return type specified in the table below.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory location where appropriate values for a given param_value will be returned. Possible param_value values returned are listed in the table below. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data being queried by param_value. If param_value_size_ret is NULL, it is ignored
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetPlatformInfo")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode GetPlatformInfo<T3>(ComputePlatform platform, OpenTK.Compute.CL12.PlatformInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] T3[,,] param_value, [OutAttribute] IntPtr* param_value_size_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Get specific information about the OpenCL platform.
        /// </summary>
        /// <param name="platform"> 
        /// The platform ID returned by clGetPlatformIDs or can be NULL. If platform is NULL, the behavior is implementation-defined.
        /// </param>
        /// <param name="param_name"> 
        /// An enumeration constant that identifies the platform information being queried. It can be one of the values specified in the table below.
        /// </param>
        /// <param name="param_value_size"> 
        /// Specifies the size in bytes of memory pointed to by param_value. This size in bytes must be ≥ size of return type specified in the table below.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory location where appropriate values for a given param_value will be returned. Possible param_value values returned are listed in the table below. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data being queried by param_value. If param_value_size_ret is NULL, it is ignored
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetPlatformInfo")]
        [CLSCompliant(false)]
        public static ErrorCode GetPlatformInfo<T3>(ComputePlatform platform, OpenTK.Compute.CL12.PlatformInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] ref T3 param_value, [OutAttribute] IntPtr[] param_value_size_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Get specific information about the OpenCL platform.
        /// </summary>
        /// <param name="platform"> 
        /// The platform ID returned by clGetPlatformIDs or can be NULL. If platform is NULL, the behavior is implementation-defined.
        /// </param>
        /// <param name="param_name"> 
        /// An enumeration constant that identifies the platform information being queried. It can be one of the values specified in the table below.
        /// </param>
        /// <param name="param_value_size"> 
        /// Specifies the size in bytes of memory pointed to by param_value. This size in bytes must be ≥ size of return type specified in the table below.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory location where appropriate values for a given param_value will be returned. Possible param_value values returned are listed in the table below. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data being queried by param_value. If param_value_size_ret is NULL, it is ignored
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetPlatformInfo")]
        [CLSCompliant(false)]
        public static ErrorCode GetPlatformInfo<T3>(ComputePlatform platform, OpenTK.Compute.CL12.PlatformInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] ref T3 param_value, [OutAttribute] out IntPtr param_value_size_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Get specific information about the OpenCL platform.
        /// </summary>
        /// <param name="platform"> 
        /// The platform ID returned by clGetPlatformIDs or can be NULL. If platform is NULL, the behavior is implementation-defined.
        /// </param>
        /// <param name="param_name"> 
        /// An enumeration constant that identifies the platform information being queried. It can be one of the values specified in the table below.
        /// </param>
        /// <param name="param_value_size"> 
        /// Specifies the size in bytes of memory pointed to by param_value. This size in bytes must be ≥ size of return type specified in the table below.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory location where appropriate values for a given param_value will be returned. Possible param_value values returned are listed in the table below. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data being queried by param_value. If param_value_size_ret is NULL, it is ignored
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetPlatformInfo")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode GetPlatformInfo<T3>(ComputePlatform platform, OpenTK.Compute.CL12.PlatformInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] ref T3 param_value, [OutAttribute] IntPtr* param_value_size_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Returns build information for each device in the program object.
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object being queried.
        /// </param>
        /// <param name="device"> 
        /// Specifies the device for which build information is being queried. device must be a valid device associated with program.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the information to query. The list of supported param_name types and the information returned in param_value by clGetProgramBuildInfo is described in the table below. cl_program_buid_infoReturn Type and Info. returned in param_valueProgramBuildStatus Return type: cl_build_status  Returns the build, compile or link status, whichever was performed last on program for device.  This can be one of the following: BuildNone. The build status returned if no clBuildProgram, clCompileProgram or clLinkProgram has been performed on the specified program object for device. BuildError. The build status returned if clBuildProgram, clCompileProgram or clLinkProgram whichever was performed last on the specified program object for device generated an error. BuildSuccess. The build status returned if clBuildProgram, clCompileProgram or clLinkProgram whichever was performed last on the specified program object for device was successful. BuildInProgress. The build status returned if clBuildProgram, clCompileProgram or clLinkProgram whichever was performed last on the specified program object for device has not finished. ProgramBuildOptions Return type: char[]  Return the build, compile or link options specified by the options argument in clBuildProgram, clCompileProgram or clLinkProgram, whichever was performed last on program for device.  If build status of program for device is CL_BUILD_NONE, an empty string is returned. ProgramBuildLog Return type: char[]  Return the build, compile or link log for clBuildProgram, clCompileProgram or clLinkProgram whichever was performed last on program for device.  If build status of program for device is BuildNone, an empty string is returned. ProgramBinaryType Return type: cl_program_binary_type  Return the program binary type for device. This can be one of the following values: ProgramBinaryTypeNone. There is no binary associated with device. ProgramBinaryTypeCompiledObject. A compiled binary is associated with device. This is the case if program was created using clCreateProgramWithSource and compiled using clCompileProgram or a compiled binary is loaded using clCreateProgramWithBinary. ProgramBinaryTypeLibrary. A library binary is associated with device. This is the case if program was created by clLinkProgram which is called with the –createlibrary link option or if a library binary is loaded using clCreateProgramWithBinary. ProgramBinaryTypeExecutable. An executable binary is associated with device. This is the case if program was created by clLinkProgram without the –createlibrary link option or program was created by clBuildProgram or an executable binary is loaded using clCreateProgramWithBinary.
        /// </param>
        /// <param name="param_value_size"> 
        /// Specifies the size in bytes of memory pointed to by param_value. This size must be ≥ size of return type as described in the table above.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data copied to param_value. If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetProgramBuildInfo")]
        [CLSCompliant(false)]
        public static ErrorCode GetProgramBuildInfo(ComputeProgram program, ComputeDevice device, OpenTK.Compute.CL12.ProgramBuildInfo param_name, IntPtr param_value_size, IntPtr param_value, [OutAttribute] IntPtr[] param_value_size_ret) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Returns build information for each device in the program object.
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object being queried.
        /// </param>
        /// <param name="device"> 
        /// Specifies the device for which build information is being queried. device must be a valid device associated with program.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the information to query. The list of supported param_name types and the information returned in param_value by clGetProgramBuildInfo is described in the table below. cl_program_buid_infoReturn Type and Info. returned in param_valueProgramBuildStatus Return type: cl_build_status  Returns the build, compile or link status, whichever was performed last on program for device.  This can be one of the following: BuildNone. The build status returned if no clBuildProgram, clCompileProgram or clLinkProgram has been performed on the specified program object for device. BuildError. The build status returned if clBuildProgram, clCompileProgram or clLinkProgram whichever was performed last on the specified program object for device generated an error. BuildSuccess. The build status returned if clBuildProgram, clCompileProgram or clLinkProgram whichever was performed last on the specified program object for device was successful. BuildInProgress. The build status returned if clBuildProgram, clCompileProgram or clLinkProgram whichever was performed last on the specified program object for device has not finished. ProgramBuildOptions Return type: char[]  Return the build, compile or link options specified by the options argument in clBuildProgram, clCompileProgram or clLinkProgram, whichever was performed last on program for device.  If build status of program for device is CL_BUILD_NONE, an empty string is returned. ProgramBuildLog Return type: char[]  Return the build, compile or link log for clBuildProgram, clCompileProgram or clLinkProgram whichever was performed last on program for device.  If build status of program for device is BuildNone, an empty string is returned. ProgramBinaryType Return type: cl_program_binary_type  Return the program binary type for device. This can be one of the following values: ProgramBinaryTypeNone. There is no binary associated with device. ProgramBinaryTypeCompiledObject. A compiled binary is associated with device. This is the case if program was created using clCreateProgramWithSource and compiled using clCompileProgram or a compiled binary is loaded using clCreateProgramWithBinary. ProgramBinaryTypeLibrary. A library binary is associated with device. This is the case if program was created by clLinkProgram which is called with the –createlibrary link option or if a library binary is loaded using clCreateProgramWithBinary. ProgramBinaryTypeExecutable. An executable binary is associated with device. This is the case if program was created by clLinkProgram without the –createlibrary link option or program was created by clBuildProgram or an executable binary is loaded using clCreateProgramWithBinary.
        /// </param>
        /// <param name="param_value_size"> 
        /// Specifies the size in bytes of memory pointed to by param_value. This size must be ≥ size of return type as described in the table above.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data copied to param_value. If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetProgramBuildInfo")]
        [CLSCompliant(false)]
        public static ErrorCode GetProgramBuildInfo(ComputeProgram program, ComputeDevice device, OpenTK.Compute.CL12.ProgramBuildInfo param_name, IntPtr param_value_size, IntPtr param_value, [OutAttribute] out IntPtr param_value_size_ret) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Returns build information for each device in the program object.
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object being queried.
        /// </param>
        /// <param name="device"> 
        /// Specifies the device for which build information is being queried. device must be a valid device associated with program.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the information to query. The list of supported param_name types and the information returned in param_value by clGetProgramBuildInfo is described in the table below. cl_program_buid_infoReturn Type and Info. returned in param_valueProgramBuildStatus Return type: cl_build_status  Returns the build, compile or link status, whichever was performed last on program for device.  This can be one of the following: BuildNone. The build status returned if no clBuildProgram, clCompileProgram or clLinkProgram has been performed on the specified program object for device. BuildError. The build status returned if clBuildProgram, clCompileProgram or clLinkProgram whichever was performed last on the specified program object for device generated an error. BuildSuccess. The build status returned if clBuildProgram, clCompileProgram or clLinkProgram whichever was performed last on the specified program object for device was successful. BuildInProgress. The build status returned if clBuildProgram, clCompileProgram or clLinkProgram whichever was performed last on the specified program object for device has not finished. ProgramBuildOptions Return type: char[]  Return the build, compile or link options specified by the options argument in clBuildProgram, clCompileProgram or clLinkProgram, whichever was performed last on program for device.  If build status of program for device is CL_BUILD_NONE, an empty string is returned. ProgramBuildLog Return type: char[]  Return the build, compile or link log for clBuildProgram, clCompileProgram or clLinkProgram whichever was performed last on program for device.  If build status of program for device is BuildNone, an empty string is returned. ProgramBinaryType Return type: cl_program_binary_type  Return the program binary type for device. This can be one of the following values: ProgramBinaryTypeNone. There is no binary associated with device. ProgramBinaryTypeCompiledObject. A compiled binary is associated with device. This is the case if program was created using clCreateProgramWithSource and compiled using clCompileProgram or a compiled binary is loaded using clCreateProgramWithBinary. ProgramBinaryTypeLibrary. A library binary is associated with device. This is the case if program was created by clLinkProgram which is called with the –createlibrary link option or if a library binary is loaded using clCreateProgramWithBinary. ProgramBinaryTypeExecutable. An executable binary is associated with device. This is the case if program was created by clLinkProgram without the –createlibrary link option or program was created by clBuildProgram or an executable binary is loaded using clCreateProgramWithBinary.
        /// </param>
        /// <param name="param_value_size"> 
        /// Specifies the size in bytes of memory pointed to by param_value. This size must be ≥ size of return type as described in the table above.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data copied to param_value. If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetProgramBuildInfo")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode GetProgramBuildInfo(ComputeProgram program, ComputeDevice device, OpenTK.Compute.CL12.ProgramBuildInfo param_name, IntPtr param_value_size, IntPtr param_value, [OutAttribute] IntPtr* param_value_size_ret) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Returns build information for each device in the program object.
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object being queried.
        /// </param>
        /// <param name="device"> 
        /// Specifies the device for which build information is being queried. device must be a valid device associated with program.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the information to query. The list of supported param_name types and the information returned in param_value by clGetProgramBuildInfo is described in the table below. cl_program_buid_infoReturn Type and Info. returned in param_valueProgramBuildStatus Return type: cl_build_status  Returns the build, compile or link status, whichever was performed last on program for device.  This can be one of the following: BuildNone. The build status returned if no clBuildProgram, clCompileProgram or clLinkProgram has been performed on the specified program object for device. BuildError. The build status returned if clBuildProgram, clCompileProgram or clLinkProgram whichever was performed last on the specified program object for device generated an error. BuildSuccess. The build status returned if clBuildProgram, clCompileProgram or clLinkProgram whichever was performed last on the specified program object for device was successful. BuildInProgress. The build status returned if clBuildProgram, clCompileProgram or clLinkProgram whichever was performed last on the specified program object for device has not finished. ProgramBuildOptions Return type: char[]  Return the build, compile or link options specified by the options argument in clBuildProgram, clCompileProgram or clLinkProgram, whichever was performed last on program for device.  If build status of program for device is CL_BUILD_NONE, an empty string is returned. ProgramBuildLog Return type: char[]  Return the build, compile or link log for clBuildProgram, clCompileProgram or clLinkProgram whichever was performed last on program for device.  If build status of program for device is BuildNone, an empty string is returned. ProgramBinaryType Return type: cl_program_binary_type  Return the program binary type for device. This can be one of the following values: ProgramBinaryTypeNone. There is no binary associated with device. ProgramBinaryTypeCompiledObject. A compiled binary is associated with device. This is the case if program was created using clCreateProgramWithSource and compiled using clCompileProgram or a compiled binary is loaded using clCreateProgramWithBinary. ProgramBinaryTypeLibrary. A library binary is associated with device. This is the case if program was created by clLinkProgram which is called with the –createlibrary link option or if a library binary is loaded using clCreateProgramWithBinary. ProgramBinaryTypeExecutable. An executable binary is associated with device. This is the case if program was created by clLinkProgram without the –createlibrary link option or program was created by clBuildProgram or an executable binary is loaded using clCreateProgramWithBinary.
        /// </param>
        /// <param name="param_value_size"> 
        /// Specifies the size in bytes of memory pointed to by param_value. This size must be ≥ size of return type as described in the table above.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data copied to param_value. If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetProgramBuildInfo")]
        [CLSCompliant(false)]
        public static ErrorCode GetProgramBuildInfo<T4>(ComputeProgram program, ComputeDevice device, OpenTK.Compute.CL12.ProgramBuildInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] T4[] param_value, [OutAttribute] IntPtr[] param_value_size_ret)
            where T4 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Returns build information for each device in the program object.
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object being queried.
        /// </param>
        /// <param name="device"> 
        /// Specifies the device for which build information is being queried. device must be a valid device associated with program.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the information to query. The list of supported param_name types and the information returned in param_value by clGetProgramBuildInfo is described in the table below. cl_program_buid_infoReturn Type and Info. returned in param_valueProgramBuildStatus Return type: cl_build_status  Returns the build, compile or link status, whichever was performed last on program for device.  This can be one of the following: BuildNone. The build status returned if no clBuildProgram, clCompileProgram or clLinkProgram has been performed on the specified program object for device. BuildError. The build status returned if clBuildProgram, clCompileProgram or clLinkProgram whichever was performed last on the specified program object for device generated an error. BuildSuccess. The build status returned if clBuildProgram, clCompileProgram or clLinkProgram whichever was performed last on the specified program object for device was successful. BuildInProgress. The build status returned if clBuildProgram, clCompileProgram or clLinkProgram whichever was performed last on the specified program object for device has not finished. ProgramBuildOptions Return type: char[]  Return the build, compile or link options specified by the options argument in clBuildProgram, clCompileProgram or clLinkProgram, whichever was performed last on program for device.  If build status of program for device is CL_BUILD_NONE, an empty string is returned. ProgramBuildLog Return type: char[]  Return the build, compile or link log for clBuildProgram, clCompileProgram or clLinkProgram whichever was performed last on program for device.  If build status of program for device is BuildNone, an empty string is returned. ProgramBinaryType Return type: cl_program_binary_type  Return the program binary type for device. This can be one of the following values: ProgramBinaryTypeNone. There is no binary associated with device. ProgramBinaryTypeCompiledObject. A compiled binary is associated with device. This is the case if program was created using clCreateProgramWithSource and compiled using clCompileProgram or a compiled binary is loaded using clCreateProgramWithBinary. ProgramBinaryTypeLibrary. A library binary is associated with device. This is the case if program was created by clLinkProgram which is called with the –createlibrary link option or if a library binary is loaded using clCreateProgramWithBinary. ProgramBinaryTypeExecutable. An executable binary is associated with device. This is the case if program was created by clLinkProgram without the –createlibrary link option or program was created by clBuildProgram or an executable binary is loaded using clCreateProgramWithBinary.
        /// </param>
        /// <param name="param_value_size"> 
        /// Specifies the size in bytes of memory pointed to by param_value. This size must be ≥ size of return type as described in the table above.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data copied to param_value. If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetProgramBuildInfo")]
        [CLSCompliant(false)]
        public static ErrorCode GetProgramBuildInfo<T4>(ComputeProgram program, ComputeDevice device, OpenTK.Compute.CL12.ProgramBuildInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] T4[] param_value, [OutAttribute] out IntPtr param_value_size_ret)
            where T4 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Returns build information for each device in the program object.
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object being queried.
        /// </param>
        /// <param name="device"> 
        /// Specifies the device for which build information is being queried. device must be a valid device associated with program.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the information to query. The list of supported param_name types and the information returned in param_value by clGetProgramBuildInfo is described in the table below. cl_program_buid_infoReturn Type and Info. returned in param_valueProgramBuildStatus Return type: cl_build_status  Returns the build, compile or link status, whichever was performed last on program for device.  This can be one of the following: BuildNone. The build status returned if no clBuildProgram, clCompileProgram or clLinkProgram has been performed on the specified program object for device. BuildError. The build status returned if clBuildProgram, clCompileProgram or clLinkProgram whichever was performed last on the specified program object for device generated an error. BuildSuccess. The build status returned if clBuildProgram, clCompileProgram or clLinkProgram whichever was performed last on the specified program object for device was successful. BuildInProgress. The build status returned if clBuildProgram, clCompileProgram or clLinkProgram whichever was performed last on the specified program object for device has not finished. ProgramBuildOptions Return type: char[]  Return the build, compile or link options specified by the options argument in clBuildProgram, clCompileProgram or clLinkProgram, whichever was performed last on program for device.  If build status of program for device is CL_BUILD_NONE, an empty string is returned. ProgramBuildLog Return type: char[]  Return the build, compile or link log for clBuildProgram, clCompileProgram or clLinkProgram whichever was performed last on program for device.  If build status of program for device is BuildNone, an empty string is returned. ProgramBinaryType Return type: cl_program_binary_type  Return the program binary type for device. This can be one of the following values: ProgramBinaryTypeNone. There is no binary associated with device. ProgramBinaryTypeCompiledObject. A compiled binary is associated with device. This is the case if program was created using clCreateProgramWithSource and compiled using clCompileProgram or a compiled binary is loaded using clCreateProgramWithBinary. ProgramBinaryTypeLibrary. A library binary is associated with device. This is the case if program was created by clLinkProgram which is called with the –createlibrary link option or if a library binary is loaded using clCreateProgramWithBinary. ProgramBinaryTypeExecutable. An executable binary is associated with device. This is the case if program was created by clLinkProgram without the –createlibrary link option or program was created by clBuildProgram or an executable binary is loaded using clCreateProgramWithBinary.
        /// </param>
        /// <param name="param_value_size"> 
        /// Specifies the size in bytes of memory pointed to by param_value. This size must be ≥ size of return type as described in the table above.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data copied to param_value. If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetProgramBuildInfo")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode GetProgramBuildInfo<T4>(ComputeProgram program, ComputeDevice device, OpenTK.Compute.CL12.ProgramBuildInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] T4[] param_value, [OutAttribute] IntPtr* param_value_size_ret)
            where T4 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Returns build information for each device in the program object.
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object being queried.
        /// </param>
        /// <param name="device"> 
        /// Specifies the device for which build information is being queried. device must be a valid device associated with program.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the information to query. The list of supported param_name types and the information returned in param_value by clGetProgramBuildInfo is described in the table below. cl_program_buid_infoReturn Type and Info. returned in param_valueProgramBuildStatus Return type: cl_build_status  Returns the build, compile or link status, whichever was performed last on program for device.  This can be one of the following: BuildNone. The build status returned if no clBuildProgram, clCompileProgram or clLinkProgram has been performed on the specified program object for device. BuildError. The build status returned if clBuildProgram, clCompileProgram or clLinkProgram whichever was performed last on the specified program object for device generated an error. BuildSuccess. The build status returned if clBuildProgram, clCompileProgram or clLinkProgram whichever was performed last on the specified program object for device was successful. BuildInProgress. The build status returned if clBuildProgram, clCompileProgram or clLinkProgram whichever was performed last on the specified program object for device has not finished. ProgramBuildOptions Return type: char[]  Return the build, compile or link options specified by the options argument in clBuildProgram, clCompileProgram or clLinkProgram, whichever was performed last on program for device.  If build status of program for device is CL_BUILD_NONE, an empty string is returned. ProgramBuildLog Return type: char[]  Return the build, compile or link log for clBuildProgram, clCompileProgram or clLinkProgram whichever was performed last on program for device.  If build status of program for device is BuildNone, an empty string is returned. ProgramBinaryType Return type: cl_program_binary_type  Return the program binary type for device. This can be one of the following values: ProgramBinaryTypeNone. There is no binary associated with device. ProgramBinaryTypeCompiledObject. A compiled binary is associated with device. This is the case if program was created using clCreateProgramWithSource and compiled using clCompileProgram or a compiled binary is loaded using clCreateProgramWithBinary. ProgramBinaryTypeLibrary. A library binary is associated with device. This is the case if program was created by clLinkProgram which is called with the –createlibrary link option or if a library binary is loaded using clCreateProgramWithBinary. ProgramBinaryTypeExecutable. An executable binary is associated with device. This is the case if program was created by clLinkProgram without the –createlibrary link option or program was created by clBuildProgram or an executable binary is loaded using clCreateProgramWithBinary.
        /// </param>
        /// <param name="param_value_size"> 
        /// Specifies the size in bytes of memory pointed to by param_value. This size must be ≥ size of return type as described in the table above.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data copied to param_value. If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetProgramBuildInfo")]
        [CLSCompliant(false)]
        public static ErrorCode GetProgramBuildInfo<T4>(ComputeProgram program, ComputeDevice device, OpenTK.Compute.CL12.ProgramBuildInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] T4[,] param_value, [OutAttribute] IntPtr[] param_value_size_ret)
            where T4 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Returns build information for each device in the program object.
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object being queried.
        /// </param>
        /// <param name="device"> 
        /// Specifies the device for which build information is being queried. device must be a valid device associated with program.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the information to query. The list of supported param_name types and the information returned in param_value by clGetProgramBuildInfo is described in the table below. cl_program_buid_infoReturn Type and Info. returned in param_valueProgramBuildStatus Return type: cl_build_status  Returns the build, compile or link status, whichever was performed last on program for device.  This can be one of the following: BuildNone. The build status returned if no clBuildProgram, clCompileProgram or clLinkProgram has been performed on the specified program object for device. BuildError. The build status returned if clBuildProgram, clCompileProgram or clLinkProgram whichever was performed last on the specified program object for device generated an error. BuildSuccess. The build status returned if clBuildProgram, clCompileProgram or clLinkProgram whichever was performed last on the specified program object for device was successful. BuildInProgress. The build status returned if clBuildProgram, clCompileProgram or clLinkProgram whichever was performed last on the specified program object for device has not finished. ProgramBuildOptions Return type: char[]  Return the build, compile or link options specified by the options argument in clBuildProgram, clCompileProgram or clLinkProgram, whichever was performed last on program for device.  If build status of program for device is CL_BUILD_NONE, an empty string is returned. ProgramBuildLog Return type: char[]  Return the build, compile or link log for clBuildProgram, clCompileProgram or clLinkProgram whichever was performed last on program for device.  If build status of program for device is BuildNone, an empty string is returned. ProgramBinaryType Return type: cl_program_binary_type  Return the program binary type for device. This can be one of the following values: ProgramBinaryTypeNone. There is no binary associated with device. ProgramBinaryTypeCompiledObject. A compiled binary is associated with device. This is the case if program was created using clCreateProgramWithSource and compiled using clCompileProgram or a compiled binary is loaded using clCreateProgramWithBinary. ProgramBinaryTypeLibrary. A library binary is associated with device. This is the case if program was created by clLinkProgram which is called with the –createlibrary link option or if a library binary is loaded using clCreateProgramWithBinary. ProgramBinaryTypeExecutable. An executable binary is associated with device. This is the case if program was created by clLinkProgram without the –createlibrary link option or program was created by clBuildProgram or an executable binary is loaded using clCreateProgramWithBinary.
        /// </param>
        /// <param name="param_value_size"> 
        /// Specifies the size in bytes of memory pointed to by param_value. This size must be ≥ size of return type as described in the table above.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data copied to param_value. If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetProgramBuildInfo")]
        [CLSCompliant(false)]
        public static ErrorCode GetProgramBuildInfo<T4>(ComputeProgram program, ComputeDevice device, OpenTK.Compute.CL12.ProgramBuildInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] T4[,] param_value, [OutAttribute] out IntPtr param_value_size_ret)
            where T4 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Returns build information for each device in the program object.
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object being queried.
        /// </param>
        /// <param name="device"> 
        /// Specifies the device for which build information is being queried. device must be a valid device associated with program.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the information to query. The list of supported param_name types and the information returned in param_value by clGetProgramBuildInfo is described in the table below. cl_program_buid_infoReturn Type and Info. returned in param_valueProgramBuildStatus Return type: cl_build_status  Returns the build, compile or link status, whichever was performed last on program for device.  This can be one of the following: BuildNone. The build status returned if no clBuildProgram, clCompileProgram or clLinkProgram has been performed on the specified program object for device. BuildError. The build status returned if clBuildProgram, clCompileProgram or clLinkProgram whichever was performed last on the specified program object for device generated an error. BuildSuccess. The build status returned if clBuildProgram, clCompileProgram or clLinkProgram whichever was performed last on the specified program object for device was successful. BuildInProgress. The build status returned if clBuildProgram, clCompileProgram or clLinkProgram whichever was performed last on the specified program object for device has not finished. ProgramBuildOptions Return type: char[]  Return the build, compile or link options specified by the options argument in clBuildProgram, clCompileProgram or clLinkProgram, whichever was performed last on program for device.  If build status of program for device is CL_BUILD_NONE, an empty string is returned. ProgramBuildLog Return type: char[]  Return the build, compile or link log for clBuildProgram, clCompileProgram or clLinkProgram whichever was performed last on program for device.  If build status of program for device is BuildNone, an empty string is returned. ProgramBinaryType Return type: cl_program_binary_type  Return the program binary type for device. This can be one of the following values: ProgramBinaryTypeNone. There is no binary associated with device. ProgramBinaryTypeCompiledObject. A compiled binary is associated with device. This is the case if program was created using clCreateProgramWithSource and compiled using clCompileProgram or a compiled binary is loaded using clCreateProgramWithBinary. ProgramBinaryTypeLibrary. A library binary is associated with device. This is the case if program was created by clLinkProgram which is called with the –createlibrary link option or if a library binary is loaded using clCreateProgramWithBinary. ProgramBinaryTypeExecutable. An executable binary is associated with device. This is the case if program was created by clLinkProgram without the –createlibrary link option or program was created by clBuildProgram or an executable binary is loaded using clCreateProgramWithBinary.
        /// </param>
        /// <param name="param_value_size"> 
        /// Specifies the size in bytes of memory pointed to by param_value. This size must be ≥ size of return type as described in the table above.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data copied to param_value. If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetProgramBuildInfo")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode GetProgramBuildInfo<T4>(ComputeProgram program, ComputeDevice device, OpenTK.Compute.CL12.ProgramBuildInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] T4[,] param_value, [OutAttribute] IntPtr* param_value_size_ret)
            where T4 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Returns build information for each device in the program object.
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object being queried.
        /// </param>
        /// <param name="device"> 
        /// Specifies the device for which build information is being queried. device must be a valid device associated with program.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the information to query. The list of supported param_name types and the information returned in param_value by clGetProgramBuildInfo is described in the table below. cl_program_buid_infoReturn Type and Info. returned in param_valueProgramBuildStatus Return type: cl_build_status  Returns the build, compile or link status, whichever was performed last on program for device.  This can be one of the following: BuildNone. The build status returned if no clBuildProgram, clCompileProgram or clLinkProgram has been performed on the specified program object for device. BuildError. The build status returned if clBuildProgram, clCompileProgram or clLinkProgram whichever was performed last on the specified program object for device generated an error. BuildSuccess. The build status returned if clBuildProgram, clCompileProgram or clLinkProgram whichever was performed last on the specified program object for device was successful. BuildInProgress. The build status returned if clBuildProgram, clCompileProgram or clLinkProgram whichever was performed last on the specified program object for device has not finished. ProgramBuildOptions Return type: char[]  Return the build, compile or link options specified by the options argument in clBuildProgram, clCompileProgram or clLinkProgram, whichever was performed last on program for device.  If build status of program for device is CL_BUILD_NONE, an empty string is returned. ProgramBuildLog Return type: char[]  Return the build, compile or link log for clBuildProgram, clCompileProgram or clLinkProgram whichever was performed last on program for device.  If build status of program for device is BuildNone, an empty string is returned. ProgramBinaryType Return type: cl_program_binary_type  Return the program binary type for device. This can be one of the following values: ProgramBinaryTypeNone. There is no binary associated with device. ProgramBinaryTypeCompiledObject. A compiled binary is associated with device. This is the case if program was created using clCreateProgramWithSource and compiled using clCompileProgram or a compiled binary is loaded using clCreateProgramWithBinary. ProgramBinaryTypeLibrary. A library binary is associated with device. This is the case if program was created by clLinkProgram which is called with the –createlibrary link option or if a library binary is loaded using clCreateProgramWithBinary. ProgramBinaryTypeExecutable. An executable binary is associated with device. This is the case if program was created by clLinkProgram without the –createlibrary link option or program was created by clBuildProgram or an executable binary is loaded using clCreateProgramWithBinary.
        /// </param>
        /// <param name="param_value_size"> 
        /// Specifies the size in bytes of memory pointed to by param_value. This size must be ≥ size of return type as described in the table above.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data copied to param_value. If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetProgramBuildInfo")]
        [CLSCompliant(false)]
        public static ErrorCode GetProgramBuildInfo<T4>(ComputeProgram program, ComputeDevice device, OpenTK.Compute.CL12.ProgramBuildInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] T4[,,] param_value, [OutAttribute] IntPtr[] param_value_size_ret)
            where T4 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Returns build information for each device in the program object.
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object being queried.
        /// </param>
        /// <param name="device"> 
        /// Specifies the device for which build information is being queried. device must be a valid device associated with program.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the information to query. The list of supported param_name types and the information returned in param_value by clGetProgramBuildInfo is described in the table below. cl_program_buid_infoReturn Type and Info. returned in param_valueProgramBuildStatus Return type: cl_build_status  Returns the build, compile or link status, whichever was performed last on program for device.  This can be one of the following: BuildNone. The build status returned if no clBuildProgram, clCompileProgram or clLinkProgram has been performed on the specified program object for device. BuildError. The build status returned if clBuildProgram, clCompileProgram or clLinkProgram whichever was performed last on the specified program object for device generated an error. BuildSuccess. The build status returned if clBuildProgram, clCompileProgram or clLinkProgram whichever was performed last on the specified program object for device was successful. BuildInProgress. The build status returned if clBuildProgram, clCompileProgram or clLinkProgram whichever was performed last on the specified program object for device has not finished. ProgramBuildOptions Return type: char[]  Return the build, compile or link options specified by the options argument in clBuildProgram, clCompileProgram or clLinkProgram, whichever was performed last on program for device.  If build status of program for device is CL_BUILD_NONE, an empty string is returned. ProgramBuildLog Return type: char[]  Return the build, compile or link log for clBuildProgram, clCompileProgram or clLinkProgram whichever was performed last on program for device.  If build status of program for device is BuildNone, an empty string is returned. ProgramBinaryType Return type: cl_program_binary_type  Return the program binary type for device. This can be one of the following values: ProgramBinaryTypeNone. There is no binary associated with device. ProgramBinaryTypeCompiledObject. A compiled binary is associated with device. This is the case if program was created using clCreateProgramWithSource and compiled using clCompileProgram or a compiled binary is loaded using clCreateProgramWithBinary. ProgramBinaryTypeLibrary. A library binary is associated with device. This is the case if program was created by clLinkProgram which is called with the –createlibrary link option or if a library binary is loaded using clCreateProgramWithBinary. ProgramBinaryTypeExecutable. An executable binary is associated with device. This is the case if program was created by clLinkProgram without the –createlibrary link option or program was created by clBuildProgram or an executable binary is loaded using clCreateProgramWithBinary.
        /// </param>
        /// <param name="param_value_size"> 
        /// Specifies the size in bytes of memory pointed to by param_value. This size must be ≥ size of return type as described in the table above.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data copied to param_value. If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetProgramBuildInfo")]
        [CLSCompliant(false)]
        public static ErrorCode GetProgramBuildInfo<T4>(ComputeProgram program, ComputeDevice device, OpenTK.Compute.CL12.ProgramBuildInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] T4[,,] param_value, [OutAttribute] out IntPtr param_value_size_ret)
            where T4 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Returns build information for each device in the program object.
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object being queried.
        /// </param>
        /// <param name="device"> 
        /// Specifies the device for which build information is being queried. device must be a valid device associated with program.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the information to query. The list of supported param_name types and the information returned in param_value by clGetProgramBuildInfo is described in the table below. cl_program_buid_infoReturn Type and Info. returned in param_valueProgramBuildStatus Return type: cl_build_status  Returns the build, compile or link status, whichever was performed last on program for device.  This can be one of the following: BuildNone. The build status returned if no clBuildProgram, clCompileProgram or clLinkProgram has been performed on the specified program object for device. BuildError. The build status returned if clBuildProgram, clCompileProgram or clLinkProgram whichever was performed last on the specified program object for device generated an error. BuildSuccess. The build status returned if clBuildProgram, clCompileProgram or clLinkProgram whichever was performed last on the specified program object for device was successful. BuildInProgress. The build status returned if clBuildProgram, clCompileProgram or clLinkProgram whichever was performed last on the specified program object for device has not finished. ProgramBuildOptions Return type: char[]  Return the build, compile or link options specified by the options argument in clBuildProgram, clCompileProgram or clLinkProgram, whichever was performed last on program for device.  If build status of program for device is CL_BUILD_NONE, an empty string is returned. ProgramBuildLog Return type: char[]  Return the build, compile or link log for clBuildProgram, clCompileProgram or clLinkProgram whichever was performed last on program for device.  If build status of program for device is BuildNone, an empty string is returned. ProgramBinaryType Return type: cl_program_binary_type  Return the program binary type for device. This can be one of the following values: ProgramBinaryTypeNone. There is no binary associated with device. ProgramBinaryTypeCompiledObject. A compiled binary is associated with device. This is the case if program was created using clCreateProgramWithSource and compiled using clCompileProgram or a compiled binary is loaded using clCreateProgramWithBinary. ProgramBinaryTypeLibrary. A library binary is associated with device. This is the case if program was created by clLinkProgram which is called with the –createlibrary link option or if a library binary is loaded using clCreateProgramWithBinary. ProgramBinaryTypeExecutable. An executable binary is associated with device. This is the case if program was created by clLinkProgram without the –createlibrary link option or program was created by clBuildProgram or an executable binary is loaded using clCreateProgramWithBinary.
        /// </param>
        /// <param name="param_value_size"> 
        /// Specifies the size in bytes of memory pointed to by param_value. This size must be ≥ size of return type as described in the table above.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data copied to param_value. If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetProgramBuildInfo")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode GetProgramBuildInfo<T4>(ComputeProgram program, ComputeDevice device, OpenTK.Compute.CL12.ProgramBuildInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] T4[,,] param_value, [OutAttribute] IntPtr* param_value_size_ret)
            where T4 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Returns build information for each device in the program object.
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object being queried.
        /// </param>
        /// <param name="device"> 
        /// Specifies the device for which build information is being queried. device must be a valid device associated with program.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the information to query. The list of supported param_name types and the information returned in param_value by clGetProgramBuildInfo is described in the table below. cl_program_buid_infoReturn Type and Info. returned in param_valueProgramBuildStatus Return type: cl_build_status  Returns the build, compile or link status, whichever was performed last on program for device.  This can be one of the following: BuildNone. The build status returned if no clBuildProgram, clCompileProgram or clLinkProgram has been performed on the specified program object for device. BuildError. The build status returned if clBuildProgram, clCompileProgram or clLinkProgram whichever was performed last on the specified program object for device generated an error. BuildSuccess. The build status returned if clBuildProgram, clCompileProgram or clLinkProgram whichever was performed last on the specified program object for device was successful. BuildInProgress. The build status returned if clBuildProgram, clCompileProgram or clLinkProgram whichever was performed last on the specified program object for device has not finished. ProgramBuildOptions Return type: char[]  Return the build, compile or link options specified by the options argument in clBuildProgram, clCompileProgram or clLinkProgram, whichever was performed last on program for device.  If build status of program for device is CL_BUILD_NONE, an empty string is returned. ProgramBuildLog Return type: char[]  Return the build, compile or link log for clBuildProgram, clCompileProgram or clLinkProgram whichever was performed last on program for device.  If build status of program for device is BuildNone, an empty string is returned. ProgramBinaryType Return type: cl_program_binary_type  Return the program binary type for device. This can be one of the following values: ProgramBinaryTypeNone. There is no binary associated with device. ProgramBinaryTypeCompiledObject. A compiled binary is associated with device. This is the case if program was created using clCreateProgramWithSource and compiled using clCompileProgram or a compiled binary is loaded using clCreateProgramWithBinary. ProgramBinaryTypeLibrary. A library binary is associated with device. This is the case if program was created by clLinkProgram which is called with the –createlibrary link option or if a library binary is loaded using clCreateProgramWithBinary. ProgramBinaryTypeExecutable. An executable binary is associated with device. This is the case if program was created by clLinkProgram without the –createlibrary link option or program was created by clBuildProgram or an executable binary is loaded using clCreateProgramWithBinary.
        /// </param>
        /// <param name="param_value_size"> 
        /// Specifies the size in bytes of memory pointed to by param_value. This size must be ≥ size of return type as described in the table above.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data copied to param_value. If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetProgramBuildInfo")]
        [CLSCompliant(false)]
        public static ErrorCode GetProgramBuildInfo<T4>(ComputeProgram program, ComputeDevice device, OpenTK.Compute.CL12.ProgramBuildInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] ref T4 param_value, [OutAttribute] IntPtr[] param_value_size_ret)
            where T4 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Returns build information for each device in the program object.
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object being queried.
        /// </param>
        /// <param name="device"> 
        /// Specifies the device for which build information is being queried. device must be a valid device associated with program.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the information to query. The list of supported param_name types and the information returned in param_value by clGetProgramBuildInfo is described in the table below. cl_program_buid_infoReturn Type and Info. returned in param_valueProgramBuildStatus Return type: cl_build_status  Returns the build, compile or link status, whichever was performed last on program for device.  This can be one of the following: BuildNone. The build status returned if no clBuildProgram, clCompileProgram or clLinkProgram has been performed on the specified program object for device. BuildError. The build status returned if clBuildProgram, clCompileProgram or clLinkProgram whichever was performed last on the specified program object for device generated an error. BuildSuccess. The build status returned if clBuildProgram, clCompileProgram or clLinkProgram whichever was performed last on the specified program object for device was successful. BuildInProgress. The build status returned if clBuildProgram, clCompileProgram or clLinkProgram whichever was performed last on the specified program object for device has not finished. ProgramBuildOptions Return type: char[]  Return the build, compile or link options specified by the options argument in clBuildProgram, clCompileProgram or clLinkProgram, whichever was performed last on program for device.  If build status of program for device is CL_BUILD_NONE, an empty string is returned. ProgramBuildLog Return type: char[]  Return the build, compile or link log for clBuildProgram, clCompileProgram or clLinkProgram whichever was performed last on program for device.  If build status of program for device is BuildNone, an empty string is returned. ProgramBinaryType Return type: cl_program_binary_type  Return the program binary type for device. This can be one of the following values: ProgramBinaryTypeNone. There is no binary associated with device. ProgramBinaryTypeCompiledObject. A compiled binary is associated with device. This is the case if program was created using clCreateProgramWithSource and compiled using clCompileProgram or a compiled binary is loaded using clCreateProgramWithBinary. ProgramBinaryTypeLibrary. A library binary is associated with device. This is the case if program was created by clLinkProgram which is called with the –createlibrary link option or if a library binary is loaded using clCreateProgramWithBinary. ProgramBinaryTypeExecutable. An executable binary is associated with device. This is the case if program was created by clLinkProgram without the –createlibrary link option or program was created by clBuildProgram or an executable binary is loaded using clCreateProgramWithBinary.
        /// </param>
        /// <param name="param_value_size"> 
        /// Specifies the size in bytes of memory pointed to by param_value. This size must be ≥ size of return type as described in the table above.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data copied to param_value. If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetProgramBuildInfo")]
        [CLSCompliant(false)]
        public static ErrorCode GetProgramBuildInfo<T4>(ComputeProgram program, ComputeDevice device, OpenTK.Compute.CL12.ProgramBuildInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] ref T4 param_value, [OutAttribute] out IntPtr param_value_size_ret)
            where T4 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Returns build information for each device in the program object.
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object being queried.
        /// </param>
        /// <param name="device"> 
        /// Specifies the device for which build information is being queried. device must be a valid device associated with program.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the information to query. The list of supported param_name types and the information returned in param_value by clGetProgramBuildInfo is described in the table below. cl_program_buid_infoReturn Type and Info. returned in param_valueProgramBuildStatus Return type: cl_build_status  Returns the build, compile or link status, whichever was performed last on program for device.  This can be one of the following: BuildNone. The build status returned if no clBuildProgram, clCompileProgram or clLinkProgram has been performed on the specified program object for device. BuildError. The build status returned if clBuildProgram, clCompileProgram or clLinkProgram whichever was performed last on the specified program object for device generated an error. BuildSuccess. The build status returned if clBuildProgram, clCompileProgram or clLinkProgram whichever was performed last on the specified program object for device was successful. BuildInProgress. The build status returned if clBuildProgram, clCompileProgram or clLinkProgram whichever was performed last on the specified program object for device has not finished. ProgramBuildOptions Return type: char[]  Return the build, compile or link options specified by the options argument in clBuildProgram, clCompileProgram or clLinkProgram, whichever was performed last on program for device.  If build status of program for device is CL_BUILD_NONE, an empty string is returned. ProgramBuildLog Return type: char[]  Return the build, compile or link log for clBuildProgram, clCompileProgram or clLinkProgram whichever was performed last on program for device.  If build status of program for device is BuildNone, an empty string is returned. ProgramBinaryType Return type: cl_program_binary_type  Return the program binary type for device. This can be one of the following values: ProgramBinaryTypeNone. There is no binary associated with device. ProgramBinaryTypeCompiledObject. A compiled binary is associated with device. This is the case if program was created using clCreateProgramWithSource and compiled using clCompileProgram or a compiled binary is loaded using clCreateProgramWithBinary. ProgramBinaryTypeLibrary. A library binary is associated with device. This is the case if program was created by clLinkProgram which is called with the –createlibrary link option or if a library binary is loaded using clCreateProgramWithBinary. ProgramBinaryTypeExecutable. An executable binary is associated with device. This is the case if program was created by clLinkProgram without the –createlibrary link option or program was created by clBuildProgram or an executable binary is loaded using clCreateProgramWithBinary.
        /// </param>
        /// <param name="param_value_size"> 
        /// Specifies the size in bytes of memory pointed to by param_value. This size must be ≥ size of return type as described in the table above.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data copied to param_value. If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetProgramBuildInfo")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode GetProgramBuildInfo<T4>(ComputeProgram program, ComputeDevice device, OpenTK.Compute.CL12.ProgramBuildInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] ref T4 param_value, [OutAttribute] IntPtr* param_value_size_ret)
            where T4 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Returns information about the program object.
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object being queried.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the information to query. The list of supported param_name types and the information returned in param_value by clGetProgramInfo is described in the table below. cl_program_infoReturn Type and Info. returned in param_valueProgramReferenceCount Return type: cl_uint Return the program reference count.The reference count returned should be considered immediately stale. It is unsuitable for general use in applications. This feature is provided for identifying memory leaks.ProgramContext Return type: cl_context  Return the context specified when the program object is created ProgramNumDevices Return type: cl_uint  Return the number of devices associated with program. ProgramDevices Return type: cl_device_id[]  Return the list of devices associated with the program object. This can be the devices associated with context on which the program object has been created or can be a subset of devices that are specified when a progam object is created using clCreateProgramWithBinary. ProgramSource Return type: char[]  Return the program source code specified by clCreateProgramWithSource. The source string returned is a concatenation of all source strings specified to clCreateProgramWithSource with a null terminator. The concatenation strips any nulls in the original source strings.  If program is created using clCreateProgramWithBinary or clCreateProgramWithBuiltInKernels, a null string or the appropriate program source code is returned depending on whether or not the program source code is stored in the binary.  The actual number of characters that represents the program source code including the null terminator is returned in param_value_size_ret. ProgramBinarySizes Return type: size_t[]  Returns an array that contains the size in bytes of the program binary (could be an executable binary, compiled binary or library binary) for each device associated with program. The size of the array is the number of devices associated with program. If a binary is not available for a device(s), a size of zero is returned.  If program is created using clCreateProgramWithBuiltInKernels, the implementation may return zero in any entries of the returned array. ProgramBinaries Return type: unsigned char *[]  Return the program binaries (could be an executable binary, compiled binary or library binary) for all devices associated with program. For each device in program, the binary returned can be the binary specified for the device when program is created with clCreateProgramWithBinary or it can be the executable binary generated by clBuildProgram or clLinkProgram. If program is created with clCreateProgramWithSource, the binary returned is the binary generated by clBuildProgram, clCompileProgram, or clLinkProgram. The bits returned can be an implementation-specific intermediate representation (a.k.a. IR) or device specific executable bits or both. The decision on which information is returned in the binary is up to the OpenCL implementation. param_value points to an array of n pointers allocated by the caller, where n is the number of devices associated with program. The buffer sizes needed to allocate the memory that these n pointers refer to can be queried using the ProgramBinarySizes query as described in this table.  Each entry in this array is used by the implementation as the location in memory where to copy the program binary for a specific device, if there is a binary available. To find out which device the program binary in the array refers to, use the ProgramDevices query to get the list of devices. There is a one-to-one correspondence between the array of n pointers returned by ProgramBinaries and array of devices returned by ProgramDevices. If an entry value in the array is NULL, the implementation skips copying the program binary for the specific device identified by the array index. ProgramNumKernels Return type: size_t  Returns the number of kernels declared in program that can be created with clCreateKernel. This information is only available after a successful program executable has been built for at least one device in the list of devices associated with program. ProgramKernelNames Return type: char[]  Returns a semi-colon separated list of kernel names in program that can be created with clCreateKernel. This information is only available after a successful program executable has been built for at least one device in the list of devices associated with program.
        /// </param>
        /// <param name="param_value_size"> 
        /// Used to specify the size in bytes of memory pointed to by param_value.  This size must be ≥ size of return type as described in the table above.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data copied to param_value. If  param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetProgramInfo")]
        [CLSCompliant(false)]
        public static ErrorCode GetProgramInfo(ComputeProgram program, OpenTK.Compute.CL12.ProgramInfo param_name, IntPtr param_value_size, IntPtr param_value, [OutAttribute] IntPtr[] param_value_size_ret) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Returns information about the program object.
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object being queried.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the information to query. The list of supported param_name types and the information returned in param_value by clGetProgramInfo is described in the table below. cl_program_infoReturn Type and Info. returned in param_valueProgramReferenceCount Return type: cl_uint Return the program reference count.The reference count returned should be considered immediately stale. It is unsuitable for general use in applications. This feature is provided for identifying memory leaks.ProgramContext Return type: cl_context  Return the context specified when the program object is created ProgramNumDevices Return type: cl_uint  Return the number of devices associated with program. ProgramDevices Return type: cl_device_id[]  Return the list of devices associated with the program object. This can be the devices associated with context on which the program object has been created or can be a subset of devices that are specified when a progam object is created using clCreateProgramWithBinary. ProgramSource Return type: char[]  Return the program source code specified by clCreateProgramWithSource. The source string returned is a concatenation of all source strings specified to clCreateProgramWithSource with a null terminator. The concatenation strips any nulls in the original source strings.  If program is created using clCreateProgramWithBinary or clCreateProgramWithBuiltInKernels, a null string or the appropriate program source code is returned depending on whether or not the program source code is stored in the binary.  The actual number of characters that represents the program source code including the null terminator is returned in param_value_size_ret. ProgramBinarySizes Return type: size_t[]  Returns an array that contains the size in bytes of the program binary (could be an executable binary, compiled binary or library binary) for each device associated with program. The size of the array is the number of devices associated with program. If a binary is not available for a device(s), a size of zero is returned.  If program is created using clCreateProgramWithBuiltInKernels, the implementation may return zero in any entries of the returned array. ProgramBinaries Return type: unsigned char *[]  Return the program binaries (could be an executable binary, compiled binary or library binary) for all devices associated with program. For each device in program, the binary returned can be the binary specified for the device when program is created with clCreateProgramWithBinary or it can be the executable binary generated by clBuildProgram or clLinkProgram. If program is created with clCreateProgramWithSource, the binary returned is the binary generated by clBuildProgram, clCompileProgram, or clLinkProgram. The bits returned can be an implementation-specific intermediate representation (a.k.a. IR) or device specific executable bits or both. The decision on which information is returned in the binary is up to the OpenCL implementation. param_value points to an array of n pointers allocated by the caller, where n is the number of devices associated with program. The buffer sizes needed to allocate the memory that these n pointers refer to can be queried using the ProgramBinarySizes query as described in this table.  Each entry in this array is used by the implementation as the location in memory where to copy the program binary for a specific device, if there is a binary available. To find out which device the program binary in the array refers to, use the ProgramDevices query to get the list of devices. There is a one-to-one correspondence between the array of n pointers returned by ProgramBinaries and array of devices returned by ProgramDevices. If an entry value in the array is NULL, the implementation skips copying the program binary for the specific device identified by the array index. ProgramNumKernels Return type: size_t  Returns the number of kernels declared in program that can be created with clCreateKernel. This information is only available after a successful program executable has been built for at least one device in the list of devices associated with program. ProgramKernelNames Return type: char[]  Returns a semi-colon separated list of kernel names in program that can be created with clCreateKernel. This information is only available after a successful program executable has been built for at least one device in the list of devices associated with program.
        /// </param>
        /// <param name="param_value_size"> 
        /// Used to specify the size in bytes of memory pointed to by param_value.  This size must be ≥ size of return type as described in the table above.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data copied to param_value. If  param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetProgramInfo")]
        [CLSCompliant(false)]
        public static ErrorCode GetProgramInfo(ComputeProgram program, OpenTK.Compute.CL12.ProgramInfo param_name, IntPtr param_value_size, IntPtr param_value, [OutAttribute] out IntPtr param_value_size_ret) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Returns information about the program object.
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object being queried.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the information to query. The list of supported param_name types and the information returned in param_value by clGetProgramInfo is described in the table below. cl_program_infoReturn Type and Info. returned in param_valueProgramReferenceCount Return type: cl_uint Return the program reference count.The reference count returned should be considered immediately stale. It is unsuitable for general use in applications. This feature is provided for identifying memory leaks.ProgramContext Return type: cl_context  Return the context specified when the program object is created ProgramNumDevices Return type: cl_uint  Return the number of devices associated with program. ProgramDevices Return type: cl_device_id[]  Return the list of devices associated with the program object. This can be the devices associated with context on which the program object has been created or can be a subset of devices that are specified when a progam object is created using clCreateProgramWithBinary. ProgramSource Return type: char[]  Return the program source code specified by clCreateProgramWithSource. The source string returned is a concatenation of all source strings specified to clCreateProgramWithSource with a null terminator. The concatenation strips any nulls in the original source strings.  If program is created using clCreateProgramWithBinary or clCreateProgramWithBuiltInKernels, a null string or the appropriate program source code is returned depending on whether or not the program source code is stored in the binary.  The actual number of characters that represents the program source code including the null terminator is returned in param_value_size_ret. ProgramBinarySizes Return type: size_t[]  Returns an array that contains the size in bytes of the program binary (could be an executable binary, compiled binary or library binary) for each device associated with program. The size of the array is the number of devices associated with program. If a binary is not available for a device(s), a size of zero is returned.  If program is created using clCreateProgramWithBuiltInKernels, the implementation may return zero in any entries of the returned array. ProgramBinaries Return type: unsigned char *[]  Return the program binaries (could be an executable binary, compiled binary or library binary) for all devices associated with program. For each device in program, the binary returned can be the binary specified for the device when program is created with clCreateProgramWithBinary or it can be the executable binary generated by clBuildProgram or clLinkProgram. If program is created with clCreateProgramWithSource, the binary returned is the binary generated by clBuildProgram, clCompileProgram, or clLinkProgram. The bits returned can be an implementation-specific intermediate representation (a.k.a. IR) or device specific executable bits or both. The decision on which information is returned in the binary is up to the OpenCL implementation. param_value points to an array of n pointers allocated by the caller, where n is the number of devices associated with program. The buffer sizes needed to allocate the memory that these n pointers refer to can be queried using the ProgramBinarySizes query as described in this table.  Each entry in this array is used by the implementation as the location in memory where to copy the program binary for a specific device, if there is a binary available. To find out which device the program binary in the array refers to, use the ProgramDevices query to get the list of devices. There is a one-to-one correspondence between the array of n pointers returned by ProgramBinaries and array of devices returned by ProgramDevices. If an entry value in the array is NULL, the implementation skips copying the program binary for the specific device identified by the array index. ProgramNumKernels Return type: size_t  Returns the number of kernels declared in program that can be created with clCreateKernel. This information is only available after a successful program executable has been built for at least one device in the list of devices associated with program. ProgramKernelNames Return type: char[]  Returns a semi-colon separated list of kernel names in program that can be created with clCreateKernel. This information is only available after a successful program executable has been built for at least one device in the list of devices associated with program.
        /// </param>
        /// <param name="param_value_size"> 
        /// Used to specify the size in bytes of memory pointed to by param_value.  This size must be ≥ size of return type as described in the table above.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data copied to param_value. If  param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetProgramInfo")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode GetProgramInfo(ComputeProgram program, OpenTK.Compute.CL12.ProgramInfo param_name, IntPtr param_value_size, IntPtr param_value, [OutAttribute] IntPtr* param_value_size_ret) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Returns information about the program object.
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object being queried.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the information to query. The list of supported param_name types and the information returned in param_value by clGetProgramInfo is described in the table below. cl_program_infoReturn Type and Info. returned in param_valueProgramReferenceCount Return type: cl_uint Return the program reference count.The reference count returned should be considered immediately stale. It is unsuitable for general use in applications. This feature is provided for identifying memory leaks.ProgramContext Return type: cl_context  Return the context specified when the program object is created ProgramNumDevices Return type: cl_uint  Return the number of devices associated with program. ProgramDevices Return type: cl_device_id[]  Return the list of devices associated with the program object. This can be the devices associated with context on which the program object has been created or can be a subset of devices that are specified when a progam object is created using clCreateProgramWithBinary. ProgramSource Return type: char[]  Return the program source code specified by clCreateProgramWithSource. The source string returned is a concatenation of all source strings specified to clCreateProgramWithSource with a null terminator. The concatenation strips any nulls in the original source strings.  If program is created using clCreateProgramWithBinary or clCreateProgramWithBuiltInKernels, a null string or the appropriate program source code is returned depending on whether or not the program source code is stored in the binary.  The actual number of characters that represents the program source code including the null terminator is returned in param_value_size_ret. ProgramBinarySizes Return type: size_t[]  Returns an array that contains the size in bytes of the program binary (could be an executable binary, compiled binary or library binary) for each device associated with program. The size of the array is the number of devices associated with program. If a binary is not available for a device(s), a size of zero is returned.  If program is created using clCreateProgramWithBuiltInKernels, the implementation may return zero in any entries of the returned array. ProgramBinaries Return type: unsigned char *[]  Return the program binaries (could be an executable binary, compiled binary or library binary) for all devices associated with program. For each device in program, the binary returned can be the binary specified for the device when program is created with clCreateProgramWithBinary or it can be the executable binary generated by clBuildProgram or clLinkProgram. If program is created with clCreateProgramWithSource, the binary returned is the binary generated by clBuildProgram, clCompileProgram, or clLinkProgram. The bits returned can be an implementation-specific intermediate representation (a.k.a. IR) or device specific executable bits or both. The decision on which information is returned in the binary is up to the OpenCL implementation. param_value points to an array of n pointers allocated by the caller, where n is the number of devices associated with program. The buffer sizes needed to allocate the memory that these n pointers refer to can be queried using the ProgramBinarySizes query as described in this table.  Each entry in this array is used by the implementation as the location in memory where to copy the program binary for a specific device, if there is a binary available. To find out which device the program binary in the array refers to, use the ProgramDevices query to get the list of devices. There is a one-to-one correspondence between the array of n pointers returned by ProgramBinaries and array of devices returned by ProgramDevices. If an entry value in the array is NULL, the implementation skips copying the program binary for the specific device identified by the array index. ProgramNumKernels Return type: size_t  Returns the number of kernels declared in program that can be created with clCreateKernel. This information is only available after a successful program executable has been built for at least one device in the list of devices associated with program. ProgramKernelNames Return type: char[]  Returns a semi-colon separated list of kernel names in program that can be created with clCreateKernel. This information is only available after a successful program executable has been built for at least one device in the list of devices associated with program.
        /// </param>
        /// <param name="param_value_size"> 
        /// Used to specify the size in bytes of memory pointed to by param_value.  This size must be ≥ size of return type as described in the table above.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data copied to param_value. If  param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetProgramInfo")]
        [CLSCompliant(false)]
        public static ErrorCode GetProgramInfo<T3>(ComputeProgram program, OpenTK.Compute.CL12.ProgramInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] T3[] param_value, [OutAttribute] IntPtr[] param_value_size_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Returns information about the program object.
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object being queried.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the information to query. The list of supported param_name types and the information returned in param_value by clGetProgramInfo is described in the table below. cl_program_infoReturn Type and Info. returned in param_valueProgramReferenceCount Return type: cl_uint Return the program reference count.The reference count returned should be considered immediately stale. It is unsuitable for general use in applications. This feature is provided for identifying memory leaks.ProgramContext Return type: cl_context  Return the context specified when the program object is created ProgramNumDevices Return type: cl_uint  Return the number of devices associated with program. ProgramDevices Return type: cl_device_id[]  Return the list of devices associated with the program object. This can be the devices associated with context on which the program object has been created or can be a subset of devices that are specified when a progam object is created using clCreateProgramWithBinary. ProgramSource Return type: char[]  Return the program source code specified by clCreateProgramWithSource. The source string returned is a concatenation of all source strings specified to clCreateProgramWithSource with a null terminator. The concatenation strips any nulls in the original source strings.  If program is created using clCreateProgramWithBinary or clCreateProgramWithBuiltInKernels, a null string or the appropriate program source code is returned depending on whether or not the program source code is stored in the binary.  The actual number of characters that represents the program source code including the null terminator is returned in param_value_size_ret. ProgramBinarySizes Return type: size_t[]  Returns an array that contains the size in bytes of the program binary (could be an executable binary, compiled binary or library binary) for each device associated with program. The size of the array is the number of devices associated with program. If a binary is not available for a device(s), a size of zero is returned.  If program is created using clCreateProgramWithBuiltInKernels, the implementation may return zero in any entries of the returned array. ProgramBinaries Return type: unsigned char *[]  Return the program binaries (could be an executable binary, compiled binary or library binary) for all devices associated with program. For each device in program, the binary returned can be the binary specified for the device when program is created with clCreateProgramWithBinary or it can be the executable binary generated by clBuildProgram or clLinkProgram. If program is created with clCreateProgramWithSource, the binary returned is the binary generated by clBuildProgram, clCompileProgram, or clLinkProgram. The bits returned can be an implementation-specific intermediate representation (a.k.a. IR) or device specific executable bits or both. The decision on which information is returned in the binary is up to the OpenCL implementation. param_value points to an array of n pointers allocated by the caller, where n is the number of devices associated with program. The buffer sizes needed to allocate the memory that these n pointers refer to can be queried using the ProgramBinarySizes query as described in this table.  Each entry in this array is used by the implementation as the location in memory where to copy the program binary for a specific device, if there is a binary available. To find out which device the program binary in the array refers to, use the ProgramDevices query to get the list of devices. There is a one-to-one correspondence between the array of n pointers returned by ProgramBinaries and array of devices returned by ProgramDevices. If an entry value in the array is NULL, the implementation skips copying the program binary for the specific device identified by the array index. ProgramNumKernels Return type: size_t  Returns the number of kernels declared in program that can be created with clCreateKernel. This information is only available after a successful program executable has been built for at least one device in the list of devices associated with program. ProgramKernelNames Return type: char[]  Returns a semi-colon separated list of kernel names in program that can be created with clCreateKernel. This information is only available after a successful program executable has been built for at least one device in the list of devices associated with program.
        /// </param>
        /// <param name="param_value_size"> 
        /// Used to specify the size in bytes of memory pointed to by param_value.  This size must be ≥ size of return type as described in the table above.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data copied to param_value. If  param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetProgramInfo")]
        [CLSCompliant(false)]
        public static ErrorCode GetProgramInfo<T3>(ComputeProgram program, OpenTK.Compute.CL12.ProgramInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] T3[] param_value, [OutAttribute] out IntPtr param_value_size_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Returns information about the program object.
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object being queried.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the information to query. The list of supported param_name types and the information returned in param_value by clGetProgramInfo is described in the table below. cl_program_infoReturn Type and Info. returned in param_valueProgramReferenceCount Return type: cl_uint Return the program reference count.The reference count returned should be considered immediately stale. It is unsuitable for general use in applications. This feature is provided for identifying memory leaks.ProgramContext Return type: cl_context  Return the context specified when the program object is created ProgramNumDevices Return type: cl_uint  Return the number of devices associated with program. ProgramDevices Return type: cl_device_id[]  Return the list of devices associated with the program object. This can be the devices associated with context on which the program object has been created or can be a subset of devices that are specified when a progam object is created using clCreateProgramWithBinary. ProgramSource Return type: char[]  Return the program source code specified by clCreateProgramWithSource. The source string returned is a concatenation of all source strings specified to clCreateProgramWithSource with a null terminator. The concatenation strips any nulls in the original source strings.  If program is created using clCreateProgramWithBinary or clCreateProgramWithBuiltInKernels, a null string or the appropriate program source code is returned depending on whether or not the program source code is stored in the binary.  The actual number of characters that represents the program source code including the null terminator is returned in param_value_size_ret. ProgramBinarySizes Return type: size_t[]  Returns an array that contains the size in bytes of the program binary (could be an executable binary, compiled binary or library binary) for each device associated with program. The size of the array is the number of devices associated with program. If a binary is not available for a device(s), a size of zero is returned.  If program is created using clCreateProgramWithBuiltInKernels, the implementation may return zero in any entries of the returned array. ProgramBinaries Return type: unsigned char *[]  Return the program binaries (could be an executable binary, compiled binary or library binary) for all devices associated with program. For each device in program, the binary returned can be the binary specified for the device when program is created with clCreateProgramWithBinary or it can be the executable binary generated by clBuildProgram or clLinkProgram. If program is created with clCreateProgramWithSource, the binary returned is the binary generated by clBuildProgram, clCompileProgram, or clLinkProgram. The bits returned can be an implementation-specific intermediate representation (a.k.a. IR) or device specific executable bits or both. The decision on which information is returned in the binary is up to the OpenCL implementation. param_value points to an array of n pointers allocated by the caller, where n is the number of devices associated with program. The buffer sizes needed to allocate the memory that these n pointers refer to can be queried using the ProgramBinarySizes query as described in this table.  Each entry in this array is used by the implementation as the location in memory where to copy the program binary for a specific device, if there is a binary available. To find out which device the program binary in the array refers to, use the ProgramDevices query to get the list of devices. There is a one-to-one correspondence between the array of n pointers returned by ProgramBinaries and array of devices returned by ProgramDevices. If an entry value in the array is NULL, the implementation skips copying the program binary for the specific device identified by the array index. ProgramNumKernels Return type: size_t  Returns the number of kernels declared in program that can be created with clCreateKernel. This information is only available after a successful program executable has been built for at least one device in the list of devices associated with program. ProgramKernelNames Return type: char[]  Returns a semi-colon separated list of kernel names in program that can be created with clCreateKernel. This information is only available after a successful program executable has been built for at least one device in the list of devices associated with program.
        /// </param>
        /// <param name="param_value_size"> 
        /// Used to specify the size in bytes of memory pointed to by param_value.  This size must be ≥ size of return type as described in the table above.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data copied to param_value. If  param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetProgramInfo")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode GetProgramInfo<T3>(ComputeProgram program, OpenTK.Compute.CL12.ProgramInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] T3[] param_value, [OutAttribute] IntPtr* param_value_size_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Returns information about the program object.
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object being queried.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the information to query. The list of supported param_name types and the information returned in param_value by clGetProgramInfo is described in the table below. cl_program_infoReturn Type and Info. returned in param_valueProgramReferenceCount Return type: cl_uint Return the program reference count.The reference count returned should be considered immediately stale. It is unsuitable for general use in applications. This feature is provided for identifying memory leaks.ProgramContext Return type: cl_context  Return the context specified when the program object is created ProgramNumDevices Return type: cl_uint  Return the number of devices associated with program. ProgramDevices Return type: cl_device_id[]  Return the list of devices associated with the program object. This can be the devices associated with context on which the program object has been created or can be a subset of devices that are specified when a progam object is created using clCreateProgramWithBinary. ProgramSource Return type: char[]  Return the program source code specified by clCreateProgramWithSource. The source string returned is a concatenation of all source strings specified to clCreateProgramWithSource with a null terminator. The concatenation strips any nulls in the original source strings.  If program is created using clCreateProgramWithBinary or clCreateProgramWithBuiltInKernels, a null string or the appropriate program source code is returned depending on whether or not the program source code is stored in the binary.  The actual number of characters that represents the program source code including the null terminator is returned in param_value_size_ret. ProgramBinarySizes Return type: size_t[]  Returns an array that contains the size in bytes of the program binary (could be an executable binary, compiled binary or library binary) for each device associated with program. The size of the array is the number of devices associated with program. If a binary is not available for a device(s), a size of zero is returned.  If program is created using clCreateProgramWithBuiltInKernels, the implementation may return zero in any entries of the returned array. ProgramBinaries Return type: unsigned char *[]  Return the program binaries (could be an executable binary, compiled binary or library binary) for all devices associated with program. For each device in program, the binary returned can be the binary specified for the device when program is created with clCreateProgramWithBinary or it can be the executable binary generated by clBuildProgram or clLinkProgram. If program is created with clCreateProgramWithSource, the binary returned is the binary generated by clBuildProgram, clCompileProgram, or clLinkProgram. The bits returned can be an implementation-specific intermediate representation (a.k.a. IR) or device specific executable bits or both. The decision on which information is returned in the binary is up to the OpenCL implementation. param_value points to an array of n pointers allocated by the caller, where n is the number of devices associated with program. The buffer sizes needed to allocate the memory that these n pointers refer to can be queried using the ProgramBinarySizes query as described in this table.  Each entry in this array is used by the implementation as the location in memory where to copy the program binary for a specific device, if there is a binary available. To find out which device the program binary in the array refers to, use the ProgramDevices query to get the list of devices. There is a one-to-one correspondence between the array of n pointers returned by ProgramBinaries and array of devices returned by ProgramDevices. If an entry value in the array is NULL, the implementation skips copying the program binary for the specific device identified by the array index. ProgramNumKernels Return type: size_t  Returns the number of kernels declared in program that can be created with clCreateKernel. This information is only available after a successful program executable has been built for at least one device in the list of devices associated with program. ProgramKernelNames Return type: char[]  Returns a semi-colon separated list of kernel names in program that can be created with clCreateKernel. This information is only available after a successful program executable has been built for at least one device in the list of devices associated with program.
        /// </param>
        /// <param name="param_value_size"> 
        /// Used to specify the size in bytes of memory pointed to by param_value.  This size must be ≥ size of return type as described in the table above.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data copied to param_value. If  param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetProgramInfo")]
        [CLSCompliant(false)]
        public static ErrorCode GetProgramInfo<T3>(ComputeProgram program, OpenTK.Compute.CL12.ProgramInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] T3[,] param_value, [OutAttribute] IntPtr[] param_value_size_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Returns information about the program object.
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object being queried.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the information to query. The list of supported param_name types and the information returned in param_value by clGetProgramInfo is described in the table below. cl_program_infoReturn Type and Info. returned in param_valueProgramReferenceCount Return type: cl_uint Return the program reference count.The reference count returned should be considered immediately stale. It is unsuitable for general use in applications. This feature is provided for identifying memory leaks.ProgramContext Return type: cl_context  Return the context specified when the program object is created ProgramNumDevices Return type: cl_uint  Return the number of devices associated with program. ProgramDevices Return type: cl_device_id[]  Return the list of devices associated with the program object. This can be the devices associated with context on which the program object has been created or can be a subset of devices that are specified when a progam object is created using clCreateProgramWithBinary. ProgramSource Return type: char[]  Return the program source code specified by clCreateProgramWithSource. The source string returned is a concatenation of all source strings specified to clCreateProgramWithSource with a null terminator. The concatenation strips any nulls in the original source strings.  If program is created using clCreateProgramWithBinary or clCreateProgramWithBuiltInKernels, a null string or the appropriate program source code is returned depending on whether or not the program source code is stored in the binary.  The actual number of characters that represents the program source code including the null terminator is returned in param_value_size_ret. ProgramBinarySizes Return type: size_t[]  Returns an array that contains the size in bytes of the program binary (could be an executable binary, compiled binary or library binary) for each device associated with program. The size of the array is the number of devices associated with program. If a binary is not available for a device(s), a size of zero is returned.  If program is created using clCreateProgramWithBuiltInKernels, the implementation may return zero in any entries of the returned array. ProgramBinaries Return type: unsigned char *[]  Return the program binaries (could be an executable binary, compiled binary or library binary) for all devices associated with program. For each device in program, the binary returned can be the binary specified for the device when program is created with clCreateProgramWithBinary or it can be the executable binary generated by clBuildProgram or clLinkProgram. If program is created with clCreateProgramWithSource, the binary returned is the binary generated by clBuildProgram, clCompileProgram, or clLinkProgram. The bits returned can be an implementation-specific intermediate representation (a.k.a. IR) or device specific executable bits or both. The decision on which information is returned in the binary is up to the OpenCL implementation. param_value points to an array of n pointers allocated by the caller, where n is the number of devices associated with program. The buffer sizes needed to allocate the memory that these n pointers refer to can be queried using the ProgramBinarySizes query as described in this table.  Each entry in this array is used by the implementation as the location in memory where to copy the program binary for a specific device, if there is a binary available. To find out which device the program binary in the array refers to, use the ProgramDevices query to get the list of devices. There is a one-to-one correspondence between the array of n pointers returned by ProgramBinaries and array of devices returned by ProgramDevices. If an entry value in the array is NULL, the implementation skips copying the program binary for the specific device identified by the array index. ProgramNumKernels Return type: size_t  Returns the number of kernels declared in program that can be created with clCreateKernel. This information is only available after a successful program executable has been built for at least one device in the list of devices associated with program. ProgramKernelNames Return type: char[]  Returns a semi-colon separated list of kernel names in program that can be created with clCreateKernel. This information is only available after a successful program executable has been built for at least one device in the list of devices associated with program.
        /// </param>
        /// <param name="param_value_size"> 
        /// Used to specify the size in bytes of memory pointed to by param_value.  This size must be ≥ size of return type as described in the table above.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data copied to param_value. If  param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetProgramInfo")]
        [CLSCompliant(false)]
        public static ErrorCode GetProgramInfo<T3>(ComputeProgram program, OpenTK.Compute.CL12.ProgramInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] T3[,] param_value, [OutAttribute] out IntPtr param_value_size_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Returns information about the program object.
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object being queried.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the information to query. The list of supported param_name types and the information returned in param_value by clGetProgramInfo is described in the table below. cl_program_infoReturn Type and Info. returned in param_valueProgramReferenceCount Return type: cl_uint Return the program reference count.The reference count returned should be considered immediately stale. It is unsuitable for general use in applications. This feature is provided for identifying memory leaks.ProgramContext Return type: cl_context  Return the context specified when the program object is created ProgramNumDevices Return type: cl_uint  Return the number of devices associated with program. ProgramDevices Return type: cl_device_id[]  Return the list of devices associated with the program object. This can be the devices associated with context on which the program object has been created or can be a subset of devices that are specified when a progam object is created using clCreateProgramWithBinary. ProgramSource Return type: char[]  Return the program source code specified by clCreateProgramWithSource. The source string returned is a concatenation of all source strings specified to clCreateProgramWithSource with a null terminator. The concatenation strips any nulls in the original source strings.  If program is created using clCreateProgramWithBinary or clCreateProgramWithBuiltInKernels, a null string or the appropriate program source code is returned depending on whether or not the program source code is stored in the binary.  The actual number of characters that represents the program source code including the null terminator is returned in param_value_size_ret. ProgramBinarySizes Return type: size_t[]  Returns an array that contains the size in bytes of the program binary (could be an executable binary, compiled binary or library binary) for each device associated with program. The size of the array is the number of devices associated with program. If a binary is not available for a device(s), a size of zero is returned.  If program is created using clCreateProgramWithBuiltInKernels, the implementation may return zero in any entries of the returned array. ProgramBinaries Return type: unsigned char *[]  Return the program binaries (could be an executable binary, compiled binary or library binary) for all devices associated with program. For each device in program, the binary returned can be the binary specified for the device when program is created with clCreateProgramWithBinary or it can be the executable binary generated by clBuildProgram or clLinkProgram. If program is created with clCreateProgramWithSource, the binary returned is the binary generated by clBuildProgram, clCompileProgram, or clLinkProgram. The bits returned can be an implementation-specific intermediate representation (a.k.a. IR) or device specific executable bits or both. The decision on which information is returned in the binary is up to the OpenCL implementation. param_value points to an array of n pointers allocated by the caller, where n is the number of devices associated with program. The buffer sizes needed to allocate the memory that these n pointers refer to can be queried using the ProgramBinarySizes query as described in this table.  Each entry in this array is used by the implementation as the location in memory where to copy the program binary for a specific device, if there is a binary available. To find out which device the program binary in the array refers to, use the ProgramDevices query to get the list of devices. There is a one-to-one correspondence between the array of n pointers returned by ProgramBinaries and array of devices returned by ProgramDevices. If an entry value in the array is NULL, the implementation skips copying the program binary for the specific device identified by the array index. ProgramNumKernels Return type: size_t  Returns the number of kernels declared in program that can be created with clCreateKernel. This information is only available after a successful program executable has been built for at least one device in the list of devices associated with program. ProgramKernelNames Return type: char[]  Returns a semi-colon separated list of kernel names in program that can be created with clCreateKernel. This information is only available after a successful program executable has been built for at least one device in the list of devices associated with program.
        /// </param>
        /// <param name="param_value_size"> 
        /// Used to specify the size in bytes of memory pointed to by param_value.  This size must be ≥ size of return type as described in the table above.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data copied to param_value. If  param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetProgramInfo")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode GetProgramInfo<T3>(ComputeProgram program, OpenTK.Compute.CL12.ProgramInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] T3[,] param_value, [OutAttribute] IntPtr* param_value_size_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Returns information about the program object.
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object being queried.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the information to query. The list of supported param_name types and the information returned in param_value by clGetProgramInfo is described in the table below. cl_program_infoReturn Type and Info. returned in param_valueProgramReferenceCount Return type: cl_uint Return the program reference count.The reference count returned should be considered immediately stale. It is unsuitable for general use in applications. This feature is provided for identifying memory leaks.ProgramContext Return type: cl_context  Return the context specified when the program object is created ProgramNumDevices Return type: cl_uint  Return the number of devices associated with program. ProgramDevices Return type: cl_device_id[]  Return the list of devices associated with the program object. This can be the devices associated with context on which the program object has been created or can be a subset of devices that are specified when a progam object is created using clCreateProgramWithBinary. ProgramSource Return type: char[]  Return the program source code specified by clCreateProgramWithSource. The source string returned is a concatenation of all source strings specified to clCreateProgramWithSource with a null terminator. The concatenation strips any nulls in the original source strings.  If program is created using clCreateProgramWithBinary or clCreateProgramWithBuiltInKernels, a null string or the appropriate program source code is returned depending on whether or not the program source code is stored in the binary.  The actual number of characters that represents the program source code including the null terminator is returned in param_value_size_ret. ProgramBinarySizes Return type: size_t[]  Returns an array that contains the size in bytes of the program binary (could be an executable binary, compiled binary or library binary) for each device associated with program. The size of the array is the number of devices associated with program. If a binary is not available for a device(s), a size of zero is returned.  If program is created using clCreateProgramWithBuiltInKernels, the implementation may return zero in any entries of the returned array. ProgramBinaries Return type: unsigned char *[]  Return the program binaries (could be an executable binary, compiled binary or library binary) for all devices associated with program. For each device in program, the binary returned can be the binary specified for the device when program is created with clCreateProgramWithBinary or it can be the executable binary generated by clBuildProgram or clLinkProgram. If program is created with clCreateProgramWithSource, the binary returned is the binary generated by clBuildProgram, clCompileProgram, or clLinkProgram. The bits returned can be an implementation-specific intermediate representation (a.k.a. IR) or device specific executable bits or both. The decision on which information is returned in the binary is up to the OpenCL implementation. param_value points to an array of n pointers allocated by the caller, where n is the number of devices associated with program. The buffer sizes needed to allocate the memory that these n pointers refer to can be queried using the ProgramBinarySizes query as described in this table.  Each entry in this array is used by the implementation as the location in memory where to copy the program binary for a specific device, if there is a binary available. To find out which device the program binary in the array refers to, use the ProgramDevices query to get the list of devices. There is a one-to-one correspondence between the array of n pointers returned by ProgramBinaries and array of devices returned by ProgramDevices. If an entry value in the array is NULL, the implementation skips copying the program binary for the specific device identified by the array index. ProgramNumKernels Return type: size_t  Returns the number of kernels declared in program that can be created with clCreateKernel. This information is only available after a successful program executable has been built for at least one device in the list of devices associated with program. ProgramKernelNames Return type: char[]  Returns a semi-colon separated list of kernel names in program that can be created with clCreateKernel. This information is only available after a successful program executable has been built for at least one device in the list of devices associated with program.
        /// </param>
        /// <param name="param_value_size"> 
        /// Used to specify the size in bytes of memory pointed to by param_value.  This size must be ≥ size of return type as described in the table above.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data copied to param_value. If  param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetProgramInfo")]
        [CLSCompliant(false)]
        public static ErrorCode GetProgramInfo<T3>(ComputeProgram program, OpenTK.Compute.CL12.ProgramInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] T3[,,] param_value, [OutAttribute] IntPtr[] param_value_size_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Returns information about the program object.
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object being queried.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the information to query. The list of supported param_name types and the information returned in param_value by clGetProgramInfo is described in the table below. cl_program_infoReturn Type and Info. returned in param_valueProgramReferenceCount Return type: cl_uint Return the program reference count.The reference count returned should be considered immediately stale. It is unsuitable for general use in applications. This feature is provided for identifying memory leaks.ProgramContext Return type: cl_context  Return the context specified when the program object is created ProgramNumDevices Return type: cl_uint  Return the number of devices associated with program. ProgramDevices Return type: cl_device_id[]  Return the list of devices associated with the program object. This can be the devices associated with context on which the program object has been created or can be a subset of devices that are specified when a progam object is created using clCreateProgramWithBinary. ProgramSource Return type: char[]  Return the program source code specified by clCreateProgramWithSource. The source string returned is a concatenation of all source strings specified to clCreateProgramWithSource with a null terminator. The concatenation strips any nulls in the original source strings.  If program is created using clCreateProgramWithBinary or clCreateProgramWithBuiltInKernels, a null string or the appropriate program source code is returned depending on whether or not the program source code is stored in the binary.  The actual number of characters that represents the program source code including the null terminator is returned in param_value_size_ret. ProgramBinarySizes Return type: size_t[]  Returns an array that contains the size in bytes of the program binary (could be an executable binary, compiled binary or library binary) for each device associated with program. The size of the array is the number of devices associated with program. If a binary is not available for a device(s), a size of zero is returned.  If program is created using clCreateProgramWithBuiltInKernels, the implementation may return zero in any entries of the returned array. ProgramBinaries Return type: unsigned char *[]  Return the program binaries (could be an executable binary, compiled binary or library binary) for all devices associated with program. For each device in program, the binary returned can be the binary specified for the device when program is created with clCreateProgramWithBinary or it can be the executable binary generated by clBuildProgram or clLinkProgram. If program is created with clCreateProgramWithSource, the binary returned is the binary generated by clBuildProgram, clCompileProgram, or clLinkProgram. The bits returned can be an implementation-specific intermediate representation (a.k.a. IR) or device specific executable bits or both. The decision on which information is returned in the binary is up to the OpenCL implementation. param_value points to an array of n pointers allocated by the caller, where n is the number of devices associated with program. The buffer sizes needed to allocate the memory that these n pointers refer to can be queried using the ProgramBinarySizes query as described in this table.  Each entry in this array is used by the implementation as the location in memory where to copy the program binary for a specific device, if there is a binary available. To find out which device the program binary in the array refers to, use the ProgramDevices query to get the list of devices. There is a one-to-one correspondence between the array of n pointers returned by ProgramBinaries and array of devices returned by ProgramDevices. If an entry value in the array is NULL, the implementation skips copying the program binary for the specific device identified by the array index. ProgramNumKernels Return type: size_t  Returns the number of kernels declared in program that can be created with clCreateKernel. This information is only available after a successful program executable has been built for at least one device in the list of devices associated with program. ProgramKernelNames Return type: char[]  Returns a semi-colon separated list of kernel names in program that can be created with clCreateKernel. This information is only available after a successful program executable has been built for at least one device in the list of devices associated with program.
        /// </param>
        /// <param name="param_value_size"> 
        /// Used to specify the size in bytes of memory pointed to by param_value.  This size must be ≥ size of return type as described in the table above.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data copied to param_value. If  param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetProgramInfo")]
        [CLSCompliant(false)]
        public static ErrorCode GetProgramInfo<T3>(ComputeProgram program, OpenTK.Compute.CL12.ProgramInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] T3[,,] param_value, [OutAttribute] out IntPtr param_value_size_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Returns information about the program object.
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object being queried.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the information to query. The list of supported param_name types and the information returned in param_value by clGetProgramInfo is described in the table below. cl_program_infoReturn Type and Info. returned in param_valueProgramReferenceCount Return type: cl_uint Return the program reference count.The reference count returned should be considered immediately stale. It is unsuitable for general use in applications. This feature is provided for identifying memory leaks.ProgramContext Return type: cl_context  Return the context specified when the program object is created ProgramNumDevices Return type: cl_uint  Return the number of devices associated with program. ProgramDevices Return type: cl_device_id[]  Return the list of devices associated with the program object. This can be the devices associated with context on which the program object has been created or can be a subset of devices that are specified when a progam object is created using clCreateProgramWithBinary. ProgramSource Return type: char[]  Return the program source code specified by clCreateProgramWithSource. The source string returned is a concatenation of all source strings specified to clCreateProgramWithSource with a null terminator. The concatenation strips any nulls in the original source strings.  If program is created using clCreateProgramWithBinary or clCreateProgramWithBuiltInKernels, a null string or the appropriate program source code is returned depending on whether or not the program source code is stored in the binary.  The actual number of characters that represents the program source code including the null terminator is returned in param_value_size_ret. ProgramBinarySizes Return type: size_t[]  Returns an array that contains the size in bytes of the program binary (could be an executable binary, compiled binary or library binary) for each device associated with program. The size of the array is the number of devices associated with program. If a binary is not available for a device(s), a size of zero is returned.  If program is created using clCreateProgramWithBuiltInKernels, the implementation may return zero in any entries of the returned array. ProgramBinaries Return type: unsigned char *[]  Return the program binaries (could be an executable binary, compiled binary or library binary) for all devices associated with program. For each device in program, the binary returned can be the binary specified for the device when program is created with clCreateProgramWithBinary or it can be the executable binary generated by clBuildProgram or clLinkProgram. If program is created with clCreateProgramWithSource, the binary returned is the binary generated by clBuildProgram, clCompileProgram, or clLinkProgram. The bits returned can be an implementation-specific intermediate representation (a.k.a. IR) or device specific executable bits or both. The decision on which information is returned in the binary is up to the OpenCL implementation. param_value points to an array of n pointers allocated by the caller, where n is the number of devices associated with program. The buffer sizes needed to allocate the memory that these n pointers refer to can be queried using the ProgramBinarySizes query as described in this table.  Each entry in this array is used by the implementation as the location in memory where to copy the program binary for a specific device, if there is a binary available. To find out which device the program binary in the array refers to, use the ProgramDevices query to get the list of devices. There is a one-to-one correspondence between the array of n pointers returned by ProgramBinaries and array of devices returned by ProgramDevices. If an entry value in the array is NULL, the implementation skips copying the program binary for the specific device identified by the array index. ProgramNumKernels Return type: size_t  Returns the number of kernels declared in program that can be created with clCreateKernel. This information is only available after a successful program executable has been built for at least one device in the list of devices associated with program. ProgramKernelNames Return type: char[]  Returns a semi-colon separated list of kernel names in program that can be created with clCreateKernel. This information is only available after a successful program executable has been built for at least one device in the list of devices associated with program.
        /// </param>
        /// <param name="param_value_size"> 
        /// Used to specify the size in bytes of memory pointed to by param_value.  This size must be ≥ size of return type as described in the table above.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data copied to param_value. If  param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetProgramInfo")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode GetProgramInfo<T3>(ComputeProgram program, OpenTK.Compute.CL12.ProgramInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] T3[,,] param_value, [OutAttribute] IntPtr* param_value_size_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Returns information about the program object.
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object being queried.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the information to query. The list of supported param_name types and the information returned in param_value by clGetProgramInfo is described in the table below. cl_program_infoReturn Type and Info. returned in param_valueProgramReferenceCount Return type: cl_uint Return the program reference count.The reference count returned should be considered immediately stale. It is unsuitable for general use in applications. This feature is provided for identifying memory leaks.ProgramContext Return type: cl_context  Return the context specified when the program object is created ProgramNumDevices Return type: cl_uint  Return the number of devices associated with program. ProgramDevices Return type: cl_device_id[]  Return the list of devices associated with the program object. This can be the devices associated with context on which the program object has been created or can be a subset of devices that are specified when a progam object is created using clCreateProgramWithBinary. ProgramSource Return type: char[]  Return the program source code specified by clCreateProgramWithSource. The source string returned is a concatenation of all source strings specified to clCreateProgramWithSource with a null terminator. The concatenation strips any nulls in the original source strings.  If program is created using clCreateProgramWithBinary or clCreateProgramWithBuiltInKernels, a null string or the appropriate program source code is returned depending on whether or not the program source code is stored in the binary.  The actual number of characters that represents the program source code including the null terminator is returned in param_value_size_ret. ProgramBinarySizes Return type: size_t[]  Returns an array that contains the size in bytes of the program binary (could be an executable binary, compiled binary or library binary) for each device associated with program. The size of the array is the number of devices associated with program. If a binary is not available for a device(s), a size of zero is returned.  If program is created using clCreateProgramWithBuiltInKernels, the implementation may return zero in any entries of the returned array. ProgramBinaries Return type: unsigned char *[]  Return the program binaries (could be an executable binary, compiled binary or library binary) for all devices associated with program. For each device in program, the binary returned can be the binary specified for the device when program is created with clCreateProgramWithBinary or it can be the executable binary generated by clBuildProgram or clLinkProgram. If program is created with clCreateProgramWithSource, the binary returned is the binary generated by clBuildProgram, clCompileProgram, or clLinkProgram. The bits returned can be an implementation-specific intermediate representation (a.k.a. IR) or device specific executable bits or both. The decision on which information is returned in the binary is up to the OpenCL implementation. param_value points to an array of n pointers allocated by the caller, where n is the number of devices associated with program. The buffer sizes needed to allocate the memory that these n pointers refer to can be queried using the ProgramBinarySizes query as described in this table.  Each entry in this array is used by the implementation as the location in memory where to copy the program binary for a specific device, if there is a binary available. To find out which device the program binary in the array refers to, use the ProgramDevices query to get the list of devices. There is a one-to-one correspondence between the array of n pointers returned by ProgramBinaries and array of devices returned by ProgramDevices. If an entry value in the array is NULL, the implementation skips copying the program binary for the specific device identified by the array index. ProgramNumKernels Return type: size_t  Returns the number of kernels declared in program that can be created with clCreateKernel. This information is only available after a successful program executable has been built for at least one device in the list of devices associated with program. ProgramKernelNames Return type: char[]  Returns a semi-colon separated list of kernel names in program that can be created with clCreateKernel. This information is only available after a successful program executable has been built for at least one device in the list of devices associated with program.
        /// </param>
        /// <param name="param_value_size"> 
        /// Used to specify the size in bytes of memory pointed to by param_value.  This size must be ≥ size of return type as described in the table above.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data copied to param_value. If  param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetProgramInfo")]
        [CLSCompliant(false)]
        public static ErrorCode GetProgramInfo<T3>(ComputeProgram program, OpenTK.Compute.CL12.ProgramInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] ref T3 param_value, [OutAttribute] IntPtr[] param_value_size_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Returns information about the program object.
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object being queried.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the information to query. The list of supported param_name types and the information returned in param_value by clGetProgramInfo is described in the table below. cl_program_infoReturn Type and Info. returned in param_valueProgramReferenceCount Return type: cl_uint Return the program reference count.The reference count returned should be considered immediately stale. It is unsuitable for general use in applications. This feature is provided for identifying memory leaks.ProgramContext Return type: cl_context  Return the context specified when the program object is created ProgramNumDevices Return type: cl_uint  Return the number of devices associated with program. ProgramDevices Return type: cl_device_id[]  Return the list of devices associated with the program object. This can be the devices associated with context on which the program object has been created or can be a subset of devices that are specified when a progam object is created using clCreateProgramWithBinary. ProgramSource Return type: char[]  Return the program source code specified by clCreateProgramWithSource. The source string returned is a concatenation of all source strings specified to clCreateProgramWithSource with a null terminator. The concatenation strips any nulls in the original source strings.  If program is created using clCreateProgramWithBinary or clCreateProgramWithBuiltInKernels, a null string or the appropriate program source code is returned depending on whether or not the program source code is stored in the binary.  The actual number of characters that represents the program source code including the null terminator is returned in param_value_size_ret. ProgramBinarySizes Return type: size_t[]  Returns an array that contains the size in bytes of the program binary (could be an executable binary, compiled binary or library binary) for each device associated with program. The size of the array is the number of devices associated with program. If a binary is not available for a device(s), a size of zero is returned.  If program is created using clCreateProgramWithBuiltInKernels, the implementation may return zero in any entries of the returned array. ProgramBinaries Return type: unsigned char *[]  Return the program binaries (could be an executable binary, compiled binary or library binary) for all devices associated with program. For each device in program, the binary returned can be the binary specified for the device when program is created with clCreateProgramWithBinary or it can be the executable binary generated by clBuildProgram or clLinkProgram. If program is created with clCreateProgramWithSource, the binary returned is the binary generated by clBuildProgram, clCompileProgram, or clLinkProgram. The bits returned can be an implementation-specific intermediate representation (a.k.a. IR) or device specific executable bits or both. The decision on which information is returned in the binary is up to the OpenCL implementation. param_value points to an array of n pointers allocated by the caller, where n is the number of devices associated with program. The buffer sizes needed to allocate the memory that these n pointers refer to can be queried using the ProgramBinarySizes query as described in this table.  Each entry in this array is used by the implementation as the location in memory where to copy the program binary for a specific device, if there is a binary available. To find out which device the program binary in the array refers to, use the ProgramDevices query to get the list of devices. There is a one-to-one correspondence between the array of n pointers returned by ProgramBinaries and array of devices returned by ProgramDevices. If an entry value in the array is NULL, the implementation skips copying the program binary for the specific device identified by the array index. ProgramNumKernels Return type: size_t  Returns the number of kernels declared in program that can be created with clCreateKernel. This information is only available after a successful program executable has been built for at least one device in the list of devices associated with program. ProgramKernelNames Return type: char[]  Returns a semi-colon separated list of kernel names in program that can be created with clCreateKernel. This information is only available after a successful program executable has been built for at least one device in the list of devices associated with program.
        /// </param>
        /// <param name="param_value_size"> 
        /// Used to specify the size in bytes of memory pointed to by param_value.  This size must be ≥ size of return type as described in the table above.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data copied to param_value. If  param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetProgramInfo")]
        [CLSCompliant(false)]
        public static ErrorCode GetProgramInfo<T3>(ComputeProgram program, OpenTK.Compute.CL12.ProgramInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] ref T3 param_value, [OutAttribute] out IntPtr param_value_size_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Returns information about the program object.
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object being queried.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the information to query. The list of supported param_name types and the information returned in param_value by clGetProgramInfo is described in the table below. cl_program_infoReturn Type and Info. returned in param_valueProgramReferenceCount Return type: cl_uint Return the program reference count.The reference count returned should be considered immediately stale. It is unsuitable for general use in applications. This feature is provided for identifying memory leaks.ProgramContext Return type: cl_context  Return the context specified when the program object is created ProgramNumDevices Return type: cl_uint  Return the number of devices associated with program. ProgramDevices Return type: cl_device_id[]  Return the list of devices associated with the program object. This can be the devices associated with context on which the program object has been created or can be a subset of devices that are specified when a progam object is created using clCreateProgramWithBinary. ProgramSource Return type: char[]  Return the program source code specified by clCreateProgramWithSource. The source string returned is a concatenation of all source strings specified to clCreateProgramWithSource with a null terminator. The concatenation strips any nulls in the original source strings.  If program is created using clCreateProgramWithBinary or clCreateProgramWithBuiltInKernels, a null string or the appropriate program source code is returned depending on whether or not the program source code is stored in the binary.  The actual number of characters that represents the program source code including the null terminator is returned in param_value_size_ret. ProgramBinarySizes Return type: size_t[]  Returns an array that contains the size in bytes of the program binary (could be an executable binary, compiled binary or library binary) for each device associated with program. The size of the array is the number of devices associated with program. If a binary is not available for a device(s), a size of zero is returned.  If program is created using clCreateProgramWithBuiltInKernels, the implementation may return zero in any entries of the returned array. ProgramBinaries Return type: unsigned char *[]  Return the program binaries (could be an executable binary, compiled binary or library binary) for all devices associated with program. For each device in program, the binary returned can be the binary specified for the device when program is created with clCreateProgramWithBinary or it can be the executable binary generated by clBuildProgram or clLinkProgram. If program is created with clCreateProgramWithSource, the binary returned is the binary generated by clBuildProgram, clCompileProgram, or clLinkProgram. The bits returned can be an implementation-specific intermediate representation (a.k.a. IR) or device specific executable bits or both. The decision on which information is returned in the binary is up to the OpenCL implementation. param_value points to an array of n pointers allocated by the caller, where n is the number of devices associated with program. The buffer sizes needed to allocate the memory that these n pointers refer to can be queried using the ProgramBinarySizes query as described in this table.  Each entry in this array is used by the implementation as the location in memory where to copy the program binary for a specific device, if there is a binary available. To find out which device the program binary in the array refers to, use the ProgramDevices query to get the list of devices. There is a one-to-one correspondence between the array of n pointers returned by ProgramBinaries and array of devices returned by ProgramDevices. If an entry value in the array is NULL, the implementation skips copying the program binary for the specific device identified by the array index. ProgramNumKernels Return type: size_t  Returns the number of kernels declared in program that can be created with clCreateKernel. This information is only available after a successful program executable has been built for at least one device in the list of devices associated with program. ProgramKernelNames Return type: char[]  Returns a semi-colon separated list of kernel names in program that can be created with clCreateKernel. This information is only available after a successful program executable has been built for at least one device in the list of devices associated with program.
        /// </param>
        /// <param name="param_value_size"> 
        /// Used to specify the size in bytes of memory pointed to by param_value.  This size must be ≥ size of return type as described in the table above.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data copied to param_value. If  param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetProgramInfo")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode GetProgramInfo<T3>(ComputeProgram program, OpenTK.Compute.CL12.ProgramInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] ref T3 param_value, [OutAttribute] IntPtr* param_value_size_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Returns information about the sampler object.
        /// </summary>
        /// <param name="sampler"> 
        /// Specifies the sampler being queried.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the information to query. The list of supported param_name types and the information returned in param_value by clGetSamplerInfo is described in the table below. cl_sampler_infoReturn Type and Info. returned in param_valueSamplerReferenceCount Return type: cl_uint  Return the sampler reference count. The reference count returned should be considered immediately stale. It is unsuitable for general use in applications. This feature is provided for identifying memory leaks. SamplerContext Return type: cl_context  Return the context specified when the sampler is created. SamplerNormalizedCoords Return type: cl_bool  Return the normalized coords value associated with sampler. SamplerAddressingMode Return type: cl_addressing_mode  Return the addressing mode value associated with sampler. SamplerFilterMode Return type: cl_filter_mode  Return the filter mode value associated with sampler.
        /// </param>
        /// <param name="param_value_size"> 
        /// Specifies the size in bytes of memory pointed to by param_value. This size must be ≥ size of return type as described in the table above.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data copied to param_value. If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetSamplerInfo")]
        [CLSCompliant(false)]
        public static ErrorCode GetSamplerInfo(ComputeSampler sampler, OpenTK.Compute.CL12.SamplerInfo param_name, IntPtr param_value_size, IntPtr param_value, [OutAttribute] IntPtr[] param_value_size_ret) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Returns information about the sampler object.
        /// </summary>
        /// <param name="sampler"> 
        /// Specifies the sampler being queried.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the information to query. The list of supported param_name types and the information returned in param_value by clGetSamplerInfo is described in the table below. cl_sampler_infoReturn Type and Info. returned in param_valueSamplerReferenceCount Return type: cl_uint  Return the sampler reference count. The reference count returned should be considered immediately stale. It is unsuitable for general use in applications. This feature is provided for identifying memory leaks. SamplerContext Return type: cl_context  Return the context specified when the sampler is created. SamplerNormalizedCoords Return type: cl_bool  Return the normalized coords value associated with sampler. SamplerAddressingMode Return type: cl_addressing_mode  Return the addressing mode value associated with sampler. SamplerFilterMode Return type: cl_filter_mode  Return the filter mode value associated with sampler.
        /// </param>
        /// <param name="param_value_size"> 
        /// Specifies the size in bytes of memory pointed to by param_value. This size must be ≥ size of return type as described in the table above.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data copied to param_value. If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetSamplerInfo")]
        [CLSCompliant(false)]
        public static ErrorCode GetSamplerInfo(ComputeSampler sampler, OpenTK.Compute.CL12.SamplerInfo param_name, IntPtr param_value_size, IntPtr param_value, [OutAttribute] out IntPtr param_value_size_ret) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Returns information about the sampler object.
        /// </summary>
        /// <param name="sampler"> 
        /// Specifies the sampler being queried.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the information to query. The list of supported param_name types and the information returned in param_value by clGetSamplerInfo is described in the table below. cl_sampler_infoReturn Type and Info. returned in param_valueSamplerReferenceCount Return type: cl_uint  Return the sampler reference count. The reference count returned should be considered immediately stale. It is unsuitable for general use in applications. This feature is provided for identifying memory leaks. SamplerContext Return type: cl_context  Return the context specified when the sampler is created. SamplerNormalizedCoords Return type: cl_bool  Return the normalized coords value associated with sampler. SamplerAddressingMode Return type: cl_addressing_mode  Return the addressing mode value associated with sampler. SamplerFilterMode Return type: cl_filter_mode  Return the filter mode value associated with sampler.
        /// </param>
        /// <param name="param_value_size"> 
        /// Specifies the size in bytes of memory pointed to by param_value. This size must be ≥ size of return type as described in the table above.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data copied to param_value. If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetSamplerInfo")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode GetSamplerInfo(ComputeSampler sampler, OpenTK.Compute.CL12.SamplerInfo param_name, IntPtr param_value_size, IntPtr param_value, [OutAttribute] IntPtr* param_value_size_ret) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Returns information about the sampler object.
        /// </summary>
        /// <param name="sampler"> 
        /// Specifies the sampler being queried.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the information to query. The list of supported param_name types and the information returned in param_value by clGetSamplerInfo is described in the table below. cl_sampler_infoReturn Type and Info. returned in param_valueSamplerReferenceCount Return type: cl_uint  Return the sampler reference count. The reference count returned should be considered immediately stale. It is unsuitable for general use in applications. This feature is provided for identifying memory leaks. SamplerContext Return type: cl_context  Return the context specified when the sampler is created. SamplerNormalizedCoords Return type: cl_bool  Return the normalized coords value associated with sampler. SamplerAddressingMode Return type: cl_addressing_mode  Return the addressing mode value associated with sampler. SamplerFilterMode Return type: cl_filter_mode  Return the filter mode value associated with sampler.
        /// </param>
        /// <param name="param_value_size"> 
        /// Specifies the size in bytes of memory pointed to by param_value. This size must be ≥ size of return type as described in the table above.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data copied to param_value. If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetSamplerInfo")]
        [CLSCompliant(false)]
        public static ErrorCode GetSamplerInfo<T3>(ComputeSampler sampler, OpenTK.Compute.CL12.SamplerInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] T3[] param_value, [OutAttribute] IntPtr[] param_value_size_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Returns information about the sampler object.
        /// </summary>
        /// <param name="sampler"> 
        /// Specifies the sampler being queried.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the information to query. The list of supported param_name types and the information returned in param_value by clGetSamplerInfo is described in the table below. cl_sampler_infoReturn Type and Info. returned in param_valueSamplerReferenceCount Return type: cl_uint  Return the sampler reference count. The reference count returned should be considered immediately stale. It is unsuitable for general use in applications. This feature is provided for identifying memory leaks. SamplerContext Return type: cl_context  Return the context specified when the sampler is created. SamplerNormalizedCoords Return type: cl_bool  Return the normalized coords value associated with sampler. SamplerAddressingMode Return type: cl_addressing_mode  Return the addressing mode value associated with sampler. SamplerFilterMode Return type: cl_filter_mode  Return the filter mode value associated with sampler.
        /// </param>
        /// <param name="param_value_size"> 
        /// Specifies the size in bytes of memory pointed to by param_value. This size must be ≥ size of return type as described in the table above.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data copied to param_value. If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetSamplerInfo")]
        [CLSCompliant(false)]
        public static ErrorCode GetSamplerInfo<T3>(ComputeSampler sampler, OpenTK.Compute.CL12.SamplerInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] T3[] param_value, [OutAttribute] out IntPtr param_value_size_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Returns information about the sampler object.
        /// </summary>
        /// <param name="sampler"> 
        /// Specifies the sampler being queried.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the information to query. The list of supported param_name types and the information returned in param_value by clGetSamplerInfo is described in the table below. cl_sampler_infoReturn Type and Info. returned in param_valueSamplerReferenceCount Return type: cl_uint  Return the sampler reference count. The reference count returned should be considered immediately stale. It is unsuitable for general use in applications. This feature is provided for identifying memory leaks. SamplerContext Return type: cl_context  Return the context specified when the sampler is created. SamplerNormalizedCoords Return type: cl_bool  Return the normalized coords value associated with sampler. SamplerAddressingMode Return type: cl_addressing_mode  Return the addressing mode value associated with sampler. SamplerFilterMode Return type: cl_filter_mode  Return the filter mode value associated with sampler.
        /// </param>
        /// <param name="param_value_size"> 
        /// Specifies the size in bytes of memory pointed to by param_value. This size must be ≥ size of return type as described in the table above.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data copied to param_value. If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetSamplerInfo")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode GetSamplerInfo<T3>(ComputeSampler sampler, OpenTK.Compute.CL12.SamplerInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] T3[] param_value, [OutAttribute] IntPtr* param_value_size_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Returns information about the sampler object.
        /// </summary>
        /// <param name="sampler"> 
        /// Specifies the sampler being queried.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the information to query. The list of supported param_name types and the information returned in param_value by clGetSamplerInfo is described in the table below. cl_sampler_infoReturn Type and Info. returned in param_valueSamplerReferenceCount Return type: cl_uint  Return the sampler reference count. The reference count returned should be considered immediately stale. It is unsuitable for general use in applications. This feature is provided for identifying memory leaks. SamplerContext Return type: cl_context  Return the context specified when the sampler is created. SamplerNormalizedCoords Return type: cl_bool  Return the normalized coords value associated with sampler. SamplerAddressingMode Return type: cl_addressing_mode  Return the addressing mode value associated with sampler. SamplerFilterMode Return type: cl_filter_mode  Return the filter mode value associated with sampler.
        /// </param>
        /// <param name="param_value_size"> 
        /// Specifies the size in bytes of memory pointed to by param_value. This size must be ≥ size of return type as described in the table above.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data copied to param_value. If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetSamplerInfo")]
        [CLSCompliant(false)]
        public static ErrorCode GetSamplerInfo<T3>(ComputeSampler sampler, OpenTK.Compute.CL12.SamplerInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] T3[,] param_value, [OutAttribute] IntPtr[] param_value_size_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Returns information about the sampler object.
        /// </summary>
        /// <param name="sampler"> 
        /// Specifies the sampler being queried.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the information to query. The list of supported param_name types and the information returned in param_value by clGetSamplerInfo is described in the table below. cl_sampler_infoReturn Type and Info. returned in param_valueSamplerReferenceCount Return type: cl_uint  Return the sampler reference count. The reference count returned should be considered immediately stale. It is unsuitable for general use in applications. This feature is provided for identifying memory leaks. SamplerContext Return type: cl_context  Return the context specified when the sampler is created. SamplerNormalizedCoords Return type: cl_bool  Return the normalized coords value associated with sampler. SamplerAddressingMode Return type: cl_addressing_mode  Return the addressing mode value associated with sampler. SamplerFilterMode Return type: cl_filter_mode  Return the filter mode value associated with sampler.
        /// </param>
        /// <param name="param_value_size"> 
        /// Specifies the size in bytes of memory pointed to by param_value. This size must be ≥ size of return type as described in the table above.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data copied to param_value. If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetSamplerInfo")]
        [CLSCompliant(false)]
        public static ErrorCode GetSamplerInfo<T3>(ComputeSampler sampler, OpenTK.Compute.CL12.SamplerInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] T3[,] param_value, [OutAttribute] out IntPtr param_value_size_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Returns information about the sampler object.
        /// </summary>
        /// <param name="sampler"> 
        /// Specifies the sampler being queried.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the information to query. The list of supported param_name types and the information returned in param_value by clGetSamplerInfo is described in the table below. cl_sampler_infoReturn Type and Info. returned in param_valueSamplerReferenceCount Return type: cl_uint  Return the sampler reference count. The reference count returned should be considered immediately stale. It is unsuitable for general use in applications. This feature is provided for identifying memory leaks. SamplerContext Return type: cl_context  Return the context specified when the sampler is created. SamplerNormalizedCoords Return type: cl_bool  Return the normalized coords value associated with sampler. SamplerAddressingMode Return type: cl_addressing_mode  Return the addressing mode value associated with sampler. SamplerFilterMode Return type: cl_filter_mode  Return the filter mode value associated with sampler.
        /// </param>
        /// <param name="param_value_size"> 
        /// Specifies the size in bytes of memory pointed to by param_value. This size must be ≥ size of return type as described in the table above.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data copied to param_value. If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetSamplerInfo")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode GetSamplerInfo<T3>(ComputeSampler sampler, OpenTK.Compute.CL12.SamplerInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] T3[,] param_value, [OutAttribute] IntPtr* param_value_size_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Returns information about the sampler object.
        /// </summary>
        /// <param name="sampler"> 
        /// Specifies the sampler being queried.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the information to query. The list of supported param_name types and the information returned in param_value by clGetSamplerInfo is described in the table below. cl_sampler_infoReturn Type and Info. returned in param_valueSamplerReferenceCount Return type: cl_uint  Return the sampler reference count. The reference count returned should be considered immediately stale. It is unsuitable for general use in applications. This feature is provided for identifying memory leaks. SamplerContext Return type: cl_context  Return the context specified when the sampler is created. SamplerNormalizedCoords Return type: cl_bool  Return the normalized coords value associated with sampler. SamplerAddressingMode Return type: cl_addressing_mode  Return the addressing mode value associated with sampler. SamplerFilterMode Return type: cl_filter_mode  Return the filter mode value associated with sampler.
        /// </param>
        /// <param name="param_value_size"> 
        /// Specifies the size in bytes of memory pointed to by param_value. This size must be ≥ size of return type as described in the table above.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data copied to param_value. If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetSamplerInfo")]
        [CLSCompliant(false)]
        public static ErrorCode GetSamplerInfo<T3>(ComputeSampler sampler, OpenTK.Compute.CL12.SamplerInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] T3[,,] param_value, [OutAttribute] IntPtr[] param_value_size_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Returns information about the sampler object.
        /// </summary>
        /// <param name="sampler"> 
        /// Specifies the sampler being queried.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the information to query. The list of supported param_name types and the information returned in param_value by clGetSamplerInfo is described in the table below. cl_sampler_infoReturn Type and Info. returned in param_valueSamplerReferenceCount Return type: cl_uint  Return the sampler reference count. The reference count returned should be considered immediately stale. It is unsuitable for general use in applications. This feature is provided for identifying memory leaks. SamplerContext Return type: cl_context  Return the context specified when the sampler is created. SamplerNormalizedCoords Return type: cl_bool  Return the normalized coords value associated with sampler. SamplerAddressingMode Return type: cl_addressing_mode  Return the addressing mode value associated with sampler. SamplerFilterMode Return type: cl_filter_mode  Return the filter mode value associated with sampler.
        /// </param>
        /// <param name="param_value_size"> 
        /// Specifies the size in bytes of memory pointed to by param_value. This size must be ≥ size of return type as described in the table above.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data copied to param_value. If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetSamplerInfo")]
        [CLSCompliant(false)]
        public static ErrorCode GetSamplerInfo<T3>(ComputeSampler sampler, OpenTK.Compute.CL12.SamplerInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] T3[,,] param_value, [OutAttribute] out IntPtr param_value_size_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Returns information about the sampler object.
        /// </summary>
        /// <param name="sampler"> 
        /// Specifies the sampler being queried.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the information to query. The list of supported param_name types and the information returned in param_value by clGetSamplerInfo is described in the table below. cl_sampler_infoReturn Type and Info. returned in param_valueSamplerReferenceCount Return type: cl_uint  Return the sampler reference count. The reference count returned should be considered immediately stale. It is unsuitable for general use in applications. This feature is provided for identifying memory leaks. SamplerContext Return type: cl_context  Return the context specified when the sampler is created. SamplerNormalizedCoords Return type: cl_bool  Return the normalized coords value associated with sampler. SamplerAddressingMode Return type: cl_addressing_mode  Return the addressing mode value associated with sampler. SamplerFilterMode Return type: cl_filter_mode  Return the filter mode value associated with sampler.
        /// </param>
        /// <param name="param_value_size"> 
        /// Specifies the size in bytes of memory pointed to by param_value. This size must be ≥ size of return type as described in the table above.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data copied to param_value. If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetSamplerInfo")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode GetSamplerInfo<T3>(ComputeSampler sampler, OpenTK.Compute.CL12.SamplerInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] T3[,,] param_value, [OutAttribute] IntPtr* param_value_size_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Returns information about the sampler object.
        /// </summary>
        /// <param name="sampler"> 
        /// Specifies the sampler being queried.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the information to query. The list of supported param_name types and the information returned in param_value by clGetSamplerInfo is described in the table below. cl_sampler_infoReturn Type and Info. returned in param_valueSamplerReferenceCount Return type: cl_uint  Return the sampler reference count. The reference count returned should be considered immediately stale. It is unsuitable for general use in applications. This feature is provided for identifying memory leaks. SamplerContext Return type: cl_context  Return the context specified when the sampler is created. SamplerNormalizedCoords Return type: cl_bool  Return the normalized coords value associated with sampler. SamplerAddressingMode Return type: cl_addressing_mode  Return the addressing mode value associated with sampler. SamplerFilterMode Return type: cl_filter_mode  Return the filter mode value associated with sampler.
        /// </param>
        /// <param name="param_value_size"> 
        /// Specifies the size in bytes of memory pointed to by param_value. This size must be ≥ size of return type as described in the table above.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data copied to param_value. If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetSamplerInfo")]
        [CLSCompliant(false)]
        public static ErrorCode GetSamplerInfo<T3>(ComputeSampler sampler, OpenTK.Compute.CL12.SamplerInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] ref T3 param_value, [OutAttribute] IntPtr[] param_value_size_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Returns information about the sampler object.
        /// </summary>
        /// <param name="sampler"> 
        /// Specifies the sampler being queried.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the information to query. The list of supported param_name types and the information returned in param_value by clGetSamplerInfo is described in the table below. cl_sampler_infoReturn Type and Info. returned in param_valueSamplerReferenceCount Return type: cl_uint  Return the sampler reference count. The reference count returned should be considered immediately stale. It is unsuitable for general use in applications. This feature is provided for identifying memory leaks. SamplerContext Return type: cl_context  Return the context specified when the sampler is created. SamplerNormalizedCoords Return type: cl_bool  Return the normalized coords value associated with sampler. SamplerAddressingMode Return type: cl_addressing_mode  Return the addressing mode value associated with sampler. SamplerFilterMode Return type: cl_filter_mode  Return the filter mode value associated with sampler.
        /// </param>
        /// <param name="param_value_size"> 
        /// Specifies the size in bytes of memory pointed to by param_value. This size must be ≥ size of return type as described in the table above.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data copied to param_value. If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetSamplerInfo")]
        [CLSCompliant(false)]
        public static ErrorCode GetSamplerInfo<T3>(ComputeSampler sampler, OpenTK.Compute.CL12.SamplerInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] ref T3 param_value, [OutAttribute] out IntPtr param_value_size_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Returns information about the sampler object.
        /// </summary>
        /// <param name="sampler"> 
        /// Specifies the sampler being queried.
        /// </param>
        /// <param name="param_name"> 
        /// Specifies the information to query. The list of supported param_name types and the information returned in param_value by clGetSamplerInfo is described in the table below. cl_sampler_infoReturn Type and Info. returned in param_valueSamplerReferenceCount Return type: cl_uint  Return the sampler reference count. The reference count returned should be considered immediately stale. It is unsuitable for general use in applications. This feature is provided for identifying memory leaks. SamplerContext Return type: cl_context  Return the context specified when the sampler is created. SamplerNormalizedCoords Return type: cl_bool  Return the normalized coords value associated with sampler. SamplerAddressingMode Return type: cl_addressing_mode  Return the addressing mode value associated with sampler. SamplerFilterMode Return type: cl_filter_mode  Return the filter mode value associated with sampler.
        /// </param>
        /// <param name="param_value_size"> 
        /// Specifies the size in bytes of memory pointed to by param_value. This size must be ≥ size of return type as described in the table above.
        /// </param>
        /// <param name="param_value"> 
        /// A pointer to memory where the appropriate result being queried is returned. If param_value is NULL, it is ignored.
        /// </param>
        /// <param name="param_value_size_ret"> 
        /// Returns the actual size in bytes of data copied to param_value. If param_value_size_ret is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetSamplerInfo")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode GetSamplerInfo<T3>(ComputeSampler sampler, OpenTK.Compute.CL12.SamplerInfo param_name, IntPtr param_value_size, [InAttribute, OutAttribute] ref T3 param_value, [OutAttribute] IntPtr* param_value_size_ret)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Get the list of image formats supported by an OpenCL implementation.
        /// </summary>
        /// <param name="context"> 
        /// A valid OpenCL context on which the image object(s) will be created.
        /// </param>
        /// <param name="flags"> 
        /// A bit-field that is used to specify allocation and usage information about the image memory object being created and is described in the table below.
        /// </param>
        /// <param name="image_type"> 
        /// Describes the image type and must be either MemObjectImage1D, MemObjectImage1DBuffer, MemObjectImage2D, MemObjectImage3D, MemObjectImage1DArray or MemObjectImage2DArray.
        /// </param>
        /// <param name="num_entries"> 
        /// Specifies the number of entries that can be returned in the memory location given by image_formats.
        /// </param>
        /// <param name="image_formats"> 
        /// A pointer to a memory location where the list of supported image formats are returned. Each entry describes a cl_image_format structure supported by the OpenCL implementation. If image_formats is NULL, it is ignored.
        /// </param>
        /// <param name="num_image_formats"> 
        /// The actual number of supported image formats for a specific context and values specified by flags. If num_image_formats is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetSupportedImageFormats")]
        [CLSCompliant(false)]
        public static ErrorCode GetSupportedImageFormats(ComputeContext context, OpenTK.Compute.CL12.MemFlags flags, OpenTK.Compute.CL12.MemObjectType image_type, Int32 num_entries, ImageFormat[] image_formats, Int32[] num_image_formats) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Get the list of image formats supported by an OpenCL implementation.
        /// </summary>
        /// <param name="context"> 
        /// A valid OpenCL context on which the image object(s) will be created.
        /// </param>
        /// <param name="flags"> 
        /// A bit-field that is used to specify allocation and usage information about the image memory object being created and is described in the table below.
        /// </param>
        /// <param name="image_type"> 
        /// Describes the image type and must be either MemObjectImage1D, MemObjectImage1DBuffer, MemObjectImage2D, MemObjectImage3D, MemObjectImage1DArray or MemObjectImage2DArray.
        /// </param>
        /// <param name="num_entries"> 
        /// Specifies the number of entries that can be returned in the memory location given by image_formats.
        /// </param>
        /// <param name="image_formats"> 
        /// A pointer to a memory location where the list of supported image formats are returned. Each entry describes a cl_image_format structure supported by the OpenCL implementation. If image_formats is NULL, it is ignored.
        /// </param>
        /// <param name="num_image_formats"> 
        /// The actual number of supported image formats for a specific context and values specified by flags. If num_image_formats is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetSupportedImageFormats")]
        [CLSCompliant(false)]
        public static ErrorCode GetSupportedImageFormats(ComputeContext context, OpenTK.Compute.CL12.MemFlags flags, OpenTK.Compute.CL12.MemObjectType image_type, Int32 num_entries, ref ImageFormat image_formats, ref Int32 num_image_formats) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Get the list of image formats supported by an OpenCL implementation.
        /// </summary>
        /// <param name="context"> 
        /// A valid OpenCL context on which the image object(s) will be created.
        /// </param>
        /// <param name="flags"> 
        /// A bit-field that is used to specify allocation and usage information about the image memory object being created and is described in the table below.
        /// </param>
        /// <param name="image_type"> 
        /// Describes the image type and must be either MemObjectImage1D, MemObjectImage1DBuffer, MemObjectImage2D, MemObjectImage3D, MemObjectImage1DArray or MemObjectImage2DArray.
        /// </param>
        /// <param name="num_entries"> 
        /// Specifies the number of entries that can be returned in the memory location given by image_formats.
        /// </param>
        /// <param name="image_formats"> 
        /// A pointer to a memory location where the list of supported image formats are returned. Each entry describes a cl_image_format structure supported by the OpenCL implementation. If image_formats is NULL, it is ignored.
        /// </param>
        /// <param name="num_image_formats"> 
        /// The actual number of supported image formats for a specific context and values specified by flags. If num_image_formats is NULL, it is ignored.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clGetSupportedImageFormats")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode GetSupportedImageFormats(ComputeContext context, OpenTK.Compute.CL12.MemFlags flags, OpenTK.Compute.CL12.MemObjectType image_type, Int32 num_entries, ImageFormat* image_formats, Int32* num_image_formats) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.2]
        /// Links a set of compiled program objects and libraries for all the devices or a specific device(s) in the OpenCL context and creates an executable.
        /// </summary>
        /// <param name="context"> 
        /// Must be a valid OpenCL context.
        /// </param>
        /// <param name="num_devices"> 
        /// The number of devices listed in device_list.
        /// </param>
        /// <param name="device_list"> 
        /// A pointer to a list of devices that are in context. If device_list is a NULL value, the link is performed for all devices associated with context for which a compiled object is available.  If device_list is a non-NULL value, the compile is performed for devices specified in this list for which a source has been loaded.
        /// </param>
        /// <param name="options"> 
        /// A pointer to a null-terminated string of characters that describes the link options to be used for building the program executable. See clBuildProgram for a list of supported compiler and linker options.
        /// </param>
        /// <param name="num_input_programs"> 
        /// Specifies the number of programs in array referenced by input_programs.
        /// </param>
        /// <param name="input_programs"> 
        /// An array of program objects that are compiled binaries or libraries that are to be linked to create the program executable.  For each device in device_list or if device_list is NULL the list of devices associated with context, the following cases occur:  All programs specified by input_programs contain a compiled binary or library for the device.  In this case, a link is performed to generate a program executable for this device.  None of the programs contain a compiled binary or library for that device. In this case, no link is performed and there will be no program executable generated for this device.  All other cases will return a InvalidOperation error.
        /// </param>
        /// <param name="notify"> 
        /// A function pointer to a notification routine.  The notification routine is a callback function that an application can register and which will be called when the program executable has been built (successfully or unsuccessfully).  If pfn_notify is not NULL, clLinkProgram does not need to wait for the linker to complete and can return immediately once the linking operation can begin.  Once the linker has completed, the pfn_notify callback function is called which returns the program object returned by clLinkProgram. The application can query the link status and log for this program object. This callback function may be called asynchronously by the OpenCL implementation.  It is the application’s responsibility to ensure that the callback function is thread-safe.  If pfn_notify is NULL, clLinkProgram does not return until the linker has completed.
        /// </param>
        /// <param name="user_data"> 
        /// Will be passed as an argument when pfn_notify is called. user_data can be NULL.
        /// </param>
        [AutoGenerated(Category = "", Version = "1.2", EntryPoint = "clLinkProgram")]
        [CLSCompliant(false)]
        public static OpenTK.Compute.CL12.ErrorCode LinkProgram(ComputeContext context, Int32 num_devices, ComputeDevice[] device_list, String options, Int32 num_input_programs, ComputeProgram[] input_programs, ProgramNotifyDelegate notify, IntPtr user_data) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.2]
        /// Links a set of compiled program objects and libraries for all the devices or a specific device(s) in the OpenCL context and creates an executable.
        /// </summary>
        /// <param name="context"> 
        /// Must be a valid OpenCL context.
        /// </param>
        /// <param name="num_devices"> 
        /// The number of devices listed in device_list.
        /// </param>
        /// <param name="device_list"> 
        /// A pointer to a list of devices that are in context. If device_list is a NULL value, the link is performed for all devices associated with context for which a compiled object is available.  If device_list is a non-NULL value, the compile is performed for devices specified in this list for which a source has been loaded.
        /// </param>
        /// <param name="options"> 
        /// A pointer to a null-terminated string of characters that describes the link options to be used for building the program executable. See clBuildProgram for a list of supported compiler and linker options.
        /// </param>
        /// <param name="num_input_programs"> 
        /// Specifies the number of programs in array referenced by input_programs.
        /// </param>
        /// <param name="input_programs"> 
        /// An array of program objects that are compiled binaries or libraries that are to be linked to create the program executable.  For each device in device_list or if device_list is NULL the list of devices associated with context, the following cases occur:  All programs specified by input_programs contain a compiled binary or library for the device.  In this case, a link is performed to generate a program executable for this device.  None of the programs contain a compiled binary or library for that device. In this case, no link is performed and there will be no program executable generated for this device.  All other cases will return a InvalidOperation error.
        /// </param>
        /// <param name="notify"> 
        /// A function pointer to a notification routine.  The notification routine is a callback function that an application can register and which will be called when the program executable has been built (successfully or unsuccessfully).  If pfn_notify is not NULL, clLinkProgram does not need to wait for the linker to complete and can return immediately once the linking operation can begin.  Once the linker has completed, the pfn_notify callback function is called which returns the program object returned by clLinkProgram. The application can query the link status and log for this program object. This callback function may be called asynchronously by the OpenCL implementation.  It is the application’s responsibility to ensure that the callback function is thread-safe.  If pfn_notify is NULL, clLinkProgram does not return until the linker has completed.
        /// </param>
        /// <param name="user_data"> 
        /// Will be passed as an argument when pfn_notify is called. user_data can be NULL.
        /// </param>
        [AutoGenerated(Category = "", Version = "1.2", EntryPoint = "clLinkProgram")]
        [CLSCompliant(false)]
        public static OpenTK.Compute.CL12.ErrorCode LinkProgram(ComputeContext context, Int32 num_devices, ref ComputeDevice device_list, String options, Int32 num_input_programs, ref ComputeProgram input_programs, ProgramNotifyDelegate notify, IntPtr user_data) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.2]
        /// Links a set of compiled program objects and libraries for all the devices or a specific device(s) in the OpenCL context and creates an executable.
        /// </summary>
        /// <param name="context"> 
        /// Must be a valid OpenCL context.
        /// </param>
        /// <param name="num_devices"> 
        /// The number of devices listed in device_list.
        /// </param>
        /// <param name="device_list"> 
        /// A pointer to a list of devices that are in context. If device_list is a NULL value, the link is performed for all devices associated with context for which a compiled object is available.  If device_list is a non-NULL value, the compile is performed for devices specified in this list for which a source has been loaded.
        /// </param>
        /// <param name="options"> 
        /// A pointer to a null-terminated string of characters that describes the link options to be used for building the program executable. See clBuildProgram for a list of supported compiler and linker options.
        /// </param>
        /// <param name="num_input_programs"> 
        /// Specifies the number of programs in array referenced by input_programs.
        /// </param>
        /// <param name="input_programs"> 
        /// An array of program objects that are compiled binaries or libraries that are to be linked to create the program executable.  For each device in device_list or if device_list is NULL the list of devices associated with context, the following cases occur:  All programs specified by input_programs contain a compiled binary or library for the device.  In this case, a link is performed to generate a program executable for this device.  None of the programs contain a compiled binary or library for that device. In this case, no link is performed and there will be no program executable generated for this device.  All other cases will return a InvalidOperation error.
        /// </param>
        /// <param name="notify"> 
        /// A function pointer to a notification routine.  The notification routine is a callback function that an application can register and which will be called when the program executable has been built (successfully or unsuccessfully).  If pfn_notify is not NULL, clLinkProgram does not need to wait for the linker to complete and can return immediately once the linking operation can begin.  Once the linker has completed, the pfn_notify callback function is called which returns the program object returned by clLinkProgram. The application can query the link status and log for this program object. This callback function may be called asynchronously by the OpenCL implementation.  It is the application’s responsibility to ensure that the callback function is thread-safe.  If pfn_notify is NULL, clLinkProgram does not return until the linker has completed.
        /// </param>
        /// <param name="user_data"> 
        /// Will be passed as an argument when pfn_notify is called. user_data can be NULL.
        /// </param>
        [AutoGenerated(Category = "", Version = "1.2", EntryPoint = "clLinkProgram")]
        [CLSCompliant(false)]
        public static unsafe OpenTK.Compute.CL12.ErrorCode LinkProgram(ComputeContext context, Int32 num_devices, ComputeDevice* device_list, String options, Int32 num_input_programs, ComputeProgram* input_programs, ProgramNotifyDelegate notify, IntPtr user_data) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Decrements the command_queue reference count.
        /// </summary>
        /// <param name="command_queue"> 
        /// Specifies the command-queue to release.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clReleaseCommandQueue")]
        public static ErrorCode ReleaseCommandQueue(CommandQueue command_queue) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Decrement the context reference count.
        /// </summary>
        /// <param name="context"> 
        /// The context to release.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clReleaseContext")]
        public static ErrorCode ReleaseContext(ComputeContext context) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.2]
        /// Decrements the device reference count.
        /// </summary>
        /// <param name="device"></param>
        [AutoGenerated(Category = "", Version = "1.2", EntryPoint = "clReleaseDevice")]
        public static ErrorCode ReleaseDevice(ComputeDevice device) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Decrements the event reference count.
        /// </summary>
        /// <param name="event"> 
        /// Event object being released.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clReleaseEvent")]
        public static ErrorCode ReleaseEvent(ComputeEvent @event) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Decrements the kernel reference count.
        /// </summary>
        /// <param name="kernel"></param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clReleaseKernel")]
        public static ErrorCode ReleaseKernel(ComputeKernel kernel) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Decrements the memory object reference count.
        /// </summary>
        /// <param name="memobj"></param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clReleaseMemObject")]
        public static ErrorCode ReleaseMemObject(ComputeMemory memobj) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Decrements the program reference count.
        /// </summary>
        /// <param name="program"></param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clReleaseProgram")]
        public static ErrorCode ReleaseProgram(ComputeProgram program) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Decrements the sampler reference count.
        /// </summary>
        /// <param name="sampler"> 
        /// Specifies the sampler being retained.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clReleaseSampler")]
        public static ErrorCode ReleaseSampler(ComputeSampler sampler) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Increments the command_queue reference count.
        /// </summary>
        /// <param name="command_queue"> 
        /// Specifies the command-queue to retain.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clRetainCommandQueue")]
        public static ErrorCode RetainCommandQueue(CommandQueue command_queue) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Increment the context reference count.
        /// </summary>
        /// <param name="context"> 
        /// The context to retain.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clRetainContext")]
        public static ErrorCode RetainContext(ComputeContext context) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.2]
        /// Increments the devices reference count.
        /// </summary>
        /// <param name="device"></param>
        [AutoGenerated(Category = "", Version = "1.2", EntryPoint = "clRetainDevice")]
        public static ErrorCode RetainDevice(ComputeDevice device) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Increments the event reference count.
        /// </summary>
        /// <param name="event"> 
        /// Event object being retained.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clRetainEvent")]
        public static Int32 RetainEvent(ComputeEvent @event) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Increments the kernel object reference count.
        /// </summary>
        /// <param name="kernel"></param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clRetainKernel")]
        public static ErrorCode RetainKernel(ComputeKernel kernel) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Increments the memory object reference count.
        /// </summary>
        /// <param name="memobj"> 
        /// A valid memory object.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clRetainMemObject")]
        public static ErrorCode RetainMemObject(ComputeMemory memobj) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Increments the program reference count.
        /// </summary>
        /// <param name="program"></param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clRetainProgram")]
        public static ErrorCode RetainProgram(ComputeProgram program) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Increments the sampler reference count.
        /// </summary>
        /// <param name="sampler"> 
        /// Specifies the sampler being retained.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clRetainSampler")]
        public static ErrorCode RetainSampler(ComputeSampler sampler) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.1]
        /// Registers a user callback function for a specific command execution status.
        /// </summary>
        /// <param name="event"> 
        /// A valid event object.
        /// </param>
        /// <param name="command_exec_callback_type"> 
        /// The command execution status for which the callback is registered. The command execution callback value for which a callback can be registered is Submitted, Running, or Complete. There is no guarantee that the callback functions registered for various execution status values for an event will be called in the exact order that the execution status of a command changes. Furthermore, it should be noted that receiving a call back for an event with a status other than Complete, in no way implies that the memory model or execution model as defined by the OpenCL specification has changed. For example, it is not valid to assume that a corresponding memory transfer has completed unless the event is in a state Complete.  The callback function registered for a command_exec_callback_type value of Complete will be called when the command has completed successfully or is abnormally terminated.
        /// </param>
        /// <param name="notify"> 
        /// The event callback function that can be registered by the application. This callback function may be called asynchronously by the OpenCL implementation. It is the application's responsibility to ensure that the callback function is thread-safe. The parameters to this callback function are: event is the event object for which the callback function is invoked. event_command_exec_status represents the execution status of command for which this callback function is invoked. See the table of values for param_value for clGetEventInfo for the command execution status values. If the callback is called as the result of the command associated with event being abnormally terminated, an appropriate error code for the error that caused the termination will be passed to event_command_exec_status instead. user_data is a pointer to user supplied data.
        /// </param>
        /// <param name="user_data"> 
        /// Will be passed as the user_data argument when pfn_notify is called. user_data can be NULL.
        /// </param>
        [AutoGenerated(Category = "", Version = "1.1", EntryPoint = "clSetEventCallback")]
        public static OpenTK.Compute.CL12.ErrorCode SetEventCallback(ComputeEvent @event, OpenTK.Compute.CL12.CommandExecutionStatusFlags command_exec_callback_type, EventNotifyDelegate notify, IntPtr user_data) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Used to set the argument value for a specific argument of a kernel.
        /// </summary>
        /// <param name="kernel"> 
        /// A valid kernel object.
        /// </param>
        /// <param name="arg_index"> 
        /// The argument index. Arguments to the kernel are referred by indices that go from 0 for the leftmost argument to n - 1, where n is the total number of arguments declared by a kernel.
        /// </param>
        /// <param name="arg_size"> 
        /// Specifies the size of the argument value. If the argument is a memory object, the size is the size of the buffer or image object type. For arguments declared with the __local qualifier, the size specified will be the size in bytes of the buffer that must be allocated for the __local argument. If the argument is of type sampler_t, the arg_size value must be equal to sizeof(cl_sampler). For all other arguments, the size will be the size of argument type.
        /// </param>
        /// <param name="arg_value"> 
        /// A pointer to data that should be used as the argument value for argument specified by arg_index. The argument data pointed to by arg_value is copied and the arg_value pointer can therefore be reused by the application after clSetKernelArg returns. The argument value specified is the value used by all API calls that enqueue kernel (clEnqueueNDRangeKernel and clEnqueueTask) until the argument value is changed by a call to clSetKernelArg for kernel.  If the argument is a memory object (buffer, image or image array), the arg_value entry will be a pointer to the appropriate buffer, image or image array object.  The memory object must be created with the context associated with the kernel object.  If the argument is a buffer object, the arg_value pointer can be NULL or point to a NULL value in which case a NULL value will be used as the value for the argument declared as a pointer to __global or __constant memory in the kernel.  If the argument is declared with the __local qualifier, the arg_value entry must be NULL.  If the argument is of type sampler_t, the arg_value entry must be a pointer to the sampler object.  If the argument is declared to be a pointer of a built-in scalar or vector type, or a user defined structure type in the global or constant address space, the memory object specified as argument value must be a buffer object (or NULL). If the argument is declared with the __constant qualifier, the size in bytes of the memory object cannot exceed DeviceMaxConstantBufferSize and the number of arguments declared as pointers to __constant memory cannot exceed DeviceMaxConstantArgs.  The memory object specified as argument value must be a 2D image object if the argument is declared to be of type image2d_t. The memory object specified as argument value must be a 3D image object if argument is declared to be of type image3d_t. The memory object specified as argument value must be a 1D image object if the argument is declared to be of type image1d_t. The memory object specified as argument value must be a 1D image buffer object if the argument is declared to be of type image1d_buffer_t. The memory object specified as argument value must be a 1D image array object if argument is declared to be of type image1d_array_t. The memory object specified as argument value must be a 2D image array object if argument is declared to be of type image2d_array_t.  For all other kernel arguments, the arg_value entry must be a pointer to the actual data to be used as argument value.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clSetKernelArg")]
        public static ErrorCode SetKernelArg(ComputeKernel kernel, Int32 arg_index, IntPtr arg_size, IntPtr arg_value) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Used to set the argument value for a specific argument of a kernel.
        /// </summary>
        /// <param name="kernel"> 
        /// A valid kernel object.
        /// </param>
        /// <param name="arg_index"> 
        /// The argument index. Arguments to the kernel are referred by indices that go from 0 for the leftmost argument to n - 1, where n is the total number of arguments declared by a kernel.
        /// </param>
        /// <param name="arg_size"> 
        /// Specifies the size of the argument value. If the argument is a memory object, the size is the size of the buffer or image object type. For arguments declared with the __local qualifier, the size specified will be the size in bytes of the buffer that must be allocated for the __local argument. If the argument is of type sampler_t, the arg_size value must be equal to sizeof(cl_sampler). For all other arguments, the size will be the size of argument type.
        /// </param>
        /// <param name="arg_value"> 
        /// A pointer to data that should be used as the argument value for argument specified by arg_index. The argument data pointed to by arg_value is copied and the arg_value pointer can therefore be reused by the application after clSetKernelArg returns. The argument value specified is the value used by all API calls that enqueue kernel (clEnqueueNDRangeKernel and clEnqueueTask) until the argument value is changed by a call to clSetKernelArg for kernel.  If the argument is a memory object (buffer, image or image array), the arg_value entry will be a pointer to the appropriate buffer, image or image array object.  The memory object must be created with the context associated with the kernel object.  If the argument is a buffer object, the arg_value pointer can be NULL or point to a NULL value in which case a NULL value will be used as the value for the argument declared as a pointer to __global or __constant memory in the kernel.  If the argument is declared with the __local qualifier, the arg_value entry must be NULL.  If the argument is of type sampler_t, the arg_value entry must be a pointer to the sampler object.  If the argument is declared to be a pointer of a built-in scalar or vector type, or a user defined structure type in the global or constant address space, the memory object specified as argument value must be a buffer object (or NULL). If the argument is declared with the __constant qualifier, the size in bytes of the memory object cannot exceed DeviceMaxConstantBufferSize and the number of arguments declared as pointers to __constant memory cannot exceed DeviceMaxConstantArgs.  The memory object specified as argument value must be a 2D image object if the argument is declared to be of type image2d_t. The memory object specified as argument value must be a 3D image object if argument is declared to be of type image3d_t. The memory object specified as argument value must be a 1D image object if the argument is declared to be of type image1d_t. The memory object specified as argument value must be a 1D image buffer object if the argument is declared to be of type image1d_buffer_t. The memory object specified as argument value must be a 1D image array object if argument is declared to be of type image1d_array_t. The memory object specified as argument value must be a 2D image array object if argument is declared to be of type image2d_array_t.  For all other kernel arguments, the arg_value entry must be a pointer to the actual data to be used as argument value.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clSetKernelArg")]
        [CLSCompliant(false)]
        public static ErrorCode SetKernelArg<T3>(ComputeKernel kernel, Int32 arg_index, IntPtr arg_size, [InAttribute, OutAttribute] T3[] arg_value)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Used to set the argument value for a specific argument of a kernel.
        /// </summary>
        /// <param name="kernel"> 
        /// A valid kernel object.
        /// </param>
        /// <param name="arg_index"> 
        /// The argument index. Arguments to the kernel are referred by indices that go from 0 for the leftmost argument to n - 1, where n is the total number of arguments declared by a kernel.
        /// </param>
        /// <param name="arg_size"> 
        /// Specifies the size of the argument value. If the argument is a memory object, the size is the size of the buffer or image object type. For arguments declared with the __local qualifier, the size specified will be the size in bytes of the buffer that must be allocated for the __local argument. If the argument is of type sampler_t, the arg_size value must be equal to sizeof(cl_sampler). For all other arguments, the size will be the size of argument type.
        /// </param>
        /// <param name="arg_value"> 
        /// A pointer to data that should be used as the argument value for argument specified by arg_index. The argument data pointed to by arg_value is copied and the arg_value pointer can therefore be reused by the application after clSetKernelArg returns. The argument value specified is the value used by all API calls that enqueue kernel (clEnqueueNDRangeKernel and clEnqueueTask) until the argument value is changed by a call to clSetKernelArg for kernel.  If the argument is a memory object (buffer, image or image array), the arg_value entry will be a pointer to the appropriate buffer, image or image array object.  The memory object must be created with the context associated with the kernel object.  If the argument is a buffer object, the arg_value pointer can be NULL or point to a NULL value in which case a NULL value will be used as the value for the argument declared as a pointer to __global or __constant memory in the kernel.  If the argument is declared with the __local qualifier, the arg_value entry must be NULL.  If the argument is of type sampler_t, the arg_value entry must be a pointer to the sampler object.  If the argument is declared to be a pointer of a built-in scalar or vector type, or a user defined structure type in the global or constant address space, the memory object specified as argument value must be a buffer object (or NULL). If the argument is declared with the __constant qualifier, the size in bytes of the memory object cannot exceed DeviceMaxConstantBufferSize and the number of arguments declared as pointers to __constant memory cannot exceed DeviceMaxConstantArgs.  The memory object specified as argument value must be a 2D image object if the argument is declared to be of type image2d_t. The memory object specified as argument value must be a 3D image object if argument is declared to be of type image3d_t. The memory object specified as argument value must be a 1D image object if the argument is declared to be of type image1d_t. The memory object specified as argument value must be a 1D image buffer object if the argument is declared to be of type image1d_buffer_t. The memory object specified as argument value must be a 1D image array object if argument is declared to be of type image1d_array_t. The memory object specified as argument value must be a 2D image array object if argument is declared to be of type image2d_array_t.  For all other kernel arguments, the arg_value entry must be a pointer to the actual data to be used as argument value.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clSetKernelArg")]
        [CLSCompliant(false)]
        public static ErrorCode SetKernelArg<T3>(ComputeKernel kernel, Int32 arg_index, IntPtr arg_size, [InAttribute, OutAttribute] T3[,] arg_value)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Used to set the argument value for a specific argument of a kernel.
        /// </summary>
        /// <param name="kernel"> 
        /// A valid kernel object.
        /// </param>
        /// <param name="arg_index"> 
        /// The argument index. Arguments to the kernel are referred by indices that go from 0 for the leftmost argument to n - 1, where n is the total number of arguments declared by a kernel.
        /// </param>
        /// <param name="arg_size"> 
        /// Specifies the size of the argument value. If the argument is a memory object, the size is the size of the buffer or image object type. For arguments declared with the __local qualifier, the size specified will be the size in bytes of the buffer that must be allocated for the __local argument. If the argument is of type sampler_t, the arg_size value must be equal to sizeof(cl_sampler). For all other arguments, the size will be the size of argument type.
        /// </param>
        /// <param name="arg_value"> 
        /// A pointer to data that should be used as the argument value for argument specified by arg_index. The argument data pointed to by arg_value is copied and the arg_value pointer can therefore be reused by the application after clSetKernelArg returns. The argument value specified is the value used by all API calls that enqueue kernel (clEnqueueNDRangeKernel and clEnqueueTask) until the argument value is changed by a call to clSetKernelArg for kernel.  If the argument is a memory object (buffer, image or image array), the arg_value entry will be a pointer to the appropriate buffer, image or image array object.  The memory object must be created with the context associated with the kernel object.  If the argument is a buffer object, the arg_value pointer can be NULL or point to a NULL value in which case a NULL value will be used as the value for the argument declared as a pointer to __global or __constant memory in the kernel.  If the argument is declared with the __local qualifier, the arg_value entry must be NULL.  If the argument is of type sampler_t, the arg_value entry must be a pointer to the sampler object.  If the argument is declared to be a pointer of a built-in scalar or vector type, or a user defined structure type in the global or constant address space, the memory object specified as argument value must be a buffer object (or NULL). If the argument is declared with the __constant qualifier, the size in bytes of the memory object cannot exceed DeviceMaxConstantBufferSize and the number of arguments declared as pointers to __constant memory cannot exceed DeviceMaxConstantArgs.  The memory object specified as argument value must be a 2D image object if the argument is declared to be of type image2d_t. The memory object specified as argument value must be a 3D image object if argument is declared to be of type image3d_t. The memory object specified as argument value must be a 1D image object if the argument is declared to be of type image1d_t. The memory object specified as argument value must be a 1D image buffer object if the argument is declared to be of type image1d_buffer_t. The memory object specified as argument value must be a 1D image array object if argument is declared to be of type image1d_array_t. The memory object specified as argument value must be a 2D image array object if argument is declared to be of type image2d_array_t.  For all other kernel arguments, the arg_value entry must be a pointer to the actual data to be used as argument value.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clSetKernelArg")]
        [CLSCompliant(false)]
        public static ErrorCode SetKernelArg<T3>(ComputeKernel kernel, Int32 arg_index, IntPtr arg_size, [InAttribute, OutAttribute] T3[,,] arg_value)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Used to set the argument value for a specific argument of a kernel.
        /// </summary>
        /// <param name="kernel"> 
        /// A valid kernel object.
        /// </param>
        /// <param name="arg_index"> 
        /// The argument index. Arguments to the kernel are referred by indices that go from 0 for the leftmost argument to n - 1, where n is the total number of arguments declared by a kernel.
        /// </param>
        /// <param name="arg_size"> 
        /// Specifies the size of the argument value. If the argument is a memory object, the size is the size of the buffer or image object type. For arguments declared with the __local qualifier, the size specified will be the size in bytes of the buffer that must be allocated for the __local argument. If the argument is of type sampler_t, the arg_size value must be equal to sizeof(cl_sampler). For all other arguments, the size will be the size of argument type.
        /// </param>
        /// <param name="arg_value"> 
        /// A pointer to data that should be used as the argument value for argument specified by arg_index. The argument data pointed to by arg_value is copied and the arg_value pointer can therefore be reused by the application after clSetKernelArg returns. The argument value specified is the value used by all API calls that enqueue kernel (clEnqueueNDRangeKernel and clEnqueueTask) until the argument value is changed by a call to clSetKernelArg for kernel.  If the argument is a memory object (buffer, image or image array), the arg_value entry will be a pointer to the appropriate buffer, image or image array object.  The memory object must be created with the context associated with the kernel object.  If the argument is a buffer object, the arg_value pointer can be NULL or point to a NULL value in which case a NULL value will be used as the value for the argument declared as a pointer to __global or __constant memory in the kernel.  If the argument is declared with the __local qualifier, the arg_value entry must be NULL.  If the argument is of type sampler_t, the arg_value entry must be a pointer to the sampler object.  If the argument is declared to be a pointer of a built-in scalar or vector type, or a user defined structure type in the global or constant address space, the memory object specified as argument value must be a buffer object (or NULL). If the argument is declared with the __constant qualifier, the size in bytes of the memory object cannot exceed DeviceMaxConstantBufferSize and the number of arguments declared as pointers to __constant memory cannot exceed DeviceMaxConstantArgs.  The memory object specified as argument value must be a 2D image object if the argument is declared to be of type image2d_t. The memory object specified as argument value must be a 3D image object if argument is declared to be of type image3d_t. The memory object specified as argument value must be a 1D image object if the argument is declared to be of type image1d_t. The memory object specified as argument value must be a 1D image buffer object if the argument is declared to be of type image1d_buffer_t. The memory object specified as argument value must be a 1D image array object if argument is declared to be of type image1d_array_t. The memory object specified as argument value must be a 2D image array object if argument is declared to be of type image2d_array_t.  For all other kernel arguments, the arg_value entry must be a pointer to the actual data to be used as argument value.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clSetKernelArg")]
        public static ErrorCode SetKernelArg<T3>(ComputeKernel kernel, Int32 arg_index, IntPtr arg_size, [InAttribute, OutAttribute] ref T3 arg_value)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.1]
        /// Registers a user callback function with a memory object.
        /// </summary>
        /// <param name="memobj"> 
        /// A valid memory object.
        /// </param>
        /// <param name="pfn_notify"> 
        /// The callback function that can be registered by the application. This callback function may be called asynchronously by the OpenCL implementation. It is the application's responsibility to ensure that the callback function is thread-safe. The parameters to this callback function are: memobj: the memory object being deleted. When the user callback is called by the implementation, this memory object is no longer valid.  memobj is only provided for reference purposes. user_data: a pointer to user supplied data.
        /// </param>
        /// <param name="user_data"> 
        /// Data which will be passed as the user_data argument when pfn_notify is called. user_data can be NULL.
        /// </param>
        [AutoGenerated(Category = "", Version = "1.1", EntryPoint = "clSetMemObjectDestructorCallback")]
        public static OpenTK.Compute.CL12.ErrorCode SetMemObjectDestructorCallback(ComputeMemory memobj, MemObjectNotifyDelegate pfn_notify, IntPtr user_data) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.1]
        /// Registers a user callback function with a memory object.
        /// </summary>
        /// <param name="memobj"> 
        /// A valid memory object.
        /// </param>
        /// <param name="pfn_notify"> 
        /// The callback function that can be registered by the application. This callback function may be called asynchronously by the OpenCL implementation. It is the application's responsibility to ensure that the callback function is thread-safe. The parameters to this callback function are: memobj: the memory object being deleted. When the user callback is called by the implementation, this memory object is no longer valid.  memobj is only provided for reference purposes. user_data: a pointer to user supplied data.
        /// </param>
        /// <param name="user_data"> 
        /// Data which will be passed as the user_data argument when pfn_notify is called. user_data can be NULL.
        /// </param>
        [AutoGenerated(Category = "", Version = "1.1", EntryPoint = "clSetMemObjectDestructorCallback")]
        [CLSCompliant(false)]
        public static OpenTK.Compute.CL12.ErrorCode SetMemObjectDestructorCallback<T2>(ComputeMemory memobj, MemObjectNotifyDelegate pfn_notify, [InAttribute, OutAttribute] T2[] user_data)
            where T2 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.1]
        /// Registers a user callback function with a memory object.
        /// </summary>
        /// <param name="memobj"> 
        /// A valid memory object.
        /// </param>
        /// <param name="pfn_notify"> 
        /// The callback function that can be registered by the application. This callback function may be called asynchronously by the OpenCL implementation. It is the application's responsibility to ensure that the callback function is thread-safe. The parameters to this callback function are: memobj: the memory object being deleted. When the user callback is called by the implementation, this memory object is no longer valid.  memobj is only provided for reference purposes. user_data: a pointer to user supplied data.
        /// </param>
        /// <param name="user_data"> 
        /// Data which will be passed as the user_data argument when pfn_notify is called. user_data can be NULL.
        /// </param>
        [AutoGenerated(Category = "", Version = "1.1", EntryPoint = "clSetMemObjectDestructorCallback")]
        [CLSCompliant(false)]
        public static OpenTK.Compute.CL12.ErrorCode SetMemObjectDestructorCallback<T2>(ComputeMemory memobj, MemObjectNotifyDelegate pfn_notify, [InAttribute, OutAttribute] T2[,] user_data)
            where T2 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.1]
        /// Registers a user callback function with a memory object.
        /// </summary>
        /// <param name="memobj"> 
        /// A valid memory object.
        /// </param>
        /// <param name="pfn_notify"> 
        /// The callback function that can be registered by the application. This callback function may be called asynchronously by the OpenCL implementation. It is the application's responsibility to ensure that the callback function is thread-safe. The parameters to this callback function are: memobj: the memory object being deleted. When the user callback is called by the implementation, this memory object is no longer valid.  memobj is only provided for reference purposes. user_data: a pointer to user supplied data.
        /// </param>
        /// <param name="user_data"> 
        /// Data which will be passed as the user_data argument when pfn_notify is called. user_data can be NULL.
        /// </param>
        [AutoGenerated(Category = "", Version = "1.1", EntryPoint = "clSetMemObjectDestructorCallback")]
        [CLSCompliant(false)]
        public static OpenTK.Compute.CL12.ErrorCode SetMemObjectDestructorCallback<T2>(ComputeMemory memobj, MemObjectNotifyDelegate pfn_notify, [InAttribute, OutAttribute] T2[,,] user_data)
            where T2 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.1]
        /// Registers a user callback function with a memory object.
        /// </summary>
        /// <param name="memobj"> 
        /// A valid memory object.
        /// </param>
        /// <param name="pfn_notify"> 
        /// The callback function that can be registered by the application. This callback function may be called asynchronously by the OpenCL implementation. It is the application's responsibility to ensure that the callback function is thread-safe. The parameters to this callback function are: memobj: the memory object being deleted. When the user callback is called by the implementation, this memory object is no longer valid.  memobj is only provided for reference purposes. user_data: a pointer to user supplied data.
        /// </param>
        /// <param name="user_data"> 
        /// Data which will be passed as the user_data argument when pfn_notify is called. user_data can be NULL.
        /// </param>
        [AutoGenerated(Category = "", Version = "1.1", EntryPoint = "clSetMemObjectDestructorCallback")]
        public static OpenTK.Compute.CL12.ErrorCode SetMemObjectDestructorCallback<T2>(ComputeMemory memobj, MemObjectNotifyDelegate pfn_notify, [InAttribute, OutAttribute] ref T2 user_data)
            where T2 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v1.1]
        /// Sets the execution status of a user event object.
        /// </summary>
        /// <param name="event"> 
        /// A user event object created using clCreateUserEvent.
        /// </param>
        /// <param name="execution_status"> 
        /// Specifies the new execution status to be set and can be Complete or a negative integer value to indicate an error. A negative integer value causes all enqueued commands that wait on this user event to be terminated. clSetUserEventStatus can only be called once to change the execution status of event.
        /// </param>
        [AutoGenerated(Category = "", Version = "1.1", EntryPoint = "clSetUserEventStatus")]
        public static ErrorCode SetUserEventStatus(ComputeEvent @event, OpenTK.Compute.CL12.CommandExecutionStatusFlags execution_status) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]</summary>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clUnloadCompiler")]
        public static Int32 UnloadCompiler() { throw new NotImplementedException(); }

        /// <summary>[requires: v1.2]
        /// Allows the implementation to release the resources allocated by the OpenCL compiler for platform.
        /// </summary>
        /// <param name="platform"></param>
        [AutoGenerated(Category = "", Version = "1.2", EntryPoint = "clUnloadPlatformCompiler")]
        public static ErrorCode UnloadPlatformCompiler([InAttribute, OutAttribute] ComputePlatform platform) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Waits on the host thread for commands identified by event objects to complete.
        /// </summary>
        /// <param name="num_events"> 
        /// The events specified in event_list act as synchronization points.
        /// </param>
        /// <param name="event_list"> 
        /// The events specified in event_list act as synchronization points.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clWaitForEvents")]
        [CLSCompliant(false)]
        public static ErrorCode WaitForEvents(Int32 num_events, ComputeEvent[] event_list) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Waits on the host thread for commands identified by event objects to complete.
        /// </summary>
        /// <param name="num_events"> 
        /// The events specified in event_list act as synchronization points.
        /// </param>
        /// <param name="event_list"> 
        /// The events specified in event_list act as synchronization points.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clWaitForEvents")]
        [CLSCompliant(false)]
        public static ErrorCode WaitForEvents(Int32 num_events, ref ComputeEvent event_list) { throw new NotImplementedException(); }

        /// <summary>[requires: v1.0]
        /// Waits on the host thread for commands identified by event objects to complete.
        /// </summary>
        /// <param name="num_events"> 
        /// The events specified in event_list act as synchronization points.
        /// </param>
        /// <param name="event_list"> 
        /// The events specified in event_list act as synchronization points.
        /// </param>
        [AutoGenerated(Category = "1.0", Version = "1.0", EntryPoint = "clWaitForEvents")]
        [CLSCompliant(false)]
        public static unsafe ErrorCode WaitForEvents(Int32 num_events, ComputeEvent* event_list) { throw new NotImplementedException(); }

        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe System.Int32 clBuildProgram(ComputeProgram program, Int32 num_devices, ComputeDevice* device_list, IntPtr options, ProgramNotifyDelegate pfn_notify, IntPtr user_data);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe System.Int32 clCompileProgram(ComputeProgram program, Int32 num_devices, ComputeDevice* device_list, Int32 num_input_headers, ComputeProgram* input_headers, IntPtr header_include_names, ProgramNotifyDelegate pfn_notify, IntPtr user_data);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe ComputeMemory clCreateBuffer(ComputeContext context, long flags, IntPtr size, IntPtr host_ptr, [OutAttribute] System.Int32* errcode_ret);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe CommandQueue clCreateCommandQueue(ComputeContext context, ComputeDevice device, long properties, [OutAttribute] System.Int32* errcode_ret);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe ComputeContext clCreateContext(IntPtr* properties, Int32 num_devices, ComputeDevice* devices, ContextNotifyDelegate pfn_notify, IntPtr user_data, [OutAttribute] System.Int32* errcode_ret);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe ComputeContext clCreateContextFromType(IntPtr* properties, long device_type, ContextNotifyDelegate pfn_notify, IntPtr user_data, [OutAttribute] System.Int32* errcode_ret);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe ComputeMemory clCreateImage(ComputeContext context, long* flags, ImageFormat* image_format, ImageDescriptor* image_desc, IntPtr host_ptr, [OutAttribute] System.Int32* errcode_ret);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe ComputeMemory clCreateImage2D(ComputeContext context, long flags, ImageFormat* image_format, IntPtr image_width, IntPtr image_height, IntPtr image_row_pitch, IntPtr host_ptr, [OutAttribute] Int32* errcode_ret);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe ComputeMemory clCreateImage3D(ComputeContext context, long flags, ImageFormat* image_format, IntPtr image_width, IntPtr image_height, IntPtr image_depth, IntPtr image_row_pitch, IntPtr image_slice_pitch, IntPtr host_ptr, [OutAttribute] Int32* errcode_ret);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe ComputeKernel clCreateKernel(ComputeProgram program, IntPtr kernel_name, [OutAttribute] System.Int32* errcode_ret);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe System.Int32 clCreateKernelsInProgram(ComputeProgram program, Int32 num_kernels, ComputeKernel* kernels, [OutAttribute] Int32* num_kernels_ret);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe ComputeProgram clCreateProgramWithBinary(ComputeContext context, Int32 num_devices, ComputeDevice* device_list, IntPtr* lengths, byte** binaries, Int32* binary_status, [OutAttribute] System.Int32* errcode_ret);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe ComputeProgram clCreateProgramWithBuiltInKernels(ComputeContext context, Int32 num_devices, ComputeDevice* device_list, IntPtr kernel_names, [OutAttribute] System.Int32* errcode_ret);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe ComputeProgram clCreateProgramWithSource(ComputeContext context, Int32 count, IntPtr strings, IntPtr* lengths, [OutAttribute] System.Int32* errcode_ret);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe ComputeSampler clCreateSampler(ComputeContext context, bool normalized_coords, System.Int32 addressing_mode, System.Int32 filter_mode, [OutAttribute] System.Int32* errcode_ret);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe ComputeMemory clCreateSubBuffer(ComputeMemory buffer, long flags, System.Int32 buffer_create_type, IntPtr buffer_create_info, [OutAttribute] Int32* errcode_ret);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe System.Int32 clCreateSubDevices(ComputeDevice in_device, System.Int32* properties, Int32 num_devices, [OutAttribute] ComputeDevice* out_devices, [OutAttribute] Int32* num_devices_ret);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe ComputeEvent clCreateUserEvent(ComputeContext context, [OutAttribute] Int32* errcode_ret);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern System.Int32 clEnqueueBarrier(CommandQueue command_queue);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe System.Int32 clEnqueueBarrierWithWaitList(CommandQueue command_queue, Int32 num_events_in_wait_list, ComputeEvent* event_wait_list, [OutAttribute] ComputeEvent* @event);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe System.Int32 clEnqueueCopyBuffer(CommandQueue command_queue, ComputeMemory src_buffer, ComputeMemory dst_buffer, IntPtr src_offset, IntPtr dst_offset, IntPtr cb, Int32 num_events_in_wait_list, ComputeEvent* event_wait_list, [OutAttribute] ComputeEvent* @event);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe System.Int32 clEnqueueCopyBufferRect(CommandQueue command_queue, ComputeMemory src_buffer, ComputeMemory dst_buffer, IntPtr* src_origin, IntPtr* dst_origin, IntPtr* region, IntPtr src_row_pitch, IntPtr src_slice_pitch, IntPtr dst_row_pitch, IntPtr dst_slice_pitch, Int32 num_events_in_wait_list, ComputeEvent* event_wait_list, [OutAttribute] ComputeEvent* @event);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe System.Int32 clEnqueueCopyBufferToImage(CommandQueue command_queue, ComputeMemory src_buffer, ComputeMemory dst_image, IntPtr src_offset, IntPtr** dst_origin, IntPtr** region, Int32 num_events_in_wait_list, ComputeEvent* event_wait_list, [OutAttribute] ComputeEvent* @event);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe System.Int32 clEnqueueCopyImage(CommandQueue command_queue, ComputeMemory src_image, ComputeMemory dst_image, IntPtr** src_origin, IntPtr** dst_origin, IntPtr** region, Int32 num_events_in_wait_list, ComputeEvent* event_wait_list, [OutAttribute] ComputeEvent* @event);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe System.Int32 clEnqueueCopyImageToBuffer(CommandQueue command_queue, ComputeMemory src_image, ComputeMemory dst_buffer, IntPtr** src_origin, IntPtr** region, IntPtr dst_offset, Int32 num_events_in_wait_list, ComputeEvent* event_wait_list, [OutAttribute] ComputeEvent* @event);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe System.Int32 clEnqueueFillBuffer(CommandQueue command_queue, ComputeMemory buffer, IntPtr pattern, IntPtr pattern_size, IntPtr size, Int32 num_events_in_wait_list, ComputeEvent* event_wait_list, [OutAttribute] ComputeEvent* @event);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe System.Int32 clEnqueueFillImage(CommandQueue command_queue, ComputeMemory buffer, IntPtr fill_color, IntPtr* origin, IntPtr* region, Int32 num_events_in_wait_list, ComputeEvent* event_wait_list, [OutAttribute] ComputeEvent* @event);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe IntPtr clEnqueueMapBuffer(CommandQueue command_queue, ComputeMemory buffer, bool blocking_map, long map_flags, IntPtr offset, IntPtr cb, Int32 num_events_in_wait_list, ComputeEvent* event_wait_list, ComputeEvent* @event, [OutAttribute] Int32* errcode_ret);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe IntPtr clEnqueueMapImage(CommandQueue command_queue, ComputeMemory image, bool blocking_map, long map_flags, IntPtr** origin, IntPtr** region, IntPtr* image_row_pitch, IntPtr* image_slice_pitch, Int32 num_events_in_wait_list, ComputeEvent* event_wait_list, ComputeEvent* @event, [OutAttribute] Int32* errcode_ret);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe Int32 clEnqueueMarker(CommandQueue command_queue, ComputeEvent* @event);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe System.Int32 clEnqueueMarkerWithWaitList(CommandQueue command_queue, Int32 num_events_in_wait_list, ComputeEvent* event_wait_list, [OutAttribute] ComputeEvent* @event);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe System.Int32 clEnqueueMigrateMemObjects(CommandQueue command_queue, Int32 num_mem_objects, ComputeMemory* mem_objects, System.Int32 flags, Int32 num_events_in_wait_list, ComputeEvent* event_wait_list, [OutAttribute] ComputeEvent* @event);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe System.Int32 clEnqueueNativeKernel(CommandQueue command_queue, IntPtr user_func, IntPtr args, IntPtr cb_args, Int32 num_mem_objects, ComputeMemory* mem_list, IntPtr args_mem_loc, Int32 num_events_in_wait_list, ComputeEvent* event_wait_list, [OutAttribute] ComputeEvent* @event);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe System.Int32 clEnqueueNDRangeKernel(CommandQueue command_queue, ComputeKernel kernel, Int32 work_dim, IntPtr* global_work_offset, IntPtr* global_work_size, IntPtr* local_work_size, Int32 num_events_in_wait_list, ComputeEvent* event_wait_list, [OutAttribute] ComputeEvent* @event);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe System.Int32 clEnqueueReadBuffer(CommandQueue command_queue, ComputeMemory buffer, bool blocking_read, IntPtr offset, IntPtr cb, IntPtr ptr, Int32 num_events_in_wait_list, ComputeEvent* event_wait_list, [OutAttribute] ComputeEvent* @event);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe System.Int32 clEnqueueReadBufferRect(CommandQueue command_queue, ComputeMemory buffer, bool blocking_read, IntPtr* buffer_offset, IntPtr* host_offset, IntPtr* region, IntPtr buffer_row_pitch, IntPtr buffer_slice_pitch, IntPtr host_row_pitch, IntPtr host_slice_pitch, IntPtr ptr, Int32 num_events_in_wait_list, ComputeEvent* event_wait_list, [OutAttribute] ComputeEvent* @event);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe System.Int32 clEnqueueReadImage(CommandQueue command_queue, ComputeMemory image, bool blocking_read, IntPtr** origin, IntPtr** region, IntPtr row_pitch, IntPtr slice_pitch, IntPtr ptr, Int32 num_events_in_wait_list, ComputeEvent* event_wait_list, [OutAttribute] ComputeEvent* @event);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe Int32 clEnqueueTask(CommandQueue command_queue, ComputeKernel kernel, Int32 num_events_in_wait_list, ComputeEvent* event_wait_list, ComputeEvent* @event);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe System.Int32 clEnqueueUnmapMemObject(CommandQueue command_queue, ComputeMemory memobj, IntPtr mapped_ptr, Int32 num_events_in_wait_list, ComputeEvent* event_wait_list, [OutAttribute] ComputeEvent* @event);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe Int32 clEnqueueWaitForEvents(CommandQueue command_queue, Int32 num_events, ComputeEvent* event_list);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe System.Int32 clEnqueueWriteBuffer(CommandQueue command_queue, ComputeMemory buffer, bool blocking_write, IntPtr offset, IntPtr cb, IntPtr ptr, Int32 num_events_in_wait_list, ComputeEvent* event_wait_list, [OutAttribute] ComputeEvent* @event);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe System.Int32 clEnqueueWriteBufferRect(CommandQueue command_queue, ComputeMemory buffer, bool blocking_write, IntPtr* buffer_offset, IntPtr* host_offset, IntPtr* region, IntPtr buffer_row_pitch, IntPtr buffer_slice_pitch, IntPtr host_row_pitch, IntPtr host_slice_pitch, IntPtr ptr, Int32 num_events_in_wait_list, ComputeEvent* event_wait_list, [OutAttribute] ComputeEvent* @event);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe System.Int32 clEnqueueWriteImage(CommandQueue command_queue, ComputeMemory image, bool blocking_write, IntPtr** origin, IntPtr** region, IntPtr input_row_pitch, IntPtr input_slice_pitch, IntPtr ptr, Int32 num_events_in_wait_list, ComputeEvent* event_wait_list, [OutAttribute] ComputeEvent* @event);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern System.Int32 clFinish(CommandQueue command_queue);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern System.Int32 clFlush(CommandQueue command_queue);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe System.Int32 clGetCommandQueueInfo(CommandQueue command_queue, System.Int32 param_name, IntPtr param_value_size, IntPtr param_value, [OutAttribute] IntPtr* param_value_size_ret);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe System.Int32 clGetContextInfo(ComputeContext context, System.Int32 param_name, IntPtr param_value_size, IntPtr param_value, [OutAttribute] IntPtr* param_value_size_ret);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe System.Int32 clGetDeviceIDs(ComputePlatform platform, long device_type, Int32 num_entries, ComputeDevice* devices, [OutAttribute] Int32* num_devices);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe System.Int32 clGetDeviceInfo(ComputeDevice device, System.Int32 param_name, IntPtr param_value_size, IntPtr param_value, [OutAttribute] IntPtr* param_value_size_ret);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe System.Int32 clGetEventInfo(ComputeEvent @event, System.Int32 param_name, IntPtr param_value_size, IntPtr param_value, [OutAttribute] IntPtr* param_value_size_ret);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe System.Int32 clGetEventProfilingInfo(ComputeEvent @event, System.Int32 param_name, IntPtr param_value_size, IntPtr param_value, [OutAttribute] IntPtr* param_value_size_ret);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern IntPtr clGetExtensionFunctionAddressForPlatform(ComputePlatform platform, IntPtr func_name);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe System.Int32 clGetImageInfo(ComputeMemory image, System.Int32 param_name, IntPtr param_value_size, IntPtr param_value, [OutAttribute] IntPtr* param_value_size_ret);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe System.Int32 clGetKernelArgInfo(ComputeKernel kernel, Int32 arg_indx, System.Int32 param_name, IntPtr param_value_size, IntPtr param_value, [OutAttribute] IntPtr* param_value_size_ret);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe System.Int32 clGetKernelInfo(ComputeKernel kernel, System.Int32 param_name, IntPtr param_value_size, IntPtr param_value, [OutAttribute] IntPtr* param_value_size_ret);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe System.Int32 clGetKernelWorkGroupInfo(ComputeKernel kernel, ComputeDevice device, System.Int32 param_name, IntPtr param_value_size, IntPtr param_value, [OutAttribute] IntPtr* param_value_size_ret);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe System.Int32 clGetMemObjectInfo(ComputeMemory memobj, System.Int32 param_name, IntPtr param_value_size, IntPtr param_value, [OutAttribute] IntPtr* param_value_size_ret);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe System.Int32 clGetPlatformIDs(Int32 num_entries, ComputePlatform* platforms, [OutAttribute] Int32* num_platforms);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe System.Int32 clGetPlatformInfo(ComputePlatform platform, System.Int32 param_name, IntPtr param_value_size, IntPtr param_value, [OutAttribute] IntPtr* param_value_size_ret);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe System.Int32 clGetProgramBuildInfo(ComputeProgram program, ComputeDevice device, System.Int32 param_name, IntPtr param_value_size, IntPtr param_value, [OutAttribute] IntPtr* param_value_size_ret);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe System.Int32 clGetProgramInfo(ComputeProgram program, System.Int32 param_name, IntPtr param_value_size, IntPtr param_value, [OutAttribute] IntPtr* param_value_size_ret);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe System.Int32 clGetSamplerInfo(ComputeSampler sampler, System.Int32 param_name, IntPtr param_value_size, IntPtr param_value, [OutAttribute] IntPtr* param_value_size_ret);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe System.Int32 clGetSupportedImageFormats(ComputeContext context, long flags, System.Int32 image_type, Int32 num_entries, ImageFormat* image_formats, Int32* num_image_formats);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe System.Int32 clLinkProgram(ComputeContext context, Int32 num_devices, ComputeDevice* device_list, IntPtr options, Int32 num_input_programs, ComputeProgram* input_programs, ProgramNotifyDelegate notify, IntPtr user_data);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern System.Int32 clReleaseCommandQueue(CommandQueue command_queue);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern System.Int32 clReleaseContext(ComputeContext context);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern System.Int32 clReleaseDevice(ComputeDevice device);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern System.Int32 clReleaseEvent(ComputeEvent @event);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern System.Int32 clReleaseKernel(ComputeKernel kernel);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern System.Int32 clReleaseMemObject(ComputeMemory memobj);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern System.Int32 clReleaseProgram(ComputeProgram program);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern System.Int32 clReleaseSampler(ComputeSampler sampler);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern System.Int32 clRetainCommandQueue(CommandQueue command_queue);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern System.Int32 clRetainContext(ComputeContext context);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern System.Int32 clRetainDevice(ComputeDevice device);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern Int32 clRetainEvent(ComputeEvent @event);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern System.Int32 clRetainKernel(ComputeKernel kernel);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern System.Int32 clRetainMemObject(ComputeMemory memobj);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern System.Int32 clRetainProgram(ComputeProgram program);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern System.Int32 clRetainSampler(ComputeSampler sampler);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern System.Int32 clSetEventCallback(ComputeEvent @event, System.Int32 command_exec_callback_type, EventNotifyDelegate notify, IntPtr user_data);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern System.Int32 clSetKernelArg(ComputeKernel kernel, Int32 arg_index, IntPtr arg_size, IntPtr arg_value);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern System.Int32 clSetMemObjectDestructorCallback(ComputeMemory memobj, MemObjectNotifyDelegate pfn_notify, IntPtr user_data);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern System.Int32 clSetUserEventStatus(ComputeEvent @event, System.Int32 execution_status);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern Int32 clUnloadCompiler();
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern System.Int32 clUnloadPlatformCompiler([InAttribute, OutAttribute] ComputePlatform platform);
        [Slot(-1)]
        [DllImport(Library, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
        static extern unsafe System.Int32 clWaitForEvents(Int32 num_events, ComputeEvent* event_list);
    }
}
