<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook MathML Module V1.1b1//EN"
	      "http://www.oasis-open.org/docbook/xml/mathml/1.1CR1/dbmathml.dtd">
<refentry id="glUseProgram">
    <refmeta>
	<refentrytitle>glUseProgram</refentrytitle>
	<manvolnum>3G</manvolnum>
    </refmeta>
    <refnamediv>
	<refname>glUseProgram</refname>
	<refpurpose>Installs a program object as part of current rendering state</refpurpose>
    </refnamediv>
    <refsynopsisdiv><title>C Specification</title>
	<funcsynopsis>
	    <funcprototype>
		<funcdef>void <function>glUseProgram</function></funcdef>
		<paramdef>GLuint <parameter>program</parameter></paramdef>
	    </funcprototype>
	</funcsynopsis>
    </refsynopsisdiv>
    <refsect1 id="parameters"><title>Parameters</title>
	<variablelist>
	    <varlistentry>
		<term><parameter>program</parameter></term>
		<listitem>
		    <para>Specifies the handle of the program object
		    whose executables are to be used as part of current
		    rendering state.</para>
		</listitem>
	    </varlistentry>
	</variablelist>
    </refsect1>
    <refsect1 id="description"><title>Description</title>
	<para><function>glUseProgram</function> installs the program
	object specified by <parameter>program</parameter> as part of
	current rendering state. One or more executables are created in
	a program object by successfully attaching shader objects to it
	with
	<citerefentry><refentrytitle>glAttachShader</refentrytitle></citerefentry>,
	successfully compiling the shader objects with
	<citerefentry><refentrytitle>glCompileShader</refentrytitle></citerefentry>,
	and successfully linking the program object with
	<citerefentry><refentrytitle>glLinkProgram</refentrytitle></citerefentry>.
	</para>

	<para>A program object will contain an executable that will run
	on the vertex processor if it contains one or more shader
	objects of type <constant>GL_VERTEX_SHADER</constant> that have
	been successfully compiled and linked. Similarly, a program
	object will contain an executable that will run on the fragment
	processor if it contains one or more shader objects of type
	<constant>GL_FRAGMENT_SHADER</constant> that have been
	successfully compiled and linked.</para>

	<para>Successfully installing an executable on a programmable
	processor will cause the corresponding fixed functionality of
	OpenGL to be disabled. Specifically, if an executable is
	installed on the vertex processor, the OpenGL fixed
	functionality will be disabled as follows.</para>

	<itemizedlist>
	    <listitem>
		<para>The modelview matrix is not applied to vertex
		coordinates.</para>
	    </listitem>
	    <listitem>
		<para>The projection matrix is not applied to vertex
		coordinates.</para>
	    </listitem>
	    <listitem>
		<para>The texture matrices are not applied to texture
		coordinates.</para>
	    </listitem>
	    <listitem>
		<para>Normals are not transformed to eye
		coordinates.</para>
	    </listitem>
	    <listitem>
		<para>Normals are not rescaled or normalized.</para>
	    </listitem>
	    <listitem>
		<para>Normalization of
		<constant>GL_AUTO_NORMAL</constant> evaluated normals is
		not performed.</para>
	    </listitem>
	    <listitem>
		<para>Texture coordinates are not generated
		automatically.</para>
	    </listitem>
	    <listitem>
		<para>Per-vertex lighting is not performed.</para>
	    </listitem>
	    <listitem>
		<para>Color material computations are not
		performed.</para>
	    </listitem>
	    <listitem>
		<para>Color index lighting is not performed.</para>
	    </listitem>
	    <listitem>
		<para>This list also applies when setting the current
		raster position.</para>
	    </listitem>
	</itemizedlist>

	<para>The executable that is installed on the vertex processor
	is expected to implement any or all of the desired functionality
	from the preceding list. Similarly, if an executable is
	installed on the fragment processor, the OpenGL fixed
	functionality will be disabled as follows.</para>

	<itemizedlist>
	    <listitem>
		<para>Texture environment and texture functions are not
		applied.</para>
	    </listitem>
	    <listitem>
		<para>Texture application is not applied.</para>
	    </listitem>
	    <listitem>
		<para>Color sum is not applied.</para>
	    </listitem>
	    <listitem>
		<para>Fog is not applied.</para>
	    </listitem>
	</itemizedlist>

	<para>Again, the fragment shader that is installed is expected
	to implement any or all of the desired functionality from the
	preceding list.</para>

	<para>While a program object is in use, applications are free to
	modify attached shader objects, compile attached shader objects,
	attach additional shader objects, and detach or delete shader
	objects. None of these operations will affect the executables
	that are part of the current state. However, relinking the
	program object that is currently in use will install the program
	object as part of the current rendering state if the link
	operation was successful (see
	<citerefentry><refentrytitle>glLinkProgram</refentrytitle></citerefentry>
	). If the program object currently in use is relinked
	unsuccessfully, its link status will be set to
	<constant>GL_FALSE</constant>, but the executables and
	associated state will remain part of the current state until a
	subsequent call to <function>glUseProgram</function> removes it
	from use. After it is removed from use, it cannot be made part
	of current state until it has been successfully relinked.</para>

	<para>If <parameter>program</parameter> contains shader objects
	of type <constant>GL_VERTEX_SHADER</constant> but it does not
	contain shader objects of type
	<constant>GL_FRAGMENT_SHADER</constant>, an executable will be
	installed on the vertex processor, but fixed functionality will
	be used for fragment processing. Similarly, if
	<parameter>program</parameter> contains shader objects of type
	<constant>GL_FRAGMENT_SHADER</constant> but it does not contain
	shader objects of type <constant>GL_VERTEX_SHADER</constant>, an
	executable will be installed on the fragment processor, but
	fixed functionality will be used for vertex processing. If
	<parameter>program</parameter> is 0, the programmable processors
	will be disabled, and fixed functionality will be used for both
	vertex and fragment processing.</para>
    </refsect1>
    <refsect1 id="notes"><title>Notes</title>
	<para><function>glUseProgram</function> is available only if the
	GL version is 2.0 or greater.</para>

	<para>While a program object is in use, the state that controls
	the disabled fixed functionality may also be updated using the
	normal OpenGL calls.</para>

	<para>Like display lists and texture objects, the name space for
	program objects may be shared across a set of contexts, as long
	as the server sides of the contexts share the same address
	space. If the name space is shared across contexts, any attached
	objects and the data associated with those attached objects are
	shared as well.</para>

	<para>Applications are responsible for providing the
	synchronization across API calls when objects are accessed from
	different execution threads.</para>

    </refsect1>
    <refsect1 id="errors"><title>Errors</title>
	<para><constant>GL_INVALID_VALUE</constant> is generated if
	<parameter>program</parameter> is neither 0 nor a value
	generated by OpenGL.</para>

	<para><constant>GL_INVALID_OPERATION</constant> is generated if
	<parameter>program</parameter> is not a program object.</para>

	<para><constant>GL_INVALID_OPERATION</constant> is generated if
	<parameter>program</parameter> could not be made part of current
	state.</para>

	<para><constant>GL_INVALID_OPERATION</constant> is generated if
	<function>glUseProgram</function> is executed between the
	execution of
	<citerefentry><refentrytitle>glBegin</refentrytitle></citerefentry>
	and the corresponding execution of
	<citerefentry><refentrytitle>glEnd</refentrytitle></citerefentry>.</para>
    </refsect1>
    <refsect1 id="associatedgets"><title>Associated Gets</title>
	<para><citerefentry><refentrytitle>glGet</refentrytitle></citerefentry>
	with the argument <constant>GL_CURRENT_PROGRAM</constant></para>

	<para><citerefentry><refentrytitle>glGetActiveAttrib</refentrytitle></citerefentry>
	with a valid program object and the index of an active attribute
	variable</para>

	<para><citerefentry><refentrytitle>glGetActiveUniform</refentrytitle></citerefentry>
	with a valid program object and the index of an active uniform
	variable</para>

	<para><citerefentry><refentrytitle>glGetAttachedShaders</refentrytitle></citerefentry>
	with a valid program object</para>

	<para><citerefentry><refentrytitle>glGetAttribLocation</refentrytitle></citerefentry>
	with a valid program object and the name of an attribute
	variable</para>

	<para><citerefentry><refentrytitle>glGetProgram</refentrytitle></citerefentry>
	with a valid program object and the parameter to be queried</para>

	<para><citerefentry><refentrytitle>glGetProgramInfoLog</refentrytitle></citerefentry>
	with a valid program object</para>

	<para><citerefentry><refentrytitle>glGetUniform</refentrytitle></citerefentry>
	with a valid program object and the location of a uniform
	variable</para>

	<para><citerefentry><refentrytitle>glGetUniformLocation</refentrytitle></citerefentry>
	with a valid program object and the name of a uniform
	variable</para>

	<para><citerefentry><refentrytitle>glIsProgram</refentrytitle></citerefentry></para>
    </refsect1>
    <refsect1 id="seealso"><title>See Also</title>
	<para><citerefentry><refentrytitle>gllAttachShader</refentrytitle></citerefentry>,
	<citerefentry><refentrytitle>glBindAttribLocation</refentrytitle></citerefentry>,
	<citerefentry><refentrytitle>glCompileShader</refentrytitle></citerefentry>,
	<citerefentry><refentrytitle>glCreateProgram</refentrytitle></citerefentry>,
	<citerefentry><refentrytitle>glDeleteProgram</refentrytitle></citerefentry>,
	<citerefentry><refentrytitle>glDetachShader</refentrytitle></citerefentry>,
	<citerefentry><refentrytitle>glLinkProgram</refentrytitle></citerefentry>,
	<citerefentry><refentrytitle>glUniform</refentrytitle></citerefentry>,
	<citerefentry><refentrytitle>glValidateProgram</refentrytitle></citerefentry>,
	<citerefentry><refentrytitle>glVertexAttrib</refentrytitle></citerefentry></para>
    </refsect1>
    <refsect1 id="Copyright"><title>Copyright</title>
        <para>
            Copyright <trademark class="copyright"></trademark> 2003-2005 3Dlabs Inc. Ltd. 
            This material may be distributed subject to the terms and conditions set forth in 
            the Open Publication License, v 1.0, 8 June 1999.
            <ulink url="http://opencontent.org/openpub/">http://opencontent.org/openpub/</ulink>.
        </para>
    </refsect1>
</refentry>
