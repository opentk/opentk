<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook MathML Module V1.1b1//EN"
              "http://www.oasis-open.org/docbook/xml/mathml/1.1CR1/dbmathml.dtd">
<refentry id="glDrawRangeElements">
    <refmeta>
        <refmetainfo>
            <copyright>
                <year>1991-2006</year>
                <holder>Silicon Graphics, Inc.</holder>
            </copyright>
        </refmetainfo>
        <refentrytitle>glDrawRangeElements</refentrytitle>
        <manvolnum>3G</manvolnum>
    </refmeta>
    <refnamediv>
        <refname>glDrawRangeElements</refname>
        <refpurpose>render primitives from array data</refpurpose>
    </refnamediv>
    <refsynopsisdiv><title>C Specification</title>
        <funcsynopsis>
            <funcprototype>
                <funcdef>void <function>glDrawRangeElements</function></funcdef>
                <paramdef>GLenum <parameter>mode</parameter></paramdef>
                <paramdef>GLuint <parameter>start</parameter></paramdef>
                <paramdef>GLuint <parameter>end</parameter></paramdef>
                <paramdef>GLsizei <parameter>count</parameter></paramdef>
                <paramdef>GLenum <parameter>type</parameter></paramdef>
                <paramdef>const void * <parameter>indices</parameter></paramdef>
            </funcprototype>
        </funcsynopsis>
    </refsynopsisdiv>
    <!-- eqn: ignoring delim $$ -->
    <refsect1 id="parameters"><title>Parameters</title>
        <variablelist>
        <varlistentry>
            <term><parameter>mode</parameter></term>
            <listitem>
                <para>
                    Specifies what kind of primitives to render.
                    Symbolic constants
                    <constant>GL_POINTS</constant>,
                    <constant>GL_LINE_STRIP</constant>,
                    <constant>GL_LINE_LOOP</constant>,
                    <constant>GL_LINES</constant>,
                    <constant>GL_TRIANGLE_STRIP</constant>,
                    <constant>GL_TRIANGLE_FAN</constant>,
                    <constant>GL_TRIANGLES</constant>,
                    <constant>GL_QUAD_STRIP</constant>,
                    <constant>GL_QUADS</constant>,
                    and <constant>GL_POLYGON</constant> are accepted.
                </para>
            </listitem>
        </varlistentry>
        <varlistentry>
            <term><parameter>start</parameter></term>
            <listitem>
                <para>
                    Specifies the minimum array index contained in <parameter>indices</parameter>.
                </para>
            </listitem>
        </varlistentry>
        <varlistentry>
            <term><parameter>end</parameter></term>
            <listitem>
                <para>
                    Specifies the maximum array index contained in <parameter>indices</parameter>.
                </para>
            </listitem>
        </varlistentry>
        <varlistentry>
            <term><parameter>count</parameter></term>
            <listitem>
                <para>
                    Specifies the number of elements to be rendered.
                </para>
            </listitem>
        </varlistentry>
        <varlistentry>
            <term><parameter>type</parameter></term>
            <listitem>
                <para>
                    Specifies the type of the values in <parameter>indices</parameter>. Must be one of
                    <constant>GL_UNSIGNED_BYTE</constant>, <constant>GL_UNSIGNED_SHORT</constant>, or
                    <constant>GL_UNSIGNED_INT</constant>.
                </para>
            </listitem>
        </varlistentry>
        <varlistentry>
            <term><parameter>indices</parameter></term>
            <listitem>
                <para>
                    Specifies a pointer to the location where the indices are stored.
                </para>
            </listitem>
        </varlistentry>
        </variablelist>
    </refsect1>
    <refsect1 id="description"><title>Description</title>
        <para>
            <function>glDrawRangeElements</function> is a restricted form of <citerefentry><refentrytitle>glDrawElements</refentrytitle></citerefentry>. <parameter>mode</parameter>
            and <parameter>count</parameter> match the corresponding arguments to <citerefentry><refentrytitle>glDrawElements</refentrytitle></citerefentry>, with
            the additional constraint that all values in the arrays <parameter>count</parameter> must lie
            between <parameter>start</parameter> and <parameter>end</parameter>, inclusive.
        </para>
        <para>
            Implementations denote recommended maximum amounts of vertex and
            index data,
            which may be queried by calling <citerefentry><refentrytitle>glGet</refentrytitle></citerefentry> with argument
            <constant>GL_MAX_ELEMENTS_VERTICES</constant> and <constant>GL_MAX_ELEMENTS_INDICES</constant>.
            If 
            <inlineequation><mml:math>
                <!-- eqn: end  -  start  +  1:-->
                <mml:mrow>
                    <mml:mi mathvariant="italic">end</mml:mi>
                    <mml:mo>-</mml:mo>
                    <mml:mi mathvariant="italic">start</mml:mi>
                    <mml:mo>+</mml:mo>
                    <mml:mn>1</mml:mn>
                </mml:mrow>
            </mml:math></inlineequation>
            is greater than the value of
            <constant>GL_MAX_ELEMENTS_VERTICES</constant>, or if <parameter>count</parameter> is greater than the value of
            <constant>GL_MAX_ELEMENTS_INDICES</constant>, then the call may operate at reduced
            performance.  There is no requirement that all vertices in the range
            <inlineequation><mml:math>
                <!-- eqn: [start, end]:-->
                <mml:mfenced open="[" close="]">
                    <mml:mi mathvariant="italic">start</mml:mi>
                    <mml:mi mathvariant="italic">end</mml:mi>
                </mml:mfenced>
            </mml:math></inlineequation>
            be referenced.  However, the implementation may
            partially process unused vertices, reducing performance from what could
            be achieved with an optimal index set.
        </para>
        <para>
            When <function>glDrawRangeElements</function> is called, it uses <parameter>count</parameter> sequential elements from an
            enabled array, starting at <parameter>start</parameter> to construct a sequence of
            geometric primitives. <parameter>mode</parameter> specifies what kind of primitives are
            constructed, and how the array elements construct these primitives. If
            more than one array is enabled, each is used. If
            <constant>GL_VERTEX_ARRAY</constant> is not enabled, no geometric primitives are
            constructed.
        </para>
        <para>
            Vertex attributes that are modified by <function>glDrawRangeElements</function> have an
            unspecified value after <function>glDrawRangeElements</function> returns. For example, if
            <constant>GL_COLOR_ARRAY</constant> is enabled, the value of the current color is
            undefined after <function>glDrawRangeElements</function> executes. Attributes that aren't
            modified maintain their previous values.
        </para>
    </refsect1>
    <refsect1 id="notes"><title>Notes</title>
        <para>
            <function>glDrawRangeElements</function> is available only if the GL version is 1.2 or greater.
        </para>
        <para>
            <function>glDrawRangeElements</function> is included in display lists. If <function>glDrawRangeElements</function> is entered into a
            display list,
            the necessary array data (determined by the array pointers and
            enables) is also
            entered into the display list. Because the array pointers and
            enables are client-side state, their values affect display lists
            when the lists are created, not when the lists are executed.
        </para>
    </refsect1>
    <refsect1 id="errors"><title>Errors</title>
        <para>
            It is an error for indices to lie outside the range 
            <inlineequation><mml:math>
                <!-- eqn: [start, end]:-->
                <mml:mfenced open="[" close="]">
                    <mml:mi mathvariant="italic">start</mml:mi>
                    <mml:mi mathvariant="italic">end</mml:mi>
                </mml:mfenced>
            </mml:math></inlineequation>,
            but implementations may not check for this situation. Such indices
            cause implementation-dependent behavior.
        </para>
        <para>
            <constant>GL_INVALID_ENUM</constant> is generated if <parameter>mode</parameter> is not an accepted value.
        </para>
        <para>
            <constant>GL_INVALID_VALUE</constant> is generated if <parameter>count</parameter> is negative.
        </para>
        <para>
            <constant>GL_INVALID_VALUE</constant> is generated if 
            <inlineequation><mml:math>
                <!-- eqn: end < start:-->
                <mml:mrow>
                    <mml:mi mathvariant="italic">end</mml:mi>
                    <mml:mo>&lt;</mml:mo>
                    <mml:mi mathvariant="italic">start</mml:mi>
                </mml:mrow>
            </mml:math></inlineequation>.
        </para>
        <para>
            <constant>GL_INVALID_OPERATION</constant> is generated if a non-zero buffer object name is bound to an
            enabled array or the element array and the buffer object's data store is currently mapped.
        </para>
        <para>
            <constant>GL_INVALID_OPERATION</constant> is generated if <function>glDrawRangeElements</function> is executed between
            the execution of <citerefentry><refentrytitle>glBegin</refentrytitle></citerefentry> and the corresponding <citerefentry><refentrytitle>glEnd</refentrytitle></citerefentry>.
        </para>
    </refsect1>
    <refsect1 id="associatedgets"><title>Associated Gets</title>
        <para>
            <citerefentry><refentrytitle>glGet</refentrytitle></citerefentry> with argument <constant>GL_MAX_ELEMENTS_VERTICES</constant>
        </para>
        <para>
            <citerefentry><refentrytitle>glGet</refentrytitle></citerefentry> with argument <constant>GL_MAX_ELEMENTS_INDICES</constant>
        </para>
    </refsect1>
    <refsect1 id="seealso"><title>See Also</title>
        <para>
            <citerefentry><refentrytitle>glArrayElement</refentrytitle></citerefentry>,
            <citerefentry><refentrytitle>glColorPointer</refentrytitle></citerefentry>,
            <citerefentry><refentrytitle>glDrawArrays</refentrytitle></citerefentry>,
            <citerefentry><refentrytitle>glDrawElements</refentrytitle></citerefentry>,
            <citerefentry><refentrytitle>glEdgeFlagPointer</refentrytitle></citerefentry>,
            <citerefentry><refentrytitle>glGetPointerv</refentrytitle></citerefentry>,
            <citerefentry><refentrytitle>glIndexPointer</refentrytitle></citerefentry>,
            <citerefentry><refentrytitle>glInterleavedArrays</refentrytitle></citerefentry>,
            <citerefentry><refentrytitle>glNormalPointer</refentrytitle></citerefentry>,
            <citerefentry><refentrytitle>glSecondaryColorPointer</refentrytitle></citerefentry>,
            <citerefentry><refentrytitle>glTexCoordPointer</refentrytitle></citerefentry>,
            <citerefentry><refentrytitle>glVertexPointer</refentrytitle></citerefentry>
        </para>
    </refsect1>
    <refsect1 id="Copyright"><title>Copyright</title>
        <para>
            Copyright <trademark class="copyright"></trademark> 1991-2006
            Silicon Graphics, Inc. This document is licensed under the SGI
            Free Software B License. For details, see
            <ulink url="https://khronos.org/registry/OpenGL-Refpages/LICENSES/LicenseRef-FreeB.txt">https://khronos.org/registry/OpenGL-Refpages/LICENSES/LicenseRef-FreeB.txt</ulink>.
        </para>
    </refsect1>
</refentry>
