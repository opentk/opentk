// <auto-generated />
//
// The Open Toolkit Library License
//
// Copyright (c) 2006 - 2015 Stefanos Apostolopoulos for the Open Toolkit Library
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do
// so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.
//



namespace OpenTK.Graphics.OpenGL4
{
    using System;
    using System.Text;
    using System.Runtime.InteropServices;

    internal class SlotAttribute : Attribute
    {
        public SlotAttribute(int slot)
        {
        }
    }
    internal class CountAttribute : Attribute
    {
        public string Parameter { get; set; }
        public string Computed { get; set; }
        public int Count { get; set; }
    }
    

    partial interface GL
    {
        [Slot(8)]
        
        void glBeginPerfMonitorAMD(UInt32 monitor);
        [Slot(198)]
        
        unsafe void glDeletePerfMonitorsAMD(Int32 n, [CountAttribute(Parameter = "n")] UInt32* monitors);
        [Slot(271)]
        
        void glEndPerfMonitorAMD(UInt32 monitor);
        [Slot(309)]
        
        unsafe void glGenPerfMonitorsAMD(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] UInt32* monitors);
        [Slot(486)]
        
        unsafe void glGetPerfMonitorCounterDataAMD(UInt32 monitor, System.Int32 pname, Int32 dataSize, [OutAttribute, CountAttribute(Parameter = "dataSize")] UInt32* data, [OutAttribute, CountAttribute(Count = 1)] Int32* bytesWritten);
        [Slot(487)]
        
        void glGetPerfMonitorCounterInfoAMD(UInt32 group, UInt32 counter, System.Int32 pname, [OutAttribute, CountAttribute(Computed = "pname")] IntPtr data);
        [Slot(488)]
        
        unsafe void glGetPerfMonitorCountersAMD(UInt32 group, [OutAttribute, CountAttribute(Count = 1)] Int32* numCounters, [OutAttribute, CountAttribute(Count = 1)] Int32* maxActiveCounters, Int32 counterSize, [OutAttribute, CountAttribute(Parameter = "counterSize")] UInt32* counters);
        [Slot(489)]
        
        unsafe void glGetPerfMonitorCounterStringAMD(UInt32 group, UInt32 counter, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr counterString);
        [Slot(490)]
        
        unsafe void glGetPerfMonitorGroupsAMD([OutAttribute, CountAttribute(Count = 1)] Int32* numGroups, Int32 groupsSize, [OutAttribute, CountAttribute(Parameter = "groupsSize")] UInt32* groups);
        [Slot(491)]
        
        unsafe void glGetPerfMonitorGroupStringAMD(UInt32 group, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr groupString);
        [Slot(1012)]
        
        unsafe void glSelectPerfMonitorCountersAMD(UInt32 monitor, bool enable, UInt32 group, Int32 numCounters, [OutAttribute, CountAttribute(Parameter = "numCounters")] UInt32* counterList);
        [Slot(42)]
        
        void glBlendEquationiARB(UInt32 buf, System.Int32 mode);
        [Slot(45)]
        
        void glBlendEquationSeparateiARB(UInt32 buf, System.Int32 modeRGB, System.Int32 modeAlpha);
        [Slot(48)]
        
        void glBlendFunciARB(UInt32 buf, System.Int32 src, System.Int32 dst);
        [Slot(51)]
        
        void glBlendFuncSeparateiARB(UInt32 buf, System.Int32 srcRGB, System.Int32 dstRGB, System.Int32 srcAlpha, System.Int32 dstAlpha);
        [Slot(57)]
        
        void glBufferPageCommitmentARB(System.Int32 target, IntPtr offset, IntPtr size, bool commit);
        [Slot(103)]
        
        unsafe void glCompileShaderIncludeARB(UInt32 shader, Int32 count, [CountAttribute(Parameter = "count")] IntPtr path, [CountAttribute(Parameter = "count")] Int32* length);
        [Slot(179)]
        
        unsafe IntPtr glCreateSyncFromCLeventARB([OutAttribute] IntPtr* context, [OutAttribute] IntPtr* @event, UInt32 flags);
        [Slot(185)]
        
        void glDebugMessageCallbackARB(DebugProcArb callback, [CountAttribute(Computed = "callback")] IntPtr userParam);
        [Slot(188)]
        
        unsafe void glDebugMessageControlARB(System.Int32 source, System.Int32 type, System.Int32 severity, Int32 count, [CountAttribute(Parameter = "count")] UInt32* ids, bool enabled);
        [Slot(191)]
        
        void glDebugMessageInsertARB(System.Int32 source, System.Int32 type, UInt32 id, System.Int32 severity, Int32 length, [CountAttribute(Parameter = "length")] IntPtr buf);
        [Slot(196)]
        
        void glDeleteNamedStringARB(Int32 namelen, [CountAttribute(Parameter = "namelen")] IntPtr name);
        [Slot(229)]
        
        void glDispatchComputeGroupSizeARB(UInt32 num_groups_x, UInt32 num_groups_y, UInt32 num_groups_z, UInt32 group_size_x, UInt32 group_size_y, UInt32 group_size_z);
        [Slot(234)]
        
        void glDrawArraysInstancedARB(System.Int32 mode, Int32 first, Int32 count, Int32 primcount);
        [Slot(247)]
        
        void glDrawElementsInstancedARB(System.Int32 mode, Int32 count, System.Int32 type, [CountAttribute(Computed = "count,type")] IntPtr indices, Int32 primcount);
        [Slot(276)]
        
        void glEvaluateDepthValuesARB();
        [Slot(290)]
        
        unsafe void glFramebufferSampleLocationsfvARB(System.Int32 target, UInt32 start, Int32 count, Single* v);
        [Slot(296)]
        
        void glFramebufferTextureARB(System.Int32 target, System.Int32 attachment, UInt32 texture, Int32 level);
        [Slot(297)]
        
        void glFramebufferTextureFaceARB(System.Int32 target, System.Int32 attachment, UInt32 texture, Int32 level, System.Int32 face);
        [Slot(299)]
        
        void glFramebufferTextureLayerARB(System.Int32 target, System.Int32 attachment, UInt32 texture, Int32 level, Int32 layer);
        [Slot(352)]
        
        unsafe Int32 glGetDebugMessageLogARB(UInt32 count, Int32 bufSize, [OutAttribute, CountAttribute(Parameter = "count")] System.Int32* sources, [OutAttribute, CountAttribute(Parameter = "count")] System.Int32* types, [OutAttribute, CountAttribute(Parameter = "count")] UInt32* ids, [OutAttribute, CountAttribute(Parameter = "count")] System.Int32* severities, [OutAttribute, CountAttribute(Parameter = "count")] Int32* lengths, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr messageLog);
        [Slot(370)]
        
        System.Int32 glGetGraphicsResetStatusARB();
        [Slot(375)]
        
        Int64 glGetImageHandleARB(UInt32 texture, Int32 level, bool layered, Int32 layer, System.Int32 format);
        [Slot(423)]
        
        unsafe void glGetNamedStringARB(Int32 namelen, [CountAttribute(Parameter = "namelen")] IntPtr name, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32* stringlen, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr @string);
        [Slot(424)]
        
        unsafe void glGetNamedStringivARB(Int32 namelen, [CountAttribute(Parameter = "namelen")] IntPtr name, System.Int32 pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* @params);
        [Slot(426)]
        
        void glGetnColorTableARB(System.Int32 target, System.Int32 format, System.Int32 type, Int32 bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr table);
        [Slot(428)]
        
        void glGetnCompressedTexImageARB(System.Int32 target, Int32 lod, Int32 bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr img);
        [Slot(430)]
        
        void glGetnConvolutionFilterARB(System.Int32 target, System.Int32 format, System.Int32 type, Int32 bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr image);
        [Slot(433)]
        
        void glGetnHistogramARB(System.Int32 target, bool reset, System.Int32 format, System.Int32 type, Int32 bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr values);
        [Slot(435)]
        
        unsafe void glGetnMapdvARB(System.Int32 target, System.Int32 query, Int32 bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] Double* v);
        [Slot(437)]
        
        unsafe void glGetnMapfvARB(System.Int32 target, System.Int32 query, Int32 bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] Single* v);
        [Slot(439)]
        
        unsafe void glGetnMapivARB(System.Int32 target, System.Int32 query, Int32 bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] Int32* v);
        [Slot(441)]
        
        void glGetnMinmaxARB(System.Int32 target, bool reset, System.Int32 format, System.Int32 type, Int32 bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr values);
        [Slot(443)]
        
        unsafe void glGetnPixelMapfvARB(System.Int32 map, Int32 bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] Single* values);
        [Slot(445)]
        
        unsafe void glGetnPixelMapuivARB(System.Int32 map, Int32 bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] UInt32* values);
        [Slot(447)]
        
        unsafe void glGetnPixelMapusvARB(System.Int32 map, Int32 bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] UInt16* values);
        [Slot(449)]
        
        unsafe void glGetnPolygonStippleARB(Int32 bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] Byte* pattern);
        [Slot(451)]
        
        void glGetnSeparableFilterARB(System.Int32 target, System.Int32 format, System.Int32 type, Int32 rowBufSize, [OutAttribute, CountAttribute(Parameter = "rowBufSize")] IntPtr row, Int32 columnBufSize, [OutAttribute, CountAttribute(Parameter = "columnBufSize")] IntPtr column, [OutAttribute, CountAttribute(Count = 0)] IntPtr span);
        [Slot(453)]
        
        void glGetnTexImageARB(System.Int32 target, Int32 level, System.Int32 format, System.Int32 type, Int32 bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr img);
        [Slot(455)]
        
        unsafe void glGetnUniformdvARB(UInt32 program, Int32 location, Int32 bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] Double* @params);
        [Slot(457)]
        
        unsafe void glGetnUniformfvARB(UInt32 program, Int32 location, Int32 bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] Single* @params);
        [Slot(459)]
        
        unsafe void glGetnUniformi64vARB(UInt32 program, Int32 location, Int32 bufSize, [OutAttribute] Int64* @params);
        [Slot(461)]
        
        unsafe void glGetnUniformivARB(UInt32 program, Int32 location, Int32 bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] Int32* @params);
        [Slot(463)]
        
        unsafe void glGetnUniformui64vARB(UInt32 program, Int32 location, Int32 bufSize, [OutAttribute] UInt64* @params);
        [Slot(465)]
        
        unsafe void glGetnUniformuivARB(UInt32 program, Int32 location, Int32 bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] UInt32* @params);
        [Slot(547)]
        
        Int64 glGetTextureHandleARB(UInt32 texture);
        [Slot(563)]
        
        Int64 glGetTextureSamplerHandleARB(UInt32 texture, UInt32 sampler);
        [Slot(573)]
        
        unsafe void glGetUniformi64vARB(UInt32 program, Int32 location, [OutAttribute, CountAttribute(Computed = "program,location")] Int64* @params);
        [Slot(579)]
        
        unsafe void glGetUniformui64vARB(UInt32 program, Int32 location, [OutAttribute, CountAttribute(Computed = "program,location")] UInt64* @params);
        [Slot(596)]
        
        unsafe void glGetVertexAttribLui64vARB(UInt32 index, System.Int32 pname, [OutAttribute] UInt64* @params);
        [Slot(620)]
        
        byte glIsImageHandleResidentARB(UInt64 handle);
        [Slot(623)]
        
        byte glIsNamedStringARB(Int32 namelen, [CountAttribute(Parameter = "namelen")] IntPtr name);
        [Slot(637)]
        
        byte glIsTextureHandleResidentARB(UInt64 handle);
        [Slot(648)]
        
        void glMakeImageHandleNonResidentARB(UInt64 handle);
        [Slot(650)]
        
        void glMakeImageHandleResidentARB(UInt64 handle, System.Int32 access);
        [Slot(654)]
        
        void glMakeTextureHandleNonResidentARB(UInt64 handle);
        [Slot(656)]
        
        void glMakeTextureHandleResidentARB(UInt64 handle);
        [Slot(689)]
        
        void glMaxShaderCompilerThreadsARB(UInt32 count);
        [Slot(695)]
        
        void glMinSampleShadingARB(Single value);
        [Slot(701)]
        
        void glMultiDrawArraysIndirectCountARB(System.Int32 mode, IntPtr indirect, IntPtr drawcount, Int32 maxdrawcount, Int32 stride);
        [Slot(708)]
        
        void glMultiDrawElementsIndirectCountARB(System.Int32 mode, System.Int32 type, IntPtr indirect, IntPtr drawcount, Int32 maxdrawcount, Int32 stride);
        [Slot(744)]
        
        void glNamedBufferPageCommitmentARB(UInt32 buffer, IntPtr offset, IntPtr size, bool commit);
        [Slot(758)]
        
        unsafe void glNamedFramebufferSampleLocationsfvARB(UInt32 framebuffer, UInt32 start, Int32 count, Single* v);
        [Slot(785)]
        
        void glNamedStringARB(System.Int32 type, Int32 namelen, [CountAttribute(Parameter = "namelen")] IntPtr name, Int32 stringlen, [CountAttribute(Parameter = "stringlen")] IntPtr @string);
        [Slot(832)]
        
        void glPrimitiveBoundingBoxARB(Single minX, Single minY, Single minZ, Single minW, Single maxX, Single maxY, Single maxZ, Single maxW);
        [Slot(836)]
        
        void glProgramParameteriARB(UInt32 program, System.Int32 pname, Int32 value);
        [Slot(848)]
        
        void glProgramUniform1i64ARB(UInt32 program, Int32 location, Int64 x);
        [Slot(850)]
        
        unsafe void glProgramUniform1i64vARB(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count")] Int64* value);
        [Slot(856)]
        
        void glProgramUniform1ui64ARB(UInt32 program, Int32 location, UInt64 x);
        [Slot(858)]
        
        unsafe void glProgramUniform1ui64vARB(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count")] UInt64* value);
        [Slot(872)]
        
        void glProgramUniform2i64ARB(UInt32 program, Int32 location, Int64 x, Int64 y);
        [Slot(874)]
        
        unsafe void glProgramUniform2i64vARB(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*2")] Int64* value);
        [Slot(880)]
        
        void glProgramUniform2ui64ARB(UInt32 program, Int32 location, UInt64 x, UInt64 y);
        [Slot(882)]
        
        unsafe void glProgramUniform2ui64vARB(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*2")] UInt64* value);
        [Slot(896)]
        
        void glProgramUniform3i64ARB(UInt32 program, Int32 location, Int64 x, Int64 y, Int64 z);
        [Slot(898)]
        
        unsafe void glProgramUniform3i64vARB(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*3")] Int64* value);
        [Slot(904)]
        
        void glProgramUniform3ui64ARB(UInt32 program, Int32 location, UInt64 x, UInt64 y, UInt64 z);
        [Slot(906)]
        
        unsafe void glProgramUniform3ui64vARB(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*3")] UInt64* value);
        [Slot(920)]
        
        void glProgramUniform4i64ARB(UInt32 program, Int32 location, Int64 x, Int64 y, Int64 z, Int64 w);
        [Slot(922)]
        
        unsafe void glProgramUniform4i64vARB(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*4")] Int64* value);
        [Slot(928)]
        
        void glProgramUniform4ui64ARB(UInt32 program, Int32 location, UInt64 x, UInt64 y, UInt64 z, UInt64 w);
        [Slot(930)]
        
        unsafe void glProgramUniform4ui64vARB(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*4")] UInt64* value);
        [Slot(935)]
        
        void glProgramUniformHandleui64ARB(UInt32 program, Int32 location, UInt64 value);
        [Slot(937)]
        
        unsafe void glProgramUniformHandleui64vARB(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count")] UInt64* values);
        [Slot(986)]
        
        void glReadnPixelsARB(Int32 x, Int32 y, Int32 width, Int32 height, System.Int32 format, System.Int32 type, Int32 bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr data);
        [Slot(1020)]
        
        unsafe void glSpecializeShaderARB(UInt32 shader, IntPtr pEntryPoint, UInt32 numSpecializationConstants, UInt32* pConstantIndex, UInt32* pConstantValue);
        [Slot(1038)]
        
        void glTexBufferARB(System.Int32 target, System.Int32 internalformat, UInt32 buffer);
        [Slot(1054)]
        
        void glTexPageCommitmentARB(System.Int32 target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, bool commit);
        [Slot(1118)]
        
        void glUniform1i64ARB(Int32 location, Int64 x);
        [Slot(1120)]
        
        unsafe void glUniform1i64vARB(Int32 location, Int32 count, [CountAttribute(Parameter = "count*1")] Int64* value);
        [Slot(1124)]
        
        void glUniform1ui64ARB(Int32 location, UInt64 x);
        [Slot(1126)]
        
        unsafe void glUniform1ui64vARB(Int32 location, Int32 count, [CountAttribute(Parameter = "count*1")] UInt64* value);
        [Slot(1134)]
        
        void glUniform2i64ARB(Int32 location, Int64 x, Int64 y);
        [Slot(1136)]
        
        unsafe void glUniform2i64vARB(Int32 location, Int32 count, [CountAttribute(Parameter = "count*2")] Int64* value);
        [Slot(1140)]
        
        void glUniform2ui64ARB(Int32 location, UInt64 x, UInt64 y);
        [Slot(1142)]
        
        unsafe void glUniform2ui64vARB(Int32 location, Int32 count, [CountAttribute(Parameter = "count*2")] UInt64* value);
        [Slot(1150)]
        
        void glUniform3i64ARB(Int32 location, Int64 x, Int64 y, Int64 z);
        [Slot(1152)]
        
        unsafe void glUniform3i64vARB(Int32 location, Int32 count, [CountAttribute(Parameter = "count*3")] Int64* value);
        [Slot(1156)]
        
        void glUniform3ui64ARB(Int32 location, UInt64 x, UInt64 y, UInt64 z);
        [Slot(1158)]
        
        unsafe void glUniform3ui64vARB(Int32 location, Int32 count, [CountAttribute(Parameter = "count*3")] UInt64* value);
        [Slot(1166)]
        
        void glUniform4i64ARB(Int32 location, Int64 x, Int64 y, Int64 z, Int64 w);
        [Slot(1168)]
        
        unsafe void glUniform4i64vARB(Int32 location, Int32 count, [CountAttribute(Parameter = "count*4")] Int64* value);
        [Slot(1172)]
        
        void glUniform4ui64ARB(Int32 location, UInt64 x, UInt64 y, UInt64 z, UInt64 w);
        [Slot(1174)]
        
        unsafe void glUniform4ui64vARB(Int32 location, Int32 count, [CountAttribute(Parameter = "count*4")] UInt64* value);
        [Slot(1178)]
        
        void glUniformHandleui64ARB(Int32 location, UInt64 value);
        [Slot(1180)]
        
        unsafe void glUniformHandleui64vARB(Int32 location, Int32 count, [CountAttribute(Parameter = "count")] UInt64* value);
        [Slot(1278)]
        
        void glVertexAttribDivisorARB(UInt32 index, UInt32 divisor);
        [Slot(1308)]
        
        void glVertexAttribL1ui64ARB(UInt32 index, UInt64 x);
        [Slot(1310)]
        
        unsafe void glVertexAttribL1ui64vARB(UInt32 index, UInt64* v);
        [Slot(4)]
        
        void glApplyFramebufferAttachmentCMAAINTEL();
        [Slot(1)]
        
        void glActiveShaderProgram(UInt32 pipeline, UInt32 program);
        [Slot(3)]
        
        void glActiveTexture(System.Int32 texture);
        [Slot(5)]
        
        void glAttachShader(UInt32 program, UInt32 shader);
        [Slot(6)]
        
        void glBeginConditionalRender(UInt32 id, System.Int32 mode);
        [Slot(10)]
        
        void glBeginQuery(System.Int32 target, UInt32 id);
        [Slot(11)]
        
        void glBeginQueryIndexed(System.Int32 target, UInt32 index, UInt32 id);
        [Slot(12)]
        
        void glBeginTransformFeedback(System.Int32 primitiveMode);
        [Slot(13)]
        
        void glBindAttribLocation(UInt32 program, UInt32 index, IntPtr name);
        [Slot(14)]
        
        void glBindBuffer(System.Int32 target, UInt32 buffer);
        [Slot(15)]
        
        void glBindBufferBase(System.Int32 target, UInt32 index, UInt32 buffer);
        [Slot(16)]
        
        void glBindBufferRange(System.Int32 target, UInt32 index, UInt32 buffer, IntPtr offset, IntPtr size);
        [Slot(17)]
        
        unsafe void glBindBuffersBase(System.Int32 target, UInt32 first, Int32 count, [CountAttribute(Parameter = "count")] UInt32* buffers);
        [Slot(18)]
        
        unsafe void glBindBuffersRange(System.Int32 target, UInt32 first, Int32 count, [CountAttribute(Parameter = "count")] UInt32* buffers, [CountAttribute(Parameter = "count")] IntPtr* offsets, [CountAttribute(Parameter = "count")] IntPtr* sizes);
        [Slot(19)]
        
        void glBindFragDataLocation(UInt32 program, UInt32 color, [CountAttribute(Computed = "name")] IntPtr name);
        [Slot(20)]
        
        void glBindFragDataLocationIndexed(UInt32 program, UInt32 colorNumber, UInt32 index, IntPtr name);
        [Slot(21)]
        
        void glBindFramebuffer(System.Int32 target, UInt32 framebuffer);
        [Slot(22)]
        
        void glBindImageTexture(UInt32 unit, UInt32 texture, Int32 level, bool layered, Int32 layer, System.Int32 access, System.Int32 format);
        [Slot(23)]
        
        unsafe void glBindImageTextures(UInt32 first, Int32 count, [CountAttribute(Parameter = "count")] UInt32* textures);
        [Slot(25)]
        
        void glBindProgramPipeline(UInt32 pipeline);
        [Slot(27)]
        
        void glBindRenderbuffer(System.Int32 target, UInt32 renderbuffer);
        [Slot(28)]
        
        void glBindSampler(UInt32 unit, UInt32 sampler);
        [Slot(29)]
        
        unsafe void glBindSamplers(UInt32 first, Int32 count, [CountAttribute(Parameter = "count")] UInt32* samplers);
        [Slot(30)]
        
        void glBindTexture(System.Int32 target, UInt32 texture);
        [Slot(31)]
        
        unsafe void glBindTextures(UInt32 first, Int32 count, [CountAttribute(Parameter = "count")] UInt32* textures);
        [Slot(32)]
        
        void glBindTextureUnit(UInt32 unit, UInt32 texture);
        [Slot(33)]
        
        void glBindTransformFeedback(System.Int32 target, UInt32 id);
        [Slot(34)]
        
        void glBindVertexArray(UInt32 array);
        [Slot(35)]
        
        void glBindVertexBuffer(UInt32 bindingindex, UInt32 buffer, IntPtr offset, Int32 stride);
        [Slot(36)]
        
        unsafe void glBindVertexBuffers(UInt32 first, Int32 count, [CountAttribute(Parameter = "count")] UInt32* buffers, [CountAttribute(Parameter = "count")] IntPtr* offsets, [CountAttribute(Parameter = "count")] Int32* strides);
        [Slot(39)]
        
        void glBlendColor(Single red, Single green, Single blue, Single alpha);
        [Slot(40)]
        
        void glBlendEquation(System.Int32 mode);
        [Slot(41)]
        
        void glBlendEquationi(UInt32 buf, System.Int32 mode);
        [Slot(43)]
        
        void glBlendEquationSeparate(System.Int32 modeRGB, System.Int32 modeAlpha);
        [Slot(44)]
        
        void glBlendEquationSeparatei(UInt32 buf, System.Int32 modeRGB, System.Int32 modeAlpha);
        [Slot(46)]
        
        void glBlendFunc(System.Int32 sfactor, System.Int32 dfactor);
        [Slot(47)]
        
        void glBlendFunci(UInt32 buf, System.Int32 src, System.Int32 dst);
        [Slot(49)]
        
        void glBlendFuncSeparate(System.Int32 sfactorRGB, System.Int32 dfactorRGB, System.Int32 sfactorAlpha, System.Int32 dfactorAlpha);
        [Slot(50)]
        
        void glBlendFuncSeparatei(UInt32 buf, System.Int32 srcRGB, System.Int32 dstRGB, System.Int32 srcAlpha, System.Int32 dstAlpha);
        [Slot(53)]
        
        void glBlitFramebuffer(Int32 srcX0, Int32 srcY0, Int32 srcX1, Int32 srcY1, Int32 dstX0, Int32 dstY0, Int32 dstX1, Int32 dstY1, System.Int32 mask, System.Int32 filter);
        [Slot(54)]
        
        void glBlitNamedFramebuffer(UInt32 readFramebuffer, UInt32 drawFramebuffer, Int32 srcX0, Int32 srcY0, Int32 srcX1, Int32 srcY1, Int32 dstX0, Int32 dstY0, Int32 dstX1, Int32 dstY1, System.Int32 mask, System.Int32 filter);
        [Slot(56)]
        
        void glBufferData(System.Int32 target, IntPtr size, [CountAttribute(Parameter = "size")] IntPtr data, System.Int32 usage);
        [Slot(58)]
        
        void glBufferStorage(System.Int32 target, IntPtr size, [CountAttribute(Parameter = "size")] IntPtr data, System.Int32 flags);
        [Slot(59)]
        
        void glBufferSubData(System.Int32 target, IntPtr offset, IntPtr size, [CountAttribute(Parameter = "size")] IntPtr data);
        [Slot(61)]
        
        System.Int32 glCheckFramebufferStatus(System.Int32 target);
        [Slot(62)]
        
        System.Int32 glCheckNamedFramebufferStatus(UInt32 framebuffer, System.Int32 target);
        [Slot(64)]
        
        void glClampColor(System.Int32 target, System.Int32 clamp);
        [Slot(65)]
        
        void glClear(System.Int32 mask);
        [Slot(66)]
        
        void glClearBufferData(System.Int32 target, System.Int32 internalformat, System.Int32 format, System.Int32 type, [CountAttribute(Computed = "format,type")] IntPtr data);
        [Slot(67)]
        
        void glClearBufferfi(System.Int32 buffer, Int32 drawbuffer, Single depth, Int32 stencil);
        [Slot(68)]
        
        unsafe void glClearBufferfv(System.Int32 buffer, Int32 drawbuffer, [CountAttribute(Computed = "buffer")] Single* value);
        [Slot(69)]
        
        unsafe void glClearBufferiv(System.Int32 buffer, Int32 drawbuffer, [CountAttribute(Computed = "buffer")] Int32* value);
        [Slot(70)]
        
        void glClearBufferSubData(System.Int32 target, System.Int32 internalformat, IntPtr offset, IntPtr size, System.Int32 format, System.Int32 type, [CountAttribute(Computed = "format,type")] IntPtr data);
        [Slot(71)]
        
        unsafe void glClearBufferuiv(System.Int32 buffer, Int32 drawbuffer, [CountAttribute(Computed = "buffer")] UInt32* value);
        [Slot(72)]
        
        void glClearColor(Single red, Single green, Single blue, Single alpha);
        [Slot(73)]
        
        void glClearDepth(Double depth);
        [Slot(74)]
        
        void glClearDepthf(Single d);
        [Slot(75)]
        
        void glClearNamedBufferData(UInt32 buffer, System.Int32 internalformat, System.Int32 format, System.Int32 type, IntPtr data);
        [Slot(77)]
        
        void glClearNamedBufferSubData(UInt32 buffer, System.Int32 internalformat, IntPtr offset, IntPtr size, System.Int32 format, System.Int32 type, IntPtr data);
        [Slot(79)]
        
        void glClearNamedFramebufferfi(UInt32 framebuffer, System.Int32 buffer, Int32 drawbuffer, Single depth, Int32 stencil);
        [Slot(80)]
        
        unsafe void glClearNamedFramebufferfv(UInt32 framebuffer, System.Int32 buffer, Int32 drawbuffer, Single* value);
        [Slot(81)]
        
        unsafe void glClearNamedFramebufferiv(UInt32 framebuffer, System.Int32 buffer, Int32 drawbuffer, Int32* value);
        [Slot(82)]
        
        unsafe void glClearNamedFramebufferuiv(UInt32 framebuffer, System.Int32 buffer, Int32 drawbuffer, UInt32* value);
        [Slot(83)]
        
        void glClearStencil(Int32 s);
        [Slot(84)]
        
        void glClearTexImage(UInt32 texture, Int32 level, System.Int32 format, System.Int32 type, [CountAttribute(Computed = "format,type")] IntPtr data);
        [Slot(85)]
        
        void glClearTexSubImage(UInt32 texture, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, System.Int32 format, System.Int32 type, [CountAttribute(Computed = "format,type")] IntPtr data);
        [Slot(87)]
        
        System.Int32 glClientWaitSync(IntPtr sync, System.Int32 flags, UInt64 timeout);
        [Slot(88)]
        
        void glClipControl(System.Int32 origin, System.Int32 depth);
        [Slot(90)]
        
        void glColorMask(bool red, bool green, bool blue, bool alpha);
        [Slot(91)]
        
        void glColorMaski(UInt32 index, bool r, bool g, bool b, bool a);
        [Slot(92)]
        
        void glColorP3ui(System.Int32 type, UInt32 color);
        [Slot(93)]
        
        unsafe void glColorP3uiv(System.Int32 type, [CountAttribute(Count = 1)] UInt32* color);
        [Slot(94)]
        
        void glColorP4ui(System.Int32 type, UInt32 color);
        [Slot(95)]
        
        unsafe void glColorP4uiv(System.Int32 type, [CountAttribute(Count = 1)] UInt32* color);
        [Slot(96)]
        
        void glColorSubTable(System.Int32 target, Int32 start, Int32 count, System.Int32 format, System.Int32 type, [CountAttribute(Computed = "format,type,count")] IntPtr data);
        [Slot(97)]
        
        void glColorTable(System.Int32 target, System.Int32 internalformat, Int32 width, System.Int32 format, System.Int32 type, [CountAttribute(Computed = "format,type,width")] IntPtr table);
        [Slot(98)]
        
        unsafe void glColorTableParameterfv(System.Int32 target, System.Int32 pname, [CountAttribute(Computed = "pname")] Single* @params);
        [Slot(99)]
        
        unsafe void glColorTableParameteriv(System.Int32 target, System.Int32 pname, [CountAttribute(Computed = "pname")] Int32* @params);
        [Slot(102)]
        
        void glCompileShader(UInt32 shader);
        [Slot(110)]
        
        void glCompressedTexImage1D(System.Int32 target, Int32 level, System.Int32 internalformat, Int32 width, Int32 border, Int32 imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr data);
        [Slot(111)]
        
        void glCompressedTexImage2D(System.Int32 target, Int32 level, System.Int32 internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr data);
        [Slot(112)]
        
        void glCompressedTexImage3D(System.Int32 target, Int32 level, System.Int32 internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr data);
        [Slot(113)]
        
        void glCompressedTexSubImage1D(System.Int32 target, Int32 level, Int32 xoffset, Int32 width, System.Int32 format, Int32 imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr data);
        [Slot(114)]
        
        void glCompressedTexSubImage2D(System.Int32 target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, System.Int32 format, Int32 imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr data);
        [Slot(115)]
        
        void glCompressedTexSubImage3D(System.Int32 target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, System.Int32 format, Int32 imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr data);
        [Slot(119)]
        
        void glCompressedTextureSubImage1D(UInt32 texture, Int32 level, Int32 xoffset, Int32 width, System.Int32 format, Int32 imageSize, IntPtr data);
        [Slot(121)]
        
        void glCompressedTextureSubImage2D(UInt32 texture, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, System.Int32 format, Int32 imageSize, IntPtr data);
        [Slot(123)]
        
        void glCompressedTextureSubImage3D(UInt32 texture, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, System.Int32 format, Int32 imageSize, IntPtr data);
        [Slot(127)]
        
        void glConvolutionFilter1D(System.Int32 target, System.Int32 internalformat, Int32 width, System.Int32 format, System.Int32 type, [CountAttribute(Computed = "format,type,width")] IntPtr image);
        [Slot(128)]
        
        void glConvolutionFilter2D(System.Int32 target, System.Int32 internalformat, Int32 width, Int32 height, System.Int32 format, System.Int32 type, [CountAttribute(Computed = "format,type,width,height")] IntPtr image);
        [Slot(129)]
        
        void glConvolutionParameterf(System.Int32 target, System.Int32 pname, Single @params);
        [Slot(130)]
        
        unsafe void glConvolutionParameterfv(System.Int32 target, System.Int32 pname, [CountAttribute(Computed = "pname")] Single* @params);
        [Slot(131)]
        
        void glConvolutionParameteri(System.Int32 target, System.Int32 pname, Int32 @params);
        [Slot(132)]
        
        unsafe void glConvolutionParameteriv(System.Int32 target, System.Int32 pname, [CountAttribute(Computed = "pname")] Int32* @params);
        [Slot(133)]
        
        void glCopyBufferSubData(System.Int32 readTarget, System.Int32 writeTarget, IntPtr readOffset, IntPtr writeOffset, IntPtr size);
        [Slot(134)]
        
        void glCopyColorSubTable(System.Int32 target, Int32 start, Int32 x, Int32 y, Int32 width);
        [Slot(135)]
        
        void glCopyColorTable(System.Int32 target, System.Int32 internalformat, Int32 x, Int32 y, Int32 width);
        [Slot(136)]
        
        void glCopyConvolutionFilter1D(System.Int32 target, System.Int32 internalformat, Int32 x, Int32 y, Int32 width);
        [Slot(137)]
        
        void glCopyConvolutionFilter2D(System.Int32 target, System.Int32 internalformat, Int32 x, Int32 y, Int32 width, Int32 height);
        [Slot(138)]
        
        void glCopyImageSubData(UInt32 srcName, System.Int32 srcTarget, Int32 srcLevel, Int32 srcX, Int32 srcY, Int32 srcZ, UInt32 dstName, System.Int32 dstTarget, Int32 dstLevel, Int32 dstX, Int32 dstY, Int32 dstZ, Int32 srcWidth, Int32 srcHeight, Int32 srcDepth);
        [Slot(144)]
        
        void glCopyNamedBufferSubData(UInt32 readBuffer, UInt32 writeBuffer, IntPtr readOffset, IntPtr writeOffset, IntPtr size);
        [Slot(146)]
        
        void glCopyTexImage1D(System.Int32 target, Int32 level, System.Int32 internalformat, Int32 x, Int32 y, Int32 width, Int32 border);
        [Slot(147)]
        
        void glCopyTexImage2D(System.Int32 target, Int32 level, System.Int32 internalformat, Int32 x, Int32 y, Int32 width, Int32 height, Int32 border);
        [Slot(148)]
        
        void glCopyTexSubImage1D(System.Int32 target, Int32 level, Int32 xoffset, Int32 x, Int32 y, Int32 width);
        [Slot(149)]
        
        void glCopyTexSubImage2D(System.Int32 target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 x, Int32 y, Int32 width, Int32 height);
        [Slot(150)]
        
        void glCopyTexSubImage3D(System.Int32 target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 x, Int32 y, Int32 width, Int32 height);
        [Slot(153)]
        
        void glCopyTextureSubImage1D(UInt32 texture, Int32 level, Int32 xoffset, Int32 x, Int32 y, Int32 width);
        [Slot(155)]
        
        void glCopyTextureSubImage2D(UInt32 texture, Int32 level, Int32 xoffset, Int32 yoffset, Int32 x, Int32 y, Int32 width, Int32 height);
        [Slot(157)]
        
        void glCopyTextureSubImage3D(UInt32 texture, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 x, Int32 y, Int32 width, Int32 height);
        [Slot(165)]
        
        unsafe void glCreateBuffers(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] UInt32* buffers);
        [Slot(167)]
        
        unsafe void glCreateFramebuffers(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] UInt32* framebuffers);
        [Slot(169)]
        
        Int32 glCreateProgram();
        [Slot(170)]
        
        unsafe void glCreateProgramPipelines(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] UInt32* pipelines);
        [Slot(171)]
        
        unsafe void glCreateQueries(System.Int32 target, Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] UInt32* ids);
        [Slot(172)]
        
        unsafe void glCreateRenderbuffers(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] UInt32* renderbuffers);
        [Slot(173)]
        
        unsafe void glCreateSamplers(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] UInt32* samplers);
        [Slot(174)]
        
        Int32 glCreateShader(System.Int32 type);
        [Slot(176)]
        
        Int32 glCreateShaderProgramv(System.Int32 type, Int32 count, [CountAttribute(Parameter = "count")] IntPtr strings);
        [Slot(180)]
        
        unsafe void glCreateTextures(System.Int32 target, Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] UInt32* textures);
        [Slot(181)]
        
        unsafe void glCreateTransformFeedbacks(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] UInt32* ids);
        [Slot(182)]
        
        unsafe void glCreateVertexArrays(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] UInt32* arrays);
        [Slot(183)]
        
        void glCullFace(System.Int32 mode);
        [Slot(184)]
        
        void glDebugMessageCallback(DebugProc callback, IntPtr userParam);
        [Slot(187)]
        
        unsafe void glDebugMessageControl(System.Int32 source, System.Int32 type, System.Int32 severity, Int32 count, [CountAttribute(Parameter = "count")] UInt32* ids, bool enabled);
        [Slot(190)]
        
        void glDebugMessageInsert(System.Int32 source, System.Int32 type, UInt32 id, System.Int32 severity, Int32 length, [CountAttribute(Computed = "buf,length")] IntPtr buf);
        [Slot(193)]
        
        unsafe void glDeleteBuffers(Int32 n, [CountAttribute(Parameter = "n")] UInt32* buffers);
        [Slot(195)]
        
        unsafe void glDeleteFramebuffers(Int32 n, [CountAttribute(Parameter = "n")] UInt32* framebuffers);
        [Slot(200)]
        
        void glDeleteProgram(UInt32 program);
        [Slot(201)]
        
        unsafe void glDeleteProgramPipelines(Int32 n, [CountAttribute(Parameter = "n")] UInt32* pipelines);
        [Slot(203)]
        
        unsafe void glDeleteQueries(Int32 n, [CountAttribute(Parameter = "n")] UInt32* ids);
        [Slot(204)]
        
        unsafe void glDeleteRenderbuffers(Int32 n, [CountAttribute(Parameter = "n")] UInt32* renderbuffers);
        [Slot(205)]
        
        unsafe void glDeleteSamplers(Int32 count, [CountAttribute(Parameter = "count")] UInt32* samplers);
        [Slot(206)]
        
        void glDeleteShader(UInt32 shader);
        [Slot(208)]
        
        void glDeleteSync(IntPtr sync);
        [Slot(209)]
        
        unsafe void glDeleteTextures(Int32 n, [CountAttribute(Parameter = "n")] UInt32* textures);
        [Slot(210)]
        
        unsafe void glDeleteTransformFeedbacks(Int32 n, [CountAttribute(Parameter = "n")] UInt32* ids);
        [Slot(211)]
        
        unsafe void glDeleteVertexArrays(Int32 n, [CountAttribute(Parameter = "n")] UInt32* arrays);
        [Slot(212)]
        
        void glDepthFunc(System.Int32 func);
        [Slot(213)]
        
        void glDepthMask(bool flag);
        [Slot(214)]
        
        void glDepthRange(Double near, Double far);
        [Slot(215)]
        
        unsafe void glDepthRangeArrayv(UInt32 first, Int32 count, [CountAttribute(Computed = "count")] Double* v);
        [Slot(216)]
        
        void glDepthRangef(Single n, Single f);
        [Slot(217)]
        
        void glDepthRangeIndexed(UInt32 index, Double n, Double f);
        [Slot(218)]
        
        void glDetachShader(UInt32 program, UInt32 shader);
        [Slot(219)]
        
        void glDisable(System.Int32 cap);
        [Slot(222)]
        
        void glDisablei(System.Int32 target, UInt32 index);
        [Slot(224)]
        
        void glDisableVertexArrayAttrib(UInt32 vaobj, UInt32 index);
        [Slot(227)]
        
        void glDisableVertexAttribArray(UInt32 index);
        [Slot(228)]
        
        void glDispatchCompute(UInt32 num_groups_x, UInt32 num_groups_y, UInt32 num_groups_z);
        [Slot(230)]
        
        void glDispatchComputeIndirect(IntPtr indirect);
        [Slot(231)]
        
        void glDrawArrays(System.Int32 mode, Int32 first, Int32 count);
        [Slot(232)]
        
        void glDrawArraysIndirect(System.Int32 mode, IntPtr indirect);
        [Slot(233)]
        
        void glDrawArraysInstanced(System.Int32 mode, Int32 first, Int32 count, Int32 instancecount);
        [Slot(235)]
        
        void glDrawArraysInstancedBaseInstance(System.Int32 mode, Int32 first, Int32 count, Int32 instancecount, UInt32 baseinstance);
        [Slot(237)]
        
        void glDrawBuffer(System.Int32 buf);
        [Slot(238)]
        
        unsafe void glDrawBuffers(Int32 n, [CountAttribute(Parameter = "n")] System.Int32* bufs);
        [Slot(243)]
        
        void glDrawElements(System.Int32 mode, Int32 count, System.Int32 type, [CountAttribute(Computed = "count,type")] IntPtr indices);
        [Slot(244)]
        
        void glDrawElementsBaseVertex(System.Int32 mode, Int32 count, System.Int32 type, [CountAttribute(Computed = "count,type")] IntPtr indices, Int32 basevertex);
        [Slot(245)]
        
        void glDrawElementsIndirect(System.Int32 mode, System.Int32 type, IntPtr indirect);
        [Slot(246)]
        
        void glDrawElementsInstanced(System.Int32 mode, Int32 count, System.Int32 type, [CountAttribute(Computed = "count,type")] IntPtr indices, Int32 instancecount);
        [Slot(248)]
        
        void glDrawElementsInstancedBaseInstance(System.Int32 mode, Int32 count, System.Int32 type, [CountAttribute(Parameter = "count")] IntPtr indices, Int32 instancecount, UInt32 baseinstance);
        [Slot(249)]
        
        void glDrawElementsInstancedBaseVertex(System.Int32 mode, Int32 count, System.Int32 type, [CountAttribute(Computed = "count,type")] IntPtr indices, Int32 instancecount, Int32 basevertex);
        [Slot(250)]
        
        void glDrawElementsInstancedBaseVertexBaseInstance(System.Int32 mode, Int32 count, System.Int32 type, [CountAttribute(Parameter = "count")] IntPtr indices, Int32 instancecount, Int32 basevertex, UInt32 baseinstance);
        [Slot(252)]
        
        void glDrawRangeElements(System.Int32 mode, UInt32 start, UInt32 end, Int32 count, System.Int32 type, [CountAttribute(Computed = "count,type")] IntPtr indices);
        [Slot(253)]
        
        void glDrawRangeElementsBaseVertex(System.Int32 mode, UInt32 start, UInt32 end, Int32 count, System.Int32 type, [CountAttribute(Computed = "count,type")] IntPtr indices, Int32 basevertex);
        [Slot(254)]
        
        void glDrawTransformFeedback(System.Int32 mode, UInt32 id);
        [Slot(255)]
        
        void glDrawTransformFeedbackInstanced(System.Int32 mode, UInt32 id, Int32 instancecount);
        [Slot(256)]
        
        void glDrawTransformFeedbackStream(System.Int32 mode, UInt32 id, UInt32 stream);
        [Slot(257)]
        
        void glDrawTransformFeedbackStreamInstanced(System.Int32 mode, UInt32 id, UInt32 stream, Int32 instancecount);
        [Slot(260)]
        
        void glEnable(System.Int32 cap);
        [Slot(263)]
        
        void glEnablei(System.Int32 target, UInt32 index);
        [Slot(265)]
        
        void glEnableVertexArrayAttrib(UInt32 vaobj, UInt32 index);
        [Slot(268)]
        
        void glEnableVertexAttribArray(UInt32 index);
        [Slot(269)]
        
        void glEndConditionalRender();
        [Slot(273)]
        
        void glEndQuery(System.Int32 target);
        [Slot(274)]
        
        void glEndQueryIndexed(System.Int32 target, UInt32 index);
        [Slot(275)]
        
        void glEndTransformFeedback();
        [Slot(277)]
        
        IntPtr glFenceSync(System.Int32 condition, System.Int32 flags);
        [Slot(278)]
        
        void glFinish();
        [Slot(279)]
        
        void glFlush();
        [Slot(280)]
        
        void glFlushMappedBufferRange(System.Int32 target, IntPtr offset, IntPtr length);
        [Slot(281)]
        
        void glFlushMappedNamedBufferRange(UInt32 buffer, IntPtr offset, IntPtr length);
        [Slot(287)]
        
        void glFramebufferParameteri(System.Int32 target, System.Int32 pname, Int32 param);
        [Slot(289)]
        
        void glFramebufferRenderbuffer(System.Int32 target, System.Int32 attachment, System.Int32 renderbuffertarget, UInt32 renderbuffer);
        [Slot(292)]
        
        void glFramebufferTexture(System.Int32 target, System.Int32 attachment, UInt32 texture, Int32 level);
        [Slot(293)]
        
        void glFramebufferTexture1D(System.Int32 target, System.Int32 attachment, System.Int32 textarget, UInt32 texture, Int32 level);
        [Slot(294)]
        
        void glFramebufferTexture2D(System.Int32 target, System.Int32 attachment, System.Int32 textarget, UInt32 texture, Int32 level);
        [Slot(295)]
        
        void glFramebufferTexture3D(System.Int32 target, System.Int32 attachment, System.Int32 textarget, UInt32 texture, Int32 level, Int32 zoffset);
        [Slot(298)]
        
        void glFramebufferTextureLayer(System.Int32 target, System.Int32 attachment, UInt32 texture, Int32 level, Int32 layer);
        [Slot(301)]
        
        void glFrontFace(System.Int32 mode);
        [Slot(302)]
        
        unsafe void glGenBuffers(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] UInt32* buffers);
        [Slot(303)]
        
        void glGenerateMipmap(System.Int32 target);
        [Slot(305)]
        
        void glGenerateTextureMipmap(UInt32 texture);
        [Slot(307)]
        
        unsafe void glGenFramebuffers(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] UInt32* framebuffers);
        [Slot(310)]
        
        unsafe void glGenProgramPipelines(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] UInt32* pipelines);
        [Slot(312)]
        
        unsafe void glGenQueries(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] UInt32* ids);
        [Slot(313)]
        
        unsafe void glGenRenderbuffers(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] UInt32* renderbuffers);
        [Slot(314)]
        
        unsafe void glGenSamplers(Int32 count, [OutAttribute, CountAttribute(Parameter = "count")] UInt32* samplers);
        [Slot(315)]
        
        unsafe void glGenTextures(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] UInt32* textures);
        [Slot(316)]
        
        unsafe void glGenTransformFeedbacks(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] UInt32* ids);
        [Slot(317)]
        
        unsafe void glGenVertexArrays(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] UInt32* arrays);
        [Slot(318)]
        
        unsafe void glGetActiveAtomicCounterBufferiv(UInt32 program, UInt32 bufferIndex, System.Int32 pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* @params);
        [Slot(319)]
        
        unsafe void glGetActiveAttrib(UInt32 program, UInt32 index, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32* length, [OutAttribute, CountAttribute(Count = 1)] Int32* size, [OutAttribute, CountAttribute(Count = 1)] System.Int32* type, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr name);
        [Slot(320)]
        
        unsafe void glGetActiveSubroutineName(UInt32 program, System.Int32 shadertype, UInt32 index, Int32 bufsize, [OutAttribute, CountAttribute(Count = 1)] Int32* length, [OutAttribute, CountAttribute(Parameter = "bufsize")] IntPtr name);
        [Slot(321)]
        
        unsafe void glGetActiveSubroutineUniformiv(UInt32 program, System.Int32 shadertype, UInt32 index, System.Int32 pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* values);
        [Slot(322)]
        
        unsafe void glGetActiveSubroutineUniformName(UInt32 program, System.Int32 shadertype, UInt32 index, Int32 bufsize, [OutAttribute, CountAttribute(Count = 1)] Int32* length, [OutAttribute, CountAttribute(Parameter = "bufsize")] IntPtr name);
        [Slot(323)]
        
        unsafe void glGetActiveUniform(UInt32 program, UInt32 index, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32* length, [OutAttribute, CountAttribute(Count = 1)] Int32* size, [OutAttribute, CountAttribute(Count = 1)] System.Int32* type, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr name);
        [Slot(324)]
        
        unsafe void glGetActiveUniformBlockiv(UInt32 program, UInt32 uniformBlockIndex, System.Int32 pname, [OutAttribute, CountAttribute(Computed = "program,uniformBlockIndex,pname")] Int32* @params);
        [Slot(325)]
        
        unsafe void glGetActiveUniformBlockName(UInt32 program, UInt32 uniformBlockIndex, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr uniformBlockName);
        [Slot(326)]
        
        unsafe void glGetActiveUniformName(UInt32 program, UInt32 uniformIndex, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr uniformName);
        [Slot(327)]
        
        unsafe void glGetActiveUniformsiv(UInt32 program, Int32 uniformCount, [CountAttribute(Parameter = "uniformCount")] UInt32* uniformIndices, System.Int32 pname, [OutAttribute, CountAttribute(Computed = "uniformCount,pname")] Int32* @params);
        [Slot(328)]
        
        unsafe void glGetAttachedShaders(UInt32 program, Int32 maxCount, [OutAttribute, CountAttribute(Count = 1)] Int32* count, [OutAttribute, CountAttribute(Parameter = "maxCount")] UInt32* shaders);
        [Slot(329)]
        
        Int32 glGetAttribLocation(UInt32 program, IntPtr name);
        [Slot(330)]
        
        unsafe void glGetBooleani_v(System.Int32 target, UInt32 index, [OutAttribute, CountAttribute(Computed = "target")] bool* data);
        [Slot(332)]
        
        unsafe void glGetBooleanv(System.Int32 pname, [OutAttribute, CountAttribute(Computed = "pname")] bool* data);
        [Slot(333)]
        
        unsafe void glGetBufferParameteri64v(System.Int32 target, System.Int32 pname, [OutAttribute, CountAttribute(Computed = "pname")] Int64* @params);
        [Slot(334)]
        
        unsafe void glGetBufferParameteriv(System.Int32 target, System.Int32 pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* @params);
        [Slot(336)]
        
        void glGetBufferPointerv(System.Int32 target, System.Int32 pname, [OutAttribute, CountAttribute(Count = 1)] IntPtr @params);
        [Slot(337)]
        
        void glGetBufferSubData(System.Int32 target, IntPtr offset, IntPtr size, [OutAttribute, CountAttribute(Parameter = "size")] IntPtr data);
        [Slot(338)]
        
        void glGetColorTable(System.Int32 target, System.Int32 format, System.Int32 type, [OutAttribute, CountAttribute(Computed = "target,format,type")] IntPtr table);
        [Slot(339)]
        
        unsafe void glGetColorTableParameterfv(System.Int32 target, System.Int32 pname, [OutAttribute, CountAttribute(Computed = "pname")] Single* @params);
        [Slot(340)]
        
        unsafe void glGetColorTableParameteriv(System.Int32 target, System.Int32 pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* @params);
        [Slot(343)]
        
        void glGetCompressedTexImage(System.Int32 target, Int32 level, [OutAttribute, CountAttribute(Computed = "target,level")] IntPtr img);
        [Slot(344)]
        
        void glGetCompressedTextureImage(UInt32 texture, Int32 level, Int32 bufSize, [OutAttribute] IntPtr pixels);
        [Slot(346)]
        
        void glGetCompressedTextureSubImage(UInt32 texture, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, Int32 bufSize, [OutAttribute] IntPtr pixels);
        [Slot(347)]
        
        void glGetConvolutionFilter(System.Int32 target, System.Int32 format, System.Int32 type, [OutAttribute, CountAttribute(Computed = "target,format,type")] IntPtr image);
        [Slot(348)]
        
        unsafe void glGetConvolutionParameterfv(System.Int32 target, System.Int32 pname, [OutAttribute, CountAttribute(Computed = "pname")] Single* @params);
        [Slot(349)]
        
        unsafe void glGetConvolutionParameteriv(System.Int32 target, System.Int32 pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* @params);
        [Slot(351)]
        
        unsafe Int32 glGetDebugMessageLog(UInt32 count, Int32 bufSize, [OutAttribute, CountAttribute(Parameter = "count")] System.Int32* sources, [OutAttribute, CountAttribute(Parameter = "count")] System.Int32* types, [OutAttribute, CountAttribute(Parameter = "count")] UInt32* ids, [OutAttribute, CountAttribute(Parameter = "count")] System.Int32* severities, [OutAttribute, CountAttribute(Parameter = "count")] Int32* lengths, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr messageLog);
        [Slot(354)]
        
        unsafe void glGetDoublei_v(System.Int32 target, UInt32 index, [OutAttribute, CountAttribute(Computed = "target")] Double* data);
        [Slot(357)]
        
        unsafe void glGetDoublev(System.Int32 pname, [OutAttribute, CountAttribute(Computed = "pname")] Double* data);
        [Slot(358)]
        
        System.Int32 glGetError();
        [Slot(360)]
        
        unsafe void glGetFloati_v(System.Int32 target, UInt32 index, [OutAttribute, CountAttribute(Computed = "target")] Single* data);
        [Slot(363)]
        
        unsafe void glGetFloatv(System.Int32 pname, [OutAttribute, CountAttribute(Computed = "pname")] Single* data);
        [Slot(364)]
        
        Int32 glGetFragDataIndex(UInt32 program, IntPtr name);
        [Slot(365)]
        
        Int32 glGetFragDataLocation(UInt32 program, [CountAttribute(Computed = "name")] IntPtr name);
        [Slot(366)]
        
        unsafe void glGetFramebufferAttachmentParameteriv(System.Int32 target, System.Int32 attachment, System.Int32 pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* @params);
        [Slot(367)]
        
        unsafe void glGetFramebufferParameteriv(System.Int32 target, System.Int32 pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* @params);
        [Slot(369)]
        
        System.Int32 glGetGraphicsResetStatus();
        [Slot(372)]
        
        void glGetHistogram(System.Int32 target, bool reset, System.Int32 format, System.Int32 type, [OutAttribute, CountAttribute(Computed = "target,format,type")] IntPtr values);
        [Slot(373)]
        
        unsafe void glGetHistogramParameterfv(System.Int32 target, System.Int32 pname, [OutAttribute, CountAttribute(Computed = "pname")] Single* @params);
        [Slot(374)]
        
        unsafe void glGetHistogramParameteriv(System.Int32 target, System.Int32 pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* @params);
        [Slot(377)]
        
        unsafe void glGetInteger64i_v(System.Int32 target, UInt32 index, [OutAttribute, CountAttribute(Computed = "target")] Int64* data);
        [Slot(378)]
        
        unsafe void glGetInteger64v(System.Int32 pname, [OutAttribute, CountAttribute(Computed = "pname")] Int64* data);
        [Slot(379)]
        
        unsafe void glGetIntegeri_v(System.Int32 target, UInt32 index, [OutAttribute, CountAttribute(Computed = "target")] Int32* data);
        [Slot(383)]
        
        unsafe void glGetIntegerv(System.Int32 pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* data);
        [Slot(384)]
        
        unsafe void glGetInternalformati64v(System.Int32 target, System.Int32 internalformat, System.Int32 pname, Int32 bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] Int64* @params);
        [Slot(385)]
        
        unsafe void glGetInternalformativ(System.Int32 target, System.Int32 internalformat, System.Int32 pname, Int32 bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] Int32* @params);
        [Slot(387)]
        
        void glGetMinmax(System.Int32 target, bool reset, System.Int32 format, System.Int32 type, [OutAttribute, CountAttribute(Computed = "target,format,type")] IntPtr values);
        [Slot(388)]
        
        unsafe void glGetMinmaxParameterfv(System.Int32 target, System.Int32 pname, [OutAttribute, CountAttribute(Computed = "pname")] Single* @params);
        [Slot(389)]
        
        unsafe void glGetMinmaxParameteriv(System.Int32 target, System.Int32 pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* @params);
        [Slot(390)]
        
        unsafe void glGetMultisamplefv(System.Int32 pname, UInt32 index, [OutAttribute, CountAttribute(Computed = "pname")] Single* val);
        [Slot(403)]
        
        unsafe void glGetNamedBufferParameteri64v(UInt32 buffer, System.Int32 pname, [OutAttribute] Int64* @params);
        [Slot(404)]
        
        unsafe void glGetNamedBufferParameteriv(UInt32 buffer, System.Int32 pname, [OutAttribute] Int32* @params);
        [Slot(407)]
        
        void glGetNamedBufferPointerv(UInt32 buffer, System.Int32 pname, [OutAttribute] IntPtr @params);
        [Slot(409)]
        
        void glGetNamedBufferSubData(UInt32 buffer, IntPtr offset, IntPtr size, [OutAttribute] IntPtr data);
        [Slot(411)]
        
        unsafe void glGetNamedFramebufferAttachmentParameteriv(UInt32 framebuffer, System.Int32 attachment, System.Int32 pname, [OutAttribute] Int32* @params);
        [Slot(413)]
        
        unsafe void glGetNamedFramebufferParameteriv(UInt32 framebuffer, System.Int32 pname, [OutAttribute] Int32* param);
        [Slot(421)]
        
        unsafe void glGetNamedRenderbufferParameteriv(UInt32 renderbuffer, System.Int32 pname, [OutAttribute] Int32* @params);
        [Slot(425)]
        
        void glGetnColorTable(System.Int32 target, System.Int32 format, System.Int32 type, Int32 bufSize, [OutAttribute] IntPtr table);
        [Slot(427)]
        
        void glGetnCompressedTexImage(System.Int32 target, Int32 lod, Int32 bufSize, [OutAttribute] IntPtr pixels);
        [Slot(429)]
        
        void glGetnConvolutionFilter(System.Int32 target, System.Int32 format, System.Int32 type, Int32 bufSize, [OutAttribute] IntPtr image);
        [Slot(432)]
        
        void glGetnHistogram(System.Int32 target, bool reset, System.Int32 format, System.Int32 type, Int32 bufSize, [OutAttribute] IntPtr values);
        [Slot(434)]
        
        unsafe void glGetnMapdv(System.Int32 target, System.Int32 query, Int32 bufSize, [OutAttribute] Double* v);
        [Slot(436)]
        
        unsafe void glGetnMapfv(System.Int32 target, System.Int32 query, Int32 bufSize, [OutAttribute] Single* v);
        [Slot(438)]
        
        unsafe void glGetnMapiv(System.Int32 target, System.Int32 query, Int32 bufSize, [OutAttribute] Int32* v);
        [Slot(440)]
        
        void glGetnMinmax(System.Int32 target, bool reset, System.Int32 format, System.Int32 type, Int32 bufSize, [OutAttribute] IntPtr values);
        [Slot(442)]
        
        unsafe void glGetnPixelMapfv(System.Int32 map, Int32 bufSize, [OutAttribute] Single* values);
        [Slot(444)]
        
        unsafe void glGetnPixelMapuiv(System.Int32 map, Int32 bufSize, [OutAttribute] UInt32* values);
        [Slot(446)]
        
        unsafe void glGetnPixelMapusv(System.Int32 map, Int32 bufSize, [OutAttribute] UInt16* values);
        [Slot(448)]
        
        unsafe void glGetnPolygonStipple(Int32 bufSize, [OutAttribute] Byte* pattern);
        [Slot(450)]
        
        void glGetnSeparableFilter(System.Int32 target, System.Int32 format, System.Int32 type, Int32 rowBufSize, [OutAttribute] IntPtr row, Int32 columnBufSize, [OutAttribute] IntPtr column, [OutAttribute] IntPtr span);
        [Slot(452)]
        
        void glGetnTexImage(System.Int32 target, Int32 level, System.Int32 format, System.Int32 type, Int32 bufSize, [OutAttribute] IntPtr pixels);
        [Slot(454)]
        
        unsafe void glGetnUniformdv(UInt32 program, Int32 location, Int32 bufSize, [OutAttribute] Double* @params);
        [Slot(456)]
        
        unsafe void glGetnUniformfv(UInt32 program, Int32 location, Int32 bufSize, [OutAttribute] Single* @params);
        [Slot(460)]
        
        unsafe void glGetnUniformiv(UInt32 program, Int32 location, Int32 bufSize, [OutAttribute] Int32* @params);
        [Slot(464)]
        
        unsafe void glGetnUniformuiv(UInt32 program, Int32 location, Int32 bufSize, [OutAttribute] UInt32* @params);
        [Slot(467)]
        
        unsafe void glGetObjectLabel(System.Int32 identifier, UInt32 name, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr label);
        [Slot(470)]
        
        unsafe void glGetObjectPtrLabel(IntPtr ptr, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr label);
        [Slot(497)]
        
        void glGetPointerv(System.Int32 pname, [OutAttribute, CountAttribute(Count = 1)] IntPtr @params);
        [Slot(499)]
        
        unsafe void glGetProgramBinary(UInt32 program, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32* length, [OutAttribute, CountAttribute(Count = 1)] System.Int32* binaryFormat, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr binary);
        [Slot(500)]
        
        unsafe void glGetProgramInfoLog(UInt32 program, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr infoLog);
        [Slot(501)]
        
        unsafe void glGetProgramInterfaceiv(UInt32 program, System.Int32 programInterface, System.Int32 pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* @params);
        [Slot(502)]
        
        unsafe void glGetProgramiv(UInt32 program, System.Int32 pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* @params);
        [Slot(503)]
        
        unsafe void glGetProgramPipelineInfoLog(UInt32 pipeline, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr infoLog);
        [Slot(505)]
        
        unsafe void glGetProgramPipelineiv(UInt32 pipeline, System.Int32 pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* @params);
        [Slot(508)]
        
        Int32 glGetProgramResourceIndex(UInt32 program, System.Int32 programInterface, [CountAttribute(Computed = "name")] IntPtr name);
        [Slot(509)]
        
        unsafe void glGetProgramResourceiv(UInt32 program, System.Int32 programInterface, UInt32 index, Int32 propCount, [CountAttribute(Parameter = "propCount")] System.Int32* props, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] Int32* @params);
        [Slot(510)]
        
        Int32 glGetProgramResourceLocation(UInt32 program, System.Int32 programInterface, [CountAttribute(Computed = "name")] IntPtr name);
        [Slot(511)]
        
        Int32 glGetProgramResourceLocationIndex(UInt32 program, System.Int32 programInterface, [CountAttribute(Computed = "name")] IntPtr name);
        [Slot(512)]
        
        unsafe void glGetProgramResourceName(UInt32 program, System.Int32 programInterface, UInt32 index, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr name);
        [Slot(513)]
        
        unsafe void glGetProgramStageiv(UInt32 program, System.Int32 shadertype, System.Int32 pname, [OutAttribute, CountAttribute(Count = 1)] Int32* values);
        [Slot(514)]
        
        void glGetQueryBufferObjecti64v(UInt32 id, UInt32 buffer, System.Int32 pname, IntPtr offset);
        [Slot(518)]
        
        unsafe void glGetQueryIndexediv(System.Int32 target, UInt32 index, System.Int32 pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* @params);
        [Slot(519)]
        
        unsafe void glGetQueryiv(System.Int32 target, System.Int32 pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* @params);
        [Slot(520)]
        
        unsafe void glGetQueryObjecti64v(UInt32 id, System.Int32 pname, [OutAttribute, CountAttribute(Computed = "pname")] Int64* @params);
        [Slot(521)]
        
        unsafe void glGetQueryObjectiv(UInt32 id, System.Int32 pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* @params);
        [Slot(522)]
        
        unsafe void glGetQueryObjectui64v(UInt32 id, System.Int32 pname, [OutAttribute, CountAttribute(Computed = "pname")] UInt64* @params);
        [Slot(523)]
        
        unsafe void glGetQueryObjectuiv(UInt32 id, System.Int32 pname, [OutAttribute, CountAttribute(Computed = "pname")] UInt32* @params);
        [Slot(524)]
        
        unsafe void glGetRenderbufferParameteriv(System.Int32 target, System.Int32 pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* @params);
        [Slot(525)]
        
        unsafe void glGetSamplerParameterfv(UInt32 sampler, System.Int32 pname, [OutAttribute, CountAttribute(Computed = "pname")] Single* @params);
        [Slot(526)]
        
        unsafe void glGetSamplerParameterIiv(UInt32 sampler, System.Int32 pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* @params);
        [Slot(527)]
        
        unsafe void glGetSamplerParameterIuiv(UInt32 sampler, System.Int32 pname, [OutAttribute, CountAttribute(Computed = "pname")] UInt32* @params);
        [Slot(528)]
        
        unsafe void glGetSamplerParameteriv(UInt32 sampler, System.Int32 pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* @params);
        [Slot(529)]
        
        void glGetSeparableFilter(System.Int32 target, System.Int32 format, System.Int32 type, [OutAttribute, CountAttribute(Computed = "target,format,type")] IntPtr row, [OutAttribute, CountAttribute(Computed = "target,format,type")] IntPtr column, [OutAttribute, CountAttribute(Computed = "target,format,type")] IntPtr span);
        [Slot(530)]
        
        unsafe void glGetShaderInfoLog(UInt32 shader, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr infoLog);
        [Slot(531)]
        
        unsafe void glGetShaderiv(UInt32 shader, System.Int32 pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* @params);
        [Slot(532)]
        
        unsafe void glGetShaderPrecisionFormat(System.Int32 shadertype, System.Int32 precisiontype, [OutAttribute, CountAttribute(Count = 2)] Int32* range, [OutAttribute, CountAttribute(Count = 1)] Int32* precision);
        [Slot(533)]
        
        unsafe void glGetShaderSource(UInt32 shader, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr source);
        [Slot(535)]
        
        IntPtr glGetString(System.Int32 name);
        [Slot(536)]
        
        IntPtr glGetStringi(System.Int32 name, UInt32 index);
        [Slot(537)]
        
        Int32 glGetSubroutineIndex(UInt32 program, System.Int32 shadertype, IntPtr name);
        [Slot(538)]
        
        Int32 glGetSubroutineUniformLocation(UInt32 program, System.Int32 shadertype, IntPtr name);
        [Slot(539)]
        
        unsafe void glGetSynciv(IntPtr sync, System.Int32 pname, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] Int32* values);
        [Slot(540)]
        
        void glGetTexImage(System.Int32 target, Int32 level, System.Int32 format, System.Int32 type, [OutAttribute, CountAttribute(Computed = "target,level,format,type")] IntPtr pixels);
        [Slot(541)]
        
        unsafe void glGetTexLevelParameterfv(System.Int32 target, Int32 level, System.Int32 pname, [OutAttribute, CountAttribute(Computed = "pname")] Single* @params);
        [Slot(542)]
        
        unsafe void glGetTexLevelParameteriv(System.Int32 target, Int32 level, System.Int32 pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* @params);
        [Slot(543)]
        
        unsafe void glGetTexParameterfv(System.Int32 target, System.Int32 pname, [OutAttribute, CountAttribute(Computed = "pname")] Single* @params);
        [Slot(544)]
        
        unsafe void glGetTexParameterIiv(System.Int32 target, System.Int32 pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* @params);
        [Slot(545)]
        
        unsafe void glGetTexParameterIuiv(System.Int32 target, System.Int32 pname, [OutAttribute, CountAttribute(Computed = "pname")] UInt32* @params);
        [Slot(546)]
        
        unsafe void glGetTexParameteriv(System.Int32 target, System.Int32 pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* @params);
        [Slot(549)]
        
        void glGetTextureImage(UInt32 texture, Int32 level, System.Int32 format, System.Int32 type, Int32 bufSize, [OutAttribute] IntPtr pixels);
        [Slot(551)]
        
        unsafe void glGetTextureLevelParameterfv(UInt32 texture, Int32 level, System.Int32 pname, [OutAttribute] Single* @params);
        [Slot(553)]
        
        unsafe void glGetTextureLevelParameteriv(UInt32 texture, Int32 level, System.Int32 pname, [OutAttribute] Int32* @params);
        [Slot(555)]
        
        unsafe void glGetTextureParameterfv(UInt32 texture, System.Int32 pname, [OutAttribute] Single* @params);
        [Slot(557)]
        
        unsafe void glGetTextureParameterIiv(UInt32 texture, System.Int32 pname, [OutAttribute] Int32* @params);
        [Slot(559)]
        
        unsafe void glGetTextureParameterIuiv(UInt32 texture, System.Int32 pname, [OutAttribute] UInt32* @params);
        [Slot(561)]
        
        unsafe void glGetTextureParameteriv(UInt32 texture, System.Int32 pname, [OutAttribute] Int32* @params);
        [Slot(565)]
        
        void glGetTextureSubImage(UInt32 texture, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, System.Int32 format, System.Int32 type, Int32 bufSize, [OutAttribute] IntPtr pixels);
        [Slot(566)]
        
        unsafe void glGetTransformFeedbacki_v(UInt32 xfb, System.Int32 pname, UInt32 index, [OutAttribute] Int32* param);
        [Slot(567)]
        
        unsafe void glGetTransformFeedbacki64_v(UInt32 xfb, System.Int32 pname, UInt32 index, [OutAttribute] Int64* param);
        [Slot(568)]
        
        unsafe void glGetTransformFeedbackiv(UInt32 xfb, System.Int32 pname, [OutAttribute] Int32* param);
        [Slot(569)]
        
        unsafe void glGetTransformFeedbackVarying(UInt32 program, UInt32 index, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32* length, [OutAttribute, CountAttribute(Count = 1)] Int32* size, [OutAttribute, CountAttribute(Count = 1)] System.Int32* type, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr name);
        [Slot(570)]
        
        Int32 glGetUniformBlockIndex(UInt32 program, [CountAttribute(Computed = "")] IntPtr uniformBlockName);
        [Slot(571)]
        
        unsafe void glGetUniformdv(UInt32 program, Int32 location, [OutAttribute, CountAttribute(Computed = "program,location")] Double* @params);
        [Slot(572)]
        
        unsafe void glGetUniformfv(UInt32 program, Int32 location, [OutAttribute, CountAttribute(Computed = "program,location")] Single* @params);
        [Slot(575)]
        
        unsafe void glGetUniformIndices(UInt32 program, Int32 uniformCount, [CountAttribute(Computed = "uniformCount")] IntPtr uniformNames, [OutAttribute, CountAttribute(Computed = "uniformCount")] UInt32* uniformIndices);
        [Slot(576)]
        
        unsafe void glGetUniformiv(UInt32 program, Int32 location, [OutAttribute, CountAttribute(Computed = "program,location")] Int32* @params);
        [Slot(577)]
        
        Int32 glGetUniformLocation(UInt32 program, IntPtr name);
        [Slot(578)]
        
        unsafe void glGetUniformSubroutineuiv(System.Int32 shadertype, Int32 location, [OutAttribute, CountAttribute(Count = 1)] UInt32* @params);
        [Slot(581)]
        
        unsafe void glGetUniformuiv(UInt32 program, Int32 location, [OutAttribute, CountAttribute(Computed = "program,location")] UInt32* @params);
        [Slot(582)]
        
        unsafe void glGetVertexArrayIndexed64iv(UInt32 vaobj, UInt32 index, System.Int32 pname, [OutAttribute] Int64* param);
        [Slot(583)]
        
        unsafe void glGetVertexArrayIndexediv(UInt32 vaobj, UInt32 index, System.Int32 pname, [OutAttribute] Int32* param);
        [Slot(586)]
        
        unsafe void glGetVertexArrayiv(UInt32 vaobj, System.Int32 pname, [OutAttribute] Int32* param);
        [Slot(589)]
        
        unsafe void glGetVertexAttribdv(UInt32 index, System.Int32 pname, [OutAttribute, CountAttribute(Count = 4)] Double* @params);
        [Slot(590)]
        
        unsafe void glGetVertexAttribfv(UInt32 index, System.Int32 pname, [OutAttribute, CountAttribute(Count = 4)] Single* @params);
        [Slot(591)]
        
        unsafe void glGetVertexAttribIiv(UInt32 index, System.Int32 pname, [OutAttribute, CountAttribute(Count = 1)] Int32* @params);
        [Slot(592)]
        
        unsafe void glGetVertexAttribIuiv(UInt32 index, System.Int32 pname, [OutAttribute, CountAttribute(Count = 1)] UInt32* @params);
        [Slot(593)]
        
        unsafe void glGetVertexAttribiv(UInt32 index, System.Int32 pname, [OutAttribute, CountAttribute(Count = 4)] Int32* @params);
        [Slot(594)]
        
        unsafe void glGetVertexAttribLdv(UInt32 index, System.Int32 pname, [OutAttribute, CountAttribute(Computed = "pname")] Double* @params);
        [Slot(598)]
        
        void glGetVertexAttribPointerv(UInt32 index, System.Int32 pname, [OutAttribute, CountAttribute(Count = 1)] IntPtr pointer);
        [Slot(600)]
        
        void glHint(System.Int32 target, System.Int32 mode);
        [Slot(601)]
        
        void glHistogram(System.Int32 target, Int32 width, System.Int32 internalformat, bool sink);
        [Slot(605)]
        
        void glInvalidateBufferData(UInt32 buffer);
        [Slot(606)]
        
        void glInvalidateBufferSubData(UInt32 buffer, IntPtr offset, IntPtr length);
        [Slot(607)]
        
        unsafe void glInvalidateFramebuffer(System.Int32 target, Int32 numAttachments, [CountAttribute(Parameter = "numAttachments")] System.Int32* attachments);
        [Slot(608)]
        
        unsafe void glInvalidateNamedFramebufferData(UInt32 framebuffer, Int32 numAttachments, System.Int32* attachments);
        [Slot(609)]
        
        unsafe void glInvalidateNamedFramebufferSubData(UInt32 framebuffer, Int32 numAttachments, System.Int32* attachments, Int32 x, Int32 y, Int32 width, Int32 height);
        [Slot(610)]
        
        unsafe void glInvalidateSubFramebuffer(System.Int32 target, Int32 numAttachments, [CountAttribute(Parameter = "numAttachments")] System.Int32* attachments, Int32 x, Int32 y, Int32 width, Int32 height);
        [Slot(611)]
        
        void glInvalidateTexImage(UInt32 texture, Int32 level);
        [Slot(612)]
        
        void glInvalidateTexSubImage(UInt32 texture, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth);
        [Slot(613)]
        
        byte glIsBuffer(UInt32 buffer);
        [Slot(616)]
        
        byte glIsEnabled(System.Int32 cap);
        [Slot(617)]
        
        byte glIsEnabledi(System.Int32 target, UInt32 index);
        [Slot(619)]
        
        byte glIsFramebuffer(UInt32 framebuffer);
        [Slot(627)]
        
        byte glIsProgram(UInt32 program);
        [Slot(628)]
        
        byte glIsProgramPipeline(UInt32 pipeline);
        [Slot(630)]
        
        byte glIsQuery(UInt32 id);
        [Slot(631)]
        
        byte glIsRenderbuffer(UInt32 renderbuffer);
        [Slot(632)]
        
        byte glIsSampler(UInt32 sampler);
        [Slot(633)]
        
        byte glIsShader(UInt32 shader);
        [Slot(635)]
        
        byte glIsSync(IntPtr sync);
        [Slot(636)]
        
        byte glIsTexture(UInt32 texture);
        [Slot(639)]
        
        byte glIsTransformFeedback(UInt32 id);
        [Slot(640)]
        
        byte glIsVertexArray(UInt32 array);
        [Slot(642)]
        
        void glLineWidth(Single width);
        [Slot(643)]
        
        void glLinkProgram(UInt32 program);
        [Slot(645)]
        
        void glLogicOp(System.Int32 opcode);
        [Slot(658)]
        
        IntPtr glMapBuffer(System.Int32 target, System.Int32 access);
        [Slot(659)]
        
        IntPtr glMapBufferRange(System.Int32 target, IntPtr offset, IntPtr length, System.Int32 access);
        [Slot(660)]
        
        IntPtr glMapNamedBuffer(UInt32 buffer, System.Int32 access);
        [Slot(662)]
        
        IntPtr glMapNamedBufferRange(UInt32 buffer, IntPtr offset, IntPtr length, System.Int32 access);
        [Slot(691)]
        
        void glMemoryBarrier(System.Int32 barriers);
        [Slot(692)]
        
        void glMemoryBarrierByRegion(System.Int32 barriers);
        [Slot(693)]
        
        void glMinmax(System.Int32 target, System.Int32 internalformat, bool sink);
        [Slot(694)]
        
        void glMinSampleShading(Single value);
        [Slot(696)]
        
        unsafe void glMultiDrawArrays(System.Int32 mode, [CountAttribute(Computed = "count")] Int32* first, [CountAttribute(Computed = "drawcount")] Int32* count, Int32 drawcount);
        [Slot(697)]
        
        void glMultiDrawArraysIndirect(System.Int32 mode, [CountAttribute(Computed = "drawcount,stride")] IntPtr indirect, Int32 drawcount, Int32 stride);
        [Slot(700)]
        
        void glMultiDrawArraysIndirectCount(System.Int32 mode, IntPtr indirect, IntPtr drawcount, Int32 maxdrawcount, Int32 stride);
        [Slot(702)]
        
        unsafe void glMultiDrawElements(System.Int32 mode, [CountAttribute(Computed = "drawcount")] Int32* count, System.Int32 type, [CountAttribute(Computed = "drawcount")] IntPtr indices, Int32 drawcount);
        [Slot(703)]
        
        unsafe void glMultiDrawElementsBaseVertex(System.Int32 mode, [CountAttribute(Computed = "drawcount")] Int32* count, System.Int32 type, [CountAttribute(Computed = "drawcount")] IntPtr indices, Int32 drawcount, [CountAttribute(Computed = "drawcount")] Int32* basevertex);
        [Slot(704)]
        
        void glMultiDrawElementsIndirect(System.Int32 mode, System.Int32 type, [CountAttribute(Computed = "drawcount,stride")] IntPtr indirect, Int32 drawcount, Int32 stride);
        [Slot(707)]
        
        void glMultiDrawElementsIndirectCount(System.Int32 mode, System.Int32 type, IntPtr indirect, IntPtr drawcount, Int32 maxdrawcount, Int32 stride);
        [Slot(710)]
        
        void glMultiTexCoordP1ui(System.Int32 texture, System.Int32 type, UInt32 coords);
        [Slot(711)]
        
        unsafe void glMultiTexCoordP1uiv(System.Int32 texture, System.Int32 type, [CountAttribute(Count = 1)] UInt32* coords);
        [Slot(712)]
        
        void glMultiTexCoordP2ui(System.Int32 texture, System.Int32 type, UInt32 coords);
        [Slot(713)]
        
        unsafe void glMultiTexCoordP2uiv(System.Int32 texture, System.Int32 type, [CountAttribute(Count = 1)] UInt32* coords);
        [Slot(714)]
        
        void glMultiTexCoordP3ui(System.Int32 texture, System.Int32 type, UInt32 coords);
        [Slot(715)]
        
        unsafe void glMultiTexCoordP3uiv(System.Int32 texture, System.Int32 type, [CountAttribute(Count = 1)] UInt32* coords);
        [Slot(716)]
        
        void glMultiTexCoordP4ui(System.Int32 texture, System.Int32 type, UInt32 coords);
        [Slot(717)]
        
        unsafe void glMultiTexCoordP4uiv(System.Int32 texture, System.Int32 type, [CountAttribute(Count = 1)] UInt32* coords);
        [Slot(742)]
        
        void glNamedBufferData(UInt32 buffer, IntPtr size, IntPtr data, System.Int32 usage);
        [Slot(746)]
        
        void glNamedBufferStorage(UInt32 buffer, IntPtr size, [CountAttribute(Parameter = "size")] IntPtr data, System.Int32 flags);
        [Slot(748)]
        
        void glNamedBufferSubData(UInt32 buffer, IntPtr offset, IntPtr size, [CountAttribute(Computed = "size")] IntPtr data);
        [Slot(751)]
        
        void glNamedFramebufferDrawBuffer(UInt32 framebuffer, System.Int32 buf);
        [Slot(752)]
        
        unsafe void glNamedFramebufferDrawBuffers(UInt32 framebuffer, Int32 n, System.Int32* bufs);
        [Slot(753)]
        
        void glNamedFramebufferParameteri(UInt32 framebuffer, System.Int32 pname, Int32 param);
        [Slot(755)]
        
        void glNamedFramebufferReadBuffer(UInt32 framebuffer, System.Int32 src);
        [Slot(756)]
        
        void glNamedFramebufferRenderbuffer(UInt32 framebuffer, System.Int32 attachment, System.Int32 renderbuffertarget, UInt32 renderbuffer);
        [Slot(760)]
        
        void glNamedFramebufferTexture(UInt32 framebuffer, System.Int32 attachment, UInt32 texture, Int32 level);
        [Slot(766)]
        
        void glNamedFramebufferTextureLayer(UInt32 framebuffer, System.Int32 attachment, UInt32 texture, Int32 level, Int32 layer);
        [Slot(780)]
        
        void glNamedRenderbufferStorage(UInt32 renderbuffer, System.Int32 internalformat, Int32 width, Int32 height);
        [Slot(782)]
        
        void glNamedRenderbufferStorageMultisample(UInt32 renderbuffer, Int32 samples, System.Int32 internalformat, Int32 width, Int32 height);
        [Slot(787)]
        
        void glNormalP3ui(System.Int32 type, UInt32 coords);
        [Slot(788)]
        
        unsafe void glNormalP3uiv(System.Int32 type, [CountAttribute(Count = 1)] UInt32* coords);
        [Slot(789)]
        
        void glObjectLabel(System.Int32 identifier, UInt32 name, Int32 length, [CountAttribute(Computed = "label,length")] IntPtr label);
        [Slot(791)]
        
        void glObjectPtrLabel(IntPtr ptr, Int32 length, [CountAttribute(Computed = "label,length")] IntPtr label);
        [Slot(793)]
        
        unsafe void glPatchParameterfv(System.Int32 pname, [CountAttribute(Computed = "pname")] Single* values);
        [Slot(794)]
        
        void glPatchParameteri(System.Int32 pname, Int32 value);
        [Slot(816)]
        
        void glPauseTransformFeedback();
        [Slot(817)]
        
        void glPixelStoref(System.Int32 pname, Single param);
        [Slot(818)]
        
        void glPixelStorei(System.Int32 pname, Int32 param);
        [Slot(820)]
        
        void glPointParameterf(System.Int32 pname, Single param);
        [Slot(821)]
        
        unsafe void glPointParameterfv(System.Int32 pname, [CountAttribute(Computed = "pname")] Single* @params);
        [Slot(822)]
        
        void glPointParameteri(System.Int32 pname, Int32 param);
        [Slot(823)]
        
        unsafe void glPointParameteriv(System.Int32 pname, [CountAttribute(Computed = "pname")] Int32* @params);
        [Slot(824)]
        
        void glPointSize(Single size);
        [Slot(825)]
        
        void glPolygonMode(System.Int32 face, System.Int32 mode);
        [Slot(826)]
        
        void glPolygonOffset(Single factor, Single units);
        [Slot(827)]
        
        void glPolygonOffsetClamp(Single factor, Single units, Single clamp);
        [Slot(829)]
        
        void glPopDebugGroup();
        [Slot(833)]
        
        void glPrimitiveRestartIndex(UInt32 index);
        [Slot(834)]
        
        void glProgramBinary(UInt32 program, System.Int32 binaryFormat, [CountAttribute(Parameter = "length")] IntPtr binary, Int32 length);
        [Slot(835)]
        
        void glProgramParameteri(UInt32 program, System.Int32 pname, Int32 value);
        [Slot(839)]
        
        void glProgramUniform1d(UInt32 program, Int32 location, Double v0);
        [Slot(841)]
        
        unsafe void glProgramUniform1dv(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count")] Double* value);
        [Slot(843)]
        
        void glProgramUniform1f(UInt32 program, Int32 location, Single v0);
        [Slot(845)]
        
        unsafe void glProgramUniform1fv(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count")] Single* value);
        [Slot(847)]
        
        void glProgramUniform1i(UInt32 program, Int32 location, Int32 v0);
        [Slot(853)]
        
        unsafe void glProgramUniform1iv(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count")] Int32* value);
        [Slot(855)]
        
        void glProgramUniform1ui(UInt32 program, Int32 location, UInt32 v0);
        [Slot(861)]
        
        unsafe void glProgramUniform1uiv(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count")] UInt32* value);
        [Slot(863)]
        
        void glProgramUniform2d(UInt32 program, Int32 location, Double v0, Double v1);
        [Slot(865)]
        
        unsafe void glProgramUniform2dv(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*2")] Double* value);
        [Slot(867)]
        
        void glProgramUniform2f(UInt32 program, Int32 location, Single v0, Single v1);
        [Slot(869)]
        
        unsafe void glProgramUniform2fv(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*2")] Single* value);
        [Slot(871)]
        
        void glProgramUniform2i(UInt32 program, Int32 location, Int32 v0, Int32 v1);
        [Slot(877)]
        
        unsafe void glProgramUniform2iv(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*2")] Int32* value);
        [Slot(879)]
        
        void glProgramUniform2ui(UInt32 program, Int32 location, UInt32 v0, UInt32 v1);
        [Slot(885)]
        
        unsafe void glProgramUniform2uiv(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*2")] UInt32* value);
        [Slot(887)]
        
        void glProgramUniform3d(UInt32 program, Int32 location, Double v0, Double v1, Double v2);
        [Slot(889)]
        
        unsafe void glProgramUniform3dv(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*3")] Double* value);
        [Slot(891)]
        
        void glProgramUniform3f(UInt32 program, Int32 location, Single v0, Single v1, Single v2);
        [Slot(893)]
        
        unsafe void glProgramUniform3fv(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*3")] Single* value);
        [Slot(895)]
        
        void glProgramUniform3i(UInt32 program, Int32 location, Int32 v0, Int32 v1, Int32 v2);
        [Slot(901)]
        
        unsafe void glProgramUniform3iv(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*3")] Int32* value);
        [Slot(903)]
        
        void glProgramUniform3ui(UInt32 program, Int32 location, UInt32 v0, UInt32 v1, UInt32 v2);
        [Slot(909)]
        
        unsafe void glProgramUniform3uiv(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*3")] UInt32* value);
        [Slot(911)]
        
        void glProgramUniform4d(UInt32 program, Int32 location, Double v0, Double v1, Double v2, Double v3);
        [Slot(913)]
        
        unsafe void glProgramUniform4dv(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*4")] Double* value);
        [Slot(915)]
        
        void glProgramUniform4f(UInt32 program, Int32 location, Single v0, Single v1, Single v2, Single v3);
        [Slot(917)]
        
        unsafe void glProgramUniform4fv(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*4")] Single* value);
        [Slot(919)]
        
        void glProgramUniform4i(UInt32 program, Int32 location, Int32 v0, Int32 v1, Int32 v2, Int32 v3);
        [Slot(925)]
        
        unsafe void glProgramUniform4iv(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*4")] Int32* value);
        [Slot(927)]
        
        void glProgramUniform4ui(UInt32 program, Int32 location, UInt32 v0, UInt32 v1, UInt32 v2, UInt32 v3);
        [Slot(933)]
        
        unsafe void glProgramUniform4uiv(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*4")] UInt32* value);
        [Slot(939)]
        
        unsafe void glProgramUniformMatrix2dv(UInt32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*4")] Double* value);
        [Slot(941)]
        
        unsafe void glProgramUniformMatrix2fv(UInt32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*4")] Single* value);
        [Slot(943)]
        
        unsafe void glProgramUniformMatrix2x3dv(UInt32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*6")] Double* value);
        [Slot(945)]
        
        unsafe void glProgramUniformMatrix2x3fv(UInt32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*6")] Single* value);
        [Slot(947)]
        
        unsafe void glProgramUniformMatrix2x4dv(UInt32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*8")] Double* value);
        [Slot(949)]
        
        unsafe void glProgramUniformMatrix2x4fv(UInt32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*8")] Single* value);
        [Slot(951)]
        
        unsafe void glProgramUniformMatrix3dv(UInt32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*9")] Double* value);
        [Slot(953)]
        
        unsafe void glProgramUniformMatrix3fv(UInt32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*9")] Single* value);
        [Slot(955)]
        
        unsafe void glProgramUniformMatrix3x2dv(UInt32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*6")] Double* value);
        [Slot(957)]
        
        unsafe void glProgramUniformMatrix3x2fv(UInt32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*6")] Single* value);
        [Slot(959)]
        
        unsafe void glProgramUniformMatrix3x4dv(UInt32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*12")] Double* value);
        [Slot(961)]
        
        unsafe void glProgramUniformMatrix3x4fv(UInt32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*12")] Single* value);
        [Slot(963)]
        
        unsafe void glProgramUniformMatrix4dv(UInt32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*16")] Double* value);
        [Slot(965)]
        
        unsafe void glProgramUniformMatrix4fv(UInt32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*16")] Single* value);
        [Slot(967)]
        
        unsafe void glProgramUniformMatrix4x2dv(UInt32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*8")] Double* value);
        [Slot(969)]
        
        unsafe void glProgramUniformMatrix4x2fv(UInt32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*8")] Single* value);
        [Slot(971)]
        
        unsafe void glProgramUniformMatrix4x3dv(UInt32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*12")] Double* value);
        [Slot(973)]
        
        unsafe void glProgramUniformMatrix4x3fv(UInt32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*12")] Single* value);
        [Slot(977)]
        
        void glProvokingVertex(System.Int32 mode);
        [Slot(979)]
        
        void glPushDebugGroup(System.Int32 source, UInt32 id, Int32 length, [CountAttribute(Computed = "message,length")] IntPtr message);
        [Slot(982)]
        
        void glQueryCounter(UInt32 id, System.Int32 target);
        [Slot(984)]
        
        void glReadBuffer(System.Int32 src);
        [Slot(985)]
        
        void glReadnPixels(Int32 x, Int32 y, Int32 width, Int32 height, System.Int32 format, System.Int32 type, Int32 bufSize, [OutAttribute] IntPtr data);
        [Slot(988)]
        
        void glReadPixels(Int32 x, Int32 y, Int32 width, Int32 height, System.Int32 format, System.Int32 type, [OutAttribute, CountAttribute(Computed = "format,type,width,height")] IntPtr pixels);
        [Slot(989)]
        
        void glReleaseShaderCompiler();
        [Slot(990)]
        
        void glRenderbufferStorage(System.Int32 target, System.Int32 internalformat, Int32 width, Int32 height);
        [Slot(991)]
        
        void glRenderbufferStorageMultisample(System.Int32 target, Int32 samples, System.Int32 internalformat, Int32 width, Int32 height);
        [Slot(993)]
        
        void glResetHistogram(System.Int32 target);
        [Slot(994)]
        
        void glResetMinmax(System.Int32 target);
        [Slot(996)]
        
        void glResumeTransformFeedback();
        [Slot(997)]
        
        void glSampleCoverage(Single value, bool invert);
        [Slot(998)]
        
        void glSampleMaski(UInt32 maskNumber, UInt32 mask);
        [Slot(999)]
        
        void glSamplerParameterf(UInt32 sampler, System.Int32 pname, Single param);
        [Slot(1000)]
        
        unsafe void glSamplerParameterfv(UInt32 sampler, System.Int32 pname, [CountAttribute(Computed = "pname")] Single* param);
        [Slot(1001)]
        
        void glSamplerParameteri(UInt32 sampler, System.Int32 pname, Int32 param);
        [Slot(1002)]
        
        unsafe void glSamplerParameterIiv(UInt32 sampler, System.Int32 pname, [CountAttribute(Computed = "pname")] Int32* param);
        [Slot(1003)]
        
        unsafe void glSamplerParameterIuiv(UInt32 sampler, System.Int32 pname, [CountAttribute(Computed = "pname")] UInt32* param);
        [Slot(1004)]
        
        unsafe void glSamplerParameteriv(UInt32 sampler, System.Int32 pname, [CountAttribute(Computed = "pname")] Int32* param);
        [Slot(1005)]
        
        void glScissor(Int32 x, Int32 y, Int32 width, Int32 height);
        [Slot(1006)]
        
        unsafe void glScissorArrayv(UInt32 first, Int32 count, [CountAttribute(Computed = "count")] Int32* v);
        [Slot(1007)]
        
        void glScissorIndexed(UInt32 index, Int32 left, Int32 bottom, Int32 width, Int32 height);
        [Slot(1008)]
        
        unsafe void glScissorIndexedv(UInt32 index, [CountAttribute(Count = 4)] Int32* v);
        [Slot(1010)]
        
        void glSecondaryColorP3ui(System.Int32 type, UInt32 color);
        [Slot(1011)]
        
        unsafe void glSecondaryColorP3uiv(System.Int32 type, [CountAttribute(Count = 1)] UInt32* color);
        [Slot(1013)]
        
        void glSeparableFilter2D(System.Int32 target, System.Int32 internalformat, Int32 width, Int32 height, System.Int32 format, System.Int32 type, [CountAttribute(Computed = "target,format,type,width")] IntPtr row, [CountAttribute(Computed = "target,format,type,height")] IntPtr column);
        [Slot(1014)]
        
        unsafe void glShaderBinary(Int32 count, [CountAttribute(Parameter = "count")] UInt32* shaders, System.Int32 binaryformat, [CountAttribute(Parameter = "length")] IntPtr binary, Int32 length);
        [Slot(1015)]
        
        unsafe void glShaderSource(UInt32 shader, Int32 count, [CountAttribute(Parameter = "count")] IntPtr @string, [CountAttribute(Parameter = "count")] Int32* length);
        [Slot(1016)]
        
        void glShaderStorageBlockBinding(UInt32 program, UInt32 storageBlockIndex, UInt32 storageBlockBinding);
        [Slot(1019)]
        
        unsafe void glSpecializeShader(UInt32 shader, IntPtr pEntryPoint, UInt32 numSpecializationConstants, UInt32* pConstantIndex, UInt32* pConstantValue);
        [Slot(1024)]
        
        void glStencilFunc(System.Int32 func, Int32 @ref, UInt32 mask);
        [Slot(1025)]
        
        void glStencilFuncSeparate(System.Int32 face, System.Int32 func, Int32 @ref, UInt32 mask);
        [Slot(1026)]
        
        void glStencilMask(UInt32 mask);
        [Slot(1027)]
        
        void glStencilMaskSeparate(System.Int32 face, UInt32 mask);
        [Slot(1028)]
        
        void glStencilOp(System.Int32 fail, System.Int32 zfail, System.Int32 zpass);
        [Slot(1029)]
        
        void glStencilOpSeparate(System.Int32 face, System.Int32 sfail, System.Int32 dpfail, System.Int32 dppass);
        [Slot(1037)]
        
        void glTexBuffer(System.Int32 target, System.Int32 internalformat, UInt32 buffer);
        [Slot(1039)]
        
        void glTexBufferRange(System.Int32 target, System.Int32 internalformat, UInt32 buffer, IntPtr offset, IntPtr size);
        [Slot(1041)]
        
        void glTexCoordP1ui(System.Int32 type, UInt32 coords);
        [Slot(1042)]
        
        unsafe void glTexCoordP1uiv(System.Int32 type, [CountAttribute(Count = 1)] UInt32* coords);
        [Slot(1043)]
        
        void glTexCoordP2ui(System.Int32 type, UInt32 coords);
        [Slot(1044)]
        
        unsafe void glTexCoordP2uiv(System.Int32 type, [CountAttribute(Count = 1)] UInt32* coords);
        [Slot(1045)]
        
        void glTexCoordP3ui(System.Int32 type, UInt32 coords);
        [Slot(1046)]
        
        unsafe void glTexCoordP3uiv(System.Int32 type, [CountAttribute(Count = 1)] UInt32* coords);
        [Slot(1047)]
        
        void glTexCoordP4ui(System.Int32 type, UInt32 coords);
        [Slot(1048)]
        
        unsafe void glTexCoordP4uiv(System.Int32 type, [CountAttribute(Count = 1)] UInt32* coords);
        [Slot(1049)]
        
        void glTexImage1D(System.Int32 target, Int32 level, System.Int32 internalformat, Int32 width, Int32 border, System.Int32 format, System.Int32 type, [CountAttribute(Computed = "format,type,width")] IntPtr pixels);
        [Slot(1050)]
        
        void glTexImage2D(System.Int32 target, Int32 level, System.Int32 internalformat, Int32 width, Int32 height, Int32 border, System.Int32 format, System.Int32 type, [CountAttribute(Computed = "format,type,width,height")] IntPtr pixels);
        [Slot(1051)]
        
        void glTexImage2DMultisample(System.Int32 target, Int32 samples, System.Int32 internalformat, Int32 width, Int32 height, bool fixedsamplelocations);
        [Slot(1052)]
        
        void glTexImage3D(System.Int32 target, Int32 level, System.Int32 internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, System.Int32 format, System.Int32 type, [CountAttribute(Computed = "format,type,width,height,depth")] IntPtr pixels);
        [Slot(1053)]
        
        void glTexImage3DMultisample(System.Int32 target, Int32 samples, System.Int32 internalformat, Int32 width, Int32 height, Int32 depth, bool fixedsamplelocations);
        [Slot(1055)]
        
        void glTexParameterf(System.Int32 target, System.Int32 pname, Single param);
        [Slot(1056)]
        
        unsafe void glTexParameterfv(System.Int32 target, System.Int32 pname, [CountAttribute(Computed = "pname")] Single* @params);
        [Slot(1057)]
        
        void glTexParameteri(System.Int32 target, System.Int32 pname, Int32 param);
        [Slot(1058)]
        
        unsafe void glTexParameterIiv(System.Int32 target, System.Int32 pname, [CountAttribute(Computed = "pname")] Int32* @params);
        [Slot(1059)]
        
        unsafe void glTexParameterIuiv(System.Int32 target, System.Int32 pname, [CountAttribute(Computed = "pname")] UInt32* @params);
        [Slot(1060)]
        
        unsafe void glTexParameteriv(System.Int32 target, System.Int32 pname, [CountAttribute(Computed = "pname")] Int32* @params);
        [Slot(1061)]
        
        void glTexStorage1D(System.Int32 target, Int32 levels, System.Int32 internalformat, Int32 width);
        [Slot(1062)]
        
        void glTexStorage2D(System.Int32 target, Int32 levels, System.Int32 internalformat, Int32 width, Int32 height);
        [Slot(1063)]
        
        void glTexStorage2DMultisample(System.Int32 target, Int32 samples, System.Int32 internalformat, Int32 width, Int32 height, bool fixedsamplelocations);
        [Slot(1064)]
        
        void glTexStorage3D(System.Int32 target, Int32 levels, System.Int32 internalformat, Int32 width, Int32 height, Int32 depth);
        [Slot(1065)]
        
        void glTexStorage3DMultisample(System.Int32 target, Int32 samples, System.Int32 internalformat, Int32 width, Int32 height, Int32 depth, bool fixedsamplelocations);
        [Slot(1066)]
        
        void glTexSubImage1D(System.Int32 target, Int32 level, Int32 xoffset, Int32 width, System.Int32 format, System.Int32 type, [CountAttribute(Computed = "format,type,width")] IntPtr pixels);
        [Slot(1067)]
        
        void glTexSubImage2D(System.Int32 target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, System.Int32 format, System.Int32 type, [CountAttribute(Computed = "format,type,width,height")] IntPtr pixels);
        [Slot(1068)]
        
        void glTexSubImage3D(System.Int32 target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, System.Int32 format, System.Int32 type, [CountAttribute(Computed = "format,type,width,height,depth")] IntPtr pixels);
        [Slot(1069)]
        
        void glTextureBarrier();
        [Slot(1071)]
        
        void glTextureBuffer(UInt32 texture, System.Int32 internalformat, UInt32 buffer);
        [Slot(1073)]
        
        void glTextureBufferRange(UInt32 texture, System.Int32 internalformat, UInt32 buffer, IntPtr offset, IntPtr size);
        [Slot(1079)]
        
        void glTextureParameterf(UInt32 texture, System.Int32 pname, Single param);
        [Slot(1081)]
        
        unsafe void glTextureParameterfv(UInt32 texture, System.Int32 pname, Single* param);
        [Slot(1083)]
        
        void glTextureParameteri(UInt32 texture, System.Int32 pname, Int32 param);
        [Slot(1085)]
        
        unsafe void glTextureParameterIiv(UInt32 texture, System.Int32 pname, Int32* @params);
        [Slot(1087)]
        
        unsafe void glTextureParameterIuiv(UInt32 texture, System.Int32 pname, UInt32* @params);
        [Slot(1089)]
        
        unsafe void glTextureParameteriv(UInt32 texture, System.Int32 pname, Int32* param);
        [Slot(1092)]
        
        void glTextureStorage1D(UInt32 texture, Int32 levels, System.Int32 internalformat, Int32 width);
        [Slot(1094)]
        
        void glTextureStorage2D(UInt32 texture, Int32 levels, System.Int32 internalformat, Int32 width, Int32 height);
        [Slot(1096)]
        
        void glTextureStorage2DMultisample(UInt32 texture, Int32 samples, System.Int32 internalformat, Int32 width, Int32 height, bool fixedsamplelocations);
        [Slot(1098)]
        
        void glTextureStorage3D(UInt32 texture, Int32 levels, System.Int32 internalformat, Int32 width, Int32 height, Int32 depth);
        [Slot(1100)]
        
        void glTextureStorage3DMultisample(UInt32 texture, Int32 samples, System.Int32 internalformat, Int32 width, Int32 height, Int32 depth, bool fixedsamplelocations);
        [Slot(1102)]
        
        void glTextureSubImage1D(UInt32 texture, Int32 level, Int32 xoffset, Int32 width, System.Int32 format, System.Int32 type, IntPtr pixels);
        [Slot(1104)]
        
        void glTextureSubImage2D(UInt32 texture, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, System.Int32 format, System.Int32 type, IntPtr pixels);
        [Slot(1106)]
        
        void glTextureSubImage3D(UInt32 texture, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, System.Int32 format, System.Int32 type, IntPtr pixels);
        [Slot(1108)]
        
        void glTextureView(UInt32 texture, System.Int32 target, UInt32 origtexture, System.Int32 internalformat, UInt32 minlevel, UInt32 numlevels, UInt32 minlayer, UInt32 numlayers);
        [Slot(1109)]
        
        void glTransformFeedbackBufferBase(UInt32 xfb, UInt32 index, UInt32 buffer);
        [Slot(1110)]
        
        void glTransformFeedbackBufferRange(UInt32 xfb, UInt32 index, UInt32 buffer, IntPtr offset, IntPtr size);
        [Slot(1111)]
        
        void glTransformFeedbackVaryings(UInt32 program, Int32 count, [CountAttribute(Parameter = "count")] IntPtr varyings, System.Int32 bufferMode);
        [Slot(1113)]
        
        void glUniform1d(Int32 location, Double x);
        [Slot(1114)]
        
        unsafe void glUniform1dv(Int32 location, Int32 count, [CountAttribute(Parameter = "count*1")] Double* value);
        [Slot(1115)]
        
        void glUniform1f(Int32 location, Single v0);
        [Slot(1116)]
        
        unsafe void glUniform1fv(Int32 location, Int32 count, [CountAttribute(Parameter = "count*1")] Single* value);
        [Slot(1117)]
        
        void glUniform1i(Int32 location, Int32 v0);
        [Slot(1122)]
        
        unsafe void glUniform1iv(Int32 location, Int32 count, [CountAttribute(Parameter = "count*1")] Int32* value);
        [Slot(1123)]
        
        void glUniform1ui(Int32 location, UInt32 v0);
        [Slot(1128)]
        
        unsafe void glUniform1uiv(Int32 location, Int32 count, [CountAttribute(Parameter = "count*1")] UInt32* value);
        [Slot(1129)]
        
        void glUniform2d(Int32 location, Double x, Double y);
        [Slot(1130)]
        
        unsafe void glUniform2dv(Int32 location, Int32 count, [CountAttribute(Parameter = "count*2")] Double* value);
        [Slot(1131)]
        
        void glUniform2f(Int32 location, Single v0, Single v1);
        [Slot(1132)]
        
        unsafe void glUniform2fv(Int32 location, Int32 count, [CountAttribute(Parameter = "count*2")] Single* value);
        [Slot(1133)]
        
        void glUniform2i(Int32 location, Int32 v0, Int32 v1);
        [Slot(1138)]
        
        unsafe void glUniform2iv(Int32 location, Int32 count, [CountAttribute(Parameter = "count*2")] Int32* value);
        [Slot(1139)]
        
        void glUniform2ui(Int32 location, UInt32 v0, UInt32 v1);
        [Slot(1144)]
        
        unsafe void glUniform2uiv(Int32 location, Int32 count, [CountAttribute(Parameter = "count*2")] UInt32* value);
        [Slot(1145)]
        
        void glUniform3d(Int32 location, Double x, Double y, Double z);
        [Slot(1146)]
        
        unsafe void glUniform3dv(Int32 location, Int32 count, [CountAttribute(Parameter = "count*3")] Double* value);
        [Slot(1147)]
        
        void glUniform3f(Int32 location, Single v0, Single v1, Single v2);
        [Slot(1148)]
        
        unsafe void glUniform3fv(Int32 location, Int32 count, [CountAttribute(Parameter = "count*3")] Single* value);
        [Slot(1149)]
        
        void glUniform3i(Int32 location, Int32 v0, Int32 v1, Int32 v2);
        [Slot(1154)]
        
        unsafe void glUniform3iv(Int32 location, Int32 count, [CountAttribute(Parameter = "count*3")] Int32* value);
        [Slot(1155)]
        
        void glUniform3ui(Int32 location, UInt32 v0, UInt32 v1, UInt32 v2);
        [Slot(1160)]
        
        unsafe void glUniform3uiv(Int32 location, Int32 count, [CountAttribute(Parameter = "count*3")] UInt32* value);
        [Slot(1161)]
        
        void glUniform4d(Int32 location, Double x, Double y, Double z, Double w);
        [Slot(1162)]
        
        unsafe void glUniform4dv(Int32 location, Int32 count, [CountAttribute(Parameter = "count*4")] Double* value);
        [Slot(1163)]
        
        void glUniform4f(Int32 location, Single v0, Single v1, Single v2, Single v3);
        [Slot(1164)]
        
        unsafe void glUniform4fv(Int32 location, Int32 count, [CountAttribute(Parameter = "count*4")] Single* value);
        [Slot(1165)]
        
        void glUniform4i(Int32 location, Int32 v0, Int32 v1, Int32 v2, Int32 v3);
        [Slot(1170)]
        
        unsafe void glUniform4iv(Int32 location, Int32 count, [CountAttribute(Parameter = "count*4")] Int32* value);
        [Slot(1171)]
        
        void glUniform4ui(Int32 location, UInt32 v0, UInt32 v1, UInt32 v2, UInt32 v3);
        [Slot(1176)]
        
        unsafe void glUniform4uiv(Int32 location, Int32 count, [CountAttribute(Parameter = "count*4")] UInt32* value);
        [Slot(1177)]
        
        void glUniformBlockBinding(UInt32 program, UInt32 uniformBlockIndex, UInt32 uniformBlockBinding);
        [Slot(1182)]
        
        unsafe void glUniformMatrix2dv(Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*4")] Double* value);
        [Slot(1183)]
        
        unsafe void glUniformMatrix2fv(Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*4")] Single* value);
        [Slot(1184)]
        
        unsafe void glUniformMatrix2x3dv(Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*6")] Double* value);
        [Slot(1185)]
        
        unsafe void glUniformMatrix2x3fv(Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*6")] Single* value);
        [Slot(1186)]
        
        unsafe void glUniformMatrix2x4dv(Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*8")] Double* value);
        [Slot(1187)]
        
        unsafe void glUniformMatrix2x4fv(Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*8")] Single* value);
        [Slot(1188)]
        
        unsafe void glUniformMatrix3dv(Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*9")] Double* value);
        [Slot(1189)]
        
        unsafe void glUniformMatrix3fv(Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*9")] Single* value);
        [Slot(1190)]
        
        unsafe void glUniformMatrix3x2dv(Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*6")] Double* value);
        [Slot(1191)]
        
        unsafe void glUniformMatrix3x2fv(Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*6")] Single* value);
        [Slot(1192)]
        
        unsafe void glUniformMatrix3x4dv(Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*12")] Double* value);
        [Slot(1193)]
        
        unsafe void glUniformMatrix3x4fv(Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*12")] Single* value);
        [Slot(1194)]
        
        unsafe void glUniformMatrix4dv(Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*16")] Double* value);
        [Slot(1195)]
        
        unsafe void glUniformMatrix4fv(Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*16")] Single* value);
        [Slot(1196)]
        
        unsafe void glUniformMatrix4x2dv(Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*8")] Double* value);
        [Slot(1197)]
        
        unsafe void glUniformMatrix4x2fv(Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*8")] Single* value);
        [Slot(1198)]
        
        unsafe void glUniformMatrix4x3dv(Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*12")] Double* value);
        [Slot(1199)]
        
        unsafe void glUniformMatrix4x3fv(Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*12")] Single* value);
        [Slot(1200)]
        
        unsafe void glUniformSubroutinesuiv(System.Int32 shadertype, Int32 count, [CountAttribute(Parameter = "count")] UInt32* indices);
        [Slot(1203)]
        
        byte glUnmapBuffer(System.Int32 target);
        [Slot(1204)]
        
        byte glUnmapNamedBuffer(UInt32 buffer);
        [Slot(1206)]
        
        void glUseProgram(UInt32 program);
        [Slot(1207)]
        
        void glUseProgramStages(UInt32 pipeline, System.Int32 stages, UInt32 program);
        [Slot(1210)]
        
        void glValidateProgram(UInt32 program);
        [Slot(1211)]
        
        void glValidateProgramPipeline(UInt32 pipeline);
        [Slot(1213)]
        
        void glVertexArrayAttribBinding(UInt32 vaobj, UInt32 attribindex, UInt32 bindingindex);
        [Slot(1214)]
        
        void glVertexArrayAttribFormat(UInt32 vaobj, UInt32 attribindex, Int32 size, System.Int32 type, bool normalized, UInt32 relativeoffset);
        [Slot(1215)]
        
        void glVertexArrayAttribIFormat(UInt32 vaobj, UInt32 attribindex, Int32 size, System.Int32 type, UInt32 relativeoffset);
        [Slot(1216)]
        
        void glVertexArrayAttribLFormat(UInt32 vaobj, UInt32 attribindex, Int32 size, System.Int32 type, UInt32 relativeoffset);
        [Slot(1217)]
        
        void glVertexArrayBindingDivisor(UInt32 vaobj, UInt32 bindingindex, UInt32 divisor);
        [Slot(1221)]
        
        void glVertexArrayElementBuffer(UInt32 vaobj, UInt32 buffer);
        [Slot(1237)]
        
        void glVertexArrayVertexBuffer(UInt32 vaobj, UInt32 bindingindex, UInt32 buffer, IntPtr offset, Int32 stride);
        [Slot(1238)]
        
        unsafe void glVertexArrayVertexBuffers(UInt32 vaobj, UInt32 first, Int32 count, UInt32* buffers, IntPtr* offsets, Int32* strides);
        [Slot(1240)]
        
        void glVertexAttrib1d(UInt32 index, Double x);
        [Slot(1241)]
        
        unsafe void glVertexAttrib1dv(UInt32 index, [CountAttribute(Count = 1)] Double* v);
        [Slot(1242)]
        
        void glVertexAttrib1f(UInt32 index, Single x);
        [Slot(1243)]
        
        unsafe void glVertexAttrib1fv(UInt32 index, [CountAttribute(Count = 1)] Single* v);
        [Slot(1244)]
        
        void glVertexAttrib1s(UInt32 index, Int16 x);
        [Slot(1245)]
        
        unsafe void glVertexAttrib1sv(UInt32 index, [CountAttribute(Count = 1)] Int16* v);
        [Slot(1246)]
        
        void glVertexAttrib2d(UInt32 index, Double x, Double y);
        [Slot(1247)]
        
        unsafe void glVertexAttrib2dv(UInt32 index, [CountAttribute(Count = 2)] Double* v);
        [Slot(1248)]
        
        void glVertexAttrib2f(UInt32 index, Single x, Single y);
        [Slot(1249)]
        
        unsafe void glVertexAttrib2fv(UInt32 index, [CountAttribute(Count = 2)] Single* v);
        [Slot(1250)]
        
        void glVertexAttrib2s(UInt32 index, Int16 x, Int16 y);
        [Slot(1251)]
        
        unsafe void glVertexAttrib2sv(UInt32 index, [CountAttribute(Count = 2)] Int16* v);
        [Slot(1252)]
        
        void glVertexAttrib3d(UInt32 index, Double x, Double y, Double z);
        [Slot(1253)]
        
        unsafe void glVertexAttrib3dv(UInt32 index, [CountAttribute(Count = 3)] Double* v);
        [Slot(1254)]
        
        void glVertexAttrib3f(UInt32 index, Single x, Single y, Single z);
        [Slot(1255)]
        
        unsafe void glVertexAttrib3fv(UInt32 index, [CountAttribute(Count = 3)] Single* v);
        [Slot(1256)]
        
        void glVertexAttrib3s(UInt32 index, Int16 x, Int16 y, Int16 z);
        [Slot(1257)]
        
        unsafe void glVertexAttrib3sv(UInt32 index, [CountAttribute(Count = 3)] Int16* v);
        [Slot(1258)]
        
        unsafe void glVertexAttrib4bv(UInt32 index, [CountAttribute(Count = 4)] SByte* v);
        [Slot(1259)]
        
        void glVertexAttrib4d(UInt32 index, Double x, Double y, Double z, Double w);
        [Slot(1260)]
        
        unsafe void glVertexAttrib4dv(UInt32 index, [CountAttribute(Count = 4)] Double* v);
        [Slot(1261)]
        
        void glVertexAttrib4f(UInt32 index, Single x, Single y, Single z, Single w);
        [Slot(1262)]
        
        unsafe void glVertexAttrib4fv(UInt32 index, [CountAttribute(Count = 4)] Single* v);
        [Slot(1263)]
        
        unsafe void glVertexAttrib4iv(UInt32 index, [CountAttribute(Count = 4)] Int32* v);
        [Slot(1264)]
        
        unsafe void glVertexAttrib4Nbv(UInt32 index, [CountAttribute(Count = 4)] SByte* v);
        [Slot(1265)]
        
        unsafe void glVertexAttrib4Niv(UInt32 index, [CountAttribute(Count = 4)] Int32* v);
        [Slot(1266)]
        
        unsafe void glVertexAttrib4Nsv(UInt32 index, [CountAttribute(Count = 4)] Int16* v);
        [Slot(1267)]
        
        void glVertexAttrib4Nub(UInt32 index, Byte x, Byte y, Byte z, Byte w);
        [Slot(1268)]
        
        unsafe void glVertexAttrib4Nubv(UInt32 index, [CountAttribute(Count = 4)] Byte* v);
        [Slot(1269)]
        
        unsafe void glVertexAttrib4Nuiv(UInt32 index, [CountAttribute(Count = 4)] UInt32* v);
        [Slot(1270)]
        
        unsafe void glVertexAttrib4Nusv(UInt32 index, [CountAttribute(Count = 4)] UInt16* v);
        [Slot(1271)]
        
        void glVertexAttrib4s(UInt32 index, Int16 x, Int16 y, Int16 z, Int16 w);
        [Slot(1272)]
        
        unsafe void glVertexAttrib4sv(UInt32 index, [CountAttribute(Count = 4)] Int16* v);
        [Slot(1273)]
        
        unsafe void glVertexAttrib4ubv(UInt32 index, [CountAttribute(Count = 4)] Byte* v);
        [Slot(1274)]
        
        unsafe void glVertexAttrib4uiv(UInt32 index, [CountAttribute(Count = 4)] UInt32* v);
        [Slot(1275)]
        
        unsafe void glVertexAttrib4usv(UInt32 index, [CountAttribute(Count = 4)] UInt16* v);
        [Slot(1276)]
        
        void glVertexAttribBinding(UInt32 attribindex, UInt32 bindingindex);
        [Slot(1277)]
        
        void glVertexAttribDivisor(UInt32 index, UInt32 divisor);
        [Slot(1279)]
        
        void glVertexAttribFormat(UInt32 attribindex, Int32 size, System.Int32 type, bool normalized, UInt32 relativeoffset);
        [Slot(1281)]
        
        void glVertexAttribI1i(UInt32 index, Int32 x);
        [Slot(1282)]
        
        unsafe void glVertexAttribI1iv(UInt32 index, [CountAttribute(Count = 1)] Int32* v);
        [Slot(1283)]
        
        void glVertexAttribI1ui(UInt32 index, UInt32 x);
        [Slot(1284)]
        
        unsafe void glVertexAttribI1uiv(UInt32 index, [CountAttribute(Count = 1)] UInt32* v);
        [Slot(1285)]
        
        void glVertexAttribI2i(UInt32 index, Int32 x, Int32 y);
        [Slot(1286)]
        
        unsafe void glVertexAttribI2iv(UInt32 index, [CountAttribute(Count = 2)] Int32* v);
        [Slot(1287)]
        
        void glVertexAttribI2ui(UInt32 index, UInt32 x, UInt32 y);
        [Slot(1288)]
        
        unsafe void glVertexAttribI2uiv(UInt32 index, [CountAttribute(Count = 2)] UInt32* v);
        [Slot(1289)]
        
        void glVertexAttribI3i(UInt32 index, Int32 x, Int32 y, Int32 z);
        [Slot(1290)]
        
        unsafe void glVertexAttribI3iv(UInt32 index, [CountAttribute(Count = 3)] Int32* v);
        [Slot(1291)]
        
        void glVertexAttribI3ui(UInt32 index, UInt32 x, UInt32 y, UInt32 z);
        [Slot(1292)]
        
        unsafe void glVertexAttribI3uiv(UInt32 index, [CountAttribute(Count = 3)] UInt32* v);
        [Slot(1293)]
        
        unsafe void glVertexAttribI4bv(UInt32 index, [CountAttribute(Count = 4)] SByte* v);
        [Slot(1294)]
        
        void glVertexAttribI4i(UInt32 index, Int32 x, Int32 y, Int32 z, Int32 w);
        [Slot(1295)]
        
        unsafe void glVertexAttribI4iv(UInt32 index, [CountAttribute(Count = 4)] Int32* v);
        [Slot(1296)]
        
        unsafe void glVertexAttribI4sv(UInt32 index, [CountAttribute(Count = 4)] Int16* v);
        [Slot(1297)]
        
        unsafe void glVertexAttribI4ubv(UInt32 index, [CountAttribute(Count = 4)] Byte* v);
        [Slot(1298)]
        
        void glVertexAttribI4ui(UInt32 index, UInt32 x, UInt32 y, UInt32 z, UInt32 w);
        [Slot(1299)]
        
        unsafe void glVertexAttribI4uiv(UInt32 index, [CountAttribute(Count = 4)] UInt32* v);
        [Slot(1300)]
        
        unsafe void glVertexAttribI4usv(UInt32 index, [CountAttribute(Count = 4)] UInt16* v);
        [Slot(1301)]
        
        void glVertexAttribIFormat(UInt32 attribindex, Int32 size, System.Int32 type, UInt32 relativeoffset);
        [Slot(1303)]
        
        void glVertexAttribIPointer(UInt32 index, Int32 size, System.Int32 type, Int32 stride, [CountAttribute(Computed = "size,type,stride")] IntPtr pointer);
        [Slot(1304)]
        
        void glVertexAttribL1d(UInt32 index, Double x);
        [Slot(1305)]
        
        unsafe void glVertexAttribL1dv(UInt32 index, [CountAttribute(Count = 1)] Double* v);
        [Slot(1312)]
        
        void glVertexAttribL2d(UInt32 index, Double x, Double y);
        [Slot(1313)]
        
        unsafe void glVertexAttribL2dv(UInt32 index, [CountAttribute(Count = 2)] Double* v);
        [Slot(1318)]
        
        void glVertexAttribL3d(UInt32 index, Double x, Double y, Double z);
        [Slot(1319)]
        
        unsafe void glVertexAttribL3dv(UInt32 index, [CountAttribute(Count = 3)] Double* v);
        [Slot(1324)]
        
        void glVertexAttribL4d(UInt32 index, Double x, Double y, Double z, Double w);
        [Slot(1325)]
        
        unsafe void glVertexAttribL4dv(UInt32 index, [CountAttribute(Count = 4)] Double* v);
        [Slot(1330)]
        
        void glVertexAttribLFormat(UInt32 attribindex, Int32 size, System.Int32 type, UInt32 relativeoffset);
        [Slot(1332)]
        
        void glVertexAttribLPointer(UInt32 index, Int32 size, System.Int32 type, Int32 stride, [CountAttribute(Parameter = "size")] IntPtr pointer);
        [Slot(1333)]
        
        void glVertexAttribP1ui(UInt32 index, System.Int32 type, bool normalized, UInt32 value);
        [Slot(1334)]
        
        unsafe void glVertexAttribP1uiv(UInt32 index, System.Int32 type, bool normalized, [CountAttribute(Count = 1)] UInt32* value);
        [Slot(1335)]
        
        void glVertexAttribP2ui(UInt32 index, System.Int32 type, bool normalized, UInt32 value);
        [Slot(1336)]
        
        unsafe void glVertexAttribP2uiv(UInt32 index, System.Int32 type, bool normalized, [CountAttribute(Count = 1)] UInt32* value);
        [Slot(1337)]
        
        void glVertexAttribP3ui(UInt32 index, System.Int32 type, bool normalized, UInt32 value);
        [Slot(1338)]
        
        unsafe void glVertexAttribP3uiv(UInt32 index, System.Int32 type, bool normalized, [CountAttribute(Count = 1)] UInt32* value);
        [Slot(1339)]
        
        void glVertexAttribP4ui(UInt32 index, System.Int32 type, bool normalized, UInt32 value);
        [Slot(1340)]
        
        unsafe void glVertexAttribP4uiv(UInt32 index, System.Int32 type, bool normalized, [CountAttribute(Count = 1)] UInt32* value);
        [Slot(1341)]
        
        void glVertexAttribPointer(UInt32 index, Int32 size, System.Int32 type, bool normalized, Int32 stride, [CountAttribute(Computed = "size,type,stride")] IntPtr pointer);
        [Slot(1342)]
        
        void glVertexBindingDivisor(UInt32 bindingindex, UInt32 divisor);
        [Slot(1344)]
        
        void glVertexP2ui(System.Int32 type, UInt32 value);
        [Slot(1345)]
        
        unsafe void glVertexP2uiv(System.Int32 type, [CountAttribute(Count = 1)] UInt32* value);
        [Slot(1346)]
        
        void glVertexP3ui(System.Int32 type, UInt32 value);
        [Slot(1347)]
        
        unsafe void glVertexP3uiv(System.Int32 type, [CountAttribute(Count = 1)] UInt32* value);
        [Slot(1348)]
        
        void glVertexP4ui(System.Int32 type, UInt32 value);
        [Slot(1349)]
        
        unsafe void glVertexP4uiv(System.Int32 type, [CountAttribute(Count = 1)] UInt32* value);
        [Slot(1350)]
        
        void glViewport(Int32 x, Int32 y, Int32 width, Int32 height);
        [Slot(1351)]
        
        unsafe void glViewportArrayv(UInt32 first, Int32 count, [CountAttribute(Computed = "count")] Single* v);
        [Slot(1352)]
        
        void glViewportIndexedf(UInt32 index, Single x, Single y, Single w, Single h);
        [Slot(1353)]
        
        unsafe void glViewportIndexedfv(UInt32 index, [CountAttribute(Count = 4)] Single* v);
        [Slot(1356)]
        
        void glWaitSync(IntPtr sync, System.Int32 flags, UInt64 timeout);
        [Slot(0)]
        
        void glActiveProgramEXT(UInt32 program);
        [Slot(2)]
        
        void glActiveShaderProgramEXT(UInt32 pipeline, UInt32 program);
        [Slot(24)]
        
        void glBindMultiTextureEXT(System.Int32 texunit, System.Int32 target, UInt32 texture);
        [Slot(26)]
        
        void glBindProgramPipelineEXT(UInt32 pipeline);
        [Slot(63)]
        
        System.Int32 glCheckNamedFramebufferStatusEXT(UInt32 framebuffer, System.Int32 target);
        [Slot(76)]
        
        void glClearNamedBufferDataEXT(UInt32 buffer, System.Int32 internalformat, System.Int32 format, System.Int32 type, [CountAttribute(Computed = "format,type")] IntPtr data);
        [Slot(78)]
        
        void glClearNamedBufferSubDataEXT(UInt32 buffer, System.Int32 internalformat, IntPtr offset, IntPtr size, System.Int32 format, System.Int32 type, [CountAttribute(Computed = "format,type")] IntPtr data);
        [Slot(86)]
        
        void glClientAttribDefaultEXT(System.Int32 mask);
        [Slot(104)]
        
        void glCompressedMultiTexImage1DEXT(System.Int32 texunit, System.Int32 target, Int32 level, System.Int32 internalformat, Int32 width, Int32 border, Int32 imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr bits);
        [Slot(105)]
        
        void glCompressedMultiTexImage2DEXT(System.Int32 texunit, System.Int32 target, Int32 level, System.Int32 internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr bits);
        [Slot(106)]
        
        void glCompressedMultiTexImage3DEXT(System.Int32 texunit, System.Int32 target, Int32 level, System.Int32 internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr bits);
        [Slot(107)]
        
        void glCompressedMultiTexSubImage1DEXT(System.Int32 texunit, System.Int32 target, Int32 level, Int32 xoffset, Int32 width, System.Int32 format, Int32 imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr bits);
        [Slot(108)]
        
        void glCompressedMultiTexSubImage2DEXT(System.Int32 texunit, System.Int32 target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, System.Int32 format, Int32 imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr bits);
        [Slot(109)]
        
        void glCompressedMultiTexSubImage3DEXT(System.Int32 texunit, System.Int32 target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, System.Int32 format, Int32 imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr bits);
        [Slot(116)]
        
        void glCompressedTextureImage1DEXT(UInt32 texture, System.Int32 target, Int32 level, System.Int32 internalformat, Int32 width, Int32 border, Int32 imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr bits);
        [Slot(117)]
        
        void glCompressedTextureImage2DEXT(UInt32 texture, System.Int32 target, Int32 level, System.Int32 internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr bits);
        [Slot(118)]
        
        void glCompressedTextureImage3DEXT(UInt32 texture, System.Int32 target, Int32 level, System.Int32 internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr bits);
        [Slot(120)]
        
        void glCompressedTextureSubImage1DEXT(UInt32 texture, System.Int32 target, Int32 level, Int32 xoffset, Int32 width, System.Int32 format, Int32 imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr bits);
        [Slot(122)]
        
        void glCompressedTextureSubImage2DEXT(UInt32 texture, System.Int32 target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, System.Int32 format, Int32 imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr bits);
        [Slot(124)]
        
        void glCompressedTextureSubImage3DEXT(UInt32 texture, System.Int32 target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, System.Int32 format, Int32 imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr bits);
        [Slot(139)]
        
        void glCopyMultiTexImage1DEXT(System.Int32 texunit, System.Int32 target, Int32 level, System.Int32 internalformat, Int32 x, Int32 y, Int32 width, Int32 border);
        [Slot(140)]
        
        void glCopyMultiTexImage2DEXT(System.Int32 texunit, System.Int32 target, Int32 level, System.Int32 internalformat, Int32 x, Int32 y, Int32 width, Int32 height, Int32 border);
        [Slot(141)]
        
        void glCopyMultiTexSubImage1DEXT(System.Int32 texunit, System.Int32 target, Int32 level, Int32 xoffset, Int32 x, Int32 y, Int32 width);
        [Slot(142)]
        
        void glCopyMultiTexSubImage2DEXT(System.Int32 texunit, System.Int32 target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 x, Int32 y, Int32 width, Int32 height);
        [Slot(143)]
        
        void glCopyMultiTexSubImage3DEXT(System.Int32 texunit, System.Int32 target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 x, Int32 y, Int32 width, Int32 height);
        [Slot(151)]
        
        void glCopyTextureImage1DEXT(UInt32 texture, System.Int32 target, Int32 level, System.Int32 internalformat, Int32 x, Int32 y, Int32 width, Int32 border);
        [Slot(152)]
        
        void glCopyTextureImage2DEXT(UInt32 texture, System.Int32 target, Int32 level, System.Int32 internalformat, Int32 x, Int32 y, Int32 width, Int32 height, Int32 border);
        [Slot(154)]
        
        void glCopyTextureSubImage1DEXT(UInt32 texture, System.Int32 target, Int32 level, Int32 xoffset, Int32 x, Int32 y, Int32 width);
        [Slot(156)]
        
        void glCopyTextureSubImage2DEXT(UInt32 texture, System.Int32 target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 x, Int32 y, Int32 width, Int32 height);
        [Slot(158)]
        
        void glCopyTextureSubImage3DEXT(UInt32 texture, System.Int32 target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 x, Int32 y, Int32 width, Int32 height);
        [Slot(175)]
        
        Int32 glCreateShaderProgramEXT(System.Int32 type, IntPtr @string);
        [Slot(177)]
        
        Int32 glCreateShaderProgramvEXT(System.Int32 type, Int32 count, [CountAttribute(Parameter = "count")] IntPtr strings);
        [Slot(202)]
        
        unsafe void glDeleteProgramPipelinesEXT(Int32 n, [CountAttribute(Parameter = "n")] UInt32* pipelines);
        [Slot(220)]
        
        void glDisableClientStateiEXT(System.Int32 array, UInt32 index);
        [Slot(221)]
        
        void glDisableClientStateIndexedEXT(System.Int32 array, UInt32 index);
        [Slot(223)]
        
        void glDisableIndexedEXT(System.Int32 target, UInt32 index);
        [Slot(225)]
        
        void glDisableVertexArrayAttribEXT(UInt32 vaobj, UInt32 index);
        [Slot(226)]
        
        void glDisableVertexArrayEXT(UInt32 vaobj, System.Int32 array);
        [Slot(236)]
        
        void glDrawArraysInstancedEXT(System.Int32 mode, Int32 start, Int32 count, Int32 primcount);
        [Slot(251)]
        
        void glDrawElementsInstancedEXT(System.Int32 mode, Int32 count, System.Int32 type, [CountAttribute(Computed = "count,type")] IntPtr indices, Int32 primcount);
        [Slot(261)]
        
        void glEnableClientStateiEXT(System.Int32 array, UInt32 index);
        [Slot(262)]
        
        void glEnableClientStateIndexedEXT(System.Int32 array, UInt32 index);
        [Slot(264)]
        
        void glEnableIndexedEXT(System.Int32 target, UInt32 index);
        [Slot(266)]
        
        void glEnableVertexArrayAttribEXT(UInt32 vaobj, UInt32 index);
        [Slot(267)]
        
        void glEnableVertexArrayEXT(UInt32 vaobj, System.Int32 array);
        [Slot(282)]
        
        void glFlushMappedNamedBufferRangeEXT(UInt32 buffer, IntPtr offset, IntPtr length);
        [Slot(285)]
        
        void glFramebufferDrawBufferEXT(UInt32 framebuffer, System.Int32 mode);
        [Slot(286)]
        
        unsafe void glFramebufferDrawBuffersEXT(UInt32 framebuffer, Int32 n, [CountAttribute(Parameter = "n")] System.Int32* bufs);
        [Slot(288)]
        
        void glFramebufferReadBufferEXT(UInt32 framebuffer, System.Int32 mode);
        [Slot(304)]
        
        void glGenerateMultiTexMipmapEXT(System.Int32 texunit, System.Int32 target);
        [Slot(306)]
        
        void glGenerateTextureMipmapEXT(UInt32 texture, System.Int32 target);
        [Slot(311)]
        
        unsafe void glGenProgramPipelinesEXT(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] UInt32* pipelines);
        [Slot(331)]
        
        unsafe void glGetBooleanIndexedvEXT(System.Int32 target, UInt32 index, [OutAttribute, CountAttribute(Computed = "target")] bool* data);
        [Slot(342)]
        
        void glGetCompressedMultiTexImageEXT(System.Int32 texunit, System.Int32 target, Int32 lod, [OutAttribute, CountAttribute(Computed = "target,lod")] IntPtr img);
        [Slot(345)]
        
        void glGetCompressedTextureImageEXT(UInt32 texture, System.Int32 target, Int32 lod, [OutAttribute, CountAttribute(Computed = "target,lod")] IntPtr img);
        [Slot(355)]
        
        unsafe void glGetDoublei_vEXT(System.Int32 pname, UInt32 index, [OutAttribute, CountAttribute(Computed = "pname")] Double* @params);
        [Slot(356)]
        
        unsafe void glGetDoubleIndexedvEXT(System.Int32 target, UInt32 index, [OutAttribute, CountAttribute(Computed = "target")] Double* data);
        [Slot(361)]
        
        unsafe void glGetFloati_vEXT(System.Int32 pname, UInt32 index, [OutAttribute, CountAttribute(Computed = "pname")] Single* @params);
        [Slot(362)]
        
        unsafe void glGetFloatIndexedvEXT(System.Int32 target, UInt32 index, [OutAttribute, CountAttribute(Computed = "target")] Single* data);
        [Slot(368)]
        
        unsafe void glGetFramebufferParameterivEXT(UInt32 framebuffer, System.Int32 pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* @params);
        [Slot(380)]
        
        unsafe void glGetIntegerIndexedvEXT(System.Int32 target, UInt32 index, [OutAttribute, CountAttribute(Computed = "target")] Int32* data);
        [Slot(391)]
        
        unsafe void glGetMultiTexEnvfvEXT(System.Int32 texunit, System.Int32 target, System.Int32 pname, [OutAttribute, CountAttribute(Computed = "pname")] Single* @params);
        [Slot(392)]
        
        unsafe void glGetMultiTexEnvivEXT(System.Int32 texunit, System.Int32 target, System.Int32 pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* @params);
        [Slot(393)]
        
        unsafe void glGetMultiTexGendvEXT(System.Int32 texunit, System.Int32 coord, System.Int32 pname, [OutAttribute, CountAttribute(Computed = "pname")] Double* @params);
        [Slot(394)]
        
        unsafe void glGetMultiTexGenfvEXT(System.Int32 texunit, System.Int32 coord, System.Int32 pname, [OutAttribute, CountAttribute(Computed = "pname")] Single* @params);
        [Slot(395)]
        
        unsafe void glGetMultiTexGenivEXT(System.Int32 texunit, System.Int32 coord, System.Int32 pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* @params);
        [Slot(396)]
        
        void glGetMultiTexImageEXT(System.Int32 texunit, System.Int32 target, Int32 level, System.Int32 format, System.Int32 type, [OutAttribute, CountAttribute(Computed = "target,level,format,type")] IntPtr pixels);
        [Slot(397)]
        
        unsafe void glGetMultiTexLevelParameterfvEXT(System.Int32 texunit, System.Int32 target, Int32 level, System.Int32 pname, [OutAttribute, CountAttribute(Computed = "pname")] Single* @params);
        [Slot(398)]
        
        unsafe void glGetMultiTexLevelParameterivEXT(System.Int32 texunit, System.Int32 target, Int32 level, System.Int32 pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* @params);
        [Slot(399)]
        
        unsafe void glGetMultiTexParameterfvEXT(System.Int32 texunit, System.Int32 target, System.Int32 pname, [OutAttribute, CountAttribute(Computed = "pname")] Single* @params);
        [Slot(400)]
        
        unsafe void glGetMultiTexParameterIivEXT(System.Int32 texunit, System.Int32 target, System.Int32 pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* @params);
        [Slot(401)]
        
        unsafe void glGetMultiTexParameterIuivEXT(System.Int32 texunit, System.Int32 target, System.Int32 pname, [OutAttribute, CountAttribute(Computed = "pname")] UInt32* @params);
        [Slot(402)]
        
        unsafe void glGetMultiTexParameterivEXT(System.Int32 texunit, System.Int32 target, System.Int32 pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* @params);
        [Slot(405)]
        
        unsafe void glGetNamedBufferParameterivEXT(UInt32 buffer, System.Int32 pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* @params);
        [Slot(408)]
        
        void glGetNamedBufferPointervEXT(UInt32 buffer, System.Int32 pname, [OutAttribute, CountAttribute(Count = 1)] IntPtr @params);
        [Slot(410)]
        
        void glGetNamedBufferSubDataEXT(UInt32 buffer, IntPtr offset, IntPtr size, [OutAttribute, CountAttribute(Computed = "size")] IntPtr data);
        [Slot(412)]
        
        unsafe void glGetNamedFramebufferAttachmentParameterivEXT(UInt32 framebuffer, System.Int32 attachment, System.Int32 pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* @params);
        [Slot(414)]
        
        unsafe void glGetNamedFramebufferParameterivEXT(UInt32 framebuffer, System.Int32 pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* @params);
        [Slot(415)]
        
        unsafe void glGetNamedProgramivEXT(UInt32 program, System.Int32 target, System.Int32 pname, [OutAttribute, CountAttribute(Count = 1)] Int32* @params);
        [Slot(416)]
        
        unsafe void glGetNamedProgramLocalParameterdvEXT(UInt32 program, System.Int32 target, UInt32 index, [OutAttribute, CountAttribute(Count = 4)] Double* @params);
        [Slot(417)]
        
        unsafe void glGetNamedProgramLocalParameterfvEXT(UInt32 program, System.Int32 target, UInt32 index, [OutAttribute, CountAttribute(Count = 4)] Single* @params);
        [Slot(418)]
        
        unsafe void glGetNamedProgramLocalParameterIivEXT(UInt32 program, System.Int32 target, UInt32 index, [OutAttribute, CountAttribute(Count = 4)] Int32* @params);
        [Slot(419)]
        
        unsafe void glGetNamedProgramLocalParameterIuivEXT(UInt32 program, System.Int32 target, UInt32 index, [OutAttribute, CountAttribute(Count = 4)] UInt32* @params);
        [Slot(420)]
        
        void glGetNamedProgramStringEXT(UInt32 program, System.Int32 target, System.Int32 pname, [OutAttribute, CountAttribute(Computed = "program,pname")] IntPtr @string);
        [Slot(422)]
        
        unsafe void glGetNamedRenderbufferParameterivEXT(UInt32 renderbuffer, System.Int32 pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* @params);
        [Slot(468)]
        
        unsafe void glGetObjectLabelEXT(System.Int32 type, UInt32 @object, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr label);
        [Slot(495)]
        
        void glGetPointeri_vEXT(System.Int32 pname, UInt32 index, [OutAttribute, CountAttribute(Count = 1)] IntPtr @params);
        [Slot(496)]
        
        void glGetPointerIndexedvEXT(System.Int32 target, UInt32 index, [OutAttribute, CountAttribute(Count = 1)] IntPtr data);
        [Slot(504)]
        
        unsafe void glGetProgramPipelineInfoLogEXT(UInt32 pipeline, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr infoLog);
        [Slot(506)]
        
        unsafe void glGetProgramPipelineivEXT(UInt32 pipeline, System.Int32 pname, [OutAttribute] Int32* @params);
        [Slot(550)]
        
        void glGetTextureImageEXT(UInt32 texture, System.Int32 target, Int32 level, System.Int32 format, System.Int32 type, [OutAttribute, CountAttribute(Computed = "target,level,format,type")] IntPtr pixels);
        [Slot(552)]
        
        unsafe void glGetTextureLevelParameterfvEXT(UInt32 texture, System.Int32 target, Int32 level, System.Int32 pname, [OutAttribute, CountAttribute(Computed = "pname")] Single* @params);
        [Slot(554)]
        
        unsafe void glGetTextureLevelParameterivEXT(UInt32 texture, System.Int32 target, Int32 level, System.Int32 pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* @params);
        [Slot(556)]
        
        unsafe void glGetTextureParameterfvEXT(UInt32 texture, System.Int32 target, System.Int32 pname, [OutAttribute, CountAttribute(Computed = "pname")] Single* @params);
        [Slot(558)]
        
        unsafe void glGetTextureParameterIivEXT(UInt32 texture, System.Int32 target, System.Int32 pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* @params);
        [Slot(560)]
        
        unsafe void glGetTextureParameterIuivEXT(UInt32 texture, System.Int32 target, System.Int32 pname, [OutAttribute, CountAttribute(Computed = "pname")] UInt32* @params);
        [Slot(562)]
        
        unsafe void glGetTextureParameterivEXT(UInt32 texture, System.Int32 target, System.Int32 pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* @params);
        [Slot(584)]
        
        unsafe void glGetVertexArrayIntegeri_vEXT(UInt32 vaobj, UInt32 index, System.Int32 pname, [OutAttribute] Int32* param);
        [Slot(585)]
        
        unsafe void glGetVertexArrayIntegervEXT(UInt32 vaobj, System.Int32 pname, [OutAttribute] Int32* param);
        [Slot(587)]
        
        void glGetVertexArrayPointeri_vEXT(UInt32 vaobj, UInt32 index, System.Int32 pname, [OutAttribute] IntPtr param);
        [Slot(588)]
        
        void glGetVertexArrayPointervEXT(UInt32 vaobj, System.Int32 pname, [OutAttribute, CountAttribute(Count = 1)] IntPtr param);
        [Slot(603)]
        
        void glInsertEventMarkerEXT(Int32 length, IntPtr marker);
        [Slot(618)]
        
        byte glIsEnabledIndexedEXT(System.Int32 target, UInt32 index);
        [Slot(629)]
        
        byte glIsProgramPipelineEXT(UInt32 pipeline);
        [Slot(641)]
        
        void glLabelObjectEXT(System.Int32 type, UInt32 @object, Int32 length, IntPtr label);
        [Slot(661)]
        
        IntPtr glMapNamedBufferEXT(UInt32 buffer, System.Int32 access);
        [Slot(663)]
        
        IntPtr glMapNamedBufferRangeEXT(UInt32 buffer, IntPtr offset, IntPtr length, System.Int32 access);
        [Slot(664)]
        
        void glMatrixFrustumEXT(System.Int32 mode, Double left, Double right, Double bottom, Double top, Double zNear, Double zFar);
        [Slot(667)]
        
        unsafe void glMatrixLoaddEXT(System.Int32 mode, [CountAttribute(Count = 16)] Double* m);
        [Slot(668)]
        
        unsafe void glMatrixLoadfEXT(System.Int32 mode, [CountAttribute(Count = 16)] Single* m);
        [Slot(669)]
        
        void glMatrixLoadIdentityEXT(System.Int32 mode);
        [Slot(671)]
        
        unsafe void glMatrixLoadTransposedEXT(System.Int32 mode, [CountAttribute(Count = 16)] Double* m);
        [Slot(672)]
        
        unsafe void glMatrixLoadTransposefEXT(System.Int32 mode, [CountAttribute(Count = 16)] Single* m);
        [Slot(675)]
        
        unsafe void glMatrixMultdEXT(System.Int32 mode, [CountAttribute(Count = 16)] Double* m);
        [Slot(676)]
        
        unsafe void glMatrixMultfEXT(System.Int32 mode, [CountAttribute(Count = 16)] Single* m);
        [Slot(678)]
        
        unsafe void glMatrixMultTransposedEXT(System.Int32 mode, [CountAttribute(Count = 16)] Double* m);
        [Slot(679)]
        
        unsafe void glMatrixMultTransposefEXT(System.Int32 mode, [CountAttribute(Count = 16)] Single* m);
        [Slot(680)]
        
        void glMatrixOrthoEXT(System.Int32 mode, Double left, Double right, Double bottom, Double top, Double zNear, Double zFar);
        [Slot(681)]
        
        void glMatrixPopEXT(System.Int32 mode);
        [Slot(682)]
        
        void glMatrixPushEXT(System.Int32 mode);
        [Slot(683)]
        
        void glMatrixRotatedEXT(System.Int32 mode, Double angle, Double x, Double y, Double z);
        [Slot(684)]
        
        void glMatrixRotatefEXT(System.Int32 mode, Single angle, Single x, Single y, Single z);
        [Slot(685)]
        
        void glMatrixScaledEXT(System.Int32 mode, Double x, Double y, Double z);
        [Slot(686)]
        
        void glMatrixScalefEXT(System.Int32 mode, Single x, Single y, Single z);
        [Slot(687)]
        
        void glMatrixTranslatedEXT(System.Int32 mode, Double x, Double y, Double z);
        [Slot(688)]
        
        void glMatrixTranslatefEXT(System.Int32 mode, Single x, Single y, Single z);
        [Slot(709)]
        
        void glMultiTexBufferEXT(System.Int32 texunit, System.Int32 target, System.Int32 internalformat, UInt32 buffer);
        [Slot(718)]
        
        void glMultiTexCoordPointerEXT(System.Int32 texunit, Int32 size, System.Int32 type, Int32 stride, [CountAttribute(Computed = "size,type,stride")] IntPtr pointer);
        [Slot(719)]
        
        void glMultiTexEnvfEXT(System.Int32 texunit, System.Int32 target, System.Int32 pname, Single param);
        [Slot(720)]
        
        unsafe void glMultiTexEnvfvEXT(System.Int32 texunit, System.Int32 target, System.Int32 pname, [CountAttribute(Computed = "pname")] Single* @params);
        [Slot(721)]
        
        void glMultiTexEnviEXT(System.Int32 texunit, System.Int32 target, System.Int32 pname, Int32 param);
        [Slot(722)]
        
        unsafe void glMultiTexEnvivEXT(System.Int32 texunit, System.Int32 target, System.Int32 pname, [CountAttribute(Computed = "pname")] Int32* @params);
        [Slot(723)]
        
        void glMultiTexGendEXT(System.Int32 texunit, System.Int32 coord, System.Int32 pname, Double param);
        [Slot(724)]
        
        unsafe void glMultiTexGendvEXT(System.Int32 texunit, System.Int32 coord, System.Int32 pname, [CountAttribute(Computed = "pname")] Double* @params);
        [Slot(725)]
        
        void glMultiTexGenfEXT(System.Int32 texunit, System.Int32 coord, System.Int32 pname, Single param);
        [Slot(726)]
        
        unsafe void glMultiTexGenfvEXT(System.Int32 texunit, System.Int32 coord, System.Int32 pname, [CountAttribute(Computed = "pname")] Single* @params);
        [Slot(727)]
        
        void glMultiTexGeniEXT(System.Int32 texunit, System.Int32 coord, System.Int32 pname, Int32 param);
        [Slot(728)]
        
        unsafe void glMultiTexGenivEXT(System.Int32 texunit, System.Int32 coord, System.Int32 pname, [CountAttribute(Computed = "pname")] Int32* @params);
        [Slot(729)]
        
        void glMultiTexImage1DEXT(System.Int32 texunit, System.Int32 target, Int32 level, System.Int32 internalformat, Int32 width, Int32 border, System.Int32 format, System.Int32 type, [CountAttribute(Computed = "format,type,width")] IntPtr pixels);
        [Slot(730)]
        
        void glMultiTexImage2DEXT(System.Int32 texunit, System.Int32 target, Int32 level, System.Int32 internalformat, Int32 width, Int32 height, Int32 border, System.Int32 format, System.Int32 type, [CountAttribute(Computed = "format,type,width,height")] IntPtr pixels);
        [Slot(731)]
        
        void glMultiTexImage3DEXT(System.Int32 texunit, System.Int32 target, Int32 level, System.Int32 internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, System.Int32 format, System.Int32 type, [CountAttribute(Computed = "format,type,width,height,depth")] IntPtr pixels);
        [Slot(732)]
        
        void glMultiTexParameterfEXT(System.Int32 texunit, System.Int32 target, System.Int32 pname, Single param);
        [Slot(733)]
        
        unsafe void glMultiTexParameterfvEXT(System.Int32 texunit, System.Int32 target, System.Int32 pname, [CountAttribute(Computed = "pname")] Single* @params);
        [Slot(734)]
        
        void glMultiTexParameteriEXT(System.Int32 texunit, System.Int32 target, System.Int32 pname, Int32 param);
        [Slot(735)]
        
        unsafe void glMultiTexParameterIivEXT(System.Int32 texunit, System.Int32 target, System.Int32 pname, [CountAttribute(Computed = "pname")] Int32* @params);
        [Slot(736)]
        
        unsafe void glMultiTexParameterIuivEXT(System.Int32 texunit, System.Int32 target, System.Int32 pname, [CountAttribute(Computed = "pname")] UInt32* @params);
        [Slot(737)]
        
        unsafe void glMultiTexParameterivEXT(System.Int32 texunit, System.Int32 target, System.Int32 pname, [CountAttribute(Computed = "pname")] Int32* @params);
        [Slot(738)]
        
        void glMultiTexRenderbufferEXT(System.Int32 texunit, System.Int32 target, UInt32 renderbuffer);
        [Slot(739)]
        
        void glMultiTexSubImage1DEXT(System.Int32 texunit, System.Int32 target, Int32 level, Int32 xoffset, Int32 width, System.Int32 format, System.Int32 type, [CountAttribute(Computed = "format,type,width")] IntPtr pixels);
        [Slot(740)]
        
        void glMultiTexSubImage2DEXT(System.Int32 texunit, System.Int32 target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, System.Int32 format, System.Int32 type, [CountAttribute(Computed = "format,type,width,height")] IntPtr pixels);
        [Slot(741)]
        
        void glMultiTexSubImage3DEXT(System.Int32 texunit, System.Int32 target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, System.Int32 format, System.Int32 type, [CountAttribute(Computed = "format,type,width,height,depth")] IntPtr pixels);
        [Slot(743)]
        
        void glNamedBufferDataEXT(UInt32 buffer, IntPtr size, [CountAttribute(Computed = "size")] IntPtr data, System.Int32 usage);
        [Slot(745)]
        
        void glNamedBufferPageCommitmentEXT(UInt32 buffer, IntPtr offset, IntPtr size, bool commit);
        [Slot(747)]
        
        void glNamedBufferStorageEXT(UInt32 buffer, IntPtr size, [CountAttribute(Parameter = "size")] IntPtr data, System.Int32 flags);
        [Slot(749)]
        
        void glNamedBufferSubDataEXT(UInt32 buffer, IntPtr offset, IntPtr size, [CountAttribute(Computed = "size")] IntPtr data);
        [Slot(750)]
        
        void glNamedCopyBufferSubDataEXT(UInt32 readBuffer, UInt32 writeBuffer, IntPtr readOffset, IntPtr writeOffset, IntPtr size);
        [Slot(754)]
        
        void glNamedFramebufferParameteriEXT(UInt32 framebuffer, System.Int32 pname, Int32 param);
        [Slot(757)]
        
        void glNamedFramebufferRenderbufferEXT(UInt32 framebuffer, System.Int32 attachment, System.Int32 renderbuffertarget, UInt32 renderbuffer);
        [Slot(761)]
        
        void glNamedFramebufferTexture1DEXT(UInt32 framebuffer, System.Int32 attachment, System.Int32 textarget, UInt32 texture, Int32 level);
        [Slot(762)]
        
        void glNamedFramebufferTexture2DEXT(UInt32 framebuffer, System.Int32 attachment, System.Int32 textarget, UInt32 texture, Int32 level);
        [Slot(763)]
        
        void glNamedFramebufferTexture3DEXT(UInt32 framebuffer, System.Int32 attachment, System.Int32 textarget, UInt32 texture, Int32 level, Int32 zoffset);
        [Slot(764)]
        
        void glNamedFramebufferTextureEXT(UInt32 framebuffer, System.Int32 attachment, UInt32 texture, Int32 level);
        [Slot(765)]
        
        void glNamedFramebufferTextureFaceEXT(UInt32 framebuffer, System.Int32 attachment, UInt32 texture, Int32 level, System.Int32 face);
        [Slot(767)]
        
        void glNamedFramebufferTextureLayerEXT(UInt32 framebuffer, System.Int32 attachment, UInt32 texture, Int32 level, Int32 layer);
        [Slot(768)]
        
        void glNamedProgramLocalParameter4dEXT(UInt32 program, System.Int32 target, UInt32 index, Double x, Double y, Double z, Double w);
        [Slot(769)]
        
        unsafe void glNamedProgramLocalParameter4dvEXT(UInt32 program, System.Int32 target, UInt32 index, [CountAttribute(Count = 4)] Double* @params);
        [Slot(770)]
        
        void glNamedProgramLocalParameter4fEXT(UInt32 program, System.Int32 target, UInt32 index, Single x, Single y, Single z, Single w);
        [Slot(771)]
        
        unsafe void glNamedProgramLocalParameter4fvEXT(UInt32 program, System.Int32 target, UInt32 index, [CountAttribute(Count = 4)] Single* @params);
        [Slot(772)]
        
        void glNamedProgramLocalParameterI4iEXT(UInt32 program, System.Int32 target, UInt32 index, Int32 x, Int32 y, Int32 z, Int32 w);
        [Slot(773)]
        
        unsafe void glNamedProgramLocalParameterI4ivEXT(UInt32 program, System.Int32 target, UInt32 index, [CountAttribute(Count = 4)] Int32* @params);
        [Slot(774)]
        
        void glNamedProgramLocalParameterI4uiEXT(UInt32 program, System.Int32 target, UInt32 index, UInt32 x, UInt32 y, UInt32 z, UInt32 w);
        [Slot(775)]
        
        unsafe void glNamedProgramLocalParameterI4uivEXT(UInt32 program, System.Int32 target, UInt32 index, [CountAttribute(Count = 4)] UInt32* @params);
        [Slot(776)]
        
        unsafe void glNamedProgramLocalParameters4fvEXT(UInt32 program, System.Int32 target, UInt32 index, Int32 count, [CountAttribute(Parameter = "count*4")] Single* @params);
        [Slot(777)]
        
        unsafe void glNamedProgramLocalParametersI4ivEXT(UInt32 program, System.Int32 target, UInt32 index, Int32 count, [CountAttribute(Parameter = "count*4")] Int32* @params);
        [Slot(778)]
        
        unsafe void glNamedProgramLocalParametersI4uivEXT(UInt32 program, System.Int32 target, UInt32 index, Int32 count, [CountAttribute(Parameter = "count*4")] UInt32* @params);
        [Slot(779)]
        
        void glNamedProgramStringEXT(UInt32 program, System.Int32 target, System.Int32 format, Int32 len, [CountAttribute(Parameter = "len")] IntPtr @string);
        [Slot(781)]
        
        void glNamedRenderbufferStorageEXT(UInt32 renderbuffer, System.Int32 internalformat, Int32 width, Int32 height);
        [Slot(783)]
        
        void glNamedRenderbufferStorageMultisampleCoverageEXT(UInt32 renderbuffer, Int32 coverageSamples, Int32 colorSamples, System.Int32 internalformat, Int32 width, Int32 height);
        [Slot(784)]
        
        void glNamedRenderbufferStorageMultisampleEXT(UInt32 renderbuffer, Int32 samples, System.Int32 internalformat, Int32 width, Int32 height);
        [Slot(828)]
        
        void glPolygonOffsetClampEXT(Single factor, Single units, Single clamp);
        [Slot(831)]
        
        void glPopGroupMarkerEXT();
        [Slot(837)]
        
        void glProgramParameteriEXT(UInt32 program, System.Int32 pname, Int32 value);
        [Slot(840)]
        
        void glProgramUniform1dEXT(UInt32 program, Int32 location, Double x);
        [Slot(842)]
        
        unsafe void glProgramUniform1dvEXT(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count")] Double* value);
        [Slot(844)]
        
        void glProgramUniform1fEXT(UInt32 program, Int32 location, Single v0);
        [Slot(846)]
        
        unsafe void glProgramUniform1fvEXT(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count")] Single* value);
        [Slot(852)]
        
        void glProgramUniform1iEXT(UInt32 program, Int32 location, Int32 v0);
        [Slot(854)]
        
        unsafe void glProgramUniform1ivEXT(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count")] Int32* value);
        [Slot(860)]
        
        void glProgramUniform1uiEXT(UInt32 program, Int32 location, UInt32 v0);
        [Slot(862)]
        
        unsafe void glProgramUniform1uivEXT(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count")] UInt32* value);
        [Slot(864)]
        
        void glProgramUniform2dEXT(UInt32 program, Int32 location, Double x, Double y);
        [Slot(866)]
        
        unsafe void glProgramUniform2dvEXT(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*2")] Double* value);
        [Slot(868)]
        
        void glProgramUniform2fEXT(UInt32 program, Int32 location, Single v0, Single v1);
        [Slot(870)]
        
        unsafe void glProgramUniform2fvEXT(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*2")] Single* value);
        [Slot(876)]
        
        void glProgramUniform2iEXT(UInt32 program, Int32 location, Int32 v0, Int32 v1);
        [Slot(878)]
        
        unsafe void glProgramUniform2ivEXT(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*2")] Int32* value);
        [Slot(884)]
        
        void glProgramUniform2uiEXT(UInt32 program, Int32 location, UInt32 v0, UInt32 v1);
        [Slot(886)]
        
        unsafe void glProgramUniform2uivEXT(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*2")] UInt32* value);
        [Slot(888)]
        
        void glProgramUniform3dEXT(UInt32 program, Int32 location, Double x, Double y, Double z);
        [Slot(890)]
        
        unsafe void glProgramUniform3dvEXT(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*3")] Double* value);
        [Slot(892)]
        
        void glProgramUniform3fEXT(UInt32 program, Int32 location, Single v0, Single v1, Single v2);
        [Slot(894)]
        
        unsafe void glProgramUniform3fvEXT(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*3")] Single* value);
        [Slot(900)]
        
        void glProgramUniform3iEXT(UInt32 program, Int32 location, Int32 v0, Int32 v1, Int32 v2);
        [Slot(902)]
        
        unsafe void glProgramUniform3ivEXT(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*3")] Int32* value);
        [Slot(908)]
        
        void glProgramUniform3uiEXT(UInt32 program, Int32 location, UInt32 v0, UInt32 v1, UInt32 v2);
        [Slot(910)]
        
        unsafe void glProgramUniform3uivEXT(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*3")] UInt32* value);
        [Slot(912)]
        
        void glProgramUniform4dEXT(UInt32 program, Int32 location, Double x, Double y, Double z, Double w);
        [Slot(914)]
        
        unsafe void glProgramUniform4dvEXT(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*4")] Double* value);
        [Slot(916)]
        
        void glProgramUniform4fEXT(UInt32 program, Int32 location, Single v0, Single v1, Single v2, Single v3);
        [Slot(918)]
        
        unsafe void glProgramUniform4fvEXT(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*4")] Single* value);
        [Slot(924)]
        
        void glProgramUniform4iEXT(UInt32 program, Int32 location, Int32 v0, Int32 v1, Int32 v2, Int32 v3);
        [Slot(926)]
        
        unsafe void glProgramUniform4ivEXT(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*4")] Int32* value);
        [Slot(932)]
        
        void glProgramUniform4uiEXT(UInt32 program, Int32 location, UInt32 v0, UInt32 v1, UInt32 v2, UInt32 v3);
        [Slot(934)]
        
        unsafe void glProgramUniform4uivEXT(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*4")] UInt32* value);
        [Slot(940)]
        
        unsafe void glProgramUniformMatrix2dvEXT(UInt32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*4")] Double* value);
        [Slot(942)]
        
        unsafe void glProgramUniformMatrix2fvEXT(UInt32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*4")] Single* value);
        [Slot(944)]
        
        unsafe void glProgramUniformMatrix2x3dvEXT(UInt32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*6")] Double* value);
        [Slot(946)]
        
        unsafe void glProgramUniformMatrix2x3fvEXT(UInt32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*6")] Single* value);
        [Slot(948)]
        
        unsafe void glProgramUniformMatrix2x4dvEXT(UInt32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*8")] Double* value);
        [Slot(950)]
        
        unsafe void glProgramUniformMatrix2x4fvEXT(UInt32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*8")] Single* value);
        [Slot(952)]
        
        unsafe void glProgramUniformMatrix3dvEXT(UInt32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*9")] Double* value);
        [Slot(954)]
        
        unsafe void glProgramUniformMatrix3fvEXT(UInt32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*9")] Single* value);
        [Slot(956)]
        
        unsafe void glProgramUniformMatrix3x2dvEXT(UInt32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*6")] Double* value);
        [Slot(958)]
        
        unsafe void glProgramUniformMatrix3x2fvEXT(UInt32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*6")] Single* value);
        [Slot(960)]
        
        unsafe void glProgramUniformMatrix3x4dvEXT(UInt32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*12")] Double* value);
        [Slot(962)]
        
        unsafe void glProgramUniformMatrix3x4fvEXT(UInt32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*12")] Single* value);
        [Slot(964)]
        
        unsafe void glProgramUniformMatrix4dvEXT(UInt32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*16")] Double* value);
        [Slot(966)]
        
        unsafe void glProgramUniformMatrix4fvEXT(UInt32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*16")] Single* value);
        [Slot(968)]
        
        unsafe void glProgramUniformMatrix4x2dvEXT(UInt32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*8")] Double* value);
        [Slot(970)]
        
        unsafe void glProgramUniformMatrix4x2fvEXT(UInt32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*8")] Single* value);
        [Slot(972)]
        
        unsafe void glProgramUniformMatrix4x3dvEXT(UInt32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*12")] Double* value);
        [Slot(974)]
        
        unsafe void glProgramUniformMatrix4x3fvEXT(UInt32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*12")] Single* value);
        [Slot(978)]
        
        void glPushClientAttribDefaultEXT(System.Int32 mask);
        [Slot(981)]
        
        void glPushGroupMarkerEXT(Int32 length, IntPtr marker);
        [Slot(983)]
        
        void glRasterSamplesEXT(UInt32 samples, bool fixedsamplelocations);
        [Slot(1072)]
        
        void glTextureBufferEXT(UInt32 texture, System.Int32 target, System.Int32 internalformat, UInt32 buffer);
        [Slot(1074)]
        
        void glTextureBufferRangeEXT(UInt32 texture, System.Int32 target, System.Int32 internalformat, UInt32 buffer, IntPtr offset, IntPtr size);
        [Slot(1075)]
        
        void glTextureImage1DEXT(UInt32 texture, System.Int32 target, Int32 level, System.Int32 internalformat, Int32 width, Int32 border, System.Int32 format, System.Int32 type, [CountAttribute(Computed = "format,type,width")] IntPtr pixels);
        [Slot(1076)]
        
        void glTextureImage2DEXT(UInt32 texture, System.Int32 target, Int32 level, System.Int32 internalformat, Int32 width, Int32 height, Int32 border, System.Int32 format, System.Int32 type, [CountAttribute(Computed = "format,type,width,height")] IntPtr pixels);
        [Slot(1077)]
        
        void glTextureImage3DEXT(UInt32 texture, System.Int32 target, Int32 level, System.Int32 internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, System.Int32 format, System.Int32 type, [CountAttribute(Computed = "format,type,width,height,depth")] IntPtr pixels);
        [Slot(1078)]
        
        void glTexturePageCommitmentEXT(UInt32 texture, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, bool commit);
        [Slot(1080)]
        
        void glTextureParameterfEXT(UInt32 texture, System.Int32 target, System.Int32 pname, Single param);
        [Slot(1082)]
        
        unsafe void glTextureParameterfvEXT(UInt32 texture, System.Int32 target, System.Int32 pname, [CountAttribute(Computed = "pname")] Single* @params);
        [Slot(1084)]
        
        void glTextureParameteriEXT(UInt32 texture, System.Int32 target, System.Int32 pname, Int32 param);
        [Slot(1086)]
        
        unsafe void glTextureParameterIivEXT(UInt32 texture, System.Int32 target, System.Int32 pname, [CountAttribute(Computed = "pname")] Int32* @params);
        [Slot(1088)]
        
        unsafe void glTextureParameterIuivEXT(UInt32 texture, System.Int32 target, System.Int32 pname, [CountAttribute(Computed = "pname")] UInt32* @params);
        [Slot(1090)]
        
        unsafe void glTextureParameterivEXT(UInt32 texture, System.Int32 target, System.Int32 pname, [CountAttribute(Computed = "pname")] Int32* @params);
        [Slot(1091)]
        
        void glTextureRenderbufferEXT(UInt32 texture, System.Int32 target, UInt32 renderbuffer);
        [Slot(1093)]
        
        void glTextureStorage1DEXT(UInt32 texture, System.Int32 target, Int32 levels, System.Int32 internalformat, Int32 width);
        [Slot(1095)]
        
        void glTextureStorage2DEXT(UInt32 texture, System.Int32 target, Int32 levels, System.Int32 internalformat, Int32 width, Int32 height);
        [Slot(1097)]
        
        void glTextureStorage2DMultisampleEXT(UInt32 texture, System.Int32 target, Int32 samples, System.Int32 internalformat, Int32 width, Int32 height, bool fixedsamplelocations);
        [Slot(1099)]
        
        void glTextureStorage3DEXT(UInt32 texture, System.Int32 target, Int32 levels, System.Int32 internalformat, Int32 width, Int32 height, Int32 depth);
        [Slot(1101)]
        
        void glTextureStorage3DMultisampleEXT(UInt32 texture, System.Int32 target, Int32 samples, System.Int32 internalformat, Int32 width, Int32 height, Int32 depth, bool fixedsamplelocations);
        [Slot(1103)]
        
        void glTextureSubImage1DEXT(UInt32 texture, System.Int32 target, Int32 level, Int32 xoffset, Int32 width, System.Int32 format, System.Int32 type, [CountAttribute(Computed = "format,type,width")] IntPtr pixels);
        [Slot(1105)]
        
        void glTextureSubImage2DEXT(UInt32 texture, System.Int32 target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, System.Int32 format, System.Int32 type, [CountAttribute(Computed = "format,type,width,height")] IntPtr pixels);
        [Slot(1107)]
        
        void glTextureSubImage3DEXT(UInt32 texture, System.Int32 target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, System.Int32 format, System.Int32 type, [CountAttribute(Computed = "format,type,width,height,depth")] IntPtr pixels);
        [Slot(1205)]
        
        byte glUnmapNamedBufferEXT(UInt32 buffer);
        [Slot(1208)]
        
        void glUseProgramStagesEXT(UInt32 pipeline, System.Int32 stages, UInt32 program);
        [Slot(1209)]
        
        void glUseShaderProgramEXT(System.Int32 type, UInt32 program);
        [Slot(1212)]
        
        void glValidateProgramPipelineEXT(UInt32 pipeline);
        [Slot(1218)]
        
        void glVertexArrayBindVertexBufferEXT(UInt32 vaobj, UInt32 bindingindex, UInt32 buffer, IntPtr offset, Int32 stride);
        [Slot(1219)]
        
        void glVertexArrayColorOffsetEXT(UInt32 vaobj, UInt32 buffer, Int32 size, System.Int32 type, Int32 stride, IntPtr offset);
        [Slot(1220)]
        
        void glVertexArrayEdgeFlagOffsetEXT(UInt32 vaobj, UInt32 buffer, Int32 stride, IntPtr offset);
        [Slot(1222)]
        
        void glVertexArrayFogCoordOffsetEXT(UInt32 vaobj, UInt32 buffer, System.Int32 type, Int32 stride, IntPtr offset);
        [Slot(1223)]
        
        void glVertexArrayIndexOffsetEXT(UInt32 vaobj, UInt32 buffer, System.Int32 type, Int32 stride, IntPtr offset);
        [Slot(1224)]
        
        void glVertexArrayMultiTexCoordOffsetEXT(UInt32 vaobj, UInt32 buffer, System.Int32 texunit, Int32 size, System.Int32 type, Int32 stride, IntPtr offset);
        [Slot(1225)]
        
        void glVertexArrayNormalOffsetEXT(UInt32 vaobj, UInt32 buffer, System.Int32 type, Int32 stride, IntPtr offset);
        [Slot(1226)]
        
        void glVertexArraySecondaryColorOffsetEXT(UInt32 vaobj, UInt32 buffer, Int32 size, System.Int32 type, Int32 stride, IntPtr offset);
        [Slot(1227)]
        
        void glVertexArrayTexCoordOffsetEXT(UInt32 vaobj, UInt32 buffer, Int32 size, System.Int32 type, Int32 stride, IntPtr offset);
        [Slot(1228)]
        
        void glVertexArrayVertexAttribBindingEXT(UInt32 vaobj, UInt32 attribindex, UInt32 bindingindex);
        [Slot(1229)]
        
        void glVertexArrayVertexAttribDivisorEXT(UInt32 vaobj, UInt32 index, UInt32 divisor);
        [Slot(1230)]
        
        void glVertexArrayVertexAttribFormatEXT(UInt32 vaobj, UInt32 attribindex, Int32 size, System.Int32 type, bool normalized, UInt32 relativeoffset);
        [Slot(1231)]
        
        void glVertexArrayVertexAttribIFormatEXT(UInt32 vaobj, UInt32 attribindex, Int32 size, System.Int32 type, UInt32 relativeoffset);
        [Slot(1232)]
        
        void glVertexArrayVertexAttribIOffsetEXT(UInt32 vaobj, UInt32 buffer, UInt32 index, Int32 size, System.Int32 type, Int32 stride, IntPtr offset);
        [Slot(1233)]
        
        void glVertexArrayVertexAttribLFormatEXT(UInt32 vaobj, UInt32 attribindex, Int32 size, System.Int32 type, UInt32 relativeoffset);
        [Slot(1234)]
        
        void glVertexArrayVertexAttribLOffsetEXT(UInt32 vaobj, UInt32 buffer, UInt32 index, Int32 size, System.Int32 type, Int32 stride, IntPtr offset);
        [Slot(1235)]
        
        void glVertexArrayVertexAttribOffsetEXT(UInt32 vaobj, UInt32 buffer, UInt32 index, Int32 size, System.Int32 type, bool normalized, Int32 stride, IntPtr offset);
        [Slot(1236)]
        
        void glVertexArrayVertexBindingDivisorEXT(UInt32 vaobj, UInt32 bindingindex, UInt32 divisor);
        [Slot(1239)]
        
        void glVertexArrayVertexOffsetEXT(UInt32 vaobj, UInt32 buffer, Int32 size, System.Int32 type, Int32 stride, IntPtr offset);
        [Slot(1359)]
        
        unsafe void glWindowRectanglesEXT(System.Int32 mode, Int32 count, [CountAttribute(Computed = "count")] Int32* box);
        [Slot(9)]
        
        void glBeginPerfQueryINTEL(UInt32 queryHandle);
        [Slot(168)]
        
        unsafe void glCreatePerfQueryINTEL(UInt32 queryId, [OutAttribute] UInt32* queryHandle);
        [Slot(199)]
        
        void glDeletePerfQueryINTEL(UInt32 queryHandle);
        [Slot(272)]
        
        void glEndPerfQueryINTEL(UInt32 queryHandle);
        [Slot(359)]
        
        unsafe void glGetFirstPerfQueryIdINTEL([OutAttribute] UInt32* queryId);
        [Slot(431)]
        
        unsafe void glGetNextPerfQueryIdINTEL(UInt32 queryId, [OutAttribute] UInt32* nextQueryId);
        [Slot(485)]
        
        unsafe void glGetPerfCounterInfoINTEL(UInt32 queryId, UInt32 counterId, UInt32 counterNameLength, [OutAttribute, CountAttribute(Parameter = "counterNameLength")] IntPtr counterName, UInt32 counterDescLength, [OutAttribute, CountAttribute(Parameter = "counterDescLength")] IntPtr counterDesc, [OutAttribute] UInt32* counterOffset, [OutAttribute] UInt32* counterDataSize, [OutAttribute] UInt32* counterTypeEnum, [OutAttribute] UInt32* counterDataTypeEnum, [OutAttribute] UInt64* rawCounterMaxValue);
        [Slot(492)]
        
        unsafe void glGetPerfQueryDataINTEL(UInt32 queryHandle, UInt32 flags, Int32 dataSize, [OutAttribute] IntPtr data, [OutAttribute] UInt32* bytesWritten);
        [Slot(493)]
        
        unsafe void glGetPerfQueryIdByNameINTEL(IntPtr queryName, [OutAttribute] UInt32* queryId);
        [Slot(494)]
        
        unsafe void glGetPerfQueryInfoINTEL(UInt32 queryId, UInt32 queryNameLength, [OutAttribute, CountAttribute(Parameter = "queryNameLength")] IntPtr queryName, [OutAttribute] UInt32* dataSize, [OutAttribute] UInt32* noCounters, [OutAttribute] UInt32* noInstances, [OutAttribute] UInt32* capsMask);
        [Slot(37)]
        
        void glBlendBarrierKHR();
        [Slot(186)]
        
        void glDebugMessageCallbackKHR(DebugProcKhr callback, IntPtr userParam);
        [Slot(189)]
        
        unsafe void glDebugMessageControlKHR(System.Int32 source, System.Int32 type, System.Int32 severity, Int32 count, UInt32* ids, bool enabled);
        [Slot(192)]
        
        void glDebugMessageInsertKHR(System.Int32 source, System.Int32 type, UInt32 id, System.Int32 severity, Int32 length, IntPtr buf);
        [Slot(353)]
        
        unsafe Int32 glGetDebugMessageLogKHR(UInt32 count, Int32 bufSize, [OutAttribute, CountAttribute(Parameter = "count")] System.Int32* sources, [OutAttribute, CountAttribute(Parameter = "count")] System.Int32* types, [OutAttribute, CountAttribute(Parameter = "count")] UInt32* ids, [OutAttribute, CountAttribute(Parameter = "count")] System.Int32* severities, [OutAttribute, CountAttribute(Parameter = "count")] Int32* lengths, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr messageLog);
        [Slot(371)]
        
        System.Int32 glGetGraphicsResetStatusKHR();
        [Slot(458)]
        
        unsafe void glGetnUniformfvKHR(UInt32 program, Int32 location, Int32 bufSize, [OutAttribute] Single* @params);
        [Slot(462)]
        
        unsafe void glGetnUniformivKHR(UInt32 program, Int32 location, Int32 bufSize, [OutAttribute] Int32* @params);
        [Slot(466)]
        
        unsafe void glGetnUniformuivKHR(UInt32 program, Int32 location, Int32 bufSize, [OutAttribute] UInt32* @params);
        [Slot(469)]
        
        unsafe void glGetObjectLabelKHR(System.Int32 identifier, UInt32 name, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr label);
        [Slot(471)]
        
        unsafe void glGetObjectPtrLabelKHR(IntPtr ptr, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr label);
        [Slot(498)]
        
        void glGetPointervKHR(System.Int32 pname, [OutAttribute] IntPtr @params);
        [Slot(690)]
        
        void glMaxShaderCompilerThreadsKHR(UInt32 count);
        [Slot(790)]
        
        void glObjectLabelKHR(System.Int32 identifier, UInt32 name, Int32 length, IntPtr label);
        [Slot(792)]
        
        void glObjectPtrLabelKHR(IntPtr ptr, Int32 length, IntPtr label);
        [Slot(830)]
        
        void glPopDebugGroupKHR();
        [Slot(980)]
        
        void glPushDebugGroupKHR(System.Int32 source, UInt32 id, Int32 length, IntPtr message);
        [Slot(987)]
        
        void glReadnPixelsKHR(Int32 x, Int32 y, Int32 width, Int32 height, System.Int32 format, System.Int32 type, Int32 bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr data);
        [Slot(7)]
        
        void glBeginConditionalRenderNV(UInt32 id, System.Int32 mode);
        [Slot(38)]
        
        void glBlendBarrierNV();
        [Slot(52)]
        
        void glBlendParameteriNV(System.Int32 pname, Int32 value);
        [Slot(55)]
        
        void glBufferAddressRangeNV(System.Int32 pname, UInt32 index, UInt64 address, IntPtr length);
        [Slot(60)]
        
        void glCallCommandListNV(UInt32 list);
        [Slot(89)]
        
        void glColorFormatNV(Int32 size, System.Int32 type, Int32 stride);
        [Slot(100)]
        
        void glCommandListSegmentsNV(UInt32 list, UInt32 segments);
        [Slot(101)]
        
        void glCompileCommandListNV(UInt32 list);
        [Slot(125)]
        
        void glConservativeRasterParameterfNV(System.Int32 pname, Single value);
        [Slot(126)]
        
        void glConservativeRasterParameteriNV(System.Int32 pname, Int32 param);
        [Slot(145)]
        
        void glCopyPathNV(UInt32 resultPath, UInt32 srcPath);
        [Slot(159)]
        
        void glCoverageModulationNV(System.Int32 components);
        [Slot(160)]
        
        unsafe void glCoverageModulationTableNV(Int32 n, [CountAttribute(Parameter = "n")] Single* v);
        [Slot(161)]
        
        unsafe void glCoverFillPathInstancedNV(Int32 numPaths, System.Int32 pathNameType, [CountAttribute(Computed = "numPaths,pathNameType,paths")] IntPtr paths, UInt32 pathBase, System.Int32 coverMode, System.Int32 transformType, [CountAttribute(Computed = "numPaths,transformType")] Single* transformValues);
        [Slot(162)]
        
        void glCoverFillPathNV(UInt32 path, System.Int32 coverMode);
        [Slot(163)]
        
        unsafe void glCoverStrokePathInstancedNV(Int32 numPaths, System.Int32 pathNameType, [CountAttribute(Computed = "numPaths,pathNameType,paths")] IntPtr paths, UInt32 pathBase, System.Int32 coverMode, System.Int32 transformType, [CountAttribute(Computed = "numPaths,transformType")] Single* transformValues);
        [Slot(164)]
        
        void glCoverStrokePathNV(UInt32 path, System.Int32 coverMode);
        [Slot(166)]
        
        unsafe void glCreateCommandListsNV(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] UInt32* lists);
        [Slot(178)]
        
        unsafe void glCreateStatesNV(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] UInt32* states);
        [Slot(194)]
        
        unsafe void glDeleteCommandListsNV(Int32 n, [CountAttribute(Parameter = "n")] UInt32* lists);
        [Slot(197)]
        
        void glDeletePathsNV(UInt32 path, Int32 range);
        [Slot(207)]
        
        unsafe void glDeleteStatesNV(Int32 n, [CountAttribute(Parameter = "n")] UInt32* states);
        [Slot(239)]
        
        unsafe void glDrawCommandsAddressNV(System.Int32 primitiveMode, UInt64* indirects, Int32* sizes, UInt32 count);
        [Slot(240)]
        
        unsafe void glDrawCommandsNV(System.Int32 primitiveMode, UInt32 buffer, IntPtr* indirects, Int32* sizes, UInt32 count);
        [Slot(241)]
        
        unsafe void glDrawCommandsStatesAddressNV(UInt64* indirects, Int32* sizes, UInt32* states, UInt32* fbos, UInt32 count);
        [Slot(242)]
        
        unsafe void glDrawCommandsStatesNV(UInt32 buffer, IntPtr* indirects, Int32* sizes, UInt32* states, UInt32* fbos, UInt32 count);
        [Slot(258)]
        
        void glDrawVkImageNV(UInt64 vkImage, UInt32 sampler, Single x0, Single y0, Single x1, Single y1, Single z, Single s0, Single t0, Single s1, Single t1);
        [Slot(259)]
        
        void glEdgeFlagFormatNV(Int32 stride);
        [Slot(270)]
        
        void glEndConditionalRenderNV();
        [Slot(283)]
        
        void glFogCoordFormatNV(System.Int32 type, Int32 stride);
        [Slot(284)]
        
        void glFragmentCoverageColorNV(UInt32 color);
        [Slot(291)]
        
        unsafe void glFramebufferSampleLocationsfvNV(System.Int32 target, UInt32 start, Int32 count, Single* v);
        [Slot(308)]
        
        Int32 glGenPathsNV(Int32 range);
        [Slot(335)]
        
        unsafe void glGetBufferParameterui64vNV(System.Int32 target, System.Int32 pname, [OutAttribute, CountAttribute(Computed = "pname")] UInt64* @params);
        [Slot(341)]
        
        Int32 glGetCommandHeaderNV(System.Int32 tokenID, UInt32 size);
        [Slot(350)]
        
        unsafe void glGetCoverageModulationTableNV(Int32 bufsize, [OutAttribute] Single* v);
        [Slot(376)]
        
        Int64 glGetImageHandleNV(UInt32 texture, Int32 level, bool layered, Int32 layer, System.Int32 format);
        [Slot(381)]
        
        unsafe void glGetIntegerui64i_vNV(System.Int32 value, UInt32 index, [OutAttribute, CountAttribute(Computed = "value")] UInt64* result);
        [Slot(382)]
        
        unsafe void glGetIntegerui64vNV(System.Int32 value, [OutAttribute, CountAttribute(Computed = "value")] UInt64* result);
        [Slot(386)]
        
        unsafe void glGetInternalformatSampleivNV(System.Int32 target, System.Int32 internalformat, Int32 samples, System.Int32 pname, Int32 bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] Int32* @params);
        [Slot(406)]
        
        unsafe void glGetNamedBufferParameterui64vNV(UInt32 buffer, System.Int32 pname, [OutAttribute, CountAttribute(Computed = "pname")] UInt64* @params);
        [Slot(472)]
        
        unsafe void glGetPathColorGenfvNV(System.Int32 color, System.Int32 pname, [OutAttribute, CountAttribute(Computed = "pname")] Single* value);
        [Slot(473)]
        
        unsafe void glGetPathColorGenivNV(System.Int32 color, System.Int32 pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* value);
        [Slot(474)]
        
        unsafe void glGetPathCommandsNV(UInt32 path, [OutAttribute, CountAttribute(Computed = "path")] Byte* commands);
        [Slot(475)]
        
        unsafe void glGetPathCoordsNV(UInt32 path, [OutAttribute, CountAttribute(Computed = "path")] Single* coords);
        [Slot(476)]
        
        unsafe void glGetPathDashArrayNV(UInt32 path, [OutAttribute, CountAttribute(Computed = "path")] Single* dashArray);
        [Slot(477)]
        
        Single glGetPathLengthNV(UInt32 path, Int32 startSegment, Int32 numSegments);
        [Slot(478)]
        
        unsafe void glGetPathMetricRangeNV(System.Int32 metricQueryMask, UInt32 firstPathName, Int32 numPaths, Int32 stride, [OutAttribute, CountAttribute(Computed = "metricQueryMask,numPaths,stride")] Single* metrics);
        [Slot(479)]
        
        unsafe void glGetPathMetricsNV(System.Int32 metricQueryMask, Int32 numPaths, System.Int32 pathNameType, [CountAttribute(Computed = "numPaths,pathNameType,paths")] IntPtr paths, UInt32 pathBase, Int32 stride, [OutAttribute, CountAttribute(Computed = "metricQueryMask,numPaths,stride")] Single* metrics);
        [Slot(480)]
        
        unsafe void glGetPathParameterfvNV(UInt32 path, System.Int32 pname, [OutAttribute, CountAttribute(Count = 4)] Single* value);
        [Slot(481)]
        
        unsafe void glGetPathParameterivNV(UInt32 path, System.Int32 pname, [OutAttribute, CountAttribute(Count = 4)] Int32* value);
        [Slot(482)]
        
        unsafe void glGetPathSpacingNV(System.Int32 pathListMode, Int32 numPaths, System.Int32 pathNameType, [CountAttribute(Computed = "numPaths,pathNameType,paths")] IntPtr paths, UInt32 pathBase, Single advanceScale, Single kerningScale, System.Int32 transformType, [OutAttribute, CountAttribute(Computed = "pathListMode,numPaths")] Single* returnedSpacing);
        [Slot(483)]
        
        unsafe void glGetPathTexGenfvNV(System.Int32 texCoordSet, System.Int32 pname, [OutAttribute, CountAttribute(Computed = "pname")] Single* value);
        [Slot(484)]
        
        unsafe void glGetPathTexGenivNV(System.Int32 texCoordSet, System.Int32 pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* value);
        [Slot(507)]
        
        unsafe void glGetProgramResourcefvNV(UInt32 program, System.Int32 programInterface, UInt32 index, Int32 propCount, System.Int32* props, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] Single* @params);
        [Slot(534)]
        
        Int16 glGetStageIndexNV(System.Int32 shadertype);
        [Slot(548)]
        
        Int64 glGetTextureHandleNV(UInt32 texture);
        [Slot(564)]
        
        Int64 glGetTextureSamplerHandleNV(UInt32 texture, UInt32 sampler);
        [Slot(574)]
        
        unsafe void glGetUniformi64vNV(UInt32 program, Int32 location, [OutAttribute, CountAttribute(Computed = "program,location")] Int64* @params);
        [Slot(580)]
        
        unsafe void glGetUniformui64vNV(UInt32 program, Int32 location, [OutAttribute, CountAttribute(Computed = "program,location")] UInt64* @params);
        [Slot(595)]
        
        unsafe void glGetVertexAttribLi64vNV(UInt32 index, System.Int32 pname, [OutAttribute, CountAttribute(Computed = "pname")] Int64* @params);
        [Slot(597)]
        
        unsafe void glGetVertexAttribLui64vNV(UInt32 index, System.Int32 pname, [OutAttribute, CountAttribute(Computed = "pname")] UInt64* @params);
        [Slot(599)]
        
        IntPtr glGetVkProcAddrNV([CountAttribute(Computed = "name")] IntPtr name);
        [Slot(602)]
        
        void glIndexFormatNV(System.Int32 type, Int32 stride);
        [Slot(604)]
        
        void glInterpolatePathsNV(UInt32 resultPath, UInt32 pathA, UInt32 pathB, Single weight);
        [Slot(614)]
        
        byte glIsBufferResidentNV(System.Int32 target);
        [Slot(615)]
        
        byte glIsCommandListNV(UInt32 list);
        [Slot(621)]
        
        byte glIsImageHandleResidentNV(UInt64 handle);
        [Slot(622)]
        
        byte glIsNamedBufferResidentNV(UInt32 buffer);
        [Slot(624)]
        
        byte glIsPathNV(UInt32 path);
        [Slot(625)]
        
        byte glIsPointInFillPathNV(UInt32 path, UInt32 mask, Single x, Single y);
        [Slot(626)]
        
        byte glIsPointInStrokePathNV(UInt32 path, Single x, Single y);
        [Slot(634)]
        
        byte glIsStateNV(UInt32 state);
        [Slot(638)]
        
        byte glIsTextureHandleResidentNV(UInt64 handle);
        [Slot(644)]
        
        unsafe void glListDrawCommandsStatesClientNV(UInt32 list, UInt32 segment, IntPtr indirects, Int32* sizes, UInt32* states, UInt32* fbos, UInt32 count);
        [Slot(646)]
        
        void glMakeBufferNonResidentNV(System.Int32 target);
        [Slot(647)]
        
        void glMakeBufferResidentNV(System.Int32 target, System.Int32 access);
        [Slot(649)]
        
        void glMakeImageHandleNonResidentNV(UInt64 handle);
        [Slot(651)]
        
        void glMakeImageHandleResidentNV(UInt64 handle, System.Int32 access);
        [Slot(652)]
        
        void glMakeNamedBufferNonResidentNV(UInt32 buffer);
        [Slot(653)]
        
        void glMakeNamedBufferResidentNV(UInt32 buffer, System.Int32 access);
        [Slot(655)]
        
        void glMakeTextureHandleNonResidentNV(UInt64 handle);
        [Slot(657)]
        
        void glMakeTextureHandleResidentNV(UInt64 handle);
        [Slot(665)]
        
        unsafe void glMatrixLoad3x2fNV(System.Int32 matrixMode, Single* m);
        [Slot(666)]
        
        unsafe void glMatrixLoad3x3fNV(System.Int32 matrixMode, Single* m);
        [Slot(670)]
        
        unsafe void glMatrixLoadTranspose3x3fNV(System.Int32 matrixMode, Single* m);
        [Slot(673)]
        
        unsafe void glMatrixMult3x2fNV(System.Int32 matrixMode, Single* m);
        [Slot(674)]
        
        unsafe void glMatrixMult3x3fNV(System.Int32 matrixMode, Single* m);
        [Slot(677)]
        
        unsafe void glMatrixMultTranspose3x3fNV(System.Int32 matrixMode, Single* m);
        [Slot(698)]
        
        void glMultiDrawArraysIndirectBindlessCountNV(System.Int32 mode, IntPtr indirect, Int32 drawCount, Int32 maxDrawCount, Int32 stride, Int32 vertexBufferCount);
        [Slot(699)]
        
        void glMultiDrawArraysIndirectBindlessNV(System.Int32 mode, IntPtr indirect, Int32 drawCount, Int32 stride, Int32 vertexBufferCount);
        [Slot(705)]
        
        void glMultiDrawElementsIndirectBindlessCountNV(System.Int32 mode, System.Int32 type, IntPtr indirect, Int32 drawCount, Int32 maxDrawCount, Int32 stride, Int32 vertexBufferCount);
        [Slot(706)]
        
        void glMultiDrawElementsIndirectBindlessNV(System.Int32 mode, System.Int32 type, IntPtr indirect, Int32 drawCount, Int32 stride, Int32 vertexBufferCount);
        [Slot(759)]
        
        unsafe void glNamedFramebufferSampleLocationsfvNV(UInt32 framebuffer, UInt32 start, Int32 count, Single* v);
        [Slot(786)]
        
        void glNormalFormatNV(System.Int32 type, Int32 stride);
        [Slot(795)]
        
        unsafe void glPathColorGenNV(System.Int32 color, System.Int32 genMode, System.Int32 colorFormat, [CountAttribute(Computed = "genMode,colorFormat")] Single* coeffs);
        [Slot(796)]
        
        unsafe void glPathCommandsNV(UInt32 path, Int32 numCommands, [CountAttribute(Parameter = "numCommands")] Byte* commands, Int32 numCoords, System.Int32 coordType, [CountAttribute(Computed = "numCoords,coordType")] IntPtr coords);
        [Slot(797)]
        
        void glPathCoordsNV(UInt32 path, Int32 numCoords, System.Int32 coordType, [CountAttribute(Computed = "numCoords,coordType")] IntPtr coords);
        [Slot(798)]
        
        void glPathCoverDepthFuncNV(System.Int32 func);
        [Slot(799)]
        
        unsafe void glPathDashArrayNV(UInt32 path, Int32 dashCount, [CountAttribute(Parameter = "dashCount")] Single* dashArray);
        [Slot(800)]
        
        void glPathFogGenNV(System.Int32 genMode);
        [Slot(801)]
        
        System.Int32 glPathGlyphIndexArrayNV(UInt32 firstPathName, System.Int32 fontTarget, IntPtr fontName, System.Int32 fontStyle, UInt32 firstGlyphIndex, Int32 numGlyphs, UInt32 pathParameterTemplate, Single emScale);
        [Slot(802)]
        
        System.Int32 glPathGlyphIndexRangeNV(System.Int32 fontTarget, IntPtr fontName, System.Int32 fontStyle, UInt32 pathParameterTemplate, Single emScale, UInt32 baseAndCount);
        [Slot(803)]
        
        void glPathGlyphRangeNV(UInt32 firstPathName, System.Int32 fontTarget, [CountAttribute(Computed = "fontTarget,fontName")] IntPtr fontName, System.Int32 fontStyle, UInt32 firstGlyph, Int32 numGlyphs, System.Int32 handleMissingGlyphs, UInt32 pathParameterTemplate, Single emScale);
        [Slot(804)]
        
        void glPathGlyphsNV(UInt32 firstPathName, System.Int32 fontTarget, [CountAttribute(Computed = "fontTarget,fontName")] IntPtr fontName, System.Int32 fontStyle, Int32 numGlyphs, System.Int32 type, [CountAttribute(Computed = "numGlyphs,type,charcodes")] IntPtr charcodes, System.Int32 handleMissingGlyphs, UInt32 pathParameterTemplate, Single emScale);
        [Slot(805)]
        
        System.Int32 glPathMemoryGlyphIndexArrayNV(UInt32 firstPathName, System.Int32 fontTarget, IntPtr fontSize, IntPtr fontData, Int32 faceIndex, UInt32 firstGlyphIndex, Int32 numGlyphs, UInt32 pathParameterTemplate, Single emScale);
        [Slot(806)]
        
        void glPathParameterfNV(UInt32 path, System.Int32 pname, Single value);
        [Slot(807)]
        
        unsafe void glPathParameterfvNV(UInt32 path, System.Int32 pname, [CountAttribute(Computed = "pname")] Single* value);
        [Slot(808)]
        
        void glPathParameteriNV(UInt32 path, System.Int32 pname, Int32 value);
        [Slot(809)]
        
        unsafe void glPathParameterivNV(UInt32 path, System.Int32 pname, [CountAttribute(Computed = "pname")] Int32* value);
        [Slot(810)]
        
        void glPathStencilDepthOffsetNV(Single factor, Single units);
        [Slot(811)]
        
        void glPathStencilFuncNV(System.Int32 func, Int32 @ref, UInt32 mask);
        [Slot(812)]
        
        void glPathStringNV(UInt32 path, System.Int32 format, Int32 length, [CountAttribute(Parameter = "length")] IntPtr pathString);
        [Slot(813)]
        
        unsafe void glPathSubCommandsNV(UInt32 path, Int32 commandStart, Int32 commandsToDelete, Int32 numCommands, [CountAttribute(Parameter = "numCommands")] Byte* commands, Int32 numCoords, System.Int32 coordType, [CountAttribute(Computed = "numCoords,coordType")] IntPtr coords);
        [Slot(814)]
        
        void glPathSubCoordsNV(UInt32 path, Int32 coordStart, Int32 numCoords, System.Int32 coordType, [CountAttribute(Computed = "numCoords,coordType")] IntPtr coords);
        [Slot(815)]
        
        unsafe void glPathTexGenNV(System.Int32 texCoordSet, System.Int32 genMode, Int32 components, [CountAttribute(Computed = "genMode,components")] Single* coeffs);
        [Slot(819)]
        
        unsafe byte glPointAlongPathNV(UInt32 path, Int32 startSegment, Int32 numSegments, Single distance, [OutAttribute, CountAttribute(Count = 1)] Single* x, [OutAttribute, CountAttribute(Count = 1)] Single* y, [OutAttribute, CountAttribute(Count = 1)] Single* tangentX, [OutAttribute, CountAttribute(Count = 1)] Single* tangentY);
        [Slot(838)]
        
        unsafe void glProgramPathFragmentInputGenNV(UInt32 program, Int32 location, System.Int32 genMode, Int32 components, Single* coeffs);
        [Slot(849)]
        
        void glProgramUniform1i64NV(UInt32 program, Int32 location, Int64 x);
        [Slot(851)]
        
        unsafe void glProgramUniform1i64vNV(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count")] Int64* value);
        [Slot(857)]
        
        void glProgramUniform1ui64NV(UInt32 program, Int32 location, UInt64 x);
        [Slot(859)]
        
        unsafe void glProgramUniform1ui64vNV(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count")] UInt64* value);
        [Slot(873)]
        
        void glProgramUniform2i64NV(UInt32 program, Int32 location, Int64 x, Int64 y);
        [Slot(875)]
        
        unsafe void glProgramUniform2i64vNV(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*2")] Int64* value);
        [Slot(881)]
        
        void glProgramUniform2ui64NV(UInt32 program, Int32 location, UInt64 x, UInt64 y);
        [Slot(883)]
        
        unsafe void glProgramUniform2ui64vNV(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*2")] UInt64* value);
        [Slot(897)]
        
        void glProgramUniform3i64NV(UInt32 program, Int32 location, Int64 x, Int64 y, Int64 z);
        [Slot(899)]
        
        unsafe void glProgramUniform3i64vNV(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*3")] Int64* value);
        [Slot(905)]
        
        void glProgramUniform3ui64NV(UInt32 program, Int32 location, UInt64 x, UInt64 y, UInt64 z);
        [Slot(907)]
        
        unsafe void glProgramUniform3ui64vNV(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*3")] UInt64* value);
        [Slot(921)]
        
        void glProgramUniform4i64NV(UInt32 program, Int32 location, Int64 x, Int64 y, Int64 z, Int64 w);
        [Slot(923)]
        
        unsafe void glProgramUniform4i64vNV(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*4")] Int64* value);
        [Slot(929)]
        
        void glProgramUniform4ui64NV(UInt32 program, Int32 location, UInt64 x, UInt64 y, UInt64 z, UInt64 w);
        [Slot(931)]
        
        unsafe void glProgramUniform4ui64vNV(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*4")] UInt64* value);
        [Slot(936)]
        
        void glProgramUniformHandleui64NV(UInt32 program, Int32 location, UInt64 value);
        [Slot(938)]
        
        unsafe void glProgramUniformHandleui64vNV(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count")] UInt64* values);
        [Slot(975)]
        
        void glProgramUniformui64NV(UInt32 program, Int32 location, UInt64 value);
        [Slot(976)]
        
        unsafe void glProgramUniformui64vNV(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count")] UInt64* value);
        [Slot(992)]
        
        void glRenderbufferStorageMultisampleCoverageNV(System.Int32 target, Int32 coverageSamples, Int32 colorSamples, System.Int32 internalformat, Int32 width, Int32 height);
        [Slot(995)]
        
        void glResolveDepthValuesNV();
        [Slot(1009)]
        
        void glSecondaryColorFormatNV(Int32 size, System.Int32 type, Int32 stride);
        [Slot(1017)]
        
        void glSignalVkFenceNV(UInt64 vkFence);
        [Slot(1018)]
        
        void glSignalVkSemaphoreNV(UInt64 vkSemaphore);
        [Slot(1021)]
        
        void glStateCaptureNV(UInt32 state, System.Int32 mode);
        [Slot(1022)]
        
        unsafe void glStencilFillPathInstancedNV(Int32 numPaths, System.Int32 pathNameType, [CountAttribute(Computed = "numPaths,pathNameType,paths")] IntPtr paths, UInt32 pathBase, System.Int32 fillMode, UInt32 mask, System.Int32 transformType, [CountAttribute(Computed = "numPaths,transformType")] Single* transformValues);
        [Slot(1023)]
        
        void glStencilFillPathNV(UInt32 path, System.Int32 fillMode, UInt32 mask);
        [Slot(1030)]
        
        unsafe void glStencilStrokePathInstancedNV(Int32 numPaths, System.Int32 pathNameType, [CountAttribute(Computed = "numPaths,pathNameType,paths")] IntPtr paths, UInt32 pathBase, Int32 reference, UInt32 mask, System.Int32 transformType, [CountAttribute(Computed = "numPaths,transformType")] Single* transformValues);
        [Slot(1031)]
        
        void glStencilStrokePathNV(UInt32 path, Int32 reference, UInt32 mask);
        [Slot(1032)]
        
        unsafe void glStencilThenCoverFillPathInstancedNV(Int32 numPaths, System.Int32 pathNameType, IntPtr paths, UInt32 pathBase, System.Int32 fillMode, UInt32 mask, System.Int32 coverMode, System.Int32 transformType, Single* transformValues);
        [Slot(1033)]
        
        void glStencilThenCoverFillPathNV(UInt32 path, System.Int32 fillMode, UInt32 mask, System.Int32 coverMode);
        [Slot(1034)]
        
        unsafe void glStencilThenCoverStrokePathInstancedNV(Int32 numPaths, System.Int32 pathNameType, IntPtr paths, UInt32 pathBase, Int32 reference, UInt32 mask, System.Int32 coverMode, System.Int32 transformType, Single* transformValues);
        [Slot(1035)]
        
        void glStencilThenCoverStrokePathNV(UInt32 path, Int32 reference, UInt32 mask, System.Int32 coverMode);
        [Slot(1036)]
        
        void glSubpixelPrecisionBiasNV(UInt32 xbits, UInt32 ybits);
        [Slot(1040)]
        
        void glTexCoordFormatNV(Int32 size, System.Int32 type, Int32 stride);
        [Slot(1070)]
        
        void glTextureBarrierNV();
        [Slot(1112)]
        
        unsafe void glTransformPathNV(UInt32 resultPath, UInt32 srcPath, System.Int32 transformType, [CountAttribute(Computed = "transformType")] Single* transformValues);
        [Slot(1119)]
        
        void glUniform1i64NV(Int32 location, Int64 x);
        [Slot(1121)]
        
        unsafe void glUniform1i64vNV(Int32 location, Int32 count, [CountAttribute(Parameter = "count*1")] Int64* value);
        [Slot(1125)]
        
        void glUniform1ui64NV(Int32 location, UInt64 x);
        [Slot(1127)]
        
        unsafe void glUniform1ui64vNV(Int32 location, Int32 count, [CountAttribute(Parameter = "count*1")] UInt64* value);
        [Slot(1135)]
        
        void glUniform2i64NV(Int32 location, Int64 x, Int64 y);
        [Slot(1137)]
        
        unsafe void glUniform2i64vNV(Int32 location, Int32 count, [CountAttribute(Parameter = "count*2")] Int64* value);
        [Slot(1141)]
        
        void glUniform2ui64NV(Int32 location, UInt64 x, UInt64 y);
        [Slot(1143)]
        
        unsafe void glUniform2ui64vNV(Int32 location, Int32 count, [CountAttribute(Parameter = "count*2")] UInt64* value);
        [Slot(1151)]
        
        void glUniform3i64NV(Int32 location, Int64 x, Int64 y, Int64 z);
        [Slot(1153)]
        
        unsafe void glUniform3i64vNV(Int32 location, Int32 count, [CountAttribute(Parameter = "count*3")] Int64* value);
        [Slot(1157)]
        
        void glUniform3ui64NV(Int32 location, UInt64 x, UInt64 y, UInt64 z);
        [Slot(1159)]
        
        unsafe void glUniform3ui64vNV(Int32 location, Int32 count, [CountAttribute(Parameter = "count*3")] UInt64* value);
        [Slot(1167)]
        
        void glUniform4i64NV(Int32 location, Int64 x, Int64 y, Int64 z, Int64 w);
        [Slot(1169)]
        
        unsafe void glUniform4i64vNV(Int32 location, Int32 count, [CountAttribute(Parameter = "count*4")] Int64* value);
        [Slot(1173)]
        
        void glUniform4ui64NV(Int32 location, UInt64 x, UInt64 y, UInt64 z, UInt64 w);
        [Slot(1175)]
        
        unsafe void glUniform4ui64vNV(Int32 location, Int32 count, [CountAttribute(Parameter = "count*4")] UInt64* value);
        [Slot(1179)]
        
        void glUniformHandleui64NV(Int32 location, UInt64 value);
        [Slot(1181)]
        
        unsafe void glUniformHandleui64vNV(Int32 location, Int32 count, [CountAttribute(Parameter = "count")] UInt64* value);
        [Slot(1201)]
        
        void glUniformui64NV(Int32 location, UInt64 value);
        [Slot(1202)]
        
        unsafe void glUniformui64vNV(Int32 location, Int32 count, [CountAttribute(Parameter = "count*1")] UInt64* value);
        [Slot(1280)]
        
        void glVertexAttribFormatNV(UInt32 index, Int32 size, System.Int32 type, bool normalized, Int32 stride);
        [Slot(1302)]
        
        void glVertexAttribIFormatNV(UInt32 index, Int32 size, System.Int32 type, Int32 stride);
        [Slot(1306)]
        
        void glVertexAttribL1i64NV(UInt32 index, Int64 x);
        [Slot(1307)]
        
        unsafe void glVertexAttribL1i64vNV(UInt32 index, [CountAttribute(Count = 1)] Int64* v);
        [Slot(1309)]
        
        void glVertexAttribL1ui64NV(UInt32 index, UInt64 x);
        [Slot(1311)]
        
        unsafe void glVertexAttribL1ui64vNV(UInt32 index, [CountAttribute(Count = 1)] UInt64* v);
        [Slot(1314)]
        
        void glVertexAttribL2i64NV(UInt32 index, Int64 x, Int64 y);
        [Slot(1315)]
        
        unsafe void glVertexAttribL2i64vNV(UInt32 index, [CountAttribute(Count = 2)] Int64* v);
        [Slot(1316)]
        
        void glVertexAttribL2ui64NV(UInt32 index, UInt64 x, UInt64 y);
        [Slot(1317)]
        
        unsafe void glVertexAttribL2ui64vNV(UInt32 index, [CountAttribute(Count = 2)] UInt64* v);
        [Slot(1320)]
        
        void glVertexAttribL3i64NV(UInt32 index, Int64 x, Int64 y, Int64 z);
        [Slot(1321)]
        
        unsafe void glVertexAttribL3i64vNV(UInt32 index, [CountAttribute(Count = 3)] Int64* v);
        [Slot(1322)]
        
        void glVertexAttribL3ui64NV(UInt32 index, UInt64 x, UInt64 y, UInt64 z);
        [Slot(1323)]
        
        unsafe void glVertexAttribL3ui64vNV(UInt32 index, [CountAttribute(Count = 3)] UInt64* v);
        [Slot(1326)]
        
        void glVertexAttribL4i64NV(UInt32 index, Int64 x, Int64 y, Int64 z, Int64 w);
        [Slot(1327)]
        
        unsafe void glVertexAttribL4i64vNV(UInt32 index, [CountAttribute(Count = 4)] Int64* v);
        [Slot(1328)]
        
        void glVertexAttribL4ui64NV(UInt32 index, UInt64 x, UInt64 y, UInt64 z, UInt64 w);
        [Slot(1329)]
        
        unsafe void glVertexAttribL4ui64vNV(UInt32 index, [CountAttribute(Count = 4)] UInt64* v);
        [Slot(1331)]
        
        void glVertexAttribLFormatNV(UInt32 index, Int32 size, System.Int32 type, Int32 stride);
        [Slot(1343)]
        
        void glVertexFormatNV(Int32 size, System.Int32 type, Int32 stride);
        [Slot(1354)]
        
        void glViewportPositionWScaleNV(UInt32 index, Single xcoeff, Single ycoeff);
        [Slot(1355)]
        
        void glViewportSwizzleNV(UInt32 index, System.Int32 swizzlex, System.Int32 swizzley, System.Int32 swizzlez, System.Int32 swizzlew);
        [Slot(1357)]
        
        void glWaitVkSemaphoreNV(UInt64 vkSemaphore);
        [Slot(1358)]
        
        unsafe void glWeightPathsNV(UInt32 resultPath, Int32 numPaths, [CountAttribute(Parameter = "numPaths")] UInt32* paths, [CountAttribute(Parameter = "numPaths")] Single* weights);
        [Slot(300)]
        
        void glFramebufferTextureMultiviewOVR(System.Int32 target, System.Int32 attachment, UInt32 texture, Int32 level, Int32 baseViewIndex, Int32 numViews);
    }
}
